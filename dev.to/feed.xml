<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>DuckEngine - A 2D Game Library for the web</title>
      <author>ksplat</author>
      <pubDate>Thu, 08 Jul 2021 17:08:11 +0000</pubDate>
      <link>https://dev.to/ksplatdev/duckengine-a-2d-game-library-for-the-web-3o7n</link>
      <guid>https://dev.to/ksplatdev/duckengine-a-2d-game-library-for-the-web-3o7n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ngW_xHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9upykoiouvkcolskt4cp.png" alt="DuckEngine"&gt;
&lt;/h1&gt;

&lt;p&gt;A 2D Game Library for the web.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ksplatdev/DuckEngine"&gt;https://github.com/ksplatdev/DuckEngine&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Collision Physics&lt;/li&gt;
&lt;li&gt;Sprites &amp;amp; Sprite sheets&lt;/li&gt;
&lt;li&gt;Many Game Objects&lt;/li&gt;
&lt;li&gt;Particle System&lt;/li&gt;
&lt;li&gt;Scenes&lt;/li&gt;
&lt;li&gt;Cameras&lt;/li&gt;
&lt;li&gt;Cutscenes&lt;/li&gt;
&lt;li&gt;Mobile Scaling&lt;/li&gt;
&lt;li&gt;Keyboard and Mouse input&lt;/li&gt;
&lt;li&gt;And a lot more&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#demos"&gt;
  &lt;/a&gt;
  Demos
&lt;/h2&gt;

&lt;p&gt;All demos are bundled with parcel-bundler and are all on codesandbox.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-shooter-game"&gt;
  &lt;/a&gt;
  &lt;a href="https://codesandbox.io/s/duckengine-space-shooter-64wkg?file=/src/scene.js"&gt;Space Shooter Game&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#test-template"&gt;
  &lt;/a&gt;
  &lt;a href="https://codesandbox.io/s/duckengine-test-7gfbt?file=/src/scene.js"&gt;Test Template&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#particle-test"&gt;
  &lt;/a&gt;
  &lt;a href="https://codesandbox.io/s/duckengine-particle-test-dhcr1?file=/src/scene.js"&gt;Particle Test&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#tilemap-test"&gt;
  &lt;/a&gt;
  &lt;a href="https://codesandbox.io/s/duckengine-tilemap-test-ryqqz?file=/src/scene.js"&gt;Tilemap test&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#download"&gt;
  &lt;/a&gt;
  Download
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="https://github.com/ksplatdev/DuckEngine/releases/latest"&gt;latest release&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Set up webpack or parcel. (or any other bundler)&lt;/li&gt;
&lt;li&gt;Import DuckEngine.&lt;/li&gt;
&lt;li&gt;Read the &lt;a href="https://ksplatdev.github.io/DuckEngine/"&gt;docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  NPM
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;npm install duckengine&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set up webpack or parcel. (or any other bundler)&lt;/li&gt;
&lt;li&gt;Import DuckEngine.&lt;/li&gt;
&lt;li&gt;Read the &lt;a href="https://ksplatdev.github.io/DuckEngine/"&gt;docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ksplatdev/DuckEngine/blob/main/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Code-on-Canvas. Develop and Design at the same time.</title>
      <author>Koen Bok</author>
      <pubDate>Thu, 08 Jul 2021 16:45:07 +0000</pubDate>
      <link>https://dev.to/koen/code-on-canvas-develop-and-design-at-the-same-time-258l</link>
      <guid>https://dev.to/koen/code-on-canvas-develop-and-design-at-the-same-time-258l</guid>
      <description>&lt;p&gt;Code plus canvas are a match made in heaven. Code lets you express any complex idea, using logic, state, etc. And a canvas for visual design lets you compose, layout, and experiment quickly with different interfaces — &lt;a href="https://www.framer.com/developers?utm_source=dev.to&amp;amp;utm_medium=link&amp;amp;utm_campaign=developers"&gt;Framer lets you combine both&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Is-nojnY61M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.framer.com/developers?utm_source=dev.to&amp;amp;utm_medium=link&amp;amp;utm_campaign=developers"&gt;Framer&lt;/a&gt; is a no-code tool for interactive design. It has a performant free-form canvas for direct manipulation like many other design tools. But the canvas was made in React, so it can render any React Component, including the ones you code yourself right inside the tool. You can even add custom UI for your component props and instantly share your components with anyone.&lt;/p&gt;

&lt;p&gt;Code in Framer lets you extend the tools capabilities. By using Code Components (React components) or Code Overrides (Higher-Order Components) you can create advanced interactions on top of your designs, share state, load real data from an API, and pretty much anything else you can think of. It’s a truly &lt;a href="https://www.framer.com/developers?utm_source=dev.to&amp;amp;utm_medium=link&amp;amp;utm_campaign=developers"&gt;hackable design tool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And with a major update to the editor and compiler to build components, the experience just got a whole lot smoother. The editor now uses swc and wasm to instantly preview your changes (or show errors). It’s a pretty nice way to build components directly in Framer, but of course you can also use external code from npm or other tools like CodeSandbox.&lt;/p&gt;

&lt;p&gt;Framer code is fully built on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;ES modules&lt;/a&gt;. That means that every module you make in Framer automatically becomes an ES module. That way it’s instantly shareable across your projects and your team member’s. But it’s technically even how they’re rendered on the canvas.&lt;/p&gt;

&lt;p&gt;Because we integrated ES modules fully in the in-app editor, you can import any http based ES module and use it in Framer directly, even from npm. No more &lt;code&gt;yarn install&lt;/code&gt;, just import the full http URL where the ES module lives:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import _ from "lodash" // Old way (need to install)
import _ from "https://jspm.dev/lodash" // ESM way
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started
&lt;/h3&gt;

&lt;p&gt;You’ll be able to pioneer new ideas faster than ever before, create custom code solutions to uplevel your whole team, and share with the whole world with a simple link. &lt;/p&gt;

&lt;p&gt;Explore our all-new &lt;a href="https://www.framer.com/developers?utm_source=dev.to&amp;amp;utm_medium=link&amp;amp;utm_campaign=developers"&gt;Framer for Developers site&lt;/a&gt; to get started. Find cool examples or start playing immediately with our code playground. And finally, join us on Discord for help or questions from a community of 6,000.&lt;/p&gt;

</description>
      <category>ux</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Build a Bookmark app using Tailwind, React and Strapi</title>
      <author>Shada </author>
      <pubDate>Thu, 08 Jul 2021 16:44:17 +0000</pubDate>
      <link>https://dev.to/strapi/how-to-build-a-bookmark-app-using-tailwind-react-and-strapi-1pki</link>
      <guid>https://dev.to/strapi/how-to-build-a-bookmark-app-using-tailwind-react-and-strapi-1pki</guid>
      <description>&lt;p&gt;This tutorial will build a Bookmarking app using React and style it with Tailwind CSS, and the backend will be built using Strapi.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-strapi-headless-cms"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Strapi Headless CMS?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://strapi.io/"&gt;Strapi&lt;/a&gt; is an open-source headless content management system (CMS) based on Nodejs used to develop APIs (RESTful and GraphQL APIs) and build the APIs content. The APIs can be built from the Strapi admin panel and also from Strapi's APIs. In addition, the content of the APIs can be added from the UI and through using the Strapi APIs.&lt;/p&gt;

&lt;p&gt;These API endpoints can then be consumed from clients (mobile, desktop, web). The APIs are created in Strapi in the form of collection or single-type. A collection in Strapi contains the endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST &lt;code&gt;/endpoints&lt;/code&gt;: This endpoint adds new content.&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/endpoints&lt;/code&gt;: Returns all data.&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/endpoints/:id&lt;/code&gt;: Returns data by its &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;DELETE &lt;code&gt;/endpoints/:id&lt;/code&gt;: Deletes a specific content.&lt;/li&gt;
&lt;li&gt;PUT &lt;code&gt;/endpoints/:id&lt;/code&gt;: Edits a specific content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strapi is both a server and a database. By default, it is powered by &lt;a href="https://koajs.com/"&gt;Koajs&lt;/a&gt;, a minimalistic web framework created by the team at &lt;a href="https://expressjs.com/"&gt;Expressjs&lt;/a&gt;, and the database is &lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do we mean by Headless CMS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A headless CMS is a CMS with only a backend. The CMS provides only the backend to the users, not the frontend. CMS like WordPress is "headful" because we can build our backend - APIs and their content on it and build the frontend on it. The frontend is the HTML page the displays content that users will see.&lt;/p&gt;

&lt;p&gt;A CMS has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A backend.&lt;/li&gt;
&lt;li&gt;a UI editor to develop and build APIs and their content.&lt;/li&gt;
&lt;li&gt;The frontend from which the APIs are consumed will be designed in the CMS, and this is what the users load to view the data in the APIs, e.g., blog or news website.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Headless CMS removes the last part. It does not provide any frontend for the users. It only provides the backend with the APIs for the users to use. So the "head" is chopped off, hence the term "headless."&lt;/p&gt;

&lt;p&gt;So the "headless" is what Strapi gives us. It separates our content from the tech stack of our website and provides the content as data over an API. So we build the backend and the frontend separately without depending on each other.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tailwind-headless-ui"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Tailwind - Headless UI&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Typically, during website design, CSS classes are created for each HTML element to style them. These CSS classes are mostly inline initially, but later on, they are extracted and held in CSS files. That's a general practice.&lt;br&gt;
Now, this will ultimately lead to huge CSS files with our styling. So Tailwind does away with CSS files. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what is Tailwind?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; is a utility-first CSS framework that lets us design websites without the need for CSS. Instead, the framework comes packed with CSS classes that we can bring together to design and style our HTML elements without leaving them there.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://tailwindcss.com/"&gt;tailwindcss&lt;/a&gt;:&lt;br&gt;
A utility-first CSS framework packed with classes like &lt;code&gt;flex&lt;/code&gt;, &lt;code&gt;pt-4&lt;/code&gt;, &lt;code&gt;text-center&lt;/code&gt;, and &lt;code&gt;rotate-90&lt;/code&gt; that can be composed to build any design directly in your markup.&lt;/p&gt;

&lt;p&gt;Unlike other CSS frameworks like Bootstrap, Foundation, Bulma, Material Design, etc. does not contain components like &lt;code&gt;Buttons&lt;/code&gt;, &lt;code&gt;Cards&lt;/code&gt;, &lt;code&gt;BottomSheets&lt;/code&gt;, etc. Instead, Tailwind only has low-level CSS classes. You then use these classes to build your components.&lt;/p&gt;

&lt;p&gt;We will build a bookmarking app to demonstrate how we can use Tailwind CSS framework and Reactjs to design and develop the app and learn how to consume our Strapi APIs from Reactjs.&lt;/p&gt;

&lt;p&gt;The bookmark app will let users store links to websites, notes, save social media posts, etc., for easy retrieval. Just like the bookmark feature of most modern browsers, it allows users to store.&lt;/p&gt;

&lt;p&gt;We will start by scaffolding a Strapi project.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#scaffolding-a-strapi-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Scaffolding a Strapi project&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Create a central folder &lt;code&gt;strapi-tailwind&lt;/code&gt;: &lt;code&gt;mkdir strapi-tailwind&lt;/code&gt;. Move into the folder: &lt;code&gt;cd strapi-tailwind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;strapi-tailwind&lt;/code&gt; folder will contain our Strapi backend and our Reactjs frontend.&lt;/p&gt;

&lt;p&gt;Now run the below command to generate a Strapi project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npx create-strapi-app strapi-api --quickstart
    # OR
    yarn create strapi-app strapi-api ---quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will create a Strapi project in &lt;code&gt;strapi-app&lt;/code&gt; folder.&lt;br&gt;
Strapi will serve the project on &lt;code&gt;localhost:1337&lt;/code&gt;. It will launch the Strapi admin UI panel on &lt;code&gt;localhost:1337/admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Fill in your details and click on the "LET'S START" button. Then, we will begin to build our bookmark collection.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#build-the-bookmark-collections"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Build the Bookmark collections&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;In our app, a bookmark will have a title, content, and synopsis. The Bookmark model will be this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Bookmark {
        title
        content
        synopsis
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; field will be the title of the bookmark. The &lt;code&gt;content&lt;/code&gt; will be the content of the bookmark, and it can be links, notes, etc. Finally, the &lt;code&gt;synopsis&lt;/code&gt; holds a preview of the bookmark's content.&lt;/p&gt;

&lt;p&gt;On the Strapi admin UI, click on the"&amp;gt; CREATE YOUR FIRST CONTENT-TYPE" button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QgQBFasy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470902072_Screenshot%2B2021-05-30%2Bat%2B09.01.09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QgQBFasy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470902072_Screenshot%2B2021-05-30%2Bat%2B09.01.09.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A modal will show up, type in &lt;code&gt;bookmark&lt;/code&gt; and click on the &lt;code&gt;Continue&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mPvlHxqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470915319_Screenshot%2B2021-05-30%2Bat%2B09.01.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mPvlHxqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470915319_Screenshot%2B2021-05-30%2Bat%2B09.01.22.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Insert the fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;Text&lt;/code&gt; field, type in "title".&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Text&lt;/code&gt; field, type in "content" and select "Long text".&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Text&lt;/code&gt; field, type in "synopsis"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGEtdh8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470927868_Screenshot%2B2021-05-30%2Bat%2B09.01.32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGEtdh8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470927868_Screenshot%2B2021-05-30%2Bat%2B09.01.32.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAeTgNqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470939433_Screenshot%2B2021-05-30%2Bat%2B09.06.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAeTgNqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470939433_Screenshot%2B2021-05-30%2Bat%2B09.06.44.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XazUEEMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470954106_Screenshot%2B2021-05-30%2Bat%2B09.09.57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XazUEEMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470954106_Screenshot%2B2021-05-30%2Bat%2B09.09.57.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;Finish&lt;/code&gt; button. On the page that appears click on the "Save" button on the top-right section of the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ka1vLo8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470974578_Screenshot%2B2021-05-30%2Bat%2B09.10.04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ka1vLo8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470974578_Screenshot%2B2021-05-30%2Bat%2B09.10.04.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Acv8JsyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470974596_Screenshot%2B2021-05-30%2Bat%2B09.16.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Acv8JsyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470974596_Screenshot%2B2021-05-30%2Bat%2B09.16.28.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will now have the below endpoints in our Bookmark collection:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST &lt;code&gt;/bookmarks&lt;/code&gt;: Create a new bookmark&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/bookmarks&lt;/code&gt;: Get all bookmarks&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/bookmarks/:id&lt;/code&gt;: Get a bookmark&lt;/li&gt;
&lt;li&gt;DELETE &lt;code&gt;/bookmarks/:id&lt;/code&gt;: Delete a bookmark&lt;/li&gt;
&lt;li&gt;PUT &lt;code&gt;/bookmarks/:id&lt;/code&gt;: Update a bookmark.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#seed-the-database"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Seed the database&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Let's insert some content in our &lt;code&gt;Bookmark&lt;/code&gt; collection. First, click on the &lt;code&gt;Bookmarks&lt;/code&gt; item on the sidebar, click on the &lt;code&gt;+ Add New Bookmarks&lt;/code&gt; button on the top-right page.&lt;/p&gt;

&lt;p&gt;Type in the below data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "title" -&amp;gt; Become a qualified dev

    "content" -&amp;gt; https://raddevon.com/5-projects-to-become-qualified-as-a-web-developer/?ck_subscriber_id=1287376433

    "synopsis" -&amp;gt; https://raddevon.com/5-projects-to-become-qua...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci_Y1-kR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471029112_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci_Y1-kR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471029112_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that we are bookmarking a link so we can retrieve it easily.&lt;/p&gt;

&lt;p&gt;Click on the "Save" button on the top-right section of the page, then click on the "Publish" button.&lt;/p&gt;

&lt;p&gt;Let's add another data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "title" -&amp;gt; A Shadaya post

    "content" -&amp;gt; When they hit their 30s, the pressure won't be about iphones, clothes, cars, it will be about who got a lovely home, a stable marriage &amp;amp; a happy family. Jealous, bitterness &amp;amp; regrets for the "woke" ones &amp;amp; happiness, joy &amp;amp; fulfilment for the "lame" ones.

    "synopsis" -&amp;gt; When they hit their 30s, the pressure won't be about iphones...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a post from social media we want to bookmark.&lt;/p&gt;

&lt;p&gt;Click on the "Save" button and then on the "Publish" button. This time let's bookmark a Twitter post link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "title" -&amp;gt; Twitter post

    "content" -&amp;gt; https://twitter.com/Drwhales_/status/1388404654342610944

    "synopsis" -&amp;gt; https://twitter.com/Drwhales_/status/138...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click on "Save" and on "Publish".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#allow-access"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Allow access&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Like this, only authenticated users can access our bookmark endpoints, but we want everybody to access them without restriction.&lt;/p&gt;

&lt;p&gt;To do that, click on the &lt;code&gt;Settings&lt;/code&gt; item on the sidebar. Then on &lt;code&gt;Roles&lt;/code&gt; on the right and &lt;code&gt;Public&lt;/code&gt;. &lt;br&gt;
Scroll down to "Permissions," and on the &lt;code&gt;BOOKMARK&lt;/code&gt; section, check the &lt;code&gt;Select all&lt;/code&gt;&lt;br&gt;
Click on the &lt;code&gt;Save&lt;/code&gt; button on the top-right. This will save these changes.&lt;br&gt;
Our &lt;code&gt;Bookmark&lt;/code&gt; collection endpoints are now openly accessible by the Public.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GDtzNyQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470743645_Screenshot%2B2021-05-31%2Bat%2B15.18.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GDtzNyQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470743645_Screenshot%2B2021-05-31%2Bat%2B15.18.44.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--291X3UKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470743665_Screenshot%2B2021-05-31%2Bat%2B15.18.51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--291X3UKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470743665_Screenshot%2B2021-05-31%2Bat%2B15.18.51.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we build our frontend.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#building-the-react-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Building the React app&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;First, we scaffold a Reactjs app. Run the below command to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npx create-react-app strapi-tailwind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move into the folder &lt;code&gt;cd strapi-tailwind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install the dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;axios&lt;/code&gt;: HTTP library, we will use it to make HTTP requests to the collection's endpoints.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;react-router-dom&lt;/code&gt;: React library for adding routing system to React apps.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    yarn add axios react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#setup-tailwind"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setup Tailwind&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Let's set up Tailwind in our project.&lt;/p&gt;

&lt;p&gt;Install the dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    yarn add --dev tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We installed the PostCSS because create-react-app does not support PostCSS 8 yet.&lt;/p&gt;

&lt;p&gt;Next, we install Craco:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    yarn add @craco/craco
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This dependency helps us configure Tailwind.&lt;/p&gt;

&lt;p&gt;Next, we will update the &lt;code&gt;scripts&lt;/code&gt; in our &lt;code&gt;package.json&lt;/code&gt; to use &lt;code&gt;craco&lt;/code&gt; instead of &lt;code&gt;react-scripts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next create a &lt;code&gt;craco.config.js&lt;/code&gt; file in the root folder and paste the below code in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    // craco.config.js
    module.exports = {
      style: {
        postcss: {
          plugins: [require("tailwindcss"), require("autoprefixer")],
        },
      },
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize Tailwind in our project by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npx tailwind init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will create a &lt;code&gt;tailwind.config.js&lt;/code&gt; in our root folder. Open it and paste the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    module.exports = {
      purge: ["./src/**/*.{js,jsx,ts,tsx}", "./public/index.html"],
      darkMode: false, // or 'media' or 'class'
      theme: {
        extend: {},
      },
      variants: {
        extend: {},
      },
      plugins: [],
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we include Tailwind in our CSS. Paste the below CSS code in your &lt;code&gt;src/index.css&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are good to go.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-components"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Build components&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Our app will have a single route &lt;code&gt;/&lt;/code&gt;, this index route will render the bookmarks in the system.&lt;br&gt;
The page will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQ2TksUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470489837_Screenshot%2B2021-05-31%2Bat%2B07.56.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQ2TksUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470489837_Screenshot%2B2021-05-31%2Bat%2B07.56.07.png" alt="List of bookmarks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tamSyHyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470489857_Screenshot%2B2021-05-31%2Bat%2B07.56.14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tamSyHyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470489857_Screenshot%2B2021-05-31%2Bat%2B07.56.14.png" alt="Adding a new bookmark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kh6Ym5Ay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470489890_Screenshot%2B2021-05-31%2Bat%2B07.57.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kh6Ym5Ay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470489890_Screenshot%2B2021-05-31%2Bat%2B07.57.29.png" alt="Editing a bookmark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-mG4CKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470489876_Screenshot%2B2021-05-31%2Bat%2B07.57.13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-mG4CKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622470489876_Screenshot%2B2021-05-31%2Bat%2B07.57.13.png" alt="Viewing a bookmark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will have a&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copy icon to copy the content of the bookmark when pressed.&lt;/li&gt;
&lt;li&gt;delete icon to delete the bookmark.&lt;/li&gt;
&lt;li&gt;view icon to view the bookmark. This will pop up a dialog that displays the title and content of the bookmark.&lt;/li&gt;
&lt;li&gt;edit icon to edit a bookmark. This icon will popup a dialog with input boxes filled with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will have the components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Header&lt;/code&gt;: This will contain the header of our app and will display on every page.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BookmarkCard&lt;/code&gt;: This component will display a bookmark title and synopsis on the index page.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AddBookmarkDialog&lt;/code&gt;: This is a dialog where new bookmarks are added to the system.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EditBookmarkDialog&lt;/code&gt;: This is a dialog where an existing bookmark will be edited.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ViewBookmarkDialog&lt;/code&gt;: This is a dialog that will display a bookmark's content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BookmarkList&lt;/code&gt;: This component displays all the bookmarks in our system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above components will reside in a &lt;code&gt;components&lt;/code&gt; folder. Let's begin to create them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    mkdir src/components
    cd src/components

    mkdir Header
    touch Header/index.js

    mkdir BookmarkCard
    touch BookmarkCard/index.js

    mkdir AddBookmarkDialog
    touch AddBookmarkDialog/index.js

    mkdir EditBookmarkDialog
    touch EditBookmarkDialog/index.js

    mkdir ViewBookmarkDialog
    touch ViewBookmarkDialog/index.js

    mkdir BookmarkList
    touch BookmarkList/index.js

    mkdir CloseIcon
    touch CloseIcon/index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start with the &lt;code&gt;Header&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Header&lt;/strong&gt;&lt;br&gt;
This component will hold a simple UI of the header section. Paste the below code to &lt;code&gt;src/components/Header/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    export default function Header() {
      return (
        &amp;lt;section class="p-4 text-2xl font-bold bg-red-600 text-white mb-4"&amp;gt;
          &amp;lt;div&amp;gt;Bookmarks&amp;lt;/div&amp;gt;
        &amp;lt;/section&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See how we styled our header by applying Tailwind utility classes. We didn't use React's own &lt;code&gt;className&lt;/code&gt;, everything is done in the &lt;code&gt;class&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;p-4&lt;/code&gt; applies padding of 4px to all the corners(top, bottom, left, and right). The &lt;code&gt;text-2xl&lt;/code&gt; gives it a font size of 1.5rem. The &lt;code&gt;font-bold&lt;/code&gt; sets the text to be bold. The &lt;code&gt;bg-red-600&lt;/code&gt; sets the background color of the header to be red in color with a darker opacity. The &lt;code&gt;text-white&lt;/code&gt; sets the text color to be white. The &lt;code&gt;mb-4&lt;/code&gt; sets the bottom margin of the header to be 4px.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CopyIcon&lt;/strong&gt;&lt;br&gt;
We will add a &lt;code&gt;CopyIcon&lt;/code&gt; component. This component will render an svg icon representation of the copy symbol.&lt;/p&gt;

&lt;p&gt;Paste the below code to &lt;code&gt;src/components/CloseIcon/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    export default function CloseIcon() {
      return (
        &amp;lt;svg
          width="12px"
          height="10px"
          xmlns="http://www.w3.org/2000/svg"
          style={{ cursor: "pointer" }}
          fill="white"
        &amp;gt;
          &amp;lt;path
            d="M10.0719417,0.127226812 C10.1612888,0.127226812 10.2403266,0.161591074 10.3090551,0.230319596 L10.3090551,0.230319596 L10.8245191,0.745783513 C10.8932476,0.814512036 10.9276118,0.893549837 10.9276118,0.982896916 C10.9276118,1.07224399 10.8932476,1.1512818 10.8245191,1.22001032 L10.8245191,1.22001032 L6.77297267,5.27155671 L10.8245191,9.3231031 C10.8932476,9.39183162 10.9276118,9.47086942 10.9276118,9.5602165 C10.9276118,9.64956358 10.8932476,9.72860138 10.8245191,9.79732991 L10.8245191,9.79732991 L10.3090551,10.3127938 C10.2403266,10.3815223 10.1612888,10.4158866 10.0719417,10.4158866 C9.98259466,10.4158866 9.90355686,10.3815223 9.83482834,10.3127938 L9.83482834,10.3127938 L5.92809485,6.40509433 C4.98802554,7.34516364 3.68545904,8.64773014 2.02039535,10.3127938 C1.95166683,10.3815223 1.87262903,10.4158866 1.78328195,10.4158866 C1.69393487,10.4158866 1.61489707,10.3815223 1.54616855,10.3127938 L1.03070463,9.79732991 C0.961976106,9.72860138 0.927611845,9.64956358 0.927611845,9.5602165 C0.927611845,9.47086942 0.961976106,9.39183162 1.03070463,9.3231031 L5.08225102,5.27155671 L1.03070463,1.22001032 C0.961976106,1.1512818 0.927611845,1.07224399 0.927611845,0.982896916 C0.927611845,0.893549837 0.961976106,0.814512036 1.03070463,0.745783513 L1.54616855,0.230319596 C1.61489707,0.161591074 1.69393487,0.127226812 1.78328195,0.127226812 C1.87262903,0.127226812 1.95166683,0.161591074 2.02039535,0.230319596 L5.92761184,4.13822681 L9.83482834,0.230319596 C9.88637473,0.178773204 9.94372009,0.146556709 10.0068644,0.133670111 Z"
            fillRule="nonzero"
          &amp;gt;&amp;lt;/path&amp;gt;
        &amp;lt;/svg&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We render an svg code of the copy symbol above. We made the icon to be 12px wide and 10px high. Also, we used the styling &lt;code&gt;style={{ cursor: "pointer" }}&lt;/code&gt; to make the cursor transform to a hand icon when the mouse cursor hovers above the copy icon, it gives the users hint that the copy icon is clickable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BookmarkCard&lt;/strong&gt;&lt;br&gt;
This component will receive a bookmark in its props and then proceed to display its title and synopsis.&lt;/p&gt;

&lt;p&gt;Paste the below code on &lt;code&gt;src/components/BookmarkCard/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from "axios";
    import ViewBookmarkDialog from "./../ViewBookmarkDialog";
    import EditBookmarkDialog from "./../EditBookmarkDialog";
    import { useState } from "react";

    export default function BookmarkCard({ bookmark }) {
      const { id, title, content, synopsis } = bookmark;
      const [edit, setEdit] = useState(false);
      const [view, setView] = useState(false);
      const [showCopy, setShowCopy] = useState(false);
      var timeout;

      function copyBookmark() {
        navigator.clipboard.writeText(content).then(
          function () {
            /* clipboard successfully set */
            setShowCopy(true);
            clearTimeout(timeout);
            timeout = setTimeout(() =&amp;gt; {
              setShowCopy(false);
            }, 1000);
          },
          function () {
            /* clipboard write failed */
            setShowCopy(false);
          }
        );
      }

      function viewBookmark() {
        setView(true);
      }
      function editBookmark() {
        setEdit(true);
      }

      async function deleteBookmark() {
        if (window.confirm("Do you want to delete this bookmark?")) {
          await axios.delete("http://localhost:1337/bookmarks/" + id);
          window.location.reload();
        }
      }

      return (
        &amp;lt;div
          style={{ width: "600px" }}
          class="border border-gray-200 rounded-md m-3 p-4 shadow-md bg-white hover:shadow-xl"
        &amp;gt;
          {showCopy ? &amp;lt;Message /&amp;gt; : null}
          &amp;lt;div class="py-2"&amp;gt;
            &amp;lt;h4 class="text-xl font-bold"&amp;gt;{title}&amp;lt;/h4&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div&amp;gt;{synopsis}&amp;lt;/div&amp;gt;
          &amp;lt;div class="py-2 my-3 flex"&amp;gt;
            &amp;lt;span
              class="cursor-pointer inline mx-1 text-white font-bold py-2 px-4 rounded"
              onClick={copyBookmark}
            &amp;gt;
              &amp;lt;CopyIcon /&amp;gt;
            &amp;lt;/span&amp;gt;
            &amp;lt;span
              class="cursor-pointer inline mx-1 text-white font-bold py-2 px-4 rounded"
              onClick={deleteBookmark}
            &amp;gt;
              &amp;lt;DeleteIcon /&amp;gt;
            &amp;lt;/span&amp;gt;
            &amp;lt;span
              class="cursor-pointer inline mx-1 text-white font-bold py-2 px-4 rounded"
              onClick={viewBookmark}
            &amp;gt;
              &amp;lt;ViewIcon /&amp;gt;
            &amp;lt;/span&amp;gt;
            &amp;lt;span
              class="cursor-pointer inline mx-1 text-white font-bold py-2 px-4 rounded"
              onClick={editBookmark}
            &amp;gt;
              &amp;lt;EditIcon /&amp;gt;
            &amp;lt;/span&amp;gt;
          &amp;lt;/div&amp;gt;
          {view ? (
            &amp;lt;ViewBookmarkDialog
              bookmark={bookmark}
              closeModal={() =&amp;gt; setView(false)}
            /&amp;gt;
          ) : null}
          {edit ? (
            &amp;lt;EditBookmarkDialog
              bookmark={bookmark}
              closeModal={() =&amp;gt; setEdit(false)}
            /&amp;gt;
          ) : null}
        &amp;lt;/div&amp;gt;
      );
    }

    function DeleteIcon() {
      return (
        &amp;lt;svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#e73d52"
        &amp;gt;
          &amp;lt;path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" /&amp;gt;
        &amp;lt;/svg&amp;gt;
      );
    }

    function CopyIcon() {
      return (
        &amp;lt;svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#e73d52"
        &amp;gt;
          &amp;lt;path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z" /&amp;gt;
        &amp;lt;/svg&amp;gt;
      );
    }

    function ViewIcon() {
      return (
        &amp;lt;svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#e73d52"
        &amp;gt;
          &amp;lt;path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" /&amp;gt;
        &amp;lt;/svg&amp;gt;
      );
    }

    function EditIcon() {
      return (
        &amp;lt;svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#e73d52"
        &amp;gt;
          &amp;lt;path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" /&amp;gt;
        &amp;lt;/svg&amp;gt;
      );
    }

    function Message() {
      return (
        &amp;lt;div class="z-50 fixed flex p-3 bg-blue-200 rounded-md border-2 border-blue-600 font-bold opacity-90"&amp;gt;
          &amp;lt;div class="mr-2"&amp;gt;
            &amp;lt;svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="#e73d52"
            &amp;gt;
              &amp;lt;path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" /&amp;gt;
            &amp;lt;/svg&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div&amp;gt;
            &amp;lt;span class="text-red-600"&amp;gt;Copied!&amp;lt;/span&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the component destructures the passed in bookmark object from its props.&lt;br&gt;
Next, we destructured the bookmark's &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, and &lt;code&gt;synopsis&lt;/code&gt; from the &lt;code&gt;bookmark&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;We have states &lt;code&gt;edit&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt; and &lt;code&gt;showCopy&lt;/code&gt;,the &lt;code&gt;edit&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; states toggles the &lt;code&gt;EditBookmarkDialog&lt;/code&gt; and &lt;code&gt;ViewBookmarkDialog&lt;/code&gt; visibility respectively. The &lt;code&gt;showCopy&lt;/code&gt; toggles a message component when a bookmark's content is copied.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;timeout&lt;/code&gt; will hold a &lt;code&gt;setTimeout&lt;/code&gt; id, we will use this to clear out timeouts.&lt;br&gt;
The UI of this component displays the title and the synopsis of the bookmark. We used several Tailwind classes to design this component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cursor-pointer&lt;/code&gt;: This makes the mouse take the shape of a hand.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rounded-md&lt;/code&gt;: This makes the element's border-radius to be &lt;code&gt;0.25rem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;inline&lt;/code&gt;: This makes the element to be an inline element.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex&lt;/code&gt;: This sets &lt;code&gt;display:flex;&lt;/code&gt; on the element.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hover: shadow-xl&lt;/code&gt;: This sets the box-shadow to be deeper when the element is hovered with a mouse.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;border&lt;/code&gt;: The border width is 1px&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;border-gray-200&lt;/code&gt;: The border color is darker gray.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;py-2&lt;/code&gt;: This sets the top and bottom padding of the element to be 2px.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;m-3&lt;/code&gt;: This sets the margin of the element to be 3px.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;shadow-md&lt;/code&gt;: This sets the box-shadow of the element to be &lt;code&gt;0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;z-50&lt;/code&gt;: The element has a z-index of 50. This controls the stack order of elements.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fixed&lt;/code&gt;: Makes the element a positioned element, in this case, a fixed element.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;opacity-90&lt;/code&gt;: Makes the element have an opacity of 0.9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, we have icons to copy, delete, edit, and view the bookmark. We used svg code to display the icons. Each icon has its component:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DeleteIcon&lt;/code&gt; - has svg code that renders a delete icon.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ViewIcon&lt;/code&gt; - has svg code that renders an eye icon that denotes viewing an item.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CopyIcon&lt;/code&gt; - this renders an svg code that renders a copy icon.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EditIcon&lt;/code&gt; - renders svg code that renders an edit icon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We enclosed each icon in &lt;code&gt;span&lt;/code&gt; element with an &lt;code&gt;onClick&lt;/code&gt; attribute. The &lt;code&gt;copyBookmark&lt;/code&gt; function triggered by the copy icon, uses the Clipboard API to copy the contents of the bookmark.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;viewBookmark&lt;/code&gt; sets the &lt;code&gt;view&lt;/code&gt; state to true which causes the &lt;code&gt;ViewBookmarkDialog&lt;/code&gt; to show up. The &lt;code&gt;bookmark&lt;/code&gt; and a &lt;code&gt;closeModal&lt;/code&gt; function are sent to the component so the component can respectively access the bookmark and close itself using the &lt;code&gt;closeModal&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;editBookmark&lt;/code&gt; function sets the &lt;code&gt;edit&lt;/code&gt; state to true which displays the &lt;code&gt;EditBookmarkDialog&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deleteBookmark&lt;/code&gt; function deletes the current bookmark from the db. It makes a DELETE HTTP request to &lt;code&gt;localhost:1337/bookmarks/+id&lt;/code&gt;. The &lt;code&gt;id&lt;/code&gt; will be the id of the bookmark, after the request the page is reloaded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AddBookmarkDialog&lt;/strong&gt;&lt;br&gt;
This component is where we add new bookmarks. Paste the below code to &lt;code&gt;src/components/AddBookmarkDialog/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from "axios";
    import { useRef } from "react";
    import CloseIcon from "./../CloseIcon";

    export default function AddBookmarkDialog({ closeModal }) {
      const formRef = useRef();

      async function addBookmark() {
        var { title, content } = formRef.current;
        title = title.value;
        content = content.value;

        await axios.post("http://localhost:1337/bookmarks", {
          title,
          content,
          synopsis: content.slice(0, 100) + "...",
        });
        window.location.reload();
      }

      return (
        &amp;lt;div class="modal fixed -top-0 left-0 w-full h-full flex flex-col z-0 items-center"&amp;gt;
          &amp;lt;div
            class="modal-backdrop opacity-70 bg-gray-50 fixed w-full h-full z-10"
            onClick={closeModal}
          &amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div class="modal-content z-20 w-2/5 mt-5 bg-white shadow-md"&amp;gt;
            &amp;lt;div class="modal-header flex justify-between items-center bg-red-600 p-3 text-white"&amp;gt;
              &amp;lt;h3 class="text-white font-bold"&amp;gt;Add Bookmark&amp;lt;/h3&amp;gt;
              &amp;lt;span
                style={{ padding: "10px", cursor: "pointer" }}
                onClick={closeModal}
              &amp;gt;
                &amp;lt;CloseIcon /&amp;gt;
              &amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="modal-body content m-2 p-5 z-50"&amp;gt;
              &amp;lt;form ref={formRef}&amp;gt;
                &amp;lt;div class="w-full"&amp;gt;
                  &amp;lt;div class="pl-2"&amp;gt;
                    &amp;lt;span&amp;gt;TITLE&amp;lt;/span&amp;gt;
                  &amp;lt;/div&amp;gt;

                  &amp;lt;input
                    type="text"
                    class="border-gray-200 border-2 w-full m-2 p-2 rounded-md"
                    placeholder="Type in title.."
                    name="title"
                  /&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="w-full"&amp;gt;
                  &amp;lt;div class="pl-2 mt-3"&amp;gt;
                    &amp;lt;span&amp;gt;CONTENT&amp;lt;/span&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;textarea
                    type="text"
                    class="border-gray-200 border-2 w-full m-2 p-2 rounded-md"
                    placeholder="Type in content.."
                    name="content"
                  &amp;gt;&amp;lt;/textarea&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="modal-footer flex justify-between p-4 bg-gray-200"&amp;gt;
              &amp;lt;button
                class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-1 px-3 rounded"
                onClick={closeModal}
              &amp;gt;
                Cancel
              &amp;lt;/button&amp;gt;
              &amp;lt;button
                class="bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded"
                onClick={addBookmark}
              &amp;gt;
                Add
              &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See it has input boxes where the title and content of the bookmark are to be typed. The &lt;code&gt;Add&lt;/code&gt; button calls the &lt;code&gt;addBookmark&lt;/code&gt; function, this function retrieves the values of the bookmark's title and content from the input boxes. &lt;/p&gt;

&lt;p&gt;Then it makes a POST HTTP request to &lt;code&gt;localhost:1337/bookmarks&lt;/code&gt; with the synopsis, title, and content retrieved from the UI as payload. The synopsis is generated by slicing off 100 words from the content to get a preview of the content. This request adds the bookmark to our Strapi backend. The page is reloaded which displays the newly added bookmark on the UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BookmarkList&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This component gets the list of bookmarks from the Strapi endpoint &lt;code&gt;localhost:1337/bookmarks&lt;/code&gt; and displays them.&lt;/p&gt;

&lt;p&gt;Add the below code to &lt;code&gt;src/components/BookmarkList/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import BookmarkCard from "./../BookmarkCard";
    import axios from "axios";
    import { useEffect, useState } from "react";
    import AddBookmarkDialog from "./../AddBookmarkDialog";

    export default function BookmarkList(params) {
      const [bookmarks, setBookmarks] = useState([]);
      const [showAddBookmarkDialog, setShowAddBookmarkDialog] = useState(false);

      useEffect(async () =&amp;gt; {
        const data = await axios.get("http://localhost:1337/bookmarks");
        setBookmarks(data?.data);
      }, []);

      return (
        &amp;lt;div class="flex flex-col flex-wrap justify-center"&amp;gt;
          &amp;lt;div class="m-2 p-2"&amp;gt;
            &amp;lt;button
              onClick={() =&amp;gt; setShowAddBookmarkDialog(true)}
              class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
            &amp;gt;
              Add Bookmark
            &amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div&amp;gt;
            {bookmarks
              ?.sort((a, b) =&amp;gt; b.created_at.localeCompare(a.created_at))
              .map((bookmark, i) =&amp;gt; (
                &amp;lt;BookmarkCard bookmark={bookmark} key={i} /&amp;gt;
              ))}
          &amp;lt;/div&amp;gt;
          {showAddBookmarkDialog ? (
            &amp;lt;AddBookmarkDialog closeModal={() =&amp;gt; setShowAddBookmarkDialog(false)} /&amp;gt;
          ) : null}
        &amp;lt;/div&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a state, &lt;code&gt;bookmarks&lt;/code&gt;. This is an array state that will hold the bookmarks fetched from our Strapi backend.&lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;useEffect&lt;/code&gt; hook to call the localhost:1337/bookmarks endpoint. The returned bookmarks are set to the &lt;code&gt;bookmarks&lt;/code&gt; state. The &lt;code&gt;bookmarks&lt;/code&gt; are then rendered using the &lt;code&gt;Array#map&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Add Bookmark&lt;/code&gt; button displays the &lt;code&gt;AddBookmarkDialog&lt;/code&gt; component when clicked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EditBookmarkDialog&lt;/strong&gt;&lt;br&gt;
This component is where we can edit a selected bookmark. Paste the below code in &lt;code&gt;src/components/EditBookmarkDialog/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from "axios";
    import { useRef } from "react";
    import CloseIcon from "../CloseIcon";

    export default function EditBookmarkDialog({ closeModal, bookmark }) {
      const formRef = useRef();

      async function editBookmark() {
        var { title, content } = formRef.current;
        title = title.value;
        content = content.value;

        await axios.put("http://localhost:1337/bookmarks/" + bookmark?.id, {
          title,
          content,
          synopsis: content.slice(0, 100) + "...",
        });
        window.location.reload();
      }

      return (
        &amp;lt;div class="modal fixed -top-0 left-0 w-full h-full flex flex-col z-0 items-center"&amp;gt;
          &amp;lt;div
            class="modal-backdrop opacity-70 bg-gray-50 fixed w-full h-full z-10"
            onClick={closeModal}
          &amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div class="modal-content z-20 w-2/5 mt-5 bg-white shadow-md"&amp;gt;
            &amp;lt;div class="modal-header flex justify-between items-center bg-red-600 p-3 text-white"&amp;gt;
              &amp;lt;h3 class="text-white font-bold"&amp;gt;Edit Bookmark&amp;lt;/h3&amp;gt;
              &amp;lt;span
                style={{ padding: "10px", cursor: "pointer" }}
                onClick={closeModal}
              &amp;gt;
                &amp;lt;CloseIcon /&amp;gt;
              &amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="modal-body content m-2 p-5 z-50"&amp;gt;
              &amp;lt;form ref={formRef}&amp;gt;
                &amp;lt;div class="w-full"&amp;gt;
                  &amp;lt;div class="pl-2"&amp;gt;
                    &amp;lt;span&amp;gt;TITLE&amp;lt;/span&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;input
                    type="text"
                    class="border-gray-200 border-2 w-full m-2 p-2 rounded-md"
                    placeholder="Type in title..."
                    defaultValue={bookmark?.title}
                    name="title"
                  /&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="w-full"&amp;gt;
                  &amp;lt;div class="pl-2 mt-3"&amp;gt;
                    &amp;lt;span&amp;gt;CONTENT&amp;lt;/span&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;textarea
                    type="text"
                    class="border-gray-200 border-2 w-full m-2 p-2 rounded-md"
                    placeholder="Type in content..."
                    defaultValue={bookmark?.content}
                    name="content"
                  &amp;gt;&amp;lt;/textarea&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="modal-footer flex justify-between p-4 bg-gray-200"&amp;gt;
              &amp;lt;button
                class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-1 px-3 rounded"
                onClick={closeModal}
              &amp;gt;
                Cancel
              &amp;lt;/button&amp;gt;
              &amp;lt;button
                class="bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded"
                onClick={editBookmark}
              &amp;gt;
                Save
              &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The selected bookmark to edit is sent via the component props. It is destructured to &lt;code&gt;bookmark&lt;/code&gt;.&lt;br&gt;
The title and content of the bookmark are set in the input boxes. Here the user can then modify their contents.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Save&lt;/code&gt; button calls the &lt;code&gt;editBookmark&lt;/code&gt; function, this function collects the values of the bookmark's from the input boxes. It generates a synopsis from the content, then makes an HTTP PUT request to &lt;code&gt;localhost:1337/bookmarks/+id&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;synopsis&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, and &lt;code&gt;content&lt;/code&gt; are sent as payload. The &lt;code&gt;id&lt;/code&gt; will be the id of the bookmark, this enables Strapi to edit the bookmark with the sent payload.&lt;/p&gt;

&lt;p&gt;Finally, the page is reloaded so we see the updated bookmark.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ViewBookmarkDialog&lt;/strong&gt;&lt;br&gt;
The component is used to view a bookmark. Paste the below code in the &lt;code&gt;src/components/ViewBookmarkDialog/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import CloseIcon from "./../CloseIcon";

    export default function ViewBookmarkDialog({ closeModal, bookmark }) {
      return (
        &amp;lt;div class="modal fixed -top-0 left-0 w-full h-full flex flex-col z-0 items-center"&amp;gt;
          &amp;lt;div
            class="modal-backdrop opacity-70 bg-gray-50 fixed w-full h-full z-10"
            onClick={closeModal}
          &amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div class="modal-content z-20 w-2/5 mt-5 bg-white shadow-md"&amp;gt;
            &amp;lt;div class="modal-header flex justify-between items-center bg-red-600 p-3 text-white"&amp;gt;
              &amp;lt;h3 class="text-white font-bold"&amp;gt;View Bookmark&amp;lt;/h3&amp;gt;
              &amp;lt;span
                style={{ padding: "10px", cursor: "pointer" }}
                onClick={closeModal}
              &amp;gt;
                &amp;lt;CloseIcon /&amp;gt;
              &amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="modal-body content m-2 p-5 z-50"&amp;gt;
              &amp;lt;div class="w-full"&amp;gt;
                &amp;lt;div class="pl-2"&amp;gt;
                  &amp;lt;span&amp;gt;TITLE&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;

                &amp;lt;input
                  type="text"
                  class="border-gray-200 border-2 w-full m-2 p-2 rounded-md"
                  placeholder="Type in title.."
                  defaultValue={bookmark?.title}
                  disabled={true}
                /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;div class="w-full"&amp;gt;
                &amp;lt;div class="pl-2 mt-3"&amp;gt;
                  &amp;lt;span&amp;gt;CONTENT&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;

                &amp;lt;textarea
                  type="text"
                  class="border-gray-200 border-2 w-full m-2 p-2 rounded-md"
                  placeholder="Type in content.."
                  disabled={true}
                  defaultValue={bookmark?.content}
                &amp;gt;&amp;lt;/textarea&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="modal-footer flex justify-between p-4 bg-gray-200"&amp;gt;
              &amp;lt;button
                class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-1 px-3 rounded"
                onClick={closeModal}
              &amp;gt;
                Close
              &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component destructures the &lt;code&gt;bookmark&lt;/code&gt; object and &lt;code&gt;closeModal&lt;/code&gt; function from its props. It displays the title and the content from the bookmark object. The &lt;code&gt;closeModal&lt;/code&gt; function closes the component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;br&gt;
We will add routing to our &lt;code&gt;App&lt;/code&gt; component, paste the below code to &lt;code&gt;src/App.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import "./App.css";
    import { BrowserRouter, Route, Switch } from "react-router-dom";
    import Header from "./components/Header";
    import BookmarkList from "./components/BookmarkList";

    function App() {
      return (
        &amp;lt;&amp;gt;
          &amp;lt;Header /&amp;gt;
          &amp;lt;div class="container bg-gray-100"&amp;gt;
            &amp;lt;head&amp;gt;
              &amp;lt;title&amp;gt;Bookmark&amp;lt;/title&amp;gt;
              &amp;lt;link rel="icon" href="/favicon.ico" /&amp;gt;
            &amp;lt;/head&amp;gt;

            &amp;lt;main class="flex justify-center mx-86"&amp;gt;
              &amp;lt;BrowserRouter&amp;gt;
                &amp;lt;Switch&amp;gt;
                  &amp;lt;Route exact path="/"&amp;gt;
                    &amp;lt;BookmarkList /&amp;gt;
                  &amp;lt;/Route&amp;gt;
                  &amp;lt;Route path="*"&amp;gt;
                    &amp;lt;BookmarkList /&amp;gt;
                  &amp;lt;/Route&amp;gt;{" "}
                &amp;lt;/Switch&amp;gt;
              &amp;lt;/BrowserRouter&amp;gt;
            &amp;lt;/main&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/&amp;gt;
      );
    }

    export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a single route which is the &lt;code&gt;/&lt;/code&gt; index route. We used the &lt;code&gt;Route&lt;/code&gt; component from &lt;code&gt;react-touter-dom&lt;/code&gt; to render the &lt;code&gt;BookmarkList&lt;/code&gt; component when the index route &lt;code&gt;/&lt;/code&gt; is navigated.&lt;/p&gt;

&lt;p&gt;We see that the &lt;code&gt;Header&lt;/code&gt; component is outside the &lt;code&gt;BrowserRouter&lt;/code&gt;, this makes it render on every page in our routing system.&lt;/p&gt;

&lt;p&gt;See that the &lt;code&gt;div&lt;/code&gt; element below the &lt;code&gt;Header&lt;/code&gt; is set to have &lt;code&gt;container&lt;/code&gt; in its &lt;code&gt;class&lt;/code&gt; attribute. We want the &lt;code&gt;div&lt;/code&gt; element to center its content. To do that we have to go to the &lt;code&gt;tailwind.config.js&lt;/code&gt; file and make an addition to the &lt;code&gt;theme.extend&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Add the below code to &lt;code&gt;tailwind.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    module.exports = {
      purge: ["./src/**/*.{js,jsx,ts,tsx}", "./public/index.html"],
      darkMode: false, // or 'media' or 'class'
      theme: {
        extend: {
          container: {
            center: true,
          },
        },
      },
      variants: {
        extend: {},
      },
      plugins: [],
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;div.container&lt;/code&gt; will center its content.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#testing-the-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Testing the app&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Make sure your Strapi backend is running and your Reactjs is running too if not, start your Reactjs server with the below command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the Strapi server run the below command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    yarn develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Add bookmark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TkaHtl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471238682_Screenshot%2B2021-05-31%2Bat%2B15.25.09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TkaHtl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471238682_Screenshot%2B2021-05-31%2Bat%2B15.25.09.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8kly2Kp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471250233_Screenshot%2B2021-05-31%2Bat%2B15.25.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kly2Kp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471250233_Screenshot%2B2021-05-31%2Bat%2B15.25.17.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;View bookmark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wdhqyeNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471569573_Screenshot%2B2021-05-31%2Bat%2B15.26.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wdhqyeNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471569573_Screenshot%2B2021-05-31%2Bat%2B15.26.21.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copy bookmark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_NPxLQej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471261609_Screenshot%2B2021-05-31%2Bat%2B15.25.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_NPxLQej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471261609_Screenshot%2B2021-05-31%2Bat%2B15.25.59.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit bookmark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1eRlzgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471587527_Screenshot%2B2021-05-31%2Bat%2B15.26.30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1eRlzgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471587527_Screenshot%2B2021-05-31%2Bat%2B15.26.30.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJOpZdtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471601669_Screenshot%2B2021-05-31%2Bat%2B15.26.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJOpZdtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471601669_Screenshot%2B2021-05-31%2Bat%2B15.26.36.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete bookmark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h4WnGCIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471615143_Screenshot%2B2021-05-31%2Bat%2B15.26.43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h4WnGCIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471615143_Screenshot%2B2021-05-31%2Bat%2B15.26.43.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nmgu7Otg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471625680_Screenshot%2B2021-05-31%2Bat%2B15.26.47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nmgu7Otg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_208E889A506E206117114FEBF5C46A437A791A95FE2653C1619BD678CD1A856B_1622471625680_Screenshot%2B2021-05-31%2Bat%2B15.26.47.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can get the source code of the backend and frontend of this app below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Source code&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/strapi-prjs/strapi-bookmark-tailwind"&gt;Frontend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/strapi-prjs/strapi-bookmark-api"&gt;Backend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/docs/border-radius"&gt;&lt;strong&gt;Border Radius&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codingthesmartway.com/tailwind-css-for-absolute-beginners/"&gt;Tailwind CSS For Absolute Beginners&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.joshbritz.co/posts/the-sexiness-of-headless-ui/"&gt;The Sexiness of Headless UI Components&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;This was my very first time using Tailwind CSS, and I must say it blew my mind. It made my job very fast and easy. The fantastic thing is that I built this app without writing a single line of CSS code !!&lt;/p&gt;

&lt;p&gt;Let's recap, we started by learning about Headless CMS and headless UI, then we proceeded to learn about Strapi and Tailwind CSS. They are examples of Headless CMS and Headless UI, respectively. Later on, we demonstrated how to use both Strapi and Tailwind CSS by building a Bookmarking app.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>react</category>
      <category>strapi</category>
    </item>
    <item>
      <title>Strings in GO</title>
      <author>iyiola-dev</author>
      <pubDate>Thu, 08 Jul 2021 16:34:37 +0000</pubDate>
      <link>https://dev.to/iyioladev/strings-in-go-3d5a</link>
      <guid>https://dev.to/iyioladev/strings-in-go-3d5a</guid>
      <description>&lt;p&gt;The Strings and Strconv library&lt;/p&gt;

&lt;p&gt;Unlike other programming languages like Dart, Java, or Javascript, you can easily add a method to a String or convert a string to int without a package/library. In golang that is not very easy without a library. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-strconv-library"&gt;
  &lt;/a&gt;
  THE STRCONV LIBRARY
&lt;/h3&gt;

&lt;p&gt;The first one we will be talking about will be the strconv library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://golang.org/pkg/strconv/"&gt;link to the docs&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The most common use of the strconv library/package is converting &lt;code&gt;string to int&lt;/code&gt; or &lt;code&gt;int to String&lt;/code&gt; and few other things will start by importing the package like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So for converting int to string or vice versa there are 2 commands :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Itoa: used to convert int to string.&lt;/li&gt;
&lt;li&gt;Atoi: used to convert string to int.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first one we will use is &lt;code&gt;Itoa&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;
    &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"letter is a %T"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run this  you should see something like &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;letter is a string&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next thing is &lt;code&gt;Atoi&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"4"&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%T is a number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run this you should see something like &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;int is a number&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, there are a lot more other things you can do with this package. you can check the docs for more functions.&lt;/p&gt;

&lt;p&gt;### THE STRINGS PACKAGE &lt;/p&gt;

&lt;p&gt;&lt;a href="https://golang.org/pkg/strings/"&gt;Link to the official documentation&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can do many things with this package, but we will only be treating a few for this article.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Replace&lt;/code&gt; function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Split&lt;/code&gt; function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;ToLower&lt;/code&gt; function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;ToUpper&lt;/code&gt; function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Contains&lt;/code&gt; function&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-raw-replace-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;Replace&lt;/code&gt; function
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Replace&lt;/code&gt; function accepts 4 arguments: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The string &lt;/li&gt;
&lt;li&gt;The string to be replaced&lt;/li&gt;
&lt;li&gt;What should the string  it should be replaced with&lt;/li&gt;
&lt;li&gt;The number of replacement occurrences &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;NB: for the number of occurrences, the string should be replaced if the number is a negative integer. It will replace all occurrences, but then instead of passing a negative integer, one can use the &lt;code&gt;ReplaceAll&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;So I am going to show 2 examples with different cases of how this is used below.&lt;/p&gt;

&lt;p&gt;1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"The boy is stupid stupid"&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"stupid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"wise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This replaces the first occurrence of &lt;code&gt;stupid&lt;/code&gt; with &lt;code&gt;wise&lt;/code&gt; because we specified that it should be done only once with the integer &lt;code&gt;1&lt;/code&gt;. If we replace it with &lt;code&gt;2&lt;/code&gt; it will change both stupid to wise.&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"The boy is stupid stupid"&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"stupid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"wise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should show &lt;code&gt;The boy is wise wise&lt;/code&gt; as a result when you run it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-split-function"&gt;
  &lt;/a&gt;
  The Split Function
&lt;/h4&gt;

&lt;p&gt;The split function takes in 2 arguments the strings to be separated and what should be used as the string to separate them then it returns a slice containing the strings separated. If there is no result it will return the slice with only one element which is the string. An example will be shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"season 03,season02,season01"&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%q&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result when this runs will be &lt;code&gt;["season 03" "season02" "season01"]&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-tolower-function"&gt;
  &lt;/a&gt;
  The ToLower Function
&lt;/h4&gt;

&lt;p&gt;The ToLower function as the name suggests turns a string to lower case. It accepts only one argument, the string to be turned. An example will be shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"The Boy is Foolish"&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;when this runs the result will be &lt;code&gt;the boy is foolish&lt;/code&gt; which means the case has been changed to lowercase.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-toupper-function"&gt;
  &lt;/a&gt;
  The ToUpper Function
&lt;/h4&gt;

&lt;p&gt;The ToUpper function as the name suggests turns a string to uppercase. It accepts only one argument, the string to be turned. An example will be shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"the boy is foolish"&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;when this runs the result will be &lt;code&gt;THE BOY IS FOOLISH&lt;/code&gt; which means the case has been changed to uppercase.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-contains-function"&gt;
  &lt;/a&gt;
  The Contains Function
&lt;/h4&gt;

&lt;p&gt;The contains functions check if a substring is part of a string provided, so it takes 2 arguments, the string to be checked and the substring, then it returns a bool. An example is provided below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"trinkets"&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rin"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This returns a boolean of true because the word rin can be found in trinkets otherwise it would have returned false.&lt;/p&gt;

&lt;p&gt;A whole lot more can be done with the &lt;code&gt;Strconv&lt;/code&gt; and the &lt;code&gt;Strings&lt;/code&gt; package check out the docs for more&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title> Build Gmail Clone using HTML &amp; CSS </title>
      <author>Christopher Glikpo</author>
      <pubDate>Thu, 08 Jul 2021 16:22:50 +0000</pubDate>
      <link>https://dev.to/cglikpo/build-gmail-clone-using-html-css-36ak</link>
      <guid>https://dev.to/cglikpo/build-gmail-clone-using-html-css-36ak</guid>
      <description>&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;In this video,we will build gmail clone using html and css.This  tutorial is target towards beginners who want to improve their design skills by cloning website using html and css.&lt;br&gt;
Download the starter file via &lt;a href="https://github.com/learnwithchristopherglikpo/gmail_clone"&gt;github&lt;/a&gt; in order to follow along with the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ve9I2tcl_d0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Simple JavaScript calculator Tutorial for Beginners</title>
      <author>Foolish Developer</author>
      <pubDate>Thu, 08 Jul 2021 16:11:43 +0000</pubDate>
      <link>https://dev.to/code_mystery/simple-javascript-calculator-tutorial-for-beginners-477c</link>
      <guid>https://dev.to/code_mystery/simple-javascript-calculator-tutorial-for-beginners-477c</guid>
      <description>&lt;p&gt;In this article I will show you how to &lt;a href="https://www.foolishdeveloper.com/2021/07/simple-javascript-calculator-tutorial.html"&gt;make a simple JavaScript calculator&lt;/a&gt;. The calculator is a simple UI design used to perform mathematical calculations. The calculator made in the article is very simple. Here you can easily do small mathematical calculations like addition, subtraction, multiplication and division. Here I have used a total of eighteen buttons. There are eleven number buttons and 6 operator buttons. There are numbers from zero to 9 and there are operator buttons like plus, minus, equal, cancel etc.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://www.foolishdeveloper.com/2021/07/simple-javascript-calculator-tutorial.html"&gt;watch the live demo&lt;/a&gt; to know how the calculator works. As you can see in the picture above there is a small display with some buttons here. In this case, I made all these buttons using HTML code. I have designed this calculator using CSS code and added the colors in it. JavaScript has implemented the buttons of this calculator. In this case I have used very little i.e. only five lines of js code.&lt;/p&gt;

&lt;p&gt;If you know basic HTML CSS and JavaScript programming then you will definitely understand how to make this calculator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-basic-structure-of-calculator"&gt;
  &lt;/a&gt;
  Step 1: Basic structure of calculator
&lt;/h3&gt;

&lt;p&gt;The following HTML code is the basic structure in which we will add all the buttons and displays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"calc-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;


            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have designed the basic structure of this calculator using the following css codes.&lt;/p&gt;

&lt;p&gt;Here I have not set any size of the calculator i.e. width, height etc. The size of the calculator will be determined depending on the size of the buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css?family=Noto+Sans')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Noto Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;/* Grid */&lt;/span&gt;
&lt;span class="nc"&gt;.main-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* height: 100vh; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.calc-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt; &lt;span class="m"&gt;28px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.22&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2create-a-display-for-viewing-calculations"&gt;
  &lt;/a&gt;
  Step 2:Create a display for viewing calculations
&lt;/h3&gt;

&lt;p&gt;Each calculator has a display where all the calculations can be seen. Here again I have used a small display which I have used to create the following HTML and CSS code. I have used &lt;code&gt;2em height&lt;/code&gt; and &lt;code&gt;100% width&lt;/code&gt; of the display.&lt;/p&gt;

&lt;p&gt;In this case I have used the background color equivalent to the background of the calculator. As a result, the display does not look different. However you can change this background color if you want the display to be seen separately.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Input */&lt;/span&gt;
&lt;span class="nf"&gt;#input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FDFEFE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#223850&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yKLfBVCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r8uj7m38xzwrqhiby7o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yKLfBVCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r8uj7m38xzwrqhiby7o.jpg" alt="Create a display for viewing calculations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-the-required-buttons"&gt;
  &lt;/a&gt;
  Step 3: Add the required buttons
&lt;/h3&gt;

&lt;p&gt;I have added all the buttons using the following HTML codes. As I said before here I have used eighteen buttons. There are &lt;code&gt;eleven number&lt;/code&gt; buttons and the remaining &lt;code&gt;7 operator buttons&lt;/code&gt;. If you know the basic HTML, you must understand the following codes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'buttons-container'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-operator "&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"clearInput()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-operator "&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"eraseNum()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;⌦&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-operator "&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum('/')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-operator "&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum('*')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;x&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(7)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(8)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;8&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(9)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-operator "&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum('-')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(4)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(5)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(6)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-operator "&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum('+')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(1)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(2)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(3)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-operator equal "&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"equalTo()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;=&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num dot"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum(0)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-num"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"insertNum('.')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2Ys5Ces--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzsox6jajek7inp2dyn8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2Ys5Ces--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzsox6jajek7inp2dyn8.jpg" alt="Add the required buttons"&gt;&lt;/a&gt;&lt;br&gt;
I have designed the buttons added above using the css codes below. As I said earlier the size of the calculator will be determined depending on the size of this button. In this case I have used &lt;code&gt;padding: 20px 30px&lt;/code&gt; but you can increase the amount if you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#buttons-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Btn's */&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.171&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.equal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn-num&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#223850&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#6885A7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn-num&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#233B55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn-operator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#128094&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn-operator&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;155&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;196&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e77c18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyflDJEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw8hn0blp9sqi157566d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyflDJEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw8hn0blp9sqi157566d.jpg" alt="Designed the buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-activate-the-calculator-with-javascript"&gt;
  &lt;/a&gt;
  Step 4: Activate the calculator with JavaScript
&lt;/h3&gt;

&lt;p&gt;Now we have only designed this calculator, now we will implement it. In this case, I have used five lines of JavaScript code. Next to each line I have explained why I have used this code so that beginners will understand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Value input variable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Insert number on input fied&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;insertNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Do operation using eval()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;equalTo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remove 1 val at time&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eraseNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Clear all the input&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clearInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUXYRGGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w96wq46c5nqy3suxgfgt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUXYRGGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w96wq46c5nqy3suxgfgt.jpg" alt="Activate the calculator with JavaScript"&gt;&lt;/a&gt;&lt;br&gt;
I hope you have learned from this tutorial how I made this calculator. You can watch a &lt;a href="https://www.foolishdeveloper.com/2021/07/simple-javascript-calculator-tutorial.html"&gt;live demo of this calculator&lt;/a&gt; to learn how it works. Be sure to comment on how you like this design.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Jazz up your hamburger menu icon</title>
      <author>Ayush Newatia</author>
      <pubDate>Thu, 08 Jul 2021 16:10:53 +0000</pubDate>
      <link>https://dev.to/ayushn21/jazz-up-your-hamburger-menu-icon-14fl</link>
      <guid>https://dev.to/ayushn21/jazz-up-your-hamburger-menu-icon-14fl</guid>
      <description>&lt;p&gt;Hamburger icons are pretty ubiquitous these days but I sometimes find them to be a symptom of lazy design. However it's quite easy to make them a little more interesting!  &lt;/p&gt;

&lt;p&gt;In this blog post I'll explain how to build the below hamburger icon animation using only HTML and CSS.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rM0Ncqyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/16209974489DrKJkihekITcoh-YH8w8Q" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rM0Ncqyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/16209974489DrKJkihekITcoh-YH8w8Q"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#drawing-the-hamburger-icon"&gt;
  &lt;/a&gt;
  Drawing the hamburger icon
&lt;/h1&gt;

&lt;p&gt;We're not going to be using an SVG or anything so we need to "draw" the icon using HTML and CSS before animating it. We'll be using a checkbox to control the icon's state.  &lt;/p&gt;

&lt;p&gt;The markup for this component is very simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hamburger-menu-checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"hamburger-menu-checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we've specified an &lt;code&gt;id&lt;/code&gt; for the checkbox and associated the label with it using the &lt;code&gt;for&lt;/code&gt; attribute, clicking the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; will select and deselect the checkbox. Using CSS we'll hide the actual checkbox and use the contents of &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; as our control.&lt;/p&gt;

&lt;p&gt;To draw the 3 lines for the hamburger icon, we'll use the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element and its &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo elements. The CSS for this is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Show the 'hand' cursor when the user hovers over the icon */&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Increase the hit area of the icon */&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Hide the checkbox control */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Set up the middle line of the hamburger icon */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--space-small&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Set up the top and bottom lines of the hamburger icon */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Place the bottom line 8px below the middle */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Place the top line 8px above the middle line */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us a static hamburger icon that we can then animate!  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MwXUuUL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/1620995123Z7anyXcgBUpljao1A_oq8w" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MwXUuUL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/1620995123Z7anyXcgBUpljao1A_oq8w"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#animating-the-hamburger-icon-on-selection"&gt;
  &lt;/a&gt;
  Animating the hamburger icon on selection
&lt;/h1&gt;

&lt;p&gt;To achieve the animation shown above, we need to make the following transforms on the icon:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Move the top and bottom lines to the position of the middle line&lt;/li&gt;
&lt;li&gt;Hide the middle line&lt;/li&gt;
&lt;li&gt;Rotate the top and bottom lines 45deg in opposite directions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Breaking it down to those steps makes it fairly easy to implement some CSS animations to make those transforms. Steps 1 and 3 will be 0.2 seconds long whereas step 2 will be instant as that line will be obscured by the other 2 lines anyway.  &lt;/p&gt;

&lt;p&gt;Let's take a look at the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Set the middle line's transition to be instantaneous and to start */&lt;/span&gt;
&lt;span class="c"&gt;/* 0.2 seconds after the transition is applied */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Apply styles to the top and bottom lines */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Set the transition time for the top and bottom lines to 0.2s. */&lt;/span&gt;
  &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Set the transition properties as we need these lines to animate */&lt;/span&gt;
  &lt;span class="c"&gt;/* upwards or downwards as applicable and then rotate */&lt;/span&gt;
  &lt;span class="nl"&gt;transition-property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* These styles are applied in the unselected state of the */&lt;/span&gt;
  &lt;span class="c"&gt;/* control, so we need to setup the reverse animation here. */&lt;/span&gt;
  &lt;span class="c"&gt;/* This property animates the transform (rotation) immediately */&lt;/span&gt;
  &lt;span class="c"&gt;/* and the margin 0.2s later, as is needed when going from the */&lt;/span&gt;
  &lt;span class="c"&gt;/* cross to the hamburger icon */&lt;/span&gt;
  &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Hide the middle line when the control is selected */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Set up the forward animation for the top and bottom lines. */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Rotate the top line by 45 degrees */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Rotate the bottom line by 45 degrees in the opposite direction */&lt;/span&gt;
&lt;span class="nf"&gt;#hamburger-menu-checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all we need to "draw" and animate a hamburger icon from scratch and make it a little less boring. The best part is we don't even need to use any JavaScript!  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/ayushn21/pen/zYZqWgw"&gt;Here's a CodePen&lt;/a&gt; you can experiment with yourself.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Build a shopping app with Azure Static Web Apps</title>
      <author>Yohan Lasorsa</author>
      <pubDate>Thu, 08 Jul 2021 16:05:04 +0000</pubDate>
      <link>https://dev.to/azure/build-a-shopping-app-with-azure-static-web-apps-23a6</link>
      <guid>https://dev.to/azure/build-a-shopping-app-with-azure-static-web-apps-23a6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you're looking for tips and best practices on how to create and deploy fully featured web apps with Azure Static Web Apps, we created a series of short practical videos to help you with various use cases. You can look at the &lt;a href="https://dev.to/azure/16-tips-to-master-your-azure-static-web-apps-3cgn"&gt;announcement here&lt;/a&gt; and watch all videos here: &lt;a href="https://aka.ms/StaticWebAppsTips"&gt;Azure Tips and Tricks: Static Web Apps&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you've deployed the first version of your web app and set up your CI/CD workflow, you'll probably want to fine tune your app configuration and start implementing more advanced features, such as authentication and authorization.&lt;/p&gt;

&lt;p&gt;We'll cover in this post some common features you may want in your web apps, by building a shopping web app. The &lt;a href="https://github.com/MicrosoftDocs/mslearn-staticwebapp"&gt;base sample code&lt;/a&gt; we'll use is implemented with React, Angular, Vue.js and Svelte so you can pick your favorite framework to follow along.&lt;/p&gt;

&lt;p&gt;To help you with all these featuress, I'll be joined by my friends &lt;a href="https://twitter.com/AysSomething"&gt;&lt;strong&gt;Ayşegül Yönet&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://twitter.com/simona_cotin"&gt;&lt;strong&gt;Simona Cotin&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://twitter.com/burkeholland"&gt;&lt;strong&gt;Burke Holland&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-youll-learn-here"&gt;
  &lt;/a&gt;
  What you'll learn here
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Configure routing, SPA fallback and redirections&lt;/li&gt;
&lt;li&gt;Add a serverless API&lt;/li&gt;
&lt;li&gt;Integrate user authentication&lt;/li&gt;
&lt;li&gt;Configure authorization and roles&lt;/li&gt;
&lt;li&gt;Set up custom domains&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-learning-resources"&gt;
  &lt;/a&gt;
  Additional learning resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aka.ms/learn/swa"&gt;Interactive tutorials on Static Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/?WT.mc_id=javascript-17844-cxa"&gt;Static Web Apps docs overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MicrosoftDocs/mslearn-staticwebapp"&gt;Shopping app source code template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;Static Web Apps CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configure-routing"&gt;
  &lt;/a&gt;
  Configure routing
&lt;/h2&gt;

&lt;p&gt;If you're building a &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single Page Application&lt;/a&gt;, chances are you'll be using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/History/pushState"&gt;HTML5 routing&lt;/a&gt; meaning your app will break if you do not configure a server-side fallback to you base &lt;code&gt;index.html&lt;/code&gt; file. We'll have a look on how to configure this among other common routing tasks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/A70tGiaHCTE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-serverless-api"&gt;
  &lt;/a&gt;
  Add a serverless API
&lt;/h2&gt;

&lt;p&gt;After your web front-end is properly set up, you may want to do some back-end processing to retrieve and store data in a database for example. &lt;a href="https://docs.microsoft.com/azure/azure-functions/?WT.mc_id=javascript-17844-cxa"&gt;Serverless functions&lt;/a&gt; are perfect for that, and allows to create an API by only focusing on what you're trying to achieve without having to create and manage an actual server.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VzML-6DClVU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrate-user-authentication"&gt;
  &lt;/a&gt;
  Integrate user authentication
&lt;/h2&gt;

&lt;p&gt;Managing and verifying users' unique identity is an important piece of most web apps nowadays, especially if you're looking to provide a secure personal space for your users. We'll see how to leverage built-in authentication providers to quickly integrate authentication in your static web app.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TygnLOA68B0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-authorization-and-roles"&gt;
  &lt;/a&gt;
  Configure authorization and roles
&lt;/h2&gt;

&lt;p&gt;After implementing authentication, the logical next step is often to secure the access to various parts of your app, including the API. You can do that with configuring user roles and authorization levels for your routes, to prevent unwanted access and secure your app resources.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/r5yrxgc12q4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-custom-domains"&gt;
  &lt;/a&gt;
  Set up custom domains
&lt;/h2&gt;

&lt;p&gt;If you've deployed a Static Web App before, you've probably noticed that the generated public URL isn't something you'll likely remember and want to share publicly. We'll see how to set up a custom domain for your static web app, along with generating a free HTTPS certificate.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SpQgKfJ87fE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;p&gt;That's it for this post! If you would like to deepen your knowledge around Static Web Apps, you can take a look at the &lt;a href="https://docs.microsoft.com/fr-fr/azure/static-web-apps/?WT.mc_id=javascript-17844-cxa"&gt;docs overview&lt;/a&gt; to find out all the things you can do with Static Web Apps.&lt;/p&gt;

&lt;p&gt;Please share any questions or experiences you've had on these topics in the comments. Thanks for reading!&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/sinedied"&gt;Twitter&lt;/a&gt;, I'll be happy to discuss and take your suggestions.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>azure</category>
    </item>
    <item>
      <title>How to Test Jupyter Notebooks with Pytest and Nbmake</title>
      <author>Marko Anastasov</author>
      <pubDate>Thu, 08 Jul 2021 16:03:06 +0000</pubDate>
      <link>https://dev.to/semaphore/how-to-test-jupyter-notebooks-with-pytest-and-nbmake-fl3</link>
      <guid>https://dev.to/semaphore/how-to-test-jupyter-notebooks-with-pytest-and-nbmake-fl3</guid>
      <description>&lt;p&gt;&lt;a href="https://jupyter.org"&gt;Jupyter&lt;/a&gt; notebook files have been one of the &lt;a href="https://octoverse.github.com/2019/"&gt;fastest-growing&lt;/a&gt; content types on GitHub in recent years. They provide a simple interface for iterating on visual tasks, whether you are analyzing datasets or writing code-heavy documentation.&lt;/p&gt;

&lt;p&gt;Their popularity comes with problems though: large numbers of ipynb files accumulate in repos, many of which are in a broken state. As a result, it is difficult for people to re-run, or even understand your notebooks.&lt;/p&gt;

&lt;p&gt;This tutorial describes how you can use the pytest plugin &lt;a href="https://github.com/treebeardtech/nbmake"&gt;nbmake&lt;/a&gt; to automate end-to-end testing of notebooks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Pz0eMrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvbpo43z9mrmzbmmlyd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Pz0eMrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvbpo43z9mrmzbmmlyd6.png" alt="A Jupyter notebook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;This guide builds on fundamental skills in testing Python projects which are described in &lt;em&gt;&lt;a href="https://semaphoreci.com/blog/python-continuous-integration-continuous-delivery"&gt;Python Continuous Integration and Deployment From Scratch&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before proceeding, please ensure you have covered these basics and have your Python 3 toolchain of choice (such as pip + virtualenv) installed in your development environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-application"&gt;
  &lt;/a&gt;
  Demo Application
&lt;/h2&gt;

&lt;p&gt;It’s common for Python projects to contain a directory of notebook files (known by the .ipynb extension) which may contain any of the following contents:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;proof-of-concept modeling code&lt;/li&gt;
&lt;li&gt;example API usage docs&lt;/li&gt;
&lt;li&gt;Lengthy scientific tutorials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the purpose of this tutorial, we are going to learn how to automate simple end-to-end tests on some notebooks containing Python exercises. Thanks to &lt;a href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; for providing this example material.&lt;/p&gt;

&lt;p&gt;Fork and clone the &lt;a href="https://github.com/treebeardtech/nbmake-examples"&gt;example project&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;Inside this repo, you will find a directory &lt;code&gt;ipynb&lt;/code&gt; containing notebooks. Install the dependencies in the requirements.txt file, optionally creating yourself a virtual environment first.&lt;/p&gt;

&lt;p&gt;Before proceeding to the next step, see if you can run these notebooks in your editor of choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-notebooks-locally"&gt;
  &lt;/a&gt;
  Testing Notebooks Locally
&lt;/h2&gt;

&lt;p&gt;It’s likely that up to this point, your test process involves you manually running notebooks through the Jupyter Lab UI, or a similar client. This is both time-consuming and error-prone though.&lt;/p&gt;

&lt;p&gt;Let’s start automating this process in your development environment using nbmake as an initial step forward.&lt;/p&gt;

&lt;p&gt;Nbmake is a python package that serves as a pytest plugin for testing notebooks. It is developed by the author of this guide and is used by well-known scientific organizations such as Dask, Quansight, and Kitware. You can install it using pip, or a package manager of your choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="nv"&gt;nbmake&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you did not already have pytest installed, it will be installed for you as a dependency of nbmake.&lt;/p&gt;

&lt;p&gt;Before testing your notebooks for the first time, let’s check everything is set up correctly by instructing pytest to simply collect (but not run) all notebook test cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ pytest &lt;span class="nt"&gt;--collect-only&lt;/span&gt; &lt;span class="nt"&gt;--nbmake&lt;/span&gt; &lt;span class="s2"&gt;"./ipynb"&lt;/span&gt; 
&lt;span class="o"&gt;================================&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;session starts &lt;span class="o"&gt;=================================&lt;/span&gt;
platform darwin &lt;span class="nt"&gt;--&lt;/span&gt; Python 3.8.2, pytest-6.2.4, py-1.10.0, pluggy-0.13.1
rootdir: /Users/a/git/alex-treebeard/semaphore-demo-python-jupyter-notebooks
plugins: nbmake-0.5
collected 3 items                                                                    

&amp;lt;NotebookFile ipynb/Boggle.ipynb&amp;gt;
  &amp;lt;NotebookItem &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;NotebookFile ipynb/Cheryl-and-Eve.ipynb&amp;gt;
  &amp;lt;NotebookItem &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;NotebookFile ipynb/Differentiation.ipynb&amp;gt;
  &amp;lt;NotebookItem &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;=============================&lt;/span&gt; 3 tests collected &lt;span class="k"&gt;in &lt;/span&gt;0.01s &lt;span class="o"&gt;=============================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, pytest has collected some notebook items using the nbmake plugin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you receive the message &lt;code&gt;unrecognized arguments: --nbmake&lt;/code&gt; then the nbmake plugin is not installed. This may happen if your CLI is invoking a pytest binary outside of your current virtual environment. Check where your pytest binary is located with &lt;code&gt;which pytest&lt;/code&gt; to confirm this.&lt;/p&gt;

&lt;p&gt;Now that we have validated that nbmake and pytest are working together and can see your notebooks, let’s run them for real.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ pytest &lt;span class="nt"&gt;--nbmake&lt;/span&gt; &lt;span class="s2"&gt;"./ipynb"&lt;/span&gt;
&lt;span class="o"&gt;================================&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;session starts &lt;span class="o"&gt;=================================&lt;/span&gt;
platform darwin &lt;span class="nt"&gt;--&lt;/span&gt; Python 3.8.2, pytest-6.2.4, py-1.10.0, pluggy-0.13.1
rootdir: /Users/a/git/alex-treebeard/semaphore-demo-python-jupyter-notebooks
plugins: nbmake-0.5
collected 3 items                                                                    

ipynb/Boggle.ipynb &lt;span class="nb"&gt;.&lt;/span&gt;                                                           &lt;span class="o"&gt;[&lt;/span&gt; 33%]
ipynb/Cheryl-and-Eve.ipynb &lt;span class="nb"&gt;.&lt;/span&gt;                                                   &lt;span class="o"&gt;[&lt;/span&gt; 66%]
ipynb/Differentiation.ipynb &lt;span class="nb"&gt;.&lt;/span&gt;                                                  &lt;span class="o"&gt;[&lt;/span&gt;100%]

&lt;span class="o"&gt;=================================&lt;/span&gt; 3 passed &lt;span class="k"&gt;in &lt;/span&gt;37.65s &lt;span class="o"&gt;=================================&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, they have passed. These are simple notebooks in a demo project though. It is very unlikely all of your notebooks will pass the first time in a few seconds, so let’s go through some approaches for getting complex projects running.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speed-up-execution-with-pytestxdist"&gt;
  &lt;/a&gt;
  Speed up Execution with pytest-xdist
&lt;/h3&gt;

&lt;p&gt;Large projects may have many notebooks, each taking a long time to install packages, pull data from the network, and perform analyses.&lt;/p&gt;

&lt;p&gt;If your tests are taking more than a few seconds, it’s worth checking how parallelizing the execution affects the runtime. We can do this with another pytest plugin &lt;code&gt;pytest-xdist&lt;/code&gt; as follows:&lt;/p&gt;

&lt;p&gt;First, install the xdist package. It is a pytest plugin similar to nbmake and will add new command-line options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pytest-xdist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run with the number of worker processes set to &lt;code&gt;auto&lt;/code&gt; using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pytest &lt;span class="nt"&gt;--nbmake&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;auto &lt;span class="s2"&gt;"./ipynb"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ignore-expected-errors-in-a-notebook"&gt;
  &lt;/a&gt;
  Ignore Expected Errors in a Notebook
&lt;/h3&gt;

&lt;p&gt;Not all notebooks will be easy to test automatically. Some will contain cells that need user input or will raise uncaught exceptions to illustrate some functionality.&lt;/p&gt;

&lt;p&gt;Fortunately, we can put directives in our notebook metadata to tell nbmake to ignore and continue after errors are thrown. You may not have used notebook metadata before, so it's a good time to mention that notebooks are just JSON files, despite their ipynb extension. You can add custom fields to extend their behavior.&lt;/p&gt;

&lt;p&gt;Your development environment may provide a UI for adding metadata to your notebook file, but let's do it in a raw text editor for educational purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open your .ipynb file in a simple text editor such as &lt;a href="https://www.sublimetext.com/"&gt;Sublime&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Locate your &lt;code&gt;kernelspec&lt;/code&gt; field inside the notebook's metadata.&lt;/li&gt;
&lt;li&gt;Add an &lt;code&gt;execution&lt;/code&gt; object as a sibling to the &lt;code&gt;kernelspec&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This should leave you with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"cells"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"metadata"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"kernelspec"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"execution"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"allow_errors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"timeout"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can re-run the notebook to check that the JSON is valid and errors are ignored.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-executed-notebooks-back-to-the-repo"&gt;
  &lt;/a&gt;
  Write Executed Notebooks Back to the Repo
&lt;/h3&gt;

&lt;p&gt;By default, tests are read-only: your ipynb file remains unchanged on disk. This is usually a good default because your editor may be open whilst you are running.&lt;/p&gt;

&lt;p&gt;In some situations however, you may want to persist the executed notebooks to disk, if you need to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debug failing notebooks by viewing outputs&lt;/li&gt;
&lt;li&gt;Create a commit to your repository with notebooks in a reproducible state&lt;/li&gt;
&lt;li&gt;Build executed notebooks into a doc site, using nbsphinx or jupyter book&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can direct nbmake to persist the executed notebooks to disk using the &lt;code&gt;overwrite&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pytest &lt;span class="nt"&gt;--nbmake&lt;/span&gt; &lt;span class="nt"&gt;--overwrite&lt;/span&gt; &lt;span class="s2"&gt;"./ipynb"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exclude-certain-notebooks-from-test-runs"&gt;
  &lt;/a&gt;
  Exclude Certain Notebooks from Test Runs
&lt;/h3&gt;

&lt;p&gt;Some notebooks may be difficult to test automatically, due to requiring user inputs via stdin or taking a long time to run.&lt;/p&gt;

&lt;p&gt;Use pytest’s ignore flag to de-select them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; pytest &lt;span class="nt"&gt;--nbmake&lt;/span&gt; docs &lt;span class="nt"&gt;--overwrite&lt;/span&gt; &lt;span class="nt"&gt;--ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;docs/landing-page.ipynb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this will not work if you are selecting all notebooks using a glob pattern such as (&lt;code&gt;"*ipynb"&lt;/code&gt;) which manually overrides pytest's ignore flags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automate-notebook-tests-on-semaphore-ci"&gt;
  &lt;/a&gt;
  Automate Notebook Tests on Semaphore CI
&lt;/h2&gt;

&lt;p&gt;Using the techniques above, it is possible to create an automated testing process using Semaphore &lt;a href="https://semaphoreci.com/continuous-integration"&gt;continuous integration&lt;/a&gt; (CI). Pragmatism is key: finding a way to test most of your notebooks and ignoring difficult ones is a good first step to improving quality.&lt;/p&gt;

&lt;p&gt;Start by creating a project for the repo containing your notebooks. Select "Choose repository".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ES5sdnrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/widonzy4k6u5cn10cejh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ES5sdnrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/widonzy4k6u5cn10cejh.png" alt="New project on Semaphore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, connect Semaphore to the repo containing your notebooks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CJTfTZIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru39sx19ntsbf1f4pqto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJTfTZIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru39sx19ntsbf1f4pqto.png" alt="Choosing a GitHub repo on Semaphore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Skip past "Add People" for now, so we can set up our workflow from scratch (even if you are using the demo repo).&lt;/p&gt;

&lt;p&gt;Semaphore gives us some starter configuration, we are going to &lt;strong&gt;customize&lt;/strong&gt; it first before running it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bebVpdq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy1gwrtbunfcdp5z5nip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bebVpdq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy1gwrtbunfcdp5z5nip.png" alt="Choosing a CI/CD pipeline template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a simple single-block workflow with the following details:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For &lt;strong&gt;Name of the Block&lt;/strong&gt; we will use &lt;em&gt;Test&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;Name of the Job&lt;/strong&gt; we will use &lt;em&gt;Test Notebooks&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;strong&gt;Commands&lt;/strong&gt; we will use the following:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;checkout
cache restore
pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
pip &lt;span class="nb"&gt;install &lt;/span&gt;nbmake pytest-xdist
cache store
pytest &lt;span class="nt"&gt;--nbmake&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;auto ./ipynb
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;strong&gt;Prologue&lt;/strong&gt; use the following to configure Python 3:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sem-version python 3.8
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we can &lt;strong&gt;run the workflow&lt;/strong&gt;. If the workflow fails, don't worry, we'll address common problems next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v52H9XMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ux4ch47wvng3uucy2qn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v52H9XMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ux4ch47wvng3uucy2qn.png" alt="Semaphore Workflow Builder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLgebSQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuej98zpqvbjv5ulbdun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLgebSQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuej98zpqvbjv5ulbdun.png" alt="Green CI build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#troubleshooting-some-common-errors"&gt;
  &lt;/a&gt;
  Troubleshooting Some Common Errors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#add-missing-jupyter-kernel-to-your-ci-environment"&gt;
  &lt;/a&gt;
  Add Missing Jupyter Kernel to Your CI Environment
&lt;/h3&gt;

&lt;p&gt;If you are using a kernel name other than the default ‘python3’. You will see an error message when executing your notebooks in a fresh CI environment: &lt;code&gt;Error - No such kernel: 'mycustomkernel'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;ipykernel&lt;/code&gt; to install your custom kernel if you are using Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; ipykernel &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; mycustomkernel 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using another language such as c++ in your notebooks, you may have a different process for installing your kernel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-missing-secrets-to-your-ci-environment"&gt;
  &lt;/a&gt;
  Add Missing Secrets to Your CI Environment
&lt;/h3&gt;

&lt;p&gt;In some cases, your notebook will fetch data from APIs requiring an API token or authenticated CLI. Anything that works on your development environment should work on Semaphore, so first check &lt;a href="https://docs.semaphoreci.com/guided-tour/environment-variables-and-secrets/"&gt;this post&lt;/a&gt; to see how to set up secrets.&lt;/p&gt;

&lt;p&gt;Once you have installed secrets into Semaphore, you may need to configure the notebook to read the secrets from an environment variable available in CI environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-missing-dependencies-to-your-ci-environment"&gt;
  &lt;/a&gt;
  Add Missing Dependencies to Your CI Environment
&lt;/h3&gt;

&lt;p&gt;The python data science stack often requires native libraries to be installed. If you are using conda, it is likely that they will be covered in your normal installation process. It is slightly less likely if you are using standard python libraries.&lt;/p&gt;

&lt;p&gt;If you are struggling to install the libraries that you need, have a look at &lt;a href="https://docs.semaphoreci.com/ci-cd-environment/custom-ci-cd-environment-with-docker/"&gt;creating a CI docker image&lt;/a&gt;. It will be easier to test locally and more stable over time than using Semaphore’s default environments.&lt;/p&gt;

&lt;p&gt;Please remember the advice on pragmatism; you can often achieve 90% of the value in 10% of the time. This may involve tradeoffs like ignoring notebooks that run ML models requiring a GPU.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This guide demonstrated how you can automate testing of Jupyter Notebooks so you can maintain their reproducibility.&lt;/p&gt;

&lt;p&gt;Notebooks have proven to be an effective tool for constructing technical narratives. Due to their novelty however, some software teams rule out their usage until clearer processes emerge to test, review, and reuse their contents.&lt;/p&gt;

&lt;p&gt;There is still some way to go before notebook technologies fit into software projects seamlessly but now is a good time to get a head start. You may want to investigate some of the following further work items to further improve your operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; and &lt;a href="https://pypi.org/project/nbstripout/"&gt;nbstripout&lt;/a&gt; to remove bulky notebook output data before committing changes&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/executablebooks/jupyter-book"&gt;jupyter book&lt;/a&gt; to compile your notebooks into a beautiful documentation site&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://www.reviewnb.com"&gt;ReviewNB&lt;/a&gt; to review notebooks in pull requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, and please share any tips for working with notebooks with us!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was contributed by &lt;a href="https://github.com/alex-treebeard"&gt;Alex Remedios&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jupyter</category>
      <category>python</category>
      <category>testing</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Feedback and Tips for Junior developers</title>
      <author>Yulia Garanok</author>
      <pubDate>Thu, 08 Jul 2021 16:02:23 +0000</pubDate>
      <link>https://dev.to/datarockets/feedback-and-tips-for-junior-developers-1hog</link>
      <guid>https://dev.to/datarockets/feedback-and-tips-for-junior-developers-1hog</guid>
      <description>&lt;p&gt;Quality feedback is an essential part of professional growth and we love sharing it not only within our team but also with candidates who get interviewed. In this article, we collected some &lt;a href="https://datarockets.com/blog/code/tips-junior-developers/"&gt;tips from the real feedback&lt;/a&gt; given by our CTO Dima and Lead developer Andrew to junior developers. But we also believe that these thoughts can be a good checklist for more experienced developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-the-tools-git-command-line-docker-and-interpret-errors-correctly"&gt;
  &lt;/a&gt;
  Learn the tools – git, command line, docker, and interpret errors correctly
&lt;/h1&gt;

&lt;p&gt;Before asking for help, you should read the error messages carefully and understand them. However, there’s nothing bad about accepting the fact that you don’t understand something. &lt;/p&gt;

&lt;p&gt;If you don’t understand the error message, you can tell honestly about this. It is a bad habit to send a screenshot with the text “I have an error here.” Instead, you can send an error message and write: “I’m rebasing and have resolved the conflicts but the git says that something needs to be committed while there’s nothing to commit. It says that I can skip the commit, but I don’t understand what it means to skip the commit.”&lt;/p&gt;

&lt;p&gt;As the very first step, we advise you to study git so deeply that you understand every word in every command you write. We suggest you read the &lt;a href="https://git-scm.com/book/en/v2"&gt;ProGit book&lt;/a&gt; or watch our CTO's &lt;a href="https://www.youtube.com/watch?v=Se-4Mf2m5uE"&gt;talk about git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It will be very helpful to learn the command line and CLI tools. What happens when you write a command in Linux terminal? How does Linux know what binary file to execute? How is it different if you run the same command on Windows? You can watch a video about shell on datarockets YouTube.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ask-for-help-properly-and-describe-the-problem-in-words"&gt;
  &lt;/a&gt;
  Ask for help properly and describe the problem in words
&lt;/h1&gt;

&lt;p&gt;Junior developers often share many lines of code to chat or, much worse, a screenshot, with the comment “it doesn’t work, can we have a call”. However, they don’t say what exactly isn’t working. In such situations, it is impossible to help without a call and a pair debugging session. &lt;/p&gt;

&lt;p&gt;Instead of asking for a call, it would be much more useful if you describe the problem in words, without pictures or screenshots. A good example, “after line 7 I was expecting to see , but  occurred instead”, from the guide &lt;a href="http://catb.org/~esr/faqs/smart-questions.html"&gt;“How to ask questions the smart way”&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;When you describe the problem in words, sometimes it happens that a good assumption about the problem’s cause pops up in your head and you may realize how to fix the problem yourself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-how-to-deal-with-errors-and-problems"&gt;
  &lt;/a&gt;
  Learn how to deal with errors and problems
&lt;/h1&gt;

&lt;p&gt;If you don’t understand how something works, read the error message, see exactly where it occurred, try to isolate it so you know exactly which piece of code is causing the error. Make a guess as to why the error might have occurred and try to fix it. &lt;/p&gt;

&lt;p&gt;Your first inclination could be to fix the error as quickly as possible in any way you can, without getting to the root of the problem. Even though it might work sometimes it’s hard to learn from this experience and we may leave some hidden bugs unfixed.&lt;/p&gt;

&lt;p&gt;Ideally, for every single word in the code you write, you should be able to answer why you wrote it. For example, in the code below, what for the CSS class “layout” is here? Where is the code for this CSS class written?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Layout className={`layout ${css.layout}}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s a great &lt;a href="https://www.amazon.com/Debugging-Indispensable-Software-Hardware-Problems/dp/0814474578/"&gt;book about debugging&lt;/a&gt;, which we highly recommend. One of our favorite tech writers, Julia Evans might publish a zine about debugging soon: &lt;a href="https://jvns.ca/blog/2021/06/08/reasons-why-bugs-might-feel-impossible/"&gt;Reasons why bugs might feel “impossible”&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-more-practice-in-the-review-of-other-developers-code"&gt;
  &lt;/a&gt;
  Get more practice in the review of other developers’ code
&lt;/h1&gt;

&lt;p&gt;Code review will help you to learn faster, think critically and adopt coding standards. It is a necessary element of developing your solution-design taste, it brings room for knowledge sharing as well.&lt;/p&gt;

&lt;p&gt;Read about &lt;a href="https://blog.palantir.com/code-review-best-practices-19e02780015f"&gt;Code Review Best Practices&lt;/a&gt; and start following them. The &lt;a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073"&gt;Clean Coder book&lt;/a&gt; will tell you everything about writing maintainable code. The ideas from it will help you in code review as well. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#take-more-ownership-of-the-feature-delivery-process"&gt;
  &lt;/a&gt;
  Take more ownership of the feature delivery process
&lt;/h1&gt;

&lt;p&gt;There’s a more advanced level, but if you pump it up, it will make you a self-sufficient engineer who doesn’t need any guidance to complete features.&lt;/p&gt;

&lt;p&gt;It includes discussing a feature with a client, breaking it down into tasks, self-assigning to the tasks, suggesting what you could do instead of asking others what to do next, and delivering with final deploy – the full thing. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#take-on-tasks-of-higher-complexity"&gt;
  &lt;/a&gt;
  Take on tasks of higher complexity
&lt;/h1&gt;

&lt;p&gt;Improve your architectural skills by facing technical challenges of higher complexity and learn more about design patterns. There’s no growth without a challenge, so don’t be afraid to take a more complex task even if it requires some support to complete. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#be-curious-and-ask-questions"&gt;
  &lt;/a&gt;
  Be curious and ask questions
&lt;/h1&gt;

&lt;p&gt;One of the important skills for developers and engineers is curiosity. Curiosity drives us to learn new things and improve our skills.&lt;/p&gt;

&lt;p&gt;Be curious about colleagues’ work. Do you know how they debug programs? Do they use UI debugger or debug output? What do they look first at during the code review? What do they dislike about the language you use and why?&lt;/p&gt;

&lt;p&gt;Be curious about the tech you hear or read about. Did someone mention Kotlin Multiplatform Mobile? Try to learn how it works and what it offers. Apple released the M1 chip that you heard uses ARM architecture but you don’t know what ARM means and what other architectures exist? Ask your colleagues about this and engage them in communication. Saw that the output of git log looks different on your colleague’s computer? Ask them to share how they configured this.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>learning</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Copy rich HTML with the native Clipboard API 📋</title>
      <author>Stephen Griffiths</author>
      <pubDate>Thu, 08 Jul 2021 15:57:15 +0000</pubDate>
      <link>https://dev.to/stegriff/copy-rich-html-with-the-native-clipboard-api-5ah8</link>
      <guid>https://dev.to/stegriff/copy-rich-html-with-the-native-clipboard-api-5ah8</guid>
      <description>&lt;p&gt;The relatively new Clipboard API in browsers lets you load up the user’s clipboard as though they’d copied something themselves. &lt;/p&gt;

&lt;p&gt;Copying text or images is fairly well documented, but examples writing &lt;strong&gt;rich text (as HTML)&lt;/strong&gt; are harder to come by.&lt;/p&gt;

&lt;p&gt;At time of writing, this is &lt;a href="https://www.chromestatus.com/feature/5357049665814528"&gt;implemented in Chrome 86+&lt;/a&gt; and &lt;a href="https://webkit.org/blog/10855/"&gt;in Safari&lt;/a&gt;. I got the content for this post from the &lt;a href="https://glitch.com/~hyper-silly-cross"&gt;Glitch project created by dsleeps at Google&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-copy-rich-text-html-onto-the-clipboard-api"&gt;
  &lt;/a&gt;
  How to copy rich text HTML onto the Clipboard API
&lt;/h2&gt;

&lt;p&gt;This sample assumes you have a &lt;code&gt;&amp;lt;div class="js-output"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; which contains your HTML to copy.&lt;/p&gt;

&lt;p&gt;I’ll cut right to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;js-output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blobInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clipboardItemInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ClipboardItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blobInput&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;clipboardItemInput&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Handle error with user feedback - "Copy failed!" kind of thing&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Key things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the HTML string (I’m using &lt;code&gt;innerHTML&lt;/code&gt; of an element for this)&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;Blob&lt;/code&gt;. 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob#parameters"&gt;Param one&lt;/a&gt; must be an Array-like or a &lt;code&gt;USVString&lt;/code&gt; value. So we wrap our HTML content in an array.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob#parameters"&gt;Param two&lt;/a&gt; is an options object, where we set the MIME type.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ClipboardItem&lt;/code&gt; around the blob, specifying MIME type &lt;em&gt;again&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Finally, write the &lt;code&gt;ClipboardItem&lt;/code&gt; to the clipboard API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;I have a quickly-made Vue app with a ‘Copy to Clipboard’ button at &lt;a href="https://stegriff.github.io/deployment-complete/"&gt;https://stegriff.github.io/deployment-complete/&lt;/a&gt;. Source repo at &lt;a href="https://github.com/stegriff/deployment-complete"&gt;https://github.com/stegriff/deployment-complete&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this tutorial helps you! What will you make? 📋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>dom</category>
      <category>html</category>
      <category>clipboard</category>
    </item>
    <item>
      <title>Unicode mood selector (star-rating)</title>
      <author>Andrew Bone</author>
      <pubDate>Thu, 08 Jul 2021 15:56:45 +0000</pubDate>
      <link>https://dev.to/link2twenty/unicode-mood-selector-star-rating-system-8g</link>
      <guid>https://dev.to/link2twenty/unicode-mood-selector-star-rating-system-8g</guid>
      <description>&lt;p&gt;There have been several posts written this week about star ratings, as part of the "Star (rating) Wars". I've written a couple of articles first how to make an accessible star rating system and then a follow up about how to make it a little more interesting with animations.&lt;/p&gt;

&lt;p&gt;In this article I'll be doing something a little different. I'll take the lessons we've learnt from the past two articles and making an animated mood selector.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-star-rating-wars"&gt;
  &lt;/a&gt;
  the Star (rating) wars
&lt;/h2&gt;

&lt;p&gt;If you're interested, and I think you will be, there are a few posts from different authors worth reading. Check out posts by &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
 , &lt;a class="mentioned-user" href="https://dev.to/lapstjup"&gt;@lapstjup&lt;/a&gt;
 , &lt;a class="mentioned-user" href="https://dev.to/madsstoumann"&gt;@madsstoumann&lt;/a&gt;
 , &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/siddharthshyniben"&gt;@siddharthshyniben&lt;/a&gt;
 and &lt;a class="mentioned-user" href="https://dev.to/lionelrowe"&gt;@lionelrowe&lt;/a&gt;
.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;I'm going to briefly touch on each part of the component and how it's built but I won't be going into too much depth, that being said if you have any questions, suggestions or want clarification feel free to leave a comment and I'll do my best to answer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;The HTML will be a little different to my last two posts in that it will be segregated into three sections. The whole things will still be wrapped in a &lt;code&gt;fieldset&lt;/code&gt; but within that there will be a block of &lt;code&gt;input&lt;/code&gt;s (radio buttons specifically), a block of &lt;code&gt;label&lt;/code&gt;s inside a &lt;code&gt;div&lt;/code&gt; and a block of &lt;code&gt;div&lt;/code&gt;s that we'll call tooltips as we're going to have a tooltip to show which mood we have selected.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#inputs"&gt;
  &lt;/a&gt;
  Inputs
&lt;/h4&gt;

&lt;p&gt;Inputs will be easy just a set of inputs with their type set to radio and a shared name, they will also need a unique id so our labels can reference them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"rating1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#labels"&gt;
  &lt;/a&gt;
  Labels
&lt;/h4&gt;

&lt;p&gt;Labels will be described by their tooltip, which means we know our tooltips will need ids, I've added a title so we can see what each mood is meant to be on mouse over.&lt;/p&gt;

&lt;p&gt;We also have a span inside the label that contains the unicode character we want to display I've chosen 5 emojis but you could use whatever you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Sad"&lt;/span&gt; &lt;span class="na"&gt;aria-describedby=&lt;/span&gt;&lt;span class="s"&gt;"SadTooltip"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"rating1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"star"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;😞&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#tooltips"&gt;
  &lt;/a&gt;
  Tooltips
&lt;/h4&gt;

&lt;p&gt;Our tooltips are divs that contain some text to be displayed. We know we're linking them to the labels with aria-describeby so we've added a unique id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SadTooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;😞 Sad&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;Most of the magic happens in the CSS, there are a few simple animations so I'll try and go over anything interesting but the full code will be at the end of the post.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-label"&gt;
  &lt;/a&gt;
  Default label
&lt;/h4&gt;

&lt;p&gt;Each label has some default styles, which aren't that interesting, the only only ones of note are &lt;code&gt;color: transparent;&lt;/code&gt; which means our unicode characters will be invisible and &lt;code&gt;transform: scale(0.2);&lt;/code&gt; which mean the label will appear tiny.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;350ms&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.97&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F08080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#label-hover"&gt;
  &lt;/a&gt;
  Label hover
&lt;/h4&gt;

&lt;p&gt;When we hover over a label we increase the size a little and stop hiding the emoji. We also increase the z index just incase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#default-tooltip"&gt;
  &lt;/a&gt;
  Default tooltip
&lt;/h4&gt;

&lt;p&gt;We have a bunch of boring styles in here but we also have the opacity and height set to 0 meaning, by default, the tooltip won't take up any space in the dom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition-property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.97&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#changes-based-on-checked"&gt;
  &lt;/a&gt;
  Changes based on checked
&lt;/h4&gt;

&lt;p&gt;I've added some very basic labels for the CSS below. With an approach like this, where everything is manual, you gain performance (because there is no JS to wait for) but it does mean you have to write a lot of extra code. There is a block like this for every input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* label for input before currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* emoji for input before currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nc"&gt;.star&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* label for input currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* label for input after currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* emoji for input after currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nc"&gt;.star&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* tooltip related to checked input */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nf"&gt;#NeutralTooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4em&lt;/span&gt; &lt;span class="m"&gt;0.8em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#F08080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#prefers-reduced-motion"&gt;
  &lt;/a&gt;
  Prefers Reduced Motion
&lt;/h4&gt;

&lt;p&gt;There is a lot of motion in this component and because of that add a &lt;code&gt;prefers-reduced-motion&lt;/code&gt; media query is super important.&lt;/p&gt;

&lt;p&gt;I've taken out all the animations times that involve moving or growing/shrinking and change the style of the labels to make a little more sense without the motion. I don't think it's worth going through this code but if you have any question leave a comment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nc"&gt;.star&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating5&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result
&lt;/h2&gt;

&lt;p&gt;Well wasn't that a lot of code, almost 300 lines of CSS, but I think it shows you what is possible without needing JS and also what sort of interactions you can have without sacrificing accessibility.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/link2twenty/stdc51v9//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  Fin
&lt;/h2&gt;

&lt;p&gt;Thank you all for reading, I think this was probably my last entry into the Star (rating) wars. Though do let me know if group posts exploring the same topic are useful and I'll have a chat with the other to see if we want to do this more often (no promises).&lt;/p&gt;

&lt;p&gt;Thanks again ❤️👾🧠🤖👾🦄🤖&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
