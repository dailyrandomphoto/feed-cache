<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What Are the Advantages and Disadvantages of Web Applications?</title>
      <author>Chris Fowler</author>
      <pubDate>Mon, 30 Aug 2021 08:57:20 +0000</pubDate>
      <link>https://dev.to/dsvdeveloper88/what-are-the-advantages-and-disadvantages-of-web-applications-35l1</link>
      <guid>https://dev.to/dsvdeveloper88/what-are-the-advantages-and-disadvantages-of-web-applications-35l1</guid>
      <description>&lt;p&gt;Businesses can give their users interactivity without having to use the time and resources necessary for building a mobile application. Web-based applications ultimately ease the development process.&lt;/p&gt;

&lt;p&gt;That said, weighing the cons of &lt;a href="https://www.designveloper.com/blog/web-app-development/"&gt;web application development&lt;/a&gt; against the pros is still useful for getting the kinks ironed out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZNYkJqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21opzk91x5mojdm6mgu7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZNYkJqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21opzk91x5mojdm6mgu7.jpeg" alt="web applications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-web-apps"&gt;
  &lt;/a&gt;
  Advantages of Web Apps
&lt;/h2&gt;

&lt;p&gt;First, you should take a closer look at the advantages of web app development. You’ll find that web apps are an efficient option for boosting the UX of consumers who prize user engagement when it comes to their web browsing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-easier-development"&gt;
  &lt;/a&gt;
  1. Easier Development
&lt;/h3&gt;

&lt;p&gt;Once again, most &lt;a href="https://www.designveloper.com/blog/mobile-app-development-services/"&gt;mobile app developers&lt;/a&gt; and web developers are not one and the same. This is a shame because that means if you want the best of both worlds, you’ll always need at least twice as many developers or at least twice as much talent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-more-convenience"&gt;
  &lt;/a&gt;
  2. More Convenience
&lt;/h3&gt;

&lt;p&gt;Web apps do not need to be downloaded and installed. Or in the case of PWAs, the download and installation won’t be the equivalent of the app actually taking up space on your device.  &lt;/p&gt;

&lt;p&gt;And with &lt;a href="https://www.designveloper.com/blog/progressive-web-apps-examples/"&gt;progressive web apps&lt;/a&gt; specifically, you can get many of the benefits of mobile apps with none of the hassle. While smartphones these days seem to be ever-increasing their storage space in what seem to be squared increments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-high-portability"&gt;
  &lt;/a&gt;
  3. High Portability
&lt;/h3&gt;

&lt;p&gt;Got a smartphone? You can use a web app. A laptop? Even better! Users can access web apps from any device. Got a tablet? You can use a web app.&lt;/p&gt;

&lt;p&gt;Basically, web apps are entirely multi-platform. They provide users with an entertaining exchange no matter the operating system, whether that be Android, iOS, PC, etc. so long as users maintain an internet connection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-web-apps"&gt;
  &lt;/a&gt;
  Disadvantages of Web Apps
&lt;/h2&gt;

&lt;p&gt;Of course, a pro and con list would be futile if there were only pros. Naturally, web app development has disadvantages too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-reduced-speed"&gt;
  &lt;/a&gt;
  1. Reduced Speed
&lt;/h3&gt;

&lt;p&gt;Despite all the praise, web apps cannot replace mobile apps and will operate a bit slower than an application that is hosted on a local server. &lt;/p&gt;

&lt;p&gt;PWAs definitely try to mitigate this side effect, but there’s no veritable evidence that they’ve successfully eliminated this disadvantage altogether. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-limited-functionality"&gt;
  &lt;/a&gt;
  2. Limited Functionality
&lt;/h3&gt;

&lt;p&gt;Since web apps aren’t native, they don’t have the same capacity to collaborate effectively with the hardware and operating system of your specific device.&lt;/p&gt;

&lt;p&gt;Native technology will always carry an advantage over non-native technologies. As system settings differ from one device to the next, and web apps are by definition multi-platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-decreased-access"&gt;
  &lt;/a&gt;
  3. Decreased Access
&lt;/h3&gt;

&lt;p&gt;Generally, web apps need internet access to perform well or in most cases, to perform at all. Though PWAs do deter from this typecast, the most interactive of web apps will not respond if you don’t have a web connection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-types-of-web-applications"&gt;
  &lt;/a&gt;
  3 Types of Web Applications
&lt;/h2&gt;

&lt;p&gt;There are different types of web applications with different behaviors depending on how they’re built. While all these web application types still use web technologies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singlepage-apps"&gt;
  &lt;/a&gt;
  Single-Page Apps
&lt;/h3&gt;

&lt;p&gt;A single-page application (SPA) differs from a traditional multi-page application where new pages load only when you click a link. SPAs wield their power from only one page, typically deploying an infinite scroll mechanism to display all its content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverside-web-apps"&gt;
  &lt;/a&gt;
  Server-Side Web Apps
&lt;/h3&gt;

&lt;p&gt;Server-side software is essentially synonymous with back-end development. Back-end development is composed of building the databases, servers, application programming interfaces (APIs).&lt;/p&gt;

&lt;p&gt;On the bright side, server-side web apps are normally more secure and offer more browser compatibility than client-side web apps. Though server-side applications by and large still display content and/or UIs, the most dynamic of code resides in the web server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clientside-web-apps"&gt;
  &lt;/a&gt;
  Client-Side Web Apps
&lt;/h3&gt;

&lt;p&gt;Client-side &lt;a href="https://www.designveloper.com/blog/7-awesome-web-app-ideas-for-web-developer/"&gt;web apps&lt;/a&gt; are dominant in front-end development, meaning the user interface (UI) is the focus of these types of apps.&lt;/p&gt;

&lt;p&gt;Any data or business logic that the app might use to function is dynamically loaded at start-up. As a result of client-side rendering, there is little to no buffering time for loading a page.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>news</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>You Don't Have To Use Observables In Angular</title>
      <author>Dev By RayRay</author>
      <pubDate>Mon, 30 Aug 2021 07:42:35 +0000</pubDate>
      <link>https://dev.to/devbyrayray/you-don-t-have-to-use-observables-in-angular-1653</link>
      <guid>https://dev.to/devbyrayray/you-don-t-have-to-use-observables-in-angular-1653</guid>
      <description>&lt;p&gt;In Angular, you can perform asynchronous actions in two different ways, Observables, and Promises.&lt;/p&gt;

&lt;p&gt;Most people pick Observables because every example on blogs and documentation tells you to do so. But why? Are Promises that bad? Or Observables that good?&lt;/p&gt;

&lt;p&gt;In this post, I want to dive with you into the why! Why and when should we use Observables, and when are Promises just fine.&lt;/p&gt;

&lt;p&gt;Let's start with comparing the two with each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#observables-vs-promises"&gt;
  &lt;/a&gt;
  Observables VS Promises
&lt;/h2&gt;

&lt;p&gt;Let's start with the Observables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#observables"&gt;
  &lt;/a&gt;
  Observables
&lt;/h3&gt;

&lt;p&gt;Angular is using under the hood RxJS. RxJS comes with a great set of features like Observables.&lt;/p&gt;

&lt;p&gt;Observables can perform asynchronous and synchronous actions in comparison to Promises. Promises can only perform asynchronous actions.&lt;/p&gt;

&lt;p&gt;When Observables are created, it does nothing until a piece of code decides to subscribe to it. You can cancel a subscription to Observables, or when an error is happening, it's automatically unsubscribed.&lt;/p&gt;

&lt;p&gt;Observables handle a stream of values. It updates very quickly at a later point in time.&lt;/p&gt;

&lt;p&gt;To summarise:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observables behaviors&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple values&lt;/li&gt;
&lt;li&gt;Can be canceled&lt;/li&gt;
&lt;li&gt;Great for real-time information&lt;/li&gt;
&lt;li&gt;Can be subscribed to from multiple places&lt;/li&gt;
&lt;li&gt;Errors unsubscribe automatically&lt;/li&gt;
&lt;li&gt;Observables are declarative. They are only performed when something is subscribed to it.&lt;/li&gt;
&lt;li&gt;Have a built-in mechanism to perform transformations to the data (map, forEach, filter, reduce, retry, and retryWhen operators)&lt;/li&gt;
&lt;li&gt;Can be both asynchronous and synchronous&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#promises"&gt;
  &lt;/a&gt;
  Promises
&lt;/h3&gt;

&lt;p&gt;A Promise is a general JavaScript concept introduced since ES2015 (ES6). It's ideal for performing asynchronous actions. It doesn't have subscribers like Observables.&lt;/p&gt;

&lt;p&gt;A Promise can't be canceled like an Observable. It can be resolved or rejected, nothing more, nothing less. It can handle single values instead of a stream of values. &lt;/p&gt;

&lt;p&gt;Promises are performed on creation instead of subscription like Observables are.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to learn more about Promises, check  &lt;a href="https://hasnode.byrayray.dev/how-promises-actually-work-in-javascript-1c80b1af7193"&gt;a more detailed post I wrote earlier&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To summarise:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promises behaviors&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single value&lt;/li&gt;
&lt;li&gt;Can't be canceled&lt;/li&gt;
&lt;li&gt;Great for single time information&lt;/li&gt;
&lt;li&gt;Can't re-use or distribute information&lt;/li&gt;
&lt;li&gt;Promises are performed on the creation&lt;/li&gt;
&lt;li&gt;Is always asynchronous&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-use-a-promise-or-observable"&gt;
  &lt;/a&gt;
  When Use A Promise Or Observable?
&lt;/h2&gt;

&lt;p&gt;As we saw earlier, the most significant difference between a Promise and an Observable is handling a single value and a stream of values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-observable"&gt;
  &lt;/a&gt;
  Use A Observable
&lt;/h3&gt;

&lt;p&gt;An Observable is ideal for situations where the data changes during its lifetime.&lt;/p&gt;

&lt;p&gt;Situations to use&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Real-time data from a WebSocket, for example. Think about dashboards, chat messages, notifications, video subtitles, sound visualizations.&lt;/li&gt;
&lt;li&gt;Or actions that are performed very often by a user. For example, think about collapsable menus, dark and light modes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These situations require data to update in a short amount of time, at least in the same lifetime of the subscriptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-promise"&gt;
  &lt;/a&gt;
  Use A Promise
&lt;/h3&gt;

&lt;p&gt;Since a Promise can handle a single value,  there are pretty many situations to use it.&lt;/p&gt;

&lt;p&gt;Situations to use&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forms submission: Creating, editing, and deleting data entities don't require a constantly updated stream of data. The form data is sent to the API; it's successfully done or not.&lt;/li&gt;
&lt;li&gt;API requests for data that doesn't change real-time: a large amount of data to show an overview page or a detail page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these situations don't require that data to change that often. Data is collected by an API call, displayed, and done. It's that simple.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-everyone-using-observables-for-everything"&gt;
  &lt;/a&gt;
  Why Is Everyone Using Observables For Everything?
&lt;/h2&gt;

&lt;p&gt;So this raises for me the question. "Why is everyone using Observables for everything?"&lt;/p&gt;

&lt;p&gt;Yes, I'm guilty on this topic myself! I have done singular requests using an Observable. Was it needed? No!&lt;/p&gt;

&lt;p&gt;Keeping a subscription open, while the data is not changing in the lifetime of that Observable, is not correctly using the power of a browser. Besides that, most developers (myself included) will forget to unsubscribe from their Observable quite often.&lt;/p&gt;

&lt;p&gt;My rule of thumb mostly is: "&lt;em&gt;If you don't need it, don't include or use it!&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;Let's not waste our resources but use everything for its purpose.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summarize"&gt;
  &lt;/a&gt;
  Summarize
&lt;/h2&gt;

&lt;p&gt;Okay, let's make this easy for everyone.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use an Observable for data that is changing real-time or more often during its lifetime. Don't waste resources! Use A Promise if the data isn't changing during the lifetime of a component!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It could be possible that I'm missing the point or being wrong 😅. Would you please let me know in the comments what I'm missing?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" alt="hashnode-footer.png"&gt;&lt;/a&gt;&lt;br&gt;
*I hope you learned something new or are inspired to create something new after reading this story! 🤗 If so, consider subscribing via email (scroll to the top of this page) or follow me here on Hashnode.&lt;br&gt;
*&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that you can create a &lt;a href="https://hashnode.com/@devbyrayray/joinme"&gt;Developer blog like this one, yourself&lt;/a&gt;? It's entirely for free. 👍💰🎉🥳🔥&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If I left you with questions or something to say as a response, scroll down and type me a message. Please send me a &lt;a href="https://twitter.com/@devbyrayray"&gt;DM on Twitter @DevByRayRay&lt;/a&gt; when you want to keep it private. My DM's are always open 😁&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>UUID or cached sequences?</title>
      <author>Franck Pachot</author>
      <pubDate>Mon, 30 Aug 2021 07:41:47 +0000</pubDate>
      <link>https://dev.to/yugabyte/uuid-or-cached-sequences-42fi</link>
      <guid>https://dev.to/yugabyte/uuid-or-cached-sequences-42fi</guid>
      <description>&lt;p&gt;One reason why people choose a UUID for the surrogate key is scalability. Because it generates unique values without having to synchronize with a central generator like a sequence. There are other reasons to use UUID but this post is about scalability. In most databases, sequences can be scalable with a cache: the central catalog object that manages the sequence doesn't have to be read each time we need a next value. Even when the database does not provide a sequence cache, it is very easy to manage from the application. When you read from the sequence, multiply it by 50 and use it as the base to add to a local counter from 1 to 50. You will read the next value from the central point of truth only once every 50 next value generation. This is what JPA @SequenceGenerator is doing and 50 is the Hibernate default.&lt;/p&gt;

&lt;p&gt;If you have a high throughput of inserts, you can increase the cache. Reading from the central sequence every 32767 inserts is probably a negligible overhead. Why am I putting 32767 ? Because this takes 2 bytes, out of the 8 bytes of the PostgreSQL bigint. So, even if the cached values are not used (which should happen only when connections in the pool are recycled) it remains 1e14 numbers from the bigint - enough to ingest a million rows every second for 30 years. You see where I'm going: even with a huge cache, an 8 bytes sequence is sufficient for scalability, compared to the 16 bytes UUID required to ensure unicity without a sequence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postgresql"&gt;
  &lt;/a&gt;
  PostgreSQL
&lt;/h2&gt;

&lt;p&gt;In PostgreSQL the sequence cache is per session. If you constantly connect and disconnect, you will waste the cache range each time. But anyway, this is not how the database should be used. A connection is a process creation on the backend and if you do that for each transaction, you have a bigger problem than the wasted sequence cache. The application server should use a connection pool, and then the cache is re-used. I've created the following example, in python,  to read the nextval() for each session grabbed from the pool. With 5 concurrent threads and a connection pool that can grow to 5 connections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;   &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;

&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgresql+psycopg2://franck:yugabyte@yba.pachot.net:5433/yb_demo_northwind'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pool_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;max_overflow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mythread&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_thread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;nextid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'myseq'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nextid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; from &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_thread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'drop sequence if exists myseq; create sequence myseq cache 32767'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mythreads&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mythread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;mythreads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mythreads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the beginning of the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     1 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
     2 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
     3 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
     4 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
     5 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
     6 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 32768 from Thread-4 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
     7 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 65535 from Thread-5 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 98302 from Thread-2 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
131069 from Thread-3 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 32769 from Thread-4 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
     8 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 65536 from Thread-5 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
131070 from Thread-3 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 98303 from Thread-2 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 32770 from Thread-4 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
     9 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 65537 from Thread-5 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
131071 from Thread-3 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 98304 from Thread-2 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
 32771 from Thread-4 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
    10 from Thread-1 Pool size: 1  Connections in pool: 1 Current Overflow: 4 Current Checked out connections: 4
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even if I am using different session each time, they are grabbed from the connection pool and the sequence cache is still there from the previous one. Thread 1 has started first and grabs the first connection from the pool, and uses numbers within the cached range of 1-32767. It may not use them all if the connection is recycle but for sure the waste of number is not as large as the cache value. You can see that the other threads grab additional connections, starting at 32768, 65535... and then using the values in this range. So, with this solution, you waste only occasionally a small part of the 2 bytes range. Nothing to worry when compared to the UUID which has to waste a lot more (UUID is 16 bytes) to ensure a very low probability of collision.&lt;/p&gt;

&lt;p&gt;(Here is a &lt;a href="https://www.kaggle.com/franckpachot/https-dev-to-yugabyte-uuid-or-cached-sequences-c/log"&gt;kaggle&lt;/a&gt; with this example if you want to play with)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yugabytedb"&gt;
  &lt;/a&gt;
  YugabyteDB
&lt;/h2&gt;

&lt;p&gt;I said PostgreSQL but I was connected to a YugabyteDB because they are fully compatible with postgres. The same query layer is used but the storage is different. In Yugabyte, all sequences are stored in a distributed table which is replicated according to the replication factor, and is still available in the event of a node crash or network failure. Because the leader tablet for the sequence may be on another node, the latency to read it is higher. And because it is replicated to other nodes, the latency to write to the quorum is also higher than monolith PostgreSQL. As a consequence, a large cache is a strong recommendation. To be sure that performance is fine even when not defining the cache explicitly, the default in YugabyteDB is pushed to 100 instead of 1 in PostgreSQL. And if the throughput is high, it is highly recommended to go higher. Don't worry about the gap, this will still be smaller than a UUID. &lt;/p&gt;

&lt;p&gt;Despites their name, sequence generators are there to provide unique numbers, not a no-gap series. There's a lot to say about primary key, surrogate keys... will discuss about this at &lt;a href="https://jokerconf.com/en/"&gt;Joker 2021&lt;/a&gt; in October: &lt;a href="https://jokerconf.com/en/2021/talks/4sezsd94jevt4zjyiuje3w/"&gt;SQL primary key, surrogate key, composite keys, foreign keys... and JPA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, with YugabyteDB as with PostgreSQL, you can generate a UUID with &lt;code&gt;gen_random_uuid()&lt;/code&gt; as &lt;em&gt;pg_crypto&lt;/em&gt; is installed by default. You can also install uuid-ossp.&lt;/p&gt;

&lt;p&gt;But let's see another advantage of the cached sequence in a distributed database. You may want to distribute all rows even when generated from the same session. And this will be the case if you define the primary key with HASH sharding, the default. &lt;br&gt;
Like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt; &lt;span class="k"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;identity&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;start&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;cache&lt;/span&gt; &lt;span class="mi"&gt;32767&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="k"&gt;constraint&lt;/span&gt; &lt;span class="n"&gt;t1_id&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;HASH&lt;/span&gt; &lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you may prefer to keep clustered the rows that are inserted together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt; &lt;span class="k"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;identity&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;start&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;cache&lt;/span&gt; &lt;span class="mi"&gt;32767&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="k"&gt;constraint&lt;/span&gt; &lt;span class="n"&gt;t1_id&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt; &lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can even define the ranges. The cache range will put rows at different place, in the same table it they are all in the same range. That's a choice, you can also rely on &lt;a href="https://docs.yugabyte.com/latest/architecture/docdb-sharding/tablet-splitting/#automatic-tablet-splitting"&gt;Automatic Tablet Splitting&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-short"&gt;
  &lt;/a&gt;
  In short
&lt;/h2&gt;

&lt;p&gt;You have the choice. There are reasons to use a UUID which have nothing to do with size or performance. For example, seeing UUID in logs rarely raises security audit concerns but having numbers generated in sequence may allow some guesses about your business information. This can be mitigated by starting at a high number, and it is highly shuffled by the cache, but anyway, security policy may not allow it. However, when the concern is scalability we need to think clearly. At first glance, it seems that a cache has a state which must be shared by all sessions, and then is not scalable. But with a large cache, querying and updating the sequence becomes an infrequent operation where the latency doesn't matter. And once you solved this, you can get all advantages of a sequence. The ascending nature of the number helps clustering rows together to accelerate bulk loads. Or, on the opposite, can be distributed by hash sharding if that's preferable to distribute the load to many nodes. &lt;/p&gt;

&lt;p&gt;The size also matters. 16 bytes in the primary key and all foreign keys is large. My sequence, with &lt;code&gt;bigint&lt;/code&gt;, is two times smaller.  And operations on it, like comparing or increasing a integer, is a very simple CPU operation when compared to generating a UUID with enough randomness. Just run the following on PostgreSQL or YugabyteDB:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;pgcrypto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;myseq&lt;/span&gt; &lt;span class="k"&gt;cache&lt;/span&gt; &lt;span class="mi"&gt;32767&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'myseq'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_random_uuid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this large cache, the sequence generates 3 million unique numbers per second, but less than one million per second for the UUID:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WBocyatF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrp9qr8a4lp6iy7g1ld9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBocyatF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrp9qr8a4lp6iy7g1ld9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you never thought about the sequence cache size, there's a good chance that you think sequences are not scalable. The problem is not the SQL sequence, but keeping the defaults that are often too small.&lt;/p&gt;

</description>
      <category>database</category>
      <category>postgres</category>
      <category>sql</category>
      <category>yugabyte</category>
    </item>
    <item>
      <title>Printing in React Made Easy With React-To-Print</title>
      <author>NJOKU SAMSON EBERE</author>
      <pubDate>Mon, 30 Aug 2021 07:23:52 +0000</pubDate>
      <link>https://dev.to/ebereplenty/printing-in-react-made-easy-with-react-to-print-4b3k</link>
      <guid>https://dev.to/ebereplenty/printing-in-react-made-easy-with-react-to-print-4b3k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It is easy to use the regular javaScript &lt;code&gt;print()&lt;/code&gt; method to trigger the printing of a whole window or page of a website. &lt;/p&gt;

&lt;p&gt;However, we do not always desire that. We may be interested in printing just a part of that website. In fact, we may not even desire that the part we want to print be visible to the user until the print button is clicked. In doing all these, you still want the styling of that portion to maintained.&lt;/p&gt;

&lt;p&gt;All these problem has been fixed in React using the &lt;a href="https://www.npmjs.com/package/react-to-print"&gt;React-To-Print&lt;/a&gt; npm package. I will be demonstrating how you can print using the &lt;strong&gt;React-To-Print&lt;/strong&gt; and even hide the component being printed while maintaining the CSS styles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-reacttoprint"&gt;
  &lt;/a&gt;
  What is React-To-Print?
&lt;/h2&gt;

&lt;p&gt;This is an npm package that aims to give end users the ability to print out the contents of a component by popping up a print window with CSS styles copied over as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;This tutorial assumes that you already have the basic knowledge of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;JavaScript&lt;/a&gt; and &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; especially the &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;difference between class and functional component&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starter-project"&gt;
  &lt;/a&gt;
  Starter project
&lt;/h2&gt;

&lt;p&gt;We will be using the app we &lt;a href="https://dev.to/ebereplenty/full-stack-authentication-and-hosting-nodejs-reactjs-heroku-netlify-3fcm"&gt;created here&lt;/a&gt; as the starter project of this tutorial. To get the project setup in your local machine, do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the &lt;a href="https://github.com/EBEREGIT/react-auth"&gt;repo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/EBEREGIT/react-auth&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install the dependencies
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Load the project on your browser
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You should have this view on your browser now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUktmLBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v558vyh16t2k1kk03bas.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUktmLBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v558vyh16t2k1kk03bas.JPG" alt="Starter Project Initial View"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Awesome!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-component-to-be-printed"&gt;
  &lt;/a&gt;
  Building the component to be Printed
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a component to contain the button that triggers the printing of the desired component
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-bootstrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactToPrint&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-to-print&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PrintComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;componentRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* button to trigger printing of target component */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactToPrint&lt;/span&gt;
          &lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;          &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* component to be printed */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ComponentToPrint&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;From the code above, we imported the &lt;code&gt;ReactToPrint&lt;/code&gt; library, then we called the &lt;code&gt;ReactToPrint&lt;/code&gt; component in the body. The &lt;code&gt;ReactToPrint&lt;/code&gt; holds the &lt;strong&gt;trigger&lt;/strong&gt; &lt;em&gt;(this can be a button or what so ever we choose)&lt;/em&gt; and the &lt;strong&gt;content&lt;/strong&gt; &lt;em&gt;(this is a reference to the component that is to be printed)&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below the &lt;code&gt;ReactToPrint&lt;/code&gt; component is the component to be printed with a &lt;code&gt;ref&lt;/code&gt; connecting it to the &lt;code&gt;ReactToPrint&lt;/code&gt; content props.&lt;/p&gt;

&lt;p&gt;Now, let's build the &lt;code&gt;ComponentToPrint&lt;/code&gt; component with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ComponentToPrint&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Attendance&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;thead&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/thead&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tbody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Njoku&lt;/span&gt; &lt;span class="nx"&gt;Samson&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;samson&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;yahoo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Ebere&lt;/span&gt; &lt;span class="nx"&gt;Plenty&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;ebere&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tbody&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/table&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add the following styles in the &lt;code&gt;index.css&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;thead&lt;/span&gt; &lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Render the component in the &lt;code&gt;freeComponent.js&lt;/code&gt; file like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrintComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Don't forget to import the component on top of the file like so:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PrintComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./PrintComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now, navigate to &lt;code&gt;http://localhost:3000/free&lt;/code&gt; and you should have the following screen:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOG22vGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjnlrcx3ev7ln7vja0kr.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOG22vGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjnlrcx3ev7ln7vja0kr.JPG" alt="Screen with Print component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you click on the blue button, you should have the print dialogue with the print preview
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paUAeA2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ele9hm5mxw5w0442y6hn.JPG" alt="print dialogue with the print preview"&gt;
&lt;em&gt;Notice that the print preview has only the component that we desire to print and the CSS styles are not left out. How awesome!!!&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hiding-the-component-to-be-printed"&gt;
  &lt;/a&gt;
  Hiding the component to be printed
&lt;/h3&gt;

&lt;p&gt;Sometimes, we don't want our users to see what is to be printed until the print button is clicked. This is useful when you are generating invoice, receipt and so on. To make this happen, go to the &lt;code&gt;PrintComponent&lt;/code&gt; component in the &lt;code&gt;PrintComponent.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Replace &lt;code&gt;&amp;lt;ComponentToPrint ref={(el) =&amp;gt; (componentRef = el)} /&amp;gt;&lt;/code&gt; with the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ComponentToPrint&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You should have the following screen now:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ntSfpeZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fni57zc095kuen9xmd6o.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ntSfpeZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fni57zc095kuen9xmd6o.JPG" alt="The free component screen with hidden print component"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;You will still get same result if you click the print button like mine below:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--paUAeA2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ele9hm5mxw5w0442y6hn.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paUAeA2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ele9hm5mxw5w0442y6hn.JPG" alt="print dialogue with the print preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incredible!!!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-notice"&gt;
  &lt;/a&gt;
  IMPORTANT NOTICE!
&lt;/h3&gt;

&lt;p&gt;The trigger component &lt;em&gt;(&lt;code&gt;PrintComponent&lt;/code&gt; in our case)&lt;/em&gt; can be either functional or class component but the component to be printed &lt;em&gt;(&lt;code&gt;ComponentToPrint&lt;/code&gt; in our case)&lt;/em&gt; must be a class component for it to work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We have been able to see how to make printing in React very easy. Not just that we can print only the component we want, we can also hide the component and the CSS styles will not be affected.&lt;/p&gt;

&lt;p&gt;There are a lot of other functionalities that we didn't touch but are available in the documentation. I encourage you to take your time and look into the documentation, play around with other functionalities and see what you can come up with. &lt;/p&gt;

&lt;p&gt;All codes are &lt;a href="https://github.com/EBEREGIT/react-auth/tree/print-tutorial!%5Bimage%5D(https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nuu0ec3k5cjj2wqw6zg.png)"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>[Part 2] How to build your own natural language image search engine</title>
      <author>rkouye</author>
      <pubDate>Mon, 30 Aug 2021 07:19:27 +0000</pubDate>
      <link>https://dev.to/rkouye/how-to-build-your-own-natural-language-image-search-engine-part-2-329g</link>
      <guid>https://dev.to/rkouye/how-to-build-your-own-natural-language-image-search-engine-part-2-329g</guid>
      <description>&lt;p&gt;&lt;a href="https://helios-app.vercel.app/"&gt;Try it online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In part 1, we explored how to build a naïve natural language image search engine using Open AI's &lt;a href="https://openai.com/blog/clip/"&gt;CLIP&lt;/a&gt;. But our implementation had linear time complexity.&lt;/p&gt;

&lt;p&gt;To speed up the process, let's understand how CLIP works.&lt;/p&gt;

&lt;p&gt;CLIP can be instructed, in natural language, to predict the most relevant text snippet, given an image, without directly optimizing for the task.&lt;/p&gt;

&lt;p&gt;To do so, it translates the input (text or image) into a relatively low dimensional space in which similar images and text are close to each other. This process is called embedding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9mQd2IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkhoh8h5w5q61j81piax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9mQd2IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkhoh8h5w5q61j81piax.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the embedded space, each input map to a vector.&lt;/p&gt;

&lt;p&gt;A vector is just an object in (a vector) space. &lt;/p&gt;

&lt;p&gt;More generally, all &lt;strong&gt;n-tuples&lt;/strong&gt; (sequences of length n) &lt;code&gt;(a1, a2, ..., an)&lt;/code&gt; of elements &lt;code&gt;ai&lt;/code&gt; form a vector space of dimension n. &lt;/p&gt;

&lt;p&gt;The nearest neighbors of each vector are the best match for our search query.&lt;/p&gt;

&lt;p&gt;We can use &lt;strong&gt;cosine similarity&lt;/strong&gt; to retrieve the nearest neighbors. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cosine similarity&lt;/strong&gt; is a measure of similarity between two non-zero vectors. It is defined to equal the cosine of the angle between them. One advantage of cosine similarity is its low complexity : only the non-zero dimensions need to be considered. It is also bounded (&lt;code&gt;-1 to 1&lt;/code&gt;) which makes it ideal for information retrieval.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-down-our-na%C3%AFve-implementation"&gt;
  &lt;/a&gt;
  Breaking down our naïve implementation
&lt;/h2&gt;

&lt;p&gt;Our previous implementation could be split into two phases: Indexing and Searching.&lt;/p&gt;

&lt;p&gt;During indexing, we embed each of our images and store the resulting vector somewhere.&lt;/p&gt;

&lt;p&gt;During a search, we embed our search query and compute the cosine similarity of the term query's vector with each of the previously stored vectors. This operation takes &lt;strong&gt;O(n)&lt;/strong&gt; ! Finally we can return the image with the best similarity score.&lt;/p&gt;

&lt;p&gt;In part 3, we will learn about existing techniques to retrieve similar vectors faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rkouye/es-clip-image-search"&gt;Source code&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>deeplearning</category>
      <category>elasticsearch</category>
      <category>python</category>
    </item>
    <item>
      <title>An Easy Guide for Cryptocurrency Payment Gateway Development</title>
      <author>joewalshblog</author>
      <pubDate>Mon, 30 Aug 2021 07:14:55 +0000</pubDate>
      <link>https://dev.to/joewalshblog/an-easy-guide-for-cryptocurrency-payment-gateway-development-1cf6</link>
      <guid>https://dev.to/joewalshblog/an-easy-guide-for-cryptocurrency-payment-gateway-development-1cf6</guid>
      <description>&lt;p&gt;In recent years, we can see many people utilizing cryptocurrencies for trading, staking, and investments. It is due to the prominence of crypto coins is increasing rapidly in all parts of the globe. On the flip side, crypto coins are the hot talk of the blockchain town and made a massive boom and positive impact in the financial industries. Because in recent times, the value of each crypto has skyrocketed and we can also see the bullish crypto market in the past months. By seeing this, many merchants and big global companies started to accept all the major crypto coins as their payment. For accepting crypto as payment, we need a blockchain-powered crypto payment gateway platform.&lt;/p&gt;

&lt;p&gt;Cryptocurrency payment gateway is the payment network and they are efficient. We all know that. But how far can it go? Yes, the storm is getting expanded from the shores of mere exchanging and trading to the levels of crypto payment gateway business. Payment gateways are not restricted to fiat payments and the cryptocurrency traders and exchanges have finally learned it. This is the time to change and with an epic financial system, we are really moving towards financial effectiveness.&lt;/p&gt;

&lt;p&gt;Currently, there are many successful crypto business ideas in the crypto space. But among them, the crypto payment gateway is one of the best businesses for generating a good amount of revenue. That’s why there is a great demand for the top-notch crypto payment gateway development service in the marketplace. Speaking of which, there are certain things you should know about launching the cryptocurrency payment gateway platform. Some of you have the question: how much does it cost to develop a crypto payment gateway? Yes, this article is the answer to all your questions related to the cryptocurrency payment gateway platform and how much does it cost to start a crypto payment gateway business.&lt;br&gt;
Let us begin this extraordinary article with…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-crypto-payment-gateway"&gt;
  &lt;/a&gt;
  What is a Crypto Payment Gateway?
&lt;/h2&gt;

&lt;p&gt;The cryptocurrency industry is quickly developing and the payment doors area is blasting. A crypto payment gateway is a stage for online exchanges that assists organizations with tolerating payments in digital forms of money. In the other words, it is a payment network that allows facilitating instant crypto payments in a secure manner.&lt;br&gt;
As far back as five years prior, hardly any players ruled the new market. Presently, there are many of them. Right now, the inquiry lies in how to pick the most gainful, and secure payment passage supplier. We assessed five of the best payment gateways. Each has its individual arrangement of advantages, points of interest, and target crowd on the lookout.&lt;/p&gt;

&lt;p&gt;The interest in crypto processing exhibits that organizations need such administrations due to the few benefits of crypto processors contrasted with customary financial administrations. As a matter of first importance, the exchange speed of worldwide payments at banks is fundamentally more slow than with cryptocurrency. Crypto preparing cuts handling time from hours and days to a few minutes. Besides, in certain businesses like betting or gaming, bank commissions for exchanges far exceed the crypto preparing commissions.&lt;/p&gt;

&lt;p&gt;At last, one of the greatest strange difficulties of online shops is an undeniable degree of fraud chargebacks. In crypto payments, chargebacks are impractical as exchanges in blockchain are irreversible, and just the holder of the cryptocurrency can execute an exchange utilizing a private key. The popularity of crypto payment gateways made a huge demand for the white label crypto payment gateway. It is a ready-made crypto payment gateway solution that helps you to build a fully functional crypto payment gateway platform within a few days.&lt;/p&gt;

&lt;p&gt;Now, let us see…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-a-cryptocurrency-payment-gateway-work"&gt;
  &lt;/a&gt;
  How does a Cryptocurrency Payment Gateway work?
&lt;/h2&gt;

&lt;p&gt;Crypto payment processors work in two distinct manners — one for the vendor and the other for the client. On the merchant side, the client should move the payment from his wallet to the vendor’s wallet address. At that point, the merchant should change his advanced cash over to fiat to his ledger. This is the way it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For merchants&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The shop merchant should most importantly enlist with your cryptocurrency payment processor to get to the payment move.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When done, the trader ought to coordinate his wallet with the processor. Assuming he has a crypto wallet of himself, he can coordinate that wallet with the payment processor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the off chance that you are running an online eCommerce store or any sort of online market, at that point, you need to add the module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let your payment acknowledgment segment add crypto payment as one of the payment alternatives.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the event that your exchanges are for face-to-face payment like the Point of offer exchanges, at that point, it is of essential significance to connect the module to your retail location gadget to get to the digital money exchanges.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how the crypto payment gateway platform works for merchants in real-time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notable-reasons-to-develop-a-cryptocurrency-payment-gateway-platform"&gt;
  &lt;/a&gt;
  Notable Reasons to Develop a Cryptocurrency Payment Gateway Platform
&lt;/h2&gt;

&lt;p&gt;There are many reasons for starting a crypto payment gateway business. Here is the list of some essential reasons to develop a digital currency payment gateway platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Low Transaction Fees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tolerating crypto payments mean lower expenses when contrasted with customary payment frameworks. Starting in 2017, vendors paid $90 billion to Visa and Mastercard in charge card swipe expenses alone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delicate Data Is Protected&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Banks acquire a lot of information from us and hold it. They have our name, address, telephone number, monetary data, FICO rating, and that’s only the tip of the iceberg. They likewise realize where we’re going through our cash. Thus, with fiat monetary forms, it is difficult to save our protection. Be that as it may, virtual monetary forms guarantee a more significant level of protection. With crypto payments, the exchange information is restricted to specific numbers. No other data is imparted to anybody. Hence, delicate data is secured with crypto payments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Security is the major benefit of the crypto payment gateway platform. For example, Bitcoin depends on the blockchain which is a disseminated, decentralized, and computerized record. The exchanges made are perpetual. They can’t be adjusted or erased. In this way, the odds of misrepresentation are diminished generally. There will be no fake endeavors or fraud. Apart from this, the blockchain network has never been hacked on the grounds that, to transform one square, the programmer should change the wide range of various squares on the blockchain since they are associated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Chargebacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ventures need to bear a great deal of misfortune due to chargebacks. Entrepreneurs gripe that they lose a ton of cash to chargebacks. A chargeback is fundamentally a single-direction trick where clients utilize the items and administrations free of charge by announcing fake charges against the business to their Mastercard organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Third Parties&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since there is no outsider included, the cash goes to your crypto wallet that you have full admittance. Nobody can control the wallet. Along these lines, the cash stays with you regardless. Additionally, the public authority has no influence over the exchanges nor can they watch out for the exchanges.&lt;/p&gt;

&lt;p&gt;Now, let us see…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-cryptocurrency-payment-gateway-platform"&gt;
  &lt;/a&gt;
  How to Create a Cryptocurrency Payment Gateway platform?
&lt;/h2&gt;

&lt;p&gt;You can launch a function-rich crypto payment gateway platform in two possible ways. First, you can build a secure crypto payment gateway platform from scratch. But building a crypto payment platform from scratch consumes more days and this process is very expensive for startups. So I would not recommend this method. So, what is another way? You can go with the best white label crypto payment gateway solution. By using this, you can quickly develop a top-notch crypto platform as per your business necessities. You also need to consider some important factors before developing a crypto payment gateway platform for your business. Such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It should be completely supported by the portal of the website&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need to analyze the compatibility of the processor from the different perspectives&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The platform must be able to handle several crypto payments with no exception&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hire the developers from the best crypto payment gateway solution provider in the industry who can offer the ideal white label crypto payment gateway development at a reasonable cost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The conversion of fiat to crypto &amp;amp; crypto to fiat should be secure, fast, and smooth.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your platform must not face any downtime. Therefore, you can handle millions of users at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The database, protocols, trending features, and tightened security systems must be integrated into your platform.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By considering these important factors, you can kickstart a crypto payment gateway business successfully.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#desirable-features-of-white-label-crypto-payment-gateway-development"&gt;
  &lt;/a&gt;
  Desirable Features of White Label Crypto Payment Gateway Development
&lt;/h3&gt;

&lt;p&gt;Here is the list of essential features that you need to integrate while developing a crypto payment gateway platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Home Page&lt;/li&gt;
&lt;li&gt;User Sign-in/ Sign-up&lt;/li&gt;
&lt;li&gt;My Profile&lt;/li&gt;
&lt;li&gt;KYC/AML&lt;/li&gt;
&lt;li&gt;Dashboard&lt;/li&gt;
&lt;li&gt;My Wallet with Deposit &amp;amp; Withdraw Functionality&lt;/li&gt;
&lt;li&gt;Deposit &amp;amp; Withdraw History&lt;/li&gt;
&lt;li&gt;Support Ticket Submission&lt;/li&gt;
&lt;li&gt;Transaction History&lt;/li&gt;
&lt;li&gt;Merchant Tools&lt;/li&gt;
&lt;li&gt;Button Maker and Examples&lt;/li&gt;
&lt;li&gt;IPN and IPN History&lt;/li&gt;
&lt;li&gt;API Key Generation&lt;/li&gt;
&lt;li&gt;Account Settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Admin Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Admin Sign-in&lt;/li&gt;
&lt;li&gt;Admin Dashboard&lt;/li&gt;
&lt;li&gt;View Users&lt;/li&gt;
&lt;li&gt;View User Deposit/Withdraw History&lt;/li&gt;
&lt;li&gt;Merchant Payment History&lt;/li&gt;
&lt;li&gt;Commission Settings&lt;/li&gt;
&lt;li&gt;Merchant Details&lt;/li&gt;
&lt;li&gt;Merchant API Category&lt;/li&gt;
&lt;li&gt;Security Settings&lt;/li&gt;
&lt;li&gt;Content Management System&lt;/li&gt;
&lt;li&gt;Support System&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can get all these outstanding features in the best white label crypto payment gateway development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-white-label-crypto-payment-gateway-development"&gt;
  &lt;/a&gt;
  Benefits of White Label Crypto Payment Gateway Development
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Effective customer-based relations and perfect transactions.&lt;/li&gt;
&lt;li&gt;Instant transactions with utmost security.&lt;/li&gt;
&lt;li&gt;Transaction fees are so low compared to other digital payments.&lt;/li&gt;
&lt;li&gt;Quicker uptime process without any delay.&lt;/li&gt;
&lt;li&gt;Multiple devices supporting POS systems.&lt;/li&gt;
&lt;li&gt;Withdraw your money 24/7.&lt;/li&gt;
&lt;li&gt;Nothing to worry about the chargeback fraud.&lt;/li&gt;
&lt;li&gt;International payments and cross-border transactions.&lt;/li&gt;
&lt;li&gt;Secured with blockchain technology and completely secure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-much-does-it-cost-to-develop-a-cryptocurrency-payment-gateway-platform"&gt;
  &lt;/a&gt;
  How Much Does it Cost to Develop a Cryptocurrency Payment Gateway Platform?
&lt;/h2&gt;

&lt;p&gt;Starting a cryptocurrency payment gateway business is a dream for many crypto enthusiasts and startups. The cryptocurrency payment gateway development will contrast depending on the extra highlights and security choices that you select in your crypto trade. However, there will be a flood of inquiries like — How much does it cost to construct a crypto payment gateway platform? To be more exact, the expense to begin a crypto trade is truly moderate and that is the motivation behind why new companies are dashing to begin their own cryptocurrency payment gateway platforms.&lt;/p&gt;

&lt;p&gt;When it comes to the white label crypto payment development cost, It ranges from around $7k — $9k. But one can not predict the exact development cost because with the endeavor’s multifaceted nature and based on the business requirements, the expense may vary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottom Line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For developing a stunning crypto payment gateway platform, you will require a specialist group and a genuine white label crypto payment gateway development service provider to make your platform with all the vital additional items and highlights. There are several providers in the market but Coinsclone is a standout amongst other crypto payment gateway clone script service providers in the industry. We have been serving our best crypto service improvement answers for our clients across the world. With regards to the specific expense of building up a crypto payment gateway platform, it will rely upon your tweaked necessities.&lt;/p&gt;

&lt;p&gt;If you are confused about choosing the best crypto payment gateway for your business, I would suggest you create a &lt;a href="https://www.coinsclone.com/blog/bitpay-clone-script/?utm_source=dev.to&amp;amp;utm_medium=joewalshblog&amp;amp;utm_campaign=Crypto+Payment+Gateway&amp;amp;utm_term=Crypto+Payment+Gateway+like+Bitpay"&gt;&lt;strong&gt;crypto payment gateway like Bitpay&lt;/strong&gt;&lt;/a&gt; which will be beneficial and effective for startups and entrepreneurs.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>devops</category>
      <category>startup</category>
    </item>
    <item>
      <title>🥳 Blurry Launched on Product Hunt - Get 27% Off Today! 😎</title>
      <author>BlurData</author>
      <pubDate>Mon, 30 Aug 2021 07:05:13 +0000</pubDate>
      <link>https://dev.to/blurdata/blurry-launched-on-product-hunt-get-27-off-today-b58</link>
      <guid>https://dev.to/blurdata/blurry-launched-on-product-hunt-get-27-off-today-b58</guid>
      <description>&lt;p&gt;Support Blurry On ProductHunt &amp;amp; Get 27% Off Today! 👉👉 &lt;a href="https://www.producthunt.com/posts/blurry"&gt;https://www.producthunt.com/posts/blurry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you been in a situation where you need to hide sensitive information, while screen sharing or video recording?&lt;/p&gt;

&lt;p&gt;💯 Blur All Sensitive Data (text, image, input, or paragraphs) While Screen Sharing, Recording Video Or Live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n1aJ1fkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx7sf5fbp8o7ijy7mabg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1aJ1fkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx7sf5fbp8o7ijy7mabg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Powerful Features To Save Hours Of Post Video Editing Hassles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Free Lifetime Updates.&lt;/li&gt;
&lt;li&gt; Chrome Extension (Works on Opera too).&lt;/li&gt;
&lt;li&gt; Add Or Remove Blur With One Single Click.&lt;/li&gt;
&lt;li&gt; Blur Part/All Selected Text With One Single Click.&lt;/li&gt;
&lt;li&gt; Draw Blur Area Anywhere The Page.&lt;/li&gt;
&lt;li&gt; Save All Blur Areas Even After Reloading The Page.&lt;/li&gt;
&lt;li&gt; Control Blur Intensity, Hide Tab Title &amp;amp; Favicon, Clear All Blur.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Support Blurry On ProductHunt &amp;amp; Get 27% Off Today! 👉👉 &lt;a href="https://www.producthunt.com/posts/blurry"&gt;https://www.producthunt.com/posts/blurry&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>security</category>
    </item>
    <item>
      <title>7 Practices to Create Good JavaScript Variables</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 30 Aug 2021 06:54:12 +0000</pubDate>
      <link>https://dev.to/alexdevero/7-practices-to-create-good-javascript-variables-1a6l</link>
      <guid>https://dev.to/alexdevero/7-practices-to-create-good-javascript-variables-1a6l</guid>
      <description>&lt;p&gt;As a developer you work with variables every day. One interesting thing about variables is that they can have a big impact. They can make your work much easier or much harder. This post will show you seven practices that will help you create good JavaScript variables and make your work easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-meaningful-and-selfexplanatory-variable-names"&gt;
  &lt;/a&gt;
  Use meaningful and self-explanatory variable names
&lt;/h2&gt;

&lt;p&gt;This is one of those practices that are very easy and quick to implement, but also often neglected. This is unfortunate because this simple practice can have a big impact. It can help make code much cleaner and easier to scan. It can save developers a lot of time. Think about it.&lt;/p&gt;

&lt;p&gt;When you use meaningful and self-explanatory names for variable you need less time to remember what that thing does. When you get back to that piece of code later, you don't have to think about is that thing supposed to do, or what it is supposed to be used for. You read the name and everything immediately makes sense.&lt;/p&gt;

&lt;p&gt;Yes, it is easier to use some abbreviation or placeholder name that just came to mind. However, that time you saved when you named that variable will be spent later when you will try to figure out what that thing does. It can take even more time to make sense of that cryptic name than to come up with meaningful and self-explanatory name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Before:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/foo/bar/bills.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cdt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wolf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Drake&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;// After:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileWithBills&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/foo/bar/bills.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wolf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colleagues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Drake&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This practice has another benefit. Your code will become easier to search through. It is easier to search for "fileWithBills" or "bills" when you want to find variable with a file with bills than for "fl", "flb", "bls" or whatever came to mind as first back then. Consider this time saved/wasted next time you want to name a variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-variables-local"&gt;
  &lt;/a&gt;
  Keep variables local
&lt;/h2&gt;

&lt;p&gt;When you declare variables, it is usually better to keep them local. This will help you avoid accidental collisions. Most importantly, it will help you avoid polluting global namespace with variables that may become redundant at some moment. So, try to avoid declaring variables as global by default.&lt;/p&gt;

&lt;p&gt;Instead, declare your variables at the same scope you want to use them. If you want to use some variable in a specific function, declare it inside that function, not as global. This will not be applicable to situations where you want to use some variable in multiple places.&lt;/p&gt;

&lt;p&gt;When this happens, it is fine to define that variable as global so you can reference it from any scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Before (global variable):&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joejoe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;steph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;phill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;someFunctionUsingUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with data in "users" variable...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// After (local variable):&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;someFunctionUsingUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Make "users" variable local:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joejoe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;steph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;phill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;// Do something with data in "users" variable...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Variable is used across codebase:&lt;/span&gt;
&lt;span class="c1"&gt;// Keep "users" variable global:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joejoe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;steph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;phill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;someFunctionUsingUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with data in "users" variable...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;anotherFunctionUsingUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with data in "users" variable...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;yetAnotherFunctionUsingUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with data in "users" variable...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#prefer-let-and-const-over-var"&gt;
  &lt;/a&gt;
  Prefer &lt;em&gt;let&lt;/em&gt; and &lt;em&gt;const&lt;/em&gt; over &lt;em&gt;var&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;When declaring JavaScript variables, prefer using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables. These two variables are not initialized during &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;hoisting&lt;/a&gt;. The &lt;code&gt;var&lt;/code&gt; is hoisted and it can sometimes lead to problems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// var:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;
&lt;span class="nx"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turtle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// let and const:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// ReferenceError: Cannot access 'pet' before initialization&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;
&lt;span class="nx"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;armadillo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are also block-scoped variables. When you declare them in some code block, they will be visible and accessible only there. This means that &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables declared inside a code block will not collide with variables, with the same name, declared outside that code block.&lt;/p&gt;

&lt;p&gt;By code blocks, we are also talking about code blocks created with &lt;a href="https://blog.alexdevero.com/javascript-if-else-statement/"&gt;if...else&lt;/a&gt; statements and &lt;a href="https://blog.alexdevero.com/javascript-loops/"&gt;loops&lt;/a&gt;. This doesn't apply to &lt;code&gt;var&lt;/code&gt; variables. The &lt;code&gt;var&lt;/code&gt; variable is not block-scope. It works only in two scopes, global and local (function scope). Declaring &lt;code&gt;var&lt;/code&gt; variable inside a block code that is not a function body, or inside it, will lead to global variable.&lt;/p&gt;

&lt;p&gt;This variable will be, by default, visible and accessible from everywhere and can collide with other variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Before with var:&lt;/span&gt;
&lt;span class="c1"&gt;// Create global var variable:&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create var variable in if...else block&lt;/span&gt;
  &lt;span class="c1"&gt;// with the same name as the global variable:&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tobias&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of global "name" variable:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Tobias'&lt;/span&gt;


&lt;span class="c1"&gt;// After with let (and also const):&lt;/span&gt;
&lt;span class="c1"&gt;// Create global let variable:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Victoria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create let variable in if...else block&lt;/span&gt;
  &lt;span class="c1"&gt;// with the same name as the global variable:&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Susan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of global "name" variable:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Victoria'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-one-let-and-const-per-assignment"&gt;
  &lt;/a&gt;
  Use one &lt;em&gt;let&lt;/em&gt; and &lt;em&gt;const&lt;/em&gt; per assignment
&lt;/h2&gt;

&lt;p&gt;This practice may seem to have smaller impact, but it can still make your work at least a bit easier. There are two reasons for using one &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; per assignment. The first reason is that one &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; per assignment allows you to step through each declaration with debugger (in dev tools).&lt;/p&gt;

&lt;p&gt;This can make it easier to work with code and debug potential issues. The second reason is to avoid accidental swap of comma (&lt;code&gt;,&lt;/code&gt;) with semicolon (&lt;code&gt;;&lt;/code&gt;) and the other way around. This can happen when you write the code and also when you read it. Well, especially when you read it. It is easy to confuse &lt;code&gt;,&lt;/code&gt; with &lt;code&gt;;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Before (let/const and multiple assignments):&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tommy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="nx"&gt;career&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DevOps engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;skills&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;git&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;docker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kubernetes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serverless&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// After (let/const and one assignment):&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tommy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;career&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DevOps engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;git&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;docker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kubernetes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serverless&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initialize-variables-when-declaring-them"&gt;
  &lt;/a&gt;
  Initialize variables when declaring them
&lt;/h2&gt;

&lt;p&gt;There are two reasons why it is better to initialize JavaScript variables when you declare them. The first reason is that it helps you avoid potential errors when some variable is undefined. This can happen sometimes. It is very easy to declare a variable and reference it before you initialize it.&lt;/p&gt;

&lt;p&gt;The second reason is purely pragmatic and aesthetic. Initializing variables when you declare them helps you make your code shorter. Doing these two tasks separately, you would need two lines, or more. Doing them at the same time requires just one line on code, or at least fewer lines than the alternative.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Before:&lt;/span&gt;
&lt;span class="c1"&gt;// Declare variables:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hobbies&lt;/span&gt;

&lt;span class="c1"&gt;// ... and initialize them later:&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;
&lt;span class="nx"&gt;hobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;playing games&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reading books&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;// After:&lt;/span&gt;
&lt;span class="c1"&gt;// Declare and initialize variables:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;playing games&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reading books&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#declare-variables-on-the-top"&gt;
  &lt;/a&gt;
  Declare variables on the top
&lt;/h2&gt;

&lt;p&gt;Whenever possible, try to declare your JavaScript variables on the top of current scope. This serves three purposes. First, it helps make your code cleaner. When you, and other people who work with your code, know all variables are declared at the top of the scope they know where to look when they need to.&lt;/p&gt;

&lt;p&gt;Without this practice you would have to search through the code when looking for a specific variable. The second reason is that it helps you avoid referencing variables before they are defined. When all variables are declared on the top, anything that follows can safely reference these variables (if you work with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The third reason is that it makes it easier to avoid accidentally re-declaring existing variables. This is less likely to happen with modern IDEs and intellisense. However, it is still possible. This possibility is lower when all JavaScript variables are on the top and you can quickly check if some name is already used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-variables-where-you-use-them"&gt;
  &lt;/a&gt;
  Create variables where you use them
&lt;/h2&gt;

&lt;p&gt;This may seem like an exception to the previous rule. It might be. However, special cases sometimes require special approach. One of these cases is when you assign variables that you want to use on one specific place, for one thing. In this situation, it is better to create that variable at that place or near it.&lt;/p&gt;

&lt;p&gt;Doing this will help you group related code together. This grouping will make your code cleaner and easier to scan and understand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Before:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;functionUsingStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with data in "stuff" variable...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// After:&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;functionUsingStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with data in "stuff" variable...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Alternately:&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;
&lt;span class="c1"&gt;// a lot of code...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;functionUsingStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// i.e. keep variables local&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with data in "stuff" variable...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-7-practices-to-create-good-javascript-variables"&gt;
  &lt;/a&gt;
  Conclusion: 7 Practices to create good JavaScript variables
&lt;/h2&gt;

&lt;p&gt;Naming JavaScript variables doesn't have to a rocket science. There are some practices that are easy to implement that will make your work easier. I hope that these seven we discussed will help you create good JavaScript variables and make your code cleaner.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to become a Full Stack Web Developer 👨‍💻</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 30 Aug 2021 06:47:13 +0000</pubDate>
      <link>https://dev.to/rainboestrykr/how-to-become-a-full-stack-web-developer-4fk1</link>
      <guid>https://dev.to/rainboestrykr/how-to-become-a-full-stack-web-developer-4fk1</guid>
      <description>&lt;h3&gt;
  &lt;a href="#how-to-become-a-full-stack-web-developer"&gt;
  &lt;/a&gt;
  How to become a Full Stack Web Developer
&lt;/h3&gt;

&lt;p&gt;If you want to become a full stack developer, you need to know HTML, CSS, JavaScript along with a backend but making the right choice in an era where there are a lot of options creates a lot of confusion for newbie developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-bucket-technique"&gt;
  &lt;/a&gt;
  The Bucket Technique
&lt;/h3&gt;

&lt;p&gt;As a part of this technique, we will study each technology just enough to start building sites.&lt;/p&gt;

&lt;p&gt;My breakdown for frontend and backend development is as follows:&lt;br&gt;
FrontEnd Development:&lt;br&gt;
➔ 80% HTML&lt;br&gt;
➔ 60% CSS&lt;br&gt;
➔ 50% JavaScript&lt;br&gt;
➔ 20% Database (Insert, Update, Delete)&lt;/p&gt;

&lt;p&gt;After you finish learning all these technologies, you will be able to build good designs but it is not possible to build a stunning website without graphic designing skills. You need to either be a good designer or refer to some design which is good enough for your site to look amazing!&lt;/p&gt;

&lt;p&gt;For that you can either refer to some websites which are already built by great designers or refer to my curated list of free design resources for developers &lt;a href="https://devresources.gitbook.io"&gt;here&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rainboestrykr" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3Zc_2Z4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UdQa_QBS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/685929/957550ef-dba4-424d-b0ee-bd5b3f9d2872.jpeg" alt="rainboestrykr"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rainboestrykr/free-resources-for-developers-meg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Free Resources for Developers&lt;/h2&gt;
      &lt;h3&gt;Abhiraj Bhowmick ・ Aug 27 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#news&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#backend-development"&gt;
  &lt;/a&gt;
  BackEnd Development
&lt;/h4&gt;

&lt;p&gt;I recommend following options from a huge list of available options with pros and cons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PHP - Easy to learn, best for beginners, limited support of libraries&lt;/li&gt;
&lt;li&gt;NodeJs - JavaScript which you already know from frontend, Difficult to learn
JavaScript concepts like callbacks are used&lt;/li&gt;
&lt;li&gt;Django/Flask (Python based backend Frameworks) - Includes ORM, great set of
python libraries, need to learn python&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#not-recommended-for-beginners"&gt;
  &lt;/a&gt;
  Not recommended for beginners
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Frontend frameworks like react, vue, angular&lt;/li&gt;
&lt;li&gt;Third party JavaScript, CSS frameworks&lt;/li&gt;
&lt;li&gt;Website builders
Don't get me wrong here. JavaScript frameworks are amazing but if you want to be a successful
web developer, you need to master HTML, CSS, JavaScript first&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tools every Web Developer should know about&lt;br&gt;
➔ UX wing for Icons&lt;br&gt;
➔ PixaBay for free Images&lt;br&gt;
➔ FreeHTML5 for free templates&lt;br&gt;
➔ UnSplash for Image API&lt;br&gt;
➔ Json Placeholder for fake Online REST API&lt;br&gt;
➔ More resources are available on &lt;a href="https://devresources.gitbook.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wish to learn from videos on the internet,&lt;br&gt;
this would be my best recommendation:&lt;br&gt;
&lt;a href="https://teachyourselfcode.io"&gt;https://teachyourselfcode.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if you liked this tutorial, you can support me by buying me a &lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;coffee&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Liman Core 1.8 Released</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Mon, 30 Aug 2021 06:31:15 +0000</pubDate>
      <link>https://dev.to/liman/liman-core-1-8-released-b6n</link>
      <guid>https://dev.to/liman/liman-core-1-8-released-b6n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#liman-core-18"&gt;
  &lt;/a&gt;
  Liman Core 1.8
&lt;/h1&gt;

&lt;p&gt;Liman Core 1.8 version was released by HAVELSAN Açıklab Team on 30 August 2021.&lt;/p&gt;

&lt;p&gt;More information on the Liman &lt;a href="https://liman.dev"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iImn-gMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gblobscdn.gitbook.com/assets%252F-MiBAHJLv9c5wpIJDruk%252F-MiBAic-BVeCMq0AeKJ9%252F-MiBBMg4EADRRRwN1zIy%252F45tfkgqkv0zc5qzm45lh.png%3Falt%3Dmedia%26token%3De4279bae-ca68-4917-829e-3df73beb7392" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iImn-gMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gblobscdn.gitbook.com/assets%252F-MiBAHJLv9c5wpIJDruk%252F-MiBAic-BVeCMq0AeKJ9%252F-MiBBMg4EADRRRwN1zIy%252F45tfkgqkv0zc5qzm45lh.png%3Falt%3Dmedia%26token%3De4279bae-ca68-4917-829e-3df73beb7392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h1&gt;

&lt;p&gt;You can install according to suitable operating systems:&lt;br&gt;
&lt;a href="https://docs.liman.dev/start/installing"&gt;https://docs.liman.dev/start/installing&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#major-changes"&gt;
  &lt;/a&gt;
  Major Changes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The initial setup wizard has been added to the system.&lt;/li&gt;
&lt;li&gt;Added English support to 99% of the system.&lt;/li&gt;
&lt;li&gt;The design of the entire system has been updated.&lt;/li&gt;
&lt;li&gt;Improved overall user experience.&lt;/li&gt;
&lt;li&gt;The language option in the system has been moved from session to database and environment variables file.&lt;/li&gt;
&lt;li&gt;NEW! Our extension store has been added to the system. You will be just a click away from all the open source and paid - plugins we have developed within the liman&lt;/li&gt;
&lt;li&gt;Added new extension template for object oriented extension development tutorial.&lt;/li&gt;
&lt;li&gt;Added search feature.&lt;/li&gt;
&lt;li&gt;Improved new homepage layout. Server statuses, summaries from common extensions and monitoring of Liman server status are provided.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Fixed the Fonts folder, changed the new font of the system interface to Inter, and updated FontAwesome.&lt;/li&gt;
&lt;li&gt;The name of the Components folder has been changed to the user-friendly "components/".&lt;/li&gt;
&lt;li&gt;All modals centered on the y-axis.&lt;/li&gt;
&lt;li&gt;For the new interface system, the servers were made to go to the top when clicked.&lt;/li&gt;
&lt;li&gt;The problem of not working graphics on the main page has been fixed.&lt;/li&gt;
&lt;li&gt;All breadcrumb menus have been adjusted.&lt;/li&gt;
&lt;li&gt;Table component has been edited, three dots icon has been added to operate on that row in tables with a right-click menu for user-friendliness.&lt;/li&gt;
&lt;li&gt;The way modals in the system work has been changed. The experience has been streamlined by improving support for overlapping modals that are not available in Bootstrap.&lt;/li&gt;
&lt;li&gt;Fixed closing of all modals when pressing the close button in open modals.&lt;/li&gt;
&lt;li&gt;Adjusted the way the black shadow behind works in overlaying modals.&lt;/li&gt;
&lt;li&gt;Dark mode adjusted.&lt;/li&gt;
&lt;li&gt;Added Ubuntu 20.04 support.&lt;/li&gt;
&lt;li&gt;System-wide English translation was made.&lt;/li&gt;
&lt;li&gt;Notifications system has been adjusted. Added English message support.&lt;/li&gt;
&lt;li&gt;Fixed some bugs in components.&lt;/li&gt;
&lt;li&gt;The problem of the left menu not showing the active links properly has been resolved.&lt;/li&gt;
&lt;li&gt;Fixed all non-valid system-wide HTML codes. A valid order has been introduced.&lt;/li&gt;
&lt;li&gt;Removed the requirement to define cities for servers.&lt;/li&gt;
&lt;li&gt;WinRM uptime problem solved.&lt;/li&gt;
&lt;li&gt;Add-on update, add-on download systems have been adjusted.&lt;/li&gt;
&lt;li&gt;All system documentation transferred to &lt;a href="https://docs.liman.dev"&gt;https://docs.liman.dev&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Pages with lsb_release and lsof package dependencies have been edited. The lsb_release dependency has been removed.&lt;/li&gt;
&lt;li&gt;Removed left menu extension count feature.&lt;/li&gt;
&lt;li&gt;The left menu server count feature has been added to the tweaks tab.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>liman</category>
    </item>
    <item>
      <title>Liman Çekirdek 1.8 Duyuruldu</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Mon, 30 Aug 2021 06:30:45 +0000</pubDate>
      <link>https://dev.to/liman/liman-1-8-duyuruldu-3ak9</link>
      <guid>https://dev.to/liman/liman-1-8-duyuruldu-3ak9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#liman-%C3%A7ekirdek-18"&gt;
  &lt;/a&gt;
  Liman Çekirdek 1.8
&lt;/h1&gt;

&lt;p&gt;Liman Çekirdek 1.8 sürümü 30 Ağustos 2021 tarihinde HAVELSAN Açıklab Ekibi tarafından duyuruldu.&lt;/p&gt;

&lt;p&gt;Daha fazla bilgi için Liman &lt;a href="https://liman.dev"&gt;web sayfası&lt;/a&gt;na ulaşabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j4fwcxJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gblobscdn.gitbook.com/assets%252F-Mfw1hjdpJczPvgNBOdm%252F-Mg5hNL4VRIM_Y4rrVDx%252F-Mg5hOdfAJUoygxQMZX7%252Fl1man.png%3Falt%3Dmedia%26token%3D4fb12c2b-bcca-49b5-8a46-ab1a02bbb993" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4fwcxJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gblobscdn.gitbook.com/assets%252F-Mfw1hjdpJczPvgNBOdm%252F-Mg5hNL4VRIM_Y4rrVDx%252F-Mg5hOdfAJUoygxQMZX7%252Fl1man.png%3Falt%3Dmedia%26token%3D4fb12c2b-bcca-49b5-8a46-ab1a02bbb993"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#kurulum"&gt;
  &lt;/a&gt;
  Kurulum
&lt;/h1&gt;

&lt;p&gt;Uygun işletim sistemlerine göre kurulum yapabilirsiniz: &lt;br&gt;
&lt;a href="https://docs.liman.dev/baslangic/kurulum"&gt;https://docs.liman.dev/baslangic/kurulum&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#b%C3%BCy%C3%BCk-yenilikler"&gt;
  &lt;/a&gt;
  Büyük yenilikler
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;İlk kurulum sihirbazı sisteme eklendi.&lt;/li&gt;
&lt;li&gt;Sistemin %99'una İngilizce desteği eklendi.&lt;/li&gt;
&lt;li&gt;Tüm sistemin dizaynı güncellendi.&lt;/li&gt;
&lt;li&gt;Genel kullanıcı deneyimi geliştirildi.&lt;/li&gt;
&lt;li&gt;Sistemdeki dil seçeneği oturum yerine veritabanına ve ortam değişkenleri dosyasına taşındı.&lt;/li&gt;
&lt;li&gt;YENİ! Eklenti mağazamız sisteme eklendi. Liman bünyesinde geliştirdiğimiz açık kaynaklı ve ücretli tüm eklentilere bir tık kadar yakın olacaksınız.&lt;/li&gt;
&lt;li&gt;Nesne yönelimli eklenti geliştirme eğitimi için yeni eklenti şablonu eklendi.&lt;/li&gt;
&lt;li&gt;Arama özelliği eklendi.&lt;/li&gt;
&lt;li&gt;Yeni ana sayfa düzeni geliştirildi. Sunucu durumları, genel eklentilerden özetler ve Liman sunucusunun durumunun izlenmesi sağlandı.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#hata-d%C3%BCzeltmeleri"&gt;
  &lt;/a&gt;
  Hata düzeltmeleri
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Fontlar klasörü düzeltildi, sistem arayüzünün yeni fontu Inter olarak değiştirildi ve FontAwesome güncellendi.&lt;/li&gt;
&lt;li&gt;Componentler klasörünün ismi kullanıcı dostu olan "components/" olarak değiştirildi.&lt;/li&gt;
&lt;li&gt;Tüm modallar y ekseninde ortalandı.&lt;/li&gt;
&lt;li&gt;Yeni arayüz sistemi için sunucuların tıklandıkça üste çıkması sağlandı.&lt;/li&gt;
&lt;li&gt;Ana sayfadaki grafiklerin çalışmama problemi giderildi.&lt;/li&gt;
&lt;li&gt;Tüm breadcrumb menüleri düzenlendi.&lt;/li&gt;
&lt;li&gt;Tablo componenti düzenlendi, kullanıcı dostu olması için sağ klik menüsü bulunan tablolarda o satıra dair işlem yapılması için üç nokta simgesi eklendi.&lt;/li&gt;
&lt;li&gt;Sistemdeki modalların çalışma biçimi değiştirildi. Bootstrap'ta olmayan üst üste modal desteği geliştirilerek deneyim düzenlendi.&lt;/li&gt;
&lt;li&gt;Üst üste açılan modallarda kapatma tuşuna basınca tüm modalların kapanması çözüldü.&lt;/li&gt;
&lt;li&gt;Üst üste açılan modallarda arkadaki siyah gölgenin çalışma biçimi düzenlendi.&lt;/li&gt;
&lt;li&gt;Karanlık mod düzenlendi.&lt;/li&gt;
&lt;li&gt;Ubuntu 20.04 desteği eklendi.&lt;/li&gt;
&lt;li&gt;Sistem geneli İngilizce çeviri yapıldı. &lt;/li&gt;
&lt;li&gt;Bildirimler sistemi düzenlendi. İngilizce mesaj desteği eklendi.&lt;/li&gt;
&lt;li&gt;Componentlerdeki bazı buglar çözüldü.&lt;/li&gt;
&lt;li&gt;Sol menünün aktif olan linkleri düzgün göstermeme problemi çözüldü.&lt;/li&gt;
&lt;li&gt;Sistem geneli tüm geçerli olmayan HTML kodları düzenlendi. Geçerli bir düzen getirildi.&lt;/li&gt;
&lt;li&gt;Sunucular için şehir tanımlama zorunluluğu kaldırıldı.&lt;/li&gt;
&lt;li&gt;WinRM uptime problemi çözüldü.&lt;/li&gt;
&lt;li&gt;Eklenti güncelleme, eklenti indirme sistemleri düzenlendi.&lt;/li&gt;
&lt;li&gt;Tüm sistem dokümantasyonları &lt;a href="https://docs.liman.dev"&gt;https://docs.liman.dev&lt;/a&gt; aktarıldı.&lt;/li&gt;
&lt;li&gt;lsb_release ve lsof paketi bağımlılığı olan sayfalar düzenlendi. lsb_release bağımlılığı kaldırıldı.&lt;/li&gt;
&lt;li&gt;Sol menü eklenti sayısı özelliği kaldırıldı.&lt;/li&gt;
&lt;li&gt;Sol menü sunucu sayısı özelliği ince ayarlar sekmesine eklendi.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>liman</category>
    </item>
    <item>
      <title>Terraform: Remove Resource from a Remote State in Azure Storage Account</title>
      <author>James Cook</author>
      <pubDate>Mon, 30 Aug 2021 06:19:50 +0000</pubDate>
      <link>https://dev.to/officialcookj/terraform-remove-resource-from-a-remote-state-in-azure-storage-account-1k3c</link>
      <guid>https://dev.to/officialcookj/terraform-remove-resource-from-a-remote-state-in-azure-storage-account-1k3c</guid>
      <description>&lt;p&gt;Have you been in the situation where cleaning up your Infrastructure as Code (powered by HashiCorp Terraform) to delete deprecated resources resulted in the Terraform apply taking longer than expected? Maybe this is what you are seeing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;azurerm_backup_protected_vm.rs_name: Still destroying... [id=/subscriptions/***/***], 1h19m50s elapsed]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the deployment timed out I found that the resource was already deleted via the Azure portal. The Terraform state file still believes it exists and it will continue to fail the deployment, how do I resolve the issue?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-need"&gt;
  &lt;/a&gt;
  What you need
&lt;/h2&gt;

&lt;p&gt;Based on a Windows client, you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/downloads.html"&gt;Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"&gt;Azure CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will also need a Azure account that has permissions to access the Azure Storage Container which stores the Terraform state file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-resolve-the-problem"&gt;
  &lt;/a&gt;
  Steps to resolve the problem
&lt;/h2&gt;

&lt;p&gt;First you should clone your repository so you can locally validate the actions you take have worked (you can complete these steps without cloning but you won't be able to follow steps to validate if the actions worked without running the pipeline again).&lt;/p&gt;

&lt;p&gt;Create a &lt;strong&gt;override&lt;span&gt;&lt;/span&gt;.tf&lt;/strong&gt; in the location where you stored your Terraform configuration files. Within the file set the resource group name, the storage account and container name and key where the remote state file is stored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;terraform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;backend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"azurerm"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;resource_group_name&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"resource_group_name"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;storage_account_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"storage_account_name"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;container_name&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"container_name"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;key&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stafe_file_location/terraform.tfstate"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've done this and saved the file, run &lt;strong&gt;az login&lt;/strong&gt; (in a terminal of your choice) to authenticate with an account that has access to the Storage Account Container you specified above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🚀❯ az login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you need to set the subscription you are working with. This should be the subscription that your state file manages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🚀❯ az account set --subscription "SUBSCRIPTION NAME"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Azure CLI has now been utilised to complete authentication. You will now need to change the local directory your terminal is using to the location where you have cloned your respoistory. On Windows, changing a directory usually is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🚀❯ cd "C:\Users\CloudJames\***\***"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you are in the correct directory, run the &lt;strong&gt;terraform init&lt;/strong&gt; to initialise the configuration so it downloads providers, modules, etc...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🚀❯ terraform init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once completed, you can run &lt;strong&gt;terraform state list&lt;/strong&gt; to list the resources that are in your remote state file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🚀❯ terraform state list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results should appear like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🦄❯ terraform state list
***
***
***
***
azurerm_backup_protected_vm.rs_name
***
***
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Find the resource that no longer exists in the Azure environment and take note of the name in full (format is &lt;strong&gt;resourcetype.resourcename&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;We are now ready to remove the resource from the state file. We will use &lt;strong&gt;terraform state rm&lt;/strong&gt; to achieve this. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🚀❯ terraform state rm azurerm_backup_protected_vm.rs_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When ran, you should get an output like the below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🦄❯ terraform state rm azurerm_backup_protected_vm.rs_name
Removed azurerm_backup_protected_vm.rs_name
Successfully removed 1 resource instance(s).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To validate this has worked (if you cloned the repo as described at the beginning), you just need to run a &lt;strong&gt;terraform plan&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🚀❯ terraform plan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should not see the resource listed at all for destruction. This will mean you can run your pipeline again for it to continue as normal.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>terraform</category>
      <category>devops</category>
      <category>operations</category>
    </item>
  </channel>
</rss>
