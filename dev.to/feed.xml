<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 Ways to Build React Forms with Formik Pt.2</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 27 Sep 2021 05:57:30 +0000</pubDate>
      <link>https://dev.to/alexdevero/3-ways-to-build-react-forms-with-formik-pt-2-igd</link>
      <guid>https://dev.to/alexdevero/3-ways-to-build-react-forms-with-formik-pt-2-igd</guid>
      <description>&lt;p&gt;The Formik library helps to build React forms faster with its state management and component. This tutorial will help you learn how to build a React form using components provided by Formik library. You will also learn how to create a simple validation schema for forms with Yup library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-intro"&gt;
  &lt;/a&gt;
  A quick intro
&lt;/h2&gt;

&lt;p&gt;This short series is about three ways to build React forms with Formik. In the &lt;a href="https://blog.alexdevero.com/build-react-forms-formik-pt-1/"&gt;first part&lt;/a&gt;, we've taken a look at the first way. We focused on build React forms with &lt;a href="https://formik.org/"&gt;Formik&lt;/a&gt; using only the bare essentials Formik provides. In this part, we will lean much more towards Formik and its components.&lt;/p&gt;

&lt;p&gt;Generally speaking, we can use Formik to build React forms with two approaches. The first one is with React components. The second is by using Formik hooks. We've already, partially, explored the first approach in the first part. In this part, we will take a look at this approach one more time, now using Formik components instead of custom.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-word-on-dependencies"&gt;
  &lt;/a&gt;
  A word on dependencies
&lt;/h2&gt;

&lt;p&gt;This tutorial will use minimal number of dependencies. First, we will need the &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-dom&lt;/code&gt; and &lt;code&gt;react-scrips&lt;/code&gt;. These three will help as get the React app from the ground. You can either install these dependencies by yourself or use the &lt;a href="https://create-react-app.dev"&gt;create-react-app&lt;/a&gt; app to setup everything for you.&lt;/p&gt;

&lt;p&gt;When you have the React app ready, you two additional dependencies. The first one will be &lt;code&gt;Formik&lt;/code&gt;, library that will power our form. The second dependency will be &lt;code&gt;Yup&lt;/code&gt;. This is a validation library that will help as create validation schema for our form. We will talk about this in the next section, "Validation schema".&lt;/p&gt;

&lt;p&gt;In this tutorial, we will use &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; version &lt;code&gt;17.0.2&lt;/code&gt;. The &lt;code&gt;react-scrips&lt;/code&gt; will be version &lt;code&gt;4.0.3&lt;/code&gt;. Formik will be version &lt;code&gt;2.2.9&lt;/code&gt;. Version of Yup will be &lt;code&gt;0.32.9&lt;/code&gt;. When you install these dependencies you are ready to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation-schema"&gt;
  &lt;/a&gt;
  Validation schema
&lt;/h2&gt;

&lt;p&gt;For this part, we will use the same validation schema as we used in the previous part. This validation schema will contain three form fields, "name", "email" and "password". All these fields will be strings and all will be required. For the "email" field, we will want to check that any value user provides is in email format.&lt;/p&gt;

&lt;p&gt;We could build this schema, and necessary validation logic by ourselves and connect it with Formik. We don't have to. Instead, we can use available validation libraries to do this work for us. One of these libraries is [Yup]. Thanks to this library, we can create validation schema objects Formik can use to validate all fields on our forms.&lt;/p&gt;

&lt;p&gt;A nice thing on Yup is that it provides various methods we can use to create validation schema that fits our needs. For example, we can use method &lt;code&gt;string()&lt;/code&gt; to specify that some field value must be a string. We can then make it required by using &lt;code&gt;required()&lt;/code&gt; method. To make sure something is in email format?&lt;/p&gt;

&lt;p&gt;Yup provides method &lt;code&gt;email()&lt;/code&gt; that checks if the value passed into the input is in email format or not. There are many other methods, and customizations, ready to use. For this tutorial, we will stick with these three, &lt;code&gt;string()&lt;/code&gt;, &lt;code&gt;required()&lt;/code&gt; and &lt;code&gt;email()&lt;/code&gt;. Yup also allows to define error messages for each field.&lt;/p&gt;

&lt;p&gt;In a fact, we can define error message for each of Yup's validation methods. What this means is that we can display different message for the same field. What message will be visible will depend on current error. Creating these messages is easy. All we need is to pass these messages as strings to specific Yup method.&lt;/p&gt;

&lt;p&gt;For example, we can define that field is required and specify a simple message for this condition: &lt;code&gt;required('Field "X" is required')&lt;/code&gt;. We will use this feature in our schema as well and define different message for different validations. Nonetheless, the validation will remain simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import Yup:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create validation schema for form&lt;/span&gt;
&lt;span class="c1"&gt;// with three fields: "name", "email" and "password":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First name is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-formik-and-its-components"&gt;
  &lt;/a&gt;
  Using Formik and its components
&lt;/h2&gt;

&lt;p&gt;The schema is ready. Now, let's build React form using mainly Formik components. The upside of this approach is that we will not have to specify as many input element attributes as we had to in the &lt;a href="https://blog.alexdevero.com/build-react-forms-formik-pt-1/#the-form-content"&gt;previous part&lt;/a&gt;. This is because all form components are provided by Formik and as such are automatically connected to Formik parent instance (context).&lt;/p&gt;

&lt;p&gt;Formik components we will need will be three, &lt;code&gt;Formik&lt;/code&gt;, &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;Field&lt;/code&gt;. The &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;Field&lt;/code&gt; will be replacements for HTML &lt;code&gt;form&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt; elements. The &lt;code&gt;Formik&lt;/code&gt; component will create a parent instance and context of our Formik form. This will be the wrapper of the whole form, this includes the &lt;code&gt;Form&lt;/code&gt; component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formik-component"&gt;
  &lt;/a&gt;
  Formik component
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Formik&lt;/code&gt; component has multiple attributes we can use to setup and customize Formik functionality. For the purpose of this tutorial we will need three: &lt;code&gt;initialValues&lt;/code&gt;, &lt;code&gt;onSubmit&lt;/code&gt; and &lt;code&gt;validationSchema&lt;/code&gt;. The &lt;code&gt;initialValues&lt;/code&gt; attribute is on object that allows as to define all form fields and their initial values.&lt;/p&gt;

&lt;p&gt;For our form, we will specify properties of &lt;code&gt;initialValues&lt;/code&gt; (form fields) to be "name", "email" and "password". All initial values will be empty strings. As a value for the &lt;code&gt;validationSchema&lt;/code&gt; attribute we will use the validation schema we created with Yup. The value of &lt;code&gt;onSubmit&lt;/code&gt; will be a function Formik will use when form is submitted.&lt;/p&gt;

&lt;p&gt;For this tutorial, we will create arrow function with &lt;code&gt;console.log()&lt;/code&gt; to log values provided to the form. In your case, this is the place where you can add any logic you want to execute when someone submits the form. There is one more thing we will need from Formik. We will need access to &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;These two are Formik's states that keep tract of fields that contain any errors and fields that have been touched, or focused. We can expose this data from Formik very easily. This is because &lt;code&gt;Formik&lt;/code&gt; component uses render-prop pattern, and allows its children to be a function that returns some React component.&lt;/p&gt;

&lt;p&gt;This rendered component will be our form. What we can do is to tell &lt;code&gt;Formik&lt;/code&gt; component to expose some data by passing them as arguments to the function it renders. This will allow use to use this exposed data anywhere in the form. Data we will pass are the &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt; objects. We will pass them using &lt;a href="https://blog.alexdevero.com/destructuring-assignment-javascript/#destructuring-objects"&gt;object destructuring&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import dependencies:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the form component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FormFormik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Formik&lt;/span&gt;
      &lt;span class="na"&gt;initialValues&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;validationSchema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formSchema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;touched&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The rest of the form content */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;FormFormik&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FormFormik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#field-components-and-error-messages"&gt;
  &lt;/a&gt;
  Field components and error messages
&lt;/h3&gt;

&lt;p&gt;Each form field will be composed of three parts: label, field and error message. We will create the label and error message with &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; HTML element. This is because Formik doesn't render labels nor provide a dedicated component for it. It renders only input placeholders if you tell it to do so.&lt;/p&gt;

&lt;p&gt;So, if you want to use input placeholders instead of labels you can ignore the &lt;code&gt;label&lt;/code&gt; elements. Instead of &lt;code&gt;label&lt;/code&gt;, you can add &lt;code&gt;placeholder&lt;/code&gt; attribute for each field with appropriate text. Another two attributes we will need will be &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. The &lt;code&gt;type&lt;/code&gt; is the same as input &lt;code&gt;type&lt;/code&gt; attribute that specifies the type of input.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; is also the same as input &lt;code&gt;name&lt;/code&gt; attribute. Aside to that, it also allows Formik to connect field with correct value in form states. This includes &lt;code&gt;initialValues&lt;/code&gt;, &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt;. This means that value of &lt;code&gt;name&lt;/code&gt; for each field has to match corresponding property in &lt;code&gt;initialValues&lt;/code&gt;, &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt; and also in validation schema.&lt;/p&gt;

&lt;p&gt;So, if our schema contains rules for fields "name", "email" and "password", values for &lt;code&gt;name&lt;/code&gt; attributes has to be one of these, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;. That's all we need, or Formik needs, for the &lt;code&gt;Field&lt;/code&gt;. No need for additional attributes or handlers. Last piece are error messages.&lt;/p&gt;

&lt;p&gt;We will render error messages as plain text wrapped in &lt;code&gt;p&lt;/code&gt; elements. The important thing here is the rendering condition for each message. We want to display errors only when there are any and when user really interacted with the form. We want to avoid showing errors in an empty form that was just loaded.&lt;/p&gt;

&lt;p&gt;To ensure this, we will use the &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt; objects. For each field, we will first check if there are any errors for that field. We will also check if a field has been touched. Only when field has an error and was touched we will show an error. We will get these information by using the value of &lt;code&gt;name&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Last thing. We will need a button to submit the form. This can be a regular HTML &lt;code&gt;button&lt;/code&gt; element with &lt;code&gt;type&lt;/code&gt; set to &lt;code&gt;submit&lt;/code&gt;. When clicked, this will trigger Formik's &lt;code&gt;onSubmit&lt;/code&gt; method. This is the method you pass as the value to &lt;code&gt;onSubmit&lt;/code&gt; attribute of &lt;code&gt;Formik&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... previous code&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Create field component - renders input element */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show error if field contains error and was touched */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;touched&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Create field component - renders input element */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show error if field contains error and was touched */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;touched&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Create field component - renders input element */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show error if field contains error and was touched */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;touched&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ... rest of the code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#putting-it-together"&gt;
  &lt;/a&gt;
  Putting it together
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Formik&lt;/code&gt; component is ready and &lt;code&gt;Field&lt;/code&gt; components for each field, with error message, are ready as well. The thing that remains is to take the code we've created so far and put it together. This will give us working React form powered by Formik components, and validated by Yup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import dependencies:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create form validation schema:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First name is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Create the form component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FormFormik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Formik&lt;/span&gt;
      &lt;span class="na"&gt;initialValues&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;validationSchema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formSchema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;touched&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Create field component - renders input element */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show error if field contains error and was touched */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;touched&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Create field component - renders input element */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show error if field contains error and was touched */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;touched&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Create field component - renders input element */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show error if field contains error and was touched */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;touched&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;FormFormik&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FormFormik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-3-ways-to-build-react-forms-with-formik-pt2"&gt;
  &lt;/a&gt;
  Conclusion: 3 ways to build React forms with Formik pt.2
&lt;/h2&gt;

&lt;p&gt;This was the alternative of the first approach of using Formik to build React forms. This approach, using mainly Formik components, can reduce HTML markup you would otherwise need. With some validation library such as Yup, you can also remove a lot of code you would otherwise need for validation logic. I hope that this tutorial helped you learn how to do both.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Best Places to find Hackathons!🧑‍💻</title>
      <author>Rakesh Santwani</author>
      <pubDate>Mon, 27 Sep 2021 05:14:04 +0000</pubDate>
      <link>https://dev.to/rakeshsantwani/7-best-places-to-find-hackathons-8h7</link>
      <guid>https://dev.to/rakeshsantwani/7-best-places-to-find-hackathons-8h7</guid>
      <description>&lt;p&gt;Hackathons are probably one of the best places to network with people and simultaneously learn and enhance your skills and also who doesn't love swags? Here are the 7 best places to look out for in order to attend a hackathon👇&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Major League Hacking&lt;/strong&gt; &lt;a href="//mlh.io"&gt;(mlh.o)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A9D01iUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsnlubg7w2bedkqioy09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9D01iUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsnlubg7w2bedkqioy09.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Major League Hacking is one of my favorites and one of the best places to find hackathons. MLH organizes many hackathons for University students and it also provides .tech, .space, and .online domain free for a year. I have been a part of 2 MLH hackathons and the experience is amazing.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Devpost&lt;/strong&gt; &lt;a href="//devpost.com"&gt;(devpost.com)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yf5joEc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nviipskdpzmsvtpk31ub.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yf5joEc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nviipskdpzmsvtpk31ub.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Devpost also has many exciting hackathons listed but mostly Hackathons use Devpost to help you find a team, submit your project, and look at other projects. I love Devpost as I can see other people's projects and get good ideas, isn't it cool?&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Devfolio&lt;/strong&gt; &lt;a href="//devfolio.co/hackathons"&gt;(devfolio.co/hackathons)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xqoZYntd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ectbc7pjhddy4zk2se9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqoZYntd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ectbc7pjhddy4zk2se9a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I came across Devfolio in the quarantine while searching for virtual hackathons. I haven't used it much but I like the UI/UX of the website and also I had an amazing experience during the hackathon.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;HackClub&lt;/strong&gt; &lt;a href="//hackathons.hackclub.com"&gt;(hackathons.hackclub.com)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aqZf20B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkzjdgi4mxquiqmklcny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aqZf20B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkzjdgi4mxquiqmklcny.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
HackClub is another great website to look for international hackathons for High School and University students. It has a wide list of hackathons to choose from.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Hackalist&lt;/strong&gt; &lt;a href="//hackalist.org"&gt;(hackalist.org)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVmGjTcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9intdnezsmfbzfxea6nh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVmGjTcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9intdnezsmfbzfxea6nh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Hackalist is a website that provides a list of upcoming hackathons around the world and also it is Open-Source. It also has a filter for hackathons that give travel reimbursement so it is awesome for people who like to travel, I haven't used this website but It has some good reviews.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These resources are more than enough to find and attend a hackathon, so what are you waiting for? Attend a hackathon and upskill yourself.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading..&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is Hacktoberfest? Hacktoberfest 101</title>
      <author>Ayushi Rawat </author>
      <pubDate>Mon, 27 Sep 2021 05:00:50 +0000</pubDate>
      <link>https://dev.to/ayushi7rawat/what-is-hacktoberfest-hacktoberfest-101-3cdb</link>
      <guid>https://dev.to/ayushi7rawat/what-is-hacktoberfest-hacktoberfest-101-3cdb</guid>
      <description>&lt;p&gt;Hello reader! &lt;/p&gt;

&lt;p&gt;Well, Hacktoberfest is something, you are gonna hear a lot about in the coming month.  &lt;/p&gt;

&lt;p&gt;You can refer to my &lt;strong&gt;YouTube video Tutorial&lt;/strong&gt; to see a working tutorial for better understanding and a step-by-step guide of the same. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N7mCkGjX6vk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hacktoberfest will be hosted by Digital Ocean for the 8th year in a row in partnership with GitHub and other companies, yes you read it right. What I personally love about it is that it bring developers with the same mindset together from all over the world.&lt;/p&gt;

&lt;p&gt;So, what is Hacktoberfest after all? We will learn all about it in the next few minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-be-covered-in-this-blog"&gt;
  &lt;/a&gt;
  What will be covered in this Blog
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Open&lt;/span&gt; &lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Hacktoberfest&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Who&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="n"&gt;PERKS&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;participating&lt;/span&gt;
&lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="n"&gt;Global&lt;/span&gt; &lt;span class="n"&gt;Stats&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Hacktoberfest&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Let's get started!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-open-source"&gt;
  &lt;/a&gt;
  What is Open Source?
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://en.wikipedia.org/wiki/Open_source"&gt;Wikipedia&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Open-source&lt;/strong&gt; is source code that is made freely available for possible modification and redistribution. &lt;/p&gt;

&lt;p&gt;When some source code is made Open source, it includes permission to use, modify, contribute to the existing source code. The use of the term originated with the software but has expanded beyond the software sector to collaboration and contribution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open-source projects that are hosted in public repositories benefit from contributions made by the broader developer community and are typically managed through Git. &lt;/p&gt;

&lt;p&gt;Now that you have a basic idea about Open Source, we can talk about Hacktoberfest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hacktoberfest-"&gt;
  &lt;/a&gt;
  What is Hacktoberfest ?
&lt;/h2&gt;

&lt;p&gt;Hacktoberfest is a month-long challenge. It happens every year in the month of October. &lt;/p&gt;

&lt;p&gt;Hacktoberfest is open to everyone and it marks the celebration of Open Source. It's the biggest Open Source event that encourages newbies to participate in Open Source and create their 1st meaningful PR. Hacktoberfest encourages participation in giving back to the open-source community by completing pull requests, participating in events, and donating to open source projects. &lt;br&gt;
Also, &lt;strong&gt;all backgrounds and skills levels are encouraged to complete the challenge.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, to participate, you must have a GitHub account first. New to GitHub? Check out my GitHub Blog and Playlist to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-can-join"&gt;
  &lt;/a&gt;
  Who can Join?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;contributors: Anyone around the globe who desires to help drive the growth of open source and make positive contributions to an ever-growing community. All backgrounds and skill levels are encouraged to participate.&lt;/p&gt;

&lt;p&gt;maintainers: Anyone that runs an open-source project on GitHub or GitLab and desires help from the community to improve their project can join Hacktoberfest.&lt;/p&gt;

&lt;p&gt;companies: Encourage people to contribute to your company’s repositories, organize community events, and engage internal employees.&lt;/p&gt;

&lt;p&gt;event organizers: Create events to bring people together for mentorship and code collaborations, so even more people around the world help support open source!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Registration opens on September 28th&lt;/strong&gt;, wondering how to participate and things you must know before participating, well I will cover that in my next blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mihYr_K7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632651865650/pBvTmWVSz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mihYr_K7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632651865650/pBvTmWVSz.png" alt="twitter-card.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perks"&gt;
  &lt;/a&gt;
  PERKS:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You get to work with seniors from the community.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be it your 1st PR or 10thth, you will always learn something new.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You get to be a part of the biggest Open Source event.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And of course, the swag kit. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's have a look at my swag kit from Hacktoberfest 2020. you get some awesome goodies which include A limited-edition T-shirt for &lt;em&gt;**FREE!*&lt;/em&gt;* and some stickers.&lt;/p&gt;

&lt;p&gt;Got anything to add? mention in the comment box below and I will update the list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_spqO9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632651949552/4WIFPX51p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_spqO9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632651949552/4WIFPX51p.jpeg" alt="500079800676_70652.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my upcoming blog, I will share, how to participate in Hacktoberfest 2021 and other important details that you must know before contributing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-have-a-look-at-the-global-stats-for-hacktoberfest-2020-shall-we"&gt;
  &lt;/a&gt;
  &lt;strong&gt;let's have a look at the Global Stats for Hacktoberfest 2020, shall we?&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;169, 886 Participants&lt;/li&gt;
&lt;li&gt;116, 361 Participating Repositories&lt;/li&gt;
&lt;li&gt;135 Represented Countries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ig13zRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632651915275/mjYQnucE8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ig13zRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632651915275/mjYQnucE8.jpeg" alt="3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-tip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pro tip:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can join the Hacktoberfest discord server to connect with the community and network with other open-source enthusiasts, ask questions and find projects. &lt;a href="https://discord.com/invite/hacktoberfest"&gt;click the link to navigate&lt;/a&gt; to the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pve-id9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632651904362/-rHM24YKV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pve-id9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632651904362/-rHM24YKV.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interested to hear about my Hacktoberfest experience of 2020? You wouldn't wanna miss it, so. stay tuned for my upcoming blog. &lt;/p&gt;

&lt;p&gt;That's all for this article and with that, it's a wrap! I hope you found the article useful. Thank you for reading, If you have reached so far, please like the article, It will encourage me to write more such articles. Do share your valuable suggestions, I appreciate your honest feedback!&lt;/p&gt;

&lt;p&gt;I create content about &lt;strong&gt;Career, Blogging, Programming, and Productivity&lt;/strong&gt;, If this is something that interests you, please share the article with your friends and connections. You can also subscribe to my newsletter to get updates every time I write something!&lt;/p&gt;

&lt;p&gt;I would strongly recommend you to Check out the &lt;a href="https://www.youtube.com/watch?v=jAOkWehMF6E"&gt;YouTube video&lt;/a&gt; of the same and &lt;strong&gt;don't forget to subscribe to my Channel&lt;/strong&gt;. I would love to connect with you at &lt;a href="https://twitter.com/ayushi7rawat"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/ayushi7rawat/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should definitely check out my other Blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/python-39-all-you-need-to-know"&gt;Python 3.9: All You need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/github-cli-10-all-you-need-to-know"&gt;GitHub CLI 1.0: All you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/how-to-make-your-own-google-chrome-extension-1"&gt;How to make your own Google Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/run-javascript-from-python"&gt;Run Javascript from Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-whatsapp-using-python"&gt;Automate WhatsApp using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-cowin-vaccine-slots-availablity-using-python"&gt;Automate Cowin Vaccine slots Availability using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/what-is-competitive-programming-or-beginners-guide"&gt;What is Competitive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;https://hacktoberfest.digitalocean.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy Contributing, See you in my next Blog article, Take care!!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>computerscience</category>
      <category>github</category>
    </item>
    <item>
      <title>Neumorphic Social Media Buttons in CSS</title>
      <author>Shubham Jadhav</author>
      <pubDate>Mon, 27 Sep 2021 04:35:46 +0000</pubDate>
      <link>https://dev.to/dev_shubham/neumorphic-social-media-buttons-in-css-49ip</link>
      <guid>https://dev.to/dev_shubham/neumorphic-social-media-buttons-in-css-49ip</guid>
      <description>&lt;p&gt;Neumorphic Social Media Button using pure CSS 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubham-web2144/embed/oNwBEvL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Smbclient Komutu</title>
      <author>Turan Kılıç</author>
      <pubDate>Mon, 27 Sep 2021 04:29:37 +0000</pubDate>
      <link>https://dev.to/aciklab/smbclient-komutu-1gc3</link>
      <guid>https://dev.to/aciklab/smbclient-komutu-1gc3</guid>
      <description>&lt;p&gt;Bir Samba dosya sunucusuna bağlanmak için iki farklı yöntem bulunmaktadır. Bunlar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;smbclient komutu ile terminalden bağlanmak&lt;/li&gt;
&lt;li&gt;Dosya sisteminden "smb://dosyasunucusu" şeklinde adres yazarak bağlanmak.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu yazımızda samba dosya sunucusuna bağlanmak ve işlemleri terminalden götürmek için smbclient komutunu inceleyeceğiz. Hadi başlayalım :)&lt;/p&gt;

&lt;p&gt;Smbclient, FTP bağlantısına benzer bir komut satırı aracıdır. Bu komut sayesinde SMB kaynaklarına erişim sağlanır. Sık kullanılan smbclient komutları aşağıdaki gibidir:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SMB paylaşımlarını listelemek:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;smbclient -L //sunucu_adı -U kullanıcı
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SMB paylaşımına bağlanmak: (Şifre girilmesi gerekmektedir.)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;smclient //sunucu/paylaşım -U kullanıcı
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SMB paylaşımına direkt bağlanmak: (Şifre girilmesine gerek kalmaz fakat şifre ekranda gözükür.)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;smclient //sunucu/paylaşım -U kullanıcı%parola 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha özel kullanımlar amaçlı sık kullanılan smbclient flagları aşağıda listelenmiştir:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"-L" flagı (--list): Sunucu üzerindeki paylaşımları listelemek için kullanılan flagdır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"-U" flagı (--username[%password]): Bağlanılacak dosya sunucusuna girişte kullanılacak kullanıcı adını (ve isteğe göre şifreyi) belirtmede kullanılan flagdır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"-A" flagı (--authentication-file): Bağlantı kurmak için kullanıcı-şifre bilgisini tutan dosyayı belirtmede kullanılan flagdır. Belirtilecek dosyanın formatı aşağıdaki gibi olmalıdır.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;username = &amp;lt;değer&amp;gt; &lt;br&gt;
password = &amp;lt;değer&amp;gt;&lt;br&gt;
domain = &amp;lt;değer&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"-B" flagı (--browse): Bu flag sayesinde DNS kullanılarak SMB sunucuları bulunur.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"-p" flagı (--port): Kurulacak bağlantının gerçekleşeceği port'un seçilmesinde kullanılır. Bu flag kullanılmazsa, default port olan 139 portu kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"-I" flagı (--ip-address IP-address): Bağlantı için sunucunun NetBIOS ismini değil de ip adresini vermek için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"-k" flagı (--kerberos): Kerberos ile authenticate olmayı denemek için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"-d" flagı (--debuglevel): Log dosyalarına daha detaylı bilgi verilmesini sağlayan flagdır. 0-10 arasında bir değer verilebilir.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ek olarak, smbclient ile farklı şekillerde bağlantı kurulabilmektedir. Bunlar:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sunucunun Netbios ismi ile:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;smbclient -L fileserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Sunucunun ip adresi ile:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;smbclient -L x.x.x.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Backslash kullanarak bir paylaşıma doğrudan bağlantı ile:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;smbclient \\\\fileserver\\share  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Bir üstteki seçenek tırnak işareti kullanılarak da gerçekleştirilebilir:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;smbclient "\\fileserver\share" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>5 essential Web UX laws</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 27 Sep 2021 04:12:06 +0000</pubDate>
      <link>https://dev.to/abhirajb/5-essential-web-ux-laws-318a</link>
      <guid>https://dev.to/abhirajb/5-essential-web-ux-laws-318a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-jakobs-law"&gt;
  &lt;/a&gt;
  1. JAKOB’S LAW
&lt;/h2&gt;

&lt;p&gt;Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know. Websites do better the more standardized their design is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHzwAKIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Jakobs-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHzwAKIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Jakobs-Law.png" alt="jakob"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fitts-law"&gt;
  &lt;/a&gt;
  2. FITT’S LAW
&lt;/h2&gt;

&lt;p&gt;The time it takes someone to select an object in the screen depends on how far the cursor is from the object and the size of the object.&lt;br&gt;
Thus, the longer the distance and the smaller the target’s size, the longer it takes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRvAjQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Fittss-Law-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRvAjQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Fittss-Law-1.png" alt="fitt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-millers-law"&gt;
  &lt;/a&gt;
  3. MILLER’S LAW
&lt;/h2&gt;

&lt;p&gt;The average person can only keep 7 (plus or minus 2) items in their working memory.&lt;br&gt;
Organize content into smaller chunks to help users process, understand, and memorize easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YeGr_MSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Millerss-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeGr_MSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Millerss-Law.png" alt="miller"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-law-of-proximity"&gt;
  &lt;/a&gt;
  4. LAW OF PROXIMITY
&lt;/h2&gt;

&lt;p&gt;Objects that are near, or proximate to each other, tend to be grouped together.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proximity helps to establish a relationship with nearby objects.&lt;/li&gt;
&lt;li&gt;Proximity helps users understand and organize information faster and more efficiently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVB_MSEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Law-of-Proximity.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVB_MSEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Law-of-Proximity.png" alt="proximity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-hicks-law"&gt;
  &lt;/a&gt;
  5. HICK'S LAW
&lt;/h2&gt;

&lt;p&gt;The time it takes to make a decision increases with the number and complexity of choices. Hick’s Law is a fairly commonsense idea: the more choices you present to a person, the longer they take to make a decision. It’s essentially a fancier way to describe the KISS rule: Keep It Simple, Stupid!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZlfYtGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Hicks-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZlfYtGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Hicks-Law.png" alt="hick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Functions: Explain Like I'm Five</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Mon, 27 Sep 2021 04:10:14 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/javascript-functions-explain-like-i-m-five-5009</link>
      <guid>https://dev.to/sumusiriwardana/javascript-functions-explain-like-i-m-five-5009</guid>
      <description>&lt;p&gt;If you are a newbie to programming and JavaScript, you might first find it hard to grasp the concept of functions. &lt;/p&gt;

&lt;p&gt;When I first learned about functions, I thought I got it all right. Then, when I tried to apply it in some code challenges, I got more confused, and I had to go back and forth reading my notes to understand functions more deeply. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SS7XJXZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632580244340/Fuj8MCX5B.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SS7XJXZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632580244340/Fuj8MCX5B.jpeg" alt="Group 50.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I came to the point that I doubted myself and felt like I was not up for this. But without giving up, I started digging deeper into functions and finally understood them. &lt;/p&gt;

&lt;p&gt;So this post is for newbies like me, who are trying to understand this concept in a simple form!&lt;/p&gt;

&lt;p&gt;Let's get going! 😂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CT7YOwn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632647952730/wzf1eJKB0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CT7YOwn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632647952730/wzf1eJKB0.gif" alt="giphy (4).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Table of Content below to see what we will be going over in this post. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#what-is-a-function"&gt;What is a function&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#parameters-and-arguments"&gt;Parameters and Arguments &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#return-statement"&gt;Return Statement&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#calling-a-function"&gt;Calling a Function&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#function-declarations"&gt;Function Declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#function-expressions"&gt;Function Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arrow-functions"&gt;Arrow Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#what-is-a-function"&gt;
  &lt;/a&gt;
  What is a function
&lt;/h1&gt;

&lt;p&gt;A function is the fundamental building block of a JavaScript application. It is one of the most essential concepts in the language. &lt;/p&gt;

&lt;p&gt;Let's take a simple machine. What does it do? It takes an input, processes it inside, and gives an output. &lt;/p&gt;

&lt;p&gt;For example, think about this coffee machine below. It takes ground coffee, brews it, and makes a great cup of black coffee.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTFUe8T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632583033042/uJoOVJBaU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTFUe8T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632583033042/uJoOVJBaU.gif" alt="coffee.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's exactly what functions do as well! 😊&lt;/p&gt;

&lt;p&gt;We pass data into a function, and we process that data inside the function or do something with that data inside a function, and then we output or return that data. &lt;/p&gt;

&lt;p&gt;The most simple form of a function is a simple piece of code that we can repeatedly reuse in our code. What does this mean?&lt;/p&gt;

&lt;p&gt;With function, you don't have to write that code over and over again throughout your program. Instead, once you create a function, you can reuse it whenever you want. Confused? Let's come back to it later. &lt;/p&gt;

&lt;p&gt;Now let's create a simple function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myName() {
    console.log('My name is Sumudu');
}

myName();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what have we done here?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We started with the &lt;code&gt;function&lt;/code&gt; keyword. This is how we &lt;strong&gt;declare a function&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Then, we defined a &lt;strong&gt;function name&lt;/strong&gt;, which is &lt;code&gt;myName&lt;/code&gt;. This is the given name for the function, which is a function that will simply log something to the console. &lt;/li&gt;
&lt;li&gt;Then, we added &lt;code&gt;parenthesis&lt;/code&gt;. We use &lt;code&gt;parenthesis&lt;/code&gt; to add &lt;strong&gt;parameters&lt;/strong&gt;, which we will be exploring more later in this post. &lt;/li&gt;
&lt;li&gt;Then, we used &lt;code&gt;curly braces&lt;/code&gt; to create a &lt;em&gt;function body&lt;/em&gt;. All the code that is within this &lt;code&gt;curly braces&lt;/code&gt; is called the function body. And it's this code that will be executed when we run this function.&lt;/li&gt;
&lt;li&gt;To use this function, we simply write the function name followed by a &lt;code&gt;parenthesis&lt;/code&gt;.  And this process is called "invoking", "running", or "calling" the function. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is the simple way of writing a JavaScript function and the syntax of it! 😊 &lt;/p&gt;

&lt;p&gt;Now you might be thinking that we are writing more code with functions. That's true!&lt;/p&gt;

&lt;p&gt;But the beauty of it is that we can use this function again and again throughout our program when we need it. So we don't have to duplicate the code. Let's look at a simple example to understand this. &lt;/p&gt;

&lt;p&gt;Let's say you want to add ten to a number. Here's how we can do it without functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const number = 1 + 10;  
// Answer = 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's write this using a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    return number + 10;
}

const firstNumber = addTen(1);  // Answer = 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have written more code in the second example, but it would be useful to write a cleaner code when we want to add ten to &lt;strong&gt;more&lt;/strong&gt; numbers. Check the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    return number + 10;
}

const firstNumber = addTen(1); // Answer = 11
const secondNumber = addTen(2); // Answer = 12
const thirdNumber = addTen(3); // Answer = 13
const fourthNumber = addTen(4); // Answer = 14
const fifthNumber = addTen(5); // Answer = 15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope now you can understand how we can write something once and reuse it again with functions. Functions help us reduce, reuse, and recycle our code, which is something awesome! 💃&lt;/p&gt;

&lt;p&gt;Now let's move on to understand few other parts of functions. Which are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parameters and Arguments&lt;/li&gt;
&lt;li&gt;Return Statement&lt;/li&gt;
&lt;li&gt;Calling a Function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#parameters-and-arguments"&gt;
  &lt;/a&gt;
  Parameters and Arguments
&lt;/h2&gt;

&lt;p&gt;This is something I really got confused with when I was learning about functions. I couldn't remember the difference properly and was wondering why my function was not working properly 😄&lt;/p&gt;

&lt;p&gt;Let's check the below picture. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UKmLDcGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632593934314/9yORpKal0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UKmLDcGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632593934314/9yORpKal0.jpeg" alt="Parameters.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we added the function parameter inside the parenthesis. This is the input or list of input values that need to be received to perform the function. You can think of it as an empty placeholder that needs to be replaced later on. &lt;/p&gt;

&lt;p&gt;Arguments are actual values of function parameters for those input data. So in the above examples, the placeholder is replaced by the actual data, the number "1".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vvRC9a2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632594341513/YXiCAnxAi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vvRC9a2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632594341513/YXiCAnxAi.gif" alt="easy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#return-statement"&gt;
  &lt;/a&gt;
  Return Statement
&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;return&lt;/code&gt; keyword, we can return any value from the function. Some functions may not return a value, but most functions do. We call this value the result of the function. Then, this value that is returned can be used anywhere later in the code. &lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    console.log(number + 10);
}

addTen(1);  // Answer = 11



function addTwenty(number) {
    return number + 20;
}

const firstNumber = addTwenty(1);  // Answer = 21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first function, we haven't returned a value; we have simply logged a value inside the function. And then, we called the function and got the logged value as "11".&lt;/p&gt;

&lt;p&gt;In the second function, we have returned a value as a result of the function. And then, we have stored the function in another variable (&lt;code&gt;firstNumber&lt;/code&gt;) and called the function. So every time the function is called, the returned value will be the result of the function. &lt;/p&gt;

&lt;p&gt;One important thing that you have to keep in mind is that this &lt;code&gt;return&lt;/code&gt; keyword immediately exits the function. It first returns the value that we ask it to return, in this case, the &lt;code&gt;number + 20&lt;/code&gt;. After that, the function is DONE! &lt;/p&gt;

&lt;p&gt;It doesn't execute any other code after the &lt;code&gt;return&lt;/code&gt; keyword. So, for example, in the below code, you can see that there's a &lt;code&gt;console.log&lt;/code&gt; after the &lt;code&gt;return&lt;/code&gt;. But if you run this code, you can see that code stops right after the &lt;code&gt;return&lt;/code&gt; and doesn't run the &lt;code&gt;console.log&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    return number + 10;
    console.log("Let's add numbers!")
}

const firstNumber = addTen(1);  // Answer = 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if you want to run the &lt;code&gt;console.log&lt;/code&gt;, you have to place it before the &lt;code&gt;return&lt;/code&gt; keyword. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calling-a-function"&gt;
  &lt;/a&gt;
  Calling a Function
&lt;/h2&gt;

&lt;p&gt;Let's say that you have written a function. So how do we use this function?&lt;/p&gt;

&lt;p&gt;To use a function, we simply write the function name followed by a &lt;code&gt;parenthesis&lt;/code&gt;.  And this process is called "invoking", "running", or "calling" the function. &lt;/p&gt;

&lt;p&gt;If you remember the first example, to log the name using the function we created, we used the function name followed by the &lt;code&gt;parenthesis&lt;/code&gt; below the function that we have written (outside of the function).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myName(){
    console.log('My name is Sumudu');
}

myName();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to store the values that are returning from the functions and use them later on, you can always store it in another variable by creating another variable and adding the function name as the value of that variable. &lt;/p&gt;

&lt;p&gt;Let's look at the below example to understand how to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    return number + 10;
}

const firstNumber = addTen(1);  // Answer = 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have created a variable called &lt;code&gt;firstNumber&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We have given the function name (&lt;code&gt;addTen&lt;/code&gt;) as the value to that variable. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can use this variable to call the function whenever you want! 😊&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
Alright! Now you have learned the basic parts of a function. So let's look at the below pictures to recap everything and understand the anatomy of a function! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_3spkhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632626520790/IGCO1mz2V.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_3spkhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632626520790/IGCO1mz2V.gif" alt="anatomy-of-js.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--faHVsKlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632626567964/hHy2FdElR.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--faHVsKlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632626567964/hHy2FdElR.jpeg" alt="Anatomy of Function.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope now you have a basic idea of how the function works and the basic parts of Javascript functions. &lt;/p&gt;




&lt;p&gt;There are different ways to write JavaScript functions. We will be looking at three ways of writing functions in the next few sections. These three types are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function Declarations&lt;/li&gt;
&lt;li&gt;Function Expressions&lt;/li&gt;
&lt;li&gt;Arrow Function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are you ready? Let's go! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUpRYnjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632631097565/khLIUxIrH.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUpRYnjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632631097565/khLIUxIrH.gif" alt="giphy (1).gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#function-declarations"&gt;
  &lt;/a&gt;
  Function Declarations
&lt;/h1&gt;

&lt;p&gt;We use the &lt;code&gt;function&lt;/code&gt; keyword to declare a function. Same like we declare a variable 😊 &lt;/p&gt;

&lt;p&gt;So let's declare another function to calculate the age based on the birth year.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Function declaration
function calcAge1(birthyear) {
    return 2021 - birthyear;
}

const age1 = calcAge1(1986);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what we have done here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have created a &lt;code&gt;function&lt;/code&gt; by giving the name &lt;code&gt;calcAge1&lt;/code&gt; to calculate the age.&lt;/li&gt;
&lt;li&gt;And we have given the function parameter as &lt;code&gt;birthyear&lt;/code&gt;. So that's the input data that we will be taking to calculate the age. &lt;/li&gt;
&lt;li&gt;We will be returning the results by subtracting the &lt;code&gt;birthyear&lt;/code&gt; from the current year to calculate the age. &lt;/li&gt;
&lt;li&gt;Then, we stored this &lt;code&gt;function&lt;/code&gt; in another variable (&lt;code&gt;age1&lt;/code&gt;) and called the function, and we have given the actual data to calculate the age inside the &lt;code&gt;calcAge1&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is how we simply declare a function.  I hope this is clear to you! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#function-expressions"&gt;
  &lt;/a&gt;
  Function Expressions
&lt;/h1&gt;

&lt;p&gt;Now let's see how we can perform the same function with the function expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Function expression
const calcAge2 = function(birthyear) {
    return 2021 - birthyear;
}

const age2 = calcAge2(1986);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Earlier, we have started with the &lt;code&gt;function&lt;/code&gt; keyword. But with function expression, we write the function as an expression. Remember that an expression produces a value, so we must create a variable to store that value. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we create a variable to store the function (&lt;code&gt;calcAge2&lt;/code&gt;), which will be the actual function. &lt;/li&gt;
&lt;li&gt;Then, we write the function as same as before,  &lt;strong&gt;but without a function name&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Next, we add the function parameters, function body, and then call the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, simple as that! &lt;/p&gt;

&lt;p&gt;Alright! Now you might be wondering what's the big difference or big deal between function declaration and function expression. &lt;/p&gt;

&lt;p&gt;There's one major difference between these two. And that is, we can actually &lt;strong&gt;call function declaration before it is defined in the code.&lt;/strong&gt; We call this &lt;strong&gt;hoisting&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function declarations are hoisted, but expressions are not!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In the code below, I've called the function before the function declaration and the function expression. So, if you run this code, &lt;code&gt;cosole.log&lt;/code&gt; will produce an error for the 'calcAge2`. Try it out!&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Function declaration
const age1 = calcAge1(1986);

function calcAge1(birthyear) {
    return 2021 - birthyear;
}


//Function expression
const age2 = calcAge2(1986);

const calcAge2 = function(birthyear) {
    return 2021 - birthyear;
}

console.log(age1, age2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;You can learn more about &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;JavaScript hoisting here.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Okay, let's dive into arrow functions! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bj1KLK8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632634938289/xs8Z3pWLd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bj1KLK8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632634938289/xs8Z3pWLd.gif" alt="giphy (2).gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h1&gt;

&lt;p&gt;There is another way of declaring functions in modern JavaScript, and that's with the arrow function, which actually looks like an arrow: () =&amp;gt; {}&lt;/p&gt;

&lt;p&gt;Arrow functions are actually shorter and faster to write. Let's look at the same example that we used before and convert it to an arrow function. &lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Arrow function
const calcAge3 = birthyear =&amp;gt; 2021 - birthyear;

const age3 = calcAge3(1998);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;Let's see what we have done here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have created a variable (&lt;code&gt;calcAge3&lt;/code&gt;) to store the function the same as before since the arrow function is also a function expression. &lt;/li&gt;
&lt;li&gt;Then, we have added the &lt;code&gt;birthyear&lt;/code&gt; because we want to calculate the birth year. &lt;/li&gt;
&lt;li&gt;Then, we added an arrow (&lt;code&gt;=&amp;gt;&lt;/code&gt;), and that's the reason we call this &lt;code&gt;arrow function&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Then, we simply wrote what we wanted to return (&lt;code&gt;2021 - birthyear&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then, we have called the function the same as earlier.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, this code is a lot easier and faster to write. And one of the reasons for that is that we don't need the &lt;code&gt;curly braces&lt;/code&gt; like previously to define a code block for the function body. And another reason is that &lt;code&gt;return&lt;/code&gt; actually happens implicitly here; it automatically returns the value without explicitly defining the &lt;code&gt;return&lt;/code&gt; keyword. &lt;/p&gt;

&lt;p&gt;So this is actually just the simplest form! &lt;/p&gt;

&lt;p&gt;But this form will be changed and gets more complicated when we have more than one parameter or more than one result to return. &lt;/p&gt;

&lt;p&gt;Now let's look at a more complex example where we have to use multiple parameters and code. &lt;/p&gt;

&lt;p&gt;Let's say that we need to check whether I'm eligible to drive. To do that, I need my birth year and my name as parameters. And then, I want to check my current age and then check it against the eligible age to have a driver's license. Then, produce a result saying that I'm eligible or not. &lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const eligibileToDrive = (birthyear, firstName) =&amp;gt; {
    const age = 2021 - birthyear;
    const EligibleToDrive = age &amp;gt; 18;
    return `${firstName} is eligible to drive!`;
}

const eligible = eligibileToDrive(1986, 'Sumudu');
console.log(eligible);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;So in here, we have wrapped the parameters in &lt;code&gt;parenthesis&lt;/code&gt; and wrapped our code in &lt;code&gt;curly braces&lt;/code&gt;. Same as we have done in function declarations and expressions. That's the only difference that you will see between simple and complex arrow functions. &lt;/p&gt;

&lt;p&gt;I hope that now you can understand how you can write simple and complex arrow functions. &lt;/p&gt;



&lt;p&gt;To recap and better understand the difference between these three types of functions, refer to the below code.&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Function declaration
function calcAge1(birthyear) {
    return 2021 - birthyear;
}


//Function expression
const calcAge2 = function(birthyear) {
    return 2021 - birthyear;
}


//Arrow function
const calcAge3 = birthyear =&amp;gt; 2021 - birthyear;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;So this is all about the basics of JavaScript functions. Of course, there's a lot more to functions than these basic concepts, but you can easily get through the rest when you understand these basics. &lt;/p&gt;

&lt;p&gt;Let's give you all a big hand for reading to the end of this post and trying to understand this complex concept. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--igj9Cn_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632639429878/Yxfzr05y7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--igj9Cn_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632639429878/Yxfzr05y7.gif" alt="giphy (3).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this post helps you to clarify all your doubts about functions!&lt;/p&gt;

&lt;p&gt;Happy learning! 🤗&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 63</title>
      <author>Christopher Glikpo</author>
      <pubDate>Mon, 27 Sep 2021 03:30:48 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-63-1n0p</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-63-1n0p</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will be Making our first ajax call&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mIKK5mm1E94"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Usando a Biblioteca Exposed</title>
      <author>Ederson Ferreira</author>
      <pubDate>Mon, 27 Sep 2021 00:33:42 +0000</pubDate>
      <link>https://dev.to/kotlinautas/usando-a-biblioteca-exposed-442</link>
      <guid>https://dev.to/kotlinautas/usando-a-biblioteca-exposed-442</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kotlinautas"&gt;
  &lt;/a&gt;
  Kotlinautas
&lt;/h2&gt;

&lt;p&gt;Esse conteúdo é oferecido e distribuído pela comunidade &lt;a href="https://twitter.com/kotlinautas/"&gt;Kotlinautas&lt;/a&gt;, uma comunidade brasileira que busca oferecer conteúdo gratuito sobre a linguagem Kotlin em um espaço plural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" alt="capa Kotlinautas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-um-orm"&gt;
  &lt;/a&gt;
  O quê é um ORM?
&lt;/h2&gt;

&lt;p&gt;ORM (Mapeamento de Objeto Relacional) é uma maneira de mapear dados de um banco de dados, em objetos de uma aplicação. Como se fosse uma ponte entre classes da nossa aplicação, e o banco de dados da aplicação.&lt;/p&gt;

&lt;p&gt;ORM's servem principalmente para facilitar a comunicação entre uma aplicação e seu banco de dados. Facilitando processos de leitura, escrita, atualização e remoção de dados.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-exposed"&gt;
  &lt;/a&gt;
  O quê é Exposed?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt; é a biblioteca oficial de ORM para Kotlin, criada pela própria JetBrains. Uma de suas principais vantagens é poder usar diferentes bancos de dados, e poder trocar qual banco você está usando de maneira fácil. A lista de bancos de dados atualmente suportada pelo Exposed é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;H2&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;MariaDB&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-vamos-criar"&gt;
  &lt;/a&gt;
  O quê vamos criar?
&lt;/h2&gt;

&lt;p&gt;Vamos criar um sistema de cadastro de planetas. Onde poderemos inserir informações sobre um planeta, e essas informações serão inseridas em um banco de dados. Com isso, poderemos usar a Exposed para conectar a nossa aplicação, á um banco de dados que desejarmos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-o-projeto"&gt;
  &lt;/a&gt;
  Criando o projeto
&lt;/h2&gt;

&lt;p&gt;Abra seu IntelliJ no menu inicial e clique em &lt;em&gt;New Project&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfdAWxqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3xauc7y38mqtdej31ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfdAWxqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3xauc7y38mqtdej31ka.png" alt="botão New Project no menu inicial do IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois, selecione a opção &lt;strong&gt;Kotlin DSL build script&lt;/strong&gt;, selecione também a opção &lt;strong&gt;Kotlin/JVM&lt;/strong&gt;, e opicionalmente remova a primeira opção &lt;strong&gt;Java&lt;/strong&gt;. Essa opção não vai mudar em nada, pois ela dá suporte do Gradle á linguagem Java, mas apenas iremos usar Kotlin.&lt;/p&gt;

&lt;p&gt;Após isso, clique em &lt;strong&gt;Next&lt;/strong&gt; e escreva o nome do projeto e a localização na sua máquina. Essas duas opção são completamente pessoais, caso não tenha nenhuma ideia, coloque algo como &lt;strong&gt;exposed&lt;/strong&gt; apenas como identificação.&lt;/p&gt;

&lt;p&gt;Agora, com o projeto aberto, vá ao aquivo &lt;code&gt;build.gradle.kts&lt;/code&gt; e adicione as dependências da Exposed, com a seção &lt;code&gt;dependencies&lt;/code&gt; ficando assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kotlin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stdlib"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-core:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-dao:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-jdbc:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.h2database:h2:1.4.199"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.slf4j:slf4j-api:1.7.5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.slf4j:slf4j-simple:1.6.4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, clique no elefante no canto superior direito para carregar as alterações no Gradle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSNZzWp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25316fmqf0v5omh9q6fi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSNZzWp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25316fmqf0v5omh9q6fi.png" alt="Elefante do Gradle no canto superior direito"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, poderemos começar a programar. Você pode criar um arquivo em &lt;code&gt;src/main/kotlin/&lt;/code&gt; chamado &lt;code&gt;main.kt&lt;/code&gt; para ser o arquivo principal da aplicação.&lt;/p&gt;

&lt;p&gt;Mas com qualquer nome de arquivo, como você irá usar a Exposed, sempre se lembre de importar a Exposed no começo do arquivo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usando-a-exposed"&gt;
  &lt;/a&gt;
  Usando a Exposed
&lt;/h2&gt;

&lt;p&gt;Primeiro, vamos precisar criar um objeto que irá representar uma tabela em nosso banco de dados, e dentro desse objeto inserir as colunas do nosso banco (como propriedades). Isso pode ser feito da seguinte maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.*&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.transactions.transaction&lt;/span&gt;

&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nome&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"nome"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"massa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solido&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"solido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Usamos a palavra &lt;code&gt;object&lt;/code&gt; para criar o objeto, colocamos o nome da tabela &lt;code&gt;Planetas&lt;/code&gt;, e o tipo da variável, que é um tipo da Exposed, Sendo &lt;code&gt;Table&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Dentro do objeto, criamos três variáveis, sendo &lt;code&gt;nome&lt;/code&gt;, &lt;code&gt;massa&lt;/code&gt;, e &lt;code&gt;solido&lt;/code&gt;. &lt;code&gt;nome&lt;/code&gt; irá guardar o nome do planeta, &lt;code&gt;massa&lt;/code&gt; irá guardar a massa do planeta comparada á terra e &lt;code&gt;solido&lt;/code&gt; irá determinar se o planeta é sólido ou não;&lt;/li&gt;
&lt;li&gt;Para determinar essas variáveis, usamos tipos de dados de um banco de dados, como &lt;code&gt;varchar&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, e &lt;code&gt;bool&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após isso, podemos criar a nossa função &lt;code&gt;main&lt;/code&gt;. Dentro dela, vamos primeiramente conectar ao banco de dados. Isso pode ser feito com a função &lt;code&gt;Database.connect&lt;/code&gt; dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Estamos usando o banco de dados H2. Um banco de dados Java, que pode funcionar apenas na memória. Vamos usar esse banco de dados pois a cada vez que rodarmos o programa, teremos um novo banco totalmente zerado. Com isso você ficará livre para testar o banco, criando, lendo, editando e removendo dados;&lt;/li&gt;
&lt;li&gt;Para fazer essa conexão, tivemos que passar um texto que representa esse banco. Caso você queira mudar o banco, você apenas irá precisar mudar esse texto;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora precisamos inserir a tabela &lt;code&gt;Planetas&lt;/code&gt; que criamos no banco. Isso pode ser feito de maneira completamente automática usando a função &lt;code&gt;SchemaUtils.create&lt;/code&gt;. Essa função pode ser usada da seguinte maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Usamos um bloco &lt;code&gt;transaction&lt;/code&gt; pois toda conexão ao banco (escrita, leitura, edição e remoção) precisa estar dentro de um bloco &lt;code&gt;transaction&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Passamos ao &lt;code&gt;SchemaUtils.create&lt;/code&gt; o nosso objeto &lt;code&gt;Planetas&lt;/code&gt;. Com isso, essa tabela será criada no banco de dados;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, vamos criar um bloco &lt;code&gt;while (true)&lt;/code&gt; onde iremos executar um mesmo trecho de código eternamente, onde iremos ler o nome, massa e se o planeta é sólido ou não, vamos enviar esses dados ao banco de dados, e também mostrar todas as linhas do banco na tela.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos usar a função &lt;code&gt;readLine&lt;/code&gt; para pegar os dados da linha de comando, mostrando na tela pergunta por pergunta:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;na variável &lt;code&gt;nomePlaneta&lt;/code&gt; apenas transformamos o texto escrito na linha de comando em &lt;code&gt;String&lt;/code&gt; com &lt;code&gt;.toString()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;na variável &lt;code&gt;massaPlaneta&lt;/code&gt; primeiro transformamos o texto escrito em &lt;code&gt;String&lt;/code&gt;, e depois transformamos essa &lt;code&gt;String&lt;/code&gt; em &lt;code&gt;Double&lt;/code&gt;. Para assim obtermos o número decimal da massa do planeta em relação á terra;&lt;/li&gt;
&lt;li&gt;na variável &lt;code&gt;solidoPlaneta&lt;/code&gt; testamos se o texto escrito é igual á "sim". se essa condição for verdadeira, o planeta é sólido. Se não, o planeta não é sólido;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora vamos executar a transação para inserirmos esses dados no banco:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Para inserirmos esses dados, podemos usar a função &lt;code&gt;Planetas.insert&lt;/code&gt;, informando o valor de cada coluna do banco com &lt;code&gt;it[COLUNA] = valor&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora já conseguimos escrever dados no banco. Por fim, vamos pegar todos os dados do banco, e mostrar na tela. Mostrando que realmente conseguimos escrever os dados. Primeiro, vamos pegar todas as linhas da tabela &lt;code&gt;Planetas&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;planetasSalvos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos percorrer por todo essa lista de dados, e mostrar na tela planeta por planeta usando um &lt;code&gt;.map&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
          &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
          &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;planetasSalvos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="n"&gt;planetasSalvos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
          &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Planeta ${it[Planetas.nome]} tem ${it[Planetas.massa]} massas terrestres e é sólido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Planeta ${it[Planetas.nome]} tem ${it[Planetas.massa]} massas terrestres e não é sólido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Dentro de um &lt;code&gt;map&lt;/code&gt;, percorrermos elemento por elemento, e para nos referirmos ao elemento atual, podemos usar a variável &lt;code&gt;it&lt;/code&gt;. e dentro desse &lt;code&gt;it&lt;/code&gt; podemos pegar os valores de cada linha, podendo assim mostrar na tela;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, executando esse programa, poderemos ver na prática como criamos um código que pode inserir e ler dados de maneira dinâmica:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Insira o nome do planeta: Mercúrio
Insira a massa do planeta: 0.1
O planeta é sólido? [sim/não]: sim
Planeta Mercúrio tem 0.1 massas terrestres e é sólido
Insira o nome do planeta: Vênus
Insira a massa do planeta: 0.9
O planeta é sólido? [sim/não]: sim
Planeta Mercúrio tem 0.1 massas terrestres e é sólido
Planeta Vênus tem 0.9 massas terrestres e é sólido
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-e-delete"&gt;
  &lt;/a&gt;
  Update e Delete
&lt;/h3&gt;

&lt;p&gt;Duas operações que não usamos foram a &lt;strong&gt;Update&lt;/strong&gt;e &lt;strong&gt;Delete&lt;/strong&gt;. Essas duas são muito parecidas em seu uso na Exposed. Pois nas duas é (quase sempre) necessário usar um parâmetro &lt;code&gt;WHERE&lt;/code&gt; para definir quais linhas desejamos mudar/remover. Por exemplo, podemos fazer um Update com WHERE colocando a condição como argumento da função, e a alteração em si no corpo. Dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s"&gt;"teste"&lt;/span&gt; &lt;span class="p"&gt;}){&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Vênus"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Colocamos a condição entre &lt;code&gt;{}&lt;/code&gt; como argumento da função, e no corpo alteramos a linha diretamente;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E para o Delete podemos fazer a mesma coisa, mas agora apenas precisamos colocar a condição:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deleteWhere&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s"&gt;"teste"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usando-outros-bancos-de-dados"&gt;
  &lt;/a&gt;
  Usando outros bancos de dados
&lt;/h3&gt;

&lt;p&gt;Caso você queira usar os outros bancos de dados que a Exposed suporta, você pode ver a lista de URL's de conexão de diferentes bancos. Essa lista pode ser acessada &lt;a href="https://github.com/JetBrains/Exposed/wiki/DataBase-and-DataSource"&gt;clicando aqui&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;p&gt;Nesse artigo você aprendeu como usar de forma básica a biblioteca &lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt;, para escrever, ler, editar e remover dados de um banco.&lt;/p&gt;

&lt;p&gt;Obrigado por ler 💙&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>backend</category>
      <category>database</category>
    </item>
    <item>
      <title>📊 Intro: DORA Metrics</title>
      <author>Lorna Watson</author>
      <pubDate>Mon, 27 Sep 2021 00:14:17 +0000</pubDate>
      <link>https://dev.to/lornasw93/calculating-dora-metrics-3k1l</link>
      <guid>https://dev.to/lornasw93/calculating-dora-metrics-3k1l</guid>
      <description>&lt;p&gt;I've created a small Node.js project to calculate DORA Metrics, it's ongoing so is not finished but you can find the &lt;a href="https://github.com/lornasw93/dora-metrics"&gt;repo here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;References/useful links: &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2021.pdf"&gt;Accelerate: State of DevOps 2021&lt;/a&gt;, &lt;a href="https://www.sleuth.io/post/dora-metrics-explained"&gt;DORA metrics explained&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dora"&gt;
  &lt;/a&gt;
  What is DORA?
&lt;/h2&gt;

&lt;p&gt;DORA (DevOps Research and Assessment) represents 7 years of research by a team at Google to identify the most effective and efficient ways to develop and deliver software. They surveyed more than 32,000 industry professionals to find out and understand what makes a high performing team different than a low performing team. As a now industry standard, DORA's research has identified four key metrics (depending on where you look will have slightly different names):&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deployment-frequency"&gt;
  &lt;/a&gt;
  Deployment Frequency
&lt;/h3&gt;

&lt;p&gt;Measure &lt;u&gt;throughput&lt;/u&gt; by how often an organisation successfully releases to production.&lt;/p&gt;

&lt;p&gt;For elite performers: on demand, multiple deploys per day&lt;br&gt;
For high performers: once per week - once per week&lt;br&gt;
For medium performers: once per month - once per 6 months&lt;br&gt;
For low performers: &amp;lt; once per 6 months&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lead-time-for-changes"&gt;
  &lt;/a&gt;
  Lead Time for Changes
&lt;/h3&gt;

&lt;p&gt;Measure &lt;u&gt;throughput&lt;/u&gt; by the amount of time it takes a commit to get into production.&lt;/p&gt;

&lt;p&gt;For elite performers: &amp;lt; one hour&lt;br&gt;
For high performers: 1 day - 1 week&lt;br&gt;
For medium performers: 1 month - 6 months&lt;br&gt;
For low performers: &amp;gt; 6 months&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-to-restore-service"&gt;
  &lt;/a&gt;
  Time to Restore Service
&lt;/h3&gt;

&lt;p&gt;Measure &lt;u&gt;stability&lt;/u&gt; by how long it takes an organisation to recover from a failure in production.&lt;/p&gt;

&lt;p&gt;For elite performers: &amp;lt; 1 hour&lt;br&gt;
For high performers: &amp;lt; 1 day&lt;br&gt;
For medium performers: 1 day - 1 week&lt;br&gt;
For low performers: &amp;gt; 6 months&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#change-failure-rate"&gt;
  &lt;/a&gt;
  Change Failure Rate
&lt;/h3&gt;

&lt;p&gt;Measure &lt;u&gt;stability&lt;/u&gt; by percentage of deployments causing a failure in production. &lt;/p&gt;

&lt;p&gt;For elite performers: 0% - 15%&lt;br&gt;
For high performers: 16% - 30%&lt;br&gt;
For medium performers: 16% - 30%&lt;br&gt;
For low performers: 16% - 30%&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  ✨ Thank you ✨
&lt;/h2&gt;

&lt;p&gt;This is a first post in a series #AllAboutDora, hope this post was useful and interesting!&lt;/p&gt;

</description>
      <category>node</category>
      <category>devops</category>
      <category>dora</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Web 3.0 for mortals</title>
      <author>Jesus Guerrero</author>
      <pubDate>Sun, 26 Sep 2021 23:59:07 +0000</pubDate>
      <link>https://dev.to/jesusantguerrero/web-3-0-for-mortals-3h04</link>
      <guid>https://dev.to/jesusantguerrero/web-3-0-for-mortals-3h04</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1rTqoT6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkca0azk664hmy1aeggj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1rTqoT6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkca0azk664hmy1aeggj.png" alt="Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Lately has emerged a lot of information and hype about Web 3.0 even though it is claimed as the future of the web I missed an honest take. Information about how to get your hands on, what useful products are made with it, the real benefits, the cons. I was looking for this rather than someone selling me the idea.&lt;/p&gt;

&lt;p&gt;That's why in this article, we'll take an honest look at the next generation of the web:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A conceptual explanation&lt;/li&gt;
&lt;li&gt;Examples of Web 3.0 apps&lt;/li&gt;
&lt;li&gt;How the code looks like.&lt;/li&gt;
&lt;li&gt;How to get started.&lt;/li&gt;
&lt;li&gt;The cons&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-concept-web-30"&gt;
  &lt;/a&gt;
  The concept "Web 3.0"
&lt;/h2&gt;

&lt;p&gt;Before telling what web3.0 is about let's explain a little bit what were the previous generations were about. It can be summed up like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the original web A.K.A  &lt;strong&gt;Web 1.0&lt;/strong&gt; the information flowed in one direction and was static, it was from the sites to the users.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web 2.0&lt;/strong&gt;: Information started to be bidirectional, users interact with web apps feeding them with data (uploading photos, creating content, sharing, etc). Its pick was social apps, video/streaming apps as we know today.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web 3.0&lt;/strong&gt; Aims to be a more semantic, intelligent, and decentralized web where Artificial Intelligence, Blockchain, crypto play the main role in web development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice how each generation is built upon the necessity created by the previous one, In this case, the current Web 2.0 where our data is practically owned by big companies, that can censor us, and used it to whatever thing they put in their terms and conditions made the data centralized. The main task of the &lt;strong&gt;decentralized&lt;/strong&gt; aspect that web3.0 introduces is privacy, security and brings ownership to the users; and here is where blockchain comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-blockchain"&gt;
  &lt;/a&gt;
  What is Blockchain?
&lt;/h2&gt;

&lt;p&gt;Basically, Blockchain is a way to store information where data is grouped together, secured by a crypto signature, and immutable, once created can't be changed instead a new block is created with the new information, which is known as a block. Every block saves a reference of the previous block as well as the next one if exists, the information is chained together in chronological order.&lt;/p&gt;

&lt;p&gt;But in addition, Blockchain is responsible for keeping this information in the main ledger that will work as a source of truth and can be read by anyone. This is replicated in multiple computers known as nodes that also have the role of adding new blocks to the chain and share with the network in order to be validated and finally added in the main ledger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ethereum"&gt;
  &lt;/a&gt;
  Ethereum
&lt;/h2&gt;

&lt;p&gt;There are many implementations of blockchain but here I am going to cover &lt;strong&gt;The Ethereum Blockchain&lt;/strong&gt; that not only saves transactions and state data but also serves as a platform to run programs called &lt;strong&gt;Smart Contracts&lt;/strong&gt; (we'll talk a little more about them below) this is the difference between Ethereum blockchain and others like Bitcoin Blockchain (not the cryptocurrency).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ethereum is a technology that lets you send cryptocurrency to anyone for a small fee. It also powers applications that everyone can use and no one can take down.&lt;/p&gt;

&lt;p&gt;It's the world's programmable blockchain&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ethereum works like a big computer, that uses the resources of its nodes as one and every node in the network is running a system called The Ethereum Virtual Machine(EVM) this is the one that allows us to run programs on the Blockchain. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk-is-cheap-show-me-the-code"&gt;
  &lt;/a&gt;
  Talk is cheap, show me the code
&lt;/h2&gt;

&lt;p&gt;Now that we are familiar with the concept let's see what a blockchain developer does and how the programs look like. &lt;/p&gt;

&lt;p&gt;The resulting program for the Ethereum Blockchain is known as Smart Contract. There are high-level languages that compile the code to EVM language, &lt;strong&gt;Solidity&lt;/strong&gt; is the most popular and has some similarities with javascript but there are others like Serpent and  LLL (Lisp Like Language).&lt;/p&gt;

&lt;p&gt;This is how a hello world would look like in Solidity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;//SPDX-License-Identifier: Unlicense
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;Greeter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line is an instruction for the compiler setting the version of Solidity due to breaking changes of the latest versions with the previous ones, It is a strongly typed language. Here is a variable definition and how a function is defined. Don't worry I'll let you sources to learn more about it here I just wanted to show how the code looks like to give you an idea.&lt;/p&gt;

&lt;p&gt;Smart Contracts will behave as our backend and can be connected to a frontend to create a Decentralized App (Dapp) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-examples"&gt;
  &lt;/a&gt;
  Live Examples
&lt;/h3&gt;

&lt;p&gt;The most common examples fall into categories like finance, games and marketplace. Some of the Dapps that standout are:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://brave.com/"&gt;Brave Browser&lt;/a&gt;&lt;/strong&gt;: Brave made a reimplementation of how ads work in browsers offering tokens to users to see ads and selecting the frequency they want to see them. Those tokens can be used to support content creators and exchange for future services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://opensea.io/?ref=0xcd2b3c517d3de4f962dc01700dc57960cdbeb5e9&amp;amp;utm_source=DappRadar&amp;amp;utm_medium=deeplink&amp;amp;utm_campaign=visit-website"&gt;Open Sea&lt;/a&gt;&lt;/strong&gt;: Digital Art Market Place where web artists can sell digital resources (image, video, audio, or 3D art)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://gitcoin.co/"&gt;Gitcoin&lt;/a&gt;&lt;/strong&gt;: That allows users to earn money building open-source public projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How to get started
&lt;/h3&gt;

&lt;p&gt;There's a gamified tutorial that can serve as a practical introduction with the Solidity language and dapps called &lt;a href="https://cryptozombies.io/"&gt;cryptozombies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After grasp some of the main concepts of Solidity you can go and install &lt;a href="https://hardhat.org/getting-started/"&gt;hardhat&lt;/a&gt; to create your own contracts and test, deploy in your own local development environment &lt;/p&gt;

&lt;p&gt;Connect the smart contract with a frontend (can be your framework of choice) &lt;a href="https://docs.ethers.io/v5/getting-started/"&gt;ether.js&lt;/a&gt; is a lightweight, ESM ready package to interact with smart contracts in javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blockchain-challenges"&gt;
  &lt;/a&gt;
  Blockchain challenges.
&lt;/h2&gt;

&lt;p&gt;It isn't all roses in blockchain, every new block created requires a strong amount of computation to solves a &lt;strong&gt;Proof of work&lt;/strong&gt; the first node to solve that problem ends up adding the new block to the blockchain and emit the change to all other nodes.&lt;/p&gt;

&lt;p&gt;How Ethereum incentives nodes to spend those resources in solving the proof of work fast, and how to prevent developers and its smart contracts from consuming all resources with an accidental infinite loop for example. The answer was paying.&lt;/p&gt;

&lt;p&gt;The first to solve a proof of work receives a payment from the network, and every transaction requires payment so if an infinite loop consuming resources is introduced in a small contract it will stop when it has nothing to pay. The fee payments are in &lt;strong&gt;Ether(ETH)&lt;/strong&gt; the cryptocurrency of Ethereum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is expensive to develop apps in the blockchain because of the cost associated with every transaction&lt;/li&gt;
&lt;li&gt;Computation requires a lot of energy currently&lt;/li&gt;
&lt;li&gt;Transactions are slow compared with web 2.0&lt;/li&gt;
&lt;li&gt;The extra steps, software, and education can be a barrier for new developers and by extension the main adoption&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion.
&lt;/h2&gt;

&lt;p&gt;The main concerns of web 3.0 are interesting and a big contrast of how we see and apply the web today&lt;/p&gt;

&lt;p&gt;It opens a lot of possibilities and I am willing to see how it evolves in the near future and how it creates conditions to make development more affordable to expand the vision of a more secure, decentralized and private web. &lt;/p&gt;

&lt;p&gt;Thanks for reading. I hope the article helps to bring some clarity on the topic if you have any questions the comments are open, or if you like &lt;a href="https://twitter.com/JesusntGuerrero"&gt;Twitter&lt;/a&gt; as well as my &lt;a href="https://github.com/jesusantguerrero"&gt;Github&lt;/a&gt; where I do some experiments and projects.&lt;/p&gt;

&lt;p&gt;Have a good day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resouces"&gt;
  &lt;/a&gt;
  Resouces
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dappradar.com/"&gt;DappRadar&lt;/a&gt; WebApp that list Descentralized apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ethereum.org/en/developers/docs/"&gt;Ethereum Developer Docs&lt;/a&gt; Official documentation describing every concept of Ethereum network&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cryptozombies.io/"&gt;Cryptozombies&lt;/a&gt; Practical introduction to Solidity in form of gamified tutorial. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/oliverjumpertz/status/1396394220299169793"&gt;Oliver's thread on become a Web 3.0 developer&lt;/a&gt; Thread with resources (Courses, tools) with what a developer need to become a Web 3.0 developer&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/VittoStack/status/1439980837899055108"&gt;Vitto's thread on web3.0&lt;/a&gt; Useful thread with information and resources to understand and apply web3.0&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ethereum.org/en/developers/docs/web2-vs-web3/"&gt;Web 2 vs Web 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Big O Basics  </title>
      <author>Danielle Ellis</author>
      <pubDate>Sun, 26 Sep 2021 23:04:51 +0000</pubDate>
      <link>https://dev.to/thedanielleellis/big-o-basics-3j6h</link>
      <guid>https://dev.to/thedanielleellis/big-o-basics-3j6h</guid>
      <description>&lt;p&gt;The code we choose to use can impact the speed and the performance of our program. How would we know which algorithm is most efficient? Big O Notation is used in Computer Science and measures how quickly the runtime of an algorithm based on the number of input in a function. &lt;/p&gt;

&lt;p&gt;Big O looks at the worst case scenario or the max number of steps to take in a problem. On the other hand, Big Omega looks at the best case scenario or the least number of steps to take in a problem. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-runtimes-from-least-to-greatest-effectiveness"&gt;
  &lt;/a&gt;
  Common Runtimes from least to greatest effectiveness:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(n^2)&lt;/strong&gt;: Quadratic time - as (n) grows, runtime squares. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt;: Linear - as (n) scales, runtime scales. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(log n)&lt;/strong&gt;: Logarithmic time - halves dataset until it finds (n). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt;: Constant - as (n) grows, there is no impact. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#big-o-complexity-chart"&gt;
  &lt;/a&gt;
  Big O Complexity chart
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZrROxqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4c3l6pys5u3v1a6s9g8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZrROxqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4c3l6pys5u3v1a6s9g8.png" alt="Big ) Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This chart shows the runtime with green shaded area being the most effective to the red shaded areas being the least effective. &lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>algorithms</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
