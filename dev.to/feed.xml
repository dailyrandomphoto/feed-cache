<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Hot Reload para desarrolladores de .NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Tue, 06 Jul 2021 19:56:36 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/hot-reload-para-desarrolladores-de-net-3h6h</link>
      <guid>https://dev.to/esdanielgomez/hot-reload-para-desarrolladores-de-net-3h6h</guid>
      <description>&lt;p&gt;¡Hola! Un gusto saludarte. En esta ocasión tendremos la oportunidad de aprender sobre una de las funcionalidades más esperadas por los desarrolladores de .NET: &lt;code&gt;Hot Reload&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qu%C3%A9-es-hot-reload"&gt;
  &lt;/a&gt;
  ¿Qué es Hot Reload?
&lt;/h3&gt;

&lt;p&gt;Hot Reload, o recarga en caliente en español, nos permite modificar el código fuente de nuestra aplicación mientras esta se encuentra en ejecución y visualizar estos cambios en tiempo real sin necesidad de reiniciar la ejecución. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-acceder-a-esta-nueva-funcionalidad"&gt;
  &lt;/a&gt;
  ¿Cómo acceder a esta nueva funcionalidad?
&lt;/h3&gt;

&lt;p&gt;Al momento de escribir este artículo (junio de 2021), es posible acceder a .NET Hot Reload desde la versión &lt;a href="https://visualstudio.microsoft.com/es/vs/preview/"&gt;16.11 Preview&lt;/a&gt; de Visual Studio 2019. Con esta versión, podremos abrir cualquier proyecto sobre el ecosistema de .NET que sea compatible, y probar esta funcionalidad. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-reload-en-acci%C3%B3n"&gt;
  &lt;/a&gt;
  Hot Reload en acción
&lt;/h3&gt;

&lt;p&gt;Para probar esta funcionalidad, veamos un ejemplo de una aplicación web con el framework DotVVM sobre ASP.NET, el cual se basa en el patrón MVVM (Modelo, Vista, VistaModelo). &lt;/p&gt;

&lt;p&gt;Los pasos son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abrir el proyecto en Visual Studio.&lt;/li&gt;
&lt;li&gt;Iniciar la aplicación con el depurador asociado con F5.&lt;/li&gt;
&lt;li&gt;Abrir el archivo con el código fuente que se desea editar. &lt;/li&gt;
&lt;li&gt;Aplicar los cambios en el código.&lt;/li&gt;
&lt;li&gt;Visualizar la actualización correspondiente. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para aplicar los cambios realizados en el código, en Visual Studio 2019 podremos ubicar el botón Hot Reload como se puede visualizar a continuación: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hM7SXpNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4bhqg6n36xghblq2ru5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hM7SXpNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4bhqg6n36xghblq2ru5.png" alt="Hot Reload Button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este es un ejemplo para los cambios efectuados en una clase en C#:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPSnsf4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2o8vff0pcec8f4nkrwx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPSnsf4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2o8vff0pcec8f4nkrwx.gif" alt="GIF Hot Reload C Sharp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Asimismo, lo podemos aplicar a otros componentes de código fuente, por ejemplo, a las vistas HTML en DotVVM:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YF4BLMz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmhm24fy3qr4t57pqre0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YF4BLMz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmhm24fy3qr4t57pqre0.gif" alt="GIF Hot Reload HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fabuloso, ¿verdad? Ahora bien, es posible que te preguntes qué sucede cuando nos encontramos con excepciones en tiempo de ejecución o con errores de compilación. Pues bien, en esos escenarios visualizaremos algo como esto: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhjWAg4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j77wyyet3icyjpr1ghb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhjWAg4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j77wyyet3icyjpr1ghb.gif" alt="GIF Hot Reload Errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitaciones-del-hot-reload"&gt;
  &lt;/a&gt;
  Limitaciones del Hot Reload
&lt;/h3&gt;

&lt;p&gt;De acuerdo con la documentación de Microsoft, los cambios que se pueden realizar en el código fuente durante una sesión de depuración sin reiniciar la ejecución son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tipos.&lt;/li&gt;
&lt;li&gt;Iteradores.&lt;/li&gt;
&lt;li&gt;Expresiones asincrónicas/await.&lt;/li&gt;
&lt;li&gt;Expresiones LINQ.&lt;/li&gt;
&lt;li&gt;Lambdas.&lt;/li&gt;
&lt;li&gt;Objetos dinámicos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asimismo, existen cambios no compatibles con esta funcionalidad, a continuación, se pueden visualizar algunos de ellos&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cambiar el nombre de los elementos.&lt;/li&gt;
&lt;li&gt;Eliminación de espacios de nombres, tipos y miembros.&lt;/li&gt;
&lt;li&gt;Modificación de interfaces.&lt;/li&gt;
&lt;li&gt;Modificación de firmas de método.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En esta página web se pueden visualizar todos los detalles en cuanto a las limitaciones del Hot Reload en .NET: &lt;a href="//aka.ms/dotnet/hot-reload"&gt;https://aka.ms/dotnet/hot-reload&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aspectos-adicionales-por-comentar"&gt;
  &lt;/a&gt;
  Aspectos adicionales por comentar
&lt;/h3&gt;

&lt;p&gt;Los ejemplos sobre Hot Reload que acabamos de visualizar fueron aplicados sobre un proyecto con .NET 5. Esto ha sido posible gracias a que hemos utilizado la Preview 16.11 de Visual Studio 2019. &lt;/p&gt;

&lt;p&gt;Ahora bien, Microsoft ha pensado esta funcionalidad principalmente para .NET 6, a diferencia de nuestros ejemplos, podríamos visualizar como se recarga nuestra página web en tiempo real con Hot Reload, asimismo, si quisiéramos utilizar esta funcionalidad en la consola de comandos, por ejemplo, necesitaríamos por lo menos la Preview 4 de .NET 6. &lt;/p&gt;

&lt;p&gt;En la actualidad (junio 2021) podemos ver únicamente de manera preliminar estas características, para el futuro, Microsoft planea obtener toda la potencia de esta característica con .NET 6 (y futuras versiones de .NET) y Visual Studio 2022. Por el momento, es posible mencionar que la nueva versión de .NET será anunciada en la &lt;a href="https://dotnetconf.net/"&gt;.NET Conf 2021&lt;/a&gt;, la cual, se llevará a cabo en noviembre 9-11 de este año. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gracias-por-leer"&gt;
  &lt;/a&gt;
  Gracias por leer
&lt;/h3&gt;

&lt;p&gt;Muchas gracias por leer, espero que este artículo te haya parecido interesante y pueda serte de utilidad en el futuro. Si tienes alguna pregunta o alguna idea que necesites discutir, será un gusto poder colaborarte y juntos intercambiar conocimientos entre sí.&lt;/p&gt;

&lt;p&gt;¡Nos vemos en &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! O si gustas también puedes escribirme por &lt;a href="https://instagram.com/esdanielgomez"&gt;Instagram&lt;/a&gt; o &lt;a href="https://t.me/esdanielgomez"&gt;Telegram&lt;/a&gt;. :=)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>dotnet</category>
      <category>csharp</category>
      <category>html</category>
    </item>
    <item>
      <title>CSS3 selectors Cheat Sheet</title>
      <author>Mainak Das</author>
      <pubDate>Tue, 06 Jul 2021 19:52:04 +0000</pubDate>
      <link>https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk</link>
      <guid>https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#css-selectors"&gt;
  &lt;/a&gt;
  CSS Selectors
&lt;/h2&gt;

&lt;p&gt;CSS selectors are utilized to select the content you need to style. In CSS Rule Set, Selectors are the part. CSS selectors select HTML elements as per their id, class, type, attribute, etc.&lt;/p&gt;

&lt;p&gt;CSS selectors are divided into five categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Simple/Basic selectors&lt;/strong&gt; (select elements based on name, id, class)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Combinator selectors&lt;/strong&gt; (select elements based on a specific relationship between them)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pseudo-classes selectors&lt;/strong&gt; (select elements based on a certain state)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pseudo-elements selectors&lt;/strong&gt; (select and style a part of an element)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attribute selectors&lt;/strong&gt; (select elements based on an attribute or attribute value)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#simple-selectors"&gt;
  &lt;/a&gt;
  Simple Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Example description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#id&lt;/td&gt;
&lt;td&gt;#firstname&lt;/td&gt;
&lt;td&gt;Selects the element with id="firstname"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.class&lt;/td&gt;
&lt;td&gt;.intro&lt;/td&gt;
&lt;td&gt;Selects all elements with class="intro"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.class&lt;/td&gt;
&lt;td&gt;p.intro&lt;/td&gt;
&lt;td&gt;Selects only &lt;p&gt; elements with class="intro"&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Selects all elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;Selects all &lt;p&gt; elements&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element,element,..&lt;/td&gt;
&lt;td&gt;div, p&lt;/td&gt;
&lt;td&gt;Selects all  elements and all &lt;p&gt; elements&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#basic-selectors"&gt;
  &lt;/a&gt;
  Basic Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;element&lt;/td&gt;
&lt;td&gt;Type selector. Matches an element.&lt;/td&gt;
&lt;td&gt;p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.class&lt;/td&gt;
&lt;td&gt;Class selector. Matches the value of anclassattribute.&lt;/td&gt;
&lt;td&gt;.warning { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#id&lt;/td&gt;
&lt;td&gt;ID selector. Matches the value of an id attribute.&lt;/td&gt;
&lt;td&gt;#warning { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches elements containing id="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Universal selector. Matches everything.&lt;/td&gt;
&lt;td&gt;* { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches everything */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#attribute-selectors"&gt;
  &lt;/a&gt;
  Attribute selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Selector&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[attribute]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute.&lt;/td&gt;
&lt;td&gt;a[href] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a given value.&lt;/td&gt;
&lt;td&gt;a[href="/sitemap/"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with the attribute and value href="/sitemap/" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute~="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains a sub-value within a space-separated list.&lt;/td&gt;
&lt;td&gt;abbr[title~="Style"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches abbr elements with a title that contains 'Style' (such as in title="Cascading Style Sheets") */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute&lt;/td&gt;
&lt;td&gt;="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains a sub-value within a hyphen-separated list.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches html elements with a lang attribute that contains 'en' (such as in lang="en-gb") */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute^="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that starts with something.&lt;/td&gt;
&lt;td&gt;a[href^="http://"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which begins with 'http://' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute$="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that ends with something.&lt;/td&gt;
&lt;td&gt;a[href$=".com"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which ends with '.com' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute*="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains something.&lt;/td&gt;
&lt;td&gt;a[href*="htmldog"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which contains 'htmldog' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#pseudoclasses-selectors"&gt;
  &lt;/a&gt;
  Pseudo-classes Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;:link&lt;/td&gt;
&lt;td&gt;Matches a link that has not been visited.&lt;/td&gt;
&lt;td&gt;a:link { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:visited&lt;/td&gt;
&lt;td&gt;Matches a link that has been visited.&lt;/td&gt;
&lt;td&gt;a:visited { color: purple }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:active&lt;/td&gt;
&lt;td&gt;Matches an element that is being activated, such as a link being clicked on.&lt;/td&gt;
&lt;td&gt;a:active { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:hover&lt;/td&gt;
&lt;td&gt;Matches an element whose box is being hovered over by a cursor.&lt;/td&gt;
&lt;td&gt;a:hover { text-decoration: none }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:focus&lt;/td&gt;
&lt;td&gt;Matches an element that has focus, such as one that has been tabbed to.&lt;/td&gt;
&lt;td&gt;a:focus { border: 1px solid yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:target&lt;/td&gt;
&lt;td&gt;Matches an element that has been linked to (via&amp;lt;a href="#x"…,for example).&lt;/td&gt;
&lt;td&gt;h2:target { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a second-level heading that has been linked to */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:lang()&lt;/td&gt;
&lt;td&gt;Matches an element of a given language.&lt;/td&gt;
&lt;td&gt;p:lang(fr) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are declared, or otherwise considered, as French */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:first-child&lt;/td&gt;
&lt;td&gt;Matches the first child of an element.&lt;/td&gt;
&lt;td&gt;p:first-child { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:last-child&lt;/td&gt;
&lt;td&gt;Matches the last child of an element.&lt;/td&gt;
&lt;td&gt;div p:last-child { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the last child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:first-of-type&lt;/td&gt;
&lt;td&gt;Matches the first sibling of its type in an element.&lt;/td&gt;
&lt;td&gt;li:first-of-type { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:last-of-type&lt;/td&gt;
&lt;td&gt;Matches the last sibling of its type in an element.&lt;/td&gt;
&lt;td&gt;li:last-of-type { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the last instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-child()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number child of its parent.&lt;/td&gt;
&lt;td&gt;p:nth-child(3) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the third child, if it is a paragrpah, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-last-child()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number child, in reverse order, of its parent.&lt;/td&gt;
&lt;td&gt;p:nth-last-child(2) { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the next-to-last child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-of-type()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number sibling of its type.&lt;/td&gt;
&lt;td&gt;li:nth-of-type(5) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the fifth instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-last-of-type()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number sibling, in reverse order, of its type.&lt;/td&gt;
&lt;td&gt;li:nth-of-type(5) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the next-to-last instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:only-child&lt;/td&gt;
&lt;td&gt;Matches an element if it is the only child of its parent.&lt;/td&gt;
&lt;td&gt;article p:only-child { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a paragraph if it is the only child of an article element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:only-of-type&lt;/td&gt;
&lt;td&gt;Matches an element if it is the only sibling of its type.&lt;/td&gt;
&lt;td&gt;article aside:only-of-type { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches an aside element if it is the only aside element in an article element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:empty&lt;/td&gt;
&lt;td&gt;Matches an element with no children, or content.&lt;/td&gt;
&lt;td&gt;td:empty { border-color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches table data cells with nothing in 'em */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:root&lt;/td&gt;
&lt;td&gt;Matches the root element of a document. This will be the html element in HTML.&lt;/td&gt;
&lt;td&gt;:root { background: yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:enabled&lt;/td&gt;
&lt;td&gt;Matches form control elements that are not disabled.&lt;/td&gt;
&lt;td&gt;input:enabled { border-color: lime }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches input elements that are not disabled */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:disabled&lt;/td&gt;
&lt;td&gt;Matches form control elements that are disabled.&lt;/td&gt;
&lt;td&gt;input:enabled { border-color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches input elements that are disabled */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:checked&lt;/td&gt;
&lt;td&gt;Matches a radio or checkbox type input element that is checked.&lt;/td&gt;
&lt;td&gt;input:checked { outline: 3px solid yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches checked input elements */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:not()&lt;/td&gt;
&lt;td&gt;Negotiation pseudo-class. Matches an element that does not match a selector.&lt;/td&gt;
&lt;td&gt;p:not(:first-child) { color: orange }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are not first children */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#pseudoelements-selectors"&gt;
  &lt;/a&gt;
  Pseudo-elements Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;::first-line&lt;/td&gt;
&lt;td&gt;Matches the first textual line in an element.&lt;/td&gt;
&lt;td&gt;p::first-line { font-weight: bold }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first line in a paragraph */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::first-letter&lt;/td&gt;
&lt;td&gt;Matches the first letter in an element.&lt;/td&gt;
&lt;td&gt;p::first-letter { font-size: 2em }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first letter in a paragraph */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::before&lt;/td&gt;
&lt;td&gt;Used with the content property to generate content before the initial content of an element.&lt;/td&gt;
&lt;td&gt;h1::before { content: "*" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* places an asterisk at the start of a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::after&lt;/td&gt;
&lt;td&gt;Used with the content property to generate content after the initial content of an element.&lt;/td&gt;
&lt;td&gt;h1::after { content: "+" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* places a plus-sign at the end of a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Selector&lt;/td&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Example&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector selector&lt;/td&gt;
&lt;td&gt;Descendant combinator. Matches elements that are descendants of another element.&lt;/td&gt;
&lt;td&gt;aside p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs inside elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector &amp;gt; selector&lt;/td&gt;
&lt;td&gt;Child combinator. Matches elements that are children of another element.&lt;/td&gt;
&lt;td&gt;.warning &amp;gt; p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are children of elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector + selector&lt;/td&gt;
&lt;td&gt;Adjacent sibling combinator. Matches elements that immediately follow another element.&lt;/td&gt;
&lt;td&gt;h1 + * { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first element to follow a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector ~ selector&lt;/td&gt;
&lt;td&gt;General sibling combinator. Matches elements that follow another element.&lt;/td&gt;
&lt;td&gt;h2 ~ p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches every paragraph that follows a second-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#css-group-selector"&gt;
  &lt;/a&gt;
  CSS Group Selector
&lt;/h2&gt;

&lt;p&gt;The grouping selector in CSS picks all the HTML elements with the same style definitions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To minimize the code, just apply the CSS grouping selectors. Simply group the selectors by separating each selector with a comma. Let's see the following code after CSS Grouping Selectors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>5 GraphQL clients for JavaScript and Node.js</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 06 Jul 2021 19:17:27 +0000</pubDate>
      <link>https://dev.to/logrocket/5-graphql-clients-for-javascript-and-node-js-59mm</link>
      <guid>https://dev.to/logrocket/5-graphql-clients-for-javascript-and-node-js-59mm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chisimdiriejinkeonye/"&gt;Chisimdiri Ejinkeonye&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;GraphQL is a query language and runtime for APIs. It enables clients to specify queries and allows servers to validate data against a strongly typed schema.&lt;/p&gt;

&lt;p&gt;Unlike REST APIs, GraphQL uses a single endpoint for all operations. GraphQL-based servers can only communicate via GraphQL queries. For simple projects, it’s feasible to use a REST client, like &lt;a href="https://blog.logrocket.com/axios-or-fetch-api/"&gt;Axios or &lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, to send GraphQL queries. However, for larger, more complex projects that have advanced requirements, a GraphQL client is needed.&lt;/p&gt;

&lt;p&gt;GraphQL clients make communication easier by abstracting away small details and implementing additional features, some of which include caching, query batching and deduplication, and static typing of GraphQL query results.&lt;/p&gt;

&lt;p&gt;In this guide, we’ll compare the following five GraphQL clients and evaluate each in terms of functionality, community support, and size.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#graphqlrequest"&gt;&lt;code&gt;graphql-request&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#apolloclient"&gt;Apollo Client&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#urql"&gt;urql&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#relay"&gt;Relay&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#graphqlhooks"&gt;&lt;code&gt;graphql-hooks&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-graphqlrequest-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;graphql-request&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://graphql.org/code/"&gt;&lt;code&gt;graphql-request&lt;/code&gt;&lt;/a&gt; is a very minimal GraphQL client. The library is isomorphic, meaning it supports both Node.js and browsers. It comes with first-class TypeScript support, so typings never become outdated. The library weighs just &lt;a href="https://bundlephobia.com/package/graphql-request@3.4.0"&gt;5.2kB&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;graphql-request&lt;/code&gt; GitHub repository activity is healthy, with &lt;a href="https://github.com/prisma-labs/graphql-request"&gt;3.7K stars&lt;/a&gt; at the time of writing. On npm, &lt;code&gt;graphql-request&lt;/code&gt; is &lt;a href="https://www.npmjs.com/package/graphql-request#whats-the-difference-between-graphql-request-apollo-and-relay"&gt;downloaded more than 1.3 million times&lt;/a&gt; weekly at the time of writing, so you shouldn’t have any trouble finding help online!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;graphql-request&lt;/code&gt; is simple to use, and there’s almost no learning curve:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`{
  hero {
    name  
  }
}`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;graphql-endpoint&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Works on both server and client&lt;/li&gt;
&lt;li&gt;  Support for TypeScript&lt;/li&gt;
&lt;li&gt;  Very lightweight&lt;/li&gt;
&lt;li&gt;  Strong community support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  No support for advanced features like query caching and deduplication&lt;/li&gt;
&lt;li&gt;  No support for GraphQL subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#apollo-client"&gt;
  &lt;/a&gt;
  Apollo Client
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/docs/react/"&gt;Apollo Client&lt;/a&gt; is an advanced GraphQL client only for frontends. It includes features for caching, query batching, query deduplication, and pagination. It can also be used to manage local state in place of a Redux store. The base library weighs about &lt;a href="https://bundlephobia.com/package/@apollo/client@3.3.6"&gt;33.9kB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apollo Client is written in TypeScript, so TypeScript support is excellent. It has integrations for popular frameworks and libraries like React, Next.js, Angular, and Vue.js. Apollo Client also has a &lt;a href="https://chrome.google.com/webstore/detail/apollo-client-devtools/jdkknkkbebbapilgoeccciglkfbmbnfm?utm_source=chrome-ntp-icon"&gt;Chrome extension&lt;/a&gt; for inspecting and making queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;Apollo Client is updated at least once a month. It is downloaded &lt;a href="https://www.npmjs.com/package/apollo-client"&gt;more than 1 million times weekly&lt;/a&gt; on npm and has over &lt;a href="https://github.com/apollographql/apollo-client"&gt;16K stars and 2K forks&lt;/a&gt; on GitHub at the time of writing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Robust and comprehensive&lt;/li&gt;
&lt;li&gt;  Satisfies most use cases&lt;/li&gt;
&lt;li&gt;  Support for TypeScript&lt;/li&gt;
&lt;li&gt;  Integrations for popular UI libraries and frameworks&lt;/li&gt;
&lt;li&gt;  Integrations for iOS and Android&lt;/li&gt;
&lt;li&gt;  Chrome extension for inspecting queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to activity on npm and GitHub, Apollo Client enjoys online support in the form of a dedicated &lt;a href="https://community.apollographql.com"&gt;community forum&lt;/a&gt;. It also has commercial backing from &lt;a href="https://www.apollographql.com"&gt;Apollo GraphQL Inc.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Steep learning curve for advanced features like query batching, persisted queries, and caching&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#urql"&gt;
  &lt;/a&gt;
  urql
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://formidable.com/open-source/urql/"&gt;urql&lt;/a&gt; aims to be both &lt;a href="https://blog.logrocket.com/why-i-finally-switched-to-urql-from-apollo-client/"&gt;easy to use and extensible&lt;/a&gt; through built-in caching mechanisms with sensible defaults. urql has clients for Preact, React, and Svelte, in addition to a core library for use with Node.js on the server side.&lt;/p&gt;

&lt;p&gt;urql’s bundle size is very small, &lt;a href="https://formidable.com/open-source/urql/docs/comparison/"&gt;weighing only 7.1kB&lt;/a&gt;. It is one of few GraphQL libraries with built-in offline support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;At the time of writing, the urql library is &lt;a href="https://www.npmjs.com/package/urql"&gt;downloaded 95K times a week&lt;/a&gt; on npm, and on GitHub, urql has &lt;a href="https://github.com/FormidableLabs/urql"&gt;received over 6K stars&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;urql is robust, but it is still easy to use for basic functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  query Test($id: ID!) {
    getUser(id: $id) {
      id
      name
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;QUERY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Clear and readable documentation&lt;/li&gt;
&lt;li&gt;  Support for Typescript&lt;/li&gt;
&lt;li&gt;  Integrations for many popular UI libraries and frameworks&lt;/li&gt;
&lt;li&gt;  Browser extension for inspecting queries&lt;/li&gt;
&lt;li&gt;  Built-in offline support&lt;/li&gt;
&lt;li&gt;  Small bundle size&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  No support for Angular&lt;/li&gt;
&lt;li&gt;  No support for query batching&lt;/li&gt;
&lt;li&gt;  No built-in pagination support&lt;/li&gt;
&lt;li&gt;  Small community in comparison to other GraphQL clients&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#relay"&gt;
  &lt;/a&gt;
  Relay
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://relay.dev/"&gt;Relay&lt;/a&gt; is a highly performant and scalable GraphQL client developed by Facebook.&lt;/p&gt;

&lt;p&gt;As you might guess, Relay was built with React in mind. As such, it takes a component-based approach to data fetching. Relay is highly opinionated and is strictly for use with React frontends. Relay has a &lt;a href="https://bundlephobia.com/package/react-relay@11.0.2"&gt;bundle size of 47.1 kB&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;At the time of writing, Relay is &lt;a href="https://www.npmjs.com/package/react-relay"&gt;downloaded at least 94K times&lt;/a&gt; a week on npm and has received &lt;a href="https://github.com/facebook/relay"&gt;over 15K stars and over 1.5K forks&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Advanced features for caching, query deduplication, pagination, and local state management&lt;/li&gt;
&lt;li&gt;  Tightly integrated with React, giving it higher order components and hooks&lt;/li&gt;
&lt;li&gt;  Trusted by top companies like Facebook and Quora&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Only supports React&lt;/li&gt;
&lt;li&gt;  Very opinionated because of its rigid conventions&lt;/li&gt;
&lt;li&gt;  Steeper learning curve in comparison to other clients&lt;/li&gt;
&lt;li&gt;  Documentation is difficult to parse&lt;/li&gt;
&lt;li&gt;  Relay client can only communicate with a &lt;a href="https://blog.logrocket.com/making-a-graphql-server-compatible-with-relay/"&gt;Relay-compatible&lt;/a&gt; GraphQL server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By enforcing a rigid convention, Relay offers less room for mistakes, which can be both positive and negative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-graphqlhooks-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;graphql-hooks&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nearform.com/blog/introducing-graphql-hooks/"&gt;&lt;code&gt;graphql-hooks&lt;/code&gt;&lt;/a&gt; is a very small GraphQL client for React. Despite its tiny size, &lt;code&gt;graphql-hooks&lt;/code&gt; features first-class support for caching, pagination, authentication, file uploads, and server-side rendering. Its bundle size &lt;a href="https://bundlephobia.com/package/graphql-hooks@5.2.0"&gt;weighs only 3.6kB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The client provides the &lt;code&gt;useQuery&lt;/code&gt;, &lt;code&gt;useMutation&lt;/code&gt;, and &lt;code&gt;useSubscription&lt;/code&gt; React Hooks for handling queries, mutations, and subscriptions, respectively. The official documentation includes a guide to &lt;a href="https://www.apollographql.com/docs/react/migrating/hooks-migration/"&gt;migrate from Apollo Client&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;graphql-hooks&lt;/code&gt; is downloaded &lt;a href="https://www.npmjs.com/package/graphql-hooks"&gt;6K times monthly on npm&lt;/a&gt; to go along with &lt;a href="https://github.com/nearform/graphql-hooks"&gt;1.5K stars on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Support for TypeScript&lt;/li&gt;
&lt;li&gt;  Support for advanced features like caching, pagination, and SSR out of the box&lt;/li&gt;
&lt;li&gt;  Very small size&lt;/li&gt;
&lt;li&gt;  API has a small surface area&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Only supports React&lt;/li&gt;
&lt;li&gt;  Small community&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-right-graphql-client-for-your-project"&gt;
  &lt;/a&gt;
  Choosing the right GraphQL client for your project
&lt;/h2&gt;

&lt;p&gt;The table below summarizes the information discussed above. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Community support&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Learning curve&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;TypeScript typings&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Pagination, query caching, batching, and deduplication&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Isomorphic support&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Integrations with UI libraries and frameworks&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;graphql-request&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Great&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;5.2 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apollo Client&lt;/td&gt;
&lt;td&gt;Great&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;33.9 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Client only&lt;/td&gt;
&lt;td&gt;React, Next.js, Angular, Svelte, Ember, web components, and Vue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;urql&lt;/td&gt;
&lt;td&gt;Fair&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;7.1 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Batching not supported&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;React, Svelte, and Vue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Relay&lt;/td&gt;
&lt;td&gt;Fair&lt;/td&gt;
&lt;td&gt;High&lt;/td&gt;
&lt;td&gt;47.1 kB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Client only&lt;/td&gt;
&lt;td&gt;React only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;graphql-hooks&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;3.6 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Batching and deduplication not supported&lt;/td&gt;
&lt;td&gt;Client only&lt;/td&gt;
&lt;td&gt;React only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Choosing the best client for your project will depend heavily on your individual goals and needs. You can, however, use the guidelines listed below as a starting point:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;graphql-request&lt;/code&gt;: server-side or frontend project with simple requirements&lt;/li&gt;
&lt;li&gt;  Apollo Client: advanced frontend project&lt;/li&gt;
&lt;li&gt;  urql: advanced features like caching that runs server side&lt;/li&gt;
&lt;li&gt;  Relay: project is React-based, requires advanced features, and includes many components&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;graphql-hooks&lt;/code&gt;: project is React-based and doesn’t require advanced features&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;GraphQL clients make interfacing with GraphQL APIs much easier than calling them directly.&lt;/p&gt;

&lt;p&gt;Every GraphQL client has its pros and cons. Choosing a client that offers the best features for your use case is paramount to a smooth development experience. Selecting the optimal client will depend on your unique project, and there might not always be an obvious answer. Hopefully, the information in this article will help you to get started!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#monitor-failed-and-slow-graphql-requests-in-production"&gt;
  &lt;/a&gt;
  Monitor failed and slow GraphQL requests in production
&lt;/h2&gt;

&lt;p&gt;While GraphQL has some features for debugging requests and responses, making sure GraphQL reliably serves resources to your production app is where things get tougher. If you’re interested in ensuring network requests to the backend or third party services are successful, &lt;a href="https://logrocket.com/signup"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsjLY60E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbqi8ncnli9u7o0k36qt.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt; &lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic GraphQL requests to quickly understand the root cause. In addition, you can track Apollo client state and inspect GraphQL queries' key-value pairs.&lt;/p&gt;

&lt;p&gt;LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. &lt;a href="https://logrocket.com/signup"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Fetching a API, vs using ContextProvider. When should you use just fetching vs a ContextProvider??</title>
      <author>Bret</author>
      <pubDate>Tue, 06 Jul 2021 18:09:44 +0000</pubDate>
      <link>https://dev.to/yobretyo/fetching-a-api-vs-using-contextprovider-when-should-you-use-just-fetching-vs-a-contextprovider-12cg</link>
      <guid>https://dev.to/yobretyo/fetching-a-api-vs-using-contextprovider-when-should-you-use-just-fetching-vs-a-contextprovider-12cg</guid>
      <description>&lt;p&gt;I’m using Next for the first time and I’m liking it, &lt;br&gt;
There is a choice tho of… when do i need a “ContextProvider”?&lt;/p&gt;

&lt;p&gt;In my Next project i have several files to get data from Airtable:&lt;/p&gt;

&lt;p&gt;In Airtable.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const Airtable = require('airtable');
const base = new Airtable({ apiKey: process.env.AIRTABLE_API_KEY }).base(process.env.AIRTABLE_BASE_ID);
const table = base(process.env.AIRTABLE_TABLE_NAME);
const table2 = base(process.env.AIRTABLE_TABLE_NAME2);
const table3 = base(process.env.AIRTABLE_TABLE_NAME3);

const minifyRecords = (records) =&amp;gt; {
    return records.map(record =&amp;gt; getMinifiedRecord(record));
}

const getMinifiedRecord = (record) =&amp;gt; {
    if(!record.fields.completed) {
        record.fields.completed = false;
    }
    return {
        id: record.id,
        fields: record.fields,
    }
}
export { table, table2, table3, getMinifiedRecord, minifyRecords}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in my getCorals.js i have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import { table, minifyRecords } from './utils/Airtable'

export default async (req, res) =&amp;gt; {
    try{
    const records = await table.select({}).firstPage();
    const minifiedRecords = minifyRecords(records);
    res.statusCode = 200;
    res.json(minifiedRecords);
    //console.log(records)
    }catch(err){
    res.statusCode = 500;
    res.json({msg: 'something went wrong'})
}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The in my actual page to show my data i have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React from 'react'
import { CoralProvider } from '../contexts/CoralContext'
import { table, minifyRecords } from '../pages/api/utils/Airtable'
// im at video 6 in Airtable Nextjs video series....ITS WORKING!!!

export default function Coral({initialCoral}) {
    // console log initialCoral... it logs them out
    //console.log(initialCoral);
    try{
    return (
        &amp;lt;CoralProvider&amp;gt;
            &amp;lt;h1&amp;gt;ZOAS PAGE&amp;lt;/h1&amp;gt;
        &amp;lt;/CoralProvider&amp;gt;
    )
    }catch(err){
        console.log(err);
        return{
            props: {
                err: "something went wrong"
            }
        }
    }
}

export async function getServerSideProps(context) {
    const coral = await table.select({}).firstPage();
    return {
        props: {
            InitCoral: minifyRecords(coral)
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OOOOOOOORRRRRR&lt;/p&gt;

&lt;p&gt;Do i just fetch my data like this:??????&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React from 'react'
import Coralapi from '../../API/Coralapi'
import { useEffect, useState } from "react";
import Airtable from 'airtable';
require('dotenv').config();

const base = new Airtable({apiKey: `${process.env.REACT_APP_AIRTABLE_API_KEY}` }).base(`${process.env.REACT_APP_AIRTABLE_BASE_ID}`);

function Coralpage() {
   const [coral, setCoral] = useState([]);
   const [care, setCare] = useState([]);
   useEffect(() =&amp;gt; {
    base("CORAL")
    .select({view: "Gallery" })
    .eachPage((records, fetchNextPage) =&amp;gt; {
        console.log(records);
        setCoral(records);
        fetchNextPage();
    });
    base("CARE")
    .select({view: "Gallery" })
    .eachPage((records, fetchNextPage) =&amp;gt; {
        console.log(records);
        setCare(records);
        fetchNextPage();
    });

},[]);
return (
    &amp;lt;&amp;gt;
    &amp;lt;h1&amp;gt;Coral Products&amp;lt;/h1&amp;gt;
    {coral.map((coral) =&amp;gt; (
        &amp;lt;Coralapi 
        key={coral.id}
        coral={coral}
        care={care.filter(
            (care) =&amp;gt; care.coral
        )}
        /&amp;gt;
    ))}
    &amp;lt;/&amp;gt;
);
}

export default Coralpage

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IM NOT TOO SURE ON WHAT TO USE???&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>help</category>
      <category>devops</category>
    </item>
    <item>
      <title>CSS Tip - Perfect Flexbox overflow items</title>
      <author>Tony</author>
      <pubDate>Tue, 06 Jul 2021 18:06:46 +0000</pubDate>
      <link>https://dev.to/immannino/css-tip-perfect-flexbox-overflow-items-1ceb</link>
      <guid>https://dev.to/immannino/css-tip-perfect-flexbox-overflow-items-1ceb</guid>
      <description>&lt;p&gt;&lt;sup&gt;&lt;a href="https://www.pexels.com/photo/white-and-blue-painted-wall-2585552/"&gt;Credits for cover photo&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following snippet is a powerful set of CSS rules I use all the time. I think it solves a common layout issue I want to help others solve.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coryrylan.com/blog/css-gap-space-with-flexbox"&gt;Original Source for the code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever needed to create a UI that required a list of items of varying length and you wanted to make it look fluid and pretty at the same time? You tried to use flex box but it all ended up looking like the image below?&lt;/p&gt;

&lt;p&gt;Follow along for a quick CSS snippet that helps level up your CSS flex game.&lt;/p&gt;

&lt;p&gt;What we will be creating:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1vk5UILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j1xbns0p22uomz8bawt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1vk5UILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j1xbns0p22uomz8bawt.gif" alt="Crazy Gif Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Table of Contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-solution"&gt;The Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-explanation"&gt;The Explanation&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;We want to write some CSS that works when tackling variable length lists of items. In a lot of cases, when we start styling these types of pages it looks like the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fe24bEV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/1P8vG.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fe24bEV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/1P8vG.gif" alt="The problem"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;&lt;a href="https://stackoverflow.com/questions/54384305/dynamic-width-parent-with-flexbox-column-wrapping"&gt;source&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Here is what I want to solve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The margin issue&lt;/strong&gt; - Children within a Flex parent do not &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing"&gt;collapse margins&lt;/a&gt;. So when we apply margins to them for spacing purposes, we end up in a scenario where the first/last elements in a row have less margin on their outsides than they do next to their siblings. This becomes an issue when we want a consistent &lt;em&gt;gap&lt;/em&gt; between elements in our list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Unu8rP_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a07xigalqddrdw1ojgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Unu8rP_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a07xigalqddrdw1ojgp.png" alt="Margin Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The overflow elements&lt;/strong&gt; - Depending on the size of our page and the size of the elements in our list, we can have a variable number of items that "overflow" at the end of the list. How do we tackle this? Do we want them to be right justified? Do we want to hardcode some styles for each situation: if 1 item, width 100%, if 2 items width 50%, etc etc? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The size &amp;amp; spacing of the items&lt;/strong&gt; - How much tweaking do we want to do to ensure the items look good? Are we okay with a &lt;code&gt;max-width&lt;/code&gt; or do we need a &lt;code&gt;min-width&lt;/code&gt; for the item to look okay? Are we using all the white space? Are things centered or is everything left-aligned? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Is IE friendly&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;Here is the solution to our problems listed above. I will explain this in further detail below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-shrink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;225px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://flex-basis-fluid-layout-demo.stackblitz.io"&gt;A small demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKdlKK4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmxk4r427v5i6gu9cos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKdlKK4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmxk4r427v5i6gu9cos.png" alt="Example demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-explanation"&gt;
  &lt;/a&gt;
  The Explanation
&lt;/h3&gt;

&lt;p&gt;The core elements to our solution are &lt;code&gt;margin&lt;/code&gt;, the &lt;code&gt;calc&lt;/code&gt; function, and flexbox's &lt;code&gt;flex-grow&lt;/code&gt; and &lt;code&gt;flex-basis&lt;/code&gt; properties.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#margin"&gt;
  &lt;/a&gt;
  Margin
&lt;/h4&gt;

&lt;p&gt;In the snippet we're doing 3 things with margin:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Defining how big of a gap we want between the elements.&lt;/li&gt;
&lt;li&gt;Adding &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; margin to all the children elements.&lt;/li&gt;
&lt;li&gt;Translating the parent &lt;code&gt;.flex&lt;/code&gt; container in the opposite direction of our top and left margins we added on the children.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This snippet is essentially fixing our margin issue I outlined above.&lt;/p&gt;

&lt;p&gt;Here is the margin applied to the children:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U94iMZGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q53mzv78qe9p5jdp20i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U94iMZGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q53mzv78qe9p5jdp20i.png" alt="Flex children"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the negative margin applied to the &lt;code&gt;.flex&lt;/code&gt; container:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" alt="Flex parent"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#but-but-but-youre-forgetting-about-the-raw-gap-endraw-property"&gt;
  &lt;/a&gt;
  BUT BUT BUT You're forgetting about the &lt;code&gt;gap&lt;/code&gt; property!!!!
&lt;/h5&gt;

&lt;p&gt;Yes and no. This same functionality can be applied using the built in &lt;code&gt;gap&lt;/code&gt; property, but this currently has limited support in some mobile browsers and all of IE.&lt;/p&gt;

&lt;p&gt;I know that IE is going away, but I work in an industry &amp;amp; field that supports around 5-10% of our customer base on IE 11 and need a solution that I can trust works. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/almanac/properties/g/gap/"&gt;Here is a good article outlining the gap property&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flex-grow"&gt;
  &lt;/a&gt;
  Flex Grow
&lt;/h4&gt;

&lt;p&gt;If you have never used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow"&gt;flex-grow&lt;/a&gt; before, I highly recommend reading about how it works. The quick and dirty explanation is that it allows our flex children to expand to fill the row/column that they are in.&lt;/p&gt;

&lt;p&gt;In this case we're using the property &lt;code&gt;flex-grow: 1;&lt;/code&gt;. This tells the parent "Hey for all the children you have, make sure they take up &lt;em&gt;ALL&lt;/em&gt; of the white space available".&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;flex-grow: 0;&lt;/code&gt; (default)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Jtdgskj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c95rhyy9kd3xgfcsiu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Jtdgskj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c95rhyy9kd3xgfcsiu5.png" alt="flex grow no"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;flex-grow: 1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" alt="Flex grow yes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flex-basis"&gt;
  &lt;/a&gt;
  Flex Basis
&lt;/h4&gt;

&lt;p&gt;I am going to be honest I really didn't understand what flex basis was until I learned about this css snippet. But, this snippet is a perfect way to understand the concepts of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis"&gt;how it works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Flex basis lets us define the &lt;em&gt;base&lt;/em&gt; or minimum size we want an element to be in a flex container. Whats nice about this is for scenarios where we won't know how many elements we're going to be styling in our list, we can treat the &lt;code&gt;flex-basis&lt;/code&gt; as our "default" size, and then with &lt;code&gt;flex-grow&lt;/code&gt;, if we have less items on the last line, they will fill up the remaining space and look nice. &lt;/p&gt;

&lt;p&gt;Without flex-basis or flex-grow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_tzeDRZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoukaw5enadbwcdtuwkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_tzeDRZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoukaw5enadbwcdtuwkj.png" alt="Without both"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With flex-basis, Without flex-grow&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-k2EVD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nape0ws77dd542088fg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-k2EVD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nape0ws77dd542088fg2.png" alt="With Basis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With both flex-basis and flex-grow&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---n_eEjuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmid47ni7u88ui73nn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---n_eEjuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmid47ni7u88ui73nn2.png" alt="With Both"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Putting it all together in the long-form way, we have the the snippet again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/*  */&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 

  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-shrink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;225px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://flex-basis-fluid-layout-demo.stackblitz.io"&gt;The small demo again&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;All in all, I hope you can take these learnings and apply them to your web projects as you see fit. I hope you learned something new and if anything -- I hope have a better understanding of how flexbox works.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>flexbox</category>
      <category>ui</category>
      <category>html</category>
    </item>
    <item>
      <title>useToggle: Custom react hook for toggle</title>
      <author>Mehul Lakhanpal</author>
      <pubDate>Tue, 06 Jul 2021 18:05:55 +0000</pubDate>
      <link>https://dev.to/318097/usetoggle-custom-react-hook-for-toggle-3g7</link>
      <guid>https://dev.to/318097/usetoggle-custom-react-hook-for-toggle-3g7</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: useToggle.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setToggleStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleStatus&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useToggle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useToggle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useToggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleVisibility&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hide&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hidden content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Thanks for reading 💙&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Follow &lt;strong&gt;@codedrops.tech&lt;/strong&gt; for more.&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/codedrops.tech/"&gt;Instagram&lt;/a&gt; ● &lt;a href="https://twitter.com/codedrops_tech"&gt;Twitter&lt;/a&gt; ● &lt;a href="https://www.facebook.com/codedrops.tech/"&gt;Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Micro-Learning ● Web Development ● Javascript ● MERN stack&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.codedrops.tech/"&gt;codedrops.tech&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=mehullakhanpal.file-ops"&gt;File Ops&lt;/a&gt; - A VS Code extension to easily tag/alias files &amp;amp; quick switch between files&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Git: Fixing Unsigned GPG Commits</title>
      <author>zahrakhadijha</author>
      <pubDate>Tue, 06 Jul 2021 17:38:24 +0000</pubDate>
      <link>https://dev.to/zahrakhadijha/git-fixing-unsigned-gpg-commits-phn</link>
      <guid>https://dev.to/zahrakhadijha/git-fixing-unsigned-gpg-commits-phn</guid>
      <description>&lt;p&gt;Before I started my job, all I knew how to do with Git was&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "commit message"
git push origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On my first day, I learned that I needed to set up a &lt;a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key"&gt;GPG key&lt;/a&gt; so that I could sign my commit messages. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-purpose-of-signing-your-commits"&gt;
  &lt;/a&gt;
  What's the purpose of signing your commits?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GnuPG&lt;/strong&gt; allows you to encrypt and sign your data and communications. &lt;strong&gt;GPG&lt;/strong&gt;, or GNU Privacy Guard is a public key cryptography implementation. This allows for the secure transmission of information between parties and can be used to verify that the origin of a message is genuine. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Signing your commits allows you to have ownership over your work and your communication.&lt;/p&gt;

&lt;p&gt;However, sometimes, I forget to sign my commits and have to go back and fix it 😅&lt;br&gt;
&lt;a href="https://i.giphy.com/media/1Y7ChRtbWnYONjDidg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1Y7ChRtbWnYONjDidg/giphy.gif" alt="Whoops GIPHY"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It felt daunting at first because I was afraid I'd mess up my commits and therefore, my entire branch and get into a git mess. But as I've been religiously practicing Git, I'm getting more comfortable fixing my mistakes and figuring out solutions to conflicts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SHx8r9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1391554477048619013/6KkkYGP8_normal.jpg" alt="Zahra Khadijha 🤍 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zahra Khadijha 🤍
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zahrakhadijha"&gt;@zahrakhadijha&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Whoops, forgot to sign my commits. So I learned how to fix them with: &lt;br&gt;&lt;br&gt;✅`git rebase -i ID-OF-COMMIT-BEFORE-FIX`&lt;br&gt;✅ change `pick` to `edit` for the commits needing a GPG signature&lt;br&gt;✅`git commit --amend --no-edit -S`&lt;br&gt;✅`git rebase --continue`&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:56 PM - 06 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1412440310672723968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1412440310672723968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1412440310672723968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;1 - &lt;strong&gt;&lt;em&gt;Interactive Rebase.&lt;/em&gt;&lt;/strong&gt; You want to begin the rebase at the commit just before the commit that needs to be modified. In my case, it turned out that NONE of my commits were signed after finishing up an entire project/task. So I had to go back and sign them all. I started at the very top of the commits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase -i 3a08ed4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will open a text editor that'll show all the commits you have in your branch. They'll all say &lt;code&gt;pick&lt;/code&gt; next to each commit ID and the message. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pick 3a08ed4 added Summer playlist to Spotify
pick 5a68cc9 updated README for Summer Plans
pick 6ff7e5a removed spring header

# Rebase c6e777e..39574f2 onto c992o90 (3 commands)
#
# Commands: 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Or something like that)&lt;/p&gt;

&lt;p&gt;2 - Replace &lt;code&gt;pick&lt;/code&gt; with &lt;code&gt;edit&lt;/code&gt; within the editor and save your changes with &lt;code&gt;ESC&lt;/code&gt; and then &lt;code&gt;:wq&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So it would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;edit 3a08ed4 added Summer playlist to Spotify
edit 5a68cc9 updated README for Summer Plans
edit 6ff7e5a removed spring header

# Rebase c6e777e..39574f2 onto c992o90 (3 commands)
#
# Commands: 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#remember-i-messed-up-and-didnt-have-any-of-my-commits-signed-if-you-missed-one-youd-only-raw-edit-endraw-the-one-you-didnt-sign"&gt;
  &lt;/a&gt;
  REMEMBER: I messed up and didn't have ANY of my commits signed. If you missed one, you'd only &lt;code&gt;edit&lt;/code&gt; the one you didn't sign.
&lt;/h4&gt;

&lt;p&gt;3 - Once you save your changes, git will bring you back to the command line. Here, you'll do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit ---amend --no-edit -S 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--amend&lt;/code&gt; : fix/change the previous commit message&lt;br&gt;
&lt;code&gt;--no-edit&lt;/code&gt; : use the existing commit message, no need to edit this. &lt;br&gt;
&lt;code&gt;-S&lt;/code&gt; : GPG-sign the commit. &lt;/p&gt;

&lt;p&gt;4 - After you've fixed the commit, you'll run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5 - Lastly, to check that my commit has been signed, I'll run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --show-signature
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resources:&lt;br&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-gpg-to-encrypt-and-sign-messages"&gt;How To Use GPG to Encrypt and Sign Messages&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gnupg.org/"&gt;GnuPG Documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.github.com/en/github-ae@latest/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key"&gt;Github Documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>There Is No Pot Of Gold At The End Of The Rainbow</title>
      <author>Feli (she/her)</author>
      <pubDate>Tue, 06 Jul 2021 17:26:00 +0000</pubDate>
      <link>https://dev.to/kotzendekrabbe/there-is-no-pot-of-gold-at-the-end-of-the-rainbow-5955</link>
      <guid>https://dev.to/kotzendekrabbe/there-is-no-pot-of-gold-at-the-end-of-the-rainbow-5955</guid>
      <description>&lt;p&gt;Recently I watched a short video with &lt;a href="https://www.youtube.com/watch?v=_gt3SjZW9jA"&gt;Simon Sinek about finding the balance&lt;/a&gt;. He talked about how people looking for the perfect partner &lt;em&gt;doesn’t exist&lt;/em&gt;, the perfect job &lt;em&gt;doesn’t exist&lt;/em&gt; or the perfect company &lt;em&gt;doesn’t exist&lt;/em&gt;. That you can't have impact and happiness every day, that it’s about finding the balance. There will always be some bad days or days where you don’t have the energy to give 100%. You have to have bad days to appreciate the good ones. &lt;/p&gt;

&lt;p&gt;Simon added in the video that people are looking for the pot of gold at the end of a rainbow - but there is no pot at the end of a rainbow. There are a lot of books and speakers who are telling that there is - so people start to find it. However, it's not about finding the pot of gold at the end of a rainbow, it's about the adventure and who we take with us on the journey. &lt;strong&gt;That is the best part&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The video reminded me of a situation where a colleague asked me "Which was the best company you ever worked at". And my answer was "There is no perfect company or job. Every company has issues and you need to find out what kind of issues you can live or work with."&lt;br&gt;
So, I truly agree with Simon that there is no perfect job or company. And especially not for everyone, because we are humans and so we are different. Everyone of us needs something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-telling-talent-marketing-lies"&gt;
  &lt;/a&gt;
  Stop telling talent marketing lies
&lt;/h2&gt;

&lt;p&gt;Which brings me to a topic I have been working on for a while now: Helping our Recruiting department to build trustworthy talent marketing for developers.&lt;/p&gt;

&lt;p&gt;In marketing it's normal to window dress products or stories. That's why a lot of companies use stories people want to hear instead of what their values actually are. How their culture is. They tell the story of the &lt;em&gt;pot of gold at the end of the rainbow&lt;/em&gt; instead of telling the talents:&lt;br&gt;
&lt;em&gt;hey wanna join me for an adventure? I heard there is a pot of gold at the end of the rainbow. I'm not sure if we're gonna find it, but let’s go&lt;/em&gt;. It’s not important if you find the pot of gold or not, it’s about the relationship, the journeys, the experience you make with each other while you are looking for it.&lt;/p&gt;

&lt;p&gt;For Employer Branding and Talent Marketing this would mean for example: Instead of saying "We are a diverse and inclusive company" say "We are committed to become a diverse and inclusive workplace and therefore we are looking for people who are helping us to bring this vision to life".&lt;/p&gt;

&lt;p&gt;If a company tells shiny stories which are not the truth to attract talents, those talents may join the company because they tell them what they want to hear. But those talents that join will recognize sooner or later that it all was just window dressing. And in the best case they quit. In the worst case scenario, they stay at the company without believing in the company, without passion and happiness. Which leads to employees who don’t bring their best to the table. Don’t sell candidates a dummy and have them quit months later. Find candidates who are willing to join your adventure. Who wants to go with &lt;strong&gt;you&lt;/strong&gt; on the journey to find the pot of gold at the end of the rainbow, no matter if you find the pot of gold or not.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@austinchan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Austin Chan&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>leadership</category>
      <category>career</category>
      <category>culture</category>
    </item>
    <item>
      <title>Django full CI-CD flow to AWS with GitHub Actions and S3</title>
      <author>Valentine Solonechnyi</author>
      <pubDate>Tue, 06 Jul 2021 17:24:27 +0000</pubDate>
      <link>https://dev.to/vlntsolo/django-full-ci-cd-flow-to-aws-with-github-actions-and-s3-2enp</link>
      <guid>https://dev.to/vlntsolo/django-full-ci-cd-flow-to-aws-with-github-actions-and-s3-2enp</guid>
      <description>&lt;p&gt;This guide covers all steps needed for setting up your CI-CD workflow for Django project with Amazon Beanstalk and GitHub Actions under the hood.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Link to sample project: &lt;a href="https://github.com/vlntsolo/django-cicd"&gt;https://github.com/vlntsolo/django-cicd&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-aws-beanstalk-environment"&gt;AWS Beanstalk environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-s3-configuration"&gt;S3 configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-iam-user-access"&gt;IAM user access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-github-workflow-settings"&gt;GitHub workflow settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-preparing-django-settings"&gt;Preparing Django settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-first-run"&gt;First run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-composing-postdeploy-commands-hooks"&gt;Composing postdeploy commands (hooks)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we start, what is CI-CD flow in the first place?&lt;/p&gt;

&lt;p&gt;Despite the fact that Django code doesn't require any build step compared to compiled apps, you might find it quite frustrating to repeat a manual re-upload each time you need to deploy a new feature or a bug fix. Because of this, CI-CD (Continuous integration and Continuous delivery) workflows were invented.&lt;/p&gt;

&lt;p&gt;CI-CD workflows or pipelines allow us to safely build, test and deploy web applications in a relatively short period of time (usually, in a matter of minutes). So what about Django? If you have a python application codebase hosted on a GitHub, it would be enormously convenient to push it to the hosting environment right after you update the repository. And that is exactly what we're going to do using GitHub Actions, which is publicly available for free since late 2019.&lt;/p&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-aws-beanstalk-environment"&gt;
  &lt;/a&gt;
  1. AWS Beanstalk environment
&lt;/h2&gt;

&lt;p&gt;Before we start configuring everything, we need to be sure we have our environment warm and ready.&lt;/p&gt;

&lt;p&gt;If you already have an AWS account, go to the Console and search for Beanstalk. If not, &lt;a href="https://aws.amazon.com/"&gt;create one here&lt;/a&gt;. You will be asked to add billing information in order to proceed.&lt;/p&gt;

&lt;p&gt;In the Beanstalk dashboard, make sure you have selected the most suitable region (where services to be deployed) in the right top corner. Check [Environments] and choose [Create a new environment]. Then, on the dialogue page, choose [Web server environment].&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fccIjJbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fccIjJbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk1.jpg" alt="Creating beanstalk python environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill in the details and focus on Platform section. Here we need to select Python platform (last version) and last Amazon Linux 2 available.&lt;/p&gt;

&lt;p&gt;Leave Sample application and hit &lt;strong&gt;[Create environment]&lt;/strong&gt;. In a few moments, you should be able to open your environment URL address and see a sample page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UIxMsqWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-sample-page.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UIxMsqWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-sample-page.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the name of the application and the environment displayed in the top left corner if you open the environment page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juKeFojT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk-details.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juKeFojT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk-details.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last thing to do here is to set up the database for Django.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;[Configuration] → [Database]&lt;/strong&gt; and select preferred options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzflPGZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-db.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzflPGZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-db.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It this example I picked a PostgreSQL since this my usual choice, but you can stick with MySQL or even Oracle if you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;! Alert:&lt;/strong&gt; &lt;em&gt;Database server created this way is suited for testing purposes only. It will be strictly attached to the environment. The database will be deleted if you remove or recreate the Beanstalk environment. In production, you should use RDS or Aurora, standalone servers inside your &lt;a href="https://aws.amazon.com/vpc/"&gt;VPC&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we've got a managed python environment and the database, we need to prepare a file storage for our future application builds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-s3-configuration"&gt;
  &lt;/a&gt;
  2. S3 configuration 🪣
&lt;/h2&gt;

&lt;p&gt;We need to set up a custom S3 bucket as a temporary storage for our builds before they will be pushed to the Beanstalk.&lt;/p&gt;

&lt;p&gt;Search for S3 in AWS console or switch to it from the menu. Then select &lt;strong&gt;[Create bucket]&lt;/strong&gt;. Type in some unique name and select your region.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTf71wli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/s3-new-bucket.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTf71wli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/s3-new-bucket.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave the checkbox on &lt;em&gt;"Block all public access"&lt;/em&gt; and proceed with &lt;strong&gt;[Apply]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The next thing we need to do is to generate programmatic access credentials which will be used by GitHub Action to deploy our Django app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-iam-user-access"&gt;
  &lt;/a&gt;
  3. IAM user access 🔐
&lt;/h2&gt;

&lt;p&gt;Search for IAM users in the AWS console and select &lt;strong&gt;[Add user]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6QFqAGNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QFqAGNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the permissions page, select [Attach existing policies directly]. Search for S3FullAccess* and select the checkbox. Repeat the same steps for &lt;em&gt;AdministratorAccess-AWSElasticBeanstalk&lt;/em&gt;* and hit &lt;strong&gt;[Add user]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, copy Access key ID and Secret from the last step. Make sure to save this info somewhere safe, since user secret will be shown only once.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPBudD3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPBudD3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like we're done with AWS and ready to proceed with GitHub!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-github-workflow-settings"&gt;
  &lt;/a&gt;
  4. GitHub workflow settings 🔡
&lt;/h2&gt;

&lt;p&gt;Go back to your Django project and create a folder called &lt;code&gt;.github&lt;/code&gt;. And one more folder inside it called workflows. GitHub Actions config should be placed inside and formatted with YAML syntax. See my example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Location: .github/workflows/custom_config.yml

name: CI-CD pipeline to AWS
env:
  EB_S3_BUCKET_NAME: "YOUR BUCKET NAME FROM Step 2"
  EB_APPLICATION_NAME: "YOUR APP NAME FROM Step 1"
  EB_ENVIRONMENT_NAME: "YOUR ENVIRONMENT NAME FROM Step 1"
  DEPLOY_PACKAGE_NAME: "django-app-${{ github.sha }}.zip"
  AWS_REGION_NAME: "YOUR AWS REGION ("us-east-1"/"eu-central-1" etc.)"

on:
  push:
    branches:
      - master #Use your own branch here (Might be staging or testing)
jobs:
  build:
    runs-on: ubuntu-latest
    steps: 
      - name: Git clone on our repo
        uses: actions/checkout@v2

      - name: Create zip deployment package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION_NAME }}
      - name: Copying file to S3
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_S3_BUCKET_NAME }}/
      - name: Print nice message on success finish
        run: echo "CI part finished successfuly"
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Create new EBL app ver
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.EB_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "${{ github.sha }}"

      - name: Deploy new app
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "${{ github.sha }}"
      - name: Print nice message on success finish
        run: echo "CD part finished successfuly"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go through the surface of the config blocks and check their purpose. More details can be found here.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;[env]&lt;/strong&gt; block serves as a list of shortcuts for variables inside the config. We define our non-sensitive data here.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;[jobs]&lt;/strong&gt; block defines what actually will be done.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;[build]&lt;/strong&gt; block is just a job name and includes a list of "steps" to perform in our building process. For a pure Django app, this means only zipping the working directory and pushing it to the S3 bucket.&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;[steps]&lt;/strong&gt; block lists names and actual commands to execute on the virtual machine.&lt;/p&gt;

&lt;p&gt;You might easily add another job name called testing and run ./manage.py test step within it.&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;[needs]&lt;/strong&gt; block is a prerequisite for further execution. In our case, we're making sure that our file transfer was completed successfully before we send commands to the Beanstalk.&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;[on]&lt;/strong&gt; block specifies the trigger event, like our "push", as well as the target branch.&lt;/p&gt;

&lt;p&gt;If you come up with several Beanstalk environments (QA, testing, staging, production etc.), you'd need to place new config.yml files for them and change env vars and branch accordingly.&lt;/p&gt;

&lt;p&gt;You might also notice that we didn't define &lt;code&gt;secrets.aws_access_key_id&lt;/code&gt; or &lt;code&gt;secrets.aws_secret_access_key&lt;/code&gt; yet. 🧊 Let's fix that!&lt;/p&gt;

&lt;p&gt;Open your GitHub repo or create one for your project and go to &lt;strong&gt;[Settings]&lt;/strong&gt; → &lt;strong&gt;[Secrets]&lt;/strong&gt; → &lt;strong&gt;[New repository secret]&lt;/strong&gt;. Paste your IAM user key and secret there like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4FQJQsBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/secrets-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4FQJQsBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/secrets-1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat the same step for &lt;code&gt;aws_secret_access_key and&lt;/code&gt; it's value. That's it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-preparing-django-settings"&gt;
  &lt;/a&gt;
  5. Preparing Django settings 📦
&lt;/h2&gt;

&lt;p&gt;Remember, we've connected a Relational database to our Beanstalk environment at Step 1? But where are the connection parameters and db user credentials?&lt;/p&gt;

&lt;p&gt;With integrated database, Beanstalk exposes env variables, which can be used right away:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main_django_app settings.py
import os

ALLOWED_HOSTS = ['YOUR_ENVIRONMENT_HOST']

DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'NAME': os.environ['RDS_DB_NAME'],
    'USER': os.environ['RDS_USERNAME'],
    'PASSWORD': os.environ['RDS_PASSWORD'],
    'HOST': os.environ['RDS_HOSTNAME'],
    'PORT': os.environ['RDS_PORT'],
    }
}

# rest of the settings
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add your environment URL and main domain to allowed hosts list.&lt;/p&gt;

&lt;p&gt;At this point, we need to make sure that Beanstalk python platform will be ready to establish a connection with PostgreSQL. Let's tell it to install some extras for us.&lt;/p&gt;

&lt;p&gt;Create a folder in your &lt;a href="https://github.com/vlntsolo/django-cicd"&gt;project root&lt;/a&gt; called &lt;code&gt;.ebextensions&lt;/code&gt; and place there a file &lt;code&gt;01_packages.config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;packages: 
  yum: 
    amazon-linux-extras: []

commands:
  01_postgres_activate: 
    command: sudo amazon-linux-extras enable postgresql10
  02_postgres_install: 
    command: sudo yum install -y postgresql-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add Django config to inform Beanstalk's WSGI server about our main app and settings. Create another file inside &lt;code&gt;.ebextensions&lt;/code&gt; folder called &lt;code&gt;django.config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: main_django_app.wsgi:application
  aws:elasticbeanstalk:application:environment:
    DJANGO_SETTINGS_MODULE: main_django_app.settings
    "PYTHONPATH": "/var/app/current:$PYTHONPATH"
  aws:elasticbeanstalk:environment:proxy:staticfiles:
    /static: static
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change &lt;em&gt;main_django_app&lt;/em&gt; to your Django application name.&lt;/p&gt;

&lt;p&gt;Last row &lt;code&gt;aws:elasticbeanstalk:environment:proxy:staticfiles0:&lt;/code&gt; tells which folder to serve through the reverse proxy and which relative URL to use.&lt;/p&gt;

&lt;p&gt;Finally, freeze your local python environment with &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; (it will be the primary source for Beanstalk to configure EC2 environment).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-first-run"&gt;
  &lt;/a&gt;
  6. First run 🔥
&lt;/h2&gt;

&lt;p&gt;Push any changes to your specified branch and visit Actions tab. If your actions completed successfully, you will see the green mark. If something went wrong, open the logs and resolve the errors inside.&lt;/p&gt;

&lt;p&gt;Got errors after successful GitHub Actions run? Visit Elastic Beanstalk environment and check the Logs.&lt;/p&gt;

&lt;p&gt;Hopefully, you'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNy9g7Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/django-demopage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNy9g7Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/django-demopage.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-composing-postdeploy-commands-hooks"&gt;
  &lt;/a&gt;
  7. Composing postdeploy commands (hooks) 🔌
&lt;/h2&gt;

&lt;p&gt;There's still few commands that should be executed after deploy.&lt;/p&gt;

&lt;p&gt;1) We need to migrate our changes to the Beanstalk database (migration files created by makemigrations command should be a part of your codebase).&lt;/p&gt;

&lt;p&gt;2) We need to collect static files (no need to keep your static files in a codebase).&lt;/p&gt;

&lt;p&gt;This problem could be solved with Beanstalk postdeploy hooks. File names could be totally custom, but file extension is important. All .sh files will be executed in alphanumerical order.&lt;/p&gt;

&lt;p&gt;In your project root, create a folder &lt;code&gt;.platform&lt;/code&gt; with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.platform/
└───hooks/
    └───postdeploy/
        -01_django.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

source /var/app/venv/*/bin/activate &amp;amp;&amp;amp; {

# collecting static files
python manage.py collectstatic --noinput;
# log which migrations have already been applied
python manage.py showmigrations;
# migrate the rest
python manage.py migrate --noinput;
# another command to create a superuser (write your own)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You've got the idea! Now, you can figure out how to create the superuser account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-notes"&gt;
  &lt;/a&gt;
  ⚠️ Important notes:
&lt;/h3&gt;

&lt;p&gt;– &lt;strong&gt;Review IAM user access policy&lt;/strong&gt;. For the tutorial purpose, I've granted full access to S3 and Beanstalk. Make sure that you grant only required permissions for GitHub Actions client in order to prevent unpleasant consequences in case of secret key leakage.&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;Add lifecycle rules&lt;/strong&gt; to S3 bucket and Application versions storage. By default, S3 doesn't delete application versions or any other files from the buckets. Use lifecycle rules in both S3 and Beanstalk to keep only needed app versions.&lt;/p&gt;

&lt;p&gt;– AWS Beanstalk health checking system might not work properly ( severe health status) because of Django ALLOWED_HOSTS restriction in headers. I don't know the right way of handling this issue (you can either ignore status warnings or set &lt;code&gt;ALLOWED_HOSTS = ['*']&lt;/code&gt; at your own risk).&lt;/p&gt;

&lt;p&gt;– If you're going to use PostgreSQL, don't forget to install the package with &lt;code&gt;pip install psycopg2-binary&lt;/code&gt; and freeze the requirements.txt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://valentine.click/blog/how-to-split-django-settings-for-different-environments"&gt;How to split Django settings for different environments&lt;/a&gt;&lt;br&gt;
&lt;a href="https://valentine.click/blog/django-q-and-beanstalk"&gt;How to configure Django Q with Supervisor on AL2 Beanstalk&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html"&gt;Deploying a Django application to Elastic Beanstalk&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;Workflow syntax for GitHub Actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope, you've enjoyed following this guide. Stay tuned and next time I might cover how to set up a full-stack Django-based project with truly seamless dev experience.&lt;/p&gt;

&lt;p&gt;This article was originally published &lt;a href="https://valentine.click/blog/django-full-ci-cd-flow-to-aws-with-github-actions"&gt;in my blog post&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>django</category>
      <category>aws</category>
      <category>devops</category>
      <category>python</category>
    </item>
    <item>
      <title>Preact, Vite, &amp; Docker Compose in 5 easy steps</title>
      <author>Amin</author>
      <pubDate>Tue, 06 Jul 2021 16:58:32 +0000</pubDate>
      <link>https://dev.to/aminnairi/preact-vite-docker-compose-in-5-easy-steps-j21</link>
      <guid>https://dev.to/aminnairi/preact-vite-docker-compose-in-5-easy-steps-j21</guid>
      <description>&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;li&gt;A terminal emulator&lt;/li&gt;
&lt;li&gt;A text editor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker Compose
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://docs.docker.com/compose/compose-file/"&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;yarn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node:16.0.0&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node&lt;/span&gt;
    &lt;span class="na"&gt;working_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/node&lt;/span&gt;
    &lt;span class="na"&gt;tty&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;stdin_open&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;entrypoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;--help&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/home/node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vite"&gt;
  &lt;/a&gt;
  Vite
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://vitejs.dev/config/"&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;esbuild&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;jsxFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jsxFragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fragment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#preact"&gt;
  &lt;/a&gt;
  Preact
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://reactjs.org/docs/introducing-jsx.html#gatsby-focus-wrapper"&gt;&lt;code&gt;index.jsx&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, Preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Hello
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./index.jsx"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  Run
&lt;/h2&gt;

&lt;p&gt;Run the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run yarn add preact vite
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run &lt;span class="nt"&gt;--publish&lt;/span&gt; 3000:3000 yarn vite &lt;span class="nt"&gt;--host&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;open http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;You can now build your next awesome &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt; application using the awesome &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; bundler running anywhere with &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use this command to generate your optimized build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run yarn vite build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Thank you Evan, I can now dev on my 2 cores @1GHz laptop using Docker Compose without going for a coffee break between each updates on my projects.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>preact</category>
      <category>vite</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to push your website online for free (Bonus: How to get domain name for 2$)</title>
      <author>CodeOzz</author>
      <pubDate>Tue, 06 Jul 2021 16:35:19 +0000</pubDate>
      <link>https://dev.to/codeozz/how-to-push-your-website-online-for-free-bonus-how-to-get-domain-name-for-2-1ikp</link>
      <guid>https://dev.to/codeozz/how-to-push-your-website-online-for-free-bonus-how-to-get-domain-name-for-2-1ikp</guid>
      <description>&lt;p&gt;Welcome my friend ! Today I will show you how to deploy your static website for free with Netlify !&lt;/p&gt;

&lt;p&gt;In bonus I will show you where you can bug domain name for 2$ and connect it will Netlify !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create an account on &lt;a href="https://www.netlify.com/"&gt;https://www.netlify.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the overview, you will need to connect your git project to Netlify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Arym6U-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfmobeixdc5bqn38e9xj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Arym6U-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfmobeixdc5bqn38e9xj.png" alt="Screenshot 2021-07-06 at 17.54.55.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://app.netlify.com/start"&gt;https://app.netlify.com/start&lt;/a&gt; Select your plateform between Github, Gitlab or Bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choose the branch to deploy, it's means that when you will push onto this branch, Netlify will build the project and re-deploy it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4NOGJb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5btvkqm3u13vingb5mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NOGJb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5btvkqm3u13vingb5mk.png" alt="Screenshot 2021-07-06 at 18.01.01.png (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me I create a dedicated branch named &lt;code&gt;prod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18EiB0iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8tzu7umwerely514pow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18EiB0iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8tzu7umwerely514pow.png" alt="Screenshot 2021-07-06 at 18.01.01.png (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to provide the npm command that will build your project (and the output directory name). &lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;npm run build&lt;/code&gt; and I named the output file &lt;code&gt;/dist&lt;/code&gt; (classic).&lt;/p&gt;

&lt;p&gt;Netlify will build your project and deploy it on a &lt;em&gt;special&lt;/em&gt; url.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BONUS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don't have domain name, read this section !&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://www.namecheap.com/domains/domain-name-search/"&gt;https://www.namecheap.com/domains/domain-name-search/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Put your domain name wanted, and select a domain name cheap (for example .art). The first year, the domain name will be cheap and you will need to pay more for the next years, it depends of the domain name (.art stay very cheap).&lt;/p&gt;

&lt;p&gt;Buy your domain name and when you receive the confirmation by email, you will need to verify your mail (in order to link email and your domain name).&lt;/p&gt;

&lt;p&gt;You will just need to select your domain name on the dashboard and click on verify account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GylKlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92siv9ihc803klr9plth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GylKlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92siv9ihc803klr9plth.png" alt="icannwhois_ar2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fourth Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set up a custom domain ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--23IkClQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vo3jw22gxaj91pwx76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--23IkClQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vo3jw22gxaj91pwx76.png" alt="Screenshot 2021-07-06 at 18.11.10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: You can see the &lt;em&gt;special&lt;/em&gt; url generated by Netlify ! (By default any of your build project has this special url in case of you have an issue with your domain name)&lt;/p&gt;

&lt;p&gt;So put your domain name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUq4nrof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgcb5xwz01t3qhiv25le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUq4nrof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgcb5xwz01t3qhiv25le.png" alt="Screenshot 2021-07-06 at 18.12.46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set up Netlify DNS for your domain !&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;check DNS configuration&lt;/code&gt;, you will have four &lt;em&gt;hostnames&lt;/em&gt;, keep it, we will need it .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2inxTcE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et18zbmazhbodajxng6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2inxTcE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et18zbmazhbodajxng6i.png" alt="Screenshot 2021-07-06 at 17.54.55.png (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Come back into Namecheap, go to &lt;strong&gt;dashboard&lt;/strong&gt; and click on &lt;strong&gt;manage&lt;/strong&gt; into your domain name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juej3wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae1v6aqg46nk913sd5vc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juej3wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae1v6aqg46nk913sd5vc.png" alt="Screenshot 2021-07-06 at 18.19.45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;nameservers&lt;/code&gt; select custom DNS and put the four &lt;em&gt;hostnames&lt;/em&gt; !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JsYr7EFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxw4hr699hasnvwfojx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JsYr7EFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxw4hr699hasnvwfojx.png" alt="Screenshot 2021-07-06 at 18.23.17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save it and wait a few minutes in order to link your hostname with your domain name !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPS:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Netlify will add a SSL in order to have HTTPS on your website ! &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>devops</category>
      <category>netlify</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 06 Jul 2021 16:26:21 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-beo</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-beo</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-bury-the-lede"&gt;
  &lt;/a&gt;
  Don't Bury the Lede
&lt;/h2&gt;

&lt;p&gt;Ok, so the title above IS kind of burying the lede of this fantastic article. In it, &lt;a class="mentioned-user" href="https://dev.to/jmfayard"&gt;@jmfayard&lt;/a&gt;
 shares many learnings from four years (!!!) or writing on DEV. Onne of them is, you guessed it, "don't bury the lede of your article." Read on for many great writing, life, and DEV lessons.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/20-lessons-i-ve-learned-writing-on-dev-for-4-years-4nk3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;20+ Lessons I've Learned Writing on DEV for 4 Years&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴 ・ Jun 29 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#squash-your-git-squash-confusion"&gt;
  &lt;/a&gt;
  Squash Your Git Squash Confusion
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pb"&gt;@pb&lt;/a&gt;
 is here to help you get over the fear of messing up others' commits &lt;em&gt;and&lt;/em&gt; get comfortable with squashing commits.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3sfWXRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--52cZyHb1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618537/3cd782cd-1a3a-4926-9eb6-1e55fba23a61.jpg" alt="pb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pb/git-squash-simplified-3ba1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git Squash Simplified&lt;/h2&gt;
      &lt;h3&gt;Pawel ・ Jul 2 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#graphql-is-like-pizza"&gt;
  &lt;/a&gt;
  GraphQL is Like Pizza
&lt;/h2&gt;

&lt;p&gt;Yep, you read that right. Find out how why &lt;a class="mentioned-user" href="https://dev.to/shrutikapoor08"&gt;@shrutikapoor08&lt;/a&gt;
 likes to compare GraphQL and REST to different types of pizza places. 🤤 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shrutikapoor08" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxsCavCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HHESzKaW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197069/406b42c3-4552-4a6f-8ce9-39a58e542a5a.jpg" alt="shrutikapoor08"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shrutikapoor08/what-is-graphql-hj5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is GraphQL? &lt;/h2&gt;
      &lt;h3&gt;Shruti Kapoor ・ Jul 1 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#design-is-intelligence-made-visible"&gt;
  &lt;/a&gt;
  Design is Intelligence Made Visible
&lt;/h2&gt;

&lt;p&gt;That's why it's important to have at least a basic understanding of product design as a developer. &lt;a class="mentioned-user" href="https://dev.to/flaque"&gt;@flaque&lt;/a&gt;
 is here to help!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flaque" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXQrFVq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H-b5CF7r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/87211/951afa46-47e8-4f65-b0c1-a0dcf19e85b5.jpg" alt="flaque"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flaque/how-to-make-your-product-look-good-h5j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to make your product look good&lt;/h2&gt;
      &lt;h3&gt;Evan Conrad ・ Jun 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#you-are-a-creative-showcase-it-with-css"&gt;
  &lt;/a&gt;
  You Are a Creative. Showcase it with CSS!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/andrewbaisden"&gt;@andrewbaisden&lt;/a&gt;
 says that creating CSS art is one of the best ways to improve your front-end programming skills as a developer — of all levels! Here's how you can get started...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/andrewbaisden" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLg9JixC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bRSmMlC_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/333889/005fe9de-759e-4d70-9c3c-d3aa1289b2ef.png" alt="andrewbaisden"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/andrewbaisden/how-creating-css-art-can-make-you-a-better-developer-4cd5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How creating CSS Art can make you a better developer&lt;/h2&gt;
      &lt;h3&gt;Andrew Baisden ・ Jun 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-whys-and-whats-of-testing"&gt;
  &lt;/a&gt;
  The Whys and Whats of Testing
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/pat_the99"&gt;@pat_the99&lt;/a&gt;
 writes, "Test Driven Development (TDD)'s main idea is to simply start working on code by writing automated tests BEFORE writing the code that is being tested." Pretty useful, no? In this article, Patricia helps us understand JavaScript TDD through the lens of Jest in particular.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pat_the99" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrOrF7B9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jiAMjh3G--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/628161/0fc61315-16e2-4c38-b364-c2515768dc7a.jpeg" alt="pat_the99"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pat_the99/basics-of-javascript-test-driven-development-tdd-with-jest-o3c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Basics of Javascript Test Driven Development (TDD) with Jest&lt;/h2&gt;
      &lt;h3&gt;Patricia Nicole ・ Jul 4 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#youre-invited"&gt;
  &lt;/a&gt;
  You're Invited...
&lt;/h2&gt;

&lt;p&gt;... to &lt;a class="mentioned-user" href="https://dev.to/kharouk"&gt;@kharouk&lt;/a&gt;
's book club — which just might help you land your next job! First up? "Eloquent JavaScript" by Marijn Haverbeke 📚  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kharouk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwCCXRul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XxmUYGMN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/85930/0868ee73-1ee3-424e-a3c3-63b35ec21d68.jpeg" alt="kharouk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kharouk/book-club-eloquent-javascript-chapter-one-5c0d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Book Club: Eloquent Javascript - Chapter One&lt;/h2&gt;
      &lt;h3&gt;Alex Kharouk ・ Jul 3 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bookclub&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
  </channel>
</rss>
