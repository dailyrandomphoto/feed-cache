<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Using Atomic Habits to become a better software developer ‚öõÔ∏è</title>
      <author>Kelvin Graddick</author>
      <pubDate>Thu, 07 Oct 2021 07:30:42 +0000</pubDate>
      <link>https://dev.to/kgcodes/using-atomic-habits-to-become-a-better-software-developer-5ehi</link>
      <guid>https://dev.to/kgcodes/using-atomic-habits-to-become-a-better-software-developer-5ehi</guid>
      <description>&lt;p&gt;I‚Äôm currently working on building better habits (and breaking bad habits) in order to become a better software developer.&lt;/p&gt;

&lt;p&gt;I started reading (well, listening to) Atomic Habits by James Clear and so far it‚Äôs been insightful. ‚öõÔ∏è&lt;/p&gt;

&lt;p&gt;The first two concepts that have already moved me to make changes were:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-removing-the-points-of-friction-in-my-environment-for-good-habits-i-want-to-build"&gt;
  &lt;/a&gt;
  1. Removing the points of friction in my environment for good habits I want to build
&lt;/h2&gt;

&lt;p&gt;‚Äî Ex. To keep from being stuck thinking of what to code or learn the next day, the day prior I write down what I want to code/learn while my mind is still active. That way I avoid analysis paralysis the next day and can quickly jump in. &lt;strong&gt;Remove friction&lt;/strong&gt;.&lt;br&gt;
‚Äî Ex. Some evenings I hop in bed and find it hard to get up and go to the office to code. So I started to keep my laptop bedside so that I can work there too if needed. &lt;strong&gt;Remove friction&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rather-than-always-try-to-make-large-improvements-and-being-discouraged-when-i-fail-i-focus-on-making-small-improvements-daily-which-add-up-over-time-and-provide-daily-satisfaction"&gt;
  &lt;/a&gt;
  2. Rather than always try to make large improvements (and being discouraged when I fail), I focus on making small improvements daily, which add up over time, and provide daily satisfaction.
&lt;/h2&gt;

&lt;p&gt;‚Äî Ex. For working on my projects, I implemented a ‚Äúnever miss twice‚Äù policy for updates, and I will update even if I only have 10-30 minutes for a small change. Making even a little improvement daily adds up. &lt;strong&gt;1%+ improvement daily&lt;/strong&gt;.&lt;br&gt;
‚Äî Ex. I automated a reminder on my phone to make sure I learn at least one new programming concept/problem a day, whether it‚Äôs a coding challenge, new technology, or conceptual improvement. Even if it‚Äôs quick I make sure not to miss. &lt;strong&gt;1%+ improvement daily&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It‚Äôs not easy though, and sometimes I mess up, so I‚Äôm constantly looking for ways to improve my processes/accountability‚Ä¶&lt;br&gt;
‚ÅâÔ∏è What ways are ya‚Äôll using to build good habits and break bad ones?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>#10 Best YouTube Channels  for become Developer..‚úîÔ∏èüî•</title>
      <author>Deepak Gupta</author>
      <pubDate>Thu, 07 Oct 2021 07:14:32 +0000</pubDate>
      <link>https://dev.to/deepakguptacoder/10-best-youtube-channels-for-become-developer-29kg</link>
      <guid>https://dev.to/deepakguptacoder/10-best-youtube-channels-for-become-developer-29kg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I will tell you the best 10 you tube channels to learn about the Developer and other things of the technology,&lt;br&gt;
Also I will provide to you there channel link..&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#follow-the-point"&gt;
  &lt;/a&gt;
  follow the point
&lt;/h4&gt;

&lt;h1&gt;
  &lt;a href="#1code-with-harry"&gt;
  &lt;/a&gt;
  1.&lt;a href="https://youtube.com/c/CodeWithHarry"&gt;Code with Harry&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Channel about JavaScript, React, React-Native, Next.js, Node.js, Express, GraphQL, serverless functions, working with databases and much more!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2web-dev-simplified"&gt;
  &lt;/a&gt;
  2.&lt;a href="https://youtube.com/c/WebDevSimplified"&gt;Web Dev Simplified&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Web Dev Simplified also deep dives into advanced topics using the latest best practices for you seasoned web developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3leveluptuts"&gt;
  &lt;/a&gt;
  3.&lt;a href="https://youtube.com/c/LevelUpTuts"&gt;LevelUpTuts&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here you will find videos from the usual videos on CSS, JS, Python and Django to blockchain and microservices.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4java-brian"&gt;
  &lt;/a&gt;
  4.&lt;a href="https://youtube.com/c/JavaBrainsChannel"&gt;Java Brian &lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;On this channel how to create a slider, animation when scrolling, adaptive website design and also a lot of different elements using React.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5devtips"&gt;
  &lt;/a&gt;
  5.&lt;a href="https://youtube.com/c/DevTipsForDesigners"&gt;DevTips&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;There are also videos where conversations with other developers are conducted. how to make CSS animation with physics simulation or how to work with legacy code, as well as many interesting videos on CSS animations and React lessons.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6fireship"&gt;
  &lt;/a&gt;
  6.&lt;a href="https://youtube.com/c/Fireship"&gt;Fireship&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;There are also a number of videos on the topic of layout and animation creation. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7dcode"&gt;
  &lt;/a&gt;
  7.&lt;a href="https://youtube.com/c/dcode-software"&gt;dcode&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;HTML, CSS &amp;amp; JavaScript tutorials, PHP tutorials, Node.js tutorials and Rust tutorials, as well as many other topics covered in web development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8joma-tech"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://youtube.com/c/JomaOppa"&gt;Joma Tech&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Very interesting, videos are posting on the daily basis&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9william-candillon"&gt;
  &lt;/a&gt;
  9.&lt;a href="https://youtube.com/c/wcandillon"&gt;William Candillon&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Also on the channel there are many interesting conversational videos on the topic React.js.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10freecodecamp"&gt;
  &lt;/a&gt;
  10.&lt;a href="https://youtube.com/c/Freecodecamp"&gt;Freecodecamp&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Learning various APIs, React, JS, GIT, browsers, and much more. It will help to build your knowledge.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
Conclusion&lt;br&gt;
I hope you found this article useful, if you need any help please let me know in the comment section.üíØ&lt;/p&gt;

&lt;p&gt;Thanks for reading, See you next time.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Continuous Delivery is NOT Continuous Deployment</title>
      <author>Edward Allen Mercado</author>
      <pubDate>Thu, 07 Oct 2021 06:56:32 +0000</pubDate>
      <link>https://dev.to/aws-builders/continuous-delivery-is-not-continuous-deployment-2kke</link>
      <guid>https://dev.to/aws-builders/continuous-delivery-is-not-continuous-deployment-2kke</guid>
      <description>&lt;p&gt;In DevOps methodologies, &lt;strong&gt;Continuous Delivery&lt;/strong&gt; and &lt;strong&gt;Continuous Deployment&lt;/strong&gt; are vague terms that we mostly took for granted and often compared as similar. &lt;/p&gt;

&lt;p&gt;Let's discuss first about the well known term in DevOps called the &lt;strong&gt;CICD - Continuous Integration and Continuous Delivery/Deployment&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-integration-and-continuous-deliverydeployment"&gt;
  &lt;/a&gt;
  What is Continuous Integration and Continuous Delivery/Deployment?
&lt;/h2&gt;

&lt;p&gt;This is considered as one of the best practices for DevOps teams to implement. This is a method to frequently deliver applications to customers by introducing automation into the stages of application development. &lt;/p&gt;

&lt;p&gt;It also integrates with the &lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;Agile Methodology&lt;/a&gt; best practice as it will enable developers to focus on providing code quality, and meet business requirements. &lt;/p&gt;

&lt;p&gt;Now, let's break down these terms into chunks. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continuous-integration"&gt;
  &lt;/a&gt;
  Continuous Integration
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5AYJyuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yvpwx3uzww64oy34nlc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5AYJyuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yvpwx3uzww64oy34nlc.png" alt="Continuous Integration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Continuous Integration (CI)&lt;/em&gt; is a practice where developers frequently merge the changes to the main repository (such as Github, AWS CodeCommit, etc.), after which automated builds and tests are run. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;CI&lt;/em&gt; most often refers to the build or integration stage of application development. Successful CI means new code changes to an app are regularly built, tested, and merged to a shared repository. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continuous-delivery-and-deployment"&gt;
  &lt;/a&gt;
  Continuous Delivery and Deployment
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQ-Z0AlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i975tstpadaibox3digr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQ-Z0AlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i975tstpadaibox3digr.png" alt="DevOps"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
When the code changes have been built, tested. &lt;em&gt;Continuous Delivery and Deployment (CD)&lt;/em&gt; stage will prepare the changes for production release. In simple terms it is an extension of the &lt;em&gt;Continuous Integration&lt;/em&gt; stage by deploying all code changes to a testing environment, a production environment, or both after the build stage has been completed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuous-delivery-is-not-continuous-deployment"&gt;
  &lt;/a&gt;
  Continuous Delivery is not Continuous Deployment
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#continuous-delivery"&gt;
  &lt;/a&gt;
  Continuous Delivery
&lt;/h3&gt;

&lt;p&gt;We tend to misinterpret &lt;em&gt;Continuous Delivery&lt;/em&gt; as after the code has been built, tested in &lt;em&gt;Continuous Integration&lt;/em&gt; stage is that every change will immediately be applied to the destination environment such as QA, PROD, etc. but it is not. &lt;/p&gt;

&lt;p&gt;The point of &lt;em&gt;Continuous Delivery&lt;/em&gt; is to ensure that every change is ready to deploy to the destination environment which involves reviews or manual integrations from non-technical team members to control the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-continuous-delivery"&gt;
  &lt;/a&gt;
  Benefits of Continuous Delivery
&lt;/h3&gt;

&lt;p&gt;Enabling a non-technical team as part of the process reduces the burden on the development team so they may continue to execute subsequent application improvements. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continuous-deployment"&gt;
  &lt;/a&gt;
  Continuous Deployment
&lt;/h3&gt;

&lt;p&gt;On the other hand, &lt;em&gt;Continuous Deployment&lt;/em&gt; is an improved version of the &lt;em&gt;Continuous Delivery&lt;/em&gt; where all of the changes are ready to deploy to the destination environment without the manual integration, this process is completely automated, and only failed verification step will prevent pushing the changes to the environment. &lt;/p&gt;

&lt;p&gt;You can achieve &lt;em&gt;Continuous Deployment&lt;/em&gt; when your pipeline is mature enough where the involved teams are confident in the applied automation inside your pipeline. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-continuous-deployment"&gt;
  &lt;/a&gt;
  Benefits of Continuous Deployment
&lt;/h3&gt;

&lt;p&gt;With all of the stages automated, it means that the developer's change could go live within minutes of writing it, you can deliver to customers quicker and start to do iterations base on their feedbacks. It's easier to release changes to apps in small pieces, rather than all at once. &lt;/p&gt;

&lt;p&gt;Building a pipeline base on your business needs could be difficult, having these terms clear can help the planning much easier. &lt;/p&gt;

&lt;p&gt;Remember that &lt;em&gt;DevOps is a journey, not the destination&lt;/em&gt;. Feedback to the pipeline is continuously collected and metrics are still needed to be in place to monitor the critical parts of the pipeline. &lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Hey! You can reach me at&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/edwardmercado"&gt;Dev.to&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/edwardmercado_"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/edwardallenmercado-677b69139"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>3 TypeScript Tricks I wish I knew when I learned TypeScript</title>
      <author>Tim R.</author>
      <pubDate>Thu, 07 Oct 2021 06:20:34 +0000</pubDate>
      <link>https://dev.to/cstrnt/3-typescript-tricks-i-wish-i-knew-when-i-learned-typescript-2nnd</link>
      <guid>https://dev.to/cstrnt/3-typescript-tricks-i-wish-i-knew-when-i-learned-typescript-2nnd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#number-1-readonlylttgt"&gt;
  &lt;/a&gt;
  Number 1:  Readonly&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs start with a small example:&lt;br&gt;
We have a simple function which takes in an array of numbers and returns an array with all elements sorted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sortNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now look at the code below and look if everything looks good. Think about what the console output will be. I recommend taking some time and actually thinking about it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortedNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sortNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sortedNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first output is pretty simple. It is &lt;code&gt;[3, 5, 7]&lt;/code&gt;.  But now listen. The second output is the same! And you might be asking: &lt;em&gt;Why? I defined the array as &lt;code&gt;const&lt;/code&gt; how can it be changed?&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Well, arrays and objects are quite special in JavaScript. If you pass them to a function it will pass the reference to the array or object which means it will mutate the original array if you call certain functions like &lt;code&gt;Array.sort&lt;/code&gt; which are in-place. &lt;/p&gt;

&lt;p&gt;Readonly to the rescue üöÄ&lt;/p&gt;

&lt;p&gt;Let‚Äôs change up our code a little bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sortNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Readonly&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn‚Äôt compile though. TypeScript gives us the following error &lt;code&gt;Property ‚Äòsort‚Äô does not exist on type ‚Äòreadonly number[]‚Äô&lt;/code&gt;&lt;br&gt;
Which is actually what we want! We are not able to mutate the parameter which leads to zero side effects! &lt;br&gt;
&lt;strong&gt;Nice&lt;/strong&gt;. &lt;br&gt;
But does this mean we can‚Äôt have function which sort our arrays? Of course we can. We only need to sort a copy of our array rather than sorting the array itself. There are many ways to copy an array in JS like the spreading it (&lt;code&gt;[‚Ä¶array]&lt;/code&gt;),  using &lt;code&gt;array.concat()&lt;/code&gt;, &lt;code&gt;Array.from(array)&lt;/code&gt; or &lt;code&gt;array.slice()&lt;/code&gt; . So lets use the spread operator to finish our function so it looks just like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sortNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Readonly&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we‚Äôre done! Clean code enforced by TypeScript. BTW: This also works with objects! &lt;/p&gt;

&lt;p&gt;&lt;small&gt;If you want to learn more about mutability in JS check out this &lt;a href="https://hackernoon.com/mutability-and-immutability-in-javascript-explained-in-detail-x7q33ag"&gt;article&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#number-2-any-vs-unknown"&gt;
  &lt;/a&gt;
  Number 2: Any vs Unknown
&lt;/h2&gt;

&lt;p&gt;When you are using eslint together with TS you might have noticed the message &lt;code&gt;unexpected any&lt;/code&gt;. At least I was wondering why &lt;code&gt;any&lt;/code&gt; is bad. How else should you state a a variable can hold any possible value.  Let‚Äôs look at an example here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// add some values&lt;/span&gt;
&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are creating an array which can potentially have all available type in it. While this might not be the best code ever, let‚Äôs just go with it. We add a number, a string and an object. Let‚Äôs now look at the code below and think about what will happen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// ... adding the values&lt;/span&gt;
&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is actually valid TypeScript and will compile without any issues. But it will fail at run time. I think this is some kind of false security because you expect things to just work because the TS compiler told you the code is fine.&lt;br&gt;&lt;br&gt;
But we can fix this! And the change is actually super simple. Instead of typing the array as &lt;code&gt;Array&amp;lt;any&amp;gt;&lt;/code&gt;we can just use &lt;code&gt;Array&amp;lt;unknown&amp;gt;&lt;/code&gt; if we now use the same code but with that change it will look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// ... adding the values&lt;/span&gt;

&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and this code will &lt;strong&gt;not&lt;/strong&gt; compile! Instead TypeScript shows the following error when we try to access &lt;code&gt;entry.age&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... other code&lt;/span&gt;

&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Object is of type 'unknown'&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;using &lt;code&gt;unknown&lt;/code&gt; enforces us to check the type (or explicitly casting the value)  before we do something with a value with is &lt;code&gt;unknown&lt;/code&gt;. Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... other code&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// if it's an object, we know it's a Human&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case we checked whether the value is an object and then access the &lt;code&gt;.age&lt;/code&gt; property. &lt;strong&gt;Note:&lt;/strong&gt; don't use &lt;code&gt;typeof x === 'object'&lt;/code&gt; to check whether something is a valid object, because it will return &lt;code&gt;true&lt;/code&gt; for arrays as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#number-3-typing-objects-with-records"&gt;
  &lt;/a&gt;
  Number 3: Typing Objects with Records
&lt;/h2&gt;

&lt;p&gt;When I first started using TS I always had to google how to type an object because I could never remember the solution which looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this is a valid solution to type an Object in TS, I think it‚Äôs pretty hard to memoize and also it is pretty limited.&lt;br&gt;&lt;br&gt;
For example if I only want to allow certain keys I would go ahead and create a string union like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AllowedKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AllowedKeys&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, TypeScript doesn‚Äôt like this and gives me that error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead.&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Uhm, what? This is again one of those TypeScript errors which wants you to just close your IDE and go back to plain JS. But there is a solution which will make the code much more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AllowedKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// use a type here instead of interface&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AllowedKeys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We only had to change from interface to type so we can define a new type and then use the keyword &lt;code&gt;Record&lt;/code&gt; which takes two generic parameters where the first one is the type of the keys and the second on of the according values. Pretty simple, right? And by the way, if you now add values to &lt;code&gt;AllowedKeys&lt;/code&gt; it will throw an error in the &lt;code&gt;Human&lt;/code&gt; Object because it‚Äôs missing those properties which is pretty awesome if you ask me!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>tricks</category>
      <category>advanced</category>
      <category>beginners</category>
    </item>
    <item>
      <title>API Testing - Save effort by quickly debug your API test failures</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Thu, 07 Oct 2021 06:00:48 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-save-effort-by-quickly-debug-your-api-test-failures-3m6o</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-save-effort-by-quickly-debug-your-api-test-failures-3m6o</guid>
      <description>&lt;p&gt;Watch our video #tutorial on how you may save your team's effort by quickly debug API test failures in the #vREST NG Application.&lt;/p&gt;

&lt;p&gt;vREST NG is a script less API test automation tool. It helps you to write maintainable test cases quickly for functional and regression testing of APIs. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link:&lt;/strong&gt; &lt;a href="https://youtu.be/S9FBRtgzZtg"&gt;https://youtu.be/S9FBRtgzZtg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API Testing Tutorials Playlist:&lt;/strong&gt; &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//mailto:support@vrest.io"&gt;Contact Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tutorial</category>
      <category>apitesting</category>
      <category>vrest</category>
    </item>
    <item>
      <title>The Ultimate Guide to Getting Started with the Rollup.js JavaScript Bundler</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Thu, 07 Oct 2021 05:52:25 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/the-ultimate-guide-to-getting-started-with-the-rollup-js-javascript-bundler-1ldg</link>
      <guid>https://dev.to/asayerio_techblog/the-ultimate-guide-to-getting-started-with-the-rollup-js-javascript-bundler-1ldg</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/craig-buckler"&gt;Craig Buckler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rollupjs.org/"&gt;Rollup.js&lt;/a&gt; is a Node.js module bundler most often used for client-side JavaScript running in the browser. (You can bundle Node.js scripts but there are fewer reasons to do so). The tool compiles all your JavaScript source files into a single bundle for inclusion in your production web pages.&lt;/p&gt;

&lt;p&gt;The benefits of using Rollup.js include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You can develop JavaScript in smaller self-contained files which have specific responsibilities. The project becomes easier to understand and maintain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It includes a watch option which re-runs bundling whenever you make a change to a source file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rollup.js can verify source code (linting), restructure layout (prettify), and make other syntax checks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unused functions are automatically removed using &lt;em&gt;tree-shaking&lt;/em&gt; methods which reduce file sizes and improve performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More than one bundle can be output from the same source files, such as an ES6 edition using modules, an ES5 edition for older browsers, a CommonJS edition for Node.js, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The final production bundle can have whitespace and logging removed to minify the file size.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Rollup.js has some competition with build tools such as &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt;, &lt;a href="https://www.snowpack.dev/"&gt;Snowpack&lt;/a&gt;, and &lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt;. As well as JavaScript module bundling, these can handle other aspects of your site such as HTML templates, CSS preprocessing, and image optimization. The downside is they can be more difficult to configure if you have custom requirements.&lt;/p&gt;

&lt;p&gt;Rollup.js primarily concentrates on JavaScript so it's fast and lightweight. It's easy to get started but you'll discover plugins for HTML, CSS, images, and other options as you become familiar with the tool. Let's get started...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rollupjs-installation"&gt;
  &lt;/a&gt;
  Rollup.js Installation
&lt;/h2&gt;

&lt;p&gt;Rollup.js requires Node.js v8.0.0 or above. You can install it globally by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;rollup &lt;span class="nt"&gt;--global&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then execute the &lt;code&gt;rollup&lt;/code&gt; command from any project directory.&lt;/p&gt;

&lt;p&gt;You can also install Rollup.js in a Node.js project folder using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;rollup &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This manages the installation in npm's &lt;code&gt;package.json&lt;/code&gt; file to ensure all developers on your team are using the same version to avoid compatibility issues. You can run Rollup.js with &lt;code&gt;npx rollup&lt;/code&gt; or add commands to the &lt;code&gt;"scripts"&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt;, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"rollup:help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rollup --help"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execute a script with &lt;code&gt;npm run &amp;lt;scriptname&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;npm run rollup:help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The examples below use &lt;code&gt;npx rollup&lt;/code&gt; since it will work regardless of whether you install &lt;code&gt;rollup&lt;/code&gt; locally or globally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-use"&gt;
  &lt;/a&gt;
  First Use
&lt;/h2&gt;

&lt;p&gt;Create a project folder with a &lt;code&gt;src&lt;/code&gt; sub-folder and add the following files:&lt;/p&gt;

&lt;p&gt;Library functions in &lt;strong&gt;&lt;code&gt;src/a.js&lt;/code&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Library functions in &lt;strong&gt;&lt;code&gt;src/b.js&lt;/code&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Main script entry point at &lt;strong&gt;&lt;code&gt;src/main.js&lt;/code&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run Rollup.js to bundle the source files into a single ES6 file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup ./src/main.js &lt;span class="nt"&gt;--file&lt;/span&gt; ./build/bundle.js &lt;span class="nt"&gt;--format&lt;/span&gt; es
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting &lt;strong&gt;&lt;code&gt;build/bundle.js&lt;/code&gt;&lt;/strong&gt; file contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All your code is now contained in single file and the tool removes unused functions. You could load it from an HTML file using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./build/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the bundled &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; would also work in older browsers such as IE11 if you remove the &lt;code&gt;type="module"&lt;/code&gt; attribute. Add a &lt;code&gt;defer&lt;/code&gt; attribute or place it before the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; to ensure the script runs when the DOM has loaded.&lt;/p&gt;

&lt;p&gt;Try editing &lt;strong&gt;&lt;code&gt;src/main.js&lt;/code&gt;&lt;/strong&gt; and add a call to the &lt;code&gt;a.goodbye()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bundle again with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup ./src/main.js &lt;span class="nt"&gt;--file&lt;/span&gt; ./build/bundle.js &lt;span class="nt"&gt;--format&lt;/span&gt; es
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or add another &lt;code&gt;"scripts"&lt;/code&gt; entry to &lt;code&gt;package.json&lt;/code&gt; such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"rollup:help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rollup --help"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"rollup:es"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rollup ./src/main.js --file ./build/bundle.js --format es"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and run with &lt;code&gt;npm run rollup:es&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The resulting &lt;strong&gt;&lt;code&gt;build/bundle.js&lt;/code&gt;&lt;/strong&gt; file contains an additional renamed function which avoid any conflicts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye$1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;goodbye$1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rollupjs-options-and-flags"&gt;
  &lt;/a&gt;
  Rollup.js Options and Flags
&lt;/h2&gt;

&lt;p&gt;The example above introduces the basic Rollup.js &lt;a href="https://rollupjs.org/guide/en/#command-line-flags"&gt;command-line options&lt;/a&gt;. The most-used are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--help&lt;/code&gt; (or &lt;code&gt;-h&lt;/code&gt;): display Rollup.js help&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--version&lt;/code&gt; (or &lt;code&gt;-v&lt;/code&gt;): display the Rollup.js version number&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--input &amp;lt;filename&amp;gt;&lt;/code&gt; (or &lt;code&gt;-i&lt;/code&gt;): specify the entry script. This is not necessary because the file is usually defined as the first option.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--file &amp;lt;output&amp;gt;&lt;/code&gt; (or &lt;code&gt;-o&lt;/code&gt;): the bundled file name. When omitted, the bundle is output to &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--format &amp;lt;type&amp;gt;&lt;/code&gt; (or &lt;code&gt;-f&lt;/code&gt;): the JavaScript bundle format:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;format&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iife&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;output an Immediately Invoked Function Expression &lt;code&gt;(function () { ... }());&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;es&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;standard ES6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cjs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CommonJS for Node.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;umd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/umdjs/umd"&gt;Universal Module Definition&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;amd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/amdjs"&gt;Asynchronous Module Definition&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/systemjs/systemjs"&gt;SystemJS modules&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If in doubt, use &lt;code&gt;es6&lt;/code&gt;. &lt;code&gt;iife&lt;/code&gt; may be practical if you need to support older browsers which do not support modules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--environment &amp;lt;values&amp;gt;&lt;/code&gt;: set one or more comma-separated environment variables, e.g. &lt;code&gt;--environment NODE_ENV:development,VAR1,VAR2:abc&lt;/code&gt; which sets &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;VAR1&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;VAR2&lt;/code&gt; to &lt;code&gt;abc&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--sourcemap&lt;/code&gt;: create a source map so you can reference the original source files in browser DevTools. The bundled file will link to a &lt;code&gt;.map&lt;/code&gt; file in build folder, e.g. &lt;code&gt;build/bundle.js.map&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use &lt;code&gt;--sourcemap inline&lt;/code&gt; to define an inline source map within the bundle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;--watch&lt;/code&gt; (or &lt;code&gt;-w&lt;/code&gt;): watch for source file changes during development and bundle automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The screen clears when a change triggers a re-build but you can disable this with &lt;code&gt;--no-watch.clearScreen&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;--silent&lt;/code&gt;: do not output warnings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#rollupjs-configuration-files"&gt;
  &lt;/a&gt;
  Rollup.js Configuration Files
&lt;/h2&gt;

&lt;p&gt;Commands can become cumbersome when adding options and flags. A Rollup.js &lt;a href="https://rollupjs.org/guide/en/#configuration-files"&gt;configuration file&lt;/a&gt; is a better alternative:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;it's easier to read and edit&lt;/li&gt;
&lt;li&gt;you can define more than one bundle process, and&lt;/li&gt;
&lt;li&gt;the configuration file is an ES6 module which can execute other functionality. For example, you can conditionally process development or production builds according to the environment where Rollup.js runs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The default configuration file name is &lt;code&gt;rollup.config.js&lt;/code&gt;. Create this file in the root of your project folder and add the following code to replicate the input, output, and formatting options used above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rollup.config.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set the Rollup.js &lt;code&gt;--config&lt;/code&gt; (or &lt;code&gt;-c&lt;/code&gt;) flag to use this configuration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup &lt;span class="nt"&gt;--config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also pass a filename if you want to move or rename the configuration file, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup &lt;span class="nt"&gt;--config&lt;/span&gt; ./rollup/config1.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration above exports an array with a single object which defines one bundle process. An array isn't necessary for one object but it allows you to define further processes later, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rollup.config.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;

  &lt;span class="c1"&gt;// ES6 bundle&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// IIFE bundle&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle-iife.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iife&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automated-watch-bundling"&gt;
  &lt;/a&gt;
  Automated Watch Bundling
&lt;/h2&gt;

&lt;p&gt;You can add a &lt;code&gt;watch&lt;/code&gt; option to the configuration file to define which files trigger the bundling process when changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rollup.config.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you must still use a &lt;code&gt;--watch&lt;/code&gt; flag on the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup &lt;span class="nt"&gt;--config&lt;/span&gt; &lt;span class="nt"&gt;--watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-development-and-production-builds"&gt;
  &lt;/a&gt;
  Creating Development and Production Builds
&lt;/h2&gt;

&lt;p&gt;You will want to enable logging commands and source maps during development but omit these options when deploying to a production server. The configuration file code can updated to detect environment variable values and bundle differently.&lt;/p&gt;

&lt;p&gt;The following configuration examines the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable and adds an inline source map to the bundle when it's set to &lt;code&gt;development&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rollup.config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode bundle`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sourcemap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the Rollup.js command with the environment variable set accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup &lt;span class="nt"&gt;--config&lt;/span&gt; &lt;span class="nt"&gt;--environment&lt;/span&gt; NODE_ENV:development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also set the &lt;code&gt;NODE_ENV&lt;/code&gt; for the current session on mac OS and Linux:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the Windows &lt;code&gt;cmd&lt;/code&gt; prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or Windows Powershell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$env&lt;/span&gt;:NODE_ENV&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"development"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rollupjs-plugins"&gt;
  &lt;/a&gt;
  Rollup.js Plugins
&lt;/h2&gt;

&lt;p&gt;You can extend the basic Rollup.js bundling functionality using any number of &lt;a href="https://github.com/rollup/awesome"&gt;plugins&lt;/a&gt;. Use &lt;code&gt;npm&lt;/code&gt; to install plugins locally or globally then reference them in your Rollup. js configuration file.&lt;/p&gt;

&lt;p&gt;The following sections describe a selection of popular plugins but you can also &lt;a href="https://rollupjs.org/guide/en/#plugin-development"&gt;create your own plugin&lt;/a&gt; in the unlikely event that you cannot find an appropriate option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minify-production-bundles"&gt;
  &lt;/a&gt;
  Minify Production Bundles
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://terser.org/"&gt;Terser&lt;/a&gt; can reduce bundle file sizes by removing whitespace, comments, logging commands, and other unnecessary code. Install the Rollup.js &lt;a href="https://github.com/TrySound/rollup-plugin-terser"&gt;Terser plugin&lt;/a&gt; locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;rollup-plugin-terser &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then import it into your &lt;code&gt;rollup.config.js&lt;/code&gt; file and add a &lt;code&gt;plugins&lt;/code&gt; array definition to the &lt;code&gt;output&lt;/code&gt; object (Terser is an output plugin which runs after Rollup.js has completed other bundling tasks):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rollup.config.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;terser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rollup-plugin-terser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode bundle`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sourcemap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;terser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;ecma&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;mangle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;toplevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;toplevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;unsafe_arrows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;drop_console&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;devMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;drop_debugger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;devMode&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;quote_style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run a development build with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup &lt;span class="nt"&gt;--config&lt;/span&gt; &lt;span class="nt"&gt;--environment&lt;/span&gt; NODE_ENV:development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the resulting &lt;code&gt;./build/bundle.js&lt;/code&gt; file contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//# sourceMappingURL=data:application/json;charset=utf-8;base64,...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;A production build results in an empty file because Terser removes all the logging statements!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Refer to the &lt;a href="https://github.com/terser/terser"&gt;Terser documentation&lt;/a&gt; to configure your own project options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#replace-values-at-bundle-time"&gt;
  &lt;/a&gt;
  Replace Values at Bundle Time
&lt;/h2&gt;

&lt;p&gt;The Rollup.js &lt;a href="https://github.com/rollup/plugins/tree/master/packages/replace"&gt;replace plugin&lt;/a&gt; allows you to define configuration variables at bundle time which become hard-coded in the bundled script. Install it locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @rollup/plugin-replace &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then import it into your &lt;code&gt;rollup.config.js&lt;/code&gt; file and add a &lt;code&gt;plugins&lt;/code&gt; array with the following settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rollup.config.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@rollup/plugin-replace&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode bundle`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;__HELLO__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;__GOODBYE__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sourcemap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add &lt;code&gt;__HELLO__&lt;/code&gt; and &lt;code&gt;__GOODBYE__&lt;/code&gt; tokens anywhere in your scripts such as &lt;strong&gt;&lt;code&gt;src/a.js&lt;/code&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__HELLO__ from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__GOODBYE__ from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run a development build with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup &lt;span class="nt"&gt;--config&lt;/span&gt; &lt;span class="nt"&gt;--environment&lt;/span&gt; NODE_ENV:development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the resulting &lt;code&gt;./build/bundle.js&lt;/code&gt; file now contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye$1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bye from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#import-npm-commonjs-modules"&gt;
  &lt;/a&gt;
  Import npm CommonJS Modules
&lt;/h2&gt;

&lt;p&gt;JavaScript libraries are often packaged as CommonJS modules which you can install with &lt;code&gt;npm&lt;/code&gt;. Rollup.js can parse CommonJS with the following plugins:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/rollup/plugins/tree/master/packages/node-resolve"&gt;&lt;code&gt;node-resolve&lt;/code&gt;&lt;/a&gt; locates a module in the project's &lt;code&gt;node_modules&lt;/code&gt; directory, and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rollup/plugins/tree/master/packages/commonjs"&gt;&lt;code&gt;plugin-commonjs&lt;/code&gt;&lt;/a&gt; converts CommonJS to ES6 modules.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Install them in your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @rollup/plugin-node-resolve @rollup/plugin-commonjs &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then import them into your &lt;code&gt;rollup.config.js&lt;/code&gt; file and update the &lt;code&gt;plugins&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rollup.config.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;nodeResolve&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@rollup/plugin-node-resolve&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;commonjs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@rollup/plugin-commonjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode bundle`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nx"&gt;nodeResolve&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="nx"&gt;commonjs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install an example CommonJS library such as &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;lodash &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and use one of its methods -- such as &lt;code&gt;capitalize()&lt;/code&gt; in &lt;strong&gt;&lt;code&gt;src/a.js&lt;/code&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from a.js &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run a development build with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup &lt;span class="nt"&gt;--config&lt;/span&gt; &lt;span class="nt"&gt;--environment&lt;/span&gt; NODE_ENV:development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and examine the bundled code. The Lodash library appears at the top.&lt;/p&gt;

&lt;p&gt;Be aware that Rollup.js cannot tree-shake Lodash because it exports a single object with multiple methods. Most JavaScript libraries use a similar structure but the situation should improve as more developers adopt ES6 modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue.&lt;br&gt;
It‚Äôs like having your browser‚Äôs inspector open while looking over your user‚Äôs shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#transpile-es6-to-es5-using-babel"&gt;
  &lt;/a&gt;
  Transpile ES6 to ES5 Using Babel
&lt;/h2&gt;

&lt;p&gt;ES6 syntax result in more concise code. For example, you could use arrow function expressions in &lt;strong&gt;&lt;code&gt;src/a.js&lt;/code&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from a.js &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting bundle will run in all modern browsers but fail in legacy applications such as Internet Explorer 11 and below. This may not be of concern: IE11 has a minimal market share and those users can still see content if your site functions reasonably well without JavaScript.&lt;/p&gt;

&lt;p&gt;You can transpile your code to ES5 using &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; if you're unfortunate enough to have a reasonably high number of IE11 users. The resulting code &lt;em&gt;should&lt;/em&gt; work in any browser (although you may still require Polyfills to add missing functionality in IE11).&lt;/p&gt;

&lt;p&gt;Bundling two files from the same source is a better option. You can produce a small ES6 version loaded by all browsers which support ES modules and a larger ES5 fallback version for older browsers.&lt;/p&gt;

&lt;p&gt;Install Babel locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @rollup/plugin-babel @babel/core @babel/preset-env &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then import it into your &lt;code&gt;rollup.config.js&lt;/code&gt; file and add an ES5 bundle configuration to the exported array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rollup.config.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getBabelOutputPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@rollup/plugin-babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;devMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode bundle`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ES6&lt;/span&gt;
    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ES5&lt;/span&gt;
    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nx"&gt;getBabelOutputPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/bundle-es5.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run a development build with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx rollup &lt;span class="nt"&gt;--config&lt;/span&gt; &lt;span class="nt"&gt;--environment&lt;/span&gt; NODE_ENV:development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to create two bundle files. &lt;strong&gt;&lt;code&gt;build/bundle.js&lt;/code&gt;&lt;/strong&gt; contains ES6-compatible code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from a.js &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goodbye$1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;goodbye$1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;strong&gt;&lt;code&gt;build/bundle-es5.js&lt;/code&gt;&lt;/strong&gt; contains ES5-compatible code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello from a.js &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;goodbye$1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye$1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from a.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye from b.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;goodbye$1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reference both scripts in any HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./build/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nomodule&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./build/bundle-es5.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modern browsers will load and run the ES6 module contained in &lt;code&gt;./build/bundle.js&lt;/code&gt;. Older browsers will load and run the ES5 script contained in &lt;code&gt;./build/bundle-es5.js&lt;/code&gt;. In both cases, the scripts will run when the DOM is ready -- that is the default for ES6 and a the &lt;code&gt;defer&lt;/code&gt; attribute enables it in ES5.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rolling-your-own"&gt;
  &lt;/a&gt;
  Rolling Your Own
&lt;/h2&gt;

&lt;p&gt;Rollup.js requires a little more initial effort than build tools such as Webpack and Parcel but ongoing configuration is easier and more flexible. Your resulting bundles should be smaller and faster.&lt;/p&gt;

&lt;p&gt;For more information, refer to the &lt;a href="https://rollupjs.org"&gt;Rollupjs.org website&lt;/a&gt;. The &lt;a href="https://rollupjs.org/guide/en/#big-list-of-options"&gt;big list of Rollup.js options&lt;/a&gt; describes all the command line switches and you can browse the &lt;a href="https://github.com/rollup/awesome"&gt;awesome list of Rollup.js plugins&lt;/a&gt;. You'll find dozens of plugins for building and optimizing HTML, CSS, files, images, TypeScript, data URIs, code quality, and more. You can also integrate Rollup.js with Deno, Grunt, Gulp, React, Angular, Vue, and Svelte projects. I recommend you keep your configuration simple at first then add further configuration options as your knowledge of Rollup.js grows.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How Relevant is Still TypeScript in 2021?</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Thu, 07 Oct 2021 05:51:22 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/how-relevant-is-still-typescript-in-2021-34b5</link>
      <guid>https://dev.to/asayerio_techblog/how-relevant-is-still-typescript-in-2021-34b5</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/kristofer-selbekk"&gt;Kristofer Selbekk&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;TypeScript just turned 9 years old, and it‚Äôs more popular than it‚Äôs ever been. As a matter of fact ‚Äì it‚Äôs close to becoming the de facto standard for most JavaScript projects being started today. But is it still the best choice in 2021?&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll look at some of TypeScript‚Äôs main benefits, and what alternatives are out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-typescript-in-2021"&gt;
  &lt;/a&gt;
  The benefits of TypeScript in 2021
&lt;/h2&gt;

&lt;p&gt;In order to look at how relevant TypeScript really is, we need to look at the main benefits we get from using it in our codebases. Here are some of the main upsides from going from .js to .ts:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-really-good-type-system"&gt;
  &lt;/a&gt;
  A really good type system
&lt;/h3&gt;

&lt;p&gt;Applying a type system to your codebase makes you much more confident your code will work. You can specify what kind of arguments are required, and enforce those constraints with near-instant compiler feedback. This makes it much easier to remember to cover all edge-cases, and to write clean, expressive APIs.&lt;/p&gt;

&lt;p&gt;TypeScript has kept on improving its type system, adding improved type inference and even template string type support in later versions. All of these continuous improvements has made TypeScript‚Äôs type system pretty bullet proof over the years. Now, if they could only make those error messages a bit more readable üòÖ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-to-adopt"&gt;
  &lt;/a&gt;
  Easy to adopt
&lt;/h3&gt;

&lt;p&gt;One of my favorite things about TypeScript, is how easy it is to introduce into your codebase. Since all JavaScript is valid TypeScript, you can incrementally translate file by file until you‚Äôre all the way there. I‚Äôve done it with several of the projects I‚Äôve worked with, and it‚Äôs always been a success story.&lt;/p&gt;

&lt;p&gt;Another upside is that you can move from very general types (like &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;unknown[]&lt;/code&gt;) to more specific ones whenever you have the time. Iterating on your types like this ‚Äì especially while developing a new function or class ‚Äì makes the typing process incredibly smooth.&lt;/p&gt;

&lt;p&gt;A little caveat here - by adopting TypeScript gradually, you‚Äôre going into a weird state of ‚Äútype limbo‚Äù for a while, where you‚Äôll have &lt;em&gt;some&lt;/em&gt;, but not complete type safety. Just make sure you push on through to where all of your codebase is transitioned into the warm grasp of type safety.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#very-popular"&gt;
  &lt;/a&gt;
  Very popular
&lt;/h3&gt;

&lt;p&gt;As a JavaScript developer, you know that one of JS‚Äôs greatest assets is its enormous ecosystem. There isn‚Äôt a use case I can think of that doesn‚Äôt have at least 10 competing packages on NPM. Being able to use these packages with a type system of choice is paramount to how nice it will feel to work with.&lt;/p&gt;

&lt;p&gt;Luckily, TypeScript has become so popular, you‚Äôre able to find typings for most popular libraries out there. They‚Äôre either bundled (added by both maintainers and community members), or available through the community driven &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped"&gt;Definitely Typed repo&lt;/a&gt;. In other words - interacting with external packages is just about as easy as with regular JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actively-maintained"&gt;
  &lt;/a&gt;
  Actively maintained
&lt;/h3&gt;

&lt;p&gt;TypeScript is actively maintained and developed by no other than Microsoft, the new knight in shining armor of open source software. With their financial means, the TypeScript team is sure to keep on improving both the language and the tooling surrounding it.&lt;/p&gt;

&lt;p&gt;Being owned and operated by a tech behemoth hasn‚Äôt stopped a huge community from forming though, and the development process has been made much more open and collaborative over the years. With both a substantial backer, and a tight-knit community, TypeScript is sure to thrive for the foreseeable future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-alternatives"&gt;
  &lt;/a&gt;
  The alternatives
&lt;/h2&gt;

&lt;p&gt;Even though TypeScript might be leading the popularity wars, it‚Äôs far from being the only alternative to using JavaScript. Here are some of the most promising challengers:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;

&lt;p&gt;Dart has been around for a few years, but has really blossomed the last couple of years. One of the main reasons of its latest upswing in popularity is the cross platform app development platform Flutter, and how it‚Äôs used there.&lt;/p&gt;

&lt;p&gt;Dart looks a lot like JavaScript, but comes with some pretty powerful static analysis tool, as well as a dynamic type checker. Another feature is that it can be compiled down to run on native devices, without a JavaScript runtime in between. That means lightning speeds and some pretty neat features. It can even be compiled into JavaScript if you need it to.&lt;/p&gt;

&lt;p&gt;That being said, Dart has a much smaller community behind it than TypeScript has, which comes with a bunch of tradeoffs. It‚Äôs a different language with different syntax, and it feels more like learning a new language than adding a few features to an existing one, like TypeScript does. Finally, there‚Äôs no incremental adoption path for Dart - it‚Äôs all or nothing.&lt;/p&gt;

&lt;p&gt;You can read a much more in-depth analysis of &lt;a href="https://expressflow.com/blog/posts/dart-vs-typescript"&gt;Dart vs TypeScript here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elm"&gt;
  &lt;/a&gt;
  Elm
&lt;/h3&gt;

&lt;p&gt;Elm is a functional language that compiles down to highly optimized JavaScript. It has been gaining traction for quite some time, and it‚Äôs been used to build really sturdy applications in a lot of different contexts. It is multi-purpose, but it really shines when you write single page applications!&lt;/p&gt;

&lt;p&gt;Elm is known for two things - having the ‚Äúworld‚Äôs most polite compiler‚Äù, and guaranteeing you no runtime errors. The compiler comes with really nice suggestions whenever you goof up, making it a lot easier to pick up the unfamiliar syntax. The no runtime errors guarantee is nothing short of extraordinary, but it comes with a lot of restrictions to how you can do things.&lt;/p&gt;

&lt;p&gt;Elm is a functional language, with a different syntax than you‚Äôre probably used to. It‚Äôs a pretty big leap from JavaScript, but it teaches you a ton of great lessons you can bring with you back into JavaScript land (if you ever venture back, that is). &lt;/p&gt;

&lt;p&gt;There are still a few features missing, like code splitting, but if you‚Äôre building small apps, or have a micro frontend architecture, this might be right up your alley. Read more at &lt;a href="https://elm-lang.org/"&gt;elm-lang.org&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flow"&gt;
  &lt;/a&gt;
  Flow
&lt;/h3&gt;

&lt;p&gt;A couple of years ago, Facebook‚Äôs own type system ‚Äì &lt;a href="https://flow.org"&gt;Flow&lt;/a&gt; ‚Äì was competing neck and neck with TypeScript for the crown of type systems. Flow‚Äôs claim to fame was that you really didn‚Äôt need to write that many type definitions; great type inference and refinements would give you precise types at breakneck speeds.&lt;/p&gt;

&lt;p&gt;Flow is pretty simple to get started with - you add &lt;code&gt;// @flow&lt;/code&gt; to the top of a regular .js file, and that will opt it in to the Flow type checker. That makes it great for adopting file by file, and porting existing JavaScript code to something with better types.&lt;/p&gt;

&lt;p&gt;Flow is backed by Facebook. This used to be a great asset - some of the world‚Äôs greatest developers would be working on this codebase non stop! It made Flow gain traction and build a huge community quickly. However, soon, the Flow team had to prioritize Facebook‚Äôs internal needs over the wants of the community.&lt;/p&gt;

&lt;p&gt;Flow is still a great tool, but its popularity has fallen drastically the last couple of years. It might be the right fit for you, but be ready to implement a few type definitions yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue.&lt;br&gt;
It‚Äôs like having your browser‚Äôs inspector open while looking over your user‚Äôs shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-is-typescript-still-relevant-in-2021"&gt;
  &lt;/a&gt;
  So‚Ä¶ Is TypeScript still relevant in 2021?
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs be honest - TypeScript is a great choice for any JavaScript-based project. It has a great community, is very popular, is consistently gaining features and will be maintained for the foreseeable future. &lt;/p&gt;

&lt;p&gt;There are some great alternatives out there, but to me at least, TypeScript is still the best tradeoff between community, features and adaptability. What do you think?&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>8 Non-technical ways to contribute to open-source</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 07 Oct 2021 05:32:08 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/8-non-technical-ways-to-contribute-to-open-source-2b5j</link>
      <guid>https://dev.to/dailydevtips1/8-non-technical-ways-to-contribute-to-open-source-2b5j</guid>
      <description>&lt;p&gt;With &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; around the corner, the open-source vibes are flowing again.&lt;br&gt;
But for some people, it's still a big step to get technically involved in open source.&lt;/p&gt;

&lt;p&gt;There is also a big misconception about your contributions having to be technical. In many cases, open-source projects need a lot of other skills to help improve their project.&lt;/p&gt;

&lt;p&gt;In this article, I'll be sharing 8 ways you can get involved in open source without having to dive into the technical aspect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-maintain-github-issues"&gt;
  &lt;/a&gt;
  1 Maintain GitHub issues
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tJoOrbP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902183820/fYVYayLSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tJoOrbP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902183820/fYVYayLSL.png" alt="GitHub issue board for Astro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A big part of open source projects is their git repo, being Gitlab or GitHub.&lt;br&gt;
These systems can get overwhelming and full of duplicate issues.&lt;/p&gt;

&lt;p&gt;You could contribute by responding to opened issues and noting the issue is a duplicate of another problem.&lt;br&gt;
Always reference the other topic to it.&lt;/p&gt;

&lt;p&gt;But not only can you reference duplicate issues, but you can also validate the issues created.&lt;/p&gt;

&lt;p&gt;Maybe the person forgot to include an error, or the explanation doesn't make sense to you.&lt;br&gt;
From that perspective, it's good to evaluate the issues created to help get them answered/solved quicker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-get-involved-on-discord"&gt;
  &lt;/a&gt;
  2 Get involved on Discord
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynPBnN7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902232943/FP3NbrC69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynPBnN7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902232943/FP3NbrC69.png" alt="Getting involved in the Astro discord channel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the most open source projects these days they come with their social channels. I've seen many projects use Discord, but this could be a forum/Slack/Twitter group or anything else.&lt;/p&gt;

&lt;p&gt;These are often places where the project community gathers, and they are not only looking for technical advice.&lt;/p&gt;

&lt;p&gt;People come there to indulge in questions, ask for feedback, propose ideas, and you can be part of that!&lt;/p&gt;

&lt;p&gt;Being an active community member goes far beyond writing code.&lt;br&gt;
I'm part of open source projects where all I do is help people on Discord.&lt;/p&gt;

&lt;p&gt;Often these channels host meet-ups to discuss the project and what to do with certain aspects of it.&lt;br&gt;
It's a significant contribution if you are part of these meetings and help the team give your feedback on the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-follow-the-docs"&gt;
  &lt;/a&gt;
  3 Follow the docs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ughW-FlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902270794/IpY439zef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ughW-FlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902270794/IpY439zef.png" alt="Astro docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another thing you can do to help an open-source project is to follow the docs.&lt;br&gt;
Meaning you go through the docs and see if they make sense to you.&lt;/p&gt;

&lt;p&gt;People often write these docs from an in-depth view, and it might skip some steps you were not aware of.&lt;/p&gt;

&lt;p&gt;You can then go ahead and either propose changes for those docs or even mention it to the maintaining team.&lt;/p&gt;

&lt;p&gt;This helps an open-source project massively as the people writing these docs can easily forget steps or details!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-translate-documents"&gt;
  &lt;/a&gt;
  4 Translate documents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NyZe1yS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902336133/GptKuOHbZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NyZe1yS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902336133/GptKuOHbZ.png" alt="Translating documents for Astro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another thing related to documentation is translating them.&lt;br&gt;
Open source projects are often documented in many languages, and this is a massive task to do and keep up with.&lt;/p&gt;

&lt;p&gt;You can contribute by helping the translation process.&lt;br&gt;
Even if you're not keen on opening your first PR, you could hand the team a word document with a specific document translated.&lt;/p&gt;

&lt;p&gt;Before jumping in, please note which languages the documentation is available in and if there is a market for the one you want to propose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-answer-questions"&gt;
  &lt;/a&gt;
  5 Answer questions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ku0fDKPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902391753/XHG2X7KkX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ku0fDKPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902391753/XHG2X7KkX.png" alt="Matthew answering my questions about an Astro issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Answering questions can be an outstanding contribution to open source. These questions don't have to be about a particular technical aspect you might not feel comfortable with.&lt;/p&gt;

&lt;p&gt;There could be questions about a topic you know a lot about.&lt;br&gt;
Maybe it's UX, design, or grammar?&lt;/p&gt;

&lt;p&gt;Question for open source projects can pop up everywhere. This could be on Github, Twitter, Discord, or Reddit.&lt;/p&gt;

&lt;p&gt;By doing this, you often bring the community closer together. The person asking might not be aware of another place where these questions could be asked, so do point out the other communication points for this project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-spread-the-word"&gt;
  &lt;/a&gt;
  6 Spread the word
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGGyoF-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902434416/Un6Tbnyuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGGyoF-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902434416/Un6Tbnyuf.png" alt="Astro tagged blog posts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another, often overseen way to help open source is to talk about it!&lt;br&gt;
This can be as simple as sharing a tweet about the project, starring the project on GitHub, or joining their mailing list.&lt;/p&gt;

&lt;p&gt;But also keep in mind you could write articles about the project, make a video or podcast episode.&lt;/p&gt;

&lt;p&gt;And you can even go as far as making a curated list of projects made with this project!&lt;/p&gt;

&lt;p&gt;By doing this, you greaten the project's reach and help it become more mature and well known!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-help-on-the-design-aspect"&gt;
  &lt;/a&gt;
  7 Help on the design aspect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eyEmUZ9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902521001/UirIlPmnE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eyEmUZ9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902521001/UirIlPmnE.png" alt="Brian presenting T-shirt designs for Astro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perhaps you are good at design or have a lot of design/UX input.&lt;br&gt;
These projects are often non-funded, so they can use all the help they can.&lt;/p&gt;

&lt;p&gt;You could help by creating incredible design elements for them, help by improving the UI/UX of the website or docs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-improve-the-examples"&gt;
  &lt;/a&gt;
  8 Improve the examples
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ztj8TuoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902586703/vZa9P-gy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztj8TuoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632902586703/vZa9P-gy8.png" alt="Astro examples starters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open source projects often heavily rely on the examples they provide.&lt;br&gt;
But due to the quickly changing nature of these projects, the samples can get outdated or missed out on.&lt;/p&gt;

&lt;p&gt;You could test out examples for the open-source project and let the team know if an example is no longer working.&lt;/p&gt;

&lt;p&gt;You could also take a few minutes to suggest improvements to the examples. Maybe you have a particular use-case that's not in the examples but would benefit people.&lt;/p&gt;

&lt;p&gt;This doesn't mean you have to do the technical work. You could just notify the team of the issue at hand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>10 tips to improve your website design.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Thu, 07 Oct 2021 05:28:48 +0000</pubDate>
      <link>https://dev.to/abhirajb/10-tips-to-improve-your-website-design-2ng5</link>
      <guid>https://dev.to/abhirajb/10-tips-to-improve-your-website-design-2ng5</guid>
      <description>&lt;p&gt;There are some things you need before you design anything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-a-logo-and-favicon"&gt;
  &lt;/a&gt;
  1. A Logo and Favicon
&lt;/h3&gt;

&lt;p&gt;A logo is the most prominent brand element on your website. It will almost always live in the site navigation, near the top of the page, and in the footer.&lt;br&gt;
If you don‚Äôt have a logo, consider getting one. You can do it yourself or hire a graphic designer. Regardless of the route you choose, make sure you have the proper file types (AI, EPS, PDF, SVG, PNG, JPG) for your logo.&lt;br&gt;
It‚Äôs helpful to have two versions of your logo. The primary logo design is used most and may include a wordmark and other detailed design features. Your secondary logo should be smaller and is easier to fit into tight spaces.&lt;br&gt;
A favicon is the small logo icon shown in the URL address bar. A favicon makes your site look more trustworthy and professional.&lt;br&gt;
Here‚Äôs a screenshot of our favicon (and secondary logo):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qGzWY2xJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.tealfeed.com/articles/content-images/1631133505611-136326.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qGzWY2xJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.tealfeed.com/articles/content-images/1631133505611-136326.webp" alt="fav"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-color-palette"&gt;
  &lt;/a&gt;
  2. Color Palette
&lt;/h3&gt;

&lt;p&gt;Do you have brand colors? If not, now is the time to select a color palette for your brand identity.&lt;br&gt;
A typical palette consists of three colors. The primary color is usually for text and major design elements. A secondary color works well for accents. The third, and usually the most vivid, will be an ‚Äúaction color‚Äù for buttons, call-out boxes, and links&lt;br&gt;
This is an example of a color palette:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJDITnuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://venngage-wordpress.s3.amazonaws.com/uploads/2019/02/full-spectrum-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJDITnuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://venngage-wordpress.s3.amazonaws.com/uploads/2019/02/full-spectrum-min.png" alt="pal"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-typeface-system"&gt;
  &lt;/a&gt;
  3. Typeface System
&lt;/h3&gt;

&lt;p&gt;Typefaces (also called fonts) are one of the most underrated design components. A nice typeface can transform an average design into something really special.&lt;br&gt;
The typefaces you choose should align with the brand‚Äôs image and work well together. It‚Äôs best to choose a typeface with several weights (i.e., bold, italics) because it can be used in a variety of ways.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_TNqg4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://venngage-wordpress.s3.amazonaws.com/uploads/2019/04/serif-sans-serif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_TNqg4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://venngage-wordpress.s3.amazonaws.com/uploads/2019/04/serif-sans-serif.png" alt="font"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-forms"&gt;
  &lt;/a&gt;
  4. Forms
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Opt-in Forms&lt;/strong&gt;&lt;br&gt;
If you want to build an email list or subscription service, you‚Äôll need a form visitors can use to sign up. The form connects to an email service that generates a response when someone joins your list. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QzjU-lfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rightmessage.com/img/blog/2019-11-optin-guide/designacademyoptin.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QzjU-lfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rightmessage.com/img/blog/2019-11-optin-guide/designacademyoptin.jpg" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contact Form&lt;/strong&gt;&lt;br&gt;
A contact form makes it easy for people to get in touch with you. To increase the likelihood that people will use it, don‚Äôt ask for too much information. First name and email address should be enough. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mkzUHyU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.ventureharbour.com/wp-content/uploads/2017/04/vh-formex-mailerlite.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mkzUHyU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.ventureharbour.com/wp-content/uploads/2017/04/vh-formex-mailerlite.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calls-to-Action&lt;/strong&gt;&lt;br&gt;
A call-to-action invites a site visitor to engage with you. The action could be as small as clicking on a link to read a blog post or sign up for your email list. It could also involve a much more significant step, such as buying a product. Decide what you want visitors to do when landing on the site and make calls-to-action prominent. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--viTdsJ8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.gosquared.com/images/liquidicity/17_08_18_cta_eg_31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--viTdsJ8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.gosquared.com/images/liquidicity/17_08_18_cta_eg_31.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-404-page"&gt;
  &lt;/a&gt;
  5. 404 Page
&lt;/h3&gt;

&lt;p&gt;An error can occur when links break or change. A custom 404 page lets visitors know something went wrong and redirects them back to your site.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Navedkhan012/embed/vrWQMY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-theme"&gt;
  &lt;/a&gt;
  6. Theme
&lt;/h3&gt;

&lt;p&gt;A theme is like the website‚Äôs foundation. Themes provide design features, layout, and other front-end elements users will see. Once you select a theme, you won‚Äôt be able to change it without damaging the site, so choose wisely.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WeZFcq6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uicookies.com/wp-content/uploads/2019/12/shopify-jewelry-themes-1000x750.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WeZFcq6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uicookies.com/wp-content/uploads/2019/12/shopify-jewelry-themes-1000x750.jpg" alt="theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-content"&gt;
  &lt;/a&gt;
  7. Content
&lt;/h3&gt;

&lt;p&gt;Your website‚Äôs content consists of individual web pages, such as the home, about, and contact pages. Blog posts often account for most of a site‚Äôs content, but images, graphics, and videos count too. It‚Äôs essential to assimilate all content before you begin the design process.&lt;br&gt;
Adding content as you design the site is like building a house one room at a time. Developing content first reduces the risk of building a disjointed and confusing site. Make the most valuable content easy to access. It is best to position relevant content on the home page or only one click away.&lt;br&gt;
Once site content is complete, check links to make sure they work. Edit text for spelling and grammatical errors. Grammarly and the Hemingway Editor are helpful tools for writing web copy.&lt;/p&gt;

&lt;p&gt;Images make or break your website‚Äôs visual appearance. Use high-quality images and graphics that apply to site content. Images with vague meanings often confuse or bore users.Too many images overwhelm visitors. Image-heavy sites also take longer to load, which inhibits the user‚Äôs experience. I have discussed about the usage and sources for stock resources below. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abhirajb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kw1PWVUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UFshSYc4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/685929/21771dcd-5500-4424-b53c-076589b2e0b6.png" alt="abhirajb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhirajb/the-only-stock-resources-library-you-will-ever-need-48jf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Only stock resources library you will ever need.&lt;/h2&gt;
      &lt;h3&gt;Abhiraj Bhowmick „Éª Oct 4 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 

&lt;h3&gt;
  &lt;a href="#8-footer"&gt;
  &lt;/a&gt;
  8. Footer
&lt;/h3&gt;

&lt;p&gt;This section is at the bottom of the page and usually contains links to contact, terms, and privacy pages. You can also use the footer to help visitors navigate the site by placing key links inside of it. By habit, most users scroll down to the bottom of the page, which means your footer will be highly visible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qWwpAg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.wixstatic.com/media/94a51f_a4cdfbffa0794e6da89c96fb4c1edda5%257Emv2.jpg/v1/fill/w_940%2Ch_348%2Cal_c%2Cq_90/94a51f_a4cdfbffa0794e6da89c96fb4c1edda5%257Emv2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qWwpAg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.wixstatic.com/media/94a51f_a4cdfbffa0794e6da89c96fb4c1edda5%257Emv2.jpg/v1/fill/w_940%2Ch_348%2Cal_c%2Cq_90/94a51f_a4cdfbffa0794e6da89c96fb4c1edda5%257Emv2.jpg" alt="footer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-announcement-bar"&gt;
  &lt;/a&gt;
  9. Announcement Bar
&lt;/h3&gt;

&lt;p&gt;Do you have something important to say to your visitors? Maybe you have a big sale going on or want to share some news related to COVID-19.&lt;br&gt;
An announcement bar at the top of your page will grab attention so your site visitors don‚Äôt miss it. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPGzanEq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/5b5729421aca332c60585f78/5e961bc65d4b30a2251eeb16_shopify-announcement-bar-6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPGzanEq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/5b5729421aca332c60585f78/5e961bc65d4b30a2251eeb16_shopify-announcement-bar-6.png" alt="ann"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-responsive-design"&gt;
  &lt;/a&gt;
  10. Responsive Design
&lt;/h3&gt;

&lt;p&gt;Responsive design refers to a website‚Äôs ability to adapt to various devices and browsers. The screen sizes of an iPhone, iPad, a Surface, and a Galaxy are unique. Likewise, Microsoft Edge, Google Chrome, and Mozilla Firefox are independent web browsers.&lt;br&gt;
Responsive design enables the site to adjust and provide the optimal viewing experience.&lt;/p&gt;

&lt;p&gt;The width of iPhone screens ranges from 4 to 6.7 inches. So, a website‚Äôs display may change, depending on the site‚Äôs design and the screen‚Äôs size. Responsive design is essential for a good user experience. Unfortunately, search engines penalize sites that aren‚Äôt responsive.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ei0uvCcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://enginetemplates.com/wp-content/uploads/edd/2017/07/et-web-design-free-responsive-joomla-template.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ei0uvCcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://enginetemplates.com/wp-content/uploads/edd/2017/07/et-web-design-free-responsive-joomla-template.png" alt="rd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect"&gt;
  &lt;/a&gt;
  Connect
&lt;/h2&gt;

&lt;p&gt;If you like my blogs you can support me by buying me a coffee.&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why to use Maps over Objects in JS ?</title>
      <author>faisal khan</author>
      <pubDate>Thu, 07 Oct 2021 04:57:24 +0000</pubDate>
      <link>https://dev.to/faisalpathan/why-to-use-map-over-object-in-js-306m</link>
      <guid>https://dev.to/faisalpathan/why-to-use-map-over-object-in-js-306m</guid>
      <description>&lt;p&gt;In JavaScript, an object is a standalone entity, with properties and type. &lt;/p&gt;

&lt;p&gt;Compare it with a cup, for example. A cup is an object, with properties. A cup has color, design, weight, and the material it is made of, etc. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UhxWitGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/QJvwBSGaoc4eI/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UhxWitGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/QJvwBSGaoc4eI/giphy.webp" alt="Enough talk"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;Problems I faced while working with objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Solution: Maps Data Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;Comparison: Objects and Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-4"&gt;Practical Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-5"&gt;Problems in Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-6"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-problems-i-faced-while-working-with-objects"&gt;
  &lt;/a&gt;
  1. Problems I faced while working with objects: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#only-string-or-symbol-could-be-used-as-key"&gt;
  &lt;/a&gt;
  Only string or symbol could be used as key.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Objects have a limitation that their keys have to be strings
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; ['1', '2']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;The numbers &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are keys in the names object. Later, when the object‚Äôs keys are accessed, it turns out that the &lt;code&gt;numbers were converted to strings&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Implicit conversion of keys is tricky because you &lt;code&gt;lose the consistency of the types.&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;h4&gt;
  &lt;a href="#no-proper-helper-methods-to-work-with-objects"&gt;
  &lt;/a&gt;
  No proper helper methods to work with objects.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In order to find the length of the object we need to 
either use &lt;code&gt;Object.keys()&lt;/code&gt; or &lt;code&gt;Object.values()&lt;/code&gt; and then 
find the length by accessing &lt;code&gt;.length&lt;/code&gt; on the array 
returned.&lt;/li&gt;
&lt;li&gt;Similarly to iterate over it we have to use the same 
methods above to perform an iteration over the object.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;h4&gt;
  &lt;a href="#own-object-properties-might-collide-with-property-keys-inherited-from-the-prototype-eg-tostring-constructor-etc"&gt;
  &lt;/a&gt;
  Own object properties might collide with property keys inherited from the prototype (e.g. toString, constructor, etc).
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Any object inherits properties from its prototype object.&lt;/li&gt;
&lt;li&gt;The accidentally overwritten property inherited from the prototype is dangerous. Let‚Äôs study such a dangerous situation.&lt;/li&gt;
&lt;li&gt;Let‚Äôs overwrite the toString() property in an object actor:
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Harrison Ford&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Actor: Harrison Ford&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
   &lt;span class="cm"&gt;/* 
   this will cause a problem since we are overriding the 
   toString method of the prototype chain
   */&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;h4&gt;
  &lt;a href="#deleting-keys-causes-problem-in-large-objects"&gt;
  &lt;/a&gt;
  Deleting keys causes problem in large objects.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Using delete causes various forms and magnitudes of a slowdown in many situations, because it tends to make things more complicated, forcing the engine (any engine) to perform more checks and/or fall off various fast paths.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-solution-using-maps-data-structure"&gt;
  &lt;/a&gt;
  2. Solution: Using Maps Data Structure&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Maps is a collection of keyed data items, just like an object. But the main difference is that Map allows keys of any type.&lt;/p&gt;

&lt;p&gt;Methods and properties are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;new Map()&lt;/code&gt; ‚Äì creates the map.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map.set(key, value)&lt;/code&gt; ‚Äì stores the value by the key.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map.get(key)&lt;/code&gt; ‚Äì returns the value by the key, undefined if the key doesn‚Äôt exist in map.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map.has(key)&lt;/code&gt; ‚Äì returns true if the key exists, false otherwise.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map.delete(key)&lt;/code&gt; ‚Äì removes the value by the key.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map.clear()&lt;/code&gt; ‚Äì removes everything from the map.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map.size&lt;/code&gt; ‚Äì returns the current element count.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;str1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// a string key&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;num1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// a numeric key&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bool1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// a boolean key&lt;/span&gt;

&lt;span class="c1"&gt;// remember the regular object? it would convert keys to string&lt;/span&gt;
&lt;span class="c1"&gt;// Map keeps the type, so these two are different:&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'num1'&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'str1'&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maps have useful and intuitive helper methods which are used to perform different operations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-comparison-objects-and-maps"&gt;
  &lt;/a&gt;
  3. Comparison: Objects and Maps&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Maps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Iteration&lt;/td&gt;
&lt;td&gt;Object does not implement an iteration protocol, and so objects are not directly iterable using the JavaScript for...of statement (by default).&lt;/td&gt;
&lt;td&gt;A Map is an iterable, so it can be directly iterated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key Types&lt;/td&gt;
&lt;td&gt;The keys of an object must be either a String or a Symbol.&lt;/td&gt;
&lt;td&gt;A Map's keys can be any value (including functions, objects, or any primitive).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Size&lt;/td&gt;
&lt;td&gt;The number of items in an object must be determined manually.&lt;/td&gt;
&lt;td&gt;The number of items in a Map is easily retrieved from its size property.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Performance&lt;/td&gt;
&lt;td&gt;Not optimized for frequent additions and removals of key-value pairs.&lt;/td&gt;
&lt;td&gt;Performs better in scenarios involving frequent additions and removals of key-value pairs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-practical-example"&gt;
  &lt;/a&gt;
  4. Practical Example&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Let's take an example of implementing &lt;strong&gt;select all&lt;/strong&gt; functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MmhbTMdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/mT4Ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmhbTMdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/mT4Ry.png" alt="Select All"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; 
&lt;span class="c1"&gt;// we will use object here for quick lookup since its search is O(1)&lt;/span&gt;

&lt;span class="c1"&gt;// adding item into selectedItems&lt;/span&gt;
&lt;span class="nx"&gt;selectedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; 
&lt;span class="nx"&gt;selectedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;// removing item from selectedItems&lt;/span&gt;
&lt;span class="nx"&gt;selectedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code seems simple, but if you notice we are not deleting the key here we are setting it to false.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-NypXSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i45o7j0rmgriqxzsm71r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-NypXSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i45o7j0rmgriqxzsm71r.png" alt="Screenshot 2021-10-06 at 1.49.49 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in order to change the header selection state either from &lt;code&gt;partial&lt;/code&gt; to &lt;code&gt;complete&lt;/code&gt; or vice versa.We need to traverse over the object and detect false and true values.&lt;/p&gt;

&lt;p&gt;It would have been easy if we could have deleted items from an object and then had checked the length of the object to determine if the current state is &lt;code&gt;partial&lt;/code&gt; or &lt;code&gt;complete&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But delete has performance issues in our V8 engine especially when we want to do multiple deletions of keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maps comes to the rescue, map has delete functionality as well as functionality to return size, unlike object where we need to convert to array and then find the length of it. All without causing performance bottleneck.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// adding item into selectedItems&lt;/span&gt;
&lt;span class="nx"&gt;selectedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;selectedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// removing item from selectedItems&lt;/span&gt;
&lt;span class="nx"&gt;selectedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One of the solutions was to set &lt;strong&gt;selectionItems&lt;/strong&gt; to &lt;code&gt;{}&lt;/code&gt; when we want to remove all the selected items, but that is not a scalable solution in certain situations.&lt;/p&gt;

&lt;p&gt;When we do pagination in a table we have scenarios where &lt;code&gt;select-all&lt;/code&gt; is performed to items specific to the current page and not on the items of the next or previous page.&lt;/p&gt;

&lt;p&gt;In this case, if we set &lt;code&gt;selectedItems = {}&lt;/code&gt; it will reset all the values, which is an incorrect solution. &lt;/p&gt;

&lt;p&gt;Hence, maps are more scalable solution since it does not face any problem with respect to the deletion of the key.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-problems-in-maps"&gt;
  &lt;/a&gt;
  5. Problems in Maps&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#maps-is-not-here-to-replace-objects"&gt;
  &lt;/a&gt;
  Maps is not here to replace objects
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If we are only using string-based keys and need maximum read performance, then objects might be a better choice. &lt;/li&gt;
&lt;li&gt;This is because Javascript engines compile objects down to C++ classes in the background, and the access path for properties is much faster than a function call for Map().get().&lt;/li&gt;
&lt;li&gt;Adding or removing a property causes the shape of the class to change and the backing class to be re-compiled, which is why using an object as a dictionary with lots of additions and deletions is very slow, but reads of existing keys without changing the object are very fast.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;h4&gt;
  &lt;a href="#maps-are-not-serializable"&gt;
  &lt;/a&gt;
  Maps are not serializable
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Maps does not have native support for serialization or parsing&lt;/li&gt;
&lt;li&gt;Redux does not recommend using non-serializable data structures, since it can break the working of dev-tools and also will cause problems in rendering updates as expected: &lt;a href="https://redux.js.org/style-guide/style-guide#do-not-put-non-serializable-values-in-state-or-actions"&gt;https://redux.js.org/style-guide/style-guide#do-not-put-non-serializable-values-in-state-or-actions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-conclusion"&gt;
  &lt;/a&gt;
  6. Conclusion&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In review, while we will still rely heavily on JavaScript objects to do the job of holding structured data, they have some clear limitations&lt;/p&gt;

&lt;p&gt;These limitations are solved by maps. Moreover, maps provide benefits like being iterators and allowing easy size look-up.&lt;/p&gt;

&lt;p&gt;Objects are not good for information that‚Äôs continually updated, looped over, altered, or sorted. In those cases, use maps. &lt;/p&gt;

&lt;p&gt;In conclusion, use maps with a purpose. Think of maps and objects similar to how let and const are used for our variables. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-b1Fdk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/BYoRqTmcgzHcL9TCy1/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-b1Fdk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/BYoRqTmcgzHcL9TCy1/giphy.webp" alt="Enough talk"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Simple Sign-in form using CSS üöÄüöÄ</title>
      <author>Shubham Jadhav</author>
      <pubDate>Thu, 07 Oct 2021 04:53:25 +0000</pubDate>
      <link>https://dev.to/dev_shubham/simple-sign-in-form-using-css-5g9j</link>
      <guid>https://dev.to/dev_shubham/simple-sign-in-form-using-css-5g9j</guid>
      <description>&lt;p&gt;I created a simple sign up form using html css and JavaScript. &lt;br&gt;
 It also include password show or hide functionality.&lt;/p&gt;

&lt;p&gt;See below üëá&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubham-web2144/embed/PojGdJE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Coming Soon.. - Split Cards Effect | Demo | Project Showcase</title>
      <author>CoderZ90</author>
      <pubDate>Thu, 07 Oct 2021 02:23:05 +0000</pubDate>
      <link>https://dev.to/official_fire/coming-soon-split-cards-effect-demo-project-showcase-48ii</link>
      <guid>https://dev.to/official_fire/coming-soon-split-cards-effect-demo-project-showcase-48ii</guid>
      <description>&lt;p&gt;Split cards effect using html, css &amp;amp; javascript. Full Blog Post coming soon.... and tutorial video will also come asap&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_mvmhM3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xcyiu1c97u07c8vswga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_mvmhM3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xcyiu1c97u07c8vswga.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to see Demo Here is the video Link - &lt;a href="https://www.youtube.com/watch?v=AOlc2Ac_Yzs"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üòä Thankyou for giving your time to read this hope you found it useful and interesting&lt;/p&gt;

&lt;p&gt;I have my own youtube channel please üôèüôÇsubscribe&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/codingfire?sub_confirmation=1"&gt;https://youtube.com/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coming Sooonnnnn.....&lt;/p&gt;

</description>
      <category>comingsoon</category>
    </item>
  </channel>
</rss>
