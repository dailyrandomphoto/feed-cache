<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Database Caching with Spring Boot and Hazelcast</title>
      <author>priyankanandula</author>
      <pubDate>Thu, 17 Jun 2021 13:53:15 +0000</pubDate>
      <link>https://dev.to/priyanka_nandula/database-caching-with-spring-boot-and-hazelcast-15e1</link>
      <guid>https://dev.to/priyanka_nandula/database-caching-with-spring-boot-and-hazelcast-15e1</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Llh8hY9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1lfz8mxrb360xx80pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Llh8hY9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1lfz8mxrb360xx80pf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Signed in as @priyankanandula&lt;/p&gt;

&lt;p&gt;&lt;span&gt;After few days &lt;em&gt;gap&lt;/em&gt;, I am &lt;em&gt;back&lt;/em&gt; 😎&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Good day 😃, guys! I come back with an important concept during the execution of &lt;em&gt;database&lt;/em&gt; operations using  &lt;code&gt;ORM&lt;/code&gt; tools in Spring Boot.&lt;/p&gt;

&lt;p&gt;In this &lt;code&gt;blog&lt;/code&gt;, we'll talk about &lt;strong&gt;caching&lt;/strong&gt; and how to implement it using &lt;code&gt;Hazel Cast&lt;/code&gt;, one of the &lt;em&gt;cache providers&lt;/em&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#final-project-structure"&gt;
  &lt;/a&gt;
  Final Project Structure
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-1h8jH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10mjc8g8ospqfu8sttcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-1h8jH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10mjc8g8ospqfu8sttcz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started 👇 &lt;/p&gt;




&lt;h5&gt;
  &lt;a href="#before-we-go-into-detail-regarding-caching-lets-have-a-look-at-how-raw-orm-endraw-tools-handle-the-given-request"&gt;
  &lt;/a&gt;
  Before we go into detail regarding &lt;em&gt;caching&lt;/em&gt;, let's have a look at how &lt;code&gt;ORM&lt;/code&gt; tools &lt;strong&gt;handle the given request&lt;/strong&gt;.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pr_8z6WQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vc376axt5s9dojukyxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pr_8z6WQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vc376axt5s9dojukyxg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;when &lt;em&gt;client&lt;/em&gt; access our application, our application,  which uses &lt;code&gt;ORM&lt;/code&gt; tools like &lt;code&gt;hibernate&lt;/code&gt; to read the data from the database,  will execute a &lt;strong&gt;select query internally&lt;/strong&gt; on the database table to &lt;em&gt;retrieve the data&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;data&lt;/strong&gt; is then converted into an &lt;strong&gt;object&lt;/strong&gt;, which is then passed to our &lt;em&gt;application&lt;/em&gt;, which then sends it back to the &lt;em&gt;client&lt;/em&gt; as required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every time a &lt;em&gt;client&lt;/em&gt; requests data from our &lt;em&gt;application&lt;/em&gt; or &lt;code&gt;ORM&lt;/code&gt; tool, the select statement will be executed, and the process will &lt;u&gt;repeat again&lt;/u&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instead of repeatedly performing the same &lt;em&gt;read operation&lt;/em&gt;, we employ &lt;strong&gt;caching or a cache&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#caching-"&gt;
  &lt;/a&gt;
  Caching :
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt; stores data or objects in &lt;em&gt;temporary locations&lt;/em&gt;. When a request comes in for the &lt;strong&gt;first time&lt;/strong&gt;, this &lt;code&gt;ORM&lt;/code&gt; tool or the &lt;code&gt;caching framework&lt;/code&gt; will read the data, transform it to an object, and store it in a &lt;em&gt;temporary location or on disc&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;The next time a request comes in, these &lt;code&gt;ORM&lt;/code&gt; frameworks will check to see if the &lt;em&gt;data&lt;/em&gt; for that &lt;em&gt;request is already in the cache&lt;/em&gt;. If it exists,  &lt;strong&gt;no database select queries or database communication will be performed; simple take the object from cache, process it, and return it to the client&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Finally, we may increase our application's performance by using  the Cache.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's get started with the implementation 👇&lt;/p&gt;




&lt;h6&gt;
  &lt;a href="#follow-the-steps-below-to-utilise-hazel-cast-or-any-other-cache-provider"&gt;
  &lt;/a&gt;
  Follow the steps below to utilise Hazel Cast or any other cache provider.
&lt;/h6&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Adding Dependencies &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create Cache Configuration &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable and Use Caching&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching in Action&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;h2&gt;
  &lt;a href="#1-adding-dependencies-"&gt;
  &lt;/a&gt;
  1. Adding Dependencies :
&lt;/h2&gt;

&lt;p&gt;Add the following dependencies in POM.xml file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;spring-boot-starter-cache&lt;/li&gt;
&lt;li&gt;hazelcast-spring&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#pomxml"&gt;
  &lt;/a&gt;
  POM.xml
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://maven.apache.org/POM/4.0.0"&lt;/span&gt; &lt;span class="nl"&gt;xmlns:&lt;/span&gt;&lt;span class="n"&gt;xsi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt;
    &lt;span class="nl"&gt;xsi:&lt;/span&gt;&lt;span class="n"&gt;schemaLocation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;modelVersion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;modelVersion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springframework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RELEASE&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;relativePath&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;priya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springweb&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;ProductRestAPI&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="no"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;ProductRestAPI&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nc"&gt;Spring&lt;/span&gt; &lt;span class="nc"&gt;BootRestAPI&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springframework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jpa&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springframework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springframework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="c1"&gt;//mvnrepository.com/artifact/com.hazelcast/hazelcast-spring --&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hazelcast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hazelcast&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springframework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springframework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;groupId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-cache-configuration-"&gt;
  &lt;/a&gt;
  2. Create Cache Configuration :
&lt;/h2&gt;

&lt;p&gt;Now we'll create the &lt;strong&gt;java configuration class&lt;/strong&gt; that we'll need to create a &lt;code&gt;Cache&lt;/code&gt;. This is where we'll give the &lt;code&gt;Cache&lt;/code&gt; a name, size, and amount of objects that can be placed in it, among other things.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#we-can-add-raw-hazelcast-endraw-configuration-in-one-of-the-following-manners"&gt;
  &lt;/a&gt;
  we can  add &lt;code&gt;Hazelcast&lt;/code&gt; configuration in one of the following manners:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;em&gt;hazelcast.yaml&lt;/em&gt; configuration OR&lt;/li&gt;
&lt;li&gt;Add &lt;em&gt;hazelcast.xml&lt;/em&gt; configuration OR&lt;/li&gt;
&lt;li&gt;Define @Bean with &lt;em&gt;Hazelcast&lt;/em&gt; configuration in the source code&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I am using the Java Based Configuration using @Bean&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.priya.springweb.cacheconfiguraions&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;



&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.hazelcast.config.Config&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.hazelcast.config.EvictionConfig&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.hazelcast.config.EvictionPolicy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.hazelcast.config.MapConfig&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.hazelcast.config.MaxSizeConfig&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductCacheConfig&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Bean&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt; &lt;span class="nf"&gt;cacheConfig&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setInstanceName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hazel-instance"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addMapConfig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MapConfig&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"product-cache"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setTimeToLiveSeconds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMaxSizeConfig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MaxSizeConfig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hazelcast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MaxSizeConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MaxSizePolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FREE_HEAP_SIZE&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEvictionPolicy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;EvictionPolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LRU&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;addMapConfig :&lt;/b&gt; We set all the values for the &lt;code&gt;Cache&lt;/code&gt; in this &lt;em&gt;MapConfig&lt;/em&gt;, such as name, size, time, and so on.It holds all the &lt;em&gt;information&lt;/em&gt; for the &lt;code&gt;Cache&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;setName :&lt;/b&gt; The name of the cache should be specified. choose whatever name you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;setTimeToLiveSeconds :&lt;/b&gt; This is the &lt;em&gt;period of time&lt;/em&gt; the object will live in the &lt;code&gt;Cache&lt;/code&gt; before being &lt;u&gt;evicted&lt;/u&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;setMaxSizeConfig :&lt;/b&gt; The Cache's &lt;code&gt;MaxSizeConfig&lt;/code&gt; option has two values: one is the &lt;em&gt;maximum number of objects the Cache can hold&lt;/em&gt;, and the other is the &lt;em&gt;maximum amount of space the Cache can maintain&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;setEvictionPolicy : &lt;/b&gt;We'll also need to give &lt;code&gt;cache eviction information&lt;/code&gt;, such as when the &lt;em&gt;cache should be cleaned&lt;/em&gt;, because the cache size will grow with time, and if we don't clear it, &lt;u&gt;our application will crash&lt;/u&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;

&lt;h6&gt;We can employ a variety of cache policies, like as&lt;h6&gt;

&lt;/h6&gt;
&lt;/h6&gt;
&lt;p&gt;1 Least Recently Used(LRU)&lt;/p&gt;

&lt;p&gt;2 Least Frequently Used(LFU)&lt;/p&gt;

&lt;p&gt;3 &lt;b&gt;Random :&lt;/b&gt;  Randomly pick the element from Cache and removed it.&lt;/p&gt;

&lt;p&gt;4 &lt;b&gt;NONE :&lt;/b&gt; It will do nothing.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#3-enable-and-use-caching-"&gt;
  &lt;/a&gt;
  3. Enable and Use Caching :
&lt;/h2&gt;

&lt;p&gt;I'm using the &lt;code&gt;Rest APIs&lt;/code&gt; that we created in my &lt;strong&gt;previous blog&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;This should be referred to [&lt;a href="https://dev.to/priyanka_nandula/create-rest-crud-api-with-springboot-springdata-jpa-3m6b"&gt;https://dev.to/priyanka_nandula/create-rest-crud-api-with-springboot-springdata-jpa-3m6b&lt;/a&gt;]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.priya.springweb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.cache.annotation.EnableCaching&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="nd"&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class="nd"&gt;@EnableCaching&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductRestApiApplication&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SpringApplication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProductRestApiApplication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;@EnableCaching&lt;/b&gt; that will enable the caching for our application&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.priya.springweb.entities&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.Serializable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.persistence.Entity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.persistence.GeneratedValue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.persistence.GenerationType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.persistence.Id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Entity&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Serializable&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * 
     */&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;serialVersionUID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1L&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;@Id&lt;/span&gt;
    &lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;GenerationType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;IDENTITY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getDescription&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDescription&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getPrice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setPrice&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Our Model class Should &lt;strong&gt;implements&lt;/strong&gt; the &lt;code&gt;Serializable&lt;/code&gt; interface because &lt;em&gt;hazel cast&lt;/em&gt; or any other &lt;code&gt;Cache providers&lt;/code&gt; like &lt;em&gt;EH Cache&lt;/em&gt; will &lt;u&gt;serialize&lt;/u&gt; our projects or &lt;code&gt;Model Entities&lt;/code&gt; to a file system or &lt;code&gt;in memory&lt;/code&gt; as required to a database.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.priya.springweb.controllers&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.cache.annotation.CacheEvict&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.cache.annotation.Cacheable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.transaction.annotation.Transactional&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.bind.annotation.PathVariable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.bind.annotation.RequestBody&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.bind.annotation.RequestMethod&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.priya.springweb.entities.Product&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.priya.springweb.repos.ProductRepository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;ProductRepository&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/products"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;RequestMethod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getProducts&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/products/{id}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;RequestMethod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@Cacheable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product-cache"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;getProductById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@PathVariable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/products/"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;RequestMethod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;createProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBody&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/products/"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;RequestMethod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PUT&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;updateProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBody&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/products/{id}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;RequestMethod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DELETE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@CacheEvict&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product-cache"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;  &lt;span class="nf"&gt;deleteProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@PathVariable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We will be  using Caching on the &lt;code&gt;get a single product method&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Cacheable : &lt;/b&gt; we will also use &lt;code&gt;@Cachable&lt;/code&gt; on the rest &lt;em&gt;controllers or service classes&lt;/em&gt;. Here &lt;strong&gt;value is the Cache name we provided in the configuration class&lt;/strong&gt; and Key is unique Key to store in &lt;code&gt;Cache&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;CacheEvict : &lt;/b&gt; &lt;em&gt;cache evict&lt;/em&gt; information that is when should cache be cleaned.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;After you made all these Changes Run the Application --&amp;gt;Run on Spring Boot App&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#4-caching-in-action-"&gt;
  &lt;/a&gt;
  4. Caching in Action :
&lt;/h2&gt;

&lt;p&gt;To check the working of Caching we will execute the &lt;code&gt;GET MEthod&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Please remember the following few points.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure MySQL Server is running.&lt;/li&gt;
&lt;li&gt;Make sure you are running the SpringBoot project in embedded Tomcat Server &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#im-using-raw-resttemplate-endraw-inside-the-junit-class-to-consume-the-restful-services-we-created-in-the-controller-class"&gt;
  &lt;/a&gt;
  I'm using &lt;code&gt;RestTemplate&lt;/code&gt; inside the JUnit Class to consume the Restful Services we created  in the Controller Class.
&lt;/h4&gt;



&lt;ul&gt;
&lt;li&gt;Using the &lt;code&gt;RestTemplate&lt;/code&gt; given by the spring web module, we can now &lt;strong&gt;consume restful web services or create a restful client&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Spring web&lt;/code&gt; enables us to both &lt;em&gt;design&lt;/em&gt; and &lt;em&gt;consume restful web services&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Rest Template&lt;/code&gt; is a class that performs various &lt;code&gt;HTTP&lt;/code&gt; &lt;em&gt;Methods(GET/PUT/POST/DELETE..)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt; The returned &lt;code&gt;json&lt;/code&gt; is automatically &lt;u&gt;deserialized&lt;/u&gt; into the &lt;strong&gt;Product class&lt;/strong&gt; when using a &lt;code&gt;spring or rest template&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;h6&gt;
  &lt;a href="#applicationproperties-file-"&gt;
  &lt;/a&gt;
  Application.Properties File :
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;datasource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;jdbc:mysql:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:3306/myproducts&lt;/span&gt;
&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;datasource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;datasource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;servlet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;productapi&lt;/span&gt;

&lt;span class="n"&gt;productresapi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:8080/productapi/products/&lt;/span&gt;

&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;
&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hazelcast&lt;/span&gt;
&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jpa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.priya.springweb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.boot.test.context.SpringBootTest&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.test.context.junit4.SpringRunner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.client.RestTemplate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.priya.springweb.entities.Product&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="nd"&gt;@RunWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SpringRunner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@SpringBootTest&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductRestApiApplicationTests&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${productresapi.services.url}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;textGetProduct&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;RestTemplate&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RestTemplate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getForObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name :"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mac Book Pro"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;



    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#available-methods-are"&gt;
  &lt;/a&gt;
  Available methods are:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;getForObject(url, classType)&lt;/b&gt; – retrieve a representation by doing a &lt;code&gt;GET&lt;/code&gt; on the &lt;code&gt;URL&lt;/code&gt;. The response (if any) is unmarshalled to given class type and returned.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;getForEntity(url, responseType)&lt;/b&gt; – retrieve a representation as &lt;code&gt;ResponseEntity&lt;/code&gt; by doing a &lt;code&gt;GET&lt;/code&gt; on the &lt;code&gt;URL&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;exchange(requestEntity, responseType)&lt;/b&gt; – execute the specified &lt;code&gt;RequestEntity&lt;/code&gt; and return the response as &lt;code&gt;ResponseEntity&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;execute(url, httpMethod, requestCallback, responseExtractor)&lt;/b&gt; – execute the httpMethod to the given &lt;code&gt;URI&lt;/code&gt; template, preparing the request with the &lt;code&gt;RequestCallback&lt;/code&gt;, and reading the response with a &lt;code&gt;ResponseExtractor&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;em&gt;"In my upcoming &lt;code&gt;blogs&lt;/code&gt;, I'll go over &lt;code&gt;RestTemplate&lt;/code&gt; in greater detail.."&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#now-run-this-raw-junit-test-endraw-case"&gt;
  &lt;/a&gt;
  Now Run this &lt;code&gt;JUnit Test&lt;/code&gt; Case:
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p41vB96u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v5fpqomtazj1s20q7up.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p41vB96u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v5fpqomtazj1s20q7up.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6B1itdht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l13kq7na8ul3g6mdp7ey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6B1itdht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l13kq7na8ul3g6mdp7ey.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Test Runs Successfully. Now go through the &lt;code&gt;logs Console&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_woID0rZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrz4e8697vtvvbyvr01o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_woID0rZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrz4e8697vtvvbyvr01o.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#as-you-can-see-when-we-sent-the-request-for-the-first-time-it-executed-the-select-query-to-get-the-data-from-the-database"&gt;
  &lt;/a&gt;
  As you can see, when we sent the Request for the first time, it executed the Select Query to get the data from the database.
&lt;/h5&gt;

&lt;h4&gt;
  &lt;a href="#run-the-junit-test-case-again-"&gt;
  &lt;/a&gt;
  Run the JUnit Test Case Again :
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;I've now cleared the &lt;code&gt;console logs&lt;/code&gt; and &lt;em&gt;rerunning the Test Case&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0ftAICo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx6zf8tizs0zjpalhqza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0ftAICo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx6zf8tizs0zjpalhqza.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now &lt;code&gt;Hibernate&lt;/code&gt; did not execute the &lt;em&gt;select query&lt;/em&gt; because the object was already &lt;code&gt;cached&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibb3riFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3ekj7dvm7bicyn64hcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibb3riFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3ekj7dvm7bicyn64hcg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE : Instead of using &lt;code&gt;RestTemplate&lt;/code&gt; within the Code, you can also use &lt;code&gt;Postmansuite&lt;/code&gt;and then check the &lt;code&gt;logs Console&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RestTemplate&lt;/code&gt; can be used anywhere in the application, such as in the &lt;strong&gt;RestController&lt;/strong&gt; or &lt;strong&gt;Service classes&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Here's a link to the code's GIT repository.[&lt;a href="https://github.com/priyankanandula/SpringBoot/tree/feature/HazelCast_Cache/ProductRestAPI"&gt;https://github.com/priyankanandula/SpringBoot/tree/feature/HazelCast_Cache/ProductRestAPI&lt;/a&gt;] &lt;/p&gt;



&lt;p&gt;That's it, guys, that's how we use &lt;code&gt;Hazel Cast&lt;/code&gt; to implement caching. I hope you found it &lt;em&gt;interesting&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gy0JjqAS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqzw48o9e3u9mwb98g7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gy0JjqAS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqzw48o9e3u9mwb98g7h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;priyanka nandula&lt;/em&gt; signing off... &lt;/p&gt;

</description>
      <category>databasecaching</category>
      <category>springboot</category>
      <category>java</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Is PolyWork the new LinkedIn for Developers?</title>
      <author>Andrew Brown 🇨🇦</author>
      <pubDate>Thu, 17 Jun 2021 13:41:28 +0000</pubDate>
      <link>https://dev.to/andrewbrown/is-polywork-the-new-linkedin-for-developers-5hae</link>
      <guid>https://dev.to/andrewbrown/is-polywork-the-new-linkedin-for-developers-5hae</guid>
      <description>&lt;p&gt;P.S. I just want to frontload this article to ask you what is your opinion about the new professional network? I'd love to read the comments. I want to get the conversation going so this is why I wrote this long form post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-polywork"&gt;
  &lt;/a&gt;
  What is Polywork?
&lt;/h2&gt;

&lt;p&gt;Polywork is a professional network, and it could be described as an alternative to LinkedIn though It would be better to compare them as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LinkedIn — A resume directory with a social-professional network built adjacent to your resume profile.&lt;/li&gt;
&lt;li&gt;Polywork — A historical professional portfolio or journal that also is the social-professional network.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think the co-founder was previously a designer at Google, and the marketing and onboarding give you a strong impression that UX is this team's immediate strength.&lt;/p&gt;

&lt;p&gt;UX alone is not enough, so let us dive into a few thoughts about this new platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-i-do-in-polywork"&gt;
  &lt;/a&gt;
  What can I do in Polywork?
&lt;/h2&gt;

&lt;p&gt;Polywork as of the time of this article is incomplete. They are slowly bringing users into their network via invites and with a strong feedback loop, ensuring the features they engineer will deliver on their service's core principles.&lt;/p&gt;

&lt;p&gt;What you can currently do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a profile&lt;/li&gt;
&lt;li&gt;choose an AI assistant&lt;/li&gt;
&lt;li&gt;create posts to your professional timeline (you can backdate to anytime)&lt;/li&gt;
&lt;li&gt;follower other users&lt;/li&gt;
&lt;li&gt;contact other users via strictly defined opportunities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What you cannot do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you cannot like a post&lt;/li&gt;
&lt;li&gt;you cannot comment on a post&lt;/li&gt;
&lt;li&gt;you share a post to your professional timeline&lt;/li&gt;
&lt;li&gt;you cannot see public metrics about posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these "cannots" I think, are by design, and others are latent features yet to be released. I think we can expect to see commenting, and I think Polywork may decide not to have likes or show metrics.&lt;br&gt;
The latter is a strong possibility when we see Instagram talking about giving its users the options to hide mentions and metrics. &lt;/p&gt;

&lt;p&gt;This stems from being socially aware of the negative effects on a user's mental health when putting too much value on social media statistics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-polywork-targeting"&gt;
  &lt;/a&gt;
  Who is Polywork targeting?
&lt;/h2&gt;

&lt;p&gt;Superficially speaking, it would look like Polywork is building a professional network that strongly appeals to the aesthetics of young professionals eg. influencers, developer advocates, designers, hustlers, lifestyle entrepreneurs, models and musicians. So far, these have been the early adopters.&lt;/p&gt;

&lt;p&gt;It is important to put aside the presented aesthetic and talk about the function and future of resumes because it becomes apparent that this network is for everyone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resume-20"&gt;
  &lt;/a&gt;
  Resume 2.0
&lt;/h2&gt;

&lt;p&gt;A resume is a pdf you email to a company, but another way to see is that it is a protocol (standardized method of communication)&lt;/p&gt;

&lt;p&gt;A resume is job-history-oriented, and the we verify an applicants authenticity is via the resume protocol:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;analyze the written composition of the resume for anomalies&lt;/li&gt;
&lt;li&gt;references for a third-party attestment&lt;/li&gt;
&lt;li&gt;interrogate an applicant against their written content at a per task level&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#shifting-from-joboriented-to-activityoriented"&gt;
  &lt;/a&gt;
  Shifting from Job-Oriented to Activity-Oriented
&lt;/h3&gt;

&lt;p&gt;With a resume it primes the hiring manager or recruiter to use job-history oriented as the filter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is this person switching jobs too frequently?&lt;/li&gt;
&lt;li&gt;Does this person have gaps been workplaces?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with this kind of analysis is that these are superficial concerns and do not tell if an applicant is qualified. Also, it does not adapt to the market as a whole such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;more people want only to be part-time to be their own entrepreneur&lt;/li&gt;
&lt;li&gt;companies are offering fewer full-time roles&lt;/li&gt;
&lt;li&gt;companies are offering less long-term stable roles&lt;/li&gt;
&lt;li&gt;the rise of a generation who knows how to produce public-facing content&lt;/li&gt;
&lt;li&gt;the rise of a new global workforce from developing countries and not sticking to resume norms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wouldn't it be more valuable if you could filter and explore activities?&lt;br&gt;
If you still needed a summary, wouldn't it be nice if an AI could be trusted to generate the cliff notes from sourced materials?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#change-of-the-composition-of-resumes"&gt;
  &lt;/a&gt;
  Change of the Composition of Resumes
&lt;/h3&gt;

&lt;p&gt;AI is becoming more accessible and valuable. Look at GLP3 and CopyAI, and it is getting good at generating content that is indistinguishable from human-generated content.&lt;/p&gt;

&lt;p&gt;What happens when your entire resume can be spoofed by AI and cannot be discerned as being generated by AI with another AI?&lt;br&gt;
You will need more granular information to show where information has been sourced from.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attestment"&gt;
  &lt;/a&gt;
  Attestment
&lt;/h3&gt;

&lt;p&gt;References have not been legitimate for years. Anyone can pretend to be your reference; anyone can endorse your work without tangible proof.&lt;/p&gt;

&lt;p&gt;People on LinkedIn will endorse me as being knowledgeable with AWS. The reason they endorse me is that I help them pass their certification exam. It would be more useful if the proof of endorsement was tied to an activity such as posting their cloud certification, which I helped them obtain through my free study course and then associated it with me.&lt;/p&gt;

&lt;p&gt;In LinkedIn, you can kind of replicate this by mentioning people on a post in the LinkedIn public time-stream, but it becomes eventually lost since it cannot be easily filtered because LinkedIn social network with adjacent, not your resume.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opportunitybased-instead-of-spambased"&gt;
  &lt;/a&gt;
  Opportunity-based instead of Spam-based
&lt;/h3&gt;

&lt;p&gt;Direct Messaging on LinkedIn, on the whole, is people messaging you for unsolicited services. It has us treat every connection or relationship with suspicion and apprehension.&lt;/p&gt;

&lt;p&gt;Polywork has fives messaging a purpose before being sent to a target user, and this is the first big step to cut down on spam.&lt;/p&gt;

&lt;p&gt;I could see them expanding this feature with their AI assistant to assess whether the sent message is genuine, meaningful and a wanted communication, and the system could quickly penalize unapologetic spammers via an internal karma system.&lt;/p&gt;

&lt;p&gt;It could also be that activity tags could be associated with contact types. This would allow contacting users to be forced to understand the context of what they are messaging for and do their homework to understand if there is genuinely is alignment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cant-linkedin-copy-these-features-like-how-they-can-copy-instagram-user-stories-and-clubhouse-audio-chats"&gt;
  &lt;/a&gt;
  Can't LinkedIn copy these features like how they can copy Instagram User Stories and Clubhouse audio chats?
&lt;/h2&gt;

&lt;p&gt;LinkedIn could replicate these features, but the fundamental way their social network works like connections and resumes profile the public live stream, these features would be subject to exploit that render them not as valuable.&lt;/p&gt;

&lt;p&gt;LinkedIn would be better off acquiring or partnering with Polywork and position themselves as a job board and resume platform.&lt;br&gt;
LinkedIn Resumes are not useless, but their value and purpose are going to change, and LinkedIn is not positioned to deliver on Resume 2.0&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-this-polywork-have-to-with-developers"&gt;
  &lt;/a&gt;
  What does this Polywork have to with developers?
&lt;/h2&gt;

&lt;p&gt;The normal combination today for developers applying to a job is Resume + LinkedIn + Github.&lt;br&gt;
Learning in public like #100DaysOfCode and #100DaysOfCloud challenges help provide structure around these proof of work.&lt;/p&gt;

&lt;p&gt;Github is great that it you can use a repo as a journal, but even for 100DaysOfCloud I have to tell people take those entries and tie social proof to them like on Twitter on LinkedIn and we don't have useful social-relationship metadata with these github entries for discoverability. &lt;/p&gt;

&lt;p&gt;I can't tell you how many people completed the 100DaysOCloud challenge, I can't find journals github unless people self-submit, I can't consistent filter to find the 100th day on Twitter or Linked since people are inconsistent with tagging.&lt;/p&gt;

&lt;p&gt;Polywork can make solve all this in one package and I think that will be better for developer communities for their proof of work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-dev-fit-with-polywork"&gt;
  &lt;/a&gt;
  How does DEV fit with Polywork?
&lt;/h2&gt;

&lt;p&gt;DEV has a user profile that can be customized, but I think Polywork can allow you to showcase your best work, and by being selective of posting your best DEV articles into your Polywork timeline. Rich relational metadata can built ontop of your content. &lt;/p&gt;

&lt;p&gt;I don't see Polywork replacing DEV for dicussion, because DEV is a forum quasi-blog which excels for more in-depth and long-form discussion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There is more to Polywork that I did not have to cover: like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;community building&lt;/li&gt;
&lt;li&gt;content discovery&lt;/li&gt;
&lt;li&gt;user and relationship discovery&lt;/li&gt;
&lt;li&gt;professional identity 2.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I want you to know that Polywork is not just for young professionals; it's for everyone, and whether you decide to use it today, tomorrow or three years or five years from now, it will become a valuable tool you will use at some point.&lt;/p&gt;

&lt;p&gt;My recommendation is if you are not yet ready to adopt, sign up and get your handle, so when you are ready, you aren't andrewbrown543242.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don't need an invite to reserve your handle, just signup at &lt;a href="https://www.polywork.com"&gt;https://www.polywork.com&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt; You want your first follower? &lt;/li&gt;
&lt;li&gt;Follow me at &lt;a href="https://www.polywork.com/andrewbrown"&gt;https://www.polywork.com/andrewbrown&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;I'll be sure to give you a follow back!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Google Calendar Events with React</title>
      <author>Nouran Samy</author>
      <pubDate>Thu, 17 Jun 2021 13:36:40 +0000</pubDate>
      <link>https://dev.to/nouran96/google-calendar-events-with-react-544g</link>
      <guid>https://dev.to/nouran96/google-calendar-events-with-react-544g</guid>
      <description>&lt;p&gt;This article will cover the topic of viewing a full calendar in your &lt;strong&gt;React&lt;/strong&gt; application and integrate with &lt;strong&gt;Google Calendar API&lt;/strong&gt; to show events from your account.&lt;/p&gt;

&lt;p&gt;First of all, we need a package that provides a full calendar UI. So we will &lt;a href="https://fullcalendar.io/docs"&gt;Full Calendar Package&lt;/a&gt;. This package is very simple and has many features as localization, different views, theme customizations and more.&lt;/p&gt;

&lt;p&gt;First steps would be to install the package in your react app and initialize an &lt;strong&gt;API_KEY&lt;/strong&gt; and &lt;strong&gt;CLIENT_ID&lt;/strong&gt; in your Google Console to use in Google Calendar APIs.&lt;/p&gt;

&lt;p&gt;In your react component, Add the scopes needed by google calendar for user authorization and showing calendar events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const SCOPES =
  "https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/calendar";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple scopes can be added separated by spaces.&lt;/p&gt;

&lt;p&gt;Second, you must add google Api script in your application on component mount like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const [events, setEvents] = useState(null);

  useEffect(() =&amp;gt; {
    const script = document.createElement("script");
    script.async = true;
    script.defer = true;
    script.src = "https://apis.google.com/js/api.js";

    document.body.appendChild(script);

    script.addEventListener("load", () =&amp;gt; {
      if (window.gapi) handleClientLoad();
    });
  }, []);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This last part ensures that the authorization popup will show only when script is fully loaded and google api is ready.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;handleClientLoad()&lt;/code&gt; function loads the Auth2 library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const handleClientLoad = () =&amp;gt; {
    window.gapi.load("client:auth2", initClient);
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Th &lt;code&gt;initClient()&lt;/code&gt; function will initialize the API client library and set up sign in state listeners.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const openSignInPopup = () =&amp;gt; {
   window.gapi.auth2.authorize(
              { client_id: CLIENT_ID, scope: SCOPES },
              (res) =&amp;gt; {
                if (res) {
                  if (res.access_token)
                    localStorage.setItem("access_token", res.access_token);

                  // Load calendar events after authentication
                  window.gapi.client.load("calendar", "v3", listUpcomingEvents);
                }
              }
            );
}  

const initClient = () =&amp;gt; {
    if (!localStorage.getItem("access_token")) {
      openSignInPopup();
    } else {
      // Get events if access token is found without sign in popup
      fetch(
     `https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}&amp;amp;orderBy=startTime&amp;amp;singleEvents=true`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        }
      )
        .then((res) =&amp;gt; {
          // Check if unauthorized status code is return open sign in popup
          if (res.status !== 401) {
            return res.json();
          } else {
            localStorage.removeItem("access_token");

            openSignInPopup();
          }
        })
        .then((data) =&amp;gt; {
          if (data?.items) {
            setEvents(formatEvents(data.items));
          }
        });
    }
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using two types of methods for fetching events, The first using the logged in &lt;code&gt;gapi.client&lt;/code&gt; instance and the other using the access_token stored.&lt;/p&gt;

&lt;p&gt;When using the &lt;code&gt;gapi.client&lt;/code&gt;, we are calling a callback function &lt;code&gt;listUpcomingEvents()&lt;/code&gt; to get the events of the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const listUpcomingEvents = () =&amp;gt; {
    window.gapi.client.calendar.events
      .list({
        // Fetch events from user's primary calendar
        calendarId: "primary",
        showDeleted: true,
        singleEvents: true,
      })
      .then(function (response) {
        let events = response.result.items;

        if (events.length &amp;gt; 0) {
          setEvents(formatEvents(events));
        }
      });
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the events, we need to format them for Full calendar package event object structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const formatEvents = (list) =&amp;gt; {
    return list.map((item) =&amp;gt; ({
      title: item.summary,
      start: item.start.dateTime || item.start.date,
      end: item.end.dateTime || item.end.date,
    }));
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are only showing title, start date and end dates but there are more options in full calendar docs.&lt;/p&gt;

&lt;p&gt;At last, we need to render the Full Calendar component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";

return (
      &amp;lt;FullCalendar
        plugins={[dayGridPlugin]}
        initialView="dayGridMonth"
        events={events}
      /&amp;gt;
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a full calendar rendering google calendar events.&lt;/p&gt;

&lt;p&gt;Hope this was a clear tutorial. Thank you and have a great day.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Neural Style Transfer in a Most Simple Way</title>
      <author>Ege Sabanci</author>
      <pubDate>Thu, 17 Jun 2021 13:26:06 +0000</pubDate>
      <link>https://dev.to/egesabanci/neural-style-transfer-in-a-most-simple-way-490k</link>
      <guid>https://dev.to/egesabanci/neural-style-transfer-in-a-most-simple-way-490k</guid>
      <description>&lt;p&gt;The Neural Style Transfer algorithm has been in a very popular position lately. If we look at the acceleration of "Deep Learning" algorithms in the last 5 years, it seems that Neural Style Transfer algorithms will maintain this popularity for a long time by improving themselves with new approaches every day. In addition to these, with the cyberpunk art understanding in NFT platforms, we have made computers draw more pictures than before, what an irony, right? 🦾&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-neural-style-transfer"&gt;
  &lt;/a&gt;
  What is "Neural Style Transfer"?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;According to Wikipedia:&lt;/strong&gt; Neural Style Transfer (NST) refers to a class of software algorithms that manipulate digital images, or videos, in order to adopt the appearance or visual style of another image. NST algorithms are characterized by their use of deep neural networks for the sake of image transformation. Common uses for NST are the creation of artificial artwork from photographs, for example by transferring the appearance of famous paintings to user-supplied photographs. Several notable mobile apps use NST techniques for this purpose, including DeepArt and Prisma. This method has been used by artists and designers around the globe to develop new artwork based on existent style(s). &lt;a href="https://en.wikipedia.org/wiki/Neural_Style_Transfer"&gt;Wikipedia Article about Neural Style Transfer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alright. Wikipedia knows what that is, so what should "we" understand about this freaking paragraph:&lt;/strong&gt; Okay okay, don't be angry. I will try to explain everything. Yes, Wikipedia knows what this is and has explained it. What "we" should understand from this, we can simply say it like this: The "Neural Style Transfer" algorithm takes 2 photos as an input, one to focus on the shapes and the other to focus on the texture of the image. Then it creates a new photo by building a synthesis of these 2 photos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-i-see-just-let-me-see-the-code"&gt;
  &lt;/a&gt;
  OK, I see! Just let me see the code.
&lt;/h2&gt;

&lt;p&gt;OK, I will let you see the code in a second but I want to give some instructions before starting. I will continue to explain the "Neural Style Transfer" implementation that I  have made (&lt;a href="https://github.com/Egesabanci/neural-style-transfer"&gt;You can access the codes from this link&lt;/a&gt;). We will continue with the codes and the mathematical background of the algorithm at the same time. So, don't be confused! Please stay on the right track, Sir!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-starting-building-the-model-microscope"&gt;
  &lt;/a&gt;
  Let's starting - Building the model! 🔬
&lt;/h2&gt;

&lt;p&gt;First, as with almost every &lt;strong&gt;Computer Vision&lt;/strong&gt; application, we will need a &lt;strong&gt;Feature Extractor&lt;/strong&gt; model to access more detailed features on our images. With the Feature Extractor model, we will parse the &lt;strong&gt;features&lt;/strong&gt; of the images we have and then make various calculations on these features. I created 3 different models at this stage. (&lt;a href="https://github.com/Egesabanci/neural-style-transfer/blob/master/src/feature_extractor.py"&gt;All Models&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When we examine the models, you should have noticed that 2 models include the pre-trained &lt;code&gt;VGG19&lt;/code&gt; model and one model was written completely from scratch. At this stage, we need to know that the pre-trained models are pre-trained with various large datasets (here we prefer the &lt;code&gt;imagenet&lt;/code&gt; dataset) and thus are better at feature separation than the models written from scratch. For these reasons, &lt;code&gt;vgg_extractor_model&lt;/code&gt; might give us the best performance here. &lt;code&gt;vgg_extractor_model&lt;/code&gt; is looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;vgg_extractor_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;vgg_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applications&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VGG19&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;include_top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="n"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"imagenet"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;style_conv_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"block&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_conv1"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="n"&gt;content_conv_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"block5_conv2"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;all_activation_layers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;style_conv_blocks&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;content_conv_block&lt;/span&gt;

  &lt;span class="n"&gt;input_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vgg_model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;
  &lt;span class="n"&gt;output_layers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vgg_model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_activation_layers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output_layers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"vgg19_extractor"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage, there is a part that I would like to draw your attention to. If you look carefully, from the &lt;code&gt;vgg_extractor_model&lt;/code&gt; we created, which contains the pre-trained &lt;code&gt;VGG19&lt;/code&gt; model, we returned only a few convolution layers, not the entire structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;style_conv_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"block&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_conv1"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;content_conv_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"block5_conv2"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;all_activation_layers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;style_conv_blocks&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;content_conv_block&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason for this is that we will only &lt;strong&gt;calculate the losses with the features processed in the convolution layers&lt;/strong&gt; within the model, not with the whole model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-step-further-calculating-the-loss-values-chartwithdownwardstrend"&gt;
  &lt;/a&gt;
  One Step Further - Calculating the loss values! 📉
&lt;/h2&gt;

&lt;p&gt;After creating our model, now it's time to calculate the loss values that we will do with the feature maps that will come from this model. There are 3 values that we need to calculate at this stage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gramian Matrix (or Gram Matrix)&lt;/li&gt;
&lt;li&gt;Style Loss&lt;/li&gt;
&lt;li&gt;Content Loss&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Gramian Matrix:&lt;/strong&gt; The Gramian Matrix is an easier calculatable form that can we use in the calculations of the matrices which are returned from convolution layers by our &lt;code&gt;vgg_extractor_model&lt;/code&gt;. We will use this form of matrix when we calculate our &lt;strong&gt;style loss&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WERV1pAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3960/1%2AHsWvX7rmUU1VlXyeWfYK_A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WERV1pAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3960/1%2AHsWvX7rmUU1VlXyeWfYK_A.png" alt="Gramian Matrix Calculation"&gt;&lt;/a&gt;&lt;br&gt;
There is the code implementation of Gramian Matrix Transformations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gram_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="s"&gt;"""Gramian matrix for calculating style loss"""&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;gram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gram&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Style Loss:&lt;/strong&gt; Style loss is simply a loss value that is calculated according to the distance between the fabric of generated image and the fabric of the input style image. Style loss is calculated between the gram matrix of generated image and the gram matrix of input style image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;style_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;style_gram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gram_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;generated_gram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gram_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;style_loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generated_gram&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;style_gram&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;style_loss&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Content Loss:&lt;/strong&gt; Content loss works similar to style loss but this time we calculate the value for the shapes between the input and generated images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;content_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="s"&gt;"""1/2 * sum of (generated - original) ** 2"""&lt;/span&gt;
  &lt;span class="n"&gt;content_loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content_loss&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;5e-1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-put-everything-together-final-step-robot"&gt;
  &lt;/a&gt;
  Let's Put Everything Together - Final step! 🤖
&lt;/h2&gt;

&lt;p&gt;After all these steps, we are finally ready to assemble everything. First of all, let me show you how the code will work in each step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;CONTENT_WEIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2e-5&lt;/span&gt;
  &lt;span class="n"&gt;STYLE_WEIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1e-4&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Loss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FeatureExtractor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_step_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content_act&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style_act&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_layers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;content_loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_act&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;content_act&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;style_loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;style_act&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;layer_loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;style_loss&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;layer_loss&lt;/span&gt;

    &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_loss&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CONTENT_WEIGHT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
           &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style_loss&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STYLE_WEIGHT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is what we do; First, we calculate the feature maps with our "feature extractor" model. Afterwards, we calculate the &lt;strong&gt;style loss&lt;/strong&gt; and &lt;strong&gt;content loss&lt;/strong&gt; values in each layer (the outputs from the convolution networks), and finally, after multiplying with the &lt;strong&gt;"Constant"&lt;/strong&gt; values we arbitrarily determined, we can start the process by determining the &lt;code&gt;epoch&lt;/code&gt; value. The "Constant" values you see at the top of the code block are the weights of the output, &lt;code&gt;we can give a higher value to whichever feature we want to be in the foreground&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;optimizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optimizers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1e-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GradientTape&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;GT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_step_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"EPOCH: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;LOSS: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"---"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;gradients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_gradients&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;gradients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, at the top you see the main training function. This function starts to process the image with the images and epoch value we have determined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-this-bigboy-in-action-runner"&gt;
  &lt;/a&gt;
  Let's See This Bigboy in Action! 🏃
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;

&lt;span class="c1"&gt;# train() function from src/train.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;train&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;

&lt;span class="c1"&gt;# feature extraction model from src/feature_extractor.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;feature_extractor&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FeatureExtractor&lt;/span&gt;

&lt;span class="c1"&gt;# all image paths
&lt;/span&gt;&lt;span class="n"&gt;BASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"./my/path/to/my/images"&lt;/span&gt;
&lt;span class="n"&gt;CONTENT_IMAGE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"my_content_image.jpeg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STYLE_IMAGE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"my_style_image.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# read your custom images 
&lt;/span&gt;&lt;span class="n"&gt;CONTENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONTENT_IMAGE_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STYLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STYLE_IMAGE_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;COMBINED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONTENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# tf.Tensor
&lt;/span&gt;
&lt;span class="c1"&gt;# define feature extractor model
&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FeatureExtractor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vgg_extractor_model&lt;/span&gt;
&lt;span class="c1"&gt;# there are three options for models (check the src/feature_extractor.py)
&lt;/span&gt;
&lt;span class="c1"&gt;# main training
&lt;/span&gt;&lt;span class="n"&gt;STYLED_IMAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONTENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STYLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;COMBINED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;epochs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;After generating and optimizing for 50 epochs. Results are here:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puOg18-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Egesabanci/neural-style-transfer/master/neural-style-transfer-process.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puOg18-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Egesabanci/neural-style-transfer/master/neural-style-transfer-process.png" alt="Final Generated Image after 50 Epochs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-thoughtballoon"&gt;
  &lt;/a&gt;
  Conclusion 💭
&lt;/h2&gt;

&lt;p&gt;Alright then! We have seen the really basic implementation and little bit of the mathematical background of "Neural Style Transfer". I have tried to keep it simple. If there is anything in your mind about the article you can reach me anytime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check the repository:&lt;/strong&gt; &lt;a href="https://github.com/Egesabanci/neural-style-transfer"&gt;Neural Style Transfer by Egesabanci&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask me anything at anytime of the day:&lt;/strong&gt; &lt;a href="mailto:egesabanci@outlook.com.tr"&gt;egesabanci@outlook.com.tr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can follow me on Github, we can collaborate in projects:&lt;/strong&gt; &lt;a href="https://github.com/Egesabanci"&gt;https://github.com/Egesabanci&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
      <category>computerscience</category>
      <category>python</category>
    </item>
    <item>
      <title>macOS themed Portfolio website</title>
      <author>Sharan Jamnani</author>
      <pubDate>Thu, 17 Jun 2021 12:49:54 +0000</pubDate>
      <link>https://dev.to/sharansrj567/macos-themed-portfolio-website-o2h</link>
      <guid>https://dev.to/sharansrj567/macos-themed-portfolio-website-o2h</guid>
      <description>&lt;p&gt;Please checkout my first ever macOS themed Portfolio website &lt;a href="https://sharansrj567.ml"&gt;https://sharansrj567.ml&lt;/a&gt;&lt;br&gt;
Explanation-&lt;br&gt;
&lt;a href="https://www.linkedin.com/posts/sharan-jamanani_macos-reactjs-webdev-activity-6810067195977187328-29Im"&gt;https://www.linkedin.com/posts/sharan-jamanani_macos-reactjs-webdev-activity-6810067195977187328-29Im&lt;/a&gt;&lt;br&gt;
Code-&lt;br&gt;
&lt;a href="https://github.com/Sharansrj567"&gt;https://github.com/Sharansrj567&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Traduisez du texte avec google translate dans votre application PHP/Laravel avec 5 lignes de codes !</title>
      <author> Eric Le Codeur</author>
      <pubDate>Thu, 17 Jun 2021 12:39:24 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/traduisez-du-texte-avec-google-translate-dans-votre-application-php-laravel-avec-5-lignes-de-codes-g8n</link>
      <guid>https://dev.to/ericlecodeur/traduisez-du-texte-avec-google-translate-dans-votre-application-php-laravel-avec-5-lignes-de-codes-g8n</guid>
      <description>&lt;p&gt;Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Salut,&lt;/p&gt;

&lt;p&gt;Voici un moyen rapide de traduire facilement du texte dans votre application php Laravel. PAS BESOIN D'AVOIR UNE CLÉ API GOOGLE !&lt;/p&gt;

&lt;p&gt;Vous devez d'abord installer le package PHP Google Translate.&lt;/p&gt;

&lt;p&gt;Vous pouvez le faire en exécutant dans votre dossier de projet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ composer require stichoza/google-translate-php 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Après l'installation, vous pouvez l'utiliser n'importe où dans votre code comme ceci.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Stichoza\GoogleTranslate\GoogleTranslate;

$tr = new GoogleTranslate(); 
$tr-&amp;gt;setSource('en'); // Translate from English
$tr-&amp;gt;setTarget('fr'); // Translate to French

echo $tr-&amp;gt;translate('Hello World!'); // Bonjour le monde!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;C'est tout ! Ça ne peut pas être plus facile que ça :-)&lt;/p&gt;

&lt;p&gt;Si vous souhaitez utiliser plus d'options comme la détection automatique de la langue, etc. Vous pouvez lire la doc : &lt;a href="https://github.com/Stichoza/google-translate-php"&gt;https://github.com/Stichoza/google-translate-php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CONCLUSION&lt;/p&gt;

&lt;p&gt;Si vous aimez ce genre de petits conseils, vous pouvez me suivre, j'en ai d'autres à venir.&lt;/p&gt;

&lt;p&gt;À plus tard...&lt;/p&gt;

</description>
      <category>french</category>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS Shorthand – Useful CSS Shorthand Properties</title>
      <author>Rezaul karim</author>
      <pubDate>Thu, 17 Jun 2021 12:22:38 +0000</pubDate>
      <link>https://dev.to/rezaulkarim/css-shorthand-useful-css-shorthand-properties-31oo</link>
      <guid>https://dev.to/rezaulkarim/css-shorthand-useful-css-shorthand-properties-31oo</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wITVt21X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623930390909/HmEQlBixw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wITVt21X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623930390909/HmEQlBixw.jpeg" alt="css shorthant.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-shorthand"&gt;
  &lt;/a&gt;
  CSS Shorthand
&lt;/h2&gt;

&lt;p&gt;CSS Shorthand properties are properties that let you set the values of multiple other CSS properties simultaneously. Using shorthand property, you can write more short and often more readable style sheets, saving time and energy.&lt;/p&gt;

&lt;p&gt;This Shorthand properties makes your code optimized and ‘SEO’ friendly. Let’s discover some useful CSS Shorthand properties :-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#01-background"&gt;
  &lt;/a&gt;
  01. Background:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
     background-color: #ddd;
     background-image: url(image.png);
     background-repeat: no-repeat;
     background-position: top left;
     background-attachment: fixed;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
      background: #ddd url(img.png) no-repeat top left fixed;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#02-font"&gt;
  &lt;/a&gt;
  02. Font
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    font-weight: bold;
    font-style: italic;
    font-variant: small-caps;
    font-size: 1em;
    line-height: 1.6;
    font-family: Arial, Helvetica, sans-serif;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
      font: bold italic small-caps 1em/1.6 Arial, sans-serif;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#03-margin"&gt;
  &lt;/a&gt;
  03. Margin
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
     margin-top: 1em;
     margin-right: 1.5em;
     margin-bottom: 2em;
     margin-left: 2.5em;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
      margin: 1em 1.5em 2em 2.5em;
  }
/* or */
.class {
      margin: 5em 3em;
  } /* up/down - 5em &amp;amp; left/right - 3em */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#04-padding"&gt;
  &lt;/a&gt;
  04. Padding
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
     padding-top: 1em;
     padding-right: 1.5em;
     padding-bottom: 2em;
     padding-left: 2.5em;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
      padding: 1em 1.5em 2em 2.5em;
  }
/* or */
.class {
      padding: 5em 3em;
  } /* up/down - 5em &amp;amp; left/right - 3em */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#05-border"&gt;
  &lt;/a&gt;
  05. Border
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
     border-width: 1px;
     border-style: solid;
     border-color: black;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
      border: 1px solid black;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#06-animation"&gt;
  &lt;/a&gt;
  06. Animation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
     animation-name: motion;
     animation-duration: 2s;
     animation-timing-function: ease-in;
     animation-delay: 1s;
     animation-direction: alternate;
     animation-iteration-count: infinite;
     animation-fill-mode: none;
     animation-play-state: running;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; .class {
      animation: motion 2s ease-in 1s alternate infinite none running;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#07-outline"&gt;
  &lt;/a&gt;
  07. Outline
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
     outline-width: thick;
     outline-style: dotted;
     outline-color: red;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; .class {
      outline: thick dotted red;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#08-transition"&gt;
  &lt;/a&gt;
  08. Transition
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    transition-property: extend;
    transition-duration: 2s;
    transition-timing-function: linear;
    transition-delay: 1s;  
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    transition: extend 2s linear 1s;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#09-textdecoration"&gt;
  &lt;/a&gt;
  09. Text-decoration
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    text-decoration-color: blue;
    text-decoration-line: underline;
    text-decoration-style: solid;
    text-decoration-thickness: 2px;  
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; .class {
    text-decoration: blue underline solid 2px;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-flex"&gt;
  &lt;/a&gt;
  10. Flex
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
     flex-grow: 1;
     flex-shrink: 1;
     flex-basis: auto;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
      flex: 1 1 auto;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-list"&gt;
  &lt;/a&gt;
  11. List
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
     list-style-type: square;
     list-style-position: inside;
     list-style-image: url("image.png");
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
      list: square inside url("image.png");
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12-columns"&gt;
  &lt;/a&gt;
  12. Columns
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    column-width: 40px;
    column-count: 4;  
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    columns: 40px 4;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#13-grid"&gt;
  &lt;/a&gt;
  13. Grid
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    grid-template-rows: 100px auto 300px;
    grid-template-columns: repeat(2, 1fr) 100px;  
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    grid: 100px auto 300px / repeat(2, 1fr) 100px;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#14-gridarea"&gt;
  &lt;/a&gt;
  14. Grid-area
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    grid-row-start: 2;
    grid-column-start: 1;
    grid-row-end: 4;
    grid-column-end: 4;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    grid-area: 2 / 1 / span 2 / span 3;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#15-gridrow"&gt;
  &lt;/a&gt;
  15. Grid-row
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    grid-row-start: 1;
    grid-row-end: 3; /* or */ 
    grid-row-end: span 2; 
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… can be shortened to just one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    grid-row: 1 / 3 ;
    /* or */
    grid-row: 1 / span 2;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#16-gridcolumn"&gt;
  &lt;/a&gt;
  16. Grid-column
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#longhand"&gt;
  &lt;/a&gt;
  Longhand:
&lt;/h4&gt;

&lt;p&gt;The following declarations …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class {
    grid-column-start: 1;
    grid-column-end: 3; /* or */
    grid-column-end: span 2;  
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shorthand"&gt;
  &lt;/a&gt;
  Shorthand:
&lt;/h4&gt;

&lt;p&gt;… shortened to just following one declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; .class {
    grid-column: 1 / 3 ;
    /* or */
    grid-column: 1 / span 2; 
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the most useful CSS Shorthand properties. You can use on your project. And Let me know if you get any help with this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrezaulkarim.com/css-shorthand-useful-css-shorthand-properties/"&gt;Read this article on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="//instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How we use GitLive: A junior developer's perspective</title>
      <author>SuDa2103</author>
      <pubDate>Thu, 17 Jun 2021 12:15:02 +0000</pubDate>
      <link>https://dev.to/gitlive/how-we-use-gitlive-a-junior-developer-s-perspective-4bkp</link>
      <guid>https://dev.to/gitlive/how-we-use-gitlive-a-junior-developer-s-perspective-4bkp</guid>
      <description>&lt;p&gt;I’m Sunny, and I’m a junior developer at GitLive. Since we are making a tool by developers, for developers, I wanted to share how I use our own product on a day to day basis.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#visibility"&gt;
  &lt;/a&gt;
  Visibility
&lt;/h4&gt;

&lt;p&gt;As an annoying and (relatively) useless junior developer, I have a lot of questions. Since we work in a fully remote team, picking my moments is both important and hard to do. GitLive helps me a lot with this. It shows me when people are online and what they’re working on. So ideally, I wait till someone’s online, working on the same repository I’m working on and on a similar issue… and then I ask away.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
        &lt;tr&gt;
            &lt;td&gt;
                &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayEPP7Pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.git.live/assets/images/posts/2020/same-repo.jpeg" alt="Screenshot of teammates' online status"&gt;
       &lt;/td&gt;
&lt;td&gt;
                &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TD9gJPFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.git.live/assets/images/posts/2020/slack-msg.jpg" alt="Screenshot of a slack conversation"&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt; 
            
              &lt;sup&gt;Both working on the firebase repository. Bingo!&lt;/sup&gt;
            
           &lt;/td&gt;
          &lt;td&gt; 
            
&lt;sup&gt;Look at that quick response time from Michael. &lt;/sup&gt;
            
           &lt;/td&gt;
        &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It's worth mentioning that in the future, messaging will be available within the GitLive window, so the context switching between instant messaging apps and code IDEs will also be eliminated.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cherry-picking"&gt;
  &lt;/a&gt;
  Cherry Picking
&lt;/h4&gt;

&lt;p&gt;Sometimes I need uncommitted code from a teammate. With GitLive, I don’t even have to ask or disturb anyone. I just use our &lt;a href="https://blog.git.live/gitlive-8-0"&gt;cherry picking&lt;/a&gt; feature to see the changes they’ve made and take whatever I need.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0f10RA6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.git.live/assets/images/posts/2020/cherry-pick.jpg" alt="Screenshot of uncommited changes in the editor"&gt;
  &lt;/tr&gt;
  &lt;tr&gt; 
    
      &lt;sup&gt; Thanks for this big chunk of code Fred!&lt;/sup&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#pair-programming"&gt;
  &lt;/a&gt;
  Pair Programming
&lt;/h4&gt;

&lt;p&gt;GitLive’s most useful feature for me, personally, is the &lt;a href="https://blog.git.live/real-time-editing"&gt;collaborate feature&lt;/a&gt; I’m trying to learn more about TypeScript. Pair programming with someone more experienced is a great way to do this. But pair programming remotely is a challenge… or at least it used to be. With GitLive, I can collaborate with one click, and no one has to begin a slack call and start screen sharing. &lt;/p&gt;

&lt;p&gt;The convenience means that others don’t mind starting a quick collaboration session. It’s often easier than a long explanation, for both parties. In future releases, audio calls will be added to GitLive, so everything can be done within the IDE if necessary. Fred and Michael will soon be able to hear my lovely voice without even having to leave VS Code. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5QKNVGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.git.live/assets/images/posts/2020/baby-pic.jpeg"&gt;
  &lt;/tr&gt;
  &lt;tr&gt; 
    
     &lt;sup&gt; How pair programming feels for the less experienced person... &lt;/sup&gt;
    
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#privacy"&gt;
  &lt;/a&gt;
  Privacy
&lt;/h4&gt;

&lt;p&gt;Have you ever been so embarrassed by the code you’re writing to solve a problem that you don’t want your colleagues to see? Me too. Luckily GitLive has a setting for this, so I can hide my working copy changes just in case. &lt;/p&gt;

&lt;p&gt;Also, if you’re working on something important and don’t want to be disturbed, you can appear offline, or hide your activity graph from view. I’m usually the one bothering people, not the one being bothered, so this is not a problem I have myself, but a useful feature for some of you nonetheless (maybe for you Michael). &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hqDM-S2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.git.live/assets/images/posts/2020/offline-mode.jpg"&gt;
  &lt;/tr&gt;
  &lt;tr&gt; 
    
     &lt;sup&gt; I don't have a good caption for this one. Please enjoy this screenshot! &lt;/sup&gt;
    
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;If you’re a tech lead reading this (ambitious I know – but one can dream) and you’re on the fence about whether to use GitLive, at least give it a try. From my experience, having a communication tool specific to developers makes the life of your team members (especially the juniors) much easier. &lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>JavaScript API Automation Testing Course</title>
      <author>Automation Bro</author>
      <pubDate>Thu, 17 Jun 2021 12:09:30 +0000</pubDate>
      <link>https://dev.to/automationbro/javascript-api-automation-testing-course-4nmf</link>
      <guid>https://dev.to/automationbro/javascript-api-automation-testing-course-4nmf</guid>
      <description>&lt;p&gt;How to do API Automation Testing using Javascript with Supertest &amp;amp; Mocha? In this course, I’ll walk you through step-by-step to get your Javascript API Automation framework ready.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yuRCVJAuhfA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-will-be-covering-the-following-topics"&gt;
  &lt;/a&gt;
  We will be covering the following topics:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What technologies we will be using for API testing&lt;/li&gt;
&lt;li&gt;Installation / Configuration&lt;/li&gt;
&lt;li&gt;Write API automation tests with Javascript using Mocha, Chai JS, and SuperTest HTTP Library&lt;/li&gt;
&lt;li&gt;Scale API automation test framework

&lt;ul&gt;
&lt;li&gt;Learn how hooks work and when to use it&lt;/li&gt;
&lt;li&gt;Write some negative tests to increase our test coverage&lt;/li&gt;
&lt;li&gt;Generate fake test data to make tests more dynamic&lt;/li&gt;
&lt;li&gt;Generate HTML reports using Mochawesome reporter&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integrate tests with Jenkins&lt;/li&gt;
&lt;li&gt;and a lot more exciting stuff…&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this as well as free access to Private Facebook community&lt;/p&gt;

&lt;p&gt;👍 You can follow my content here as well - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/automationbro"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/automation-bro"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Bringing Back the 90s with the Wicked Coolkit</title>
      <author>Tyler Hawkins</author>
      <pubDate>Thu, 17 Jun 2021 12:06:25 +0000</pubDate>
      <link>https://dev.to/thawkin3/bringing-back-the-90s-with-the-wicked-coolkit-560j</link>
      <guid>https://dev.to/thawkin3/bringing-back-the-90s-with-the-wicked-coolkit-560j</guid>
      <description>&lt;p&gt;Remember the 90s? Pokémon, Beanie Babies, Crazy Bones, Super Nintendo, Pogs, and neon windbreakers… Those were the good old days. The web was a simpler place too, with barebones websites composed of mostly text and hyperlinks. I remember it like it was yesterday. Or, wait — 30 years ago?&lt;/p&gt;

&lt;p&gt;I recently found &lt;a href="https://wickedcoolkit.com/"&gt;Wicked Coolkit&lt;/a&gt; — a nifty retro-themed toolkit — and I thought it would be fun to play around with it to briefly relive those years. The toolkit includes a hit counter, webrings, and developer trading cards.&lt;/p&gt;

&lt;p&gt;If you’re feeling nostalgic too, let’s explore some web development trends from the 90s by exploring Wicked Coolkit, just for kicks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hit-counters"&gt;
  &lt;/a&gt;
  Hit Counters
&lt;/h2&gt;

&lt;p&gt;Before software like Google Analytics, &lt;a href="https://en.wikipedia.org/wiki/Web_counter"&gt;hit counters&lt;/a&gt; were a fun way to track your site’s popularity while also flaunting your success (or lack thereof) to everyone who visited your site. Hit counters were usually clunky widgets that simply displayed a number that incremented after every page load. Now that website analytics software is readily available and affordable, hit counters have almost entirely disappeared from the modern web. But that doesn’t mean we can’t make one just for fun!&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://wickedcoolkit.com/"&gt;Wicked Coolkit&lt;/a&gt; setup for hit counters requires you to deploy a Heroku app and create a Salesforce developer account, both of which have free tiers that I used. Once the app is up and running, it handles the backend server keeping track of your website’s hits. After that, it’s as simple as including on your site a code snippet that contains a &lt;code&gt;script&lt;/code&gt; tag and a custom web component for the hit counter.&lt;/p&gt;

&lt;p&gt;The code snippet looks like this, though the &lt;code&gt;host&lt;/code&gt; attribute will be different for your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/wicked-coolkit@^1.1.2/dist/hitCounter.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;wck-hit-counter&lt;/span&gt; &lt;span class="na"&gt;host=&lt;/span&gt;&lt;span class="s"&gt;"tyler-wicked-coolkit.herokuapp.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/wck-hit-counter&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s my hit counter that I added to an HTML5 game I built called &lt;a href="http://tylerhawkins.info/stacks-on-stacks-on-stacks-2/"&gt;Stacks on Stacks on Stacks&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EJVlxbXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zxh26cysn9w2s8ttbv3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EJVlxbXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zxh26cysn9w2s8ttbv3.png" alt="Stacks on Stacks on Stacks HTML5 game, now with a hit counter"&gt;&lt;/a&gt;&lt;/p&gt;
Stacks on Stacks on Stacks HTML5 game, now with a hit counter






&lt;h2&gt;
  &lt;a href="#webring"&gt;
  &lt;/a&gt;
  Webring
&lt;/h2&gt;

&lt;p&gt;Now that we have a hit counter in place, let’s make a webring! &lt;a href="https://en.wikipedia.org/wiki/Webring"&gt;Webrings&lt;/a&gt; were another concept popular in the 90s that linked together a group of sites. These sites would form a chain or a ring of curated content and allowed users to explore cool new sites they probably never would have found on their own. Webrings were a neat way to stumble upon new pages back before the days of recommendation engines, social media, and customized news feeds.&lt;/p&gt;

&lt;p&gt;The Wicked Coolkit provides us with another handy code snippet to include on any website that wants to participate in the webring. It looks like this, again with a &lt;code&gt;script&lt;/code&gt; tag and a web component, with the &lt;code&gt;host&lt;/code&gt; attribute being unique to my app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/wicked-coolkit@^1.1.2/dist/webring.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;wck-webring&lt;/span&gt; &lt;span class="na"&gt;host=&lt;/span&gt;&lt;span class="s"&gt;"tyler-wicked-coolkit.herokuapp.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/wck-webring&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The list of sites is managed in Salesforce for an added measure of security and to prevent any old site from being included in the webring. This allows you, the administrator, to fully control what sites you want to showcase in your webring.&lt;/p&gt;

&lt;p&gt;I created my own webring and recruited a few friends to participate. For some fun apps, you can &lt;a href="http://tylerhawkins.info/BubbleBall2/"&gt;find our webring here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ngZmvGgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z1dpyix10j8aatfhdls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ngZmvGgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z1dpyix10j8aatfhdls.png" alt="Bubble Ball HTML5 game, now part of the webring"&gt;&lt;/a&gt;&lt;/p&gt;
Bubble Ball HTML5 game, now part of the webring






&lt;h2&gt;
  &lt;a href="#developer-trading-card"&gt;
  &lt;/a&gt;
  Developer Trading Card
&lt;/h2&gt;

&lt;p&gt;Finally, we would be remiss if we didn’t talk about the 90s trading card phase. Who among us didn’t have beloved Pokémon, Digimon, Yu-Gi-Oh!, Magic: The Gathering, or sports cards? Wouldn’t you like to be on a trading card yourself? Well, now you can with Wicked Coolkit’s developer trading cards. You can build your own and manage the content with the same Heroku and Salesforce app you used for the hit counter and webring.&lt;/p&gt;

&lt;p&gt;Here’s what &lt;a href="https://tyler-wicked-coolkit.herokuapp.com/"&gt;my developer trading card&lt;/a&gt; looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-mkifhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnuxzjosnbwxu6f4yrab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-mkifhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnuxzjosnbwxu6f4yrab.png" alt="Personalized developer trading card"&gt;&lt;/a&gt;&lt;/p&gt;
Personalized developer trading card



&lt;p&gt;Clicking on the various stickers takes you to another person’s trading card, giving you a unique opportunity to connect with other developers with similar interests.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Well, that’s it for now. The 90s were a long time ago, but it was fun to reminisce. History tends to repeat itself, so who knows? Maybe one day some of these retro trends will make a comeback.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>heroku</category>
      <category>salesforce</category>
    </item>
    <item>
      <title>Day 29/30 : Awesome CSS Card Hover Effects Using HTML and CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Thu, 17 Jun 2021 12:01:53 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/day-29-30-awesome-css-card-hover-effects-using-html-and-css-2hdd</link>
      <guid>https://dev.to/somanathgoudar/day-29-30-awesome-css-card-hover-effects-using-html-and-css-2hdd</guid>
      <description>&lt;p&gt;Welcome to Day 29 of this &lt;a href="https://dev.to/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1"&gt;Challenge&lt;/a&gt;. This is what I created today. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Here is the Demo :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDvOdMkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-Ub1l5kGcRr4/YKom3l5GSgI/AAAAAAAAAJA/Y2UJUgqhbAIfYkjf7FDfPWcMlSUdxTOqQCLcBGAsYHQ/s600/p29.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDvOdMkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-Ub1l5kGcRr4/YKom3l5GSgI/AAAAAAAAAJA/Y2UJUgqhbAIfYkjf7FDfPWcMlSUdxTOqQCLcBGAsYHQ/s600/p29.gif" alt="Awesome CSS Card Hover Effects Using HTML and CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Video Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/htGvFqVmkUQ"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;strong&gt;➜ Source Code :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.futurecodersweb.com/2021/06/awesome-card-hover-effects-using-html.html"&gt;https://www.futurecodersweb.com/2021/06/awesome-card-hover-effects-using-html.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Instagram Post and Reel for Day 29 :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/future_coderss/"&gt;See Post and Reel&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Hey, If You don't know what is happening here. Don't Worry, I am doing a crazy challenge 😅. Read More about it from the post below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤯 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE 🤯&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Support Me :&lt;/strong&gt;&lt;br&gt;
👉 Buy me a Coffee: &lt;a href="https://www.buymeacoffee.com/somanathgoudar"&gt;https://www.buymeacoffee.com/somanathgoudar&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/somanath_goudar/"&gt;Follow Me on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/future_coderss/"&gt;Follow Future Coders on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe to My Main Channel&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UCzGSyMOf2jPt1MkNBB3SJ3g"&gt;Subscribe to Channel Created for this Challenge&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Javascript Interview Questions - Entry Level</title>
      <author>Sonu Jha</author>
      <pubDate>Thu, 17 Jun 2021 11:55:09 +0000</pubDate>
      <link>https://dev.to/skj4ua/javascript-interview-questions-entry-level-33np</link>
      <guid>https://dev.to/skj4ua/javascript-interview-questions-entry-level-33np</guid>
      <description>&lt;p&gt;Everyday i will be sharing few Javascript Interview Questions to help you understand the languauge even better.&lt;/p&gt;

&lt;p&gt;So lets get started with basic questions that are asked in the interview.&lt;/p&gt;

&lt;p&gt;1&amp;gt; what is typeOf operator ?&lt;br&gt;
Ans.  typeOf operator examines the value and tells you what type the value is.&lt;/p&gt;

&lt;p&gt;Ex: var a =14;&lt;br&gt;
typeof(a); //returns Number.&lt;/p&gt;

&lt;p&gt;2&amp;gt; What is object type ?&lt;/p&gt;

&lt;p&gt;Ans. An object type is nothing but a collection of properties with name and value pair.&lt;/p&gt;

&lt;p&gt;Ex: var obj = {&lt;br&gt;
        a : "Hello",&lt;br&gt;
        b : 45&lt;br&gt;
}&lt;br&gt;
obj.a //"Hello" accessed with doted notation&lt;br&gt;
obj.b //45&lt;/p&gt;

&lt;p&gt;obj["a"]  //"Hello "accessed with bracket notation&lt;br&gt;
obj["b"]  //45&lt;/p&gt;

&lt;p&gt;Bracket notation is also helpful if you want to access a property/key but the name is stored in an another variable, such as:&lt;/p&gt;

&lt;p&gt;obj b= "a"&lt;/p&gt;

&lt;p&gt;obj[b]   //"Hello"&lt;br&gt;
obj["b"] //45&lt;/p&gt;

&lt;p&gt;3&amp;gt; Explain array in javascript.&lt;/p&gt;

&lt;p&gt;Ans. An array is an object that holds value(of any type) not particularly in named properties/key, but rather in numerically indexed positions. &lt;/p&gt;

&lt;p&gt;var arr = ["hello", 1 , true]&lt;br&gt;
arr[0] // "hello&lt;br&gt;
arr[1] // 1&lt;br&gt;
arr[2] // true&lt;/p&gt;

&lt;p&gt;typeof(arr) // "object"&lt;/p&gt;

&lt;p&gt;4&amp;gt; what is scope in javascript ?&lt;/p&gt;

&lt;p&gt;Ans. Each Function gets its own scope. So Scope is basically a collection of variables as well as the rules for how those variables are accessed by names.&lt;br&gt;
only code inside that function can access the function's scoped variable.&lt;/p&gt;

&lt;p&gt;5&amp;gt; Explain equality in javascript.&lt;br&gt;
Ans. Javascript have both strict and type-converting comparions:&lt;/p&gt;

&lt;p&gt;strict comparison (eg === checks for value equality without coercion)&lt;br&gt;
Abstract comparison (eg == checks for value with coercion allowed)&lt;/p&gt;

&lt;p&gt;Ex:&lt;br&gt;
var a = "42"&lt;br&gt;
var b = 42&lt;/p&gt;

&lt;p&gt;a === b // false&lt;br&gt;
a == b  // true&lt;/p&gt;

&lt;p&gt;6&amp;gt; what is let keyword in javascript ?&lt;/p&gt;

&lt;p&gt;Ans. Es6 lets you declare variable within the individual blocks (pairs of {...}) using the let keyword.&lt;/p&gt;

&lt;p&gt;let will not let you declare same variable within the same scope whereas var will simply replace it.&lt;/p&gt;

&lt;p&gt;Self Study : Try to understand temporal dead zone, Hoisting &lt;/p&gt;

&lt;p&gt;7&amp;gt; Explain null and undefined.&lt;/p&gt;

&lt;p&gt;Ans. null means that it is Currently unavilable.&lt;br&gt;
     undefined means it hasnt been initialized.&lt;/p&gt;

&lt;p&gt;8&amp;gt; What is Strict Mode ?&lt;/p&gt;

&lt;p&gt;Ans. Strict Mode is a new Feature in ECS5 that allows you to place a program or a function in a "Strict" operating context. Strict context prevents from certain action to be taken and throws more exceptions.&lt;/p&gt;

&lt;p&gt;Ex. function(){&lt;br&gt;
    "use Strict"&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;9&amp;gt; what is a polyfill ?&lt;/p&gt;

&lt;p&gt;Ans. Polyfil is  a piece of code or a plugin that allows the functionality that works on modern browser to also work on older browsers.&lt;/p&gt;

&lt;p&gt;10&amp;gt; Explain event bubbling and how one may prevent it.&lt;/p&gt;

&lt;p&gt;Ans. Event Bubbling is the concept in which an event triggers at the deepest possible element and trigers on parent elements in nesting order. &lt;/p&gt;

&lt;p&gt;one way to handle event bubbling is event.stopPropgation()&lt;/p&gt;

&lt;p&gt;11&amp;gt; what does "use strict" do ?&lt;/p&gt;

&lt;p&gt;Ans "use strict" is written at a top of a function or a program that helps you write a safer code and throws error if a global variable is created by mistake.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
