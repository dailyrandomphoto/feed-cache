<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Sentiment analysis in a ASP.NET web application with ML.NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Thu, 07 Oct 2021 16:49:14 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/sentiment-analysis-in-a-asp-net-web-application-with-ml-net-3kk9</link>
      <guid>https://dev.to/esdanielgomez/sentiment-analysis-in-a-asp-net-web-application-with-ml-net-3kk9</guid>
      <description>&lt;p&gt;Hey, there! It's a pleasure to greet you. In this tutorial article, we will learn step by step to generate a custom Machine Learning model from ML.NET for sentiment analysis in text, and then learn to consume that model from a web application on ASP.NET with the MVVM pattern (Model, View, VistaModel).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mlnet-and-how-does-it-work"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is ML.NET and how does it work?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;ML.NET is an open source Machine Learning platform that allows us to transform input data into an ML model, and then be able to integrate it into any type of application on the .NET ecosystem, whether web, mobile, desktop, or any other type of application.  &lt;/p&gt;

&lt;p&gt;These are the types of models that we can generate in ML.NET:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Model type&lt;/th&gt;
&lt;th&gt;Objective&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Classification/Categorization&lt;/td&gt;
&lt;td&gt;Automatically divide customer reviews into positive and negative categories.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regression/Prediction of continuous values&lt;/td&gt;
&lt;td&gt;Predict the price of homes based on size and location.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anomaly detection.&lt;/td&gt;
&lt;td&gt;Detect fraudulent banking transactions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recommendations&lt;/td&gt;
&lt;td&gt;Suggest products that online shoppers want to buy, based on their previous purchases.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Time series/sequential data&lt;/td&gt;
&lt;td&gt;Forecast weather/sales.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Classification of images&lt;/td&gt;
&lt;td&gt;Categorize pathologies in medical images.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In our case we will focus on the classification/categorization of text comments. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-sentiment-analysis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Text sentiment analysis&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For sentiment analysis, the intention is to be able to classify text entries into two groups: positive comments (1) and negative comments (0). &lt;/p&gt;

&lt;p&gt;To achieve this goal, we will perform three &lt;br&gt;
activities in this article: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Meet the necessary requirements and prepare our solution in Visual Studio. &lt;/li&gt;
&lt;li&gt;2. Create our Machine Learning model with ML.NET. &lt;/li&gt;
&lt;li&gt;3. Consume the model generated from ASP.NET. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this mentioned, let's get started! &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-1-prerequisites-and-solution-preparation-in-visual-studio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 1: Prerequisites and Solution Preparation in Visual Studio&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In order to generate our Machine Learning model, we will use the Model Builder interpreter of ML.NET. For this, we need to have the following workload in Visual Studio (.NET Cross-Platform Development):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bpWseKSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av5w0cfcd4n4m8e52pey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpWseKSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av5w0cfcd4n4m8e52pey.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this workload, we can now create our solution. In this case, the intention is to consume the ML model that we are going to generate from a web application, for this purpose we will use the DotVVM framework that allows us to work with HTML pages and C# classes on ASP.NET with the MVVM pattern (Model, View, ModelView).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qG55JHd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csglgk3be7fkmto8m4ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qG55JHd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csglgk3be7fkmto8m4ae.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-2-building-the-machine-learning-model"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 2: Building the Machine Learning Model&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It's time to see ML.NET in action! As in any other process in the world of Machine Learning to generate a model, the steps to build the sentiment analysis model are as follows: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set the ML scenario.&lt;/li&gt;
&lt;li&gt;Prepare the environment for data training. &lt;/li&gt;
&lt;li&gt;Load the dataset. &lt;/li&gt;
&lt;li&gt;Train the model.&lt;/li&gt;
&lt;li&gt;Evaluate the model. &lt;/li&gt;
&lt;li&gt;Consume the model. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To begin with, in the main project of our solution we will add a component of type Machine Learning:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77sKxg8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sves3lt3cmdqayrk7aht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77sKxg8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sves3lt3cmdqayrk7aht.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this option, the ML.NET Model Builder interpreter will be initialized and we can start customizing the model. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first step is to select the scenario with which we want to work, in this case it will be &lt;em&gt;Text classification&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yv8C2R2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c230u7rzvksroy41dyyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yv8C2R2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c230u7rzvksroy41dyyf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Environment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, we must select the computing resources for the training of our model. For text classification in particular we can only use the CPU of our computer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x24jXR_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1casjjksgqvpeh2qnlcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x24jXR_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1casjjksgqvpeh2qnlcg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data source:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is one of the most important parts, since with the data we can customize our model. To do this we can select two types of sources, either by making a connection and at the same time a query to a SQL Server database, or by means of a CSV file. &lt;/p&gt;

&lt;p&gt;In this case we will use a CSV file with two columns, the first with the text in question, and the second column with the type of comment (0 negative – 1 positive). &lt;/p&gt;

&lt;p&gt;Here's an example of a dataset: &lt;a href="https://raw.githubusercontent.com/dotnet/machinelearning/main/test/data/wikipedia-detox-250-line-data.tsv"&gt;wikipedia-detox-250-line-data.tsv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By loading it we can have a preview of the data, and select the column that we want to predict later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9a32mAha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzlnggkbm4sjdouzmzrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9a32mAha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzlnggkbm4sjdouzmzrk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Training:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With everything we have already established so far, we can already perform the training process, and finally generate the desired model. In this section the only thing we can customize is the maximum time in which ML.NET can search for the ideal model for text classification. &lt;/p&gt;

&lt;p&gt;At the end of the training process we can visualize how many models ML.NET evaluated, and the accuracy of the best model found.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDUCzv2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o9sbvj0ka03fm4r6psl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDUCzv2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o9sbvj0ka03fm4r6psl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Evaluation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Up to this point we already have the model established, anyway, from the Model Builder of ML.NET we can evaluate the model with a particular example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N1nQI8qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0mtlcggcy60h6jt7jms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1nQI8qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0mtlcggcy60h6jt7jms.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consume:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, the interpreter will give us options to consume the created model, either by creating other projects (by console or with a web api), or indicating the calls we must make from our own application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nqZorx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6zeoumqahcul755cg25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nqZorx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6zeoumqahcul755cg25.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we can already consume the model from our web application with DotVVM on ASP.NET with the new generated package: &lt;code&gt;MLModel.mbconfig&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-2-consume-the-generated-model-from-aspnet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 2: Consume the generated model from ASP.NET&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To consume the model we must refer to the MLModel class, which was generated by ML.NET in the group &lt;code&gt;MLModel.mbconfig&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_klDcot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kco3jipwhgpnx0lgdbw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_klDcot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kco3jipwhgpnx0lgdbw0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this sense, it is necessary to establish an instance of ModelInput with the comment we want to predict, and then call the Predict method, and obtain an object of type ModelOutput with the corresponding prediction (1 positive, 0 negative), and its probability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ViewModel:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this purpose, and to be able to establish a web page with DotVVM, in a ViewModel, in this case the &lt;code&gt;DefaultViewModel.cs&lt;/code&gt;, we will define three attributes or global variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;InputText&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These variables will allow us to store the text entered by the user in &lt;code&gt;InputText&lt;/code&gt;, and represent the results of the prediction in the attributes &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Score&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we can set a method in this class, in such a way that it represents the action of a button to make the prediction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sampleData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MLModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ModelInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Col0&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InputText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;//Load model and predict output&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MLModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampleData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prediction&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Negative."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Positive."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Score&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prediction&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code we have three important parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialize an &lt;code&gt;MLModel.ModelInput&lt;/code&gt; with the comment entered by the user. &lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;MLModel.Predict&lt;/code&gt; with the &lt;code&gt;ModelInput&lt;/code&gt; as a parameter, thus obtaining the &lt;code&gt;ModelOutput&lt;/code&gt; with the results.&lt;/li&gt;
&lt;li&gt;Prepare the &lt;code&gt;Result&lt;/code&gt; to visualize the result later (positive or negative), and its accuracy in the prediction. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;View:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Very well, we can now construct the view by referencing the attributes and method created in the &lt;code&gt;ViewModel&lt;/code&gt;. This view will be encoded in the file &lt;code&gt;Default.dothtml&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;dot:TextBox&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"{value: InputText}"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Write your text..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;dot:Button&lt;/span&gt; &lt;span class="na"&gt;Click=&lt;/span&gt;&lt;span class="s"&gt;"{command: Predict()}"&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"Predict"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{value: Result}}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; {{value: Score}}
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the most important thing is the &lt;code&gt;TextBox&lt;/code&gt; control for the user to enter their comment and store it in the &lt;code&gt;InputText&lt;/code&gt; attribute, the call to the &lt;code&gt;Predict()&lt;/code&gt; method with a &lt;code&gt;Button&lt;/code&gt;, and the display of the results by displaying the values of the variables &lt;code&gt;Result&lt;/code&gt;, and &lt;code&gt;Score&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples running:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;With this &lt;em&gt;View&lt;/em&gt;, and its &lt;em&gt;ViewModel&lt;/em&gt;, our website is ready. Here we can see two examples at runtime:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xd7FoHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdebrfw1gh5kkqdjawg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xd7FoHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdebrfw1gh5kkqdjawg3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hOSC-1QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxpao6rn0gevgd5he39p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOSC-1QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxpao6rn0gevgd5he39p.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code for this demo is available in this GitHub repository: &lt;a href="https://github.com/esdanielgomez/MLNET_SentimentAnalysis"&gt;github.com/esdanielgomez/MLNET_SentimentAnalysis&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thank you!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Thank you very much for reading, I hope this demo can be useful to you. If you have any questions or ideas that you need to discuss, it will be a pleasure to be able to collaborate and together exchange knowledge with each other.&lt;/p&gt;

&lt;p&gt;See you at &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! Or if you like you can also write to me by &lt;a href="https://www.facebook.com/esDanielGomez"&gt;Facebook&lt;/a&gt; or by mail: &lt;a href="mailto:daniel@esdanielgomez.com"&gt;daniel@esdanielgomez.com&lt;/a&gt;. :=)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Good first issues for Hacktoberfest</title>
      <author>Oliver Juhl</author>
      <pubDate>Thu, 07 Oct 2021 16:37:14 +0000</pubDate>
      <link>https://dev.to/medusajs/good-first-issues-for-hacktoberfest-1c68</link>
      <guid>https://dev.to/medusajs/good-first-issues-for-hacktoberfest-1c68</guid>
      <description>&lt;p&gt;As mentioned in our &lt;a href="https://dev.to/medusajs/medusa-hacktoberfest-2021-13eb"&gt;previous article&lt;/a&gt;, &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; is participating in Hacktoberfest for the first time this year and the excitement is high. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h4&gt;

&lt;p&gt;There are loads of issues out there for developers to pick up, but it's not always easy to figure out where to start. We've made a series of good first issues that includes both a video tutorial and a checklist, such that you can easily get started building in public.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api-fixture-generation"&gt;
  &lt;/a&gt;
  API fixture generation
&lt;/h4&gt;

&lt;p&gt;The issues chosen for the series deal with API fixture generation. Currently, our fixtures are all stored within the same file, which is suboptimal due to 1) loading large files on the client (our API reference) is bad for performance and user experience and 2) referencing a single fixture in such a large file requires us to look for a &lt;em&gt;needle in a haystack&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;The goal is to split each fixture into their own dedicated file making them lightweight and easy to reference.&lt;/p&gt;

&lt;p&gt;The issues can be found filtering on label &lt;code&gt;api-fixture&lt;/code&gt;, or use &lt;a href="https://github.com/medusajs/medusa/issues?q=is%3Aopen+is%3Aissue+label%3Aapi-fixture"&gt;this link&lt;/a&gt; for easy access.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#howto"&gt;
  &lt;/a&gt;
  How-to
&lt;/h4&gt;

&lt;p&gt;To easily get started use the following checklist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;checkout &lt;code&gt;docs/api&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;branch out to &lt;code&gt;docs/api-[ns]-[endpoint]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if necessary clear dist and run &lt;code&gt;yarn bootstrap&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cd &lt;code&gt;integration-tests/docs&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn &amp;amp;&amp;amp; yarn build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;medusa-dev --scan-once&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;__tests__/[ns].js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Import from &lt;code&gt;../test-input/[ns]/[endpoint]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add test to the &lt;code&gt;toTest&lt;/code&gt; array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn test --watch __tests__/[ns].js -t [operationId]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make changes&lt;/li&gt;
&lt;li&gt;Make sure that snapshots are correctly defined so that tests pass across two runs&lt;/li&gt;
&lt;li&gt;Only add the fixtures and test changes related to your generated fixtures&lt;/li&gt;
&lt;li&gt;Push and open PR against &lt;code&gt;docs/api&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, you can watch &lt;a href="https://www.loom.com/share/230b0c3ec59144bebbfa7029d31fd1fb"&gt;this video tutorial&lt;/a&gt; &lt;br&gt;
explaining the hows and whys narrated by co-founder Sebastian.&lt;/p&gt;

&lt;p&gt;If you encounter issues, reach out to the community on &lt;a href="https://discord.gg/MvfArDW6f4"&gt;Discord&lt;/a&gt; or submit them to our &lt;a href="https://github.com/medusajs/medusa"&gt;Github&lt;/a&gt; issue board.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>How to Scale Engineering Processes w/ Twitter’s VP of Engineering </title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 07 Oct 2021 16:32:33 +0000</pubDate>
      <link>https://dev.to/linearb/how-to-scale-engineering-processes-w-twitter-s-vp-of-engineering-bfk</link>
      <guid>https://dev.to/linearb/how-to-scale-engineering-processes-w-twitter-s-vp-of-engineering-bfk</guid>
      <description>&lt;p&gt;Maria Gutierrez is the VP of Engineering for Strategy and Operations at Twitter. She joins a special livestream of the Dev Interrupted podcast to share her career journey, her strategies for sustainably scaling engineering teams and the three pillars of engineering processes.&lt;/p&gt;

&lt;p&gt;In a first for the Dev Interrupted podcast, Dan Lines hosted this episode live in front of a virtual audience during the INTERACT engineering leadership conference. Maria was a fantastic guest, sticking around after her interview with Dan to take questions from the audience. Her lessons on team management, building company culture, hiring and mentorship are not to be missed!&lt;/p&gt;

&lt;p&gt;Maria has also been working and managing engineering teams remotely for over a decade and offers a great deal of practical advice for team leads everywhere.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5jALAzAYQdqqALlJMLfwyI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maria’s career path to Twitter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to successfully scale engineering teams&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why processes matter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The importance of mentorship&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Q&amp;amp;A panel where Maria takes questions from a live audience&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 1800 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuFZcsxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AreErCw5Vnk3QvnAL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuFZcsxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AreErCw5Vnk3QvnAL.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/how-to-scale-engineering-processes-w-twitters-vp-of-engineering/"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>podcast</category>
      <category>womenintech</category>
      <category>twitter</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 39, OOP-Constructor __init__</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 07 Oct 2021 16:29:09 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-38-oop-constructor-init-2lhj</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-38-oop-constructor-init-2lhj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-check-out-class-constructors-in-python"&gt;
  &lt;/a&gt;
  Today let us check out class constructors in Python
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#constructors-in-python"&gt;
  &lt;/a&gt;
  Constructors in Python
&lt;/h3&gt;

&lt;p&gt;Constructors are class methods which are used to set the class parameters a the time of instantiation. These methods are run automatically when the class is instantiated. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The task of constructors is to initialize(assign values) to the data members of the class when an object of class is created. A constructor can optionally accept arguments as well, just like a regular function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h4&gt;

&lt;p&gt;The constructor is created by the &lt;code&gt;__init__&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Class instantiated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Class instantiated
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Forgetting to write the &lt;code&gt;self&lt;/code&gt; keyword will geneate error&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Class instantiated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 5, in &amp;lt;module&amp;gt;
    mysample=sample()
TypeError: __init__() takes 0 positional arguments but 1 was given

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The &lt;code&gt;__init__&lt;/code&gt; method runs once class is instantiated. &lt;br&gt;
It can be called from outsoide the class too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Class instantiated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Class instantiated
Class instantiated
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Moreover, it can be called by other methods inside the class.&lt;br&gt;
Here is example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Class instantiated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"inside a function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Class instantiated
Class instantiated
inside a function

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#every-class-has-a-constructor"&gt;
  &lt;/a&gt;
  Every class has a constructor
&lt;/h4&gt;

&lt;p&gt;But yesterday, when we created a class, we did not use any constructors right? Then is the above statement false?&lt;br&gt;
No. When we do not specify a constructor in a class, a default constructor is generated automatically. This is called the default constructor. When we write a constructor by our own, the default constructor is not generated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Remember this&lt;/strong&gt; When you create a class without a constructor, Python automatically creates a default constructor for you that doesn't do anything. Every class must have a constructor, even if it simply relies on the default constructor.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#destructors-in-python"&gt;
  &lt;/a&gt;
  Destructors in Python.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The users call Destructor for destroying the object. In Python, developers might not need destructors as much it is needed in the C++ language. This is because Python has a garbage collector whose function is handling memory management automatically. The &lt;code&gt;__del__()&lt;/code&gt; function is used as the destructor function in Python. The user can call the &lt;code&gt;__del__()&lt;/code&gt; function when all the references of the object have been deleted, and it becomes garbage collected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;__del__&lt;/code&gt; is pretty much similar to &lt;code&gt;__init__&lt;/code&gt; More about it &lt;a href="https://www.studytonight.com/python/destructors-in-python"&gt;here&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#parametrized-constructors"&gt;
  &lt;/a&gt;
  Parametrized constructors
&lt;/h3&gt;

&lt;p&gt;We can pass parameters to the constructors which set the values of the class 'variables'&lt;/p&gt;

&lt;p&gt;Let us see a modification of yesterday's program now using the &lt;code&gt;__init__&lt;/code&gt; constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_tax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#multiple-constructors"&gt;
  &lt;/a&gt;
  Multiple constructors.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Python does not support explicit multiple constructors, yet there are some ways using which the multiple constructors can be achieved. If multiple &lt;code&gt;__init__&lt;/code&gt; methods are written for the same class, then the latest one overwrites all the previous constructors&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_tax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 13, in &amp;lt;module&amp;gt;
    mysample=sample(200)
TypeError: __init__() missing 1 required positional argument: 'rate'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;One way to use multiple constructors is using &lt;code&gt;*args&lt;/code&gt; But that's not for today....&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Python natively does not support function overloading - having multiple functions with the same name.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;So friends that was all for today! Let us understand how inheritance is implemented in Python tomorrow.&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>oop</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Trigger a Kubernetes HPA with Prometheus metrics</title>
      <author>David de Torres</author>
      <pubDate>Thu, 07 Oct 2021 16:18:33 +0000</pubDate>
      <link>https://dev.to/daviddetorres/trigger-a-kubernetes-hpa-with-prometheus-metrics-43im</link>
      <guid>https://dev.to/daviddetorres/trigger-a-kubernetes-hpa-with-prometheus-metrics-43im</guid>
      <description>&lt;p&gt;In this article, you'll learn how to configure &lt;strong&gt;Keda to deploy a Kubernetes HPA&lt;/strong&gt; that uses Prometheus metrics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Kubernetes Horizontal Pod Autoscaler can scale pods based on the usage of resources&lt;/strong&gt;, such as CPU and memory. This is useful in many scenarios, but there are other use cases where more advanced metrics are needed – like the waiting connections in a web server or the latency in an API. Also, in other cases, you might need to combine multiple metrics in a formula or make aggregations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://keda.sh/"&gt;Keda is an open source project&lt;/a&gt; that allows &lt;strong&gt;using Prometheus queries&lt;/strong&gt;, along with &lt;a href="https://keda.sh/docs/2.4/scalers/"&gt;multiple other scalers&lt;/a&gt;, to scale Kubernetes pods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes-hpa"&gt;
  &lt;/a&gt;
  Kubernetes HPA
&lt;/h2&gt;

&lt;p&gt;Kubernetes HPA can scale objects by &lt;strong&gt;relying on metrics present in one of the Kubernetes metrics API endpoints&lt;/strong&gt;. You can read more about &lt;a href="https://sysdig.com/blog/kubernetes-autoscaler/"&gt;how Kubernetes HPA works in this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kubernetes HPA is very helpful, but &lt;strong&gt;it has two important limitations&lt;/strong&gt;. The first is that it &lt;strong&gt;doesn't allow combining metrics&lt;/strong&gt;. There are scenarios where combining multiple metrics is convenient, such as calculating the connection usage with the current number of established connections and the maximum number of connections.&lt;/p&gt;

&lt;p&gt;The second limitation is the &lt;strong&gt;reduced number of metrics that Kubernetes exposes by default&lt;/strong&gt;: just CPU and memory usage. Sometimes, applications expose more advanced metrics, either by themselves or through exporters. To expose more metrics, you need to publish them in the Kubernetes API metrics endpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-hpa-and-prometheus-metrics-with-keda"&gt;
  &lt;/a&gt;
  Connecting HPA and Prometheus metrics with KEDA
&lt;/h2&gt;

&lt;p&gt;Keda is an open source project that simplifies using Prometheus metrics for Kubernetes HPA.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-keda"&gt;
  &lt;/a&gt;
  Installing Keda
&lt;/h3&gt;

&lt;p&gt;The easiest way to install Keda is using &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add kedacore https://kedacore.github.io/charts
helm repo update
kubectl create namespace keda
helm install keda kedacore/keda --namespace keda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check out &lt;a href="https://keda.sh/docs/2.4/deploy/"&gt;Keda's documentation page&lt;/a&gt; for other installation methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-keda-does-it"&gt;
  &lt;/a&gt;
  How Keda does it?
&lt;/h3&gt;

&lt;p&gt;Keda has a Kubernetes operator that &lt;strong&gt;creates both the metrics server and the HPA&lt;/strong&gt; by defining a Custom Resource Definition (CRD) object called ScaledObject. This object allows you to define &lt;strong&gt;what you want to scale and how you want to scale it&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-to-scale"&gt;
  &lt;/a&gt;
  What to scale
&lt;/h4&gt;

&lt;p&gt;Easy: almost anything.&lt;/p&gt;

&lt;p&gt;With Keda, &lt;strong&gt;you can scale the usual Kubernetes workloads&lt;/strong&gt;, like &lt;code&gt;Deployments&lt;/code&gt; or &lt;code&gt;StatefulSets&lt;/code&gt;. Also, you can scale &lt;strong&gt;other CRDs&lt;/strong&gt; – it even has another CRD to scale jobs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-scale"&gt;
  &lt;/a&gt;
  How to scale
&lt;/h4&gt;

&lt;p&gt;This is where the magic is done. You can define triggers in Keda, and there are a lot of different types of them. This article is focused on the Prometheus trigger.&lt;/p&gt;

&lt;p&gt;When you set up a Prometheus trigger for a &lt;code&gt;ScaledObject&lt;/code&gt;, you define a Prometheus endpoint and a Prometheus query. &lt;strong&gt;Keda uses that information to query your Prometheus server and create a metric in the Kubernetes external metrics API&lt;/strong&gt;. Once you create the &lt;code&gt;ScaledObject&lt;/code&gt;, Keda automatically creates the Kubernetes HPA for that.&lt;/p&gt;

&lt;p&gt;That's it. You don't need to worry about publishing metrics in the Kubernetes API metrics endpoint or even creating the Kubernetes HPA object!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-example-please"&gt;
  &lt;/a&gt;
  An example, please
&lt;/h3&gt;

&lt;p&gt;Imagine that you want an HPA for the &lt;code&gt;nginx-server&lt;/code&gt; deployment. You want it to scale from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt; replicas, based on the &lt;code&gt;nginx_connections_waiting&lt;/code&gt; metric from the &lt;a href="https://github.com/nginxinc/nginx-prometheus-exporter"&gt;Nginx exporter&lt;/a&gt;. If there are more than &lt;code&gt;500&lt;/code&gt; waiting connections, then you want to schedule a new pod.&lt;/p&gt;

&lt;p&gt;Let's create the query to trigger the HPA:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sum(nginx_connections_waiting{job="nginx"})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy, right? This query just returns the sum of the nginx_connections_waiting metric value for the &lt;code&gt;nginx&lt;/code&gt; job.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Want to learn more about PromQL, the Prometheus query language? Check out the &lt;a href="https://sysdig.com/blog/getting-started-with-promql-cheatsheet/"&gt;PromQL getting started guide&lt;/a&gt; – it also includes a cheatsheet!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's define the &lt;code&gt;ScaledObject&lt;/code&gt; for this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda.sh/v1alpha1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ScaledObject&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-scale&lt;/span&gt;
 &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda-hpa&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="na"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-server&lt;/span&gt;
 &lt;span class="na"&gt;minReplicaCount&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
 &lt;span class="na"&gt;maxReplicaCount&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
 &lt;span class="na"&gt;cooldownPeriod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
 &lt;span class="na"&gt;pollingInterval&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
 &lt;span class="na"&gt;triggers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
   &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;serverAddress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://prometheus_server/prometheus&lt;/span&gt;
     &lt;span class="na"&gt;metricName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx_connections_waiting_keda&lt;/span&gt;
     &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
       &lt;span class="s"&gt;sum(nginx_connections_waiting{job="nginx"})&lt;/span&gt;
     &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;500"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;metricName&lt;/code&gt; parameter. This is a custom name you set for receiving the value from the query. Keda gets the result of the query and creates the &lt;code&gt;nginx_connections_waiting_keda&lt;/code&gt; metric with it. Then, it uses this metric to trigger the escalation. Also, remember to change the &lt;code&gt;serverAddress&lt;/code&gt;. :)&lt;/p&gt;

&lt;p&gt;Now, you simply need to apply the &lt;code&gt;ScaledObject&lt;/code&gt; definition, and the HPA will start working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-else-does-keda-offer"&gt;
  &lt;/a&gt;
  What else does Keda offer?
&lt;/h2&gt;

&lt;p&gt;Along with all the benefits of using the metrics in your Prometheus server and applying Prometheus queries to combine them as you want, Keda has additional special features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It allows you to scale down an object to zero, while the default Kubernetes HPA only allows a minimum value equal or greater than 1.&lt;/li&gt;
&lt;li&gt;  It allows defining the number of replicas in case it's unable to get the value from the metric, e.g. in an error connection.&lt;/li&gt;
&lt;li&gt;  It supports a secure connection with Prometheus endpoints with authentication.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h2&gt;

&lt;p&gt;In this article, you learned how to create a Kubernetes HPA easily, without the need to extend the Kubernetes API metrics endpoint. Just by installing and configuring Keda.&lt;/p&gt;

&lt;p&gt;In the examples, you also learned how to use a Prometheus PromQL query to trigger the autoscaler.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>prometheus</category>
      <category>keda</category>
      <category>hpa</category>
    </item>
    <item>
      <title>Contributed to some OSSs with pull-requests in this year too.</title>
      <author>Yasuhiro Matsumoto</author>
      <pubDate>Thu, 07 Oct 2021 16:13:10 +0000</pubDate>
      <link>https://dev.to/mattn/contributed-to-some-osss-with-pull-requests-in-this-year-too-5395</link>
      <guid>https://dev.to/mattn/contributed-to-some-osss-with-pull-requests-in-this-year-too-5395</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hacktoberfest-2021"&gt;
  &lt;/a&gt;
  Hacktoberfest 2021
&lt;/h3&gt;

&lt;p&gt;In this year too, I contributed to few OSSs. As far as I remember, I joined this event from 2019. 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#souvikinatorgofuzz"&gt;
  &lt;/a&gt;
  souvikinator/gofuzz
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/souvikinator/gofuzz/pull/5"&gt;https://github.com/souvikinator/gofuzz/pull/5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pull-request add go-colorable (This is my package) to enable colors on Windows.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arkscriptlangark"&gt;
  &lt;/a&gt;
  ArkScript-lang/Ark
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/ArkScript-lang/Ark/pull/318"&gt;https://github.com/ArkScript-lang/Ark/pull/318&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pull-request fixes possibly memory overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ArkScript-lang/Ark/pull/319"&gt;https://github.com/ArkScript-lang/Ark/pull/319&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pull-request fixes compiler warnings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fsouzafakegcsserver"&gt;
  &lt;/a&gt;
  fsouza/fake-gcs-server
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/fsouza/fake-gcs-server/pull/595"&gt;https://github.com/fsouza/fake-gcs-server/pull/595&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fix to use path/filepath package instead of path package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Shut the fuck up and write some code. 🤘&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>hacktoberfest2021</category>
    </item>
    <item>
      <title>Build a SaaS App with a Full-Stack React and AWS</title>
      <author>Remi W.</author>
      <pubDate>Thu, 07 Oct 2021 16:09:29 +0000</pubDate>
      <link>https://dev.to/ixartz/build-a-saas-app-with-a-full-stack-react-and-aws-1koh</link>
      <guid>https://dev.to/ixartz/build-a-saas-app-with-a-full-stack-react-and-aws-1koh</guid>
      <description>&lt;p&gt;In this article, you'll be able to build a &lt;strong&gt;full-stack React SaaS app&lt;/strong&gt; using a &lt;strong&gt;Serverless REST API backend&lt;/strong&gt;. You'll deploy the frontend and the backend on your AWS account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-frontend"&gt;
  &lt;/a&gt;
  React Frontend
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#run-the-frontend-locally"&gt;
  &lt;/a&gt;
  Run the frontend locally
&lt;/h3&gt;

&lt;p&gt;First, we'll start to build the frontend in React. Currently, one of the most powerful React frameworks is Next JS.&lt;/p&gt;

&lt;p&gt;I always start my React projects with the &lt;a href="https://github.com/ixartz/Next-js-Boilerplate" rel="noopener noreferrer"&gt;Next JS Boilerplate&lt;/a&gt;. A starter template for writing high-quality code with &lt;strong&gt;preconfigured ESLint and TypeScript&lt;/strong&gt;. It also includes code formatter with Prettier, styling with Tailwind CSS and Visual Studio Code integration.&lt;/p&gt;

&lt;p&gt;After forking and git cloning the &lt;strong&gt;Next JS Boilerplate&lt;/strong&gt; project, you can run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;http://localhost:3000&lt;/code&gt; with your favorite browser, you should get this result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAnS85QW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-boilerplate.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAnS85QW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-boilerplate.png" alt="Next JS Boilerplate Template screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-the-react-frontend"&gt;
  &lt;/a&gt;
  Deploy the React Frontend
&lt;/h3&gt;

&lt;p&gt;After making sure it works locally, you can deploy your &lt;strong&gt;React application on AWS&lt;/strong&gt;. There is an Amplify Hosting service perfect for this use case. It helps to host your frontend on AWS.&lt;/p&gt;

&lt;p&gt;Before deploying the React Frontend, you need to replace the &lt;code&gt;build&lt;/code&gt; command in &lt;code&gt;package.json&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next build &amp;amp;&amp;amp; next export&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Connect your AWS account and browse to &lt;a href="https://console.aws.amazon.com/amplify/home" rel="noopener noreferrer"&gt;AWS Amplify&lt;/a&gt;. Scroll to the bottom and click on the &lt;code&gt;Get Started&lt;/code&gt; button located in the &lt;code&gt;Host your web app&lt;/code&gt; section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFDlEnJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/amplify-hosting-git-repo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFDlEnJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/amplify-hosting-git-repo.png" alt="Amplify hosting git wizard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the Git service provider and choose the correct repository to deploy:&lt;/p&gt;

&lt;p&gt;Then, you go to the end of the setup process and click the &lt;code&gt;Save and deploy&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PtbXdY9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/amplify-hosting-review-summary.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PtbXdY9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/amplify-hosting-review-summary.png" alt="Amplify hosting deployment summary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Amplify kicks start the deployment. After a couple of minutes, when all the steps turn green, your frontend is accessible on the &lt;code&gt;amplifyapp.com&lt;/code&gt; domain.&lt;/p&gt;

&lt;p&gt;It should look exactly the same as in the local environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-backend"&gt;
  &lt;/a&gt;
  Serverless Backend
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#run-the-backend-locally"&gt;
  &lt;/a&gt;
  Run the Backend locally
&lt;/h3&gt;

&lt;p&gt;In this section, we'll handle the Backend &lt;strong&gt;REST API using Serverless Framework&lt;/strong&gt; provided by Serverless Inc. I built another boilerplate code but this time for Backend, you can find it on GitHub at &lt;a href="https://github.com/ixartz/Serverless-Boilerplate-Express-TypeScript" rel="noopener noreferrer"&gt;Serverless TypeScript Boilerplate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serverless TypeScript Boilerplate&lt;/strong&gt; is configured with the &lt;code&gt;dotenv&lt;/code&gt; package and local support. So, you can run it in development mode on your local computer. The boilerplate was built with &lt;strong&gt;developer-first experience&lt;/strong&gt; with ESLint, Prettier and Husky.&lt;/p&gt;

&lt;p&gt;After forking and git cloning the &lt;a href="https://github.com/ixartz/Serverless-Boilerplate-Express-TypeScript" rel="noopener noreferrer"&gt;Serverless TypeScript Boilerplate&lt;/a&gt; project, you can run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now test if everything works correctly by running this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should return a classic &lt;code&gt;Hello world&lt;/code&gt; in JSON format.&lt;/p&gt;

&lt;p&gt;Now, you can start making some changes in the boilerplate code by replacing the &lt;code&gt;Hello world&lt;/code&gt; message in your &lt;code&gt;src/handler.ts&lt;/code&gt; file by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Page title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploy-the-serverless-backend"&gt;
  &lt;/a&gt;
  Deploy the Serverless Backend
&lt;/h3&gt;

&lt;p&gt;After making the necessary changes, we are now ready to deploy the code on AWS Lambda with the following command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run deploy-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll take some time to package your backend code and &lt;strong&gt;deploy it on your AWS account&lt;/strong&gt;. At the end of the deployment, the console will print out the backend endpoint in the following format &lt;code&gt;https://XXXXXXXXX.execute-api.us-east-1.amazonaws.com/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use any HTTP client to test the endpoint. For example, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://XXXXXXXXX.execute-api.us-east-1.amazonaws.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get the following message: &lt;code&gt;{"title":"Page title"}&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-between-react-and-backend"&gt;
  &lt;/a&gt;
  Integration between React and Backend
&lt;/h2&gt;

&lt;p&gt;After deploying the frontend and the backend, it's time to connect the two. You'll be able to call the &lt;strong&gt;REST API from the React application&lt;/strong&gt; and retrieve information.&lt;/p&gt;

&lt;p&gt;You need to start installing &lt;strong&gt;data fetching&lt;/strong&gt; React Hook in the frontend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;swr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you need to define a &lt;code&gt;swr&lt;/code&gt; global configuration in your &lt;code&gt;_app.tsx&lt;/code&gt; file by adding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SWRConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SWRConfig&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SWRConfig&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your &lt;code&gt;index.tsx&lt;/code&gt; file, you can replace the whole file by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://XXXXXXXXX.execute-api.us-east-1.amazonaws.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;Name: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are ready to deploy automatically your React code on AWS Amplify with &lt;code&gt;git commit&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt;. Here is the result:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h2&gt;

&lt;p&gt;Your React frontend and the REST backend are now working and deployed on your AWS account. To build &lt;strong&gt;fully working SaaS products&lt;/strong&gt;, you need also to implement authentication, recurring payment, landing page, user dashboard, form handling, error handling, CRUD operation, database, etc. Instead of building everything yourself from scratch, &lt;strong&gt;start your SaaS business faster&lt;/strong&gt; with a &lt;a href="https://nextlessjs.com"&gt;React SaaS Template&lt;/a&gt; and focus on the things that make your product unique.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>react</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Introducing Abstract — A React Prototyping Tool, Designed for Mobile.</title>
      <author>Jonnie Oak</author>
      <pubDate>Thu, 07 Oct 2021 15:56:06 +0000</pubDate>
      <link>https://dev.to/oakj/introducing-abstract-a-react-prototyping-tool-designed-for-mobile-dba</link>
      <guid>https://dev.to/oakj/introducing-abstract-a-react-prototyping-tool-designed-for-mobile-dba</guid>
      <description>&lt;p&gt;Enter &lt;strong&gt;Abstract&lt;/strong&gt; — a mobile-first progressive web application focused on improving the developer experience. Create mobile first application prototypes in real-time with proven UI frameworks such as React Bootstrap. &lt;/p&gt;

&lt;p&gt;Abstract allows you to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Develop from anywhere&lt;/li&gt;
&lt;li&gt;Lighten developer workload when prototyping&lt;/li&gt;
&lt;li&gt;Focus on more complex engineering issues&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-world-is-moving-towards-mobile"&gt;
  &lt;/a&gt;
  The world is moving towards mobile
&lt;/h3&gt;

&lt;p&gt;When analyzing market trends, we find that mobile usage on the web has gradually increased every year, while desktop usage is slowly declining by the year. Mobile devices are taking over modern-day web browsing, likely due to the increasing accessibility of smartphones. Nowadays creating an application only optimized for desktop devices will greatly hinder your application from being viewed by a large majority of users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobilefirst-philosophy"&gt;
  &lt;/a&gt;
  Mobile-first philosophy
&lt;/h3&gt;

&lt;p&gt;“Mobile first”, simply means that we start product design with mobile users in mind because of their limitations.&lt;br&gt;
From a technical standpoint, when engineering a product, mobile is your limiting factor due to size, bandwidth, and hardware constraints. A mobile oriented design can scale to a desktop size and maintain full functionality, but a desktop design can’t scale down to mobile without removing and editing some features.&lt;br&gt;
Mobile first design approach allows for progressive advancement, which means you start designing for your most basic platform and then optimize for more advanced platforms later down the road.&lt;br&gt;
For developers this is a very efficient and lean strategy to build a product from scratch because they can push out a minimum viable product with core features while still reaching a majority of users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theres-a-demand-for-mobile-developer-tools"&gt;
  &lt;/a&gt;
  There’s a demand for mobile developer tools
&lt;/h3&gt;

&lt;p&gt;QuickEdit — 35,000 ratings on Google App Store&lt;br&gt;
Dcoder — 32,000 ratings on Google App Store&lt;br&gt;
DroidEdit — 17,000 ratings on Google App Store&lt;br&gt;
These are a few of the many developer tools on the mobile app store; however, they are strictly mobile code editors. &lt;em&gt;The market currently lacks mobile prototyping tools for mobile-first development.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abstract-adopts-mobilefirst-design-and-streamlines-prototyping"&gt;
  &lt;/a&gt;
  Abstract adopts mobile-first design and streamlines prototyping
&lt;/h3&gt;

&lt;p&gt;Our main priority is ease-of-use. With this in mind, we designed a simple interface targeted towards mobile users for easy navigation. We want developers to be able to work from anywhere, anytime, on any device. Elevating the developer experience with accessibility to useful tools streamlines the design stage during the product lifecycle and shortens turnaround time between product iterations.&lt;br&gt;
Here are some of Abstract’s core features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install on any device to prototype at home or on the go.&lt;/li&gt;
&lt;li&gt;Design for iPad and iPhone resolutions to accommodate more users.&lt;/li&gt;
&lt;li&gt;Utilize React Bootstrap components, avoiding early design bottlenecks in premature product stages.&lt;/li&gt;
&lt;li&gt;Preview generated React code synchronized with the prototype render view.&lt;/li&gt;
&lt;li&gt;Quickly export React code to GitHub for easy code review and collaboration.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Abstract away from the tedious process of coding a prototype from scratch with our simplified, design based workflow that leverages hot reloading and code preview.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#select-device-resolution-for-the-canvas"&gt;
  &lt;/a&gt;
  Select Device Resolution for the Canvas
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AeHD9kWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oslabs-beta/Abstract/blob/jonnie/readme-assets/switch-canvas.GIF%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AeHD9kWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oslabs-beta/Abstract/blob/jonnie/readme-assets/switch-canvas.GIF%3Fraw%3Dtrue" alt="canvas-size-gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#render-components-on-the-canvas"&gt;
  &lt;/a&gt;
  Render Components on the Canvas
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UWlqTQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oslabs-beta/Abstract/blob/jonnie/readme-assets/render-components.GIF%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UWlqTQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oslabs-beta/Abstract/blob/jonnie/readme-assets/render-components.GIF%3Fraw%3Dtrue" alt="render-components-gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#review-code"&gt;
  &lt;/a&gt;
  Review Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RbFJAU7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oslabs-beta/Abstract/blob/jonnie/readme-assets/review-code.GIF%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RbFJAU7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oslabs-beta/Abstract/blob/jonnie/readme-assets/review-code.GIF%3Fraw%3Dtrue" alt="review-code-gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#export-code"&gt;
  &lt;/a&gt;
  Export Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzkJEwoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oslabs-beta/Abstract/blob/jonnie/readme-assets/export-code.GIF%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzkJEwoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/oslabs-beta/Abstract/blob/jonnie/readme-assets/export-code.GIF%3Fraw%3Dtrue" alt="export-code-gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We hope you enjoy Abstract as much as we enjoyed creating it. Stay tuned for future updates!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h3&gt;

&lt;p&gt;Abstract is an open-sourced product. Interested in contributing or viewing?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/oslabs-beta/Abstract"&gt;Visit our Github project page.&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.abstractreact.net/"&gt;Visit Abstract’s website.&lt;/a&gt;&lt;br&gt;
&lt;a href="https://abstractreact.herokuapp.com/"&gt;Visit the live Abstract web-app.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meet the Team! —&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jonnie Oak &lt;a href="https://github.com/oakj"&gt;@Github&lt;/a&gt; &lt;a href="https://www.linkedin.com/in/oakj28/"&gt;@Linkedin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Brian Cheng &lt;a href="https://github.com/chengbrian9"&gt;@Github&lt;/a&gt; &lt;a href="https://www.linkedin.com/in/brian-cheng24/"&gt;@Linkedin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Raymond Hu &lt;a href="https://github.com/rhu0"&gt;@Github&lt;/a&gt; &lt;a href="https://www.linkedin.com/in/raymond-hu-3b18231a2/"&gt;@Linkedin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Omar Brown &lt;a href="https://github.com/rashadhndrxx"&gt;@Github&lt;/a&gt; &lt;a href="https://www.linkedin.com/in/omar-b-76892521b/"&gt;@Linkedin&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Calculating π with the Monte Carlo Simulation</title>
      <author>Chris</author>
      <pubDate>Thu, 07 Oct 2021 15:53:09 +0000</pubDate>
      <link>https://dev.to/zirkelc/calculating-with-the-monte-carlo-simulation-117g</link>
      <guid>https://dev.to/zirkelc/calculating-with-the-monte-carlo-simulation-117g</guid>
      <description>&lt;p&gt;When I was in university, I first learned about the Monte Carlo Simulation as way to calculate 

&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;π\pi&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;π&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 (pi). The simple – yet genius – idea behind this concept just blew my mind. Calculating an infinite number like pi doesn't sound like fun for most people. Still, seeing the number getting more and more precise continues to amaze me. In order to refresh some old memories, I decided to implement an interactive simulation in React and TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-it-rain"&gt;
  &lt;/a&gt;
  Let It Rain
&lt;/h2&gt;

&lt;p&gt;Let me explain the idea behind the Monte Carlo Simulation with an analogy to rain. Take a sheet of paper and draw a unit square (whose sides have length 1) on it. Inside this unit square, draw a quarter circle with a radius of 1. It will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vk3s_tPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633618362664/3J1oJmkk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vk3s_tPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633618362664/3J1oJmkk6.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's imagine it is raining on this unit square with perfect randomness. The raindrops are going to be evenly distributed on the unit square. Some raindrops will lie inside the quarter circle, and some will lie outside of it. Logically, a lot more raindrops will fall inside the quarter circle than outside of it. This is what it looks with 1000 raindrops:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myl9LDrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633618443242/y_ASD1tcU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myl9LDrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633618443242/y_ASD1tcU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interestingly, the fraction of raindrops inside the quarter circle compared to the total number of raindrops will constantly change as we generate more raindrops. This is due to the &lt;a href="https://en.wikipedia.org/wiki/Law_of_large_numbers"&gt;law of large numbers&lt;/a&gt; and the fact that we reach ever better distribution. Let's keep this fraction in mind as we're going to need it in the next step.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-me-the-math"&gt;
  &lt;/a&gt;
  Give Me The Math
&lt;/h2&gt;

&lt;p&gt;I'm going to briefly explain the underlying math principle. There are plenty of good articles on the Internet for more detailed information. &lt;br&gt;
The method is based on the mathematical formula for calculating the area of a unit circle (i.e. the one with radius 1):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ol0qrIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633511174949/c9sCKZ_UU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ol0qrIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633511174949/c9sCKZ_UU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to cut the unit circle in four equal segments. The derived quarter circle (i.e. the blue area) still has a radius of 1 and its area is defined by the following formula:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iCGN_6Y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633511245413/qk7kbTQK4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iCGN_6Y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633511245413/qk7kbTQK4.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Now interestingly, the quarter circle fits perfectly well into a unit square (i.e. the red area) with an edge length of 1. We know that the unit square has an area of 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;1×11\times1&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;1&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;×&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 and the quarter circle partly overlaps with this area as defined by the previous formula for 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;AquarterA_{quarter}&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;A&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;q&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;u&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;r&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;er&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
. We must assume the fraction to which it overlaps – and the way of doing that – is by generating random points within the unit square (e.g. we let it rain). &lt;/p&gt;

&lt;p&gt;This fraction can be defined as 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;drops  inside  the  quarter  circletotal  number  of  drops  generated\frac{drops\;inside\;the\;quarter\;circle}{total\;number\;of\;drops\;generated}&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;o&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;l&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;u&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;mb&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;er&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;o&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;f&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;ro&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;p&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;s&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;g&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;e&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;er&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;e&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;ro&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;p&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;s&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;in&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;s&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;i&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;e&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;h&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;e&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;q&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;u&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;r&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;er&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;c&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;i&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;rc&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;l&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 or abbreviated as 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;it\frac{i}{t}&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
. From here, we can build an equation with a fraction of the quarter circle area over unit square are equal the fraction of the drops inside the quarter circle over the total number of drops. This equation must then be solved for 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;π\pi&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;π&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 and leads us to the following equation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgv-mxk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633511391851/TngEnhvJw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgv-mxk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633511391851/TngEnhvJw.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interactive-simulation"&gt;
  &lt;/a&gt;
  Interactive Simulation
&lt;/h2&gt;

&lt;p&gt;I have implemented an interactive simulation in React and Typescript. The &lt;a href="https://chriszirkel.github.io/monte-carlo-pi/"&gt;app&lt;/a&gt; uses &lt;a href="https://plotly.com/javascript/"&gt;Plotly.js&lt;/a&gt; to draw the unit square, the quarter circle and the raindrops. I have added a few buttons to randomly generate 1, 10, 100 or 1000 of raindrops. The raindrops are colored blue if they fall inside the quarter circle, otherwise they are colored red. There's also a special button labelled as &lt;strong&gt;Let It Rain&lt;/strong&gt; to continuously generate raindrops as if it were raining. After each update, the approximate value of Pi is calculated again based on the newly generated raindrops. The more raindrops, the more accurate the value of Pi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2syi_O4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633523217952/BrDkScslr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2syi_O4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633523217952/BrDkScslr.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://chriszirkel.github.io/monte-carlo-pi/"&gt;Interactive Simulation App&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chriszirkel/monte-carlo-pi"&gt;Source Code on GitHub&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://de.wikipedia.org/wiki/Monte-Carlo-Simulation"&gt;Monte Carlo Simulation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>montecarlo</category>
      <category>pi</category>
    </item>
    <item>
      <title>The role of Developer Experience at Materialize</title>
      <author>Andy Hattemer</author>
      <pubDate>Thu, 07 Oct 2021 15:51:43 +0000</pubDate>
      <link>https://dev.to/rufio/the-role-of-developer-experience-at-materialize-286k</link>
      <guid>https://dev.to/rufio/the-role-of-developer-experience-at-materialize-286k</guid>
      <description>&lt;p&gt;If you’ve worked with data products and think things can be WAY better, if you think communicating ideas is as important as writing code, if you want the challenges and impact that come with working in a small startup, &lt;a href="https://grnh.se/acc51dec4us"&gt;join us on the DevEx team at Materialize!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read on for the general idea, or skip to the second half for the &lt;a href="#specifics-of-devex-at-materialize"&gt;specifics of developer experience at Materialize&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-principles-of-developer-experience"&gt;
  &lt;/a&gt;
  General Principles of Developer Experience
&lt;/h2&gt;

&lt;p&gt;Other areas of software engineering are a few steps ahead of the data space when it comes to the “state of the art” of tooling, processes, and &lt;strong&gt;&lt;a href="https://www.netlify.com/blog/2021/01/06/developer-experience-at-netlify/"&gt;developer experience&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This gives us a trail to follow, but we need to take care to follow the underlying principles, and not &lt;a href="https://en.wikipedia.org/wiki/Cargo_cult"&gt;cargo cult&lt;/a&gt; the programs resulting from those principles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-productivity"&gt;
  &lt;/a&gt;
  Developer Productivity
&lt;/h3&gt;

&lt;p&gt;When companies talk about a focus on simplicity, UX, docs, good CLIs and APIs… These are all just means of improving the same thing: &lt;strong&gt;developer productivity.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One way to frame the role of DevEx:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Focus on identifying and acting on opportunities to improve developer productivity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everything the team does can be evaluated on its effect on developer productivity.&lt;/p&gt;

&lt;p&gt;This works equally well for scenarios where we are introducing a technology to developers: &lt;em&gt;Is it REALLY changing their workflow in a way that makes them more productive?&lt;/em&gt; And scenarios where we are improving the experience for existing users: &lt;em&gt;Are we removing drudgework, are we helping them level-up their usage effectively?&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#empathy"&gt;
  &lt;/a&gt;
  Empathy
&lt;/h3&gt;

&lt;p&gt;If you were assembling a team to be uniquely qualified to improve productivity, who would you look for?&lt;/p&gt;

&lt;p&gt;Some of the companies with the best developer experience have an innate advantage: the builders of the tool are the same kind of developers as the users of the tool. (&lt;em&gt;Bonus points if the tool is used to build the tool, like GitHub!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most of the revolutionary startups in the developer tooling space were born out of firsthand experience the founders had as practitioners.&lt;/p&gt;

&lt;p&gt;But these aren’t prerequisites for success, they’re just different ways of guaranteeing that a company is good at &lt;strong&gt;empathizing&lt;/strong&gt; with their users.&lt;/p&gt;

&lt;p&gt;It’s unrealistic and close-minded to expect to only hire experienced practitioners who could also be customers. The data space is growing too fast, we need to bring more people in!&lt;/p&gt;

&lt;p&gt;Whether we hire people from careers as practitioners in the space or not, we maintain empathy by placing a huge emphasis on &lt;strong&gt;operational knowledge&lt;/strong&gt;, on &lt;strong&gt;learning the craft&lt;/strong&gt;, on becoming experts in the real-world usage of our products and the surrounding ecosystem.&lt;/p&gt;

&lt;p&gt;A developer experience team maintains empathy with their audience, helping &lt;strong&gt;identify opportunities to improve their productivity.&lt;/strong&gt; The next bit is about acting on those opportunities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#education"&gt;
  &lt;/a&gt;
  Education
&lt;/h3&gt;

&lt;p&gt;Education &lt;em&gt;(documentation, how-to guides, interactive tutorials, conceptual articles, videos, demo code and applications, meetups, student programs, forums, etc…)&lt;/em&gt; is uniquely important to developer experience for at least a few reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is a powerful channel for improving developer productivity&lt;/li&gt;
&lt;li&gt;It is a way of reaching developers that don’t know about your product and growing your user base.&lt;/li&gt;
&lt;li&gt;It is wholly owned by the developer experience team.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;DevEx has an intentionally broader scope than other team structures like Advocacy or Documentation. It ties back to that productivity mandate: If there’s one form of education that is more effective at increasing developer productivity, use it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;It’s silly to draw an artificial wall between people teaching code and writing code. In the past it happened as a result of developer companies not adequately paying educators (so anyone educator who &lt;em&gt;could&lt;/em&gt; get a job writing code &lt;em&gt;did.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;We have a simple solution: &lt;strong&gt;Pay DevEx on the same scale as engineering.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Encouraging the developer experience team to write code has so many benefits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Empowerment&lt;/strong&gt; - If devEx sees an opportunity to improve productivity that depends on some code being written or updated, they have more power to make it happen.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Credibility&lt;/strong&gt; - The team gets real-world experience with the ecosystem they are teaching.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Career Optionality&lt;/strong&gt; - Many career paths develop “ruts” where the longer you stay the harder it is to change. When you’re also writing code you're reversing that trend: The longer you do it, the easier it is to switch to an engineering track.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#where-do-you-draw-the-line-with-code"&gt;
  &lt;/a&gt;
  Where do you draw the line with code?
&lt;/h4&gt;

&lt;p&gt;When should DevEx hand things off to engineering? This is unfortunately a bit of a "&lt;a href="https://en.wikipedia.org/wiki/I_know_it_when_I_see_it"&gt;you know it when you see it&lt;/a&gt;" non-answer. But to make it clear, follow this rule:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never create a current or future burden on engineering without buy-in from engineering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For anything that does have greater engineering burden, the typical cross-functional processes should take over, where the business case for the devex request is written up and handed to engineering where it’s prioritized alongside other engineering work.&lt;/p&gt;

&lt;p&gt;But the same cloud-based developer tools and services have created an environent where a developer experience team can create a lot of value without burdening their core engineering team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#specifics-of-devex-at-materialize"&gt;
  &lt;/a&gt;
  Specifics of DevEx at Materialize
&lt;/h2&gt;

&lt;p&gt;Materialize is a disruptive technology, it doesn't fit cleanly in an existing category, and it's still in the "early-adopter" phase. These factors mean that developer experience is absolutely vital to the success of the company. &lt;/p&gt;

&lt;p&gt;Without a developer experience team, success hinges on people buying into the big-picture vision deeply enough to blaze their own trail and convince their coworkers to follow. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6KfTBap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://andyhattemer.com/posts/developer-experience-at-materialize/developer_productivity.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6KfTBap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://andyhattemer.com/posts/developer-experience-at-materialize/developer_productivity.png" alt="Learning path to a disruptive technology"&gt;&lt;/a&gt;&lt;br&gt;
This almost always involves a short-term productivity loss as they adopt and learn the new technology.&lt;/p&gt;

&lt;p&gt;DevEx is about building "on-ramps" to Materialize, especially early on when the core concepts are not widely understood.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--frWAo-11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://andyhattemer.com/posts/developer-experience-at-materialize/developer_productivity_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--frWAo-11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://andyhattemer.com/posts/developer-experience-at-materialize/developer_productivity_2.png" alt="DevEx On-Ramps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a strong opinion about the guiding principles listed above, but we don't have all the tactics mapped out yet.&lt;/p&gt;

&lt;p&gt;Some specific on-ramps we are focusing on now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extending integrations like &lt;a href="https://materialize.com/introducing-dbt-materialize/"&gt;dbt&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Develop and share new patterns, architectures and operational practices for data engineering on a streaming paradigm.&lt;/li&gt;
&lt;li&gt;Task oriented how-to guides that cover using Materialize with specific upstream and downstream systems.&lt;/li&gt;
&lt;li&gt;Broader educational content fundamental concepts and idioms in streaming systems, like windows, sinks, exactly-once semantics, durability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#team-structure"&gt;
  &lt;/a&gt;
  Team Structure
&lt;/h3&gt;

&lt;p&gt;The team is small right now (3 people) so the most important attribute of our first hires is ability to learn and grow. We’re open to hiring technical writers and DevEx Engineers at all levels. &lt;/p&gt;

&lt;p&gt;Here is the structure we know so far:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VLAFQ59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://andyhattemer.com/posts/developer-experience-at-materialize/devex_team_structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VLAFQ59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://andyhattemer.com/posts/developer-experience-at-materialize/devex_team_structure.png" alt="Developer Experience Team Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s not practical to expect everyone to be experts in Materialize &lt;em&gt;and&lt;/em&gt; all the different niches where it can be used, so in Documentation the focus is mainly on knowing Materialize, and in DevEx we’re planning to have each individual focus on a specific niche (e.g. data engineering, analytics engineering, application development.) Integration Engineering may be a team we add later, but it may also be handled within the engineering org.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;If you're already familiar with Materialize and excited about its potential, &lt;a href="https://grnh.se/acc51dec4us"&gt;take a look at the open positions here&lt;/a&gt; and if you see one you like apply on the job site, if you don't see a position that exactly fits your experience just &lt;a href="https://twitter.com/andyhattemer"&gt;contact me&lt;/a&gt; directly!&lt;/p&gt;

&lt;p&gt;If you're not yet familiar with Materialize, but you like the idea of this developer experience team structure, read this &lt;a href="https://andyhattemer.com/posts/why-materialize-reading-list/"&gt;why Materialize reading list&lt;/a&gt; and get in touch with me if, after reading the WHY bit, you're excited about what we're building here.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to setup mongodb atlas?</title>
      <author>Sachin Chaurasiya</author>
      <pubDate>Thu, 07 Oct 2021 15:42:17 +0000</pubDate>
      <link>https://dev.to/sachinchaurasiya/how-to-setup-mongodb-atlas-an7</link>
      <guid>https://dev.to/sachinchaurasiya/how-to-setup-mongodb-atlas-an7</guid>
      <description>&lt;p&gt;MongoDB is a NoSQL database and we can use MongoDB with different programming languages. MongoDB can be used locally or on Cloud. so in this article will discuss how to set up MongoDB on the cloud and connect with your application.&lt;/p&gt;

&lt;p&gt;This is just for learning purpose so to get started will use the Free plan of MongoDB atlas. if you are planning to use MongoDB for production-level applications then you can upgrade the plan.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an account on MongoDB atlas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visit the above link and you will see a page like this :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-6s_-US--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633256242504/Pv9Jx3y3A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-6s_-US--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633256242504/Pv9Jx3y3A.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can just fill up all the information and click on the &lt;code&gt;get started free&lt;/code&gt; button.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please fill in the proper email id to get a verification email.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2levr3TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633256420709/mjKlFRzIY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2levr3TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633256420709/mjKlFRzIY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after clicking on the getting started button you will be redirected to this page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WqsItTpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633256870619/j70FRLZp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WqsItTpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633256870619/j70FRLZp2.png" alt="screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now check your inbox and verify your email address. after verifying you will see this page so click on continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iax9hV6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257060884/_J-wkBClE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iax9hV6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257060884/_J-wkBClE.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup project on Atlas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fill in all the information to get started. you can change this information later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1NMUawxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257242947/Mia1uv42s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1NMUawxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257242947/Mia1uv42s.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you will be asked to select an Atlas Type. I would suggest going with shared as it is free and for learning purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owcm5NdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257444592/Gsi7tmz56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owcm5NdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257444592/Gsi7tmz56.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select any Cloud provider and Region as per your requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGekP9YB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257774688/bCqQdA2U0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGekP9YB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257774688/bCqQdA2U0.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on create a cluster button and you will be redirected to a page like this where it will show Your cluster is being created. so please wait for some time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ8TGT6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257942165/-HsWYcQ9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ8TGT6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633257942165/-HsWYcQ9f.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After some time you will get to see that your cluster is created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aFDb6Cro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258167409/PX69sJHxK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFDb6Cro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258167409/PX69sJHxK.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click on the &lt;code&gt;Connect&lt;/code&gt; button and Modal will be open like this. here you have to do two things&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add Your IP address ( so that you can access this cluster in your application )&lt;/li&gt;
&lt;li&gt;Create a Database user &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yfgj_iTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258272836/Nsr86wFfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yfgj_iTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258272836/Nsr86wFfj.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7HuXmBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258748445/KlpjdeRV6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7HuXmBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258748445/KlpjdeRV6.png" alt="screenshot (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding IP address and Database user click on the &lt;code&gt;choose a connection method&lt;/code&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxmArlH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258874150/nYThOpaF4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxmArlH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258874150/nYThOpaF4.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on the &lt;code&gt;Connect to your application&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7q7bPuF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258952465/L_eff0Ylg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7q7bPuF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633258952465/L_eff0Ylg.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you will see two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Drivers and version ( you can select any driver and version, I have selected python and the latest version )&lt;/li&gt;
&lt;li&gt;connection string ( your connection string will be different from my connection string )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1kjnG6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633259296394/dzHmYah24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1kjnG6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633259296394/dzHmYah24.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can copy your connection string and put it on your application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Replace &lt;code&gt;&amp;lt;password&amp;gt;&lt;/code&gt; placeholder with your actual password.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope you would have found this article helpful. if you have any queries you can ask in the comment section I would be happy to help you out.&lt;/p&gt;

&lt;p&gt;Thank you for Reading.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Why Materialize: Recommended Reading List</title>
      <author>Andy Hattemer</author>
      <pubDate>Thu, 07 Oct 2021 15:38:00 +0000</pubDate>
      <link>https://dev.to/rufio/why-materialize-recommended-reading-list-51gh</link>
      <guid>https://dev.to/rufio/why-materialize-recommended-reading-list-51gh</guid>
      <description>&lt;p&gt;This is a growing collection of articles, podcasts, and other media that convinced me that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Technology that incrementally maintains materialized views of data is difficult, but necessary and inevitable&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt; is the best shot at making that available to a wide array of developers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are probably most relevant to people with operational experience in the data space. You don't need to be technical but it's useful if you've rolled up your sleeves and dug into some of the complicated bits of working with data at scale. They don't need to be read in a particular order.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Listen to Materialize cofounder Arjun Narayan's podcast on the Data Stack Show: &lt;a href="https://datastackshow.com/podcast/46-a-new-paradigm-in-stream-processing-with-arjun-narayan-of-materialize/"&gt;A New Paradigm in Stream Processing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Watch our other cofounder and chief scientist &lt;a href="https://www.youtube.com/watch?v=zWSdkGq1XWk"&gt;Frank McSherry's DataCouncil talk on Materialize&lt;/a&gt; to get a feel for how Materialize works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read Jon Gjengset’s “simple english” explanation of batch vs incremental &lt;a href="https://jon.thesquareplanet.com/noria-in-simpler-terms.pdf"&gt;https://jon.thesquareplanet.com/noria-in-simpler-terms.pdf&lt;/a&gt; - &lt;em&gt;This is just a really great non-technical way of explaining the traditional database vs incrementally-maintained db with a fun metaphor. This guy is a legend in the space who created his own approach to incremental view maintenance as an MIT thesis, but has since moved on to other things.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read Nikita Tonsky’s “&lt;a href="https://tonsky.me/blog/the-web-after-tomorrow/"&gt;Web After Tomorrow&lt;/a&gt;” - &lt;em&gt;Another legend, he is thinking about things from an application developer’s perspective, looking for a “reactive database” but it is eye-opening. Be warned that we are still a ways away from developing a product that is good enough to just quickly slot in and solve this problem.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read &lt;a href="https://lironshapira.medium.com/data-denormalization-is-broken-7b697352f405"&gt;Data Denormalization is Broken&lt;/a&gt; - &lt;em&gt;This is a good practical explainer of why something like Materialize should exist.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read &lt;a href="https://nchammas.com/writing/data-pipeline-materialized-view"&gt;A Data Pipeline is a Materialized View&lt;/a&gt; - &lt;em&gt;If the one above is for application development, this post lays out the case for Materialized Views for data engineering.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read Tristan Handy’s &lt;a href="https://discourse.getdbt.com/t/on-the-limits-of-incrementality/"&gt;post/rant about the limits of incrementally updated tabl&lt;/a&gt;es in data warehouses. - &lt;em&gt;This is more of an answer to "Why NOT just work with the paradigms we have."&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you're finished, if you're excited about Materialize, &lt;a href="https://grnh.se/acc51dec4us"&gt;check out our jobs page&lt;/a&gt;, if you're interested in building on-ramps to Materialize by contributing both writing and code, read about &lt;a href="https://andyhattemer.com/posts/developer-experience-at-materialize/"&gt;our developer experience team&lt;/a&gt; and reach out if it interests you!&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
