<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The definitive guide to JavaScript Debugging [2021 Edition]</title>
      <author>Tapas Adhikary</author>
      <pubDate>Tue, 05 Jan 2021 05:49:27 +0000</pubDate>
      <link>https://dev.to/atapas/the-definitive-guide-to-javascript-debugging-2021-edition-116n</link>
      <guid>https://dev.to/atapas/the-definitive-guide-to-javascript-debugging-2021-edition-116n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;As developers, we’ve traditionally rooted out errors in our programs (we’ll call them &lt;code&gt;bugs&lt;/code&gt; from now on if that’s ok) by using meaningful &lt;code&gt;log&lt;/code&gt; statements. JavaScript has the famous &lt;code&gt;console.log()&lt;/code&gt; method for that.&lt;/p&gt;

&lt;p&gt;But while log statements are good, they are less efficient than a tool that enables you to carry out step-by-step debugging. So in this article, we will learn how to use &lt;code&gt;Google Chrome developer tools&lt;/code&gt; (also known as &lt;code&gt;DevTools&lt;/code&gt;) to debug any JavaScript application effortlessly.&lt;/p&gt;

&lt;p&gt;One of the great things about using DevTools is that other browser vendors (like Firefox and Microsoft) provide their own tools to debug a JavaScript application, and they work in a similar way. So once we’ve learned how to use the debugging tool for one browser, it’s easy to use for another.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-we-debugging-today" class="anchor"&gt;
  &lt;/a&gt;
  What are we debugging today?
&lt;/h1&gt;

&lt;p&gt;Take a look at the &lt;code&gt;Greet Me&lt;/code&gt; app. This JavaScript app asks for your name and invites you to submit a ‘wish’, which will be used to deliver your own personalized greeting.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--za41F2kg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609734531437/pu0EY3ate.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--za41F2kg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609734531437/pu0EY3ate.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="1_app_error.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 1: The Greet Me app showing an error&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But wait, there’s a problem here. The greeting message doesn’t print the wish part correctly. It inserts a rogue word, &lt;code&gt;NaN&lt;/code&gt;. Thankfully, Chrome DevTools will enable us to identify the issue.&lt;/p&gt;

&lt;p&gt;If you want to try out the tips provided below, you can find the Greet Me app at &lt;a href="https://greet-me-debugging.vercel.app/"&gt;https://greet-me-debugging.vercel.app/&lt;/a&gt;. You can also clone the &lt;a href="https://github.com/atapas/greet-me-debugging"&gt;app code from GitHub&lt;/a&gt; and run it locally.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#know-about-the-sources-panel" class="anchor"&gt;
  &lt;/a&gt;
  Know about the Sources panel
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;DevTools&lt;/code&gt; provides a lot of different tools to perform debugging tasks, including DOM inspection, profiling, and network call inspection. But the one we’re interested in right now is the &lt;code&gt;Sources&lt;/code&gt; panel, which helps us in debugging JavaScript.&lt;/p&gt;

&lt;p&gt;You can open DevTools by pressing the &lt;code&gt;F12&lt;/code&gt; key or using a shortcut: either Control+Shift+I (Windows, Linux) or Command+Option+I (Mac). Click the &lt;code&gt;Sources&lt;/code&gt; tab to navigate to the &lt;code&gt;Sources&lt;/code&gt; panel.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A36NVVsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609734842184/NBEPcKbA0.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A36NVVsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609734842184/NBEPcKbA0.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="2_know_source.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 2: Opening the Sources Panel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;Sources&lt;/code&gt; panel has three primary sections.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vznXJcBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609734923440/OfOzBEnEv.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vznXJcBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609734923440/OfOzBEnEv.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="3_know_source_sections.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 3: Sources Panel sections&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;File Navigator Section&lt;/code&gt;: All the files that our Greet Me page requests are listed here.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Code Editor Section&lt;/code&gt;: When you select a file from the navigator pane, the content of the file will be listed here. We can also edit the code from here.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Debugger Section&lt;/code&gt;: You will find lots of tools available here to set breakpoints, inspect variable values, watch for changes, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;If your DevTools window is wide or undocked in a separate window, the debugger section will be displayed to the right of the Code Editor pane.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wBNdyiZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735326701/J8fxCbBvE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wBNdyiZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735326701/J8fxCbBvE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="4_source_wide.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 4: DevTool window is wide open&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#set-up-breakpoints" class="anchor"&gt;
  &lt;/a&gt;
  Set up breakpoints
&lt;/h1&gt;

&lt;p&gt;To start debugging, the first thing to do is to set &lt;code&gt;breakpoints&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Breakpoints are the logical point you want the code execution to pause so that you can debug it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;DevTools&lt;/code&gt; allows you to set breakpoints in many different ways. As we start debugging our application, we will learn how to set them…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At the line of code.&lt;/li&gt;
&lt;li&gt;At conditional statements.&lt;/li&gt;
&lt;li&gt;At the DOM node.&lt;/li&gt;
&lt;li&gt;On Event listeners.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#set-breakpoints-at-the-line-of-code" class="anchor"&gt;
  &lt;/a&gt;
  Set breakpoints at the line of code
&lt;/h2&gt;

&lt;p&gt;To set a line-of-code breakpoint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click the Sources tab.&lt;/li&gt;
&lt;li&gt;Browse the source file from the File navigation section.&lt;/li&gt;
&lt;li&gt;Go to the line of the code in the Code Editor section on the right.&lt;/li&gt;
&lt;li&gt;Click on the line number column to set a breakpoint on a line.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n6x-6u3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735528301/WZJXsHUk8.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6x-6u3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735528301/WZJXsHUk8.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="5_line_of_code.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 5: Set a line-of-code Breakpoint&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we have set a breakpoint at line number 6. The code execution will be paused here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Tips&lt;/code&gt;: Use this when you do not know the exact region of the code to investigate. Even if you just start from somewhere, based on a guess, it will lead to the bug eventually. You can also set up multiple line-of-code breakpoints and investigate. We will see that in the latter part of the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-a-conditional-breakpoint" class="anchor"&gt;
  &lt;/a&gt;
  Set a conditional breakpoint
&lt;/h2&gt;

&lt;p&gt;To set a conditional breakpoint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click the Source tab.&lt;/li&gt;
&lt;li&gt;Browse the source file from the file navigation section.&lt;/li&gt;
&lt;li&gt;Go to the line of the code in the code editor section on the right.&lt;/li&gt;
&lt;li&gt;Right-click on the line number and select the Add conditional breakpoint option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qH_mOdyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735688903/zcjb4Pfw2.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qH_mOdyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735688903/zcjb4Pfw2.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="6_add_conditional_1.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 6a: Right-click on the line number&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A dialog box appears below the line of code. Start typing the condition. As you type, you will see the autocomplete option suggesting you pick up a condition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QLFdwWlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735800635/mm4W3wbX9.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QLFdwWlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735800635/mm4W3wbX9.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="6_add_conditional_2.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 6b: Enter a condition&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press Enter to activate the breakpoint. You should see an orange icon appear on top of the line number column.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QZcpQNZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735883767/W5SmA8ine.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZcpQNZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609735883767/W5SmA8ine.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="6_add_conditional_3.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 6c: A conditional breakpoint has been activated&lt;/p&gt;

&lt;p&gt;The code execution will be paused whenever the function &lt;code&gt;print()&lt;/code&gt; is invoked with the name &lt;code&gt;Joe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: Use the conditional breakpoint when you know the specific region of code to investigate. As you may be aware of the region of the code, you can inspect further using conditions to find the root cause of the problem.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-breakpoint-on-event-listeners" class="anchor"&gt;
  &lt;/a&gt;
  Set breakpoint on event listeners
&lt;/h2&gt;

&lt;p&gt;To set a breakpoint on event listeners:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click the &lt;code&gt;Sources&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Expand the &lt;code&gt;Event Listener Breakpoints&lt;/code&gt; pane in the &lt;code&gt;debugger section&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Select the list of event listeners from the category list to set breakpoints. We have a button click event in our application. We will be looking to select the &lt;code&gt;click&lt;/code&gt; checkbox under the &lt;code&gt;mouse&lt;/code&gt; option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cp9Fx-RN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609736058851/YiGI1aSMn.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cp9Fx-RN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609736058851/YiGI1aSMn.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="8_Event_listener_breakpoint.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 7: Set a breakpoint on the click event listener&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: Use this when you want to pause the event listener code that runs after an event is fired.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-breakpoint-at-the-dom-node" class="anchor"&gt;
  &lt;/a&gt;
  Set breakpoint at the DOM node
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DevTools&lt;/code&gt; is equally powerful when it comes to DOM inspection and debugging. You can set breakpoints to pause a code execution when something is added, removed or, changed in the DOM.&lt;/p&gt;

&lt;p&gt;To set breakpoints on DOM change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click the &lt;code&gt;Elements&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Go to the element that you want to set the breakpoint on.&lt;/li&gt;
&lt;li&gt;Right-click on the element to get a context menu. Select &lt;code&gt;Break on&lt;/code&gt; and then select one of the &lt;code&gt;Subtree modifications&lt;/code&gt;, &lt;code&gt;Attribute modifications&lt;/code&gt;, or &lt;code&gt;Node removal&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9o7GH0P---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609736218143/gfu6qs31S.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9o7GH0P---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609736218143/gfu6qs31S.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="7_DOM_breakpoint.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 8: Adding a breakpoint on the DOM change&lt;/p&gt;

&lt;p&gt;As you see in the above figure, we are setting a breakpoint on the DOM change of the output DIV with a condition of &lt;code&gt;Subtree&lt;/code&gt; modifications. We are aware that a greeting message will be added into the output DIV and the subtree will be modified to break on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: Use this when you suspect a DOM change is causing the bug. The related JavaScript code execution will be paused automatically when it breaks on the DOM change.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-through-the-source-code" class="anchor"&gt;
  &lt;/a&gt;
  Step through the Source Code
&lt;/h1&gt;

&lt;p&gt;Now we know all the important methods to set breakpoints. In a complex debugging situation you may have to use a combination of them. Let us see how to step through the breakpoints to figure out an issue.&lt;/p&gt;

&lt;p&gt;The debugger section provides five controls to step through the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NNM_XeBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609736854574/B37uVXPru.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NNM_XeBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609736854574/B37uVXPru.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="9_debug_controls.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 9: Step through controls&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#stepkey-shortcut-f9" class="anchor"&gt;
  &lt;/a&gt;
  Step(Key shortcut – F9)
&lt;/h2&gt;

&lt;p&gt;This option enables you to step through line by line as the JavaScript code executes. If there is a function call on the way, the step-through also gets inside the function, executes it line by line, and then steps out of it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rWS1flM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609736954936/jCuKdqSCe.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rWS1flM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609736954936/jCuKdqSCe.gif" alt="f9_step.gif"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 9a: Performing step line-by-line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step-over-key-shortcut-f10" class="anchor"&gt;
  &lt;/a&gt;
  Step Over (Key shortcut – F10)
&lt;/h2&gt;

&lt;p&gt;This option allows you to execute a function without stepping into it. Occasionally, you may be certain that some functions are working properly and not want to spend time inspecting them. In this situation, you should use the &lt;code&gt;step over&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the example below, we are stepping over the &lt;code&gt;logger()&lt;/code&gt; function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EArCpF0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737045445/aLCTvQCt6.gif%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EArCpF0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737045445/aLCTvQCt6.gif%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="f10_step_over.gif"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 9b: Step Over the function&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step-into-key-shortcut-f11" class="anchor"&gt;
  &lt;/a&gt;
  Step Into (Key shortcut – F11)
&lt;/h2&gt;

&lt;p&gt;Use this option to investigate a function in greater depth. When stepping through, you may have the feeling that a function is behaving unexpectedly and want to inspect it. Use &lt;code&gt;step into&lt;/code&gt; to get inside the function and debug.&lt;/p&gt;

&lt;p&gt;In the example below, we are stepping into the function &lt;code&gt;logger()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEhCJswz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737142403/Q2JkTsv3W.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEhCJswz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737142403/Q2JkTsv3W.gif" alt="F11_step_into.gif"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 9c: Step into the next function call&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step-outkey-shortcut-shift-f11" class="anchor"&gt;
  &lt;/a&gt;
  Step Out(Key shortcut – Shift + F11)
&lt;/h2&gt;

&lt;p&gt;While stepping through a function, you may not want to continue and come out of it. Use this option to step out of a function.&lt;/p&gt;

&lt;p&gt;In the example below, we are stepping inside the &lt;code&gt;logger()&lt;/code&gt; function and then stepping out of it immediately.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d9kpCgZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737220963/afQtoxs6E.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d9kpCgZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737220963/afQtoxs6E.gif" alt="shift_F11_step_out.gif"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 9d: Step out of the current function&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#resumejump-key-shortcut-f8" class="anchor"&gt;
  &lt;/a&gt;
  Resume/Jump (Key shortcut – F8)
&lt;/h2&gt;

&lt;p&gt;At times, you may want to jump from one breakpoint to another without debugging any code in between. Use this option to jump to the next breakpoint.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FFJZGkIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737269109/RyVLNgaMA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FFJZGkIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737269109/RyVLNgaMA.gif" alt="F8_run_jump.gif"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 9e: Resume or Jump to the next breakpoint&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#inspect-scope-call-stack-and-values" class="anchor"&gt;
  &lt;/a&gt;
  Inspect Scope, Call Stack, and Values
&lt;/h1&gt;

&lt;p&gt;When you step through the lines to debug, you can inspect the scope and the value of the variables and the call stack of the function calls.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scope" class="anchor"&gt;
  &lt;/a&gt;
  Scope
&lt;/h2&gt;

&lt;p&gt;You can use this to find out what is in the global scope and what its variables are, using the &lt;code&gt;scope&lt;/code&gt; panel. You can also find out the value of the &lt;code&gt;this&lt;/code&gt; keyword.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojjUzfJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737387360/i4Bber621.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojjUzfJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737387360/i4Bber621.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="9_scope.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 10a: Scope panel&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#call-stack" class="anchor"&gt;
  &lt;/a&gt;
  Call Stack
&lt;/h2&gt;

&lt;p&gt;The call stack panel helps to identify the function execution stack.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdmD2DQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737494246/sLfd10Pnz.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdmD2DQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737494246/sLfd10Pnz.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="9_call_stack.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 10b: Call stack&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#values" class="anchor"&gt;
  &lt;/a&gt;
  Values
&lt;/h2&gt;

&lt;p&gt;Inspecting values is the primary way to identify a bug in the code. When stepping through, you can inspect a value simply by doing a mouseover on a variable.&lt;/p&gt;

&lt;p&gt;In the example below, we are selecting the variable &lt;code&gt;name&lt;/code&gt; to inspect its value at the code execution stage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jM30hW-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737597436/tRZnUDZEM.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jM30hW-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737597436/tRZnUDZEM.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="9_see_values.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 10c: Inspect a value with mouseover&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Additionally, you can select a section of the code as an expression to check the value. In the example below, we have selected an expression &lt;code&gt;document.getElementById('m_wish')&lt;/code&gt; to inspect the value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysnFJGws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737669690/vtBGSUDwV.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysnFJGws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737669690/vtBGSUDwV.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="9_see_values_2.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 10d: Inspecting value of an expression&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#lets-watch" class="anchor"&gt;
  &lt;/a&gt;
  Let’s Watch
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;Watch&lt;/code&gt; section enables you to add one or more expressions and watch their values at execution time. This feature is very useful when you want to do some computation outside your code logic.&lt;/p&gt;

&lt;p&gt;You can combine any variables from the code region and form a valid JavaScript expression. At the time of stepping through, you will be able to see the value of the expression.&lt;/p&gt;

&lt;p&gt;Here are the steps required to add a Watch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the + icon above the Watch section&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WPHhydww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737770784/XSzHNZUQD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WPHhydww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737770784/XSzHNZUQD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="10_watch_1.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 11a: Add a watch expression&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add an expression to watch. In this example, we have added a variable wish to watch its value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_C38l4f7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737816458/-Rpr_yMX6.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_C38l4f7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737816458/-Rpr_yMX6.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="10_watch_2.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 11b: Watch expression value&lt;/p&gt;

&lt;p&gt;Another way to watch for an expression is from the console drawer. See the example below to know how to activate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aW7sBgX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737902807/TKwvTKAth.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aW7sBgX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737902807/TKwvTKAth.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="10_watch_3.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 11c: Activate the console drawer&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#disable-amp-remove-breakpoints" class="anchor"&gt;
  &lt;/a&gt;
  Disable &amp;amp; Remove Breakpoints
&lt;/h1&gt;

&lt;p&gt;To disable all the breakpoints at once, click on the Deactivate Breakpoints button(it is circled below.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4UeCzgNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737986758/3-TY0EhpO.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UeCzgNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609737986758/3-TY0EhpO.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="disable_bp.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 12a: Disable all breakpoints&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please note, the above method doesn’t remove the breakpoints. It just deactivates them for the duration you require. To activate the &lt;code&gt;breakpoints&lt;/code&gt;, please click on the same button again.&lt;/p&gt;

&lt;p&gt;You can remove one or more breakpoints from the Breakpoints panel by unchecking the checkboxes. You can remove all the breakpoints permanently by doing a right-click and selecting the option, &lt;code&gt;Remove all breakpoints&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xqlnPQcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609738136074/vrR6z3ja5.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqlnPQcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609738136074/vrR6z3ja5.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="11_remove_all_bp.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 12b: Remove one, more, or all the breakpoints&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#finally-the-fix" class="anchor"&gt;
  &lt;/a&gt;
  Finally, The Fix
&lt;/h1&gt;

&lt;p&gt;With all that we have learned so far, what do you think is the fix to make the &lt;code&gt;Greet Me&lt;/code&gt; app functional as expected? Have you figured that out already?&lt;/p&gt;

&lt;p&gt;In case not, it’s just that extra &lt;code&gt;+&lt;/code&gt; before the &lt;code&gt;wish&lt;/code&gt; variable while constructing the &lt;code&gt;message&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This is the line where the issue is.&lt;/span&gt;
&lt;span class="c1"&gt;// Identify the extra '+' before the wish.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; 
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, Your wish `&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;wish&lt;/span&gt; 
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;` may come true!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;How would we find that in a realistic debugging scenario? Have a look at this short video demo(without audio),&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NN_51ixQK9A"&gt;
&lt;/iframe&gt;
&lt;br&gt;
 JS Debugging: Greet Me app Fix&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also play around with &lt;a href="https://greet-me-debugging-git-fix-after-debugging.atapas.vercel.app/"&gt;the fixed version from here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#debug-javascript-with-visual-studio-code" class="anchor"&gt;
  &lt;/a&gt;
  Debug JavaScript with Visual Studio Code
&lt;/h1&gt;

&lt;p&gt;What’s your favorite code editor? Personally, I like Visual Studio code because of its simplicity. We can enable a similar kind of debugging environment using VS Code with just a few simple steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vs-code-setup-for-debugging" class="anchor"&gt;
  &lt;/a&gt;
  VS Code setup for debugging
&lt;/h2&gt;

&lt;p&gt;VS Code has several extensions (like plug-ins) for enabling various features and capabilities. To enable JavaScript debugging, you need to install an extension called &lt;code&gt;Debugger for Chrome&lt;/code&gt;. You can install it in either of these ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the &lt;a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome"&gt;Debugger for Chrome homepage&lt;/a&gt; and click on the Install button. This will launch the VS Code and start the installation for you automatically.&lt;/li&gt;
&lt;li&gt;You can search this extension in the Extensions panel of VS Code and install it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6e2yaULJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609738668736/HIRKyGSt8.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6e2yaULJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609738668736/HIRKyGSt8.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 13a: VS Code extension install&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After installation, click on the Run option from the left and create a configuration to run/debug a JavaScript application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qIKidQL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609738773016/QXIlhm-aE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qIKidQL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609738773016/QXIlhm-aE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 13b: Enable debugging with configuration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A file called launch.json will be created with some setting information in it. It may look like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;IntelliSense&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;learn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;possible&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;attributes.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Hover&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;descriptions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;existing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;attributes.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;more&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;information&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;visit:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;https://go.microsoft.com/fwlink/?linkid=&lt;/span&gt;&lt;span class="mi"&gt;830387&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"chrome"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Debug the Greet Me app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;http://localhost:5500&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"webRoot"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You may want to change the following parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;name&lt;/strong&gt;: Anything suitable for your app. It is optional to change.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;url&lt;/strong&gt;: The URL that your app is running on locally.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;webRoot&lt;/strong&gt;: By default, the value is ${workspaceFolder}, which is the current folder. You may want to change it to the entry point folder where a file like index.html is located.

&lt;ul&gt;
&lt;li&gt;The last step is to start the debugging by clicking the small play icon at the top-left corner.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LIVu5wBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609738952426/_0XQRDSzT.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LIVu5wBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609738952426/_0XQRDSzT.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 13c: Start debugging&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#understanding-debugger-panels" class="anchor"&gt;
  &lt;/a&gt;
  Understanding debugger panels
&lt;/h1&gt;

&lt;p&gt;VS Code provides similar tools to &lt;code&gt;DevTools&lt;/code&gt; for debugging JavaScript. You will find lots of similarities with the Google Chrome JavaScript debugger we have seen so far in this article. Here are the primary sections you should be aware of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Enable debugging&lt;/strong&gt;. Press the play button to enable the debugging option.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Controls for stepping through the breakpoints and to pause or stop debugging&lt;/strong&gt;. This is almost similar to the one we have seen with Chrome DevTools except some of the keyboard shortcuts may differ.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Setting breakpoints on the source code&lt;/strong&gt;. This is similar.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The scope panel to see variable scopes and values&lt;/strong&gt;. These are completely the same in both cases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The watch panel to create and watch expressions&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The call stack of the execution function&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The list of breakpoints to enable, disable, and remove&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The debug console to read the console log messages&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P0tczP_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609739119113/6ZohKhZlO.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P0tczP_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609739119113/6ZohKhZlO.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="vs_code_frame.png"&gt;&lt;/a&gt;&lt;br&gt;
 Figure 13d: Anatomy of the VS Code debugging controls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#a-quick-demo" class="anchor"&gt;
  &lt;/a&gt;
  A quick demo
&lt;/h1&gt;

&lt;p&gt;Here is a quick demo(1 minute) to showcase the VS Code debugging control usages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xKkrKS77PIY"&gt;
&lt;/iframe&gt;
&lt;br&gt;
 VS Code Debugging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;To Summarize,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is always better to use a tool to debug JavaScript code. A tool like the Google Chrome &lt;code&gt;DevTools&lt;/code&gt; or &lt;code&gt;VS Code&lt;/code&gt; debugger extension is much better than just relying on the &lt;code&gt;console.log()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;DevTools &lt;code&gt;Source Panel&lt;/code&gt; is extremely powerful, with the capability to inspect variable values, watch expressions, understand scopes, read the call stack, etc.&lt;/li&gt;
&lt;li&gt;There are several ways to set &lt;code&gt;breakpoints&lt;/code&gt; and we should use them based on the debugging situation.&lt;/li&gt;
&lt;li&gt;Managing breakpoints is simple with &lt;code&gt;DevTools&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;VS Code debugger&lt;/code&gt; extension is equally powerful and a must-try.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all for now. Thank you very much for reading through it, hope you find this article useful. Happy debugging! Please feel free to connect with me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter(@tapasadhikary)&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learn how to use loops in JavaScript</title>
      <author>Chris Noring</author>
      <pubDate>Mon, 04 Jan 2021 20:32:48 +0000</pubDate>
      <link>https://dev.to/itnext/learn-how-to-use-loops-in-javascript-1ei6</link>
      <guid>https://dev.to/itnext/learn-how-to-use-loops-in-javascript-1ei6</guid>
      <description>&lt;p&gt;TLDR; This article teaches you the various loop constructs that exist in JavaScript and which one to use when.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iterationlooping" class="anchor"&gt;
  &lt;/a&gt;
  Iteration/Looping
&lt;/h2&gt;

&lt;p&gt;Sometimes we have structures that requires us to &lt;em&gt;loop&lt;/em&gt; through them. What we mean is that we want to look through every single item in that construct and do something with it. Here's some areas of application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Display every item&lt;/strong&gt;. A very common application is to show every item in a list visually. A common example is to show every item in a cart on an e-commerce site, so you can see what you are about to purchase. There are many loop constructs that help you with &lt;em&gt;displaying&lt;/em&gt; everything in a list like &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;for/in&lt;/code&gt;, &lt;code&gt;for/of&lt;/code&gt; to name a few. You will learn more about how thy differ further down in the article.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;. &lt;em&gt;Mapping&lt;/em&gt; is about &lt;em&gt;iterating&lt;/em&gt; through a structure and change it from one form to another form. You typically want to do this when the data you have isn't quite ready for its next step. The next step can be to display your data and you want to change from a data object to something more presentable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduce&lt;/strong&gt;. When you &lt;em&gt;reduce&lt;/em&gt; data you go from one form to a &lt;em&gt;reduced&lt;/em&gt; form. So what does that mean? It means that instead of a list of order items you &lt;em&gt;reduce&lt;/em&gt; them down to something interesting, the total sum of the items for example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#iterate-items" class="anchor"&gt;
  &lt;/a&gt;
  Iterate items
&lt;/h2&gt;

&lt;p&gt;To iterate items there are many construct available to you. Let's start with a simple &lt;code&gt;for-loop&lt;/code&gt;. It is made up in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;incremental&lt;/span&gt; &lt;span class="nx"&gt;phase&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The idea is to define a loop as having the following stages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start condition&lt;/strong&gt;. In the &lt;em&gt;start condition&lt;/em&gt; you &lt;em&gt;initialize&lt;/em&gt; the loop value to a certain value, like for example &lt;code&gt;let i=0;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Break condition&lt;/strong&gt;. Next you define &lt;em&gt;break condition&lt;/em&gt;, that when fulfilled, will stop the loop from further iterations, for example &lt;code&gt;i&amp;lt; 5&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Increment phase&lt;/strong&gt;. Lastly you define how much you want the loop variable to increase/decrease per iteration.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A typical &lt;code&gt;for-loop&lt;/code&gt; can look like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's common to name the variable &lt;code&gt;i&lt;/code&gt;, for index, i.e the current position in the loop. It's better to give it a more descriptive name like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE, I'm using &lt;code&gt;let&lt;/code&gt; to ensure we have block scope, so that &lt;code&gt;position&lt;/code&gt; seize to exist after the loop is done. &lt;code&gt;var&lt;/code&gt; will NOT give you block scope and &lt;em&gt;leaks&lt;/em&gt; outside of the loop.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// DON'T&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// position is still alive here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#forin" class="anchor"&gt;
  &lt;/a&gt;
  For-in
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;For-in&lt;/code&gt; is one of the most misunderstood loops. I've heard a lot of conversations where people say use &lt;code&gt;for-of&lt;/code&gt; instead but not why. So let's explain what's going on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;For-in&lt;/code&gt; lists the attributes of the object. Let's show what's meant by the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// name, city&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The problem happens when you think you can use it on an array that looks like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c1"&gt;// '0', '1', '2'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You're not getting the values in the area but rather the indexes. If you are surprised by this, you should know that most things in JavaScript is actually an object. Consider the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 'object'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It tells you that you are dealing with an object. That means that your array looks like so under the hood:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's also a method that acts similarly on the array namely &lt;code&gt;Object.keys()&lt;/code&gt;. The following code produces a similar result to &lt;code&gt;for-in&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// ['0', '1', '2']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE, &lt;code&gt;for-in&lt;/code&gt; and &lt;code&gt;Object.keys()&lt;/code&gt; have similar area of application and operates on the keys/attributes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#getting-the-value" class="anchor"&gt;
  &lt;/a&gt;
  Getting the value
&lt;/h3&gt;

&lt;p&gt;If the values is what you want, then you have a few options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2, 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also use the &lt;code&gt;for-of&lt;/code&gt; loop like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 1,2,3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or, you can use &lt;code&gt;forEach()&lt;/code&gt;, a method on the array like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE, you can't use a &lt;code&gt;break&lt;/code&gt; statement to stop an iteration using a &lt;code&gt;forEach()&lt;/code&gt;. If you might need to break a loop, consider using a normal &lt;code&gt;for&lt;/code&gt; construct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#changing-the-data" class="anchor"&gt;
  &lt;/a&gt;
  Changing the data
&lt;/h2&gt;

&lt;p&gt;So far, you've been looking at ways to just iterate over all the data but you haven't changed it. You can change the data while iterating through it. Depending on how you want to change the data you got two constructs made for it &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;reduce()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#map" class="anchor"&gt;
  &lt;/a&gt;
  Map
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;map()&lt;/code&gt; is function on the array data structure. The idea is to iterate over all the items in an array and change that item into something new. It could be that you are only interested in certain properties on an object or that you want to change from a data model to something more presentable, a &lt;em&gt;view model&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Lets look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;heroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Xena&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Greece&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alexander the Great&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Macedonia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;onlyTheName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heroes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// can also be written as: let onlyTheName = heroes.map(hero =&amp;gt; hero.name)&lt;/span&gt;

&lt;span class="nx"&gt;onlyTheName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// ['Xena', 'Alexander the Great']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Above you have an example of iterating through an array and &lt;em&gt;plucking&lt;/em&gt; out the the attribute &lt;code&gt;name&lt;/code&gt; that you are interested in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reduce" class="anchor"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; function, just like &lt;code&gt;map()&lt;/code&gt; is on the array data structure. It also seeks to change every item, but there's an important distinction. &lt;code&gt;reduce()&lt;/code&gt; cares about performing an operation on the item and add the result to a previous result in an earlier iteration. This makes &lt;code&gt;reduce()&lt;/code&gt; a good candidate to use if you want to for example get the sum of all cart items or if you want to merge a cet of objects into one. Lets look at both these examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// sum: 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Above the &lt;code&gt;reduce()&lt;/code&gt; method is passed a callback with &lt;code&gt;prev&lt;/code&gt;, the previous result and &lt;code&gt;curr&lt;/code&gt; as the current item in the array. The callback ends up returning &lt;code&gt;prev + curr&lt;/code&gt;. The second argument to &lt;code&gt;reduce()&lt;/code&gt; takes an initial value. The end result is &lt;code&gt;10&lt;/code&gt;, all the values summed up. Consider this second example so you see how powerful &lt;code&gt;reduce()&lt;/code&gt; really is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Xena&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Greece&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mergedObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;

&lt;span class="c1"&gt;// { name: 'Xena', country: 'Greece' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I've shown that there are quite a few looping constructs at your disposal in JavaScript. They do different things and correctly used they can make you quite efficient. There's no reason to fear using &lt;code&gt;for-in&lt;/code&gt; now that you know what it does, even though &lt;code&gt;for-of&lt;/code&gt; is probably what you want. Consider adding &lt;code&gt;map()&lt;/code&gt; or &lt;code&gt;reduce()&lt;/code&gt; to your tool belt, if you haven't already.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My First Junior Dev Job</title>
      <author>Lynne</author>
      <pubDate>Mon, 04 Jan 2021 18:05:32 +0000</pubDate>
      <link>https://dev.to/lynnecodes/my-first-junior-dev-job-4b3l</link>
      <guid>https://dev.to/lynnecodes/my-first-junior-dev-job-4b3l</guid>
      <description>&lt;p&gt;My journey into the dev world this past year was fantastic. I really got to exercise my brain and learn new concepts. I found enjoyment in solving problems and excitement in working applications. I would have to say that this change was the best decision that I have made in 2020. &lt;/p&gt;

&lt;p&gt;And . . . I was able to land my first junior developer role for Skedit! They have such big plans for the company I can't wait to see it's growth and excited to be a part of this team. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-out-my-trip" class="anchor"&gt;
  &lt;/a&gt;
  Check out my trip!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ku7X3BNZDno"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Since I've started, I jumped into Angular and brushed up on my JavaScript skills. I've been working on projects like formatting pages for uniformity and correctly routing links to their proper pages. It's so exciting for me that I've made a little dance when I get something to work. It gets me out of my chair and it's a small reminder to myself to have some fun with it (actually, a plate of nachos would be an awesome reward). Does anyone out there reward themselves too?&lt;/p&gt;

&lt;p&gt;I'm not going to lie, it was very hard to find a junior dev position that didn't require a massive amount of experience. I couldn't have landed this job without my mentor and his fiancé. You have no idea how much it helps to make friends and connections in this community. I was even kindly asking hiring managers to lend some advice on what I could have done better to be considered for the position. This is the perfect example of &lt;em&gt;you get what you give&lt;/em&gt;. Keep hustling!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goodbye-2020" class="anchor"&gt;
  &lt;/a&gt;
  Goodbye 2020
&lt;/h3&gt;

&lt;p&gt;I'm sure that half of you are so happy that 2020 has come to an end and the other half is wishing it didn't have to end. We've all had our personal ups and downs since the start of the COVID-19 pandemic. &lt;/p&gt;

&lt;p&gt;For most of us, we were forced to slow down and appreciate the little moments with our family and friends. We worked from home with screaming children and kitchen tables became our offices. It's so crazy to think that at the start of 2020 we were eating out with friends and visiting our families. Now, we're overthinking the safety of running to the grocery store for a gallon of milk. Traveling out of state for my training was definitely a little terrifying but it turned out to be very successful. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5z87gqpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7qlx1unjoxyvsxyo6j5z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5z87gqpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7qlx1unjoxyvsxyo6j5z.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My family and I were lucky enough to be able to adapt to our "new normal" and understand the new environment we were in. The pandemic had us thinking of our future and how we want to live in this world. &lt;/p&gt;

&lt;p&gt;In this past year, my husband worked as a nurse in a hospital in our city and was there to witness the panic and heartbreak first hand. He decided to continue his schooling to become a nurse practitioner to give more back to the community. I worked as a program director at a college and helped in the transition from campus to online courses. I decided that I wanted to develop, create, and build in tech to help in the ease of everyday life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kTZoPxmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7mnjapawifxxnny46m4z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kTZoPxmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7mnjapawifxxnny46m4z.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our decisions were based on paths we've always wanted to follow but always thought &lt;em&gt;'It's not the right time'&lt;/em&gt; and &lt;em&gt;'Maybe tomorrow'&lt;/em&gt;. 2020 taught us that &lt;strong&gt;TODAY&lt;/strong&gt; is the best time to start our future. &lt;/p&gt;

&lt;p&gt;Happy 2021! &lt;/p&gt;

&lt;p&gt;Until next time,&lt;br&gt;
♥ Lynne&lt;/p&gt;

</description>
      <category>career</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>I Developed A Little Scanner Web App At Christmas To Learn New Skills</title>
      <author>David Dal Busco</author>
      <pubDate>Mon, 04 Jan 2021 17:12:50 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/i-developed-a-little-scanner-web-app-at-christmas-to-learn-new-skills-3ghl</link>
      <guid>https://dev.to/daviddalbusco/i-developed-a-little-scanner-web-app-at-christmas-to-learn-new-skills-3ghl</guid>
      <description>&lt;p&gt;This last Christmas holidays, except visiting my parents for a couple of days, after having forced myself in a sort of auto-lockdown period first, I did not have any big plans. That’s why, I took the opportunity to improve my software development knowledge.&lt;/p&gt;

&lt;p&gt;As I better learn concept by applying them to real application rather than writing examples, I decided to create a little scanner  Progressive Web Apps entirely made with the web.&lt;/p&gt;

&lt;p&gt;I called it &lt;a href="https://rebelscan.com"&gt;Rebel Scan&lt;/a&gt; because, it is just a little scanner app, you rebel scum!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/D3gfjqAo_Qs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A potato demo video of &lt;a href="https://rebelscan.com"&gt;Rebel Scan&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;It is important to note that this little scanner does not aim to be the most perfect scanner the world has ever seen. I am not even sure I will use it in the future. The image processing is not the best, there is no text extraction and on mobile it “only” shares PNG (see last chapter about it). It had absolutely no other goal that helping  me learn new skills.&lt;/p&gt;

&lt;p&gt;Therefore, before development begins, I defined the following objectives I never had tried before and, which I was eager to test:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give a try to &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Capture and crop a video stream using the &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/MediaDevices/getUserMedia"&gt;MediaDevices.getUserMedia()&lt;/a&gt; API&lt;/li&gt;
&lt;li&gt;Generate &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; bindings for a Web Component developed with &lt;a href="https://stenciljs.com/"&gt;Stencil&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Share files using strictly only the &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/Navigator/share"&gt;Web Share API&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without revealing the ending, I can confirm it was a success and, I was able to develop my little application. However, there was a couple of surprises along the way. Let’s tackle these, step by step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meta" class="anchor"&gt;
  &lt;/a&gt;
  Meta
&lt;/h3&gt;

&lt;p&gt;The Progressive Web App, the result of this post and my experiment, is available online at &lt;a href="https://rebelscan.com"&gt;rebelscan.com&lt;/a&gt; and its source code is available on &lt;a href="https://github.com/peterpeterparker/rebelscan"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#nextjs" class="anchor"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;p&gt;Prior to this experiment and, thus since around a year, my favorite tech stack to implement websites was: &lt;a href="https://gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; for the development, &lt;a href="https://github.com/features/actions"&gt;GitHub actions&lt;/a&gt; for deployment purpose and &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; as hosting.&lt;/p&gt;

&lt;p&gt;Next.js by &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt;, without any surprise, was an excellent  experience. I only scratched its surface and, I only used it to deploy a pre-rendered app but, it confirmed all the positive tweets and blogs I read about it.&lt;/p&gt;

&lt;p&gt;It is really well &lt;a href="https://nextjs.org/docs/getting-started"&gt;documented&lt;/a&gt; and getting started is straight forward. In comparison to Gatsby, I really liked that it took me absolutely no time to discover how to set up &lt;a href="https://nextjs.org/docs/basic-features/typescript"&gt;TypeScript&lt;/a&gt; and, that the configuration seemed closer to a bare-bones dependency setup.&lt;/p&gt;

&lt;p&gt;In addition, Next.js has a built-in support for internationalized (&lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;i18n&lt;/a&gt;) routing. Needless to say, as a Swiss-French person, living in the Swiss-German part and writing posts in English, I greatly value such a feature 👍.&lt;/p&gt;

&lt;p&gt;On the other side, without having done any research or statistics, I have the impression that the Gatsby’s ecosystem, in terms of plugins notably, is currently “wider”. As for example, with Gatsby there is one to generate automatically both sitemaps.xml and robots.txt where, with Next.js, it would need a bit more coding.&lt;/p&gt;

&lt;p&gt;That being said, I am talking about peanuts. Both stacks are amazing and let me unleash performant websites and applications. I love them both ❤️.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nvqGXjJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvSF3L96OuojzBPiExnpevg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nvqGXjJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvSF3L96OuojzBPiExnpevg.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#mediadevicesgetusermedia" class="anchor"&gt;
  &lt;/a&gt;
  MediaDevices.getUserMedia()
&lt;/h3&gt;

&lt;p&gt;Oh boy, this one gave me a hard time 😅.&lt;/p&gt;

&lt;p&gt;The API itself is a wonderful piece of software and being able to capture a video stream with the Web is just amazing but, the feature I was looking to develop was a bit challenging regarding its responsiveness across devices. Indeed, my goal was to display the full video behind a cropped section (“two distinct elements”), without breaking points, and this regardless of the screen or camera size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zRCrvW88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AJt8uqpzR_IvqYwWNqdmIVg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zRCrvW88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AJt8uqpzR_IvqYwWNqdmIVg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It ain’t probably rocket science for some but, to me, it was a bit challenging for the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You cannot use the video without HTTPS (from another device)&lt;/li&gt;
&lt;li&gt;The video size is unpredictable&lt;/li&gt;
&lt;li&gt;Finding the proper ratio and method took many iterations&lt;/li&gt;
&lt;/ol&gt;




&lt;h4&gt;
  &lt;a href="#https" class="anchor"&gt;
  &lt;/a&gt;
  HTTPS
&lt;/h4&gt;

&lt;p&gt;It is possible to develop and test the camera stream locally but, as soon as you want to test it with your mobile phone, you need an HTTPS connection.&lt;/p&gt;

&lt;p&gt;Therefore, I had two options. Either generate a certificate and run an HTTPS server on my laptop to which, I would connect from my device, or, use the “commit, push, test, try harder” method.&lt;/p&gt;

&lt;p&gt;I let you check my commit history of the 2nd January 2020 to guess which method I went for 🤣.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NEl-3SBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A-B8CROTQuPCbhZAR3IjTwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NEl-3SBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A-B8CROTQuPCbhZAR3IjTwg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#the-video-size-is-unpredictable" class="anchor"&gt;
  &lt;/a&gt;
  The Video Size Is Unpredictable
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Ask for portrait, gets landscape. Asks for landscape, gets portrait.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, you Android phone is like one of my best friend: he does what he wants, period.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;ideal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1920&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;ideal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;facingMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;environment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVideoTracks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSettings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;videoRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;videoRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Android (portrait): &amp;lt;video width="1080" height="1920"/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#ratio" class="anchor"&gt;
  &lt;/a&gt;
  Ratio
&lt;/h4&gt;

&lt;p&gt;It took me several iterations to find out the appropriate method and ratio(video to cropping section) to achieve my goal.&lt;/p&gt;

&lt;p&gt;In a first version, it all worked out but, the quality of the scanned document was way to pixelated. In a second one, I did manage to improve it but, once applied on my phone, it felt like having an enormous zoom constantly added to the camera.&lt;/p&gt;

&lt;p&gt;Finally, I figured out that I had both to handle portrait and landscape video sizes, crop these to my canvas and to find the exact CSS rules to make everything responsive for any devices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvasPadding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;videoSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;canvasPadding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;297&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;videoSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;canvasPadding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;297&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deltaX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;videoSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deltaY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;videoSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scanRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;videoRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="nx"&gt;deltaX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deltaY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2970&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In above snippet, I calculate the section of the image, using a format A4, and I am looking to crop it while ensuring that the results won’t be larger than the video (remember, the size is unpredictable). If so, I do the contrary and take the width as maximum value. Finally, I draw my section in a 2D canvas with my expected ratio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6TncFb0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AeacFy349YzXyGycPboGkkw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6TncFb0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AeacFy349YzXyGycPboGkkw.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: MDN Web Docs &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage"&gt;CanvasRenderingContext2D.drawImage()&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#takeaway" class="anchor"&gt;
  &lt;/a&gt;
  Takeaway
&lt;/h4&gt;

&lt;p&gt;It felt a bit like roller coaster of emotion developing this video conversion until I was finally able to implement my original idea but, I am happy with the results and, I will for sure reuse this technology in the future in news apps. The web is pretty slick (once in place 😉).&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#one-more-thing" class="anchor"&gt;
  &lt;/a&gt;
  One more thing
&lt;/h4&gt;

&lt;p&gt;Oh and, “One more thing”: it might not work on iPhone even if it works like a charm with Safari on OSX. I just did a quick test with my (real) iPhone and it thrown an error.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NotAllowedError: The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After some research, I found a Webkit &lt;a href="https://webkit.org/blog/6784/new-video-policies-for-ios/"&gt;post&lt;/a&gt; explaining that video can, under certain rules, be automatically played on iOS. It did not work anyway therefore, I changed the UX on iPhone to start the process only after a user interaction.&lt;/p&gt;

&lt;p&gt;Nevertheless, it did solve the video issue but, lead to another one. The video was not streamed in the cropped canvas.&lt;/p&gt;

&lt;p&gt;As I did not find any solution, in last resort, I decided to play my last card: calling my mum to ask her to test the feature on her iPad 😉. On the phone, she tried it and, called then my dad to take photos of the device to send me these "screenshots" per WhatsApp 🤣.&lt;/p&gt;

&lt;p&gt;To my surprise, it dit work out! Therefore, I came to the conclusion the iPhone with low memory cannot stream a video to canvas.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#react-bindings-with-stencil" class="anchor"&gt;
  &lt;/a&gt;
  React bindings with Stencil
&lt;/h3&gt;

&lt;p&gt;If you read for the first time one of my blog post, you probably don’t know but, I am a big fan of Web Components and &lt;a href="https://stenciljs.com/"&gt;Stencil&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even if I created multiple libraries and applications, notably most of the eco-system of our open source editor for presentations, &lt;a href="https://deckdeckgo.com"&gt;DeckDeckGo&lt;/a&gt;, I never had tried before to generate bindings for frameworks 🤷.&lt;/p&gt;

&lt;p&gt;Naturally, I thought that using this experiment was a good excuse to do so.&lt;/p&gt;

&lt;p&gt;As any other Stencil things related, I have to say that once again, the all process was relatively easy. I basically “just” had to follow the &lt;a href="https://stenciljs.com/docs/react"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only aha moment I had regarding this subject happened when I finally understood that the bindings have to be packaged and, delivered through NPM by another project, another repo!&lt;/p&gt;

&lt;p&gt;That’s why the “output target” are made for. They copy the definition’s file from the Web Component’s project to the bindings one.&lt;/p&gt;

&lt;p&gt;Once every thing was in place and &lt;a href="https://www.npmjs.com/package/web-photo-filter-react"&gt;published&lt;/a&gt;, I was able to use my &lt;a href="https://github.com/peterpeterparker/web-photo-filter"&gt;Web Component&lt;/a&gt; to apply Instagram-like WebGL filters to photos in my experiment, in order to add the “scanning” effect, using a combination of desaturate, saturation and contrast.&lt;/p&gt;

&lt;p&gt;Meantime, since I was already there, I also developed some improvements and breaking changes to the component. I even implemented (see that &lt;a href="https://github.com/peterpeterparker/web-photo-filter/tree/webworker"&gt;branch&lt;/a&gt;) the usage of an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas"&gt;OffscreenCanvas&lt;/a&gt; to defer the WebGL work to a web worker in order to improve the rendering in my little scanner. Unfortunately, I ultimately decided to not unleash this feature. It is really well supported by Chrome but, only available behind a flag in Firefox and, not even implemented in Safari.&lt;/p&gt;

&lt;p&gt;Checkout its &lt;a href="https://webphotofilter.com/"&gt;showcase&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#share-files-with-web-share-api" class="anchor"&gt;
  &lt;/a&gt;
  Share Files With Web Share API
&lt;/h3&gt;

&lt;p&gt;I used the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share"&gt;Web Share API&lt;/a&gt; in the past but, never to share files. Because the results of the little scanner had to be PDF and, to be stored in the cloud, it was the perfect use case too.&lt;/p&gt;

&lt;p&gt;Regarding this feature, I would lie if I would not tell you, I lost two good hours while implementing it. Not that the code or API was unclear, even if the Typescript definition does not handle yet the &lt;code&gt;files&lt;/code&gt; option, but, I faced some weird errors at runtime. Even in Chrome which is known to be always top notch when it comes to API implementation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DOMException: Failed to execute ‘share’ on ‘Navigator’: Must be handling a user gesture to perform a share request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, I figured out that these two following were my “mistakes”:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;files&lt;/code&gt; to be share have to be &lt;code&gt;File&lt;/code&gt; . It does not work with &lt;code&gt;Blob&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Currently, PDF are &lt;strong&gt;not&lt;/strong&gt; supported! I found out a &lt;a href="https://docs.google.com/document/d/1tKPkHA5nnJtmh2TgqWmGSREUzXgMUFDL6yMdVZHqUsg/edit"&gt;list&lt;/a&gt; of supported formats, stored as a Google Doc (?), linked in the middle of a blog post of &lt;a href="https://web.dev/web-share/"&gt;web.dev&lt;/a&gt;. After &lt;a href="https://twitter.com/daviddalbusco/status/1344637324798398464"&gt;tweeting&lt;/a&gt; about it, it was confirmed it was a &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1006055"&gt;known issue or request&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, since I could not share PDF, at least for now, I used PNG and, it worked out like a charm ultimately.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shareImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rebelscan.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastModified&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()});&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rebel Scan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rebelscan.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On desktop, until Chrome supports it in its next version v89 (related &lt;a href="https://www.chromestatus.com/feature/4777349178458112"&gt;issue&lt;/a&gt;), I implemented my “go to strategy” aka: if available, use the &lt;a href="https://web.dev/file-system-access/"&gt;File System API&lt;/a&gt; and, if not, fallback on a good old school download.&lt;/p&gt;

&lt;p&gt;In addition, my mum discovered that the files seems to not be yet implemented on iOS. At least on her iPad (I did not ask her which version), the share was successfully triggered but, no image was attached to the resulting email. That's why, I also implemented to "old school" download solution for such devices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savePdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;convertToPdfBlob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;showSaveFilePicker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;saveFilesystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rebelscan.pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cm"&gt;/* File System API */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveFilesystem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileHandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getNewFileHandle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getNewFileHandle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PDF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;showSaveFilePicker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fileHandle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWritable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* Old school is the new school (download) */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;revokeObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#takeaway" class="anchor"&gt;
  &lt;/a&gt;
  Takeaway
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;It is all fun and game until you try it out on a real mobile device.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am joking (a bit 😅) with the above sentence but, it is a good reminder that any web applications should always be tested and, if possible, not simulated, on multiple devices.&lt;/p&gt;

&lt;p&gt;On a personal point of view, I am really happy to have invested some times to learn these wonderful pieces of software and, I hope to reuse these learnings in my personal projects or those of my clients in the future.&lt;/p&gt;

&lt;p&gt;Happy New Year 🎉&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me out on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; or my&lt;br&gt;
&lt;a href="https://daviddalbusco.com"&gt;website&lt;/a&gt;. Give a try to&lt;br&gt;
&lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for the slides of your next presentations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Bitwise Operators in python</title>
      <author>Aswin Barath</author>
      <pubDate>Mon, 04 Jan 2021 16:41:39 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/bitwise-operators-in-python-4pii</link>
      <guid>https://dev.to/aswin2001barath/bitwise-operators-in-python-4pii</guid>
      <description>&lt;p&gt;When it comes to binary numbers, bitwise operators are the choice.&lt;/p&gt;

&lt;p&gt;Bitwise operators are used to perform operations on binary numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-or-xor-operators" class="anchor"&gt;
  &lt;/a&gt;
  AND, OR, XOR operators
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;AND &lt;code&gt;&amp;amp;&lt;/code&gt; operator sets each bit to 1 if both bits are 1.&lt;/li&gt;
&lt;li&gt;OR  &lt;code&gt;|&lt;/code&gt; operator sets each bit to 1 if one of two bits is 1.&lt;/li&gt;
&lt;li&gt;XOR &lt;code&gt;^&lt;/code&gt; operator sets each bit to 1 if only one of two bits is 1.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztFpAoZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9g0b8u908rwmpit2mt39.png" alt="Alt Text"&gt;
Output:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AND 82
OR 2039
XOR 1957
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ha Ha, surprised about the outputs?!&lt;br&gt;
The outputs are a result of the binary numbers a and b which gets converted into an integer, each time bitwise operation is performed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-operator" class="anchor"&gt;
  &lt;/a&gt;
  NOT operator
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;NOT &lt;code&gt;~&lt;/code&gt; operator inverts all the bits.&lt;/li&gt;
&lt;li&gt;In python, the number gets converted into an inverted &lt;em&gt;signed&lt;/em&gt; number.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AfSusAJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bfahm2w9csppf1v8l92v.png" alt="Alt Text"&gt;
Output:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NOT -11
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#shift-operators" class="anchor"&gt;
  &lt;/a&gt;
  Shift operators
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;left shift &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator shifts left by pushing zeros in from the right and let the leftmost bits fall off.&lt;/li&gt;
&lt;li&gt;right shift &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator shifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxVbT0Nc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6f9os2b6r0bgzecjy8i9.png" alt="Alt Text"&gt;
Output:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Right shift 277
Left shift 4444
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code-along-and-have-fun-" class="anchor"&gt;
  &lt;/a&gt;
  Code along and have fun ;)
&lt;/h3&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>The web dev tools that helped me get s*** done in 2020</title>
      <author>Ben Holmes</author>
      <pubDate>Mon, 04 Jan 2021 16:33:47 +0000</pubDate>
      <link>https://dev.to/bholmesdev/the-web-dev-tools-that-helped-me-get-s-done-in-2020-gpl</link>
      <guid>https://dev.to/bholmesdev/the-web-dev-tools-that-helped-me-get-s-done-in-2020-gpl</guid>
      <description>&lt;p&gt;At long last... the great dumpster fire that was 2020 is no more. There's certainly &lt;em&gt;a lot&lt;/em&gt; I'd like to leave behind us. But like a phoenix rising from the ashes, I want to highlight some amazing tools and practices that actually made my life &lt;strong&gt;better&lt;/strong&gt; as a web developer 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bholmesdev/the-web-dev-tools-that-helped-me-get-s-done-in-2019-plus-a-thank-you-11fe"&gt;&lt;strong&gt;I wrote a similar post back in 2019&lt;/strong&gt;&lt;/a&gt; once I really found my footing in the web dev space. Now, I'm gonna make this a yearly tradition! 🥳&lt;/p&gt;

&lt;p&gt;Let's jump into:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;🌳 &lt;strong&gt;4 Git snippets that defined my workflow&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;🧠 &lt;strong&gt;My mission to build a second brain in VS Code&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;⚙️ &lt;strong&gt;Discovering that &lt;em&gt;everything&lt;/em&gt; is a state machine with XState&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;🐏 &lt;strong&gt;The joys of functional programming in JS using Ramda&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Onwards!&lt;/em&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-git-snippets-i-use-daily" class="anchor"&gt;
  &lt;/a&gt;
  4 Git snippets I use daily
&lt;/h1&gt;

&lt;p&gt;I started my first full-time job as a programmer this year, which means I've been picking up &lt;em&gt;a lot&lt;/em&gt; of new tricks in a pretty quick timeframe. Naturally, I started automating the workflows I use day-in and day-out 😁&lt;/p&gt;

&lt;p&gt;Stop me if you've seen this workflow before:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I picked up a ticket on JIRA&lt;/li&gt;
&lt;li&gt;I need to pull the latest main branch&lt;/li&gt;
&lt;li&gt;I need to checkout a new branch&lt;/li&gt;
&lt;li&gt;I need to push that branch to origin to and collaborate with my team and open my PR&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'll probably do this 5+ times in one day if we're in a bug-squashing flow. But when I'm hurrying, it's so easy to either &lt;strong&gt;a)&lt;/strong&gt; work off an old "main" branch, or &lt;strong&gt;b)&lt;/strong&gt; do the &lt;strong&gt;copy-paste of shame&lt;/strong&gt; before your PR:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;To push the current branch and set the remote as upstream, use

    git push --set-upstream origin crap-not-again
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You know you cringe a little every time this pops up&lt;/em&gt; 😬&lt;/p&gt;

&lt;p&gt;To mitigate this, I've created my &lt;strong&gt;fantastic 4&lt;/strong&gt; shortcuts for slamming through my daily tasks 💪&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Stash what I'm working on and checkout the latest master&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gimme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git stash push -u &amp;amp;&amp;amp; git checkout master &amp;amp;&amp;amp; git pull -r"&lt;/span&gt;

&lt;span class="c"&gt;# Grab the latest master and come back to the branch I was on (with stashing!)&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;yoink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gimme &amp;amp;&amp;amp; git checkout - &amp;amp;&amp;amp; git stash pop"&lt;/span&gt;

&lt;span class="c"&gt;# Checkout a new branch and push it to origin (so I don't forget that set-upstream)&lt;/span&gt;
woosh&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin HEAD
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# ALL TOGETHER NOW&lt;/span&gt;
&lt;span class="c"&gt;# Stash my current WIP, checkout a new branch off the latest master, and push it to origin&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;boop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gimme &amp;amp;&amp;amp; woosh"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qu_ibkeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Holben888/personal-blog/main/get-s%2A%2A%2A-done-2020/1-fantastic-4-snippets.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qu_ibkeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Holben888/personal-blog/main/get-s%2A%2A%2A-done-2020/1-fantastic-4-snippets.gif" alt="1-fantastic-4-snippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's understand what these commands are doing a little more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;gimme:&lt;/code&gt;&lt;/strong&gt; This command assumes you might &lt;em&gt;not&lt;/em&gt; be on the main branch just yet. It will first stash anything you're working on, including "untracked" / new files with the &lt;code&gt;-u&lt;/code&gt; flag. Then, it will head over to the main branch and pull the latest. That &lt;code&gt;-r&lt;/code&gt; flag will be sure to "rebase" onto the latest, preventing unecessary merge conflicts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;yoink:&lt;/code&gt;&lt;/strong&gt; This builds off of &lt;code&gt;gimme&lt;/code&gt; a little bit. Instead of remaining on the main branch when we're done, we'll head &lt;em&gt;back&lt;/em&gt; to the branch we were just on using the &lt;code&gt;-&lt;/code&gt; parameter. This is super convenient for grabbing the latest changes to &lt;a href="https://egghead.io/lessons/git-push-a-rebased-local-branch-by-using-force-with-lease"&gt;force rebase the branch&lt;/a&gt; we're working on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;woosh:&lt;/code&gt;&lt;/strong&gt; This fixes our &lt;code&gt;--set-upstream&lt;/code&gt; problem from earlier. Instead of pushing to origin later, this lets you check out a new branch and push &lt;em&gt;right away.&lt;/em&gt; Yes, there's some cases when you don't want your local branch on the remote, but this is pretty rare in my experience. And if you've never seen the &lt;code&gt;HEAD&lt;/code&gt; parameter before... &lt;strong&gt;remember that one!&lt;/strong&gt; It's a super slick way to auto-fill the name of your current branch instead of typing it out by hand 🔥&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;boop:&lt;/code&gt;&lt;/strong&gt; This command goes full-circle. It'll stash your current work, grab the latest main branch, &lt;em&gt;and&lt;/em&gt; push it up to origin before you start working. This is the command I use the most!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also gonna mention &lt;a href="https://www.jason.af"&gt;Jason Lengstorf&lt;/a&gt; (&lt;em&gt;the lord of boops&lt;/em&gt;) for the naming convention here 😁&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-a-second-brain-in-vs-code" class="anchor"&gt;
  &lt;/a&gt;
  Building a second brain in VS Code
&lt;/h1&gt;

&lt;p&gt;This year was all about &lt;em&gt;writing, writing and &lt;strong&gt;more&lt;/strong&gt; writing&lt;/em&gt; for me. There's just so much knowledge to pick up as a new full stack developer, yet it always feels so difficult to find what I wrote even a week ago!&lt;/p&gt;

&lt;p&gt;I've struggled from notetaking app fatigue for years now. But at long last... I think I've found a semi-perfect home for everything I write both on &lt;em&gt;and&lt;/em&gt; off the clock.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-the-second-brain" class="anchor"&gt;
  &lt;/a&gt;
  Enter the second brain 🧠
&lt;/h2&gt;

&lt;p&gt;I'd been hearing about this concept for a while now, but never realized it's an actual &lt;em&gt;strategy&lt;/em&gt; to notetaking. As you'd expect, it's all about writing as much as possible, so you can build a brain's worth of knowledge in &lt;strong&gt;note form.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This concept starts with the &lt;a href="https://zettelkasten.de/introduction/"&gt;Zettelkasten Method&lt;/a&gt; used back in the pen-and-paper ages. It's built on some pretty basic principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Every note is treated as a &lt;em&gt;unique&lt;/em&gt; collection of thoughts, tagged by a unique ID of some sort&lt;/li&gt;
&lt;li&gt;Notes should form an &lt;strong&gt;ever-sprawling tree&lt;/strong&gt; of connected ideas / thoughts. This is pulled off with "links" between notes (references to those unique IDs), much like hyperlinks on the web!&lt;/li&gt;
&lt;li&gt;You may index multiple "trees" of notes with tags or tables of contents, assuming your Zettelkasten grows pretty large&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's countless nuggets of advice on how to do a Zettelkasten &lt;em&gt;right&lt;/em&gt;. But overall, it's clear that a physical Zettelkasten &lt;strong&gt;maps perfectly to how the web works.&lt;/strong&gt; So, why not use a bunch of HTML files to create one? Or better yet, markdown files?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-vs-code-foam" class="anchor"&gt;
  &lt;/a&gt;
  Using VS Code + Foam
&lt;/h2&gt;

&lt;p&gt;I discovered a project called &lt;a href="https://foambubble.github.io/foam/"&gt;Foam&lt;/a&gt; recently that's... not really a stand-alone project; it's a collection of extensions that work well together, with some &lt;a href="https://foambubble.github.io/foam/recipes/recipes"&gt;helpful guides&lt;/a&gt; on how to make the most of them.&lt;/p&gt;

&lt;p&gt;All you need to do is &lt;a href="https://github.com/foambubble/foam-template"&gt;clone a repository&lt;/a&gt; and watch the magic happen! It'll recommend all the extensions you should need to edit, link, and view your notes. But at the end of the day, you're really just writing a bunch of markdown files on your computer + some added benefits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-a-birdseye-view-%F0%9F%97%BA" class="anchor"&gt;
  &lt;/a&gt;
  Getting a birds-eye view 🗺
&lt;/h3&gt;

&lt;p&gt;It's worth discussing a crucial part of the Foam style of notetaking: &lt;strong&gt;you never need to group notes by directory.&lt;/strong&gt; We're so used to using file systems to organize everything, but let's be honest, that's not how our brain works!&lt;/p&gt;

&lt;p&gt;Foam thrives on connecting notes with &lt;em&gt;links&lt;/em&gt;, rather than folder hierarchies. This makes it much easier to define notes that might be referenced in a ton of places. Instead of finding the &lt;em&gt;exact&lt;/em&gt; directory where a note should live, you just need to reference the file itself.&lt;/p&gt;

&lt;p&gt;Foam will help you find any patterns that naturally emerge from links with a &lt;a href="https://foambubble.github.io/foam/features/graph-visualisation"&gt;graph visualization extension&lt;/a&gt;. It's basically one big &lt;a href="https://www.youtube.com/watch?v=jPCuQMKVh0Y"&gt;map of your head&lt;/a&gt; that you can click into and explore!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGnQyDC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Holben888/personal-blog/main/building-a-second-brain/1-foam-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGnQyDC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Holben888/personal-blog/main/building-a-second-brain/1-foam-graph.png" alt="Connected web of notes on the Rust Lang book"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the graph generated by my &lt;a href="https://twitter.com/BHolmesDev/status/1329265837828677632"&gt;recent challenge to learn Rust lang&lt;/a&gt;. Notice how this doesn't &lt;em&gt;quite&lt;/em&gt; match up to a parent-child relationship that directory trees demand. For instance, "Intro to structs" on the far left gets referenced by "Enums" &lt;em&gt;and&lt;/em&gt; "Rust ownership." But you couldn't have the same file sitting in multiple directories at once! That's the beauty of using free-form links; &lt;strong&gt;anything can reference anything else&lt;/strong&gt;, so it's less of a &lt;em&gt;tree&lt;/em&gt; and more of a purposeful, tangled-up birds nest 😁&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkA_xJc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.birdwatchersdigest.com/bwdsite/wp-content/uploads/2015/01/robin-e1431602899326.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkA_xJc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.birdwatchersdigest.com/bwdsite/wp-content/uploads/2015/01/robin-e1431602899326.jpeg" alt="birds nest with blue eggs in the center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Metaphor for my brain&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you use VS Code every day like me, this is super easy to dive into for the first time. Definitely give it shot if &lt;em&gt;blog more&lt;/em&gt; is one of your New Year's resolutions 🎉&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#everything-is-a-state-machine" class="anchor"&gt;
  &lt;/a&gt;
  Everything is a state machine
&lt;/h1&gt;

&lt;p&gt;You're a state machine. I'm a state machine. &lt;em&gt;The world is a state machine.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHWJx1SR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Holben888/personal-blog/main/get-s%2A%2A%2A-done-2020/2-wait-its-all-state-machines.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHWJx1SR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Holben888/personal-blog/main/get-s%2A%2A%2A-done-2020/2-wait-its-all-state-machines.png" alt="Meme with two astronauts looking at the earth. One asks &amp;quot;wait, it's all state machines?&amp;quot; and the other replies, gun in hand, &amp;quot;always has been.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...okay jokes aside, state machines really do apply to everything 😆&lt;/p&gt;

&lt;p&gt;You may have heard of &lt;a href="https://xstate.js.org"&gt;XState&lt;/a&gt; as a solution to "global state management" in your JS apps. This is true, but the idea of state machines &lt;strong&gt;is more of a &lt;em&gt;way of thinking&lt;/em&gt; than &lt;em&gt;just another library to learn.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#visualizing-your-state" class="anchor"&gt;
  &lt;/a&gt;
  Visualizing your state
&lt;/h2&gt;

&lt;p&gt;Diagramming is really XState's bread and butter. With most state management tools, the actual progression from one action / state / reducer to another can be pretty tough to trace. In XState, &lt;a href="https://xstate.js.org/viz/"&gt;they have a dedicated sandbox to work from!&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I could come up with some wild example to showcase how XState works, but the default template already does a great job:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKa-oLfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Holben888/personal-blog/main/get-s%2A%2A%2A-done-2020/3-state-machine-visualizer.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKa-oLfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Holben888/personal-blog/main/get-s%2A%2A%2A-done-2020/3-state-machine-visualizer.gif" alt="3-state-machine-visualizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's break down some important XState lingo here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Finite states&lt;/strong&gt; are those words surrounded by a rectangle (idle, loading, etc.). If you come from Redux like me, you can look at each of these like mini-reducers. They each have unique actions that they're listening for, which may cause you to progress from one reducer to the next.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Actions&lt;/strong&gt; are defined by those gray bubbles between our finite states (FETCH, RESOLVE, etc.). These can do a few interesting things: progress you to another finite state, set some "global" state for the whole machine (see the next bullet), or fire off some "side effects" that do things &lt;em&gt;outside&lt;/em&gt; the machine. For instance, the &lt;code&gt;FETCH&lt;/code&gt; action might kick off an API call of some sort. If that API call comes back successfully, we'll fire the &lt;code&gt;RESOLVE&lt;/code&gt; action (which our "loading" state picks up).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Context&lt;/strong&gt; is some global state shared by &lt;em&gt;all&lt;/em&gt; states in the machine. This is just one big JS object you can assign new values to and read from whenever you want. In this case, we have a count of how many times we "retried" our fetch, which gets updated on the &lt;code&gt;RETRY&lt;/code&gt; action with &lt;strong&gt;&lt;code&gt;do / assign retries&lt;/code&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach has &lt;em&gt;countless&lt;/em&gt; benefits, but the biggest one for me: &lt;strong&gt;you can use any framework you want with XState, or even no framework at all!&lt;/strong&gt; This makes me super comfortable going all-in on the library since I can take it with me wherever I go 😁&lt;/p&gt;

&lt;p&gt;To get your feet wet in this brave new world, I found some high quality demos around the Internet worth checking out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=hiT4Q1ntvzg"&gt;This one&lt;/a&gt; on modeling UI with state machines across frameworks.&lt;/strong&gt; Best conference talk on the subject hands down.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=czi24DqUfSA"&gt;This one&lt;/a&gt; on building a more complex ReactJS form.&lt;/strong&gt; It's longer, but worth your time!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=osaszd2aU9U"&gt;This one&lt;/a&gt; on creating a Vanilla JS drag-and-drop interaction.&lt;/strong&gt; This is more CSS-intensive and speaks to the &lt;code&gt;className&lt;/code&gt; trick I showed above.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#oneline-state-machines-with-typescript" class="anchor"&gt;
  &lt;/a&gt;
  One-line state machines with TypeScript
&lt;/h2&gt;

&lt;p&gt;I started using this pattern more and more throughout the year. This actually &lt;em&gt;doesn't&lt;/em&gt; use any libraries at all! In short, it's neat shorthand to collapse an ever-growing sea of booleans:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formIdle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormIdle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formInvalid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormInvalid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formSubmitting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormSubmitting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formSubmitted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormSubmitted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...into a single, type-safe state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FormState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;invalid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submitting&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submitted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This fixes the age-old problem tools like &lt;a href="https://hackernoon.com/handling-loading-actions-the-proper-way-in-redux-t3k36e8"&gt;Redux seemed to encourage&lt;/a&gt;: you have a bunch of booleans representing unique states, &lt;strong&gt;but only one boolean should be flipped "on" at a given time.&lt;/strong&gt; It's a hassle making sure all your boolean's are &lt;code&gt;false&lt;/code&gt; when they're supposed to be, so why not have a boolean with more than 2 states?&lt;/p&gt;

&lt;p&gt;There are a number of other benefits to this approach like flipping CSS classes at the right times. &lt;strong&gt;&lt;a href="https://dev.to/bholmesdev/writing-a-state-machine-in-one-line-with-typescript-3h9d"&gt;Check out this article&lt;/a&gt;&lt;/strong&gt; for some interactive code examples ✨&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#functional-programming-with-ramdajs" class="anchor"&gt;
  &lt;/a&gt;
  Functional programming with RamdaJS
&lt;/h1&gt;

&lt;p&gt;Across the tech stack my full-time job demands, &lt;a href="https://flaviocopes.com/javascript-functional-programming/#higher-order-functions"&gt;functional programming&lt;/a&gt; has been &lt;em&gt;the&lt;/em&gt; common thread for me to pick up.&lt;/p&gt;

&lt;p&gt;The functional programming community has flourished with all the static type checking goodness that TypeScript brought. Heck, there's an &lt;strong&gt;&lt;a href="https://github.com/gcanti/fp-ts"&gt;entire helper library&lt;/a&gt;&lt;/strong&gt; for nearly every concept in the &lt;a href="https://www.youtube.com/playlist?list=PLhgq-BqyZ7i5lOqOqqRiS0U5SwTmPpHQ5"&gt;category theory&lt;/a&gt; book!&lt;/p&gt;

&lt;p&gt;My knowledge of true, mathematical FP is still very surface level right now. Still, I've definitely found my "gateway drug" into this new world: &lt;strong&gt;I need to transform a big blob of data into a different looking blob of data, and I'm gonna chain 10 functions together to do it&lt;/strong&gt; 😎&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://ramdajs.com/docs/"&gt;RamdaJS&lt;/a&gt;&lt;/strong&gt; really is the missing toolkit JS needs for these acrobatics. I could ramble about each little function in their every-sprawling docs, but let's hit the biggest highlights.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#boolean-operations" class="anchor"&gt;
  &lt;/a&gt;
  Boolean operations
&lt;/h2&gt;

&lt;p&gt;First off, Ramda throws you some nice shortcuts for combining multiple arrays. Let's consider some basic inventory management for our coffee shop. Before someone can check out, we need to exclude any items that are out of stock. Normally, we'd write some function like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Macchiatto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cold brew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Latte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outOfStockItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Macchiatto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validOrders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;outOfStockItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This works well enough... but it's not super readable. Watch us rewrite this sort of operation in a single stroke:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// subtract out all the outOfStockItems from orders&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validOrders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;outOfStockItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; ["Cold brew", "Latte"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can do all kinds of things from here! For instance, we could filter out multiple arrays at once by &lt;code&gt;union&lt;/code&gt;ing them together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validOrders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outOfStockItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsOutForDelivery&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...or figure out which items we &lt;em&gt;should&lt;/em&gt; include using a SQL-inspired &lt;code&gt;innerJoin&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// basically, filter our menuItems based on which ones were ordered&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsOrdered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;innerJoin&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;menuItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validOrders&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Boolean operations like these are certainly not a unique concept. Still, I'm glad Ramda includes all of them with a &lt;a href="https://ramdajs.com/repl?v=0.27.0"&gt;nice REPL playground&lt;/a&gt; to boot. If it's your first time seeing boolean operations, &lt;strong&gt;I highly recommend &lt;a href="https://boolean.method.ac"&gt;this interactive tutorial&lt;/a&gt;&lt;/strong&gt; 🔥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formatting-in-bulk-with-raw-evolve-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Formatting in bulk with &lt;code&gt;evolve&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Okay, this helper really blew my socks off. I'm sure you've run into this sort of pattern before when you try to transform one object into another one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Macchiatto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;roomForCream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1tbsp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}...]&lt;/span&gt;
&lt;span class="c1"&gt;// now, we want to loop over all of these and convert that "quantity" to an int.&lt;/span&gt;
&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// make sure the name sticks around&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// and roomForCream&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ...and finally, parse quantity to an int&lt;/span&gt;
      &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Not bad, but all that dot chaining is making my head spin. We also have to remember all of the keys at each level so they don't disappear on us. The spread operator cleaned up this process for us, but it's still easy to forget (especially if you don't have type checking!). If only we could &lt;em&gt;just&lt;/em&gt; modify the keys we care about, without all the nested dots.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is exactly with &lt;code&gt;evolve&lt;/code&gt; does!&lt;/strong&gt; 🎉&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;evolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// ignore the properties we *don't* want to change, like the name&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ignore roomForCream too&lt;/span&gt;
      &lt;span class="na"&gt;cream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// and just put a reference to the parseInt function as-is. Don't even call it!&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's some serious benefits to this approach. Not only can we omit keys we don't want to change, but we can modify deeply nested fields without much trouble! You'll also notice we can just pass &lt;code&gt;evolve&lt;/code&gt; into our map directly, without passing in the &lt;code&gt;order&lt;/code&gt; like we're used to doing (i.e. &lt;code&gt;map(order =&amp;gt; evolve(order))&lt;/code&gt;). This is because all Ramda functions are &lt;strong&gt;curried&lt;/strong&gt;, which you can learn a bit more about from &lt;a href="https://stackoverflow.com/questions/36314/what-is-currying"&gt;this Stack Overflow answer&lt;/a&gt; 😁 Spoiler: it's an awesome feature.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#and-thats-a-wrap" class="anchor"&gt;
  &lt;/a&gt;
  And that's a wrap!
&lt;/h1&gt;

&lt;p&gt;I know 2020 hit a lot of people hard this year. If you're struggling with family, dealing with kids at home, finding a new job, losing your mind indoors... well, at least you made it through to today 🙂&lt;/p&gt;

&lt;p&gt;If you have anything else that made your life better as a developer or as a person, please drop them in the comments below. Would love to hear some fresh perspectives as we all take a fresh start for 2021!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>git</category>
      <category>notetaking</category>
    </item>
    <item>
      <title>How to Create an Animated SVG Face With CSS</title>
      <author>Stephanie Eckles</author>
      <pubDate>Mon, 04 Jan 2021 15:53:55 +0000</pubDate>
      <link>https://dev.to/5t3ph/how-to-create-an-animated-svg-face-with-css-5djd</link>
      <guid>https://dev.to/5t3ph/how-to-create-an-animated-svg-face-with-css-5djd</guid>
      <description>&lt;p&gt;Learn how to create an animated SVG face using CSS animations, transforms, and an optional pinch of JavaScript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is an isolated demo of the animations in use for &lt;a href="https://buttonbuddy.dev"&gt;ButtonBuddy.dev&lt;/a&gt;, my web app where you can learn about accessible button contrast then generate your own accessible button color palette.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's a preview of the demo that allows you to change Buddy's emotions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--95GlQ9-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6212jgoz20z1cl8l0g2x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--95GlQ9-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6212jgoz20z1cl8l0g2x.gif" alt='A button with a face SVG and 3 radio button options for "Excited" (checked), "Happy" and "Sad". Selecting a radio button changes the face to the corresponding emotion. The face periodically also winks its left eye.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-svg-face" class="anchor"&gt;
  &lt;/a&gt;
  Create the SVG Face
&lt;/h2&gt;

&lt;p&gt;We can achieve a basic face using two SVG elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;two &lt;code&gt;ellipse&lt;/code&gt; for the eyes&lt;/li&gt;
&lt;li&gt;one &lt;code&gt;path&lt;/code&gt; for the mouth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But first we need our base SVG element, for which we'll include the &lt;code&gt;viewBox&lt;/code&gt; attribute which acts like a window into the SVG and provides hints at the SVG aspect ratio:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 60"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we'll add the eyes. These will be nearly identical except for the &lt;code&gt;cx&lt;/code&gt; attribute, which moves the position of the &lt;code&gt;ellipse&lt;/code&gt; along the &lt;code&gt;x-axis&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 60"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"15"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"12"&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;ry=&lt;/span&gt;&lt;span class="s"&gt;"9"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"eye right-eye"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"80"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"12"&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;ry=&lt;/span&gt;&lt;span class="s"&gt;"9"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"eye left-eye"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We add &lt;code&gt;fill="currentColor"&lt;/code&gt; so that the color defaults to the text color of the SVG's nearest ancestor.&lt;/p&gt;

&lt;p&gt;You can review the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse"&gt;MDN docs on &lt;code&gt;ellipse&lt;/code&gt;&lt;/a&gt; for more info on the other attributes.&lt;/p&gt;

&lt;p&gt;Finally, we add a &lt;code&gt;path&lt;/code&gt; for the smile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 60"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- (ellipses) --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; 
    &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; 
    &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M30 40 c0 20, 40 20, 40 0"&lt;/span&gt; 
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's break down the attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;stroke-linecap="round"&lt;/code&gt; - this changes the default "end" of the path stroke from square to provide a softer end. This will be most obvious for the "happy" and "sad" emotions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fill&lt;/code&gt; and &lt;code&gt;stroke&lt;/code&gt; - we again use &lt;code&gt;currentColor&lt;/code&gt; as described for the &lt;code&gt;ellipse&lt;/code&gt;s. Using it for &lt;code&gt;fill&lt;/code&gt; creates the appearance of an open-mouth smile for our default emotion of "Excited".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;d&lt;/code&gt; - this is what draws the path. 

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;M30 40&lt;/code&gt; positions the starting point (left point of the smile) at position &lt;code&gt;30&lt;/code&gt; on the x-axis and position &lt;code&gt;40&lt;/code&gt; on the y-axis. This is relative to our &lt;code&gt;viewBox&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next we create a curve - &lt;code&gt;c&lt;/code&gt; - by creating &lt;code&gt;x y&lt;/code&gt; pairs. Every two numbers are a pair, so &lt;code&gt;0 20&lt;/code&gt; means &lt;code&gt;0x 20y&lt;/code&gt;. These are relative to the &lt;code&gt;M&lt;/code&gt; values, and create control points for the SVG to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths#Curve_commands"&gt;draw Bézier curves as described in the MDN docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's the face with the Bézier curve control points visualized:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjSYHkFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qeeq1hd9tvbwuxrtvjse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjSYHkFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qeeq1hd9tvbwuxrtvjse.png" alt="The SVG face with four red dots over and around the mouth, one in the top left, one 30% across and ~5% below, one 60% across and ~5% below, and the last in the top right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-the-emotions" class="anchor"&gt;
  &lt;/a&gt;
  Styling the Emotions
&lt;/h2&gt;

&lt;p&gt;Our first emotion, "Excited", is the default state as mentioned.&lt;/p&gt;

&lt;p&gt;For both "Happy" and "Sad", we want to remove the &lt;code&gt;fill&lt;/code&gt; on &lt;code&gt;path&lt;/code&gt; to change the mouth appearance to a closed-mouth smile. We'll also increase the &lt;code&gt;stroke-width&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="nc"&gt;.happy&lt;/span&gt; &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="nc"&gt;.sad&lt;/span&gt; &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;stroke-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The full demo shows how to use &lt;code&gt;clamp&lt;/code&gt; for a more dynamically sized &lt;code&gt;stroke-width&lt;/code&gt; and button &lt;code&gt;font-size&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For sad, we need to flip the smile upside down, and we can quickly accomplish this with a CSS transform:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="nc"&gt;.sad&lt;/span&gt; &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;scaleY(-1)&lt;/code&gt; horizontally flips the element. Since we have multiple elements within the SVG, we had to also use &lt;code&gt;transform-origin&lt;/code&gt; to make sure the transform of the &lt;code&gt;path&lt;/code&gt; was relative to it's original location. TBH, this took a little trial and error to find these values :)&lt;/p&gt;

&lt;p&gt;In the demo, you'll also see a transition added to enable smoothly moving from one emotion to the next. Altogether, these properties allow simple but effective animations without the need to pull in an animation framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animating-the-wink" class="anchor"&gt;
  &lt;/a&gt;
  Animating the Wink
&lt;/h2&gt;

&lt;p&gt;The wink also uses a &lt;code&gt;transform&lt;/code&gt; but within an animation setup with &lt;code&gt;@keyframes&lt;/code&gt;. We alternate between a "squint", which is achieved by flattening the eye &lt;code&gt;ellipse&lt;/code&gt;, and fully open to produce the wink effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;wink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The squint uses a classic animation trick similar to a ball squish that simultaneously slightly widens the element (&lt;code&gt;1.5&lt;/code&gt;) while also reducing it's height (&lt;code&gt;0.25&lt;/code&gt;) within the &lt;code&gt;scale&lt;/code&gt; function. Those numbers are proportions of the computed element size. So to bring it back to the original size, we update the values both to &lt;code&gt;1&lt;/code&gt; (since it's the same for both, we can define it with a single number).&lt;/p&gt;

&lt;p&gt;To apply the &lt;code&gt;wink&lt;/code&gt; animation uses the following CSS rule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="nc"&gt;.wink&lt;/span&gt; &lt;span class="nc"&gt;.eye&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Ensure the default element is at normal scale */&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wink&lt;/span&gt; &lt;span class="m"&gt;480ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again we had to adjust the &lt;code&gt;transform-origin&lt;/code&gt; for the same reasons as discussed for the smile &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We applied the animation with a duration of &lt;code&gt;480ms&lt;/code&gt;, an easing function of &lt;code&gt;ease-in-out&lt;/code&gt;, and play it &lt;code&gt;1&lt;/code&gt; time.&lt;/p&gt;

&lt;p&gt;But you may have noticed in the preview gif at the beginning (or if you skipped to the demo) that the wink repeats every so often. For this, we need to add in a bit of JavaScript to re-trigger the animation.&lt;/p&gt;

&lt;p&gt;The very minimal Javascript finds the SVG element, then uses &lt;code&gt;setInterval&lt;/code&gt; to add the &lt;code&gt;wink&lt;/code&gt; class every &lt;code&gt;5000&lt;/code&gt; milliseconds (5 seconds).&lt;/p&gt;

&lt;p&gt;Importantly, we add an event listener attached to &lt;code&gt;animationend&lt;/code&gt; to &lt;em&gt;remove&lt;/em&gt; the &lt;code&gt;wink&lt;/code&gt; class. Adding and removing the &lt;code&gt;wink&lt;/code&gt; class allows restarting the animation at the interval.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buddy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.buddy svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;buddy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove the wink class to reset the animation after it ends&lt;/span&gt;
&lt;span class="nx"&gt;buddy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;animationend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;buddy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The demo includes an extra check to only allow adding the &lt;code&gt;wink&lt;/code&gt; class if Buddy isn't "Sad".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;You can review the full demo in this CodePen, and then check out &lt;a href="https://buttonbuddy.dev"&gt;ButtonBuddy.dev&lt;/a&gt; to create your own accessible button color palette!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/5t3ph/embed/YzGaqgd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you enjoyed this tutorial and &lt;a href="https://buttonbuddy.dev"&gt;ButtonBuddy&lt;/a&gt;, check out my other CSS resources at &lt;a href="https://moderncss.dev"&gt;ModernCSS.dev&lt;/a&gt; and consider &lt;a href="https://www.buymeacoffee.com/moderncss"&gt;buying me a coffee&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Elm in the server (or anywhere else) with promises</title>
      <author>Éber Freitas Dias</author>
      <pubDate>Mon, 04 Jan 2021 14:20:44 +0000</pubDate>
      <link>https://dev.to/eberfreitas/elm-in-the-server-or-anywhere-else-with-promises-5eoj</link>
      <guid>https://dev.to/eberfreitas/elm-in-the-server-or-anywhere-else-with-promises-5eoj</guid>
      <description>&lt;p&gt;Elm was created to run on the browser, but every once in a while someone will ask about how to run Elm in a server environment.&lt;/p&gt;

&lt;p&gt;At my current job, we needed to sync several clients and persist that shared state somewhere, so we thought it would be a good idea if the server could act like another client that could persist that state in a centralized place.&lt;/p&gt;

&lt;p&gt;For that, we created a Node/Express server to run our Elm code and at first, it was very hackish.&lt;/p&gt;

&lt;p&gt;In a server-like environment, you mostly always have a request and a response tied together. You ask for something and you might get what you requested or an error. It doesn't matter, for every request, there is a response.&lt;/p&gt;

&lt;p&gt;But Elm doesn't work like that if you wanna talk to the outside world. Yes, you can use &lt;a href="https://guide.elm-lang.org/interop/ports.html"&gt;ports&lt;/a&gt; for outside communication, but ports follow the actor model of message passing. So contrary to the request/response nature of server communication, you can only send and receive messages in Elm. That might sound like the same thing but it is not. You can receive a message without ever sending one in the first place. Or send a message without the need to wait for a message back. You can send a message and receive multiple messages back and so on. There is no coupling between sending and receiving a message and that makes Elm kinda unsuitable for a server software where request/response messages are tied.&lt;/p&gt;

&lt;p&gt;After looking for better solutions I came across &lt;a href="https://discourse.elm-lang.org/t/imitating-synchronicity-with-ports/1930"&gt;this post&lt;/a&gt; in the forums where the user &lt;a href="https://discourse.elm-lang.org/u/joakin"&gt;joakin&lt;/a&gt; made a clever suggestion: just send the &lt;strong&gt;response&lt;/strong&gt; object from the JavaScript side to a port and send it back through another port when replying to whatever it was requesting. Use the response object to send a proper response to the right client and there you go. You can see an example of that &lt;a href="https://github.com/joakin/node-elm-server"&gt;on this helpful repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That is something I didn't know: you can pass any JavaScript value as a &lt;a href="https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#Value"&gt;&lt;code&gt;Json.Decode.Value&lt;/code&gt;&lt;/a&gt; to Elm, even functions. Of course, you can't do much with them inside Elm but in this case, it helps to tie a specific function call to the message we will send back.&lt;/p&gt;

&lt;p&gt;The idea is great and helps us to have some type of tied request/response flow. The problem is when we needed to test the integration. It was easier to bypass all the server stuff and focus on the interoperation between Node and Elm directly. Or even worse, what if the software we were writing wasn't a Node/Express server at all? That is when my boss and co-worker &lt;a href="https://twitter.com/nateabele"&gt;Nate&lt;/a&gt; suggested we used promises. Instead of sending the response object from Express to Elm, we could send the resolve function from a promise!&lt;/p&gt;

&lt;p&gt;I have made a fork from the example code above with these changes. You can check it out &lt;a href="https://github.com/eberfreitas/node-elm-server"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the &lt;a href="https://github.com/eberfreitas/node-elm-server/blob/master/src/Server.elm"&gt;Elm side&lt;/a&gt;, nothing much has changed. I just made a few naming changes to better reflect the new nature of the interoperation with the JavaScript code. But other than that, we didn't have to change much to make this approach work as both the previous response object that was being sent from Express and the new resolve function from the promise are both just &lt;code&gt;Json.Decode.Value&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;The real magic is on the &lt;a href="https://github.com/eberfreitas/node-elm-server/blob/master/index.js"&gt;JavaScript code&lt;/a&gt;. It is a little bit more complex but it decouples the Elm code and ports from Express itself, making it possible to use that approach virtually anywhere. Here is the bit that makes everything work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;http&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(([{&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, it is possible to use Elm in the server, and I would argue that with that approach if you need some kind of tied request/response integration, you can use Elm anywhere where you can use Node. &lt;strong&gt;But is it useful?&lt;/strong&gt; In our case, where we wanted to use most of the code from our client on the server it was a total win, but I would think twice if I wanted to build a full server with Elm as it just doesn't have all the things you will need to make it a good developing experience, although it would be possible.&lt;/p&gt;

&lt;p&gt;Maybe &lt;a href="https://youtu.be/ZnYa99QoznE?t=4755"&gt;Roc&lt;/a&gt; will be the language we will use for cases like that. Can't wait for it!&lt;/p&gt;

&lt;p&gt;So, what do you think about this approach? Have you done something similar or vastly different to solve the same problem?&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>elm</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Code Splitting Explained</title>
      <author>Laurie</author>
      <pubDate>Mon, 04 Jan 2021 13:25:15 +0000</pubDate>
      <link>https://dev.to/laurieontech/code-splitting-explained-3ijl</link>
      <guid>https://dev.to/laurieontech/code-splitting-explained-3ijl</guid>
      <description>&lt;p&gt;If you're familiar with JavaScript applications you may have heard the term code splitting before. So what does it mean?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition" class="anchor"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting"&gt;MDN&lt;/a&gt;, "Code splitting is the splitting of code into various bundles or components which can then be loaded on demand or in parallel."&lt;/p&gt;

&lt;p&gt;In other words, when you have different chunks of code you can make choices about how you load them. When you only have one big one, your hands are tied.&lt;/p&gt;

&lt;p&gt;But what does code splitting get you? And why is it necessary?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance" class="anchor"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;When your application is bundled up for use, it isn't just your application code that's included. The bundle also comes with all the third-party libraries your code uses. That can make for a pretty big bundle size! And as the size of this bundle increases, loading it can become costly.&lt;/p&gt;

&lt;p&gt;Suppose all of that code had to be downloaded every time a user loaded a page. It could take a considerable amount of time until the page was usable. This is not a great experience for users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Code splitting allows you to break up the monolithic bundle into various smaller bundles. You can then load the bundles in parallel or implement lazy loading, delaying download of certain code until a user needs it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools" class="anchor"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;p&gt;The most common tools for implementing code splitting are &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; and &lt;a href="http://browserify.org/"&gt;Browserify&lt;/a&gt;. However, you may be implementing code splitting behavior without even realizing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async" class="anchor"&gt;
  &lt;/a&gt;
  Async
&lt;/h2&gt;

&lt;p&gt;You're likely used to code at the top of your file that looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyScript&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./my-script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This includes &lt;code&gt;my-script&lt;/code&gt; in your main application bundle.&lt;/p&gt;

&lt;p&gt;However, there is another way. Suppose you only needed that script to run in a certain scenario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`./my-script`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// do something here&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you've read my &lt;a href="https://laurieontech.com/posts/webpack-or-node/"&gt;Node or Webpack post&lt;/a&gt; you may recall that Webpack often has implementations of functions you think you're familiar with. In this case, the code above is using Webpack's import function, not the browser or Node.js supported dynamic import. It loads the script asyncronously, so that it doesn't hold up the rest of the code, and returns a Promise.&lt;/p&gt;

&lt;p&gt;By doing this, the code inside &lt;code&gt;my-script&lt;/code&gt; becomes part of a different bundle. The snippet above is performing code splitting!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-that-it" class="anchor"&gt;
  &lt;/a&gt;
  Is that it?
&lt;/h2&gt;

&lt;p&gt;There is a lot to talk about here. Bundling and performance are vast topics! But this is a nice primer.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webpack</category>
    </item>
    <item>
      <title>Advanced Styling using CSS Attribute Selectors</title>
      <author>Linda</author>
      <pubDate>Mon, 04 Jan 2021 12:58:00 +0000</pubDate>
      <link>https://dev.to/lindaojo/advanced-styling-using-css-attribute-selectors-2pkh</link>
      <guid>https://dev.to/lindaojo/advanced-styling-using-css-attribute-selectors-2pkh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GVAy3juu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7gn65qvr6ypwsap4j1ou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GVAy3juu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7gn65qvr6ypwsap4j1ou.png" alt="CSS code snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS is that friend we all love and hate. Another reason to love CSS is it enables you to select elements using their attributes.&lt;/p&gt;

&lt;p&gt;The attributes often selected for styling are "class" and "id" attribute. In this article, I will show you how to target specific elements using other attributes and their specified values.&lt;/p&gt;

&lt;h3&gt;[attribute] Selector&lt;/h3&gt;

&lt;p&gt;The [attribute] Selector selects elements with a specified attribute.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The selector above targets only images that contain the "alt" attribute so images with "alt" attribute would have a yellow border.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/dog.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"cute white dog"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/cat.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;// ❌ not selected, no border
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;[attribute="value"] Selector&lt;/h3&gt;

&lt;p&gt;The [attribute="value"] selector selects elements that contain a specific attribute with an exact specified value.&lt;/p&gt;

&lt;p&gt;Attribute value strings are by default case-sensitive, but can be changed to case-insensitive by adding 'i' before the closing bracket as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"paper"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;//Case&lt;/span&gt; &lt;span class="err"&gt;sensitive&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"PapEr"&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="err"&gt;//Case&lt;/span&gt; &lt;span class="err"&gt;insensitive&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;The&lt;/span&gt; &lt;span class="nt"&gt;selectors&lt;/span&gt; &lt;span class="nt"&gt;above&lt;/span&gt; &lt;span class="nt"&gt;target&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;same&lt;/span&gt; &lt;span class="nt"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/paper.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"paper"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The selectors above target only images that contain the "alt" attributes whose value is "paper".&lt;/p&gt;

&lt;h3&gt;[attribute*="value"] Selector&lt;/h3&gt;

&lt;p&gt;The [attribute*="value"] selector is used to select elements whose attribute value contains a specified value anywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="s1"&gt;"ter"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/paper.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"alter"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/paper.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"termite"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/paper.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"flattering"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;[attribute~="value"] Selector&lt;/h3&gt;

&lt;p&gt;The [attribute~="value"] selector is used to select elements whose attribute value contains a specified word.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;~=&lt;/span&gt;&lt;span class="s1"&gt;"coin"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/man.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"coin collector"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/office.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;" Buycoins Headquaters"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ❌ not selected, no border
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;[attribute^="value"] Selector&lt;/h3&gt;

&lt;p&gt;The [attribute^="value"] selector is used to select elements whose attribute value begins with a specified value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"hat"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/hat.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"hat"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/ronaldo.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"hatrick"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;[attribute|="value"] Selector&lt;/h3&gt;

&lt;p&gt;The [attribute|="value"] selector is used to select elements with the specified attribute starting with the specified value. In this case, the value has to be a whole word or the first word in a hyphen-separated word.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="s1"&gt;"front"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/linda.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"front-end-developer"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/linda.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"frontend-developer"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ❌ not selected, no border
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/location.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"front"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;[attribute$="value"] Selector&lt;/h3&gt;

&lt;p&gt;The [attribute$="value"] selector is used to select elements whose attribute value ends with a specified value. The value does not have to be a whole word.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;alt&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"tion"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/banner.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"education"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./../../images/linda.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"hand-lotion"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // ✅ Selected, has yellow border

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Coding challenges #2 🧩</title>
      <author>Killian Frappart</author>
      <pubDate>Mon, 04 Jan 2021 11:07:09 +0000</pubDate>
      <link>https://dev.to/killianfrappartdev/coding-challenges-2-1bmp</link>
      <guid>https://dev.to/killianfrappartdev/coding-challenges-2-1bmp</guid>
      <description>&lt;p&gt;Greetings fellow problem solvers! 🤓&lt;/p&gt;

&lt;p&gt;As I said already, problem-solving is just like a muscle and it is necessary to practice often in order to improve and grow as a developer.&lt;/p&gt;

&lt;p&gt;In this second episode, I picked some easy problems to solve from my favorite algorithms website. &lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;Can you get the loop ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Morse Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Rectangle into Squares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Playing with digits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="1"&gt;Can you get the loop ?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;From &lt;a href="https://www.codewars.com/kata/52a89c2ea8ddc5547a000863"&gt;Codewars&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You are given a node that is the beginning of a linked list. This list always contains a tail and a loop.&lt;/p&gt;

&lt;p&gt;Your objective is to determine the length of the loop.&lt;/p&gt;

&lt;p&gt;For example in the following picture the tail's size is 3 and the loop size is 11.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--db_3RNdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzyxdp7rgi5xplp8o71q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--db_3RNdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzyxdp7rgi5xplp8o71q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the "next" attribute to get the following node.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: do NOT mutate the nodes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My solution (JavaScript):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loop_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;turtle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rabbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* We need the turtle and the rabbit to start at the same 
  place. (The rabbit being faster will catch up the turtle at 
  some point) */&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;turtle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;turtle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;rabbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rabbit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNext&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getNext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;turtle&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;rabbit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="cm"&gt;/* The rabbit goes for a run and we know that ends when he 
  reaches the turtle position again. */&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;rabbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rabbit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;turtle&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;rabbit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2 id="2"&gt;Morse Code&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;From &lt;a href="https://www.codewars.com/kata/54b724efac3d5402db00065e"&gt;Codewars&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this kata you have to write a simple Morse code decoder. While the Morse code is now mostly superseded by voice and digital data communication channels, it still has its use in some applications around the world.&lt;br&gt;
The Morse code encodes every character as a sequence of "dots" and "dashes". For example, the letter A is coded as ·−, letter Q is coded as −−·−, and digit 1 is coded as ·−−−−. The Morse code is case-insensitive, traditionally capital letters are used. When the message is written in Morse code, a single space is used to separate the character codes and 3 spaces are used to separate words.&lt;/p&gt;

&lt;p&gt;NOTE: Extra spaces before or after the code have no meaning and should be ignored.&lt;/p&gt;

&lt;p&gt;In addition to letters, digits and some punctuation, there are some special service codes, the most notorious of those is the international distress signal SOS (that was first issued by Titanic), that is coded as ···−−−···. These special codes are treated as single special characters, and usually are transmitted as separate words.&lt;/p&gt;

&lt;p&gt;Your task is to implement a function that would take the morse code as input and return a decoded human-readable string.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;decodeMorse('.... . -.--   .--- ..- -.. .')
#should return "HEY JUDE"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: For coding purposes you have to use ASCII characters . and -, not Unicode characters.&lt;/p&gt;

&lt;p&gt;The Morse code table is preloaded for you as a dictionary, feel free to use it:&lt;/p&gt;

&lt;p&gt;JavaScript/TypeScript: MORSE_CODE['.--']&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My solution (JavaScript):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decodeMorse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;morseCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;morseCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;   &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wordArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;wordArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MORSE_CODE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wordArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2 id="3"&gt;Rectangle into Squares&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;From &lt;a href="https://www.codewars.com/kata/55466989aeecab5aac00003e"&gt;Codewars&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The drawing below gives an idea of how to cut a given "true" rectangle into squares ("true" rectangle meaning that the two dimensions are different).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t5nJQrwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/izsg23eginaqpc5y4iln.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t5nJQrwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/izsg23eginaqpc5y4iln.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you translate this drawing into an algorithm?&lt;/p&gt;

&lt;p&gt;You will be given two dimensions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a positive integer length (parameter named lng)&lt;/li&gt;
&lt;li&gt;a positive integer width (parameter named wdth)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will return a collection or a string (depending on the language; Shell bash, PowerShell, Pascal and Fortran return a string) with the size of each of the squares.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  sqInRect(5, 3) should return "3 2 1 1"
  sqInRect(3, 5) should return "3 2 1 1"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;My solution (JavaScript):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sqInRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wdth&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wdth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;wdth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lngx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wdthx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wdth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;wdth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;



  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lngx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;wdthx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wdthx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wdthx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;lngx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;lngx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;wdthx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lngx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lngx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;wdthx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wdthx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lngx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2 id="4"&gt;Meeting&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;From &lt;a href="https://www.codewars.com/kata/59df2f8f08c6cec835000012/train/python"&gt;Codewars&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;John has invited some friends. His list is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;s = "Fred:Corwill;Wilfred:Corwill;Barney:Tornbull;Betty:Tornbull;Bjon:Tornbull;Raphael:Corwill;Alfred:Corwill";
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Could you make a program that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;makes this string uppercase&lt;/li&gt;
&lt;li&gt;gives it sorted in alphabetical order by last name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the last names are the same, sort them by first name. Last name and first name of a guest come in the result between parentheses separated by a comma.&lt;/p&gt;

&lt;p&gt;So the result of function meeting(s) will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"(CORWILL, ALFRED)(CORWILL, FRED)(CORWILL, RAPHAEL)(CORWILL, WILFRED)(TORNBULL, BARNEY)(TORNBULL, BETTY)(TORNBULL, BJON)"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It can happen that in two distinct families with the same family name two people have the same first name too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My solution (Python):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="c1"&gt;# Convert string to list
&lt;/span&gt;    &lt;span class="n"&gt;names_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Create a dictionnary and bind a list of first names to every last names
&lt;/span&gt;    &lt;span class="n"&gt;names_dic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;names_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;names_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Sort and add every entry to the result string
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names_dic&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2 id="5"&gt;Playing with digits&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;From &lt;a href="https://www.codewars.com/kata/5552101f47fc5178b1000050"&gt;Codewars&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some numbers have funny properties. For example:&lt;/p&gt;

&lt;p&gt;89 --&amp;gt; 8¹ + 9² = 89 * 1&lt;/p&gt;

&lt;p&gt;695 --&amp;gt; 6² + 9³ + 5⁴= 1390 = 695 * 2&lt;/p&gt;

&lt;p&gt;46288 --&amp;gt; 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51&lt;/p&gt;

&lt;p&gt;Given a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p&lt;/p&gt;

&lt;p&gt;we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n.&lt;br&gt;
In other words:&lt;/p&gt;

&lt;p&gt;Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k&lt;/p&gt;

&lt;p&gt;If it is the case we will return k, if not return -1.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: n and p will always be given as strictly positive integers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dig_pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1
dig_pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k
dig_pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2
dig_pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;My solution (JavaScript):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;digPow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;digitArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nb"&gt;sun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;digitArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;sun&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;digitArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sun&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;sun&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sun&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>python</category>
      <category>challenge</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why You Should Learn Rust in 2021</title>
      <author>Serokell</author>
      <pubDate>Mon, 04 Jan 2021 09:38:45 +0000</pubDate>
      <link>https://dev.to/serokell/why-you-should-learn-rust-in-2021-po</link>
      <guid>https://dev.to/serokell/why-you-should-learn-rust-in-2021-po</guid>
      <description>&lt;p&gt;According to the StackOverflow surveys,  Rust has been &lt;a href="https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted"&gt;the most loved programming language&lt;/a&gt;  for the last four years in a row. &lt;/p&gt;

&lt;p&gt;Most of the people that have tried out Rust would like to continue using it. But if you haven’t used it, you might wonder – what is Rust, why is it so special, and what makes it so popular amongst developers?&lt;/p&gt;

&lt;p&gt;In this guide, I’ll try to give a quick intro and answer all the questions you might have about Rust. &lt;/p&gt;

&lt;p&gt;Here are some of the points I will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-guide#what-is-rust%3F"&gt;What is Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://serokell.io/blog/rust-guide#data-ownership-model"&gt;Rust’s borrow checker&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-guide#rust-vs.-c%2B%2B"&gt;Rust vs. C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-guide#rust-and-webassembly"&gt;Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://serokell.io/blog/rust-guide#getting-started-with-rust"&gt;Getting started with Rust&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-guide#further-learning"&gt;Further learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rust" class="anchor"&gt;
  &lt;/a&gt;
  What is Rust?
&lt;/h2&gt;

&lt;p&gt;Rust is a low-level statically-typed multi-paradigm programming language that’s focused on safety and performance. &lt;/p&gt;

&lt;p&gt;Rust solves problems that C/C++ has been struggling with for a long time, such as memory errors and building concurrent programs. &lt;/p&gt;

&lt;p&gt;It has three main benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  better memory safety due to the compiler; &lt;/li&gt;
&lt;li&gt;  easier concurrency due to the data ownership model that prevents data races;&lt;/li&gt;
&lt;li&gt;  zero-cost abstractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s go through each of these in turn. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-segfaults" class="anchor"&gt;
  &lt;/a&gt;
  No segfaults
&lt;/h3&gt;

&lt;p&gt;If you want to do system programming, you need the low-level control that memory management provides. Unfortunately, manual management comes with a lot of issues in languages like C. Despite the presence of tools like Valgrind, catching memory management problems is tricky. &lt;/p&gt;

&lt;p&gt;Rust prevents these issues. Rust’s ownership system analyses the program’s memory management at compile-time, making sure that bugs due to poor memory management can’t happen and that garbage collection is unnecessary. &lt;/p&gt;

&lt;p&gt;Furthermore, if you want to do super-optimized implementations in a C-like manner, you can do that while expressly separating them from the rest of the code with the &lt;a href="https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html"&gt;unsafe&lt;/a&gt; keyword.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easier-concurrency" class="anchor"&gt;
  &lt;/a&gt;
  Easier concurrency
&lt;/h3&gt;

&lt;p&gt;Due to the borrow checker, Rust can prevent data races at compile-time.&lt;/p&gt;

&lt;p&gt;Data races occur when two threads access the same memory at the same time, and they can lead to some nasty, unpredictable behavior. Thankfully, preventing undefined behavior is all what Rust is about. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zerocost-abstractions" class="anchor"&gt;
  &lt;/a&gt;
  Zero-cost abstractions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://carette.xyz/posts/zero_cost_abstraction/"&gt;Zero-cost abstractions&lt;/a&gt; make sure that there is virtually no runtime overhead for the abstractions that you use. In simpler words: there is no speed difference between low-level code and one written with abstractions. &lt;/p&gt;

&lt;p&gt;Are these things important? Yes. For example, &lt;a href="https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/"&gt;around 70 % of the issues&lt;/a&gt; addressed by Microsoft in the past 12 years have been memory errors. &lt;a href="https://www.zdnet.com/article/chrome-70-of-all-security-bugs-are-memory-safety-issues/"&gt;Same with Google Chrome&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-rust-good-for" class="anchor"&gt;
  &lt;/a&gt;
  What is Rust good for?
&lt;/h3&gt;

&lt;p&gt;Rust being a rather low-level language, it's useful when you need to squeeze more out of the resources you have. Since it's statically typed, the type system helps you deter certain classes of bugs during compilation. Therefore, you will tend to use it when your resources are limited, and when it is important that your software doesn't fail. In contrast, high-level dynamically typed languages like Python and JavaScript are better for things like quick prototypes.&lt;/p&gt;

&lt;p&gt;Here are some of Rust’s use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Powerful, cross-platform command-line tools.&lt;/li&gt;
&lt;li&gt;  Distributed online services.&lt;/li&gt;
&lt;li&gt;  Embedded devices.&lt;/li&gt;
&lt;li&gt;  Anywhere else you would need systems programming, like &lt;a href="https://research.mozilla.org/servo-engines/"&gt;browser engines&lt;/a&gt; and, perhaps, &lt;a href="https://www.theregister.com/2020/07/13/rust_code_in_linux_kernel/"&gt;Linux kernel&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, here are a few operating systems, written in Rust: &lt;a href="https://www.redox-os.org/"&gt;Redox&lt;/a&gt;, &lt;a href="https://intermezzos.github.io/"&gt;intermezzOS&lt;/a&gt;, &lt;a href="https://github.com/QuiltOS/QuiltOS"&gt;QuiltOS&lt;/a&gt;, &lt;a href="https://github.com/sorpaas/rux"&gt;Rux&lt;/a&gt;, &lt;a href="https://github.com/tock/tock"&gt;Tock&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-rust-objectoriented" class="anchor"&gt;
  &lt;/a&gt;
  Is Rust object-oriented?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Who knows what object-oriented means nowadays?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer is &lt;em&gt;not really.&lt;/em&gt; Rust has some object-oriented features: you can create structs, and they can contain both data and associated methods on that data, which is kind of similar to classes minus inheritance. But in contrast to languages like Java, Rust doesn’t have inheritance and uses traits to achieve polymorphism instead. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-rust-a-functional-programming-language" class="anchor"&gt;
  &lt;/a&gt;
  Is Rust a functional programming language?
&lt;/h3&gt;

&lt;p&gt;Even though Rust is superficially quite similar to C, it is heavily influenced by the ML family of languages. (This family includes languages like OCaml, F#, and Haskell.) For example, Rust traits are basically Haskell’s typeclasses, and Rust has very powerful pattern matching capabilities.&lt;/p&gt;

&lt;p&gt;Rust does feature more mutability than functional programmers would usually be accustomed to. We can think of it like this: both Rust and FP try to avoid shared mutable state. While FP is focused on avoiding mutable state, Rust tries to avoid the shared part of the danger. Rust is also missing a lot of stuff that would make functional programming doable in it, such as tail call optimization and good support for functional data structures. &lt;/p&gt;

&lt;p&gt;All in all, there is enough support for functional programming in Rust for somebody to have written &lt;a href="https://www.amazon.com/Hands-Functional-Programming-Rust-applications-ebook/dp/B07C5S4729"&gt;a book&lt;/a&gt; about it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-rust-good-for-game-development" class="anchor"&gt;
  &lt;/a&gt;
  Is Rust good for game development?
&lt;/h3&gt;

&lt;p&gt;Theoretically, yes. Since Rust is focused on performance and does not use a garbage collector, games written in it should be performant and predictably fast. &lt;/p&gt;

&lt;p&gt;Unfortunately, the ecosystem is still young, and there is nothing written in Rust that would compare to Unreal Engine, for example. The pieces are there, though, and Rust has a lively community. If you want to see examples of games written in Rust, you can go to the &lt;a href="https://www.reddit.com/r/rust_gamedev/"&gt;Rust game dev subreddit&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;More on Rust game dev: &lt;a href="https://arewegameyet.rs/"&gt;Are we game yet?&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-rust-good-for-web-development" class="anchor"&gt;
  &lt;/a&gt;
  Is Rust good for web development?
&lt;/h3&gt;

&lt;p&gt;Rust has multiple frameworks for web development like &lt;a href="https://github.com/actix/actix-web"&gt;Actix Web&lt;/a&gt; and &lt;a href="https://rocket.rs/"&gt;Rocket&lt;/a&gt; that are very usable and well-built. In particular, if you are looking for pure speed, Actix Web hits the top of &lt;a href="https://www.techempower.com/benchmarks/"&gt;framework benchmarks&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Rust doesn’t have anything that can compete with the ecosystem of frameworks like Django and Rails, though. Since Rust is a rather young language, a lot of handy utility libraries are missing, which means that the development process is not that simple and easy. &lt;/p&gt;

&lt;p&gt;More on web development in Rust: &lt;a href="https://www.arewewebyet.org/"&gt;Are we web yet?&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Rust is a powerful tool for writing memory-safe and thread-safe applications while keeping it fast. While it has great potential, it is unclear whether the choice of Rust is warranted in fields where considerable library support is needed &lt;em&gt;right at this very moment&lt;/em&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#data-ownership-model" class="anchor"&gt;
  &lt;/a&gt;
  Data ownership model
&lt;/h2&gt;

&lt;p&gt;Let’s dive into one of the things that make Rust special – its borrow checker.&lt;/p&gt;

&lt;p&gt;To start explaining data ownership in Rust, I need to introduce you to two kinds of memory in low-level programming: the stack and the heap. &lt;/p&gt;

&lt;p&gt;Stack is used for static memory allocation, while heap is used for dynamic memory allocation. In simpler words: stack is for things whose memory size we know (like integers or str, which in Rust is a string-in-memory), while heap is for things whose size might change significantly (a regular String). To operate with these mutable things, we allocate space for them on the heap and put a pointer to that space on the stack. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQAu7ns1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/18/185qd9q0.1_%2827%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQAu7ns1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/18/185qd9q0.1_%2827%29.jpg" alt="Data ownership in Rust"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#moving" class="anchor"&gt;
  &lt;/a&gt;
  Moving
&lt;/h3&gt;

&lt;p&gt;But there’s a problem: what to do if two variables are assigned a pointer to the same data on the heap? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WMQfI-21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/ub/ubsq62oz.2_%2819%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMQfI-21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/ub/ubsq62oz.2_%2819%29.jpg" alt="Example: two variables are assigned a pointer to the same data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we try to change one of the variables by changing the data underneath, the other one will also change, which is frequently not something we want.&lt;/p&gt;

&lt;p&gt;The same (and even worse) situation happens if there two threads are operating with the same data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dssFd2o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/41/416s5oes.3_%2817%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dssFd2o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/41/416s5oes.3_%2817%29.jpg" alt="Illustration: two threads operating with the same data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine if one of these threads mutate the data on the heap while the other is reading from it. Oh, the eldritch horror that can come out of it! We call this a data race. &lt;/p&gt;

&lt;p&gt;Therefore, in Rust, only one variable can own a certain piece of data. Once you assign that data to another variable, it is either moved or copied.&lt;/p&gt;

&lt;p&gt;To give an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"All men who repeat a line from Shakespeare are William Shakespeare."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="nf"&gt;.push_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"― Jorge Luis Borges"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This won’t compile because the ownership of data gets moved to s2, and &lt;code&gt;s1&lt;/code&gt; can’t be accessed after the move anymore. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TCUBSbJENO4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#borrowing" class="anchor"&gt;
  &lt;/a&gt;
  Borrowing
&lt;/h3&gt;

&lt;p&gt;Now, moving the ownership around manually is quite troublesome since you always need to make sure to give it back.&lt;/p&gt;

&lt;p&gt;To solve that, we can borrow variables by creating references to them. Using these references doesn’t transfer ownership, but lets us either read the variable (immutable reference or &lt;code&gt;&amp;amp;&lt;/code&gt;) or even mutate it (mutable reference or &lt;code&gt;mut &amp;amp;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;But there are limits on references, since having multiple mutable references would amount to the same thing as having multiple owners. &lt;/p&gt;

&lt;p&gt;That’s why the compiler enforces a rule for referencing things.&lt;/p&gt;

&lt;p&gt;You can do either: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  multiple immutable references (read-only), &lt;/li&gt;
&lt;li&gt;  one mutable reference (read-and-write).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an intuitive metaphor that I shamelessly borrow from &lt;a href="https://github.com/Dhghomon/easy_rust"&gt;Rust explained using easy English&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Think of data referenced as a Powerpoint presentation. You can either edit the presentation (mutable ref), or present it to any amount of people (immutable ref), but if it’s presented while it’s being edited, heads might roll in the respective department. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8M0QfLUDaaA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rust-vs-c" class="anchor"&gt;
  &lt;/a&gt;
  Rust vs. C++
&lt;/h2&gt;

&lt;p&gt;Now that we know what makes Rust special, we can compare it to the other main systems programming language – C++. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w8NuEWc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/ih/ihu89a0m.4_%2813%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8NuEWc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/ih/ihu89a0m.4_%2813%29.jpg" alt="Rust and C++ comparison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-choose-rust-over-c" class="anchor"&gt;
  &lt;/a&gt;
  Why choose Rust over C++
&lt;/h3&gt;

&lt;p&gt;In C++, developers have more issues when trying to avoid undefined behavior. In Rust, the borrow checker enables you to avoid unsafe behavior by design. This eradicates a whole class of bugs, and that’s quite important. &lt;/p&gt;

&lt;p&gt;In addition, Rust is a much more modern and, in some aspects, better-designed language. In particular, the powerful type system will help you even when its main objective is not to catch memory errors, and being new, it can create its tooling with the best practices in mind without worrying about legacy codebases.  &lt;/p&gt;

&lt;p&gt;If you don’t want to drop your old C code, Rust has a solution. You can easily call your functions through FFI (Foreign Function Interface). Of course, the compiler can’t guarantee the safety of this code, but it’s a good last resort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-choose-c-over-rust" class="anchor"&gt;
  &lt;/a&gt;
  Why choose C++ over Rust
&lt;/h3&gt;

&lt;p&gt;C and C++ have been around for decades. Whatever problem you want to solve, there’s most likely a ton of libraries by people that have had the same exact problem. &lt;/p&gt;

&lt;p&gt;Sometimes, this means that it is impossible to use Rust because it is practically impossible to replicate the ecosystem support. In particular, C++ has game engines and frameworks that we won’t see on Rust for quite some time. &lt;/p&gt;

&lt;p&gt;The same problems that Rust solves, modern C++ has solved in (somewhat roundabout) ways, so trusting experienced C++ developers is a reasonably safe option if you do not want to venture in Rust. &lt;/p&gt;

&lt;p&gt;And, of course, to write Rust, you sometimes need to wrestle with the compiler. This is not for everyone. &lt;/p&gt;




&lt;p&gt;In the end, Rust’s slogan is “A language empowering everyone to build reliable and efficient software.” &lt;/p&gt;

&lt;p&gt;While Rust initially started as a replacement for C++, it is clear that they are aiming further, trying to make lower-level programming accessible to more and more people that wouldn’t perhaps be able to handle C++. &lt;/p&gt;

&lt;p&gt;This makes the comparison a bit moot. Rust is not a substitute, but a language that opens up new spaces of possibility, one of which we will discuss in the next section. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rust-and-webassembly" class="anchor"&gt;
  &lt;/a&gt;
  Rust and WebAssembly
&lt;/h2&gt;

&lt;p&gt;If you haven’t yet heard about it, WebAssembly is like… &lt;a href="https://en.wikipedia.org/wiki/Assembly_language"&gt;Assembly&lt;/a&gt; for the Web. &lt;/p&gt;

&lt;p&gt;Historically, browsers have been able to run HTML, CSS, and JavaScript, with HTML responsible for the structure, CSS for the look, and JavaScript for the interactions. If you didn’t like writing plain JavaScript, you could transpile it from various other languages that added types, Haskell- or OCaml-like code, and other things. &lt;/p&gt;

&lt;p&gt;But, JavaScript does not have the predictably fast performance necessary to run computation-intensive applications like games. (This is due to the garbage collector and dynamic typing.) &lt;/p&gt;

&lt;p&gt;WebAssembly helps with that. It is a language for the browser that can serve as a compile target for any language, such as Rust, Python, C++. This means that you can take code in basically any modern programming language, and put it in the browser. &lt;/p&gt;

&lt;p&gt;In comparison to other languages, Rust is ideally suited for writing code to compile to WebAssembly. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Minimal runtime.&lt;/strong&gt; WebAssembly doesn’t have its own runtime, so it needs to be shipped with the code. The smaller the runtime, the less stuff the user needs to download. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Statically typed.&lt;/strong&gt; Since Rust is statically typed, it can compile to a more efficient WebAssembly since the compiler can use the types to optimize the code. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;We have a head start.&lt;/strong&gt; Most importantly, Rust has embraced WebAssembly wholeheartedly. Rust already has a fantastic community and tooling for compiling to WebAssembly, which, to be honest, is the most significant advantage out of these three. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info on Rust and WebAssembly, watch &lt;a href="https://www.youtube.com/watch?v=CMB6AlE1QuI"&gt;this talk by Steve Klabnik&lt;/a&gt; or check out the &lt;a href="https://rustwasm.github.io/docs/book/"&gt;rustwasm book&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started-with-rust" class="anchor"&gt;
  &lt;/a&gt;
  Getting started with Rust
&lt;/h2&gt;

&lt;p&gt;To get started with Rust code, you can either download &lt;code&gt;rustup&lt;/code&gt; &lt;a href="https://www.rust-lang.org/tools/install"&gt;here&lt;/a&gt; or use the &lt;a href="https://play.rust-lang.org/"&gt;Rust Playground&lt;/a&gt;, which is an online tool that lets you run some Rust code and witness the consequences.😅&lt;/p&gt;

&lt;p&gt;Once you have your Rust environment ready, let’s do some code. Here, we will be doing a Rust version of fizzbuzz to give a brief insight into what Rust is capable of. &lt;/p&gt;

&lt;p&gt;To create a new project, go to the directory you want the project to be in and do &lt;code&gt;cargo new fizzbuzz&lt;/code&gt;. This will instruct Rust’s build manager to create a new project. Once you do that, go to the&lt;code&gt;/src&lt;/code&gt; folder and open up &lt;code&gt;main.rs&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;First, let’s write something that takes a number and returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  “fizz” for the numbers that divide with 3,&lt;/li&gt;
&lt;li&gt;  “buzz” for numbers that divide with 5,&lt;/li&gt;
&lt;li&gt;  “fizzbuzz” for numbers that divide with both 3 and 5,&lt;/li&gt;
&lt;li&gt;  the number as a string if it is divided with neither. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rust has a very powerful tool in match statements to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzbuzz&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"fizzbuzz"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"fizz"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"buzz"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since text in quotes is a string in memory, or &lt;code&gt;str&lt;/code&gt;in Rust, we need to convert it to a String.  &lt;/p&gt;

&lt;p&gt;Now, we need a way to count up to a certain number from 1. We’ll write a new function that takes the number as an argument, creates a range from 1 to the number, applies the&lt;code&gt;fizzbuzz&lt;/code&gt; function, and prints the result. In Rust, we can achieve this with a simple for loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;count_up_to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To achieve any result in the terminal, we need to have a main function. Let’s replace hello_world with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;count_up_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we can use the &lt;code&gt;cargo run main.rs&lt;/code&gt; command, and most likely, should see a stream of fizzes and buzzes on our terminal. &lt;/p&gt;

&lt;p&gt;But hey! Perhaps fizzbuzz isn’t the only game we play? Perhaps the new hotness is wubbalubba? Let’s quickly modify our counting code to make sure we can take on any of the counting games around town. &lt;/p&gt;

&lt;p&gt;To do that, we will need our Rust function to take another function that takes an unsigned 32-bit integer and returns a String. After adding what is called a &lt;em&gt;function pointer&lt;/em&gt; to the type signature, the worst has passed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;count_up_to_with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside, we just need to substitute fizzbuzz with the function variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;count_up_to_with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we add a new game that somehow turns integers into strings, our function will be able to handle it. &lt;/p&gt;

&lt;p&gt;For convenience, here is wubbalubba, hardly a creative invention:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;wubbalubba&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"dub dub"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"wubba"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"lubba"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the required function to call it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;count_up_to_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wubbalubba&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#further-learning" class="anchor"&gt;
  &lt;/a&gt;
  Further learning
&lt;/h2&gt;

&lt;p&gt;Rust’s community is awesome. Everywhere you go, you will find a lot of clearly-explained, beginner-oriented materials for learning and people ready to help you. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://tourofrust.com/"&gt;Tour of Rust&lt;/a&gt;.&lt;/strong&gt; An interactive tutorial on the basics of Rust, up until generics and smart pointers.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://doc.rust-lang.org/book/"&gt;The Rust Programming Language&lt;/a&gt;.&lt;/strong&gt; The Rust book of choice, available online for free. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://exercism.io"&gt;Exercism Rust track&lt;/a&gt;.&lt;/strong&gt; If you want to get more experience with the language and its syntax, Exercism is a good option. Unfortunately, it looks like the Rust track is slightly overpopulated right now, so don’t count on receiving a lot of mentor attention. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://doc.rust-lang.org/stable/rust-by-example/"&gt;Rust by example&lt;/a&gt;.&lt;/strong&gt; A collection of examples of idiomatic Rust code. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://cheats.rs/"&gt;Rust cheat sheet&lt;/a&gt;.&lt;/strong&gt; If you want to take a quick look at the most important concepts of Rust, this is for you. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://github.com/rust-lang/rustlings"&gt;Rustlings&lt;/a&gt;.&lt;/strong&gt; A collection of Rust exercises that will let you wrestle with the compiler in a controlled environment. &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope that this article helped you understand why Rust is so popular and loved right now. I also hope that I have set you on a path towards learning and trying out Rust for yourself, either for a tool or a side project. If you want to read more posts on development and cool programming languages, follow us on social media: &lt;a href="https://twitter.com/serokell"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.facebook.com/serokell.io/"&gt;Facebook&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>gamedev</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
