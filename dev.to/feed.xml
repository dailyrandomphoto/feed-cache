<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fusetunnel - A Fast, Scalable, and Free Tunnel</title>
      <author>Chris More</author>
      <pubDate>Sat, 23 Oct 2021 03:03:07 +0000</pubDate>
      <link>https://dev.to/chrismore/fusetunnel-a-fast-scalable-and-free-tunnel-47g0</link>
      <guid>https://dev.to/chrismore/fusetunnel-a-fast-scalable-and-free-tunnel-47g0</guid>
      <description>&lt;p&gt;There are many times where we want to share our localhost app with the world, either for testing purposes, to show progress, demo websites or run personal cloud services from your home. Fusetunnel helps you to do this easily! No need to mess with DNS or deploy to have others test out your changes.&lt;/p&gt;

&lt;p&gt;Fusetunnel is great for working with browser testing tools like Browserling or external API callback services like Twilio, which require a public URL for callbacks.&lt;/p&gt;

&lt;p&gt;Fusetunnel is Fusebit’s version of localtunnel.&lt;/p&gt;

&lt;p&gt;The main difference with localtunnel (and other tunnels) is that Fusetunnel is end-to-end encrypted, giving the user greater security, promoting data protection, and preventing unauthorized access to data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fusebit.io/blog/fusetunnel-fast-scalable-and-free-tunnel/?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=post&amp;amp;utm_content=cmore"&gt;Read more about Fusetunnel and fork the open-source repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
      <category>news</category>
    </item>
    <item>
      <title>I had received the 4 Week Streak Dev badge</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Sat, 23 Oct 2021 02:31:05 +0000</pubDate>
      <link>https://dev.to/ksengine/i-had-received-the-4-week-streak-dev-badge-556j</link>
      <guid>https://dev.to/ksengine/i-had-received-the-4-week-streak-dev-badge-556j</guid>
      <description>&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#you-received-the-4-week-streak-badge"&gt;
  &lt;/a&gt;
  You received the  &lt;strong&gt;4 Week Streak&lt;/strong&gt;  badge
&lt;/h3&gt;

&lt;p&gt;Awarded for consistency of writing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xhxQ5Ip---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L6TKY3HN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_80%2Cw_250/https://dev-to-uploads.s3.amazonaws.com/uploads/badge/badge_image/11/4WeekStreak-badge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xhxQ5Ip---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L6TKY3HN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_80%2Cw_250/https://dev-to-uploads.s3.amazonaws.com/uploads/badge/badge_image/11/4WeekStreak-badge.png" alt="4 Week Streak"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Congrats on achieving this streak! Consistent writing is hard. &amp;gt; The next streak badge you can get is the 8 Week Badge. 😉&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ksengine"&gt;Visit your profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You also get  &lt;a href="https://dev.to/credits"&gt;5 new credits&lt;/a&gt;  to use for  &lt;a href="https://dev.to/listings"&gt;community listings&lt;/a&gt;  if you have anything you'd like to promote. 🎉&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Build an NFT Wallet with OutSystems &amp; Filecoin</title>
      <author>sydneylai</author>
      <pubDate>Fri, 22 Oct 2021 23:31:01 +0000</pubDate>
      <link>https://dev.to/sydneylai/build-an-nft-wallet-with-outsystems-filecoin-2ik4</link>
      <guid>https://dev.to/sydneylai/build-an-nft-wallet-with-outsystems-filecoin-2ik4</guid>
      <description>&lt;p&gt;Author: &lt;a href="https://twitter.com/sydneylai"&gt;@sydneylai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You hear about NFTs as collectables or images, but how do we store or collect them? Today we will build an NFT wallet and host them on IPFS as a unique NFT.&lt;/p&gt;

&lt;p&gt;We host the images in IPFS because this a peer to peer and a decentralized form of storage, rather than a centralized solution like AWS or Google Cloud. Therefore if AWS goes down or you forget to pay your Cloud subscription, you still have a hosting solution that assigned a unique identifier or content identifier (CID).&lt;/p&gt;

&lt;p&gt;Once you have a unique image, you can either distribute your NFTs on a marketplace, put it on a smart contract or turn it into a game. I'll include resources below for how else you can continue to build. This tutorial is for beginners who want to learn how to create and host their NFTs.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#start-here"&gt;
  &lt;/a&gt;
  Start Here
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Exposing a REST API for NFT Storage and OutSystems 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Tools you'll need:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;OutSystems IDE &lt;a href="https://outsyste.ms/developers"&gt;https://outsyste.ms/developers&lt;/a&gt; &lt;br&gt;
Filecoin's NFT Storage &lt;a href="https://nft.storage/"&gt;https://nft.storage/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#filecoin-and-ipfs-explained"&gt;
  &lt;/a&gt;
  Filecoin and IPFS Explained
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Vocab 101&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CID&lt;/strong&gt; - content ID&lt;br&gt;
&lt;strong&gt;Pinning&lt;/strong&gt; - asking the node to keep the data, so that it's not trashed, if you pin it hte data presists&lt;br&gt;
&lt;strong&gt;Quede vs Pinning&lt;/strong&gt; - next deal brokered to get on the Filecoin network&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#making-an-nft-wallet-and-hosting-nfts"&gt;
  &lt;/a&gt;
  Making an NFT Wallet and Hosting NFTs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nft.storage/"&gt;https://nft.storage/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is your hosted image, with a CID&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--paz6CeV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mSeqVgg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paz6CeV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mSeqVgg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hosting NFTs on marketplaces or wallets typically request ETH and gas. NFT developers who want free decentralized storage, you will be able to host your images on-chain with NFT.storage. &lt;/p&gt;

&lt;p&gt;Just upload your data and you'll receive an IPFS hash of the content (a CID) that can be used in on-chain NFT data as a pointer to the content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMIO-dU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/scEMLLd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMIO-dU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/scEMLLd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upload your data, get back an IPFS hash of the content (a CID) that can be used in on-chain NFT data as a pointer.&lt;/li&gt;
&lt;li&gt;Storage + Retrieval is free!&lt;/li&gt;
&lt;li&gt;Metadata is returned in proper formats!&lt;/li&gt;
&lt;li&gt;Fetch it back via IPFS (pinned redundantly &amp;gt;3x) &lt;/li&gt;
&lt;li&gt;Backed up to Filecoin (stored redundantly &amp;gt;5x)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://filecoin.io/"&gt;Filecoin&lt;/a&gt; provides long term storage for the data ensuring that even if nft.storage is attacked or taken down the NFT data persists.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#consume-api"&gt;
  &lt;/a&gt;
  Consume API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhxXoRZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pHRQ9Zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhxXoRZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pHRQ9Zh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can upload either a single file or consume the API to upload multiple files in a directory. The API follows a typical POST and GET Method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**/Upload** - Consuming the API / Post Method
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explains uploads, throws it on some IPFS nodes, available over the network, not just centralized, it's free, the storage providers. &lt;br&gt;
&lt;a href="https://nft.storage/api-docs/"&gt;https://nft.storage/api-docs/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#consume-nft-storage-api"&gt;
  &lt;/a&gt;
  Consume NFT Storage API
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Start with a mobile app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you launch Service Studio, you want to create a mobile application by clicking on "From Scratch" and then "Phone app". &lt;/p&gt;

&lt;p&gt;Name your application. &lt;/p&gt;

&lt;p&gt;Here you can design your application however you'd like. In this process, I'm creating an NFT wallet with a simple scrolling mechanism similar to the Instagram layout. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Consume the NFT Storage REST API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Click on Service, as we are building a service to consume the REST API&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s89wGaaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OPcthtT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s89wGaaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OPcthtT.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right Click on REST and consume REST API&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D4VHjnnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qveCE74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4VHjnnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qveCE74.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add Multiple Methods&lt;/p&gt;

&lt;p&gt;Find the YAML file here &lt;br&gt;
&lt;a href="https://nft.storage/api-docs/"&gt;https://nft.storage/api-docs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Convert the NFT Storage YAML file to a JSON&lt;br&gt;
&lt;a href="https://nft.storage/schema.yml"&gt;https://nft.storage/schema.yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Convert with &lt;br&gt;
&lt;a href="https://www.convertjson.com/yaml-to-json.htm"&gt;https://www.convertjson.com/yaml-to-json.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6hK8yP6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/c32MHjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6hK8yP6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/c32MHjg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check and address any errors and warnings&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Create and map out your REST API&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Add Authorizations to your Methods&lt;/p&gt;

&lt;p&gt;Double-click on the orange REST API Method titled "Click" &amp;gt; "Heads and Authentication"&lt;/p&gt;

&lt;p&gt;In the Request headers dropdown select "Authorization"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUC6lf9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ghidFSN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUC6lf9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ghidFSN.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the "Test" tab and include a CID in the URL parameter values. You can find your CID &lt;a href="https://nft.storage/api-docs/"&gt;HERE&lt;/a&gt; if you are logged in. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bn5BsV4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5a1BgES.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bn5BsV4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5a1BgES.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
in Request headers values, Authorization, include: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bearer[KEY TOKEN]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Bearer&lt;/strong&gt; - When things are stored in, there is a storage deal made, what each API call is doing in the background&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VwltSonJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FMFQW6G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VwltSonJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FMFQW6G.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;click on "Test" to see an&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;"ok":true value&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Copy to response body&lt;/li&gt;
&lt;li&gt;Click on Finish &lt;/li&gt;
&lt;li&gt;Hit the green Publish button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now repeat &lt;strong&gt;Step 3&lt;/strong&gt; for the rest of the REST API Methods titled "delete", "list", "status", "store" respectively&lt;/p&gt;

&lt;p&gt;On the "List" method,&lt;/p&gt;

&lt;p&gt;Include a future date for the &lt;strong&gt;before&lt;/strong&gt; parameter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNsGRyJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qZqWoov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNsGRyJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qZqWoov.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaRcfaPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/W8ZQ2BJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaRcfaPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/W8ZQ2BJ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy over and match the fields&lt;/p&gt;

&lt;p&gt;While you're creating an Authorization input parameter for both "Status" and "Store" you may get an error or empty payload, just click "Finish"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7V8vggSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wKzGEVp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7V8vggSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wKzGEVp.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit the green Publish button&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Create a Service Action&lt;/strong&gt;&lt;br&gt;
Right Click on "Service Action" and title your action "List"&lt;/p&gt;

&lt;p&gt;The logic flow will visually appear&lt;/p&gt;

&lt;p&gt;In the Logic tab, &lt;br&gt;
Integrations &amp;gt; REST &amp;gt; NFTStorageAPI &amp;gt; &lt;/p&gt;

&lt;p&gt;Drag the "list" Run Server Action into the logic flow and click on the icon until you see the "Authorization" dropdown&lt;/p&gt;

&lt;p&gt;It's empty&lt;/p&gt;

&lt;p&gt;In "list" Run Server Action, copy all four input parameters, and paste in the "List2" Service Action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--smaw-3a8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/87BKrXc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--smaw-3a8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/87BKrXc.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now include the Before and Limit within the List Run Server Action you just created on the Logic Flow&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14n_G5IZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jkrEGGY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14n_G5IZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jkrEGGY.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assign the "list" Run Sever Action by dragging an "Assign" blue icon from the left tray into the logic flow, below the "list" icon&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1U0MrYRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JuGUlq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1U0MrYRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JuGUlq0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assign the variable with "Response"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHy22WTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PMisnBD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHy22WTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PMisnBD.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 You may get errors asking to make your structures public&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Integrate your API wrapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To integrate your API, head to Interface &amp;gt; Home Screen and "Fetch Data from Other Sources", which I've named "ShowStorage"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATtTv8r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/42lS6td.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATtTv8r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/42lS6td.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the upper left-hand side there is a 🔌 icon where I will manage my dependencies. I want all the modules that I've created before, to be referenced. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rVycuma9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DxSowRF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVycuma9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DxSowRF.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Head to the Logic tab and locate "List" Service Action, click on and drag the icon into the logic flow.&lt;/p&gt;

&lt;p&gt;Head to the interface tab and double-click on the Output Parameter we've named "Response", set the Data Type to a ListResponse matching the Response Output Parameter in the Logic tab.&lt;/p&gt;

&lt;p&gt;On the logic flow, drag and drop an Assign into the logic flow. In the drop-down, assign Response and List3.Response (or whichever number list you have show up).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pLdkqby1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/x95Op9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pLdkqby1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/x95Op9t.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your Run Server Action titled "List", set&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;before: "CurrDateTime()"&lt;br&gt;
Authorization: " "Bearer TOKEN" " &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your Authoization Bearer TOKEN is a string so must close in quotes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc8-3eK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4tg57AF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc8-3eK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4tg57AF.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Connect the database and images&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the Interface tab in the Mainflow UI Flow, add a Block widget and add an Input Parameter titled "CID".&lt;/p&gt;

&lt;p&gt;Double-Click on the "Home" Screen icon and select "Widget Tree" on the top right. &lt;/p&gt;

&lt;p&gt;In Content, drag and drop a Block widget and set the sources: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Source Block "MainFlow\Block1"&lt;br&gt;
CID "ShowStorage.Response.value.Current.cid"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOEEP7gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6ha9zX9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOEEP7gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6ha9zX9.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Include three "x.y Expression" widgets within Content&lt;/p&gt;

&lt;p&gt;In the first Expression, map the expression to &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ShowStorage.Response.value.Current.cid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Folder structure is seen here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FciP5j4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uFXRu2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FciP5j4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uFXRu2i.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second Expression, can be expressed as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FormatDateTime(ShowStorage.Response.value.Current.created, "d MMM yyyy HH:mm")&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The third Expression, we can showcase the pinning service. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Images&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the Interface tab, click on the Block1 widget. Drag and drop an Image widget from the left. &lt;/p&gt;

&lt;p&gt;Set the Type to "External URL"&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"https://" + CID + ".ipfs.dweb.link"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the API wrapper that I've titled "IPFSNFTStorage", create an Input Parameter within the "store" REST API Method. The Input Parameter will be named "Binary Image" and set the Data Type to "Binary Data".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hf6MI1pk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/a1XLz2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hf6MI1pk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/a1XLz2r.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now copy the three input parameters in store and create a Service Action titled "Upload" within the Service Actions folder. Paste the three input parameters within the "Upload" Service Action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W86J7ijt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/I2mGIr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W86J7ijt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/I2mGIr2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Double-click on "Upload" Service Action and drag the store REST API Method onto the logic flow&lt;/p&gt;

&lt;p&gt;The "Store" Run Server Action is like requestion something from someone, in this case asking someone for the image.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--by3_ed92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6GasJs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--by3_ed92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6GasJs7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore the Assign widget in the logic flow will be the response to the request: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOkLu3TJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YAeddk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOkLu3TJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YAeddk1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#success-star"&gt;
  &lt;/a&gt;
  Success ⭐
&lt;/h2&gt;

&lt;p&gt;You have integrated your NFT Storage API and your mobile application can now display hosted NFTs&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvO_IFxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6EmcXz3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvO_IFxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6EmcXz3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#continuing-education"&gt;
  &lt;/a&gt;
  Continuing Education
&lt;/h2&gt;

&lt;p&gt;Listen to Patrick Collins, developer advocate at Chainlink explain securing blockchain oracles on Decoded Podcast.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3AD34nKzqCMoWk4OcJAdx0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3Zy7XfDnev0"&gt;https://youtu.be/3Zy7XfDnev0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3Zy7XfDnev0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88xj1j_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0ravzl7rp3kc4f6mu2.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>blockchain</category>
      <category>cloud</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Quickly Grab Stuff From Your Git History</title>
      <author>Ben Lovy</author>
      <pubDate>Fri, 22 Oct 2021 23:30:11 +0000</pubDate>
      <link>https://dev.to/deciduously/quickly-grab-stuff-from-your-git-history-2bon</link>
      <guid>https://dev.to/deciduously/quickly-grab-stuff-from-your-git-history-2bon</guid>
      <description>&lt;p&gt;While working through a problem, my colleague remembered a prior version of our application had a syntax example we could use.  Thankfully, the codebase has been checked into &lt;a href="https://git-scm.com/"&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;!  We knew the code in question revolved around the &lt;a href="https://blog.ielliott.io/nix-docs/stdenv-mkDerivation.html"&gt;&lt;code&gt;mkDerivation&lt;/code&gt;&lt;/a&gt; functionality in &lt;a href="https://nixos.org/"&gt;nix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since then, this particular code has been moved out of our codebase and added to &lt;a href="https://github.com/NixOS/nixpkgs"&gt;&lt;code&gt;nixpkgs&lt;/code&gt;&lt;/a&gt;, so we can pull the derivation from the main tree instead of defining our own out-of-tree logic.  My first instinct was to start digging through that (huge) repository to find the file and use that as a reference.&lt;/p&gt;

&lt;p&gt;No need!  We have it in our &lt;code&gt;git&lt;/code&gt; history.  We can query this using &lt;code&gt;git log -S&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log -S mkDerivation
commit 3a275488e740ae1b4314208a908c5300f9563ee0
Author: David Yamnitsky &amp;lt;david@yamnitsky.com&amp;gt;
Date:   Mon Jul 19 11:51:47 2021 -0400

    use mold and wasm-bindgen from nixpkgs

commit a3a042b5b90ad57ff11bc47a5db6e68dc1ca55e7
Author: David Yamnitsky &amp;lt;david@yamnitsky.com&amp;gt;
Date:   Wed Jun 16 10:26:35 2021 -0400

    use mold as the linker to speed up incremental compiles on x86_64-linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beautiful - that top commit looks like it represents when we switched to pull this derivation directly from &lt;code&gt;nixpkgs&lt;/code&gt;.  Removing the code is sufficient - each &lt;code&gt;git&lt;/code&gt; commit represents a diff.  This commit should show us the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git show 3a275488e740ae1b4314208a908c5300f9563ee0
commit 3a275488e740ae1b4314208a908c5300f9563ee0
Author: David Yamnitsky &amp;lt;david@yamnitsky.com&amp;gt;
Date:   Mon Jul 19 11:51:47 2021 -0400

    use mold and wasm-bindgen from nixpkgs
...
flake. nix

───┐
1: │
───┘
{
  inputs = {
    nixpkgs = {
      url = "github:nixos/nixpkgs/nixos-unstable";
      url = "github:nixos/nixpkgs/nixos-unstable-small";
    };
    flake-utils = {
      url = "github:numtide/flake-utils";

────┐
48: │
────┘
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER = toString ./. + "/scripts/clang";
        CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_LINKER = "lld";
        buildInputs = with pkgs; [
          (stdenv.mkDerivation {
            pname = "mold";
            version = "0.9.1";
            src = fetchgit {
              url = "https://github.com/rui314/mold";
              rev = "v0.9.1";
              sha256 = "sha256-yIkW6OCXhlHZ1jC8/yMAdJbSgY9K40POT2zWv6wYr5E=";
            };
            nativeBuildInputs = [ clang_12 cmake lld_12 tbb xxHash zlib openssl git ];
            dontUseCmakeConfigure = "true";
            buildPhase = "make -j $NIX_BUILD_CORES";
            installPhase = "mkdir -p $out $out/bin $out/share/man/man1 &amp;amp;&amp;amp; PREFIX=$out make install";
          })
          cachix
          cargo-insta
          clang_12

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There it is, in the text!  In my terminal, additions are highlighted in green and removals are in red.  This was a removal, but you still get the full removed text.  I was able to copy that &lt;code&gt;stdenv.mkDerivation&lt;/code&gt; code and work from there.  Thanks, &lt;code&gt;git&lt;/code&gt;.  (Thit).&lt;/p&gt;

&lt;p&gt;As an aside, I highly recommend the following &lt;code&gt;git&lt;/code&gt; alias:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;l = "log --all --graph --decorate --abbrev-commit --format=format:'%C(bold blue)%h%C(reset) - %C(bold white)%an%C(reset) %C(bold yellow)%d%C(reset)%n%C(bold cyan)%aD%C(reset) - %C(bold green)(%ar)%C(reset)%n%C(white)%s%C(reset)'";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a mess of text, but it produces super easy to read git histories:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* 9b24232 - Ben Lovy  (HEAD -&amp;gt; main, origin/main, origin/HEAD)
| Fri, 22 Oct 2021 11:49:42 -0400 - (8 hours ago)
| Remove maplit
* 65016b6 - David Yamnitsky 
| Fri, 22 Oct 2021 11:39:12 -0400 - (8 hours ago)
| update deps
| * 6d55d3e - Ben Lovy  (refs/stash)
|/| Fri, 22 Oct 2021 11:49:01 -0400 - (8 hours ago)
| | WIP on main: e07e691 clear 1.56 warnings
| * 6bf8ab1 - Ben Lovy 
|/  Fri, 22 Oct 2021 11:49:01 -0400 - (8 hours ago)
|   index on main: e07e691 clear 1.56 warnings
* e07e691 - David Yamnitsky 
| Fri, 22 Oct 2021 11:09:02 -0400 - (8 hours ago)
| clear 1.56 warnings
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The coloration doesn't reflect here, in your terminal this will be &lt;em&gt;even cooler&lt;/em&gt;.  As a &lt;code&gt;git&lt;/code&gt; novice, this sort of output is instrumental in keeping track of changes to the codebase.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>git</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How database transactions work in Ecto and why Elixir makes it awesome?</title>
      <author>Curiosum</author>
      <pubDate>Fri, 22 Oct 2021 21:57:21 +0000</pubDate>
      <link>https://dev.to/curiosum_dev/how-database-transactions-work-in-ecto-and-why-elixir-makes-it-awesome-b75</link>
      <guid>https://dev.to/curiosum_dev/how-database-transactions-work-in-ecto-and-why-elixir-makes-it-awesome-b75</guid>
      <description>&lt;p&gt;Today we're going to look at how Ecto, which is Elixir's first-choice database access library, addresses the issue of &lt;strong&gt;handling database transactions&lt;/strong&gt;. We'll briefly introduce you to the very concept of transaction, then focus on describing the Ecto way of handling them, and explaining how it feels superior to what other languages' libraries offer us in this department. We'll give plenty of examples corresponding to a simple app you can pull from &lt;a href="https://github.com/curiosum-dev/elixir-ecto-database-transactions"&gt;our GitHub repository&lt;/a&gt;, so you can have some fun testing it out! &lt;a href="https://curiosum.com/blog/elixir-ecto-database-transactions"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>phoenix</category>
    </item>
    <item>
      <title>Elixir Trickery: Cheating on Structs, And Why It Pays Off</title>
      <author>Curiosum</author>
      <pubDate>Fri, 22 Oct 2021 21:55:25 +0000</pubDate>
      <link>https://dev.to/curiosum_dev/elixir-trickery-cheating-on-structs-and-why-it-pays-off-4eb6</link>
      <guid>https://dev.to/curiosum_dev/elixir-trickery-cheating-on-structs-and-why-it-pays-off-4eb6</guid>
      <description>&lt;p&gt;While we can't say cheating on anyone is okay, we're not as absolutistic when it comes to cheating on Elixir at times.&lt;/p&gt;

&lt;p&gt;Structs are there for a reason (we'll start from a brief overview), and that's certainly not for us to cheat on them. But we can if we have to - and we'll sometimes even justify that and get away with it!&lt;/p&gt;

&lt;p&gt;Today's article will come in handy especially for those who are interested in developing libraries for Elixir and making them usable across different dependency versions, which is always a problem when writing code intended to be pluggable into different applications. &lt;a href="https://curiosum.com/blog/elixir-trickery-cheating-on-structs"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>structs</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Taste of Redux</title>
      <author>hwangs12</author>
      <pubDate>Fri, 22 Oct 2021 21:38:14 +0000</pubDate>
      <link>https://dev.to/hwangs12/taste-of-redux-2431</link>
      <guid>https://dev.to/hwangs12/taste-of-redux-2431</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-dependencies-do-you-need"&gt;
  &lt;/a&gt;
  What dependencies do you need?
&lt;/h3&gt;

&lt;p&gt;For those who are familiar with react hooks, &lt;code&gt;React&lt;/code&gt; is of course the one you should import. For Redux, you need the following imports&lt;/p&gt;

&lt;p&gt;In your main app file, where every component has gathered to demonstrate on your browser, you will need&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From &lt;strong&gt;createStore&lt;/strong&gt;, the web page will be rendered and each state in your component will be tracked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, &lt;strong&gt;Provider&lt;/strong&gt; allows us to &lt;em&gt;distribute&lt;/em&gt; the state to different components - this is not the final step of distributing though, you need to do something to your components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CartContainer&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that your store is now set up as a prop in Provider component&lt;/p&gt;

&lt;p&gt;Now let's go back to reducer from createStore argument, where is the reducer coming from? You can write reducer function in the same file but for neatness we are going to create our own reducer file  &lt;/p&gt;

&lt;p&gt;Now, if we go to reducer file, we will see reducer function and it takes two things as arguments: state and action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;state is equal to the initialState is how initial state is set up in redux. The action parameter will be used to keep track of user action in our web. &lt;/p&gt;

&lt;p&gt;Now, if we go to bottom components/smaller components where state change is happening, we need the following codes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the tricky part starts, from &lt;strong&gt;connect&lt;/strong&gt;, we will see a cool argument which also acts as function to pull state from top components to the bottom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CartContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Many questions can arise here, where is &lt;strong&gt;count&lt;/strong&gt; coming from? We didn't set this up in our top component and pass it as prop. And, What is dispatch? &lt;/p&gt;

&lt;p&gt;To figure it out, we need to look at the following codes below (this is usually at the bottom of your component)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;CartContainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this basically means, you are connecting CartContainer to the state from the Provider. &lt;/p&gt;

&lt;p&gt;Since you are returning that mapStateToProps object and return count property from the state, you can now use count in the CartContainer and pass it as prop. dispatch is automatically added when you connect - how convenient!&lt;/p&gt;

&lt;p&gt;For those who used dispatch from useReducer hook, it is injecting type of action and payload when user do something on the elements you create say for example, a button click to increase value or something. &lt;/p&gt;

&lt;p&gt;Note, you can also map dispatch itself to props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ownProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ownProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;REMOVE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="na"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREASE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="na"&gt;decrease&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DECREASE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you do this, you don't need to pass dispatch as prop and instead use more descriptive keys such as remove, increase, decrease for dispatch. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ownProps&lt;/strong&gt; is whatever has been passed as props to your component from &lt;em&gt;prop-drilling&lt;/em&gt; - meaning it has been passed from the top component. &lt;/p&gt;

&lt;p&gt;Also, when your projects get big (I mean that's what instructors say, but I have never done big projects), you do what people call action creators. &lt;/p&gt;

&lt;p&gt;From your reducer file, you write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;REMOVE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So basically you are saving the argument as payload and define action type to use in the mapDispatchToProps. &lt;/p&gt;

&lt;p&gt;This is kind of redundant, but this is what you will see in your component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ownProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ownProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;increaseItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;decreaseItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;of course, assuming that you have imported them from reducer. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>redux</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PandaDoc launches API for Document Generation and eSignatures</title>
      <author>Valia Havryliuk</author>
      <pubDate>Fri, 22 Oct 2021 20:56:33 +0000</pubDate>
      <link>https://dev.to/valiahavryliuk/pandadoc-launches-api-for-document-generation-and-esignatures-9m7</link>
      <guid>https://dev.to/valiahavryliuk/pandadoc-launches-api-for-document-generation-and-esignatures-9m7</guid>
      <description>&lt;p&gt;Today, we’re launching PandaDoc for Developers on Product Hunt. 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/pandadoc-for-developers"&gt;https://www.producthunt.com/posts/pandadoc-for-developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our new API platform will help developers to create and integrate custom eSignature and document workflow solutions that support their unique business processes and needs in a matter of days.&lt;/p&gt;

&lt;p&gt;Check out our post on Product Hunt and be sure to throw us an upvote or comment if you like what you see! &lt;/p&gt;

</description>
      <category>launch</category>
      <category>productivity</category>
      <category>api</category>
      <category>tech</category>
    </item>
    <item>
      <title>Neovim LSP Setup + Code Completion Engine</title>
      <author>Nitin Chaudhary</author>
      <pubDate>Fri, 22 Oct 2021 20:48:49 +0000</pubDate>
      <link>https://dev.to/ntncahay/neovim-lsp-setup-code-completion-engine-3ckm</link>
      <guid>https://dev.to/ntncahay/neovim-lsp-setup-code-completion-engine-3ckm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;One of the cool feature that came with &lt;strong&gt;Neovim 0.5&lt;/strong&gt; is &lt;strong&gt;Language Server Protocol (LSP) support&lt;/strong&gt; which allows to code more effectively as well as easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-language-server-protocol"&gt;
  &lt;/a&gt;
  What is Language Server Protocol
&lt;/h2&gt;

&lt;p&gt;LSP is a protocol which is used by a language server (eg: &lt;code&gt;clangd&lt;/code&gt;, &lt;code&gt;typescript-language-server&lt;/code&gt;) to communicate with client.&lt;br&gt;
Now, the question raises is what is a &lt;code&gt;language server&lt;/code&gt; too.&lt;br&gt;
So a &lt;code&gt;language server&lt;/code&gt; is a local server which provides suggestions to your client(in our case neovim) while you are writing the code.&lt;br&gt;
As we go forward, i think the definition will become more clearer.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-lsp"&gt;
  &lt;/a&gt;
  Setting up LSP
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I have been using &lt;a href="https://github.com/neovim/nvim-lspconfig"&gt;nvim-lspconfig&lt;/a&gt; from beginning as it provides the &lt;a href="https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md"&gt;list of all available LSPs for different languages&lt;/a&gt; and how exactly to install and configure them.
But first let's install the &lt;code&gt;nvim-lspconfig&lt;/code&gt; plugin itself:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Packer.nvim&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="s1"&gt;'neovim/nvim-lspconfig'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" vim-plug&lt;/span&gt;
Plug 'neovim/nvim&lt;span class="p"&gt;-&lt;/span&gt;lspconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now let's see an example of how to install a &lt;code&gt;language server&lt;/code&gt;.&lt;br&gt;
   &lt;br&gt;As of now, let's see for &lt;code&gt;typescript language&lt;/code&gt;. For &lt;code&gt;.ts&lt;/code&gt; you can install &lt;code&gt;tsserver&lt;/code&gt; using the below command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; typescript-language-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's start configuring the server . So if you have gone through &lt;a href="https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md"&gt;nvim-lspconfig LSP List&lt;/a&gt; and found &lt;strong&gt;tsserver&lt;/strong&gt;, then we already know its quite easy to setup. Below is the snippet you can use to configure.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;'lspconfig'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tsserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just need to put this line in either &lt;code&gt;init.lua&lt;/code&gt; or any &lt;code&gt;.lua&lt;/code&gt; file which is sourced when neovim starts up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, we have our LSP installed and configured, but we don't see any suggestion or any code completions when we open a &lt;code&gt;.ts&lt;/code&gt; file in a project.
Now for the code completions, i am currently using &lt;a href="https://github.com/hrsh7th/nvim-cmp"&gt;nvim-cmp&lt;/a&gt; which is quite extensible and customizable plugin.
So, let's first install this plugin:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Packer.nvim&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="s1"&gt;'hrsh7th/cmp-nvim-lsp'&lt;/span&gt;
&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'hrsh7th/cmp-buffer'&lt;/span&gt;
&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'hrsh7th/nvim-cmp'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;--&lt;/span&gt; &lt;span class="k"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;plug
Plug &lt;span class="s1"&gt;'hrsh7th/cmp-nvim-lsp'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'hrsh7th/cmp-buffer'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'hrsh7th/nvim-cmp'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For configuring up &lt;strong&gt;code completion engine (nvim-cmp)&lt;/strong&gt;, you can either refer to the documentation from above link (which is quite extensive) or you can just use the below code snippet to make it work
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;-- As currently, i am not using any snippet manager, thus disabled it.&lt;/span&gt;
      &lt;span class="c1"&gt;-- snippet = {&lt;/span&gt;
         &lt;span class="c1"&gt;--   expand = function(args)&lt;/span&gt;
            &lt;span class="c1"&gt;--     require("luasnip").lsp_expand(args.body)&lt;/span&gt;
            &lt;span class="c1"&gt;--   end,&lt;/span&gt;
         &lt;span class="c1"&gt;-- },&lt;/span&gt;

      &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;C-d&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_docs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;C-f&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_docs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;C-e&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;c-y&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;confirm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfirmBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nb"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="n"&gt;formatting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lspkind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmp_format&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;with_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;buffer&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[buf]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;nvim_lsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[LSP]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;path&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[path]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;

      &lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"nvim_lsp"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"path"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"buffer"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keyword_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="n"&gt;experimental&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;ghost_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the snippets, mapping, formatting and sources part in the above code snippet is expalained nicely in the plugin's documentation.&lt;br&gt;
   &lt;br&gt;For above code to work, you also have to install &lt;a href="https://github.com/onsails/lspkind-nvim"&gt;lspkind&lt;/a&gt; which provides awesome icons in the code completions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After setting up this much, you would start getting this kind of awesome popups which you can use to make the cool auto completions and much more.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLvw_UPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6uqq9ukxs0532g0q3ifw.JPG" alt="Code completion popup"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For LSP setup, you can checkout &lt;a href="https://www.youtube.com/watch?v=tOjVHXaUrzo&amp;amp;ab_channel=ThePrimeagen"&gt;primeagen's lsp video&lt;/a&gt;.  It's an year old, but its quite good for first time.&lt;/li&gt;
&lt;li&gt;For code completion engine &lt;code&gt;nvim-cmp&lt;/code&gt;, tj has just released a &lt;a href="https://www.youtube.com/watch?v=_DnmphIwnjo"&gt;TakeTuesday video: nvim-cmp&lt;/a&gt; which is super informative and it goes quite deep into the customizations too.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thank you for reading :)&lt;/p&gt;

</description>
      <category>neovim</category>
      <category>lsp</category>
    </item>
    <item>
      <title>5 Array Methods for Building a Shopping Website</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Fri, 22 Oct 2021 20:23:18 +0000</pubDate>
      <link>https://dev.to/aravsanj/5-array-methods-for-building-a-shopping-website-192b</link>
      <guid>https://dev.to/aravsanj/5-array-methods-for-building-a-shopping-website-192b</guid>
      <description>&lt;p&gt;An array in JavaScript is an object that can store a list of items. In this post, I will explain 5 must know JavaScript array methods and how to use them to create a shopping website.&lt;/p&gt;

&lt;p&gt;PS: No, I am not literally creating a shopping website. This post will give you a practical glance over these array methods.&lt;/p&gt;

&lt;p&gt;First, we create a list of product items using an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;White Shirt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addedToCart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Black Jeans&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addedToCart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Leather Jacket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addedToCart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sweater&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addedToCart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Coat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addedToCart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will stick to basic data like product name and the price.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listing-product-items"&gt;
  &lt;/a&gt;
  Listing product items
&lt;/h2&gt;

&lt;p&gt;When a user visits our site, we need to show a list of our poducts. Ideally, the product name is shown. To do that, we use the &lt;code&gt;map()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; method iterates over each item in an array and returns another array. The new array is created with the results of a function which is called for each item in the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// [ White Shirt, Black Jeans, Leather Jacket, Sweater, Coat ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;map()&lt;/code&gt; iterates over each item, the function is run for each product. The &lt;code&gt;product&lt;/code&gt; variable store the product object and &lt;code&gt;product.Name&lt;/code&gt; returns the names. Each name is automatically appended to the &lt;code&gt;Names&lt;/code&gt; array after the end of each iteration. Now we have an array that list the name of each products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#price-filter"&gt;
  &lt;/a&gt;
  Price filter
&lt;/h2&gt;

&lt;p&gt;Filtering results with a price range is one of the most used features on an e-commerce site. To do that, we can use the &lt;code&gt;filter()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method also iterates over each item in an array and creates a new array. However, the elements in the new array is selected based on a test.&lt;/p&gt;

&lt;p&gt;The below code will filter out all the items that cost above 50.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;priceLessThan50&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;priceLessThan50Names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;priceLessThan50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;priceLessThan50Names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// [ White Shirt, Black Jeans, Leather Jacket ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, &lt;code&gt;filter()&lt;/code&gt; method will filter out every product that costs above 50. We use it in combination with the &lt;code&gt;map()&lt;/code&gt; method to display the results.&lt;/p&gt;

&lt;p&gt;You can get creative with &lt;code&gt;filter()&lt;/code&gt; method. For example, you can filter the out of stock products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#products-per-page"&gt;
  &lt;/a&gt;
  Products per page
&lt;/h2&gt;

&lt;p&gt;For accessibility reasons, it is convenient to have an option to increase or limit products per page. This can be easily done using the &lt;code&gt;slice()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="cm"&gt;/* 
[
  { Name: "White Shirt", Price: 20, addedToCart: false },
  { Name: "Black Jeans", Price: 35, addedToCart: false },
  { Name: "Leather Jacket", Price: 50, addedToCart: false },
]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;slice()&lt;/code&gt; method only creates a shallow copy, you can write logic to recur it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-item-to-cart"&gt;
  &lt;/a&gt;
  Add item to cart
&lt;/h2&gt;

&lt;p&gt;To add an item to cart, we need to change the &lt;code&gt;addedToCart&lt;/code&gt; status to &lt;code&gt;true&lt;/code&gt;. Since we need to modify the property of each product object, we can use the &lt;code&gt;forEach()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;forEach()&lt;/code&gt; method calls a function for each element in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;White Shirt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Leather Jacket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Coat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addedToCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* [
  { Name: "White Shirt", Price: 20, addedToCart: true },
  { Name: "Black Jeans", Price: 35, addedToCart: false },
  { Name: "Leather Jacket", Price: 50, addedToCart: true },
  { Name: "Sweater", Price: 55, addedToCart: false },
  { Name: "Coat", Price: 80, addedToCart: true },
] */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hard coded the product values, you can use your own logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: You can use the &lt;code&gt;addedToCart&lt;/code&gt; status to show different CSS. Also, you can use the same logic to remove something from the cart.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-amount"&gt;
  &lt;/a&gt;
  Final amount
&lt;/h2&gt;

&lt;p&gt;At the checkout screen, we have to show the final amount. For this, we will need to do three things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make an array of products that are added to the cart&lt;/li&gt;
&lt;li&gt;Extract the price of these products&lt;/li&gt;
&lt;li&gt;Sum them to get final amount&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First we will make array of products that are added to the cart using filter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cartItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addedToCart&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will make an array of the prices using map.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cartItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cartItem&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cartItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// [20, 50, 80]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will use the &lt;code&gt;reduce()&lt;/code&gt; method to find the total.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method is used to return a single value after processing an entire array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 150&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;m&lt;/code&gt; holds the previous value and &lt;code&gt;n&lt;/code&gt; holds the current value. Initially, it will be 0 and 20 (first element). Then it will become 20 (0+20) and 50 (second element). Finally, it will become 70 (20 + 50) and 80 (third element) and return 150.&lt;/p&gt;

&lt;p&gt;Anyone wishing to give arrays and its methods an in-depth look, I recomment this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;mdn article&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 22 Oct 2021 20:17:36 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-2jp9</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-2jp9</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Cleaning up your space... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday! Hope you all have a great weekend 🎊 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26tP4mS08o114G2kg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26tP4mS08o114G2kg/giphy.gif" alt="Relaxing brain"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>First Hacktoberfest and open source contribution</title>
      <author>Krishna Kumar</author>
      <pubDate>Fri, 22 Oct 2021 20:02:49 +0000</pubDate>
      <link>https://dev.to/krishnapro/first-hacktoberfest-and-open-source-contribution-1mpc</link>
      <guid>https://dev.to/krishnapro/first-hacktoberfest-and-open-source-contribution-1mpc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nmftI9_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoejfil4tnv63q95wtgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nmftI9_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoejfil4tnv63q95wtgv.png" alt="comtribution shot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About Me
&lt;/h2&gt;

&lt;p&gt;Hey! I am Krishna from India final year student of Mater of Computer Applications and skilled in web development, Machine learning and cyber security enthusiastic. And also passionate about open source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-started-open-source"&gt;
  &lt;/a&gt;
  How I started open source
&lt;/h2&gt;

&lt;p&gt;This is started 3 months ago when I was watching a video on YouTube by Kunal Kushwaha and Eddie Jaoude They talked about open source and how a college student start contributing to open source. After the video I have join &lt;a href="https://www.eddiehub.org/"&gt;EddieHub&lt;/a&gt; and other community.&lt;/p&gt;

&lt;p&gt;If you are beginner and want to start contribute to open source then you have to join &lt;strong&gt;EddieHub&lt;/strong&gt; organization. There you will get step by step guidance about how to get started.&lt;/p&gt;

&lt;p&gt;First time start contribution in EddieHub organization repository after that some day I listen about &lt;strong&gt;hacktoberfest&lt;/strong&gt; before this I don't have any idea about Hacktoberfest then I starts asking question in community and search on google about this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hacktoberfest is a month-long celebration of open-source software by DigitalOcean that encourages participation in giving back to the open-source community. Developers get involved by completing pull requests, participating in events, and donating to open source projects. During this event, anyone can support open source by contributing changes and earn limited-edition swag&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is the beginner friendly so any can participate no matter you are a coder pro level coder or a newbie even you can start by contributing in documentation.&lt;/p&gt;

&lt;p&gt;If you like this connect with me &lt;br&gt;
&lt;a href="https://twitter.com/krishnapro_"&gt;Twitter&lt;/a&gt; &lt;a href="https://github.com/Krishnapro"&gt;github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>hacktoberfest</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
