<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Using AWS CDK to deploy your Amazon Managed Workflows for Apache Airflow environment</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Wed, 28 Apr 2021 18:48:17 +0000</pubDate>
      <link>https://dev.to/aws/using-aws-cdk-to-deploy-your-amazon-managed-workflows-for-apache-airflow-environment-12cf</link>
      <guid>https://dev.to/aws/using-aws-cdk-to-deploy-your-amazon-managed-workflows-for-apache-airflow-environment-12cf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#using-aws-cdk-to-deploy-your-amazon-managed-workflows-for-apache-airflow-environment"&gt;
  &lt;/a&gt;
  Using AWS CDK to deploy your Amazon Managed Workflows for Apache Airflow environment
&lt;/h3&gt;

&lt;p&gt;What better way to celebrate CDK Day tomorrow, than to return to a previous blog where I wrote about automating the &lt;a href="https://aws-oss.beachgeek.co.uk/3h"&gt;installation and configuration of Amazon Managed Workflows for Apache Airflow (MWAA)&lt;/a&gt;, and take a look at doing the same thing but this time using AWS CDK. &lt;/p&gt;

&lt;p&gt;What this post will show you is how you can use AWS CDK to deploy a working MWAA environment, and I will provide enough details that you should be able to tailor this to your own needs. It should take (if everything works ok!) around 45-60 minutes to complete. Given that Apache Airflow uses Python, this CDK application is also going to be using Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDK Day&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you didn't know, &lt;a href="https://aws-oss.beachgeek.co.uk/fq"&gt;CDK Day&lt;/a&gt; is a community run event that covers the AWS Cloud Development Kit (AWS CDK), a developer tool built on the open source Constructs model. With over 3500 people signed up, if you are reading this before the 30th, there is still time to &lt;a href="https://aws-oss.beachgeek.co.uk/fr"&gt;register&lt;/a&gt; - it is a free, virtual event, so what are you waiting for..&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installing-mwaa-with-cdk"&gt;
  &lt;/a&gt;
  Installing MWAA with CDK
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;What will you need&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS account with the right level of privileges&lt;/li&gt;
&lt;li&gt;An environment with the AWS CDK configured and running - it is outside the scope of this post to cover what AWS CDK is, but check out my open source newsletter as I often feature great tutorial blog posts. Also, I would ensure you are running the latest version too.&lt;/li&gt;
&lt;li&gt;Access to an AWS region where Managed Workflows for Apache Airflow is supported&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have provided everything you need in a &lt;a href="https://aws-oss.beachgeek.co.uk/fs"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some thing to watch out for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are deploying this in an environment that already has VPCs, you may generate an error if you exceed the number of VPCs within your AWS Account.&lt;/li&gt;
&lt;li&gt;If you deploy and are using an existing Amazon S3 bucket as your MWAA Dag bucket, the deployment will fail. Make sure that the Amazon S3 bucket you define for your MWAA environment does not existing before running the CDK app - I need to put some better logic in the code, so by the time you read this I might have done this. If not, keep note.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After checking out the repository you will have the following files on your local developer environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── LICENSE
├── README.md
├── app.py
├── cdk.json
├── dags
│   ├── sample-cdk-dag-od.py
│   └── sample-cdk-dag.py
├── mwaa_cdk
│   ├── mwaa_cdk_backend.py
│   └── mwaa_cdk_env.py
└── requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will go through these files, but first we need to install the AWS CDK constructs we are using. If you are familiar with CDK, then you may already have these but in this specific CDK application, I will be using the &lt;strong&gt;aws_cdk.aws_mwaa&lt;/strong&gt; construct, which you may not have installed.&lt;/p&gt;

&lt;p&gt;To make this easier, I have put them in the requirements.txt so all you need to do is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we take a look at the &lt;strong&gt;app.py&lt;/strong&gt; file, we can see what our CDK application looks like. We are creating two stacks, one called &lt;strong&gt;mwaa_cdk_backend&lt;/strong&gt; and the other called &lt;strong&gt;mwaa_cdk_env&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env python3
import io
from aws_cdk import core

from mwaa_cdk.mwaa_cdk_backend import MwaaCdkStackBackend
from mwaa_cdk.mwaa_cdk_env import MwaaCdkStackEnv

env_EU=core.Environment(region="eu-central-1", account="XXXXXXXXX")
mwaa_props = {'dagss3location': 'airflow-ricsue-cdk-demo','mwaa_env' : 'cdk-ricsue-demo-delete'}

app = core.App()

mwaa_backend = MwaaCdkStackBackend(
    scope=app,
    id="MWAA-Backend",
    env=env_EU,
    mwaa_props=mwaa_props
)

mwaa_env = MwaaCdkStackEnv(
    scope=app,
    id="MWAA-Environment",
    vpc=mwaa_backend.vpc,
    env=env_EU,
    mwaa_props=mwaa_props
)

app.synth()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;mwaa_cdk_backend&lt;/strong&gt; will be used to setup the VPC network that the MWAA environment is going to use. The &lt;strong&gt;mwaa_cdk_env&lt;/strong&gt; is the stack that will configure your MWAA environment. In order to do both though, first we set up some parameters we want to use so that we do not need to hard code these. If you look at&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env_EU=core.Environment(region="eu-central-1", account="XXXXXXXXX")
mwaa_props = {'dagss3location': 'airflow-ricsue-cdk-demo','mwaa_env' : 'cdk-ricsue-demo-delete'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we define the AWS region and the AWS Account we want to deploy this into. These are used when creating the IAM policies as well as ensuring the environment is setup in the AWS region you want to run this in. Following that we define &lt;strong&gt;dagss3location&lt;/strong&gt; which is the name of the Amazon S3 bucket that will get created. You will need to change this before you run this to make sure it is something unique. The &lt;strong&gt;mwaa_env&lt;/strong&gt; is the name we give to the MWAA environment.&lt;/p&gt;

&lt;p&gt;After changing the values in the &lt;strong&gt;app.py&lt;/strong&gt; file and saving, we are ready to deploy. Before we do that, lets take a look at the stacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mwaa_cdk_backend&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is nothing particular interesting about this other than it creates the underlying network infrastructure that MWAA needs. There is nothing you need to do, but if you do want to experiment, then what I would say is that a) ensure you read and follow the networking guidance on the MWAA documentation site, as they provide you with details on what needs to be setup, b) if you are trying to lock down the networking, try just deploying the backend stack, and then manually creating a MWAA environment to see if it works/fails.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from aws_cdk import core
import aws_cdk.aws_ec2 as ec2
import aws_cdk.aws_s3 as s3
import aws_cdk.aws_s3_deployment as s3deploy
import aws_cdk.aws_mwaa as mwaa

class MwaaCdkStackBackend(core.Stack):

    def __init__(self, scope: core.Construct, id: str, mwaa_props, **kwargs) -&amp;gt; None:
        super().__init__(scope, id, **kwargs)

        # Create VPC network

        self.vpc = ec2.Vpc(
            self,
            id="MWAA-ApacheAirflow-VPC",
            cidr="10.192.0.0/16",
            max_azs=2,
            nat_gateways=1,
            subnet_configuration=[
                ec2.SubnetConfiguration(
                    name="public", cidr_mask=24,
                    reserved=False, subnet_type=ec2.SubnetType.PUBLIC),
                ec2.SubnetConfiguration(
                    name="private", cidr_mask=24,
                    reserved=False, subnet_type=ec2.SubnetType.PRIVATE)
            ],
            enable_dns_hostnames=True,
            enable_dns_support=True
        )


        core.CfnOutput(
            self,
            id="VPCId",
            value=self.vpc.vpc_id,
            description="VPC ID",
            export_name=f"{self.region}:{self.account}:{self.stack_name}:vpc-id"
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;mwaa_cdk_env&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The MWAA environment stack is a little more interesting and I will break it down. The first part of the stack configures the Amazon S3 buckets that MWAA will use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MwaaCdkStackEnv(core.Stack):

    def __init__(self, scope: core.Construct, id: str, vpc, mwaa_props,  **kwargs) -&amp;gt; None:
        super().__init__(scope, id, **kwargs)

        # Create MWAA S3 Bucket and upload local dags 

        dags_bucket = s3.Bucket(
            self,
            "mwaa-dags",
            bucket_name=f"{mwaa_props['dagss3location'].lower()}",
            versioned=True,
            block_public_access=s3.BlockPublicAccess.BLOCK_ALL
        )

        s3deploy.BucketDeployment(self, "DeployDAG",
        sources=[s3deploy.Source.asset("./dags")],
        destination_bucket=dags_bucket,
        destination_key_prefix="dags",
        prune=False,
        retain_on_delete=False
        )

        dags_bucket_arn = dags_bucket.bucket_arn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this also does however, is it takes all the files it finds in the local dags folder (on your developer environment) and uploads those as part of the deployment process. You can tweak this to your own requirements if you want, and even comment it out/remove as needed if you do not need to do this.&lt;/p&gt;

&lt;p&gt;Next up we have the code that creates the MWAA execution policy and associated role that will be used by the MWAA worker nodes. This is taken from the MWAA documentation, but you can adjust as needed for your own environment. You might need to do this if you are integrating with other AWS services - this has been setup with default none access, so anything you need to do will need to be added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       # Create MWAA IAM Policies and Roles, copied from MWAA documentation site

        mwaa_policy_document = iam.PolicyDocument(
            statements=[
                iam.PolicyStatement(
                    actions=["airflow:PublishMetrics"],
                    effect=iam.Effect.ALLOW,
                    resources=[f"arn:aws:airflow:{self.region}:{self.account}:environment/{mwaa_props['mwaa_env']}"],
                ),
                iam.PolicyStatement(
                    actions=[
                        "s3:ListAllMyBuckets"
                    ],
                    effect=iam.Effect.DENY,
                    resources=[
                        f"{dags_bucket_arn}/*",
                        f"{dags_bucket_arn}"
                        ],
                ),
                iam.PolicyStatement(
                    actions=[
                        "s3:GetObject*",
                        "s3:Head*",
                                 "s3:GetBucket*",
                                 "s3:List*"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=[
                        f"{dags_bucket_arn}/*",
                        f"{dags_bucket_arn}"
                        ],
                ),
                iam.PolicyStatement(
                    actions=[
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:PutLogEvents",
                        "logs:GetLogEvents",
                        "logs:GetLogRecord",
                        "logs:GetLogGroupFields",
                        "logs:GetQueryResults"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=[f"arn:aws:logs:{self.region}:{self.account}:log-group:airflow-{mwaa_props['mwaa_env']}-*"],
                ),
                iam.PolicyStatement(
                    actions=[
                        "logs:DescribeLogGroups"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=["*"],
                ),
                iam.PolicyStatement(
                    actions=[
                        "sqs:ChangeMessageVisibility",
                        "sqs:DeleteMessage",
                        "sqs:GetQueueAttributes",
                        "sqs:GetQueueUrl",
                        "sqs:ReceiveMessage",
                        "sqs:SendMessage"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=[f"arn:aws:sqs:{self.region}:*:airflow-celery-*"],
                ),
                iam.PolicyStatement(
                    actions=[
                        "kms:Decrypt",
                        "kms:DescribeKey",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt",
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=["*"],
                    conditions={
                        "StringEquals": {
                            "kms:ViaService": [
                                f"sqs.{self.region}.amazonaws.com",
                                f"s3.{self.region}.amazonaws.com",
                            ]
                        }
                    },
                ),
            ]
        )

        mwaa_service_role = iam.Role(
            self,
            "mwaa-service-role",
            assumed_by=iam.CompositePrincipal(
                iam.ServicePrincipal("airflow.amazonaws.com"),
                iam.ServicePrincipal("airflow-env.amazonaws.com"),
            ),
            inline_policies={"CDKmwaaPolicyDocument": mwaa_policy_document},
            path="/service-role/"
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next part configures the security group and subnets needed by MWAA.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   # Create MWAA Security Group and get networking info

        security_group = ec2.SecurityGroup(
            self,
            id = "mwaa-sg",
            vpc = vpc,
            security_group_name = "mwaa-sg"
        )

        security_group_id = security_group.security_group_id

        security_group.connections.allow_internally(ec2.Port.all_traffic(),"MWAA")

        subnets = [subnet.subnet_id for subnet in vpc.private_subnets]
        network_configuration = mwaa.CfnEnvironment.NetworkConfigurationProperty(
            security_group_ids=[security_group_id],
            subnet_ids=subnets,
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final part is the most interesting from the MWAA perspective, which is setting up and then configuring the environment. I have commented some of the environment settings out, so feel free to adjust for your own needs.&lt;/p&gt;

&lt;p&gt;The first thing we do is create a configuration for the MWAA logging. In this particular configuration, I have enabled everything with INFO level logging so feel free to enable/disable or change the logging level as you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Configure specific MWAA settings - you can externalise these if you want

        logging_configuration = mwaa.CfnEnvironment.LoggingConfigurationProperty(
            task_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO"),
            worker_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO"),
            scheduler_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO"),
            dag_processing_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO"),
            webserver_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO")
            )

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up we define some MWAA Apache Airflow configuration parameters. If you use custom properties, then this is where you will add them. Also, if you want to use TAGs for your MWAA environment, you can adjust accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
        options = {
            'core.load_default_connections': False,
            'core.load_examples': False,
            'webserver.dag_default_view': 'tree',
            'webserver.dag_orientation': 'TB'
        }

        tags = {
            'env': f"{mwaa_props['mwaa_env']}",
            'service': 'MWAA Apache AirFlow'
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we come to actually creating the environment, using the stuff we have created or setup above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        # Create MWAA environment using all the info above

        managed_airflow = mwaa.CfnEnvironment(
            scope=self,
            id='airflow-test-environment',
            name=f"{mwaa_props['mwaa_env']}",
            airflow_configuration_options={'core.default_timezone': 'utc'},
            airflow_version='1.10.12',
            dag_s3_path="dags",
            environment_class='mw1.small',
            execution_role_arn=mwaa_service_role.role_arn,
            #kms_key=key.key_id,
            logging_configuration=logging_configuration,
            max_workers=5,
            network_configuration=network_configuration,
            #plugins_s3_object_version=None,
            #plugins_s3_path=None,
            #requirements_s3_object_version=None,
            #requirements_s3_path=None,
            source_bucket_arn=dags_bucket_arn,
            webserver_access_mode='PUBLIC_ONLY',
            #weekly_maintenance_window_start=None
        )

        managed_airflow.add_override('Properties.AirflowConfigurationOptions', options)
        managed_airflow.add_override('Properties.Tags', tags)

        core.CfnOutput(
            self,
            id="MWAASecurityGroup",
            value=security_group_id,
            description="VPC ID for MWAA"
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Running the CDK application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you have reviewed the app, modified it so that it contains your details (your AWS account/unique S3 bucket/etc) you can now run the app and deploy the CDK stacks. To do this we use the "cdk deploy" command.&lt;/p&gt;

&lt;p&gt;First of all, from the directory, make sure everything is working ok. To do this we can use the "cdk ls" command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should return the following (which are the ids assigned in the stacks that this CDK application uses) if it is working ok.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MWAA-Backend
MWAA-Environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now deploy them, either all together or one at a time. This CDK application needs the MWAA-Backend app deployed first as it contains the VPC networking that will be used in the MWAA-Environment stack, so we can deploy that by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk deplpy MWAA-Backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if it is working ok, it should start of with..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MWAA-Backend: deploying...
MWAA-Backend: creating CloudFormation changeset...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then start creating the CloudFormation which you can then track/view via the AWS Console. Once it has finished, you should see something like the following (your numbers/letters will be different):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 ✅  MWAA-Backend

Outputs:
MWAA-Backend.ExportsOutputRefMWAAApacheAirflowVPCB5BDED9D45FBF85F = vpc-0a46c87709f48799a
MWAA-Backend.ExportsOutputRefMWAAApacheAirflowVPCprivateSubnet1Subnet41EDA5200DFEC7E0 = subnet-0a5ea20a194b2e7e1
MWAA-Backend.ExportsOutputRefMWAAApacheAirflowVPCprivateSubnet2SubnetF8BEBBAC6108F015 = subnet-0e4bb92d83d79e8fa
MWAA-Backend.VPCId = vpc-0a46c87709f48799a

Stack ARN:
arn:aws:cloudformation:eu-central-1:XXXXXXXXX:stack/MWAA-Backend/4de53ff0-a84d-11eb-a753-020a8f92cbec
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now deploy the MWAA environment, which we can do simply by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk deploy MWAA-Environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time it will pop up details about some of the security related information, in this case the IAM policies and security groups which I mentioned earlier. Answer "y" to deploying these changes. This will kick off the deployment which you can track by going to the CloudFormation console.&lt;/p&gt;

&lt;p&gt;This will take approx 20-25 minutes, so a good time to grab a cup of tea and read some of my other blog posts perhaps :-)&lt;/p&gt;

&lt;p&gt;If it has been successful, you will see the following output (again, your details will change but it should look similar to this):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 ✅  MWAA-Environment

Outputs:
MWAA-Environment.MWAASecurityGroup = sg-0c2a02f721d2ce27b

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/MWAA-Environment/16380e60-a84e-11eb-a109-0a082239d27a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Testing the environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we take a look at the Amazon S3 bucket we can see we have our MWAA bucket and dags folder created, as well as our local dags uploaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEfCfGwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-s3.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEfCfGwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-s3.png%3Fraw%3Dtrue" alt="s3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we go to the MWAA console, we can see our environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1AxwtL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-env.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1AxwtL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-env.png%3Fraw%3Dtrue" alt="mwaa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now grab the URL for this environment, either by getting it from the console or by using the AWS Cli.&lt;/p&gt;

&lt;p&gt;Just substitute the name of the MWAA environment and AWS region, and it should then give you the URL you can use in your browser (although you will have to append /home to it)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note I am using jq, if you do not have this in your environment, you can run the command without this but just need to find the entry in the output where it says "WebserverUrl"&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws mwaa get-environment --name {name of the environment created} --region={region} | jq -r '.Environment | .WebserverUrl'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as we can see, we have the two sample DAGS that were in the local folder, and are now available for us in the MWAA environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcIh5gO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-ui.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcIh5gO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-ui.png%3Fraw%3Dtrue" alt="ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Removing/Cleaning up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to remove everything we have deployed, all we need to do is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk destroy MWAA-Environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take 20-30 minutes to clean up the MWAA environment. One thing that it will not do however, is remove the Amazon S3 bucket we setup, so you will need to manually delete that via the console (or use the AWS Cli - that would be my approach). Once you have removed that S3 bucket, now clean up the backend stack&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk destroy MWAA-Backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should be much quicker to clean up. Once finished, you should be done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That's all folks, I hope this has been helpful. You can find out more about the MWAA CDK construct by checking out the documentation &lt;a href="https://docs.aws.amazon.com/cdk/api/latest/docs/aws-mwaa-readme.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the things I will hopefully come back to in the weeks to come is taking some of the other ways I have setup MWAA and incorporate these into existing or new CDK stacks. For example;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;either extending the &lt;strong&gt;mwaa_cdk_backend&lt;/strong&gt; stack to include a bastion host so we can configure a Private environment, or even creating a new stack that does that&lt;/li&gt;
&lt;li&gt;setting up and integrating a simple CI/CD stack that improves the developer experience&lt;/li&gt;
&lt;li&gt;setting up the KMS key and then configuring the MWAA environment to use it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any other suggestions, feel free to use the comments or get in touch and let me know. Would be great to hear from you...and on that note.&lt;/p&gt;

&lt;p&gt;If you found this post useful, I would be very grateful if you could let me know by completing this very short feedback thingie, which will probably only take you around 30 seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eventbox.dev/survey/TVWJXPA"&gt;Complete Survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>opensource</category>
    </item>
    <item>
      <title>10 Helpful CSS Tips</title>
      <author>mrwolferinc</author>
      <pubDate>Wed, 28 Apr 2021 18:29:09 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/10-helpful-css-tips-4669</link>
      <guid>https://dev.to/mrwolferinc/10-helpful-css-tips-4669</guid>
      <description>&lt;p&gt;These are 10 small CSS tips that can actually help you in projects. If you would like to request more tips, let me know in the comments section.&lt;/p&gt;




&lt;h1 id="smooth-scrolling"&gt;1. Smooth Scrolling&lt;/h1&gt;

&lt;p&gt;When you visit some websites and try to go to different sections, it scrolls smoothly to that section. You can achieve this feature on your website by using one line of CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;scroll-behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;smooth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/BapbJKK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-prevent-raw-lttextareagt-endraw-resize"&gt;
  &lt;/a&gt;
  2. Prevent &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; Resize
&lt;/h1&gt;

&lt;p&gt;You can use the &lt;code&gt;resize&lt;/code&gt; property to prevent a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element from being resized (or limit it to one axis).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.no-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.horizontal-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.vertical-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/poRYpVL?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#3-drop-cap"&gt;
  &lt;/a&gt;
  3. Drop Cap
&lt;/h1&gt;

&lt;p&gt;You can add a drop cap to a paragraph by using the &lt;code&gt;::first-letter&lt;/code&gt; pseudo-element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/qBRvxZO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#4-drop-shadow"&gt;
  &lt;/a&gt;
  4. Drop Shadow
&lt;/h1&gt;

&lt;p&gt;You can use the &lt;code&gt;drop-shadow()&lt;/code&gt; filter effect on transparent images. It will give a much better shadow effect than using the &lt;code&gt;box-shadow&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;drop-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/bGgJwjq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#5-center-any-raw-ltdivgt-endraw-element"&gt;
  &lt;/a&gt;
  5. Center Any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; Element
&lt;/h1&gt;

&lt;p&gt;It can sometimes be difficult to center a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element on the page, but not with this tip. You can center any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element on the page using a few lines of CSS code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/NWdmbRy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#6-input-caret-color"&gt;
  &lt;/a&gt;
  6. Input Caret Color
&lt;/h1&gt;

&lt;p&gt;You can use the &lt;code&gt;caret-color&lt;/code&gt; property to change the color of the input field caret.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;caret-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/xxgeRYG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#7-prevent-highlighting"&gt;
  &lt;/a&gt;
  7. Prevent Highlighting
&lt;/h1&gt;

&lt;p&gt;This one is similar to #2, but you can use the &lt;code&gt;user-select&lt;/code&gt; property to prevent an element from being highlighted by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.no-highlight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/zYNXobv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#8-input-range-pseudoclasses"&gt;
  &lt;/a&gt;
  8. Input Range Pseudo-Classes
&lt;/h1&gt;

&lt;p&gt;The lesser-known &lt;code&gt;:in-range&lt;/code&gt; and &lt;code&gt;:out-of-range&lt;/code&gt; pseudo-classes can help you validate an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element whose current value is within the range specified by its &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:in-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:out-of-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/poRBMGd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#9-image-overlay"&gt;
  &lt;/a&gt;
  9. Image Overlay
&lt;/h1&gt;

&lt;p&gt;You can create an image overlay using the &lt;code&gt;object-fit&lt;/code&gt; property. This can prove to be useful when you want to create a hero image on your website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.image-overlay&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:only-of-type:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/abproKb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#10-the-raw-transition-endraw-property"&gt;
  &lt;/a&gt;
  10. The &lt;code&gt;transition&lt;/code&gt; Property
&lt;/h1&gt;

&lt;p&gt;You might know this one already, but what if I told you that there was a way to animate elements without the use of keyframes? The &lt;code&gt;transition&lt;/code&gt; property allows you to define the transition between two states of an element. It is mostly used for hover animations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0d6efd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.15s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.15s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.15s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0a58ca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/RwKmbzZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Redux-Cool Philosophy</title>
      <author>Ruben Arushanyan</author>
      <pubDate>Wed, 28 Apr 2021 18:23:47 +0000</pubDate>
      <link>https://dev.to/redux-cool/redux-cool-philosophy-18jp</link>
      <guid>https://dev.to/redux-cool/redux-cool-philosophy-18jp</guid>
      <description>&lt;p&gt;In this article, I am talking about the main problems which we usually face when we use Redux in complex projects. I will also talk about the new &lt;a href="https://redux-cool.js.org"&gt;Redux-Cool&lt;/a&gt; library, with the help of which we can solve those problems. I'm convinced that many developers using Redux need a similar article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;As we know &lt;strong&gt;Redux&lt;/strong&gt; is a predictable state container for JavaScript apps. Below you can find the architecture of Redux.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--07C-YuSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://redux-cool.js.org/img/redux-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07C-YuSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://redux-cool.js.org/img/redux-diagram.png" alt="redux architecture diagram"&gt;&lt;/a&gt;&lt;br&gt;
As can be seen from the diagram above, we have a &lt;strong&gt;store&lt;/strong&gt; where our &lt;strong&gt;state data&lt;/strong&gt; is stored, and if we want to change something in the state, we must create an &lt;strong&gt;action object&lt;/strong&gt; which will contain all the information on how we need to change the state. Afterward, we need to dispatch the action object to the reducer. The reducer must receive the action object and based on that it will figure out what to change and how to make that change. This is how the state management works in Redux. Redux as a state management concept is really good because it is predictable - we are not changing the state directly.&lt;/p&gt;

&lt;p&gt;As we have already mentioned, Redux is very good as a state management concept, however, when we try to realize it in real and complex projects, we encounter numerous problems and headaches which is why many developers refuse to use Redux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/"&gt;ReduxToolkit&lt;/a&gt; tried to solve these problems but with no result.&lt;/p&gt;

&lt;p&gt;I created the &lt;a href="https://redux-cool.js.org"&gt;Redux Cool&lt;/a&gt; to solve all of these problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h2&gt;

&lt;p&gt;Below are the main problems which we usually face when we use &lt;strong&gt;Redux&lt;/strong&gt; in complex projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-1-confusion-and-boredom"&gt;
  &lt;/a&gt;
  Problem 1: Confusion and Boredom
&lt;/h3&gt;

&lt;p&gt;In many projects that have various features, there are many cases when it is required to change the state during some actions. We have to create a new &lt;em&gt;action type&lt;/em&gt; every single time, to add an &lt;em&gt;action handler&lt;/em&gt; for that in reducer, every time we have to &lt;em&gt;import&lt;/em&gt; the appropriate &lt;em&gt;action creator&lt;/em&gt;, create action and dispatch it. This is quite a boring process. Besides, we have many action creators and action handlers, which are just written one under another and not grouped in logical and visual form.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h5&gt;

&lt;p&gt;In &lt;strong&gt;Redux Cool&lt;/strong&gt;, the reducers are created with the help of a &lt;strong&gt;reducer tree&lt;/strong&gt; - the &lt;strong&gt;reducer tree&lt;/strong&gt; is a nested javascript object in which &lt;strong&gt;action-handler&lt;/strong&gt; functions are defined. Each &lt;strong&gt;action-handler&lt;/strong&gt; has its logical place in the &lt;strong&gt;reducer tree&lt;/strong&gt;. The hierarchical order of &lt;strong&gt;action-handlers&lt;/strong&gt; enables us to define reducer-logic in a grouped and visual form.&lt;/p&gt;

&lt;p&gt;Besides, in &lt;strong&gt;Redux Cool&lt;/strong&gt;, we don't have a separate &lt;strong&gt;action creator&lt;/strong&gt; function for each action, instead, we have one &lt;code&gt;actionsCreator&lt;/code&gt; action producer with which we can create any action object in dynamic and inline ways.&lt;/p&gt;

&lt;p&gt;See details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/reducer-tree"&gt;Reducer Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/reducers-creator"&gt;Reducers Creator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/actions-creator"&gt;Actions Creator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#problem-2-define-a-single-action-in-multiple-reducers"&gt;
  &lt;/a&gt;
  Problem 2: Define a Single Action In Multiple Reducers
&lt;/h3&gt;

&lt;p&gt;In complex projects, we are usually splitting our reducer functions into separate reducer functions, each managing independent parts of the state. Then, using the &lt;strong&gt;combineReducers&lt;/strong&gt; function of Redux, we are combining it creating one general reducer function. Very often, there is a need to have specific types of actions, which we would like to apply simultaneously to all reducers or to specific reducers. For example, when we have &lt;strong&gt;LOGOUT&lt;/strong&gt; action and during that action, we want to erase all the account-specific data that exists in our Redux state.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h5&gt;

&lt;p&gt;The actions have &lt;strong&gt;Global&lt;/strong&gt; and &lt;strong&gt;Local&lt;/strong&gt; contexts in &lt;strong&gt;Redux Cool&lt;/strong&gt;. The actions with Global context can be applied to various Reducers.&lt;/p&gt;

&lt;p&gt;See details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/global-and-local-actions"&gt;Global And Local Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#problem-3-actions-with-callback-capability"&gt;
  &lt;/a&gt;
  Problem 3: Actions With Callback capability
&lt;/h3&gt;

&lt;p&gt;Usually, when we are using Redux Middlewares for side effects(e.g. redux-saga), there is a need to have actions with &lt;strong&gt;Callback capability&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h5&gt;

&lt;p&gt;In &lt;strong&gt;Redux Cool&lt;/strong&gt;, all the actions have Callback capability - by default, it is an identity function(x =&amp;gt; x) but we can pass any callback function during the creation of action.&lt;/p&gt;

&lt;p&gt;See details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/actions-creator"&gt;Actions Creator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>news</category>
    </item>
    <item>
      <title>Redux-Cool Philosophy. How to solve the main problems which we usually face when we use Redux in complex projects.</title>
      <author>React</author>
      <pubDate>Wed, 28 Apr 2021 18:15:38 +0000</pubDate>
      <link>https://dev.to/reactjs/redux-cool-philosophy-how-to-solve-the-main-problems-which-we-usually-face-when-we-use-redux-in-complex-projects-473j</link>
      <guid>https://dev.to/reactjs/redux-cool-philosophy-how-to-solve-the-main-problems-which-we-usually-face-when-we-use-redux-in-complex-projects-473j</guid>
      <description>&lt;p&gt;In this article, I am talking about the main problems which we usually face when we use Redux in complex projects. I will also talk about the new &lt;a href="https://redux-cool.js.org"&gt;Redux-Cool&lt;/a&gt; library, with the help of which we can solve those problems. I'm convinced that many developers using Redux need a similar article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;As we know &lt;strong&gt;Redux&lt;/strong&gt; is a predictable state container for JavaScript apps. Below you can find the architecture of Redux.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--07C-YuSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://redux-cool.js.org/img/redux-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07C-YuSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://redux-cool.js.org/img/redux-diagram.png" alt="redux architecture diagram"&gt;&lt;/a&gt;&lt;br&gt;
As can be seen from the diagram above, we have a &lt;strong&gt;store&lt;/strong&gt; where our &lt;strong&gt;state data&lt;/strong&gt; is stored, and if we want to change something in the state, we must create an &lt;strong&gt;action object&lt;/strong&gt; which will contain all the information on how we need to change the state. Afterward, we need to dispatch the action object to the reducer. The reducer must receive the action object and based on that it will figure out what to change and how to make that change. This is how the state management works in Redux. Redux as a state management concept is really good because it is predictable - we are not changing the state directly.&lt;/p&gt;

&lt;p&gt;As we have already mentioned, Redux is very good as a state management concept, however, when we try to realize it in real and complex projects, we encounter numerous problems and headaches which is why many developers refuse to use Redux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/"&gt;ReduxToolkit&lt;/a&gt; tried to solve these problems but with no result.&lt;/p&gt;

&lt;p&gt;I created the &lt;a href="https://redux-cool.js.org"&gt;Redux Cool&lt;/a&gt; to solve all of these problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h2&gt;

&lt;p&gt;Below are the main problems which we usually face when we use &lt;strong&gt;Redux&lt;/strong&gt; in complex projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-1-confusion-and-boredom"&gt;
  &lt;/a&gt;
  Problem 1: Confusion and Boredom
&lt;/h3&gt;

&lt;p&gt;In many projects that have various features, there are many cases when it is required to change the state during some actions. We have to create a new &lt;em&gt;action type&lt;/em&gt; every single time, to add an &lt;em&gt;action handler&lt;/em&gt; for that in reducer, every time we have to &lt;em&gt;import&lt;/em&gt; the appropriate &lt;em&gt;action creator&lt;/em&gt;, create action and dispatch it. This is quite a boring process. Besides, we have many action creators and action handlers, which are just written one under another and not grouped in logical and visual form.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h5&gt;

&lt;p&gt;In &lt;strong&gt;Redux Cool&lt;/strong&gt;, the reducers are created with the help of a &lt;strong&gt;reducer tree&lt;/strong&gt; - the &lt;strong&gt;reducer tree&lt;/strong&gt; is a nested javascript object in which &lt;strong&gt;action-handler&lt;/strong&gt; functions are defined. Each &lt;strong&gt;action-handler&lt;/strong&gt; has its logical place in the &lt;strong&gt;reducer tree&lt;/strong&gt;. The hierarchical order of &lt;strong&gt;action-handlers&lt;/strong&gt; enables us to define reducer-logic in a grouped and visual form.&lt;/p&gt;

&lt;p&gt;Besides, in &lt;strong&gt;Redux Cool&lt;/strong&gt;, we don't have a separate &lt;strong&gt;action creator&lt;/strong&gt; function for each action, instead, we have one &lt;code&gt;actionsCreator&lt;/code&gt; action producer with which we can create any action object in dynamic and inline ways.&lt;/p&gt;

&lt;p&gt;See details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/reducer-tree"&gt;Reducer Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/reducers-creator"&gt;Reducers Creator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/actions-creator"&gt;Actions Creator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#problem-2-define-a-single-action-in-multiple-reducers"&gt;
  &lt;/a&gt;
  Problem 2: Define a Single Action In Multiple Reducers
&lt;/h3&gt;

&lt;p&gt;In complex projects, we are usually splitting our reducer functions into separate reducer functions, each managing independent parts of the state. Then, using the &lt;strong&gt;combineReducers&lt;/strong&gt; function of Redux, we are combining it creating one general reducer function. Very often, there is a need to have specific types of actions, which we would like to apply simultaneously to all reducers or to specific reducers. For example, when we have &lt;strong&gt;LOGOUT&lt;/strong&gt; action and during that action, we want to erase all the account-specific data that exists in our Redux state.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h5&gt;

&lt;p&gt;The actions have &lt;strong&gt;Global&lt;/strong&gt; and &lt;strong&gt;Local&lt;/strong&gt; contexts in &lt;strong&gt;Redux Cool&lt;/strong&gt;. The actions with Global context can be applied to various Reducers.&lt;/p&gt;

&lt;p&gt;See details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/global-and-local-actions"&gt;Global And Local Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#problem-3-actions-with-callback-capability"&gt;
  &lt;/a&gt;
  Problem 3: Actions With Callback capability
&lt;/h3&gt;

&lt;p&gt;Usually, when we are using Redux Middlewares for side effects(e.g. redux-saga), there is a need to have actions with &lt;strong&gt;Callback capability&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h5&gt;

&lt;p&gt;In &lt;strong&gt;Redux Cool&lt;/strong&gt;, all the actions have Callback capability - by default, it is an identity function(x =&amp;gt; x) but we can pass any callback function during the creation of action.&lt;/p&gt;

&lt;p&gt;See details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux-cool.js.org/docs/concepts/actions-creator"&gt;Actions Creator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>reduxcool</category>
    </item>
    <item>
      <title>Integration stories: elevating Storybook with Mock Service Worker</title>
      <author>Mike Schutte</author>
      <pubDate>Wed, 28 Apr 2021 17:51:42 +0000</pubDate>
      <link>https://dev.to/tmikeschu/integration-stories-elevating-storybook-with-mock-service-worker-22m3</link>
      <guid>https://dev.to/tmikeschu/integration-stories-elevating-storybook-with-mock-service-worker-22m3</guid>
      <description>&lt;p&gt;During our last &lt;a href="https://www.process.st/shape-up/"&gt;product cycle&lt;/a&gt; at &lt;a href="https://www.process.st/"&gt;Process Street&lt;/a&gt;, our development experience was heavily aided by combining &lt;a href="https://mswjs.io/"&gt;Mock Service Worker (MSW)&lt;/a&gt; and &lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt;. It's a powerful union of tools worth knowing about.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6367MqYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gg550jaotkmkalacu91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6367MqYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gg550jaotkmkalacu91.png" alt="Storybook with MSW"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-rich-text-editor"&gt;
  &lt;/a&gt;
  Building a rich text editor
&lt;/h2&gt;

&lt;p&gt;At Process Street, we're adding rich text documents ("Pages") to our app to help people document their processes faster without having to learn right away about our more structured workflow models.&lt;/p&gt;

&lt;p&gt;We chose &lt;a href="https://docs.slatejs.org/"&gt;Slate.js&lt;/a&gt; to be the engine of our text editing features, topped off with UI composed by &lt;a href="https://chakra-ui.com/"&gt;Chakra&lt;/a&gt; components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-need-a-rewrite-to-improve-developer-experience"&gt;
  &lt;/a&gt;
  You don't need a re-write to improve developer experience
&lt;/h2&gt;

&lt;p&gt;Process Street is one of many teams who has done its darnedest to keep up with the rapidly evolving JavaScript landscape whilst iterating rapidly on product. The product started as an &lt;a href="https://code.angularjs.org/1.5.6/docs/api"&gt;AngularJS (1.5.6)&lt;/a&gt; application and has gradually adopted more and more &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; components using &lt;a href="https://github.com/coatue-oss/react2angular"&gt;react2angular&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The surface area of our product is already huge, and the frankenstein-state of our UI architecture adds some...friction...to the development experience in certain ways. Instead of loading up the entire application and depending on a locally running API server, we do all of our new UI work in React starting with Storybook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-integrated"&gt;
  &lt;/a&gt;
  Getting integrated
&lt;/h2&gt;

&lt;p&gt;In my 3+ years of using Storybook to build user interfaces, most of the story-able components end up being leaves or very close to leaves in the DOM tree: the ones that are basically taking props and rendering JSX. This is a great pattern for rendering myriad states as named stories, but it's always been a challenge to move up the tree and achieve what is essentially an integration test, but in the form of an interactive story.&lt;/p&gt;

&lt;p&gt;Modern React features and patterns make the demand for integration stories even greater. With the rising popularity and leverage of React's &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;hook&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/context.html#gatsby-focus-wrapper"&gt;context&lt;/a&gt; APIs along with adopting more colocated network fetching patterns (e.g., &lt;a href="https://react-query.tanstack.com/"&gt;react-query&lt;/a&gt; and &lt;a href="https://www.apollographql.com/docs/react"&gt;Apollo Client&lt;/a&gt;) in place of a global store like Redux, it's becoming more common and instinctual to build opaque components (meaning you don't pass them props) that fetch their own data via hooks and context providers.&lt;/p&gt;

&lt;p&gt;The same patterns and tools that have allowed us to write more powerful, loosely coupled, and extensible components have left us in somewhat of a pickle when trying to express these components as stories without going through a kind of surgery to separate prop-driven UI components from wrapping components that take care of sourcing those props.&lt;/p&gt;

&lt;p&gt;Enter Mock Service Worker.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mock by intercepting requests on the network level. Seamlessly reuse the same mock definition for testing, development, and debugging.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;By combining MSW with Storybook, you can express components anywhere in the DOM tree as interactive stories.&lt;/strong&gt; Here's how I got an integration story set up for that Pages feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-a-working-mvp-in-the-app"&gt;
  &lt;/a&gt;
  Implement a working MVP in the app
&lt;/h2&gt;

&lt;p&gt;Similar to testing, you can either build your story after you have a working feature, or use the story to drive the component's development. I like starting with a low-fidelity working feature in the app, then moving to Storybook to refine the UI.&lt;/p&gt;

&lt;p&gt;All of the necessary API endpoints for this feature already existed, so I opted to build the MSW handlers based on real data from the server. To do so, I observed the network traffic in the developer console while exercising the feature. After that I copied (via right-click) the relevant requests and responses related to the feature's interaction points.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMBafV_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/976mjiapk70qfvygfc73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMBafV_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/976mjiapk70qfvygfc73.png" alt="copy fetch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLXI5ipC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq15i1p823x05xay1jpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLXI5ipC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq15i1p823x05xay1jpb.png" alt="copy response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wire-up-msw-for-storybook"&gt;
  &lt;/a&gt;
  Wire up MSW for Storybook
&lt;/h2&gt;

&lt;p&gt;I'm going to focus specifically on how we integrated Storybook with MSW, ignoring setup. Check out &lt;a href="https://blog.logrocket.com/using-storybook-and-mock-service-worker-for-mocked-api-responses/"&gt;this article&lt;/a&gt; for a more thorough walk through of setting everything up. While we're not using it yet in our app, I recently learned there is even a &lt;a href="https://storybook.js.org/addons/msw-storybook-addon"&gt;Storybook addon&lt;/a&gt; that simplifies the integration. For educational purposes, I'll still walk through the DIY setup we currently use.&lt;/p&gt;

&lt;p&gt;Given a &lt;a href="https://mswjs.io/docs/getting-started/install"&gt;standard MSW setup&lt;/a&gt;, first make sure the service worker is kicked off in &lt;code&gt;preview.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .storybook/preview.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/mocks/browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// this allows you to simply use `worker.use` in your story and/or story decorators&lt;/span&gt;
&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case there was a lot of API responses that would clutter the story itself, so I exported an object with named keys from a file called &lt;code&gt;story-data&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// story-data.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the response data in place, import &lt;code&gt;data&lt;/code&gt; and configure the &lt;code&gt;worker.use&lt;/code&gt; API from MSW using the Storybook template pattern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./story-data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/latest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I prefer to put &lt;code&gt;worker.use&lt;/code&gt; in the story component itself instead of a decorator because I often end up using Storybook args to influence the MSW response data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/latest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to remember is you can often leverage the request object data (&lt;code&gt;req&lt;/code&gt;) to influence the response data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/latest/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someLookup&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, you can get creative combining Storybook arguments and request data to simulate full interaction with a remote data source. Now in addition to observing with and interacting with specific UI states, we get to leverage MSW and Storybook to represent specific &lt;em&gt;server&lt;/em&gt; and &lt;em&gt;network&lt;/em&gt; states. Similar to the ethos of integration tests using &lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;React Testing Library&lt;/a&gt;, we're testing and exercising our components in a way that is much closer to how a user will interact with them in production, which is a good, good thing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26tOZ42Mg6pbTUPHW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26tOZ42Mg6pbTUPHW/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in working at Process Street, &lt;a href="https://angel.co/company/process-street/jobs"&gt;we're hiring&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>mockserviceworker</category>
      <category>storybook</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>NextProps in React Functional Components.</title>
      <author>Alex Suarez</author>
      <pubDate>Wed, 28 Apr 2021 17:33:20 +0000</pubDate>
      <link>https://dev.to/alexandprivate/nextprops-in-react-functional-components-1jc2</link>
      <guid>https://dev.to/alexandprivate/nextprops-in-react-functional-components-1jc2</guid>
      <description>&lt;p&gt;NextProps in React Functional Components &lt;/p&gt;

&lt;p&gt;Back in the day, when I was young (LOL), we use react 15, it was more verbose, convoluted, and lacking today's marvelous upgrades, but even when we have some live cycles you really know when to use each of them, besides the most important one "componentDidMount", there was another really important cycle to track props values "componentWillReceiveProps".&lt;/p&gt;

&lt;p&gt;Back then you were able to compare the new props values against the current props values like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentWillReceiveProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something here since count prop has a new value&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So let's say you need to do something like this in React 17 today, to skip an apollo query or to avoid any kinda side effects inside your components?&lt;/p&gt;

&lt;p&gt;The first thing that may cross your mind is to set some states inside your component to track the props values using a useEffect hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ComponentGettingProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;restProps&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;localCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocalCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;localCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// count prop has the same value&lt;/span&gt;
   &lt;span class="nx"&gt;setLocalCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;// ... do what ever you need to do if the count prop value is the same&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// count has a new value, update the local state&lt;/span&gt;
   &lt;span class="nx"&gt;setLocalCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although this works, it may get pretty dirty in with the time since you may be checking several props and the logic block may get hard to read.&lt;/p&gt;

&lt;p&gt;So, is there any other solution for the case? The answer is yes! Looky for us we can create a custom hook using one of the greatest react native hooks out there: "useRef()"&lt;/p&gt;

&lt;p&gt;Let's build our custom hook "usePrevPropValue"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;usePrevPropValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Magically these hooks will return the previous count value in every re-render, the reason why this happens is that the stored value of current in ref get saved but not re-computed in every render, therefore the value you are returning is the previously stored one instead of the current prop value :), pretty super amazing, this is a vivid example that the lack of reactivity is also great.&lt;/p&gt;

&lt;p&gt;Now let's use our hook&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ComponentGettingProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;restProps&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePrevPropValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nl"&gt;Prev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please notice that in practice we just get rid of defining a new state here, but in real life, we also get rid of re-render this component when updating the state we are not using any more :)&lt;/p&gt;

&lt;p&gt;This is the live example in case you need the whole picture&lt;br&gt;
&lt;a href="https://codesandbox.io/s/naughty-snow-uoo48?file=/src/App.js"&gt;https://codesandbox.io/s/naughty-snow-uoo48?file=/src/App.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this article helps you in your next project and thanks for reading. See ya in the next one!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Machine learning in Scratch?? 🐱💡</title>
      <author>Pascal Thormeier</author>
      <pubDate>Wed, 28 Apr 2021 17:28:20 +0000</pubDate>
      <link>https://dev.to/thormeier/let-s-do-machine-learning-in-scratch-h1c</link>
      <guid>https://dev.to/thormeier/let-s-do-machine-learning-in-scratch-h1c</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Wait, really?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, absolutely! Scratch has all the necessary tools for a working linear regression with gradient descent. With a few nifty tricks, we can even visualize how the algorithm works!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-scratch-though"&gt;
  &lt;/a&gt;
  What is Scratch, though?
&lt;/h1&gt;

&lt;p&gt;Scratch is a project of the Scratch Foundation, in collaboration with the Lifelong Kindergarten Group at the MIT Media Lab. It is available for free at &lt;a href="https://scratch.mit.edu"&gt;https://scratch.mit.edu&lt;/a&gt;. Scratch is a tool to teach programming by offering a GUI where instructions are combined via drag&amp;amp;drop. Sprites and backgrounds allow for a user interface with animations and user input. One create all kinds of programs, like simple interactive movies, entire games, or, well, machine learning algorithms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OXSsnLPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63xnofrcrbimy1emworp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OXSsnLPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63xnofrcrbimy1emworp.png" alt="Some example code in Scratch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#machine-learning-in-scratch-why-would-you-even-do-this"&gt;
  &lt;/a&gt;
  Machine learning in Scratch? Why would you even do this?
&lt;/h2&gt;

&lt;p&gt;Because it's possible. I wanted to explore the boundaries of Scratch and figure out new ways to solve certain problems. It made me understand the algorithm better and think outside the box. Besides: I've got a little history in implementing those things in languages or tools you wouldn't expect:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thormeier" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pl7xkg-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--wbt3mQFY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436259/00cde9af-e704-48b7-a00a-32cdc4997190.jpeg" alt="thormeier image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thormeier/algorithm-explained-linear-regression-using-gradient-descent-with-php-1ic0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Algorithm explained: Linear regression using gradient descent with PHP&lt;/h2&gt;
      &lt;h3&gt;Pascal Thormeier ・ Dec 11 '20 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#php&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;This post also explains how linear regression works and how to implement it.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ok-lets-implement-linear-regression-in-scratch-then"&gt;
  &lt;/a&gt;
  Ok, let's implement linear regression in Scratch then!
&lt;/h1&gt;

&lt;p&gt;Awesome! First, I need some data. For linear regression, that's a bunch of XY-coordinates. Since Scratch doesn't have nested lists, I keep them in separate lists. A third list keeps track of the error values, so we can inspect or display it later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yONr2JP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3wygl2o8gv864hku4cn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yONr2JP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3wygl2o8gv864hku4cn.png" alt="The lists in Scratch's side bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm generating the data now, because why not. I could simply generate random data, but some kind of correlation would be nice. &lt;a href="https://www.uvm.edu/~statdhtx/StatPages/More_Stuff/Gener_Correl_Numbers.html"&gt;UVM has a good formula for that&lt;/a&gt;. First, 

&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;xx&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 and 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;yy&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 are set randomly. Then, a new 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;yy&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 is calculated with this formula, with 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;rr&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 as the "rate of correlation":&lt;/p&gt;


&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;y=x∗r+y∗1−r2
y = x*r+y*\sqrt{\smash[b]{1-r^2}}
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;y&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;∗&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;r&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;y&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;∗&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord sqrt"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span class="svg-align"&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;1&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;−&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;r&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="hide-tail"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;I create a new sprite with a single red dot in the center and tell it to calculate it's own coordinates as soon as it's created. I can then clone this point sprite to create new as many data points as I want:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKm0J_i3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbmad9trkatospruvbqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKm0J_i3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbmad9trkatospruvbqo.png" alt="The code for the data point sprite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The nice thing about this: The data is already visualized. This comes more or less out of the box.&lt;/p&gt;

&lt;p&gt;I now introduce the variable &lt;code&gt;m&lt;/code&gt; and set it to 100, to know how many data points I need. Next, I create a "main" sprite that's empty, basically the main entry point of my program. Think of it like Java's &lt;code&gt;public static void main(String[] args)&lt;/code&gt;. There I reset all the variables, set the parameters I need for the linear regression/gradient descent and clone the data point &lt;code&gt;m&lt;/code&gt; times:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ao5Q5CCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo83zxzbokoeouzxx016.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ao5Q5CCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo83zxzbokoeouzxx016.png" alt="The main code to kick off the algorithm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's the result so far:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QSozF0-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq7xxemqmpno9ey3s0i9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSozF0-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq7xxemqmpno9ey3s0i9.png" alt="Data points, neatly distributed with some correlation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I create a sprite called "error point" to plot the error rate. The "error point" is similar to the data point sprite. Also, since the "errors" list is already public, I introduce two more variables: &lt;code&gt;maxIter&lt;/code&gt; for the total number of iterations of gradient descent and &lt;code&gt;currentIter&lt;/code&gt; to know which iteration I'm currently at. For each iteration, I create a clone of the "error point" and tell it to adjust itself, to get a nice plot of the error rate:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sq1J-7uW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxzlgsukl3tirrzrq59b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sq1J-7uW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxzlgsukl3tirrzrq59b.png" alt="Error point code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I introduce a sprite called "line". This is where the main logic will happen. The line can basically adjust itself, rotate and move, whatever its internals tell it to do.&lt;/p&gt;

&lt;p&gt;Linear regression basically tells me the coefficients 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;c0c_0&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 and 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;c1c_1&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 of a linear function. I can use those to calculate a single point (i.e. 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;(x,c0+c1∗x)(x, c_0 + c_1 * x)&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;span class="mpunct"&gt;,&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;∗&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
). To calculate the angle 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;α\alpha&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;α&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 of the hypotenuse, I can use this formula:&lt;/p&gt;


&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;tan⁡α=sideadjacentside
  \tan \alpha = \frac{side}{adjacent side}
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mop"&gt;tan&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;α&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal"&gt;ja&lt;/span&gt;&lt;span class="mord mathnormal"&gt;ce&lt;/span&gt;&lt;span class="mord mathnormal"&gt;n&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal"&gt;s&lt;/span&gt;&lt;span class="mord mathnormal"&gt;i&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;s&lt;/span&gt;&lt;span class="mord mathnormal"&gt;i&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;Therefore:&lt;/p&gt;


&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;α=arctan⁡sideadjacentside
  \alpha = \arctan \frac{side}{adjacent side} 
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;α&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mop"&gt;arctan&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;a&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal"&gt;ja&lt;/span&gt;&lt;span class="mord mathnormal"&gt;ce&lt;/span&gt;&lt;span class="mord mathnormal"&gt;n&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mord mathnormal"&gt;s&lt;/span&gt;&lt;span class="mord mathnormal"&gt;i&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;s&lt;/span&gt;&lt;span class="mord mathnormal"&gt;i&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;When I assume 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;xx&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 as 1 and neglect 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;c0c_0&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 (this is only moving the line, not rotating it), I can calculate the angle of the line as this:&lt;/p&gt;


&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;α=arctan⁡c0
  \alpha = \arctan c_0
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;α&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mop"&gt;arctan&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;This is then part of the iteration of gradient descent in the "line" sprite:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1PNJVPnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujhwdxu4mreimtog4nh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1PNJVPnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujhwdxu4mreimtog4nh4.png" alt="Line sprite, basic reset code, and the loop for gradient descent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far so good. I've got data points, I've got an error plot, I've got a line that I can move around. Now for the fun part: The linear regression with gradient descent itself.&lt;/p&gt;

&lt;p&gt;I've worked with two lists for x's and y's since Scratch doesn't allow for nested lists. Minor inconvenience, but nothing that'll stop me.&lt;/p&gt;

&lt;p&gt;So, first, I'll give the variables used in the loop some default values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XTPZQSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/411bwl3ah5jjz6jxx53n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XTPZQSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/411bwl3ah5jjz6jxx53n.png" alt="Default values in gradient descent loop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up: Looping through the data points to calculate the different between predicted Y and actual Y:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xQGRjYV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j60xb7xt89rdcmip2h43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xQGRjYV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j60xb7xt89rdcmip2h43.png" alt="Looping through all data points"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I use the sums &lt;code&gt;descentSumC0&lt;/code&gt; and &lt;code&gt;descentSumC1&lt;/code&gt; to calculate new versions of &lt;code&gt;c0&lt;/code&gt; and &lt;code&gt;c1&lt;/code&gt; and set them simultaneously:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2BlmAGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s73rnktl6jm37ab29t8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2BlmAGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s73rnktl6jm37ab29t8k.png" alt="Setting of C0 and C1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this block ran through, the line is adjusted and a new calculation is done. Until the maximum number of iterations is reached.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#and-this-works"&gt;
  &lt;/a&gt;
  And this works?
&lt;/h1&gt;

&lt;p&gt;Yup:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUemO7fd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ugav8uk848b15kr7ynv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUemO7fd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ugav8uk848b15kr7ynv.gif" alt="Animation of Scratch executing linear regression with gradient descent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the full code and to try it yourself, here's the Scratch project: &lt;a href="https://scratch.mit.edu/projects/520553339"&gt;scratch.mit.edu/projects/520553339&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ❤️ &lt;em&gt;or a&lt;/em&gt; 🦄&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;buy me a coffee&lt;/em&gt; ☕&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; 🐦&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>scratch</category>
      <category>computerscience</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Improving Developer Productivity with DevSpace</title>
      <author>Rich Burroughs</author>
      <pubDate>Wed, 28 Apr 2021 17:26:50 +0000</pubDate>
      <link>https://dev.to/loft/improving-developer-productivity-with-devspace-3019</link>
      <guid>https://dev.to/loft/improving-developer-productivity-with-devspace-3019</guid>
      <description>&lt;p&gt;What makes developers happy and productive? If you talk to people who work in the tech industry, they will likely all have opinions on it, but there's no clear, shared definition of developer productivity. So how can we measure developer productivity? And how can we improve it?&lt;/p&gt;

&lt;p&gt;As someone working for a company that makes tools for developer workflows, these questions are very interesting for me. I recently read a paper that &lt;a href="https://queue.acm.org/detail.cfm?id=3454124"&gt;appeared in ACM Queue magazine&lt;/a&gt; which has a fascinating take on those questions. The article was written by Nicole Forsgren, Margaret-Anne Storey, Chandra Maddila, Thomas Zimmermann, Brian Houck, and Jenna Butler. I'm going to refer to them as "the authors" or "Forsgren et al." in this post.&lt;/p&gt;

&lt;p&gt;There's a lot of compelling information in the post, but the biggest part of it is made up by explaining SPACE, a framework that the authors created for understanding developer productivity. I will give you a condensed explanation of the framework below, but I encourage you to read their post if this topic interests you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devspace"&gt;
  &lt;/a&gt;
  DevSpace
&lt;/h2&gt;

&lt;p&gt;The team at &lt;a href="https://loft.sh"&gt;Loft&lt;/a&gt; has built several tools to help with developer productivity, but the best-known tool we've made is &lt;a href="https://devspace.sh/"&gt;DevSpace&lt;/a&gt;. DevSpace is a free and open source tool that allows developers who are building apps that run in Kubernetes clusters to be more efficient. I thought it would be interesting to look at the different ways DevSpace can help with productivity in light of the SPACE framework.&lt;/p&gt;

&lt;p&gt;If you're not familiar with DevSpace, we have a great introduction &lt;a href="https://devspace.sh/cli/docs/introduction"&gt;in the docs&lt;/a&gt;, including a quickstart. But I'll give you some of the TL;DR here too. With DevSpace, you can develop against a local Kubernetes cluster or one running in your cloud provider. Instead of rebuilding your container after every change made, DevSpace hot reloads your code in the container that's already running. In the case of an app written in Go, for example, DevSpace can compile the binary and ship it to the already running container instead of going through a new container build process every time you want to see how your updated code works. There are other advantages to developing with DevSpace, too, like defining your development workflow in code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XpqOffP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://loft.sh/blog/images/content/workflow-devspace.png%3Fnf_resize%3Dfit%26w%3D800" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XpqOffP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://loft.sh/blog/images/content/workflow-devspace.png%3Fnf_resize%3Dfit%26w%3D800" alt="DevSpace workflow diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at how the features of DevSpace fit into the SPACE framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-space-framework-and-devspace"&gt;
  &lt;/a&gt;
  The SPACE Framework and DevSpace
&lt;/h2&gt;

&lt;p&gt;SPACE is made up of five categories: Satisfaction and well-being (S), Performance (P), Activity (A), Communication and collaboration (C), and Efficiency and flow (E).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#satisfaction-and-wellbeing"&gt;
  &lt;/a&gt;
  Satisfaction and well-being
&lt;/h3&gt;

&lt;p&gt;The paper states that "Satisfaction is how fulfilled developers feel with their work, team, tools, or culture; well-being is how healthy and happy they are, and how their work impacts it." As the authors point out, there is a proven correlation between productivity and satisfaction.&lt;/p&gt;

&lt;p&gt;This category is dear to my heart. Anyone who has written code for a living knows how frustrating it can be to wait for things. Having to rebuild and deploy containers after every small change is painful enough, let alone having to wait until the code goes through regression tests to see your changes. Being able to hit Save in your IDE and see the results of your changes quickly not only helps with cycle times but with both satisfaction and well-being.&lt;/p&gt;

&lt;p&gt;As the authors point out, problems with satisfaction and well-being can lead to burnout and other adverse outcomes. In the paper, Forsgren et al. cite a book called &lt;a href="https://link.springer.com/chapter/10.1007/978-1-4842-4221-6_10"&gt;Happiness and the Productivity of Software Engineers&lt;/a&gt;, which covers a study of why developers become unhappy. The book states that most of the things that impacted developer happiness negatively "came from technical factors related to the artifact (software product, tests, requirements and design document, architecture, etc.) and the process."&lt;/p&gt;

&lt;p&gt;That surprised me a bit to read, but it also makes a lot of sense. Many things go along with writing code, but in the end, if the technical tools you rely on daily aren't efficient, it's going to lead to frustration. That frustration can lead to other things like burnout and difficulty retaining talented developers. I've seen shops reduced to a cycle of pain, where morale is terrible and people leave because of it, which hurts morale even more. It can be tough to repair a situation like that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Performance refers to the outcomes of the software development process, including software quality and the impact of what the team is building.&lt;/p&gt;

&lt;p&gt;DevSpace is designed for developing microservices. When you set up a project in DevSpace, you can define other services that yours depends on in your devspace.yaml file. This allows you to spin up those dependencies easily and test against them instead of relying on mocks while you test locally. No local dev environment will ever be exactly like production, but the closer we can get, the better. What if the API in one of your dependencies changes, but the mocks in your tests aren't updated?&lt;/p&gt;

&lt;p&gt;Having a more functionally accurate local development environment can definitely impact service quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;Activity metrics are things like the volume of work being done by developers, the number of deployments, incidents, etc. These metrics are ones that people often point to when they look at developer productivity. But as Forsgren et al. point out, "These metrics can be used as waypoints to measure some tractable developer activities, but they should never be used in isolation to make decisions about individual or team productivity because of their known limitations."&lt;/p&gt;

&lt;p&gt;With DevSpace you can spin up your development environment with a git clone and then a single command. Between that and DevSpace’s hot reloading, you can work faster and commit more. DevSpace lets you focus more on what fulfills you - building apps and features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communication-and-collaboration"&gt;
  &lt;/a&gt;
  Communication and collaboration
&lt;/h3&gt;

&lt;p&gt;This category covers things like transparency, how expertise is shared, the quality of code reviews, and onboarding new team members.&lt;/p&gt;

&lt;p&gt;We talked about the ability to define a project and its dependencies in the devspace.yaml file. Another benefit of that is improved communication. By defining developer workflows as code, we can cut down some of the confusion that comes up when a team works on a project together. Have you ever checked a page in Confluence to see when it was last updated and then done the mental math to try to guess if the documentation was still accurate? With DevSpace, you can look at devspace.yaml to see what the workflow is. It's being used all of the time, so you know it's current.&lt;/p&gt;

&lt;p&gt;This is also a benefit to onboarding. New engineers on your team can learn how devspace.yaml and answer more of their own questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#efficiency-and-flow"&gt;
  &lt;/a&gt;
  Efficiency and flow
&lt;/h3&gt;

&lt;p&gt;You've probably heard about the idea of &lt;a href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;flow states&lt;/a&gt; and even experienced them yourself. This category covers both the individual version of being in a flow state, but also how changes flow through the system. Things like interruptions can impact flow, and factors like the number of handoffs that the code goes through. The authors point out that this category can affect the previous ones, both positively and negatively. Optimizing for individual flow can hurt collaboration, for example.&lt;/p&gt;

&lt;p&gt;This is another area where I think DevSpace's hot reloading can have a compelling impact, at least on an individual level. DevSpace can automatically deploy your changes to your development cluster and do it quickly. Instead of having to drop out of your flow state to manage builds, you can see results automatically after hitting Save. If you do need to rebuild a container instead, DevSpace can do that too.&lt;/p&gt;

&lt;p&gt;As the paper mentioned, optimizing for individual flow states can have a negative impact on other things like communication and collaboration. Cutting down on meetings can help flow and hurt collaboration, for example. But there's no such negative impact using DevSpace's hot reloading. It cuts down on the annoying time required to set up and continuously update your local environment, which leaves more time for deep flow work and communication about important things such as features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The paper from Forsgren et al. is a fascinating look at the topic of developer productivity, and I encourage you to read it in detail. As we've seen, using DevSpace in your developer workflow can help address the categories in the SPACE framework with different levels of impact. At the end of the day, developers want to be productive. They want to be shipping their work and doing it with tools that enable them to move faster.&lt;/p&gt;

&lt;p&gt;DevSpace is free and open source. If you're interested in DevSpace, you can &lt;a href="https://youtu.be/AkMWoYv8gWg"&gt;watch this short video&lt;/a&gt; for a demo on how it works or dive right in and &lt;a href="https://devspace.sh/cli/docs/quickstart"&gt;try the quickstart&lt;/a&gt; yourself. If you have questions, you can find us in the &lt;a href="https://slack.loft.sh/?_ga=2.258689027.86653710.1619472048-2084786959.1617291335"&gt;Loft Slack&lt;/a&gt; or the #devspace channel in the &lt;a href="https://slack.k8s.io/"&gt;Kubernetes Slack&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Skeleton screens, but fast</title>
      <author>Taylor Hunt</author>
      <pubDate>Wed, 28 Apr 2021 17:18:05 +0000</pubDate>
      <link>https://dev.to/tigt/skeleton-screens-but-fast-48f1</link>
      <guid>https://dev.to/tigt/skeleton-screens-but-fast-48f1</guid>
      <description>&lt;p&gt;Here’s a fun HTTP+HTML+CSS technique for skeleton screens that works in almost* any stack, and some small but important details we need to do right by it.&lt;/p&gt;

&lt;p&gt;Most importantly, it involves &lt;strong&gt;no client-side JavaScript&lt;/strong&gt;, because adding JS to make a website feel faster usually is counter-productive. In fact, Zach Leatherman inspired this post by saying:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGG26_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1196791261233111040/iWVjazhO_normal.jpg" alt="Zach Leatherman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zach Leatherman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @zachleat
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      For me—I don’t think this is worth it. Not if it has a JS cost.&lt;br&gt;&lt;br&gt;Maybe only for huge images (not on by default) and definitely *not* animating it.&lt;br&gt;&lt;br&gt;Either way, &lt;a href="https://twitter.com/cramforce"&gt;@cramforce&lt;/a&gt; has a nice No-JS blur-up demo in his blog post &lt;a href="https://t.co/9g9BX6ssgC"&gt;industrialempathy.com/posts/image-op…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:57 PM - 21 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1352314419343052800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1352314419343052800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1352314419343052800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGG26_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1196791261233111040/iWVjazhO_normal.jpg" alt="Zach Leatherman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zach Leatherman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @zachleat
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      anyway ask me what I think about skeleton screens which are basically the same thing
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:11 PM - 21 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1352317811285237761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1352317811285237761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1352317811285237761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;small&gt;* The newer isomorphic ones like React struggle mightily to stream over HTTP, with one exception — I’ll get to it later.&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skeleton-screens"&gt;
  &lt;/a&gt;
  Skeleton screens?
&lt;/h2&gt;

&lt;p&gt;Or indicators/placeholders/whatever. The “new” design hotness for when computers aren’t ready to show you something: skeleton screens!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OTzkQDcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i21eavef7r8q6ml10nm3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OTzkQDcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i21eavef7r8q6ml10nm3.jpg" alt="Screens depicting skeletons?"&gt;&lt;/a&gt;&lt;/p&gt;
No, not nearly that entertaining.



&lt;p&gt;Instead of a spinner or progress bar, show something &lt;em&gt;shaped&lt;/em&gt; like the eventual content — it orients the user faster, hints at what to expect, and avoids the page jumping around as it loads:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ztf9GRvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/injgls3xysadxii4p5r0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztf9GRvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/injgls3xysadxii4p5r0.png" alt="The Polar app used a skeleton screen for the name, image, and profile info of its user details page."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://www.lukew.com/ff/entry.asp?1797"&gt;The loading process of Polar&lt;/a&gt;, one of the first apps to popularize the concept of skeleton screens.



&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;We can’t avoid the time it takes to call a search results API — we can cache its responses, but how can you cache all possible search queries ahead of time?&lt;/p&gt;

&lt;p&gt;Here’s what these search skeletons look like with an artificial search API response delay of 5 seconds:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/503580605" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And here’s some code for how they work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;SiteHead&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Search for “${searchQuery}”&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div.SearchSkeletons&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;await&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;searchResultsFetch&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- stalls the HTML stream until the API returns search results --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;for&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;result.products&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ProductCard&lt;/span&gt; &lt;span class="na"&gt;product=&lt;/span&gt;&lt;span class="s"&gt;product&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nt"&gt;then&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/await&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is that “one exception” I mentioned earlier. &lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt; is a JS component framework similar to React, but is actually good at server-side rendering — in particular, built-in support for HTTP streaming. (And last I checked, it’s nearly the only thing in Node that does. RIP Dust)&lt;/p&gt;

&lt;p&gt;If you’re more familiar with other languages/frameworks, here’s how they accomplish something similar to &lt;a href="https://markojs.com/docs/core-tags/#await"&gt;Marko’s &lt;code&gt;&amp;lt;await&amp;gt;&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;b&gt;PHP&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;a href="https://www.php.net/manual/en/function.flush.php"&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.php.net/manual/en/function.ob-flush.php"&gt;&lt;code&gt;ob_flush()&lt;/code&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;

&lt;/dd&gt;
&lt;dt&gt;&lt;b&gt;Ruby on Rails&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;a href="https://api.rubyonrails.org/classes/ActionController/Streaming.html"&gt;&lt;code&gt;ActionController::Streaming&lt;/code&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;

&lt;/dd&gt;
&lt;dt&gt;&lt;b&gt;Spring&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBody.html"&gt;&lt;code&gt;StreamingResponseBody&lt;/code&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;

&lt;/dd&gt;
&lt;dt&gt;&lt;b&gt;ASP.net&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;I recommend searching for ASP’s &lt;code&gt;.BufferOutput&lt;/code&gt; and &lt;code&gt;.Flush()&lt;/code&gt; yourself, because it’ll also turn up results &lt;a href="https://blog.maartenballiauw.be/post/2018/06/14/how-http-chunked-encoding-was-killing-a-request.html"&gt;warning about possible footguns&lt;/a&gt;.&lt;br&gt;&lt;br&gt;

&lt;/dd&gt;
&lt;dt&gt;&lt;b&gt;Django&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;a href="https://docs.djangoproject.com/en/3.1/ref/request-response/#django.http.StreamingHttpResponse"&gt;There’s a &lt;code&gt;StreamingResponseBody&lt;/code&gt;&lt;/a&gt;, but Django really doesn’t care for it. You may need to get creative.&lt;br&gt;&lt;br&gt;

&lt;/dd&gt;
&lt;dt&gt;&lt;b&gt;Others not listed here&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;Try searching for them plus “http stream” or “chunked transfer-encoding”.&lt;br&gt;&lt;br&gt;
&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;By not waiting on search results before sending HTML, browsers get a head start downloading assets, booting JS, calculating styles, and showing the &lt;code&gt;&amp;lt;SiteHeader&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.SearchSkeletons&lt;/span&gt;&lt;span class="nd"&gt;:empty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Skeletons take up at least the full viewport */&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="c"&gt;/* Assume this is an image of the skeletons for now */&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.SearchSkeletons&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* This is the faded white bar that scrubs across the skeletons */&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;shimmer&lt;/span&gt; &lt;span class="m"&gt;2.5s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;shimmer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:empty"&gt;The &lt;code&gt;:empty&lt;/code&gt; pseudo-class&lt;/a&gt; is the key:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;While waiting for the search API, the opening &lt;code&gt;&amp;lt;div class="SearchSkeletons"&amp;gt;&lt;/code&gt; is streamed to browsers, without children or a closing tag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;:empty&lt;/code&gt; only selects elements without children, such as the aforementioned &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As soon as the HTML resumes streaming and fills &lt;code&gt;.SearchSkeletons&lt;/code&gt; with results, &lt;code&gt;:empty&lt;/code&gt; no longer applies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The skeleton styles disappear at the same time the &lt;code&gt;&amp;lt;ProductCard&amp;gt;&lt;/code&gt; components display, reanimating the product skeletons into real products.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A nice thing about this approach is that if the search endpoint responds quickly, &lt;code&gt;:empty&lt;/code&gt; &lt;em&gt;never&lt;/em&gt; matches and browsers waste no resources styling or displaying the product skeletons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-style-recalculation"&gt;
  &lt;/a&gt;
  Avoiding style recalculation
&lt;/h2&gt;

&lt;p&gt;Do we need &lt;code&gt;:empty&lt;/code&gt;? Couldn’t this also work?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;SiteHead&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Search for “${searchQuery}”&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.SearchSkeletons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;…&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div.SearchSkeletons&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;await&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;searchResultsFetch&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nc"&gt;.SearchSkeletons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;for&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;result.products&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ProductCard&lt;/span&gt; &lt;span class="na"&gt;product=&lt;/span&gt;&lt;span class="s"&gt;product&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nt"&gt;then&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/await&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, that does work. But it’s slower: appending new CSS to a document triggers &lt;a href="https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations"&gt;“style recalc”&lt;/a&gt;, where browsers update their selector buckets, invalidate and re-match elements, etc.&lt;/p&gt;

&lt;p&gt;We can’t avoid browsers performing &lt;a href="https://developers.google.com/speed/docs/insights/browser-reflow"&gt;&lt;em&gt;reflow&lt;/em&gt;&lt;/a&gt;, as that always happens when new HTML streams in. But by avoiding additional style recalc:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browsers show the new HTML sooner&lt;/li&gt;
&lt;li&gt;User interaction doesn’t hitch as much&lt;/li&gt;
&lt;li&gt;There’s more CPU time left over to run JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using &lt;code&gt;:empty&lt;/code&gt; vs. additional &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements is a subtle decision, but it impacts user experience just the same.&lt;/p&gt;

&lt;p&gt;Hopefully, this illustrates why a strong understanding of HTML and CSS is important for making a site fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hardwareaccelerated-animation-or-bust"&gt;
  &lt;/a&gt;
  Hardware-accelerated animation or bust
&lt;/h2&gt;

&lt;p&gt;And if &lt;em&gt;that&lt;/em&gt; didn’t illustrate why a strong understanding of HTML and CSS is important for making a site fast, &lt;strong&gt;this sure as hell will&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A predefined &lt;code&gt;@keyframes&lt;/code&gt; that only changes the &lt;code&gt;transform&lt;/code&gt; property is one way to &lt;a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/"&gt;ensure that an animation is hardware-accelerated on the GPU&lt;/a&gt;. That means it frees up the CPU for all the other responsibilities of the main thread: parsing, JavaScript, user interaction, reflow…&lt;/p&gt;

&lt;p&gt;Skeleton animations that run on the main thread have a &lt;em&gt;raft&lt;/em&gt; of complications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The shimmer animation will hiccup and stall whenever JavaScript executes, the document reflows, style recalculates, or JSON is parsed.&lt;/li&gt;
&lt;li&gt;The time the CPU spends running the animation makes the above tasks take longer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The loading indicator delays the content it’s a placeholder for!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At my job, I changed a similar loading animation from using &lt;code&gt;background-position&lt;/code&gt; to &lt;code&gt;transform&lt;/code&gt;. The page FPS went from 49 to 55 on a powerful developer MacBook — imagine how much more on mobile!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-wait-theres-more"&gt;
  &lt;/a&gt;
  But wait, there’s more!
&lt;/h2&gt;

&lt;p&gt;Remember this from the earlier code sample?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="c"&gt;/* Assume this is an image of the skeletons for now */&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The TL;DR is the background image is made of CSS gradients and so that the skeleton is shown ASAP. It makes no sense to have your loading indicator wait on an HTTP request, does it?&lt;/p&gt;

&lt;p&gt;I implemented the background images with Sass variables to prevent the skeletons from drifting out of sync with the product cards if any changes were made. For example, if I tweaked the padding of the actual product cards, the following code would also update the spacing of the skeletons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$skeleton-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#dfe1e1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$card-padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$card-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="mi"&gt;.125rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$img-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$img-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$img-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="nv"&gt;$card-padding&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$img-skeleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$skeleton-color&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$skeleton-color&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$img-height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;transparent&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$img-height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$name-line-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.844rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$name-line-1-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$name-line-1-offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$card-padding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$name-line-1-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$card-padding&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$name-line-1-skeleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nv"&gt;$name-line-1-offset&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$skeleton-color&lt;/span&gt; &lt;span class="nv"&gt;$name-line-1-offset&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$skeleton-color&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name-line-1-offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$name-line-size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;transparent&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name-line-1-offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$name-line-size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$name-line-2-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$name-line-2-offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$card-padding&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$name-line-size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$name-line-2-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$card-padding&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$name-line-2-skeleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nv"&gt;$name-line-2-offset&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$skeleton-color&lt;/span&gt; &lt;span class="nv"&gt;$name-line-2-offset&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$skeleton-color&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name-line-2-offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$name-line-size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;transparent&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name-line-2-offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$name-line-size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$price-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$price-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$price-offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$name-line-2-offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$price-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$card-padding&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$price-skeleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nv"&gt;$price-offset&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$skeleton-color&lt;/span&gt; &lt;span class="nv"&gt;$price-offset&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$skeleton-color&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$price-offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$price-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;transparent&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$price-offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$price-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;.SearchSkeletons&lt;/span&gt;&lt;span class="nd"&gt;:empty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat-y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nv"&gt;$img-skeleton&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$name-line-1-skeleton&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$name-line-2-skeleton&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$price-skeleton&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nv"&gt;$img-width&lt;/span&gt; &lt;span class="nv"&gt;$card-height&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$name-line-1-width&lt;/span&gt; &lt;span class="nv"&gt;$card-height&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$name-line-2-width&lt;/span&gt; &lt;span class="nv"&gt;$card-height&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$price-width&lt;/span&gt; &lt;span class="nv"&gt;$card-height&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nv"&gt;$img-position&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$name-line-1-position&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$name-line-2-position&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$price-position&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.SearchSkeletons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto-fill&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20rem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.75fr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:empty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* TODO show how to use `background-repeat-x: round` to make skeletons responsive */&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s what that Sass compiles to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.SearchSkeletons&lt;/span&gt;&lt;span class="nd"&gt;:empty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat-y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#dfe1e1&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#dfe1e1&lt;/span&gt; &lt;span class="m"&gt;85%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#dfe1e1&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#dfe1e1&lt;/span&gt; &lt;span class="m"&gt;1.344rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;1.544rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#dfe1e1&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#dfe1e1&lt;/span&gt; &lt;span class="m"&gt;2.388rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;2.844rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#dfe1e1&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#dfe1e1&lt;/span&gt; &lt;span class="m"&gt;4.344rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="m"&gt;45%&lt;/span&gt; &lt;span class="m"&gt;8.125rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;13ch&lt;/span&gt; &lt;span class="m"&gt;8.125rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;10ch&lt;/span&gt; &lt;span class="m"&gt;8.125rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;4ch&lt;/span&gt; &lt;span class="m"&gt;8.125rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="m"&gt;.5rem&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I was going to finish this post with how to make these mobile-first styles responsive using &lt;code&gt;background-repeat&lt;/code&gt;, but it was making me put off publishing this altogether, &lt;em&gt;and that’s terrible&lt;/em&gt;. If you’re interested, let me know and I’ll write a followup.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>html</category>
      <category>css</category>
      <category>marko</category>
    </item>
    <item>
      <title>TypeScript's Unknown data type</title>
      <author>Basile Bong</author>
      <pubDate>Wed, 28 Apr 2021 17:10:50 +0000</pubDate>
      <link>https://dev.to/basilebong/typescript-s-unknown-data-type-4p9b</link>
      <guid>https://dev.to/basilebong/typescript-s-unknown-data-type-4p9b</guid>
      <description>&lt;p&gt;There are data types in TypeScript that are better known than others. Today I would like to introduce a less known data type: &lt;code&gt;unknown&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-unknown-endraw-data-type"&gt;
  &lt;/a&gt;
  The &lt;code&gt;unknown&lt;/code&gt; data type
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;unknown&lt;/code&gt; type exists since TypeScript 3.0 (the current version is 4.2) and is a &lt;a href="https://en.wikipedia.org/wiki/Top_type"&gt;top type&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Similar to the &lt;code&gt;any&lt;/code&gt; type, a &lt;strong&gt;variable&lt;/strong&gt; of type &lt;code&gt;unknown&lt;/code&gt; accepts values of any type. &lt;/p&gt;

&lt;p&gt;The difference is that a &lt;strong&gt;value&lt;/strong&gt; of type &lt;code&gt;any&lt;/code&gt; can be assigned to variables of all types and a &lt;strong&gt;value&lt;/strong&gt; of type &lt;code&gt;unknown&lt;/code&gt; can only be assigned to variables of the type &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;unknown&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * New variable of type unknown
 **/&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Assigning a value to an unknown variable
 **/&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;          &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;         &lt;span class="c1"&gt;// Works!&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Using an unknown variable
 **/&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// Error: Type 'unknown' is not assignable to type 'string'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myBool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// Error: Type 'unknown' is not assignable to type 'booelan'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// Works!&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Error: Object is of type 'unknown'&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Error: Object is of type 'unknown'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-raw-unknown-endraw-"&gt;
  &lt;/a&gt;
  When to use &lt;code&gt;unknown&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;unknown&lt;/code&gt; forces type checking and is safer than &lt;code&gt;any&lt;/code&gt;. That's why its use should always be favored over &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example with &lt;code&gt;JSON.parse()&lt;/code&gt;, which always returns a value of type &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following situation the code will compile without noticing that there is a &lt;strong&gt;huge error&lt;/strong&gt;. The JSON string is not of type &lt;code&gt;IPerson&lt;/code&gt; and should not be assignable to the variable &lt;code&gt;phoebe&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"alias": "rose", "color": "red"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This returns any&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;phoebe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This should throw a type error, but doesn't...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To make our code safer and catch the type error, we can use &lt;code&gt;unknown&lt;/code&gt; in combination with a custom Type Guard.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"name": "rose", "age": 25}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This returns any.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notPerson&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Error Type 'unknown' is not assignable to type 'IPerson'.&lt;/span&gt;

&lt;span class="cm"&gt;/** 
 * Create a custom Type Guard to make sure that
 * the parsed data is of type Person.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Use Type Guard.
 */&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a person!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// With the Type Guard the assignement of the &lt;/span&gt;
    &lt;span class="c1"&gt;// variable as type Person works.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;phoebe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Parsed string is not a Person.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/basilebong" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbNFqOPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uDYN3xRa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/298794/cb1468a9-5fad-407c-aa55-b2a844d9da28.jpg" alt="basilebong image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/basilebong/custom-type-guards-in-typescript-dg8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Custom Type Guards in TypeScript&lt;/h2&gt;
      &lt;h3&gt;Basile Bong ・ Sep 26 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;p&gt;Follow me on &lt;a href="https://dev.to/basilebong"&gt;dev.to&lt;/a&gt; and &lt;a href="https://twitter.com/basilebong/"&gt;twitter&lt;/a&gt;!&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__298794"&gt;
  
    .ltag__user__id__298794 .follow-action-button {
      background-color: #ffffff !important;
      color: #5a4afb !important;
      border-color: #5a4afb !important;
    }
  
    &lt;a href="/basilebong" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbNFqOPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uDYN3xRa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/298794/cb1468a9-5fad-407c-aa55-b2a844d9da28.jpg" alt="basilebong image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/basilebong"&gt;Basile Bong&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/basilebong"&gt;Software Developer @userlike. TypeScript,  UX Design, Machine Learning, biking and music. 💬 French, German, English and a little Dutch 🏔️ He/Him&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariusschulz.com/blog/the-unknown-type-in-typescript"&gt;The unknown Type in TypeScript by Marius Schulz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.benmvp.com/blog/when-use-typescript-unknown-versus-any/"&gt;When to use TypeScript unknown vs any by Ben Ilegbodu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Best Software Engineering Books</title>
      <author>Karl L. Hughes</author>
      <pubDate>Wed, 28 Apr 2021 17:07:43 +0000</pubDate>
      <link>https://dev.to/karllhughes/the-best-software-engineering-books-1p46</link>
      <guid>https://dev.to/karllhughes/the-best-software-engineering-books-1p46</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTRjRy6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.karllhughes.com/assets/img/software-engineering-books.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTRjRy6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.karllhughes.com/assets/img/software-engineering-books.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Early in my career as an engineering manager, I wrote a long list of &lt;a href="https://www.karllhughes.com/posts/reading-for-engineering-managers"&gt;my favorite engineering management books&lt;/a&gt;. That list has reached thousands of new technical leaders, but I’m often asked for book recommendations by engineers who &lt;em&gt;aren’t&lt;/em&gt; interested in making the leap into management.&lt;/p&gt;

&lt;p&gt;I’ve had this informal list brewing for years, and I’ve often shared sections of it with &lt;a href="https://www.karllhughes.com/posts/graduate-code-bootcamp"&gt;new bootcamp graduates&lt;/a&gt;, but this is the first time I’m sharing this list publicly. I hope this helps you sort through the &lt;a href="https://amzn.to/3eQcloH"&gt;thousands of software engineering books&lt;/a&gt; that are available and move your career forward - wherever you are today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-earlycareer-engineers"&gt;
  &lt;/a&gt;
  For Early-Career Engineers
&lt;/h2&gt;

&lt;p&gt;Whether you just graduated from college, a developer bootcamp or you’re a self-taught coder, these books are where I would tell a new software engineer to start. These books are mostly focused on practical, applied programming knowledge, but I have included some reads that will give you a taste of theory and interpersonal best practices.&lt;/p&gt;

&lt;p&gt;The first three years of your software development career will likely be the rockiest, but I hope these books will help you get through it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cracking-the-coding-interview-189-programming-questions-and-solutions"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3vyw4z0"&gt;Cracking the Coding Interview: 189 Programming Questions and Solutions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3vyw4z0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U9WGPF7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ETrZl7a.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me be honest, &lt;a href="https://www.karllhughes.com/posts/hiring-process"&gt;I hate the state of coding interviews right now&lt;/a&gt;. So, while I don’t put engineers through the gauntlet like this, whiteboard and algorithmic interviews are still very common in our industry. In order to break in, it will help to get good at these. That’s where a book like &lt;em&gt;Cracking the Coding Interview&lt;/em&gt; comes in.&lt;/p&gt;

&lt;p&gt;“I have some small quibbles with how some of the problems were worded, but the level of difficulty is very representative of what the big tech companies are using. You might even run into these questions in your own interviews since Gayle is choosing questions that are popular among interviewers today.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-imposters-handbook"&gt;
  &lt;/a&gt;
  &lt;a href="https://bigmachine.io/products/the-imposters-handbook/"&gt;The Imposter’s Handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Rob Conery’s book was written explicitly for developers &lt;em&gt;without&lt;/em&gt; a traditional computer science background. Like &lt;em&gt;Cracking the Coding Interview&lt;/em&gt; above, it will help you get your foot in the door, but I’d argue &lt;em&gt;The Imposter’s Handbook&lt;/em&gt; is more broadly useful as well. It covers many of the fundamental concepts that will help you get a better idea of the lower-level pieces of computer programming.&lt;/p&gt;

&lt;p&gt;“I am being schooled right now and it feels like good! I cannot recommend this too much for people like myself who never went to college for computer science but wish for proper understanding of the concepts.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-code-a-handbook-of-agile-software-craftsmanship"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3rZMTk3"&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;From testing to class and function design to variable naming, &lt;em&gt;Clean Code&lt;/em&gt; covers applied software design fundamentals. I buy a copy of this for every engineer I hire and encourage them to read (or re-read) it as part of their onboarding. I love the examples and concrete logic behind each of Uncle Bob Martin’s recommendations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: I wrote a &lt;a href="https://www.karllhughes.com/posts/five-takeaways-from-clean-code-a-handbook-of-agile-software-craftsmanship"&gt;longer review of Clean Code a few years ago if you’d like to check that out&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apprenticeship-patterns-guidance-for-the-aspiring-software-craftsman"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3vASTSx"&gt;Apprenticeship Patterns: Guidance for the Aspiring Software Craftsman&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://redsquirrel.com/dave/"&gt;Dave Hoover&lt;/a&gt; helped create Dev Bootcamp, one of the first short-term coding schools in the United States, and wrote this great model for new developers. It covers many of the common issues you’re likely to face as a new developer, mostly focusing on interpersonal and motivational challenges.&lt;/p&gt;

&lt;p&gt;“Brilliant stuff! Reading this book was like being in a time machine that pulled me back to those key learning moments in my career as a professional software developer and, instead of having to learn best practices the hard way, I had a guru sitting on my shoulder guiding me every step towards master craftsmanship.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-senior-engineers"&gt;
  &lt;/a&gt;
  For Senior Engineers
&lt;/h2&gt;

&lt;p&gt;As you progress into a senior or principal engineering role, much of your learning will start to get more specialized. That said, there are a few books that will help you continue to grow as an engineer and architect during the long, middle phase of your career.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-architecture-of-open-source-applications"&gt;
  &lt;/a&gt;
  &lt;a href="https://aosabook.org/en/index.html"&gt;The Architecture of Open Source Applications&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As I gained real-world experience as a software engineer, I always wanted to read more case studies. It’s exceedingly rare to find a deep dive into the architecture and evolution of most corporate software because the internals are a closely guarded secret, but that’s where &lt;em&gt;The Architecture of Open Source Applications&lt;/em&gt; really shines. This series of books includes dozens of internal accounts from well-known &lt;a href="https://www.karllhughes.com/posts/open-source-companies"&gt;open-source companies and projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“Most software engineers do not spend enough time looking at existing software to learn from them. This book tries to fill that gap by making available descriptions of many interesting projects. You can’t replace actually studying major software projects, but this comes a pretty close second.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-architecture-a-craftsmans-guide-to-software-structure-and-design"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3tvdXYX"&gt;Clean Architecture: A Craftsman’s Guide to Software Structure and Design&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Where &lt;em&gt;Clean Code&lt;/em&gt; focuses on functions and classes, &lt;em&gt;Clean Architecture&lt;/em&gt; zooms out one level to cover composition, service boundaries, and high-level application architecture. Even if you never take on the title of “Software Architect,” this book will give you a lot of insight into how you can design better software that scales.&lt;/p&gt;

&lt;p&gt;“If you’re looking for a primer for why you should take software/system architecture seriously and what the benefits of doing so would be, then I would highly recommend this book.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-dataintensive-applications-the-big-ideas-behind-reliable-scalable-and-maintainable-systems"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3saNa45"&gt;Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3saNa45"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rplt7qL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4zaJKSB.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://www.indexventures.com/perspectives/data-not-software-is-eating-the-world/"&gt;data eating the world&lt;/a&gt;, the baseline for building applications that can handle “big data” is rising. &lt;em&gt;Designing Data-Intensive Applications&lt;/em&gt; gives you an overview of how they are built.&lt;/p&gt;

&lt;p&gt;“Kleppman has coherently blended the relevant computer science theory with modern use cases and applications…Design concepts don’t go out-of-date soon, so the book has very long shelf-life.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem-with-software-why-smart-engineers-write-bad-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3vDd02r"&gt;The Problem with Software: Why Smart Engineers Write Bad Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Early-career engineers who join an existing codebase often marvel at some of the poor design choices. But having been on both sides of those codebases, senior engineers realize that those decisions were made with different goals and contexts in mind. If you haven’t internalized this, &lt;em&gt;The Problem with Software&lt;/em&gt; is a good starting point. It makes the case that software is rarely &lt;em&gt;intended&lt;/em&gt; to be a mess but shows some of the reasons it becomes one anyway.&lt;/p&gt;

&lt;p&gt;“There’s a great deal of thought-provoking material here and I recommend the book highly. You could use this as a good course book in an undergraduate or masters-level software engineering course.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-design-decoded-66-ways-experts-think"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3eSiZL0"&gt;Software Design Decoded: 66 Ways Experts Think&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3eSiZL0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tg4tnD-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bwm277t.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This little book is largely pictures, but it’s one of those resources I like to keep close at hand for whenever I have a few minutes. Thumbing through the pages will be a great reminder of some fundamental practices that expert software developers employ, and you’ll (hopefully) employ as your career progresses.&lt;/p&gt;

&lt;p&gt;“This is a great little book. Full of insights abstracted from working software designers. You’ll find yourself nodding at times, making notes on practices to try, and thinking of all the people you want to read this.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classics"&gt;
  &lt;/a&gt;
  Classics
&lt;/h2&gt;

&lt;p&gt;The books here have stood the test of time - many dating back 20 or more years. While you might think software engineering has changed so much in that time as to make any reading material irrelevant, you’d be surprised how little really has changed. We’re still arguing over how to estimate projects, &lt;a href="https://www.karllhughes.com/posts/testing-matters"&gt;when to test them&lt;/a&gt;, and where to draw abstractions between our classes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-patterns-elements-of-reusable-objectoriented-software-1994"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3twmNWh"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt; (1994)
&lt;/h3&gt;

&lt;p&gt;The so-called &lt;em&gt;Gang of Four&lt;/em&gt; book introduces several “design patterns” that are still widely used in software engineering today. The examples are a bit tough to read if you’re used to working in a loosely-typed language like JavaScript, but the fundamental concepts are applicable to any object-oriented language.&lt;/p&gt;

&lt;p&gt;“Study it, learn from from it, implement things they way it suggests - then learn that it is not dogmatic. Simply use it to help shape your software solutions into recognisable forms that can be maintained and evolved over time.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-mythical-manmonth-essays-on-software-engineering-1975"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3qWVWRM"&gt;The Mythical Man-Month: Essays on Software Engineering&lt;/a&gt; (1975)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3qWVWRM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfYc6gp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/D9dPt4p.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing that &lt;a href="https://www.karllhughes.com/posts/non-technical-founder-hiring-cto"&gt;non-technical people don’t realize&lt;/a&gt; is that throwing more software engineers at a problem rarely solves it faster. &lt;em&gt;The Mythical Man-Month&lt;/em&gt; teaches the opposite: cherish the days when you just have a few people working on the project because that’s when it’s likely to move fastest. Even though this book comes from the days of punch cards, it’s highly relevant to engineers and project managers today.&lt;/p&gt;

&lt;p&gt;“Impressive how companies repeat the same mistakes identified on this book, written almost half-century ago. The same will hold within half a century from now, as people and companies continue to ignore contents from great books such as this one.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-pragmatic-programmer-your-journey-to-mastery-1999"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3eNmceR"&gt;The Pragmatic Programmer: Your Journey To Mastery&lt;/a&gt; (1999)
&lt;/h3&gt;

&lt;p&gt;There’s a fine line between pragmatism and laziness in programming. &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; shares examples and analogies that helped me figure out how to spot the difference. The authors have updated the book, but the core ideas stay just as true today as they were in 1999.&lt;/p&gt;

&lt;p&gt;“If there was only one book I could recommend for other programmers to read it would have to be this one. You and your coworkers will thank you in the future.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refactoring-improving-the-design-of-existing-code-1999"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3bT0Evn"&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt; (1999)
&lt;/h3&gt;

&lt;p&gt;I think one of the hardest ideas for new engineers to grasp is refactoring. In theory, we all get that code needs to be revisited over time, but &lt;em&gt;actively&lt;/em&gt; changing it for the better throughout a project’s life takes discipline and some concrete tactics. This book will give you some patterns and examples that make refactoring more tangible, no matter your experience level.&lt;/p&gt;

&lt;p&gt;“For those who don’t know what to do when handed a bunch of legacy code, but don’t know where to start, this book is for you.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#engineering-leadership"&gt;
  &lt;/a&gt;
  Engineering Leadership
&lt;/h2&gt;

&lt;p&gt;Whether you’re considering a move into management or you’re just taking on a technical lead role, the books in this category should be on any software engineer’s reading list. They might be a little too abstract for junior developers, but after a few years in the industry, you’ll start to see some of these patterns in the real world. These books will help you understand and manage relationships with your team better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-managers-path-a-guide-for-tech-leaders-navigating-growth-and-change"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3rZobAz"&gt;The Manager’s Path: A Guide for Tech Leaders Navigating Growth and Change&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you decide to go into &lt;a href="https://www.karllhughes.com/posts/engineering-manager"&gt;engineering management&lt;/a&gt;, your career path, goals, and day-to-day tasks change completely. Most new managers fail to realize this and still try to spend time coding and keeping up with every technical challenge. &lt;em&gt;The Manager’s Path&lt;/em&gt; gives you a guide to this new career path and is well worth a read if you’re applying for your first management roles now.&lt;/p&gt;

&lt;p&gt;“Fournier’s book is a comprehensive overview of all the roles on the career path of modern technical management (starting from “senior engineer mentoring an intern” all the way up to CTO) and how to deal with the challenges at every step of the way.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-phoenix-project-a-novel-about-it-devops-and-helping-your-business-win"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3tuukF8"&gt;The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3tuukF8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k64m08L1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3u6J3de.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever since reading &lt;em&gt;&lt;a href="https://amzn.to/3cYYNEQ"&gt;The Goal&lt;/a&gt;&lt;/em&gt; a few years ago, I’ve liked narrative fiction around business topics. &lt;em&gt;The Phoenix Project&lt;/em&gt; is aimed at IT and DevOps leaders who see projects consistently falling behind but aren’t sure why. In it, you’ll see all the archetypes and ways that you can handle each situation.&lt;/p&gt;

&lt;p&gt;“I’m a Linux sysadm in an operations team. The book is pretty much about my daily life, all the struggles and problems. Half way through the book, I started considering leaving my job and open a kebab shop instead.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#startup-engineering-management"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/2NqWJwm"&gt;Startup Engineering Management&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;While &lt;em&gt;The Phoenix Project&lt;/em&gt; lends itself to leaders at large technology organizations, &lt;em&gt;Startup Engineering Management&lt;/em&gt; specifically deals with growing, funded businesses who are bringing on their first few leaders. Much of the book is very tactical and gives you some good starting points for management practices like one-on-ones, performance evaluations, and setting up your team for success.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-humans-biting-and-humorous-tales-of-a-software-engineering-manager"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3tJPcZl"&gt;Managing Humans: Biting and Humorous Tales of a Software Engineering Manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another story-based book, &lt;em&gt;Managing Humans&lt;/em&gt; will give you some insight into the real problems that engineering leaders face. Even if you don’t go into management, this will provide you a little bit of empathy for the challenges your boss deals with every day.&lt;/p&gt;

&lt;p&gt;“No matter where you are in your career, read this book. As an employee, you’ll understand your boss and other teams. As a leader, you’ll understand your role a little better and probably pick a few nuggets up.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upandcomers"&gt;
  &lt;/a&gt;
  Up-And-Comers
&lt;/h2&gt;

&lt;p&gt;Finally, I wanted to highlight some relatively new books that I think are worth considering. Time will tell if these stick around long enough to fall into the “Classics” category someday, but whether they do or not, add them to your reading list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#staff-engineer-leadership-beyond-the-management-track"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3rWY2Cs"&gt;Staff Engineer: Leadership Beyond the Management Track&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You could go through the standard “management” track, but you don’t have to have the title of “manager” to be a leader on your team. Senior engineers who want to be recognized for their technical expertise and years of gained wisdom will benefit from reading &lt;em&gt;Staff Engineer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;“I really like how Will writes: he explores relevant systems and tried to distill them. As a newly minted staff eng, this book really helped jumpstart my modeling of how to be effective.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-developher-playbook-5-simple-steps-to-get-ahead"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/2P1K3N9"&gt;The DevelopHer Playbook: 5 Simple Steps to Get Ahead&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/2P1K3N9"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WY1eUvMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8irHz9Z.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.karllhughes.com/posts/diversity-in-conference-speakers"&gt;Diversity is a huge problem in software engineering&lt;/a&gt;. I’ve been fortunate enough to work on teams with pretty good gender distributions, so from talking to a lot of women in our field, I know that they face some unique challenges. Following the &lt;em&gt;&lt;a href="https://amzn.to/3f8quh5"&gt;Lean In&lt;/a&gt;&lt;/em&gt; model, &lt;em&gt;The DevelopHer Playbook&lt;/em&gt; gives women in tech some insights into how they can advance their careers by being their own best advocates.&lt;/p&gt;

&lt;p&gt;“As a woman in technology I go to conferences and hear a lot of motivational speeches. I get really pumped up but most of those don’t give me a way to attain my goals. This book is the answer for that. It gave me small goals which I can implement.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-the-code-five-steps-to-a-lifechanging-software-development-job"&gt;
  &lt;/a&gt;
  &lt;a href="https://amzn.to/3rSKqIh"&gt;Breaking the Code: Five Steps to a Life-Changing Software Development Job&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Breaking the Code&lt;/em&gt; shares the oft-overlooked secret of marketing yourself to build a better career. I’m a &lt;a href="https://www.karllhughes.com/posts/resilient-career"&gt;huge advocate for this method&lt;/a&gt;, but a lot of developers think that technical skills alone will be the thing that sets them apart. Not so, and this book will show you why.&lt;/p&gt;

&lt;p&gt;“After reading this book, I understand why I am having such difficulty getting interviews. I have missed all five steps the author outlines as essential to finding your first coding role.”&lt;/p&gt;

&lt;p&gt;Have your own recommendations? Send them to me &lt;a href="https://twitter.com/KarlLHughes"&gt;on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Create CSS Gradient Animations Effortlessly 🌌</title>
      <author>Jordi Enric</author>
      <pubDate>Wed, 28 Apr 2021 17:02:59 +0000</pubDate>
      <link>https://dev.to/jordienr/create-css-gradient-animations-effortlessly-4je9</link>
      <guid>https://dev.to/jordienr/create-css-gradient-animations-effortlessly-4je9</guid>
      <description>&lt;p&gt;Here's a preview of what we'll make 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jordienric/embed/JjEVgXv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-gradient"&gt;
  &lt;/a&gt;
  1. Create a gradient
&lt;/h2&gt;

&lt;p&gt;I'll save mine in a variable for easy reuse.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--main-gradient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-66deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#15162a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#291a33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#381a2c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#121e42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-a-container-div-and-add-the-background"&gt;
  &lt;/a&gt;
  2. Create a container div and add the background
&lt;/h2&gt;

&lt;p&gt;We use background-size to zoom into the gradient.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--main-gradient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-create-the-animation"&gt;
  &lt;/a&gt;
  3. Create the animation
&lt;/h2&gt;

&lt;p&gt;This is a basic animation that changes the background-position. Since we zoomed into the gradient it will look like it's moving.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;00%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-add-the-animation-to-our-container"&gt;
  &lt;/a&gt;
  4. Add the animation to our container!
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--main-gradient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="m"&gt;8s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check the codepen &lt;a href="https://codepen.io/jordienric/pen/JjEVgXv"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it!&lt;/p&gt;

&lt;p&gt;If you enjoy this content consider &lt;a href="https://twitter.com/jordienr"&gt;following me on twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
