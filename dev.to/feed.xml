<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Load-Balancing Minecraft Servers with Kong Gateway</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 08 Jun 2021 14:41:16 +0000</pubDate>
      <link>https://dev.to/mbogan/load-balancing-minecraft-servers-with-kong-gateway-59ml</link>
      <guid>https://dev.to/mbogan/load-balancing-minecraft-servers-with-kong-gateway-59ml</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_T3OwzPVECQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's time to have some fun. Sure, tell your colleagues or your family that you're doing research, experimenting with some new tech—because that is what we'll be doing—but just don't let them see you playing Minecraft!&lt;/p&gt;

&lt;p&gt;Here's the scenario: You're organizing a full-day Minecraft class for local STEM students. You need to run your own Minecraft servers to ensure a kid-friendly multiplayer environment, restricted only to your students. One server won't be enough, so you'll run two servers simultaneously, expecting your load balancer to handle sending students to Server A or Server B, depending on the load.&lt;/p&gt;

&lt;p&gt;In this article, we're going to explore port forwarding and load balancing with &lt;a href="https://konghq.com/kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Gateway&lt;/a&gt;. We're going to do this by spinning up multiple Minecraft servers, and then placing Kong Gateway in front of these upstream services to handle port forwarding and load balancing.&lt;/p&gt;

&lt;p&gt;Before we dive in, let's briefly cover a few important technology concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-concepts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Key Concepts&lt;/strong&gt;
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#port-forwarding"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Port Forwarding&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Port forwarding is receiving network requests on a certain port of a machine and forwarding those requests to a different port. A router, firewall or &lt;a href="https://konghq.com/learning-center/api-gateway/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;API gateway&lt;/a&gt; usually handles this task. For example, you might have a web server listening on port 3000 and a database server listening on port 5000. Your API gateway would listen for requests from outside your network. Requests addressed to port 80 would be forwarded by the gateway to your web server at port 3000. Meanwhile, requests addressed to port 5432 would be forwarded to your database server at port 5000.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#load-balancing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Load Balancing&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Load balancing is the task of distributing multiple requests to a server in a balanced manner across numerous replicas of that server. A specific piece of hardware or software called a load balancer usually handles this. The outside world is unaware that there are multiple replicas of a server running. They believe they’re making requests to a single server. The load balancer, however, distributes the request load to prevent any one server from being overwhelmed. In the case of a replica failing completely, the load balancer ensures that requests only go to healthy nodes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#kong-gateway"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Kong Gateway&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Kong Gateway is a thin API gateway layer that sits in front of upstream services, capable of performing these port forwarding and load balancing tasks. Whether those upstream services are web servers or databases or even Minecraft game servers, Kong is the front-door greeter to all requests. In addition to traffic control, Kong Gateway can manage &lt;a href="https://konghq.com/learning-center/api-gateway/api-gateway-authentication/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;authentication&lt;/a&gt;, request transformations, analytics, and logging.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tcp-stream-support"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TCP Stream Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;One aspect of our Minecraft project that sets it apart from deploying a typical web server or database is that Minecraft requires an established connection between the Minecraft client (the gamer) and server. Rather than expecting stateless HTTP requests, we'll need to handle TCP connections with streaming data. Fortunately, &lt;a href="https://konghq.com/blog/tcp-stream-support-kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Gateway fully supports TCP streaming&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-project-approach"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Our project approach&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We're going to walk through this project step-by-step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Spin up a single, local Minecraft server without any port forwarding.&lt;/li&gt;
&lt;li&gt;Spin up a Minecraft server on a non-default port, configuring Kong Gateway to port forward requests to that server.&lt;/li&gt;
&lt;li&gt;Spin up two Minecraft servers on different ports, configuring Kong Gateway to load balance and port forward connection requests.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, we'll start simple, and we'll slowly build on complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-youll-need-to-get-started"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What you'll need to get started&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You don't &lt;em&gt;actually&lt;/em&gt; need a lot of familiarity with Minecraft to progress through this mini-project. Since it’s easiest to spin up Minecraft servers within Docker containers, basic familiarity with Docker may be helpful. &lt;/p&gt;

&lt;p&gt;You will need to &lt;a href="https://docs.docker.com/engine/install/"&gt;install Docker Engine&lt;/a&gt; on your local machine. Lastly, if you want to test that our project results are successful, you'll need to &lt;a href="https://www.minecraft.net/en-us/about-minecraft"&gt;install the Minecraft game client&lt;/a&gt; and log in as a paid owner of the game. The free trial of Minecraft doesn't allow connecting to multiplayer servers, which is what we'll be running for our project.&lt;/p&gt;

&lt;p&gt;Are you ready to do this? Here we go!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-single-minecraft-server-with-default-port"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1: Single Minecraft Server with Default Port&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;In this first step, we want to spin up a single Minecraft server on our local machine. We'll use the default port for the server, and then we'll connect our game client to the server. It’s simple to deploy the Minecraft server as a Docker container, with the Docker image found &lt;a href="https://hub.docker.com/r/itzg/minecraft-server"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a terminal window, we'll run this command to pull down the server image and spin it up in a container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ docker run -p 25000:25565 -e EULA=true itzg/minecraft-server

Unable to find image 'itzg/minecraft-server:latest' locally
latest: Pulling from itzg/minecraft-server
...

Status: Downloaded newer image for itzg/minecraft-server:latest
...

[init] Checking for JSON files.
[init] Setting initial memory to 1G and max to 1G
[init] Starting the Minecraft server...
...

[Server thread/INFO]: Preparing start region for dimension minecraft:overworld
[Worker-Main-5/INFO]: Preparing spawn area: 1%
...


...

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As our container starts up, it downloads the Docker image for the Minecraft server. Once the image downloads, it starts up the server, and we see the log messages of the server startup. Here's an explanation of flags and options we provided to docker run in our command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;-p&lt;/code&gt; specifies a port on the host (your local machine) that Docker should bind to a port on the container. In this case, our local machine's port 25000 will point to the container's port 25565. By default, Minecraft servers run on port 25565. Typically, you will always bind to the container's port 25565, regardless of the port on the host that you choose to use.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;-e EULA=true&lt;/code&gt; provides an environment variable that the Docker container needs to use when starting up the server within the container. The Minecraft server application requires that you accept the EULA upon startup. Providing this environment variable is the Docker way to do that.&lt;/li&gt;
&lt;li&gt;  Lastly, we specify the name of the Docker image (on &lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt;), which contains the Minecraft server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With our server running, let's see if we can connect to the server at localhost:25000. Open up the Minecraft Launcher client and click on "Play".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYtunAIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0zgst3gf0x6sd56kjut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYtunAIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0zgst3gf0x6sd56kjut.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The actual Minecraft game should launch. For game options, click on "Multiplayer".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--werSsEdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osyinj35j1yl8sxdvsad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--werSsEdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osyinj35j1yl8sxdvsad.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click on "Direct Connection".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9svBApb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7lta1uuzrzwbbgqq8rm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9svBApb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7lta1uuzrzwbbgqq8rm.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For server address, enter localhost:25000. Our local port 25000, of course, is bound to the container running our Minecraft server. Finally, we click on "Join Server".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LywZURrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7ztj6340mtftnsgpj26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LywZURrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7ztj6340mtftnsgpj26.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And… we're in!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v4BVsSp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r7uixaj0a9m4g1pog67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4BVsSp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r7uixaj0a9m4g1pog67.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look back at the terminal with the &lt;code&gt;docker run&lt;/code&gt; command, you'll recall that it continues to output the log messages from the Minecraft server. It might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
 
[User Authenticator #1/INFO]: UUID of player familycodingfun is 8b4fb92b-24c6-423a-bf32-fea282fc8a25
[Server thread/INFO]: familycodingfun[/172.17.0.1:53248] logged in with entity id 282 at (243.5, 65.0, -138.5)
[Server thread/INFO]: familycodingfun joined the game
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The server notes that a new player (my username is &lt;code&gt;familycodingfun&lt;/code&gt;) has joined the game. Our single game server setup is complete. Now, let's add Kong Gateway and port forwarding to the mix. For now, we'll exit the game and then kill our Docker container with the server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-minecraft-server-with-kong-gateway-and-port-forwarding"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2: Minecraft Server with Kong Gateway and Port Forwarding&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Next, we'll put Kong Gateway in front of our Minecraft server and take advantage of port forwarding. If you were running a private network, you might forbid requests from outside the network to reach your Minecraft server port. At the same time, you might expose a single port on which Kong listens. Kong, as the API gateway, would listen to requests on that port and then forward those requests to your Minecraft server. Doing so ensures that any requests that want to go to a Minecraft server must go through Kong first.&lt;/p&gt;

&lt;p&gt;Although we'll be working within localhost, we'll set up this kind of port forwarding through Kong. Just like in our previous step, we want our Minecraft server to run on port 25000. Meanwhile, Kong will listen on port 20000. Kong will take TCP connection requests on port 20000 and forward them to the Minecraft server at port 25000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-and-setup-kong"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Install and Setup Kong&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The first step is to &lt;a href="https://konghq.com/install/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;install Kong Gateway&lt;/a&gt;. The &lt;a href="https://konghq.com/blog/kong-gateway-tutorial/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;installation steps&lt;/a&gt; vary depending on your unique setup. After installing Kong, we'll need to set up the initial configuration file. In your &lt;code&gt;/etc/kong&lt;/code&gt; folder, you'll see a template file called &lt;code&gt;kong.conf.default&lt;/code&gt;. We will copy this file and rename it as &lt;code&gt;kong.conf&lt;/code&gt;, which is the file that Kong will look to for its startup configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ cd /etc/kong
/etc/kong$ sudo cp kong.conf.default kong.conf
/etc/kong$ tree
.
├── kong.conf
├── kong.conf.default
└── kong.logrotate

0 directories, 3 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;kong.conf&lt;/code&gt;, we'll need to make the following three edits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# PATH: /etc/kong/kong.conf

#
# Around line 368. Uncomment and set for TCP listening on port 20000
#

stream_listen = 127.0.0.1:20000
 
#
# Around line 922. Uncomment and set database to off
#
 
database = off

#
# Around line 1106. Uncomment and set to a file we're about to create.
#                   Use the absolute path to a project folder
#

declarative_config = /PATH/TO/MY/project/minecraft-kong.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The stream_listen configuration tells Kong to listen for streaming TCP traffic. We're telling Kong to listen on port 20000 for this. For the needs of this mini project, we can configure Kong using its &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/db-less-and-declarative-config/"&gt;DB-less and Declarative configuration&lt;/a&gt; style. Kong will not need to use a database (database = off), and all of our configurations for port forwarding and load balancing will be stored in a single YAML file. That is the &lt;code&gt;declarative_config&lt;/code&gt; file path that we've set above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-declarative-configuration-file"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Write Declarative Configuration File&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before we start up Kong, we need to write that &lt;code&gt;minecraft-kong.yml&lt;/code&gt; file with our port forwarding configuration. In a project folder (that matches the path you specified above), open up a new file called &lt;code&gt;minecraft-kong.yml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# PATH: ~/project/minecraft-kong.yml

_format_version: "2.1"

services:
  - name: Minecraft-Server-A
    url: tcp://localhost:25000
    routes:
      - name: Server-A-TCP-Routes
        protocols: ["tcp", "tls"]
        destinations:
          - ip: 127.0.0.1
            port: 20000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file, we declare a new &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/admin-api/#service-object"&gt;Service entity&lt;/a&gt; named Minecraft-Server-A. The server uses the TCP protocol, listening on localhost port 25000, so we set these values together as the service's url. Next, we define a &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/admin-api/#route-object"&gt;Route&lt;/a&gt; for the service, which associates our service with a URL path or an incoming connection destination that Kong will listen for. We provide a name for our route, telling Kong to listen for requests using TCP/TLS on the destination that we specified in our kong.conf file: ip 127.0.0.1 and port 20000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-up-minecraft-server-and-kong"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Start Up Minecraft Server and Kong&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We’ve written all of our configuration for this step. Let's start up our Minecraft server in Docker. Remember, we want our host (our local machine) to be ready on port 25000, binding that port to the standard Minecraft server port of 25565 on the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ docker run -p 25000:25565 -e EULA=true itzg/minecraft-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That command might take a little time to run as the server starts up. Now, in a separate terminal window, we'll start up Kong:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ sudo kong start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With our server up and running, we go back to our game client and, just like above, choose "Multiplayer" and try to establish a "Direct Connection" with a game server. We know that we could connect directly to localhost:25000, since that's the actual host port bound to the container's port; rather, we want to test Kong's port forwarding. We want to connect to the supposed game server on localhost:20000, pretending that we're the casual user who is unaware that port 20000 points to a port forwarding gateway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lS1qeUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq0p4z71tysqukrhoitu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lS1qeUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq0p4z71tysqukrhoitu.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on "Join Server." Like Step 1, your connection should be successful, and you'll have entered the Minecraft world. Our TCP connection request to localhost:20000 went to Kong Gateway, which then forwarded that request to port 25000, our actual Minecraft server. We have port forwarding up and running!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-loadbalancing-two-minecraft-servers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3: Load-Balancing Two Minecraft Servers&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;We will spin up two Minecraft servers for the final step in our mini-project, listening on ports 25000 and 26000. Previously, when we only had one Minecraft server, Kong would naturally forward TCP requests at port 20000 to that sole Minecraft server's port. Now, with two Minecraft server ports to choose from, we'll need to use port forwarding and load balancing. Kong Gateway will take TCP connection requests that come to port 20000 and distribute connections evenly between Minecraft Server A and Minecraft Server B.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-up-minecraft-servers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Start Up Minecraft Servers&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you haven't done so already, terminate the single Minecraft server that was running in the previous step. We'll start everything up again from a clean state, spinning up each server in its own terminal window. In your first terminal window, run the Docker container for Server A, binding the host's port 25000 to the container's port 25565:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ docker run -p 25000:25565 -e EULA=true itzg/minecraft-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in a separate terminal window, we will start up Server B, this time binding the host's port 26000 to the container's port 25565:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ docker run -p 26000:25565 -e EULA=true itzg/minecraft-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have Servers A and B running, accessible at ports 25000 and 26000, respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#edit-declarative-configuration-file"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Edit Declarative Configuration File&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Next, we want to edit our declarative configuration file (minecraft-kong.yml), configuring Kong for load balancing. Edit your file to reflect the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# PATH: ~/project/minecraft-kong.yml
_format_version: "2.1"

upstreams:
  - name: Minecraft-Servers
    targets:
      - target: localhost:25000
        weight: 100
      - target: localhost:26000
        weight: 100
services:
  - name: Load-Balancing-Service
    host: Minecraft-Servers
    protocol: tcp
    routes:
      - name: Load-Balancing-Route
        protocols: ["tcp", "tls"]
        destinations:
          - ip: 127.0.0.1
            port: 20000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's walk through what we've done here. First, we added an &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/admin-api/#upstream-object"&gt;Upstream Object&lt;/a&gt; (arbitrarily named Minecraft-Servers), which functions as a virtual host for load balancing to multiple services. That's exactly the functionality that we need. We added two &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/admin-api/#target-object"&gt;Target Objects&lt;/a&gt; to our upstream service. Each target has an address with host and port; in our case, our two targets point to localhost:25000 (Minecraft Server A) and localhost:26000 (Minecraft Server B). Then, we set a weight for each target, which the load balancer uses to distribute load. Even though we've explicitly set the weights evenly to 100, the default for this optional configuration is 100.&lt;/p&gt;

&lt;p&gt;Next, we declared our Service Object, which in this case is our load balancer service. Requests that satisfy the routes we establish will be forwarded to the Minecraft-Servers host, our load balancing upstream object. Similar to our previous step, we configured a route, telling Kong Gateway to listen for TCP/TLS requests destined for 127.0.0.1:20000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restart-kong"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Restart Kong&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Since our Kong configuration has changed, we need to restart Kong for the changes to take effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ sudo kong restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, everything is up and running. We have our two Minecraft servers (Server A and Server B) running in Docker containers in two separate terminal windows. We have Kong configured to listen for TCP on port 20000, forwarding those requests to our load balancer, distributing connections across our two servers.&lt;/p&gt;

&lt;p&gt;Open the Minecraft game client again. Similar to previous steps, we will attempt to connect to the multiplayer server at localhost:20000 directly. As you connect, keep an eye on your two server terminal windows. As you repeatedly connect to the game, disconnect, and then reconnect, you will at times see a connection log message for Server A, and then at other times a message for Server B.&lt;/p&gt;

&lt;p&gt;And just like that, we have set up our load balancer to distribute connection requests across our two Minecraft servers!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ready-to-play-work"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ready to &lt;del&gt;Play&lt;/del&gt; Work&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;To recap, we slowly progressed in complexity for our mini-project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We started by simply spinning up a single Minecraft server in a Docker container, using port 25000 for accepting game client connections.&lt;/li&gt;
&lt;li&gt;Next, we configured Kong Gateway to sit in front of our single server to perform port forwarding. Kong listened on port 20000 for game client connections, forwarding those requests to the port on our host where the Minecraft server was accessible.&lt;/li&gt;
&lt;li&gt;Lastly, we set up two Minecraft servers to run concurrently. Then, we configured Kong Gateway to act as a load balancer. Kong listened on port 20000 for game client connections, this time funneling them through its load balancing service to distribute connections across our two servers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From here, you have many opportunities for adding complexity. You can add more game servers. For example, if some servers run on machines that can handle a heavier load of connections than others, then you can configure the load balancer to distribute the load unevenly. You can configure health check rules for Kong's load balancer to ensure requests are only forwarded to those servers which are presently healthy. You can even select from a handful of load balancing algorithms besides the default "round-robin" strategy.&lt;/p&gt;

&lt;p&gt;So, we've had a little fun and learned to use some important tools and concepts along the way. We have discovered that load balancing and port forwarding with Kong Gateway is simple and easy to set up. Yet, even with such ease, these features are extremely powerful. Now that you've got a handle on it, it's time to get to work and face the &lt;a href="https://minecraft.fandom.com/wiki/Ender_Dragon"&gt;Ender Dragon&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Finding A Web Design Company - Factors To Consider</title>
      <author>Alex</author>
      <pubDate>Tue, 08 Jun 2021 14:36:48 +0000</pubDate>
      <link>https://dev.to/alexanderkdev/finding-a-web-design-company-factors-to-consider-11n0</link>
      <guid>https://dev.to/alexanderkdev/finding-a-web-design-company-factors-to-consider-11n0</guid>
      <description>&lt;p&gt;In this rapidly changing world where change is the new constant, a website's life is only limited to a few years if not correctly designed or updated frequently. Thus, partnering with an experienced web design company ensures these aspects are taken care of to see a constant rise in the charts. (&lt;a href="https://www.mediafire.com/view/66bjmol7x8a2wks/Finding_A_Web_Design_Company_-_Factors_To_Consider.png/file#"&gt;https://www.mediafire.com/view/66bjmol7x8a2wks/Finding_A_Web_Design_Company_-_Factors_To_Consider.png/file#&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>company</category>
      <category>webdesign</category>
    </item>
    <item>
      <title>What is An Application Programming Interface?</title>
      <author>Rezaul karim</author>
      <pubDate>Tue, 08 Jun 2021 14:33:28 +0000</pubDate>
      <link>https://dev.to/rezaulkarim014/what-is-an-application-programming-interface-5ea6</link>
      <guid>https://dev.to/rezaulkarim014/what-is-an-application-programming-interface-5ea6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fuV3pPDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162278151/whHt5e6Ao.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fuV3pPDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162278151/whHt5e6Ao.jpeg" alt="api-application-programming-interface-isometric_107791-2716.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-programming-interface"&gt;
  &lt;/a&gt;
  Application Programming Interface
&lt;/h2&gt;

&lt;p&gt;In this article. I’m going to be talking about what an application programming interface. Both in general and related specifically to web development. Let’s start now.&lt;/p&gt;

&lt;p&gt;To get started API stands for application programming interface. Which is just a fancy way of saying what one application exposes to another. That is the API. Let’s take an&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-of-a-restaurant-to-describe-how-an-api-works-in-nontechnical-terms"&gt;
  &lt;/a&gt;
  Example of a restaurant to describe how an API Works in non-technical terms.
&lt;/h2&gt;

&lt;p&gt;So when you go to a restaurant you don’t go directly up to this chef and tell him what you want to order. You need to look at the In order something off of the menu. Because the menu tells you what the restaurant offers that is their API. This menu the API essentially tells you what that certain application is giving to you and the things that you can use from the application. So you go to the restaurant and you order something off of that menu. Then after you order something from that menu you tell them what you want. And restaurant is Going to give you whatever you ordered off of that menu. They’re going to give you back data.&lt;/p&gt;

&lt;p&gt;So when you access an API that API you’re going to send it what you want, then it will send you back information based on what you wanted It.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80-1SdMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162478930/GZbwAf4W8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80-1SdMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162478930/GZbwAf4W8.png" alt="api-5582541_960_720.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you go to this restaurant, for example a steak restaurant and you try to order a peanut butter jelly sandwich, they’re going to throw an error at you. They’re going to tell you we don’t serve peanut butter jelly sandwiches. You have to choose something on the menu and this makes API’s secure because the only exposed what you want to expose to the rest of the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-applications-role"&gt;
  &lt;/a&gt;
  Web Application’s Role:
&lt;/h2&gt;

&lt;p&gt;For example, a web application is not going to expose to the database with all the Information passwords. They’re only going to expose to you the login and sign up pages and not the actual database itself. This makes that website secure because they’re only exposing the parts that they want to some of the most common forms of API’s that you’ll run into as a developer are going to be rest API’s on the web and library API’s from code that you pull into your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-apis"&gt;
  &lt;/a&gt;
  Web API’s
&lt;/h3&gt;

&lt;p&gt;Let’s first talk about these web API’s, which are going to be most likely rest API access. These API’s exposed different endpoints also known as URLs, which you can access to get certain data from that API. You can also access these endpoint in order to modify data on these servers, but it only is what the application actually exposes to you and wants to let you modify.&lt;/p&gt;

&lt;p&gt;For example, you may be able to update it user through a rest API, but they’re not going to let you update the password. They’re only going to let you update the name in the email. For example. You also will to get users from this API, but they’re not going to return to you the password of the user the does give you the name and the email. This is a way that these servers can be secured by only exposing the information. They want through this API which is the contract that the server and the client are having between each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysD_onK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162195330/DrdvIyNQy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysD_onK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162195330/DrdvIyNQy.jpeg" alt="software-developers-programming-computer-with-script_74855-6661.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-application-programming-interface"&gt;
  &lt;/a&gt;
  Common Application Programming Interface
&lt;/h2&gt;

&lt;p&gt;The other most common Application Programming Interface, which is not really referred to commonly as an API. But is still technically API is an actual library that you pull into your code. These libraries have a bunch of different methods to find on them that do specific things. When you call them and return to you specific data when you call them, this is exactly what an API is it’s a contract between this Library code that you’ve installed and your actual project that using that libraries code you have different ways that you can access it only. Of the methods that they And you aren’t able to access the internals of that Library unless it’s through the methods that the API of the library exposes to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;The common theme with API’s is that the only exposed to exactly what they want you to be able to access. And hide away absolutely everything else that they can in order to make their API as secure as possible. Also commonly with web API. You’re going to need some form of token to authenticate yourself with this API. Which will allow the application to know whose axis in the API.&lt;/p&gt;

&lt;p&gt;In order to limit what that person can access based on their specific permissions in conclusion. API’s are absolutely everywhere from technology to non technology related fields, and it’s really just a contract between two things. Look how they can interact with one another.&lt;/p&gt;

&lt;p&gt;It’s mostly used to make things more secure and easier to use. Because you know how you can use something. And it hides away all the stuff that you cannot access which makes it secure.&lt;/p&gt;

&lt;p&gt;That’s all an API is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrezaulkarim.com/why-should-we-use-dark-mode/"&gt;Read this article on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="//instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

</description>
      <category>uiweekly</category>
      <category>ux</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to start a task being a junior developer</title>
      <author>Fabrícia Diniz</author>
      <pubDate>Tue, 08 Jun 2021 14:14:04 +0000</pubDate>
      <link>https://dev.to/fabriciadiniz/how-to-start-a-task-being-a-junior-developer-4d16</link>
      <guid>https://dev.to/fabriciadiniz/how-to-start-a-task-being-a-junior-developer-4d16</guid>
      <description>&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL-DR:
&lt;/h3&gt;

&lt;p&gt;In this article I talk about strategies I use to efficiently navigate my tasks at work as a junior developer (who has ADHD).&lt;br&gt;
These are the topics covered (I went a little further than just starting):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#before-starting-a-task"&gt;Before starting a task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#while-developing"&gt;While developing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#at-task-end"&gt;At task completion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Basically, there are 3 types of strategies I use when doing a task: ** those applied to reduce the difficulty of starting, those applied during development to smooth the process, and those applied at the end of the task to reduce the errors that will pass into code review*&lt;em&gt;. To help understanding, I'm going to use a task I did a few months ago, a modal in React.&lt;br&gt;
*I have to warn you that these tips will improve your performance in the medium term, but in the short term it may seem like you're taking things slower than you'd like. I suggest talking to your leadership to align the expectations.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-starting-a-task"&gt;
  &lt;/a&gt;
  Before starting a task
&lt;/h2&gt;

&lt;p&gt;Before starting any task I like to understand the code I'm going to work with, so I look for the components involved in the task and read them, taking notes in a notebook about what each one does, where the data comes from and what its internal functions do. &lt;strong&gt;That way I can have a deeper understanding of what I'm going to be dealing with&lt;/strong&gt; and I prevent that information from staying only in my head (which is not at all reliable), as well create a place to turn to if ever I need to work again on the same components.&lt;/p&gt;

&lt;p&gt;You could argue that doing it this way "consumes" a lot of task time, but I guarantee it makes development easier and reduces time spent looking for bugs later. From a junior's perspective, &lt;strong&gt;you gain code mastery much faster and deeper&lt;/strong&gt; this way. People don't usually do this and I've found that reading and understanding the code beforehand helps me identify points of attention that go unnoticed even by the more experienced.&lt;/p&gt;

&lt;p&gt;However, sometimes the task is to start something from scratch. In these cases I look for similar components and do the same procedure to understand what all its code does because &lt;strong&gt;this prevents me from just copying code snippets without understanding what they actually do&lt;/strong&gt;. My task of creating a modal fell in this case, I had to create the component from scratch based on a more general one that already existed in the project.&lt;/p&gt;

&lt;p&gt;The last thing I do is &lt;strong&gt;taking note of the subtasks&lt;/strong&gt; within the main task. Here I try to make them as simple and short as possible, because this reduces the time between one subtask and another and greatly improves the development flow. Regarding my modal, it was something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create modal component&lt;/li&gt;
&lt;li&gt;condition API call to click&lt;/li&gt;
&lt;li&gt;mock API return&lt;/li&gt;
&lt;li&gt;test the action of clicking the button&lt;/li&gt;
&lt;li&gt;find out how to pass information between different components&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#while-developing"&gt;
  &lt;/a&gt;
  While developing
&lt;/h2&gt;

&lt;p&gt;Having very small and relatively simple subtasks helps reduce the anxiety and procrastination to get started and gives you a better view of progress. Sometimes it is necessary to define &lt;strong&gt;microsteps&lt;/strong&gt; to help break the inertia of starting the task and one that helps me a lot when I need to research a difficult topic is to leave the website or documentation open and then get up from the chair for a while. For some reason I feel less overwhelmed when I've just taken a walk and the website I need is already open just waiting for me. This also works with the code itself, I find the right file to work with and then I'll take a walk around to unwind before starting.&lt;/p&gt;

&lt;p&gt;During the task, unforeseen bugs/fixes always arise, so I &lt;strong&gt;write down all the things I didn't anticipate I would have to do and also all the questions that come up&lt;/strong&gt; to search the internet or ask someone on the team, that way nothing gets lost and I guarantee that I will remember to clarify everything.&lt;br&gt;
Another strategy I have to adopt when it's particularly difficult to focus on the task is to write down the problem I'm trying to solve and write down the little conclusions that will lead me to the solution. An example of how I do this part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;at what moment should the click open the modal?

&lt;ul&gt;
&lt;li&gt;↪ when an element is registered, determined by &lt;code&gt;element.isEnabled&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;what defines isEnabled? At what point is it changed?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;the modal must have: isOpen, onClose, type, name, date, activities

&lt;ul&gt;
&lt;li&gt;date comes from the URL ✅&lt;/li&gt;
&lt;li&gt;where does the other information come from? Does the parent component have them all? Do I need to get any of them from somewhere else?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In some situations it's necessary to do a pair programming and I realized that without my notes I could end up getting pretty lost, so I like to take these steps before having someone help me with answers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#at-task-completion"&gt;
  &lt;/a&gt;
  At task completion
&lt;/h2&gt;

&lt;p&gt;This is the time to check if any silly mistakes have gone unnoticed. Before submitting an assignment for code review I usually recheck a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run all the automated/integration tests to make sure I didn't accidentally break anything&lt;/li&gt;
&lt;li&gt;run lint (if not running automatically)&lt;/li&gt;
&lt;li&gt;update my branch with main/master

&lt;ul&gt;
&lt;li&gt;if necessary, update libraries and database&lt;/li&gt;
&lt;li&gt;if necessary, resolve merge conflicts&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;run the code and make sure the behavior is as expected, including error cases&lt;/li&gt;
&lt;li&gt;check if I've followed the code standards defined by the company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;And here's a tip my tech lead gave me&lt;/strong&gt;: if you think the code is bad after finishing the whole task, call someone on your team to take a look, you can explain what you tried to do and the person can give you feedback on how to improve before submitting to the code review itself.&lt;/p&gt;




&lt;p&gt;Starting a career in development can be quite difficult, especially if you've gone through a career transition or don't have a good theoretical background. With this article I would like to share some strategies I use to make tasks less daunting and less anxiety-provoking.&lt;br&gt;
Do you have any more tips to give not only to me but to other people just starting out? Leave it in the comments and help some more people.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Moving Perl Mojolicious routes to their own module</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 08 Jun 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/moving-perl-mojolicious-routes-to-their-own-module-53c2</link>
      <guid>https://dev.to/mjgardner/moving-perl-mojolicious-routes-to-their-own-module-53c2</guid>
      <description>&lt;p&gt;A mentee asked me over the weekend if there was a way within a &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt; web application to store the &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Routing"&gt;routes&lt;/a&gt; separately from the main application class. Here’s one way. &lt;strong&gt;These instructions assume you’re using &lt;a href="https://www.perl.org/get.html"&gt;Perl 5.34&lt;/a&gt; and &lt;a href="https://metacpan.org/release/SRI/Mojolicious-9.19"&gt;Mojolicious 9.19&lt;/a&gt;&lt;/strong&gt; (the latest as of this writing) via the terminal command line on a Linux, Unix, or macOS system; make the appropriate changes if this doesn’t apply to you.&lt;/p&gt;

&lt;p&gt;First, if you haven’t already, &lt;a href="https://docs.mojolicious.org/Mojolicious/Command/Author/generate/app"&gt;create your Mojolicious app&lt;/a&gt; at your shell prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mojo generate app Local::RouteDemo
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/script
  [write] /Users/mgardner/Projects/blog/local_route_demo/script/local_route_demo
  [chmod] /Users/mgardner/Projects/blog/local_route_demo/script/local_route_demo 744
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/lib/Local
  [write] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo.pm
  [exist] /Users/mgardner/Projects/blog/local_route_demo
  [write] /Users/mgardner/Projects/blog/local_route_demo/local-route_demo.yml
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo/Controller
  [write] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo/Controller/Example.pm
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/t
  [write] /Users/mgardner/Projects/blog/local_route_demo/t/basic.t
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/public
  [write] /Users/mgardner/Projects/blog/local_route_demo/public/index.html
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/templates/layouts
  [write] /Users/mgardner/Projects/blog/local_route_demo/templates/layouts/default.html.ep
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/templates/example
  [write] /Users/mgardner/Projects/blog/local_route_demo/templates/example/welcome.html.ep
$ cd local_route_demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new Perl module in your editor for storing your routes. Here we’re using &lt;code&gt;Local::RouteDemo::Routes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch lib/Local/RouteDemo/Routes.pm
$ $EDITOR lib/Local/RouteDemo/Routes.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make the module with a function that will create the routes you want, given a &lt;a href="https://docs.mojolicious.org/Mojolicious/Routes"&gt;Mojolicious::Routes&lt;/a&gt; object. Here we’re just bringing over the default route created when we created our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::RouteDemo::&lt;/span&gt;&lt;span class="nv"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt; &lt;span class="sx"&gt;qw(all -experimental::signatures)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Exporter&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;@EXPORT_OK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw(make_routes)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;make_routes&lt;/span&gt; &lt;span class="p"&gt;($router) {&lt;/span&gt;
    &lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Example#welcome&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="c1"&gt;# add more routes here&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adjust the application class to load your new Routes module and call its &lt;a href="https://perldoc.pl/Exporter"&gt;exported&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;RouteDemo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mojolicious&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Local::RouteDemo::&lt;/span&gt;&lt;span class="nv"&gt;Routes&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;make_routes&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="c1"&gt;# This method will run once at server start&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;startup&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;

    &lt;span class="c1"&gt;# Load configuration from config file&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;NotYAMLConfig&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Configure the application&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;# Make routes&lt;/span&gt;
    &lt;span class="nv"&gt;make_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, run your tests and/or manually test your routes to be sure everything works OK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ prove -vlr t
t/basic.t .. [2021-06-07 12:21:55.36917] [58779] [debug] [elVGykGVWlOt] GET "/"
[2021-06-07 12:21:55.36972] [58779] [debug] [elVGykGVWlOt] Routing to controller "Local::RouteDemo::Controller::Example" and action "welcome"
[2021-06-07 12:21:55.37137] [58779] [debug] [elVGykGVWlOt] Rendering template "example/welcome.html.ep"
[2021-06-07 12:21:55.37343] [58779] [debug] [elVGykGVWlOt] Rendering template "layouts/default.html.ep"
[2021-06-07 12:21:55.37495] [58779] [debug] [elVGykGVWlOt] 200 OK (0.005772s, 173.250/s)

ok 1 - GET /
ok 2 - 200 OK
ok 3 - content is similar
1..3
ok
All tests successful.
Files=1, Tests=3, 1 wallclock secs ( 0.02 usr 0.01 sys + 0.38 cusr 0.11 csys = 0.52 CPU)
Result: PASS
$ script/local_route_demo get /
[2021-06-07 12:22:29.55930] [58889] [debug] [f3YoaFhkwJ42] GET "/"
[2021-06-07 12:22:29.55990] [58889] [debug] [f3YoaFhkwJ42] Routing to controller "Local::RouteDemo::Controller::Example" and action "welcome"
[2021-06-07 12:22:29.56059] [58889] [debug] [f3YoaFhkwJ42] Rendering template "example/welcome.html.ep"
[2021-06-07 12:22:29.56269] [58889] [debug] [f3YoaFhkwJ42] Rendering template "layouts/default.html.ep"
[2021-06-07 12:22:29.56432] [58889] [debug] [f3YoaFhkwJ42] 200 OK (0.005004s, 199.840/s)
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Welcome&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;Welcome to the Mojolicious real-time web framework!&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;
  This page was generated from the template "templates/example/welcome.html.ep"
  and the layout "templates/layouts/default.html.ep",
  &amp;lt;a href="/"&amp;gt;click here&amp;lt;/a&amp;gt; to reload the page or
  &amp;lt;a href="/index.html"&amp;gt;here&amp;lt;/a&amp;gt; to move forward to a static page.
&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find &lt;a href="https://github.com/mjgardner/local_route_demo"&gt;a git repository of this work on GitHub&lt;/a&gt;, and here’s a &lt;a href="https://github.com/mjgardner/local_route_demo/commit/ea1226793ae689ce7e049b36caaebccabb581c57"&gt;commit of all the changes made to the default Mojolicious application&lt;/a&gt; so you can see the differences.&lt;/p&gt;

</description>
      <category>mojolicious</category>
      <category>perl</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build an Exercise Tracker App using React.js (Hooks) and React Router | Learn React.js</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 08 Jun 2021 13:51:48 +0000</pubDate>
      <link>https://dev.to/thenerdydev/build-an-exercise-tracker-app-using-react-js-hooks-and-react-router-learn-react-js-208i</link>
      <guid>https://dev.to/thenerdydev/build-an-exercise-tracker-app-using-react-js-hooks-and-react-router-learn-react-js-208i</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this video, we will learn how we can make an Exercise Tracker App using React.js and React Router. In this complete video, you will learn about all the things that React and React Router has to offer. We will also learn about hooks like &lt;strong&gt;useState&lt;/strong&gt;, &lt;strong&gt;useEffect&lt;/strong&gt;, &lt;strong&gt;useParams&lt;/strong&gt;, &lt;strong&gt;useHistory&lt;/strong&gt; and more. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-fetching-the-list-of-exercises-from-a-local-json-server"&gt;
  &lt;/a&gt;
  1. Fetching the list of exercises from a local JSON Server
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#2-create-a-new-exercise"&gt;
  &lt;/a&gt;
  2. Create a New Exercise
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#3-update-an-already-existing-exercise"&gt;
  &lt;/a&gt;
  3. Update an already existing exercise
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#4-delete-an-existing-exercise"&gt;
  &lt;/a&gt;
  4. Delete an existing exercise
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#5-toggling-the-completion-status-of-an-exercise-and-showing-it-in-visually"&gt;
  &lt;/a&gt;
  5. Toggling the completion status of an exercise and showing it in visually.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#6-creating-a-filter-component-to-filter-the-exercises-based-on-the-completion-status-pending-all-completed"&gt;
  &lt;/a&gt;
  6. Creating a filter component to filter the exercises based on the completion status - pending, all, completed.
&lt;/h2&gt;

&lt;p&gt;Learn how to make one with same features in this video: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iqewbHLKkQk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;PS&lt;/strong&gt; : I am working on a &lt;strong&gt;BRAND&lt;/strong&gt; new &lt;strong&gt;FREE&lt;/strong&gt;- &lt;strong&gt;Web Developer Full Course&lt;/strong&gt; on YouTube , check the below article to know more about the topics that we cover in this course:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/thenerdydev"&gt;https://twitter.com/thenerdydev&lt;/a&gt;&lt;br&gt;
👉 YouTube: &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React Table Guide And Best React Table Examples</title>
      <author>Nastassia Ovchinnikova</author>
      <pubDate>Tue, 08 Jun 2021 13:40:19 +0000</pubDate>
      <link>https://dev.to/flatlogic/react-table-guide-and-best-react-table-examples-56n1</link>
      <guid>https://dev.to/flatlogic/react-table-guide-and-best-react-table-examples-56n1</guid>
      <description>&lt;p&gt;In this article, we will talk about react table. By the way – check our previous article about Bootstrap table! We won’t talk much about how important tables are in modern web development and also skip unnecessary info to keep the intro short. Instead, we will give you good concentrated information on how to choose a react table, what difficulties are there during the development of react table, and other things that will really help you create great and useful react tables. Even more, we also made a small guide for you on building a react table based on the most popular react-table library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-a-react-table-library"&gt;
  &lt;/a&gt;
  How to choose a React table library
&lt;/h2&gt;

&lt;p&gt;In order to choose the right react table, you need to decide what functions it will perform. For example, whether you need pagination or sorting. Think of the features you need and choose the react table library that fits them.&lt;/p&gt;

&lt;p&gt;It is also worth deciding whether you are willing to pay for the library or not. Paid versions of the react tables libraries have a very wide range of features that will help you develop it.&lt;/p&gt;

&lt;p&gt;Now let’s see how this looks like in real-life examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you need a simple page with a small amount of data, custom styles, and minimum number of features like sorting and filtering, we recommend to use react-table;&lt;/li&gt;
&lt;li&gt;If you want a mini Google Sheets, use react-data-grid or react-datasheet;&lt;/li&gt;
&lt;li&gt;If you need to manipulate very large amounts of information, then we recommend &lt;a href="https://flatlogic.com/blog/using-react-with-express/"&gt;using react&lt;/a&gt; – virtualize or paid libraries such as React data grid of Syncfusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features-of-a-good-react-table"&gt;
  &lt;/a&gt;
  Features of a good React Table
&lt;/h2&gt;

&lt;p&gt;Developing a good react table is a difficult challenge that you must definitely go through. And the challenge is that a good react table must simultaneously correspond to several requirements – responsiveness, speed, readability, etc. Let’s take a closer look at each of these.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-table-must-be-responsive"&gt;
  &lt;/a&gt;
  React table must be responsive
&lt;/h2&gt;

&lt;p&gt;It is very important for react data tables to be displayed correctly on all types of screens. Usually this is solved by the columns decrease in width and increase in length, but this solution is not always optimal for the user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-table-must-be-readable"&gt;
  &lt;/a&gt;
  React table must Be Readable
&lt;/h2&gt;

&lt;p&gt;Tables often provide information that is very difficult to read, manipulate, and edit. A good spreadsheet shows information so that it is clearly readable and well-parsed, even if you have hundreds and thousands of lines. A flexible react data table solution can account for long strings of data without creating misalignment or compromising readability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-table-needs-to-be-fast"&gt;
  &lt;/a&gt;
  React table needs to be fast
&lt;/h2&gt;

&lt;p&gt;Another important feature of a good react table is the speed of working with data – i.e. filtering and sorting. Good UX often depends on application speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-table-ui-challenges"&gt;
  &lt;/a&gt;
  React Table UI challenges
&lt;/h2&gt;

&lt;p&gt;There are many aspects that need to be taken into account when we work with tables. Let’s define them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filtering-and-sorting-data"&gt;
  &lt;/a&gt;
  Filtering and sorting data
&lt;/h2&gt;

&lt;p&gt;It is very important to make these basic functions work quickly and intuitively – these are the two main functions that define a table as an element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styles"&gt;
  &lt;/a&gt;
  Styles
&lt;/h2&gt;

&lt;p&gt;Good react table need to be styled: well-done styles can make tables readable and nice to look at. For example, an easy selection of cells with a hover when you hover over them will help users understand which cell they are in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsiveness"&gt;
  &lt;/a&gt;
  Responsiveness
&lt;/h2&gt;

&lt;p&gt;It’s difficult to make a table responsive without changing the layout to suit smaller screen sizes. Responsive tables often look and perform awful. Therefore, the task of showing the table on different size screens looks complicated. Features such as pagination can help you with this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scrolling"&gt;
  &lt;/a&gt;
  Scrolling
&lt;/h2&gt;

&lt;p&gt;Default browser scrollbars will work well for full-width tables, but most have custom width. The solution is developing a custom scroll bar, or implementing one from ready made libraries. However, custom scrollbars are very tricky to support on both touch and non-touch screens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#right-positioning-of-the-table"&gt;
  &lt;/a&gt;
  Right positioning of the table
&lt;/h2&gt;

&lt;p&gt;It is also important to correctly position the react table relative to other elements on the screen, so that you can work with it efficiently and read information properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-table-guide"&gt;
  &lt;/a&gt;
  React table Guide
&lt;/h2&gt;

&lt;p&gt;Now that we know a bit more about React table, let’s have a look at the development of different types of react tables. We’ll use the most popular &lt;code&gt;react-table&lt;/code&gt; library as the example. We will obviously use &lt;code&gt;create-react-app&lt;/code&gt; boilerplate for better development speed.&lt;br&gt;
The first thing you need to do is install the &lt;code&gt;react-table&lt;/code&gt; library itself. To do this, run npm install &lt;code&gt;react-table&lt;/code&gt; or yarn add &lt;code&gt;react-table&lt;/code&gt; in the following command. After you enter these commands, check the &lt;code&gt;package.json&lt;/code&gt; file, you should see the following entry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"dependencies": {
 "react-table": "^7.1.0"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally if you want to modify styles, please edit &lt;code&gt;src/index.css file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To begin with, we will build the simplest react table with 3 columns and 3 rows. Each column will have its own separate one header. In this example, we will not build multi-level constructs with grouped headers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-react-table"&gt;
  &lt;/a&gt;
  Basic react table
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ8JWm61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/xg-D8yVB5n06N4On32Ggs-H4rExnw68PO_LTv7krtSHczln1KxVMfkOBJyaM2NGYOYbhqIl9lAb1HUkCpjgXpkQYRdcl5fCL0lj1WTbU4rT2WhNHaFBbRdE78rJhJxLaZ13Ecd4p" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ8JWm61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/xg-D8yVB5n06N4On32Ggs-H4rExnw68PO_LTv7krtSHczln1KxVMfkOBJyaM2NGYOYbhqIl9lAb1HUkCpjgXpkQYRdcl5fCL0lj1WTbU4rT2WhNHaFBbRdE78rJhJxLaZ13Ecd4p" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React-table, like other libraries, consist of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Columns – an array of columns. Columns can be nested, which act as header groups. In addition, columns can be recursively nested as much as needed;&lt;/li&gt;
&lt;li&gt;Data is an array of rows to be displayed on the table.
To build a react table you will need a dataset. In our case, we did not create any separate files in the form of json objects: for speed reasons we created these objects directly in App.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s what an example code looks like for a simple table based on the React-tables library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React, { useState, useEffect } from 'react';
import { useTable } from 'react-table';

function Example() {

 const data = React.useMemo(
     () =&amp;gt; [
       {
         col1: 'Minsk',
         col2: '27',
         col3: 'rain',
       },
       {
         col1: 'Vilnius',
         col2: '30',
         col3: 'rain',
       },
       {
         col1: 'London',
         col2: '23',
         col3: 'rain',
       },
     ],
     []
 )

 const columns = React.useMemo(
     () =&amp;gt; [
       {
         Header: 'City',
         accessor: 'col1', // accessor is the "key" in the data
       },
       {
         Header: 'Temperature',
         accessor: 'col2',
       },
       {
         Header: 'Weather Forecast',
         accessor: 'col3', // accessor is the "key" in the data
       },
     ],
     []
 )

 const {
   getTableProps,
   getTableBodyProps,
   headerGroups,
   rows,
   prepareRow,
 } = useTable({ columns, data })

 return (
     &amp;lt;div&amp;gt;
       &amp;lt;table {...getTableProps()} style={{ border: 'solid 1px black }}&amp;gt;
         &amp;lt;thead&amp;gt;
         {headerGroups.map(headerGroup =&amp;gt; (
             &amp;lt;tr {...headerGroup.getHeaderGroupProps()}&amp;gt;
               {headerGroup.headers.map(column =&amp;gt; (
                   &amp;lt;th
                       {...column.getHeaderProps()}
                       style={{
                         borderBottom: 'solid 3px red',
                         color: 'black',
                       }}
                   &amp;gt;
                     {column.render('Header')}
                   &amp;lt;/th&amp;gt;
               ))}
             &amp;lt;/tr&amp;gt;
         ))}
         &amp;lt;/thead&amp;gt;
         &amp;lt;tbody {...getTableBodyProps()}&amp;gt;
         {rows.map(row =&amp;gt; {
           prepareRow(row)
           return (
               &amp;lt;tr {...row.getRowProps()}&amp;gt;
                 {row.cells.map(cell =&amp;gt; {
                   return (
                       &amp;lt;td
                           {...cell.getCellProps()}
                           style={{
                             padding: '10px',
                             border: 'solid 1px gray',
                           }}
                       &amp;gt;
                         {cell.render('Cell')}
                       &amp;lt;/td&amp;gt;
                   )
                 })}
               &amp;lt;/tr&amp;gt;
           )
         })}
         &amp;lt;/tbody&amp;gt;
       &amp;lt;/table&amp;gt;
     &amp;lt;/div&amp;gt;
 );
}

export default Example;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the spread operator is used to expand the expression more easily.&lt;/p&gt;

&lt;p&gt;All the columns we have an accessor, which is the data we have in the data object. Our data is inside the show object in the array — that’s why all our accessors have show as a prefix.&lt;/p&gt;

&lt;p&gt;Also, let’s explain a little what the functions and hooks used in the code above mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useTable&lt;/code&gt; hook takes options and plugins to build a table instance. The basic options are columns and data. &lt;/li&gt;
&lt;li&gt;getTableProps is a function to resolve any props needed by the table wrapper. Built-in table props are {role: “table”}, which can be customized.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getTableBodyProps&lt;/code&gt; is a function to resolve any props needed by the table body wrapper. The built-in table props are {role: “rowgroup”}, which can be customized.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prepareRow&lt;/code&gt; is a function that must be called on any row to be displayed. It is responsible for preparing a row for rendering.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;headerGroups&lt;/code&gt; and rows are internal data structures derived from columns and data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-table-with-sorting"&gt;
  &lt;/a&gt;
  React Table with Sorting
&lt;/h3&gt;

&lt;p&gt;Row sorting is a basic and a must functionality for the react table. To implement sorting of the columns in react-table you need to use &lt;code&gt;useSortBy&lt;/code&gt; hook plugin which is optional. We have received the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zaoj6Udh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/dE3S58D6zBvm4tpmPOrHIG6Gt1Jd43TmFL7k-UBcnRcqY6bZ_UdEBtY01pki4QSfArwBOFJLwKtUZkXMSNcRLUCbQxCu-F-HxTG3Vm0ifd-NZyrBlR0co5O1cU14z7szAot-c2hG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zaoj6Udh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/dE3S58D6zBvm4tpmPOrHIG6Gt1Jd43TmFL7k-UBcnRcqY6bZ_UdEBtY01pki4QSfArwBOFJLwKtUZkXMSNcRLUCbQxCu-F-HxTG3Vm0ifd-NZyrBlR0co5O1cU14z7szAot-c2hG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The update code of &lt;code&gt;src/App.js&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React, { useState, useEffect } from 'react';
import { useTable, useSortBy } from 'react-table';

function Example() {

 const data = React.useMemo(
     () =&amp;gt; [
       {
         col1: 'Minsk',
         col2: '27',
         col3: 'rain',
       },
       {
         col1: 'Vilnius',
         col2: '30',
         col3: 'rain',
       },
       {
         col1: 'London',
         col2: '23',
         col3: 'rain',
       },
     ],
     []
 )

 const columns = React.useMemo(
     () =&amp;gt; [
       {
         Header: 'City',
         accessor: 'col1', // accessor is the "key" in the data
       },
       {
         Header: 'Temperature',
         accessor: 'col2',
       },
       {
         Header: 'Weather Forecast',
         accessor: 'col3', // accessor is the "key" in the data
       },
     ],
     []
 )

 const {
   getTableProps,
   getTableBodyProps,
   headerGroups,
   rows,
   prepareRow,
 } = useTable({ columns, data }, useSortBy);

 return (
     &amp;lt;div&amp;gt;
       &amp;lt;table {...getTableProps()} style={{ border: 'solid 1px black' }}&amp;gt;
         &amp;lt;thead&amp;gt;
         {headerGroups.map(headerGroup =&amp;gt; (
             &amp;lt;tr {...headerGroup.getHeaderGroupProps()}&amp;gt;
               {headerGroup.headers.map(column =&amp;gt; (
                   &amp;lt;th
                       {...column.getHeaderProps(column.getSortByToggleProps())}
                       style={{
                         borderBottom: 'solid 3px red',
                         color: 'black',
                       }}
                   &amp;gt;
                     {column.render('Header')}
                     &amp;lt;span&amp;gt;
                       {column.isSorted
                           ? column.isSortedDesc
                               ? '🔽'
                               : '🔼'
                           : ''}
                    &amp;lt;/span&amp;gt;
                   &amp;lt;/th&amp;gt;
               ))}
             &amp;lt;/tr&amp;gt;
         ))}
         &amp;lt;/thead&amp;gt;
         &amp;lt;tbody {...getTableBodyProps()}&amp;gt;
         {rows.map(row =&amp;gt; {
           prepareRow(row)
           return (
               &amp;lt;tr {...row.getRowProps()}&amp;gt;
                 {row.cells.map(cell =&amp;gt; {
                   return (
                       &amp;lt;td
                           {...cell.getCellProps()}
                           style={{
                             padding: '10px',
                             border: 'solid 1px gray',
                           }}
                       &amp;gt;
                         {cell.render('Cell')}
                       &amp;lt;/td&amp;gt;
                   )
                 })}
               &amp;lt;/tr&amp;gt;
           )
         })}
         &amp;lt;/tbody&amp;gt;
       &amp;lt;/table&amp;gt;
     &amp;lt;/div&amp;gt;
 );
}

export default Example;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We used the &lt;code&gt;useSortBy&lt;/code&gt; plugin after declaring &lt;code&gt;useTable&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getSortByToggleProps()&lt;/code&gt; is a function that resolves any props needed while toggling the sort direction.&lt;/p&gt;

&lt;p&gt;Lines 29 to 31 display a descending or ascending arrow for the sorted column.&lt;/p&gt;

&lt;p&gt;The sorting works in a following way:&lt;/p&gt;

&lt;p&gt;Clicking a column header will toggle between ascending, descending, and no sort. If you shift-click a column header, the other column sort states will be preserved and the new column will be sorted afterwards. This ends up with multi-sort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering-react-table"&gt;
  &lt;/a&gt;
  Filtering React Table
&lt;/h3&gt;

&lt;p&gt;This is another default function for React-table. To do this, we add &lt;code&gt;useFilters&lt;/code&gt; and &lt;code&gt;useGlobalFilter&lt;/code&gt; hooks to our code. The difference between these two hooks is that the first is responsible for filtering a specific column, while the global filter works on the entire table – any column and row.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JcI_B5kC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/VN1IT66kkmakBF4-Gy0_WuvTatSVJnlIG-TadQ1MAQSI8K9P0L8MhdoudGgQ9-ievOxVZ5sgfGaslaGUDU4OqP0BJJPY8zPVkHAn2xwE2dgvWnRFzXQqQBxXrSy2Dpdru-YrCk5l" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JcI_B5kC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/VN1IT66kkmakBF4-Gy0_WuvTatSVJnlIG-TadQ1MAQSI8K9P0L8MhdoudGgQ9-ievOxVZ5sgfGaslaGUDU4OqP0BJJPY8zPVkHAn2xwE2dgvWnRFzXQqQBxXrSy2Dpdru-YrCk5l" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code in this case will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';

function GlobalFilter({
                       preGlobalFilteredRows,
                       globalFilter,
                       setGlobalFilter,
                     }) {
 const count = preGlobalFilteredRows.length
 const [value, setValue] = React.useState(globalFilter)
 const onChange = useAsyncDebounce(value =&amp;gt; {
   setGlobalFilter(value || undefined)
 }, 200)

 return (
   &amp;lt;span&amp;gt;
     Search:{' '}
     &amp;lt;input
       value={value || ""}
       onChange={e =&amp;gt; {
         setValue(e.target.value);
         onChange(e.target.value);
       }}
       placeholder={`${count} records...`}
       style={{
         fontSize: '1.1rem',
         border: '0',
       }}
     /&amp;gt;
   &amp;lt;/span&amp;gt;
 )
}

// Define a default UI for filtering
function DefaultColumnFilter({
                              column: { filterValue, preFilteredRows, setFilter },
                            }) {
 const count = preFilteredRows.length

 return (
   &amp;lt;input
     value={filterValue || ''}
     onChange={e =&amp;gt; {
       setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely
     }}
     placeholder={`Search ${count} records...`}
   /&amp;gt;
 )
}

function Example() {

 const data = React.useMemo(
     () =&amp;gt; [
       {
         col1: 'Minsk',
         col2: '27',
         col3: 'rain',
         col4: '739',
         col5: '90',
       },
       {
         col1: 'Vilnius',
         col2: '30',
         col3: 'rain',
         col4: '740',
         col5: '87',
       },
       {
         col1: 'London',
         col2: '23',
         col3: 'rain',
         col4: '743',
         col5: '77',
       },
       {
         col1: 'Madrid',
         col2: '34',
         col3: 'sunny',
         col4: '738',
         col5: '40',
       },
       {
         col1: 'Warsaw',
         col2: '25',
         col3: 'heavy rain',
         col4: '739',
         col5: '88',
       },
     ],
     []
 )

 const columns = React.useMemo(
     () =&amp;gt; [
       {
         Header: 'City',
         accessor: 'col1', // accessor is the "key" in the data
       },
       {
         Header: 'Temperature',
         accessor: 'col2',
       },
       {
         Header: 'Weather Forecast',
         accessor: 'col3',
       },
       {
         Header: 'Pressure',
         accessor: 'col4',
       },
       {
         Header: 'Humidity',
         accessor: 'col5',
       },
     ],
     []
 )

 const defaultColumn = React.useMemo(
   () =&amp;gt; ({
     // Let's set up our default Filter UI
     Filter: DefaultColumnFilter,
   }),
   []
 )

 const {
   getTableProps,
   getTableBodyProps,
   headerGroups,
   rows,
   prepareRow,
   state,
   visibleColumns,
   preGlobalFilteredRows,
   setGlobalFilter,
 } = useTable(
   {
     columns,
     data,
     defaultColumn, // Be sure to pass the defaultColumn option
   },
   useFilters,
   useGlobalFilter,
   useSortBy
 );

 return (
     &amp;lt;div&amp;gt;
       &amp;lt;table {...getTableProps()} style={{ border: 'solid 1px black' }}&amp;gt;
         &amp;lt;thead&amp;gt;
         {headerGroups.map(headerGroup =&amp;gt; (
             &amp;lt;tr {...headerGroup.getHeaderGroupProps()}&amp;gt;
               {headerGroup.headers.map(column =&amp;gt; (
                   &amp;lt;th
                       {...column.getHeaderProps(column.getSortByToggleProps())}
                       style={{
                         borderBottom: 'solid 3px red',
                         color: 'black',
                       }}
                   &amp;gt;
                     {column.render('Header')}
                     &amp;lt;span&amp;gt;
                       {column.isSorted
                           ? column.isSortedDesc
                               ? '🔽'
                               : '🔼'
                           : ''}
                    &amp;lt;/span&amp;gt;
                    &amp;lt;div&amp;gt;{column.canFilter ? column.render('Filter') : null}&amp;lt;/div&amp;gt;
                   &amp;lt;/th&amp;gt;
               ))}
             &amp;lt;/tr&amp;gt;
         ))}
         &amp;lt;tr&amp;gt;
           &amp;lt;th
             colSpan={visibleColumns.length}
             style={{
               textAlign: 'left',
             }}
           &amp;gt;
             &amp;lt;GlobalFilter
               preGlobalFilteredRows={preGlobalFilteredRows}
               globalFilter={state.globalFilter}
               setGlobalFilter={setGlobalFilter}
             /&amp;gt;
           &amp;lt;/th&amp;gt;
         &amp;lt;/tr&amp;gt;
         &amp;lt;/thead&amp;gt;
         &amp;lt;tbody {...getTableBodyProps()}&amp;gt;
         {rows.map(row =&amp;gt; {
           prepareRow(row)
           return (
               &amp;lt;tr {...row.getRowProps()}&amp;gt;
                 {row.cells.map(cell =&amp;gt; {
                   return (
                       &amp;lt;td
                           {...cell.getCellProps()}
                           style={{
                             padding: '10px',
                             border: 'solid 1px gray',
                           }}
                       &amp;gt;
                         {cell.render('Cell')}
                       &amp;lt;/td&amp;gt;
                   )
                 })}
               &amp;lt;/tr&amp;gt;
           )
         })}
         &amp;lt;/tbody&amp;gt;
       &amp;lt;/table&amp;gt;
     &amp;lt;/div&amp;gt;
 );
}

export default Example;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-reacttable-basic-functions"&gt;
  &lt;/a&gt;
  Other react-table basic functions
&lt;/h3&gt;

&lt;p&gt;React-table also allows you to implement basic table features such as pagination, row selection through checkboxes, column grouping, column ordering and even column drag and dropping using plugins already written. You just need to add the appropriate hook to your code. Api reference describes in great detail all the actions that you need to do to make your table work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-react-table-libraries-and-examples"&gt;
  &lt;/a&gt;
  Best React Table Libraries and Examples
&lt;/h2&gt;

&lt;p&gt;In this block, we will look at the best react table libraries and examples: today it is no longer effective to build and style tables manually, for there already is such a huge spectrum of fully prepared libraries available. We will present the pros and cons of each and point out the differences between them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reacttable"&gt;
  &lt;/a&gt;
  React-Table
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSSbxqMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/puu7MALM-SBzibJpXxZQD4z5LaPrQBpgSUBI7bN0LpMm2rkKQFlMpHiYXdnpFRjwvNfaFiHR3NHh8Su-CNexbrjCTd0K-_uYLZR8RICV4HWEAFqmhZW78N7dN5HvBmQAoTwFCVsO" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSSbxqMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/puu7MALM-SBzibJpXxZQD4z5LaPrQBpgSUBI7bN0LpMm2rkKQFlMpHiYXdnpFRjwvNfaFiHR3NHh8Su-CNexbrjCTd0K-_uYLZR8RICV4HWEAFqmhZW78N7dN5HvBmQAoTwFCVsO" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Table is one of the most popular table libraries in React. It has almost 15,000 stars on GitHub. The react-table library is very lightweight and offers all the basic features necessary for any simple table. Now, after the version 7 was released, it also supports Hooks. Moreover, the library is designed to have zero design, so you control the render and look of your table. The other great feature of React-table is a plugin ecosystem: if you want to extend the functionality of your grid, just add the necessary hook and that’s all.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Easy customization;&lt;/li&gt;
&lt;li&gt;Headless approach;&lt;/li&gt;
&lt;li&gt;Supports Pivoting and Aggregation;&lt;/li&gt;
&lt;li&gt;Wide plugin ecosystem;&lt;/li&gt;
&lt;li&gt;Lightweight (5kb – 14kb+ depending on features used).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In some cases the documentation is limited;&lt;/li&gt;
&lt;li&gt;In our opinion, this table is not suitable for large data sets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#notable-features"&gt;
  &lt;/a&gt;
  Notable features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Global search plugin;&lt;/li&gt;
&lt;li&gt;Basic filtering and sorting options;&lt;/li&gt;
&lt;li&gt;Custom sorting and filtering options for columns based on data types (numbers, string, boolean, select input, etc.);&lt;/li&gt;
&lt;li&gt;Pagination support;&lt;/li&gt;
&lt;li&gt;Ability to create custom plugin hooks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a quick recap: react-table is good for simple tables that need basic features like searching, sorting, filtering, etc. Basic sports statistics, weather forecasts, basic finance data, user management table and others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bryntum-grid"&gt;
  &lt;/a&gt;
  Bryntum grid
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onE51fgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/_mcKTBEIB4Yo6RkHinsN5zAS7gmaHIQN-RCglhCBP7SPDKA6fN5Fug-O2nVyX5N2H4uTeZrVGemnYK-15-kGdi8Ohp--5kpxyf8uKFyVZekpp6yrLOMVBGLGGxBM23h55zMHEdKg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onE51fgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/_mcKTBEIB4Yo6RkHinsN5zAS7gmaHIQN-RCglhCBP7SPDKA6fN5Fug-O2nVyX5N2H4uTeZrVGemnYK-15-kGdi8Ohp--5kpxyf8uKFyVZekpp6yrLOMVBGLGGxBM23h55zMHEdKg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bryntum Grid is a powerful &amp;amp; high-performance table component capable of handling 100k+ rows while still providing a great user experience. Bryntum Grid is developed on pure Javascript, so it’s framework agnostic. However, it comes with React wrappers to make integration into your project seamless. The main cons for this table is that it is not a pure react application, plus it’s a paid library. For that amount of money you want the pure react table component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Locked / frozen columns;&lt;/li&gt;
&lt;li&gt;Cell editing; &lt;/li&gt;
&lt;li&gt;Custom cell rendering;&lt;/li&gt;
&lt;li&gt;Dedicated support;&lt;/li&gt;
&lt;li&gt;Paging Easily themeable with SASS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#griddle"&gt;
  &lt;/a&gt;
  Griddle
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gs-CZ4ZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/CSAt8URQg0zw_ZA5ouzK82UuHs30RgRRTgsWhsskAURV9PyOyZJQFAGW5W3Sa6rWp5gV1bBtCSalNrdqRgbUSFNOcUuTDuQ4_OEqVabb68S_4phfPR46E7MxjrJVZsKgZylwGG52" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gs-CZ4ZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/CSAt8URQg0zw_ZA5ouzK82UuHs30RgRRTgsWhsskAURV9PyOyZJQFAGW5W3Sa6rWp5gV1bBtCSalNrdqRgbUSFNOcUuTDuQ4_OEqVabb68S_4phfPR46E7MxjrJVZsKgZylwGG52" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Griddle is a customizable architecture React datagrid component. It ships with some basic conventions and functionality, but gives you the ability to customize just about anything (components, methods, etc). To encourage customization reuse, Griddle has plugin support. Plugins are packaged Griddle customizations that can be reused or shared. However, the library seems to be abandoned. The cons: seems that the support of this library is deprecated – the latest commit was in July 2019.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devextreme-react-datagrid"&gt;
  &lt;/a&gt;
  DevExtreme React DataGrid
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbJiBFkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/1O_yuAUP6TTxdRIE53C9eaRlbJYb2o5nwpCwQv19u3FVQMeZHxSJhaijcGEoZTrpLU6WHn8-Ixt3x4yX7r686KDJj2GFjuHTXpvQefKJ8m4ScUArU-P2fTHQvzr5sDqFIlD2x2b7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbJiBFkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/1O_yuAUP6TTxdRIE53C9eaRlbJYb2o5nwpCwQv19u3FVQMeZHxSJhaijcGEoZTrpLU6WHn8-Ixt3x4yX7r686KDJj2GFjuHTXpvQefKJ8m4ScUArU-P2fTHQvzr5sDqFIlD2x2b7" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DevExtreme React Grid is a component that displays table data from a local or remote source. It supports pagination, sorting, filtering, grouping and other data generation options, row selection, and data editing. The support for managed and unattended state modes allows the Grid to be used in a regular or Redux-based application. The DevExtreme Grid component has a composable and extensible plugin-based architecture and also provides built-in Bootstrap and Material-UI rendering functionality and theme creation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#notable-features"&gt;
  &lt;/a&gt;
  Notable features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pure React;&lt;/li&gt;
&lt;li&gt;Virtual scrolling;&lt;/li&gt;
&lt;li&gt;Multi-column sorting and grouping;&lt;/li&gt;
&lt;li&gt;Tree-view mode;
*Custom UI Rendering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rsuite-react-table"&gt;
  &lt;/a&gt;
  Rsuite React Table
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMib_OJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/jFK6JkhWri8AjPFULHlhnlW5Asd_Nt9XH-Jv4IFejbI7QLMwIKXpkpEmeFRvngE72uzAe4uh3b4RGRCxvFPdLHy_tZcLCIFwd6d_2aXjN1ESTu1rYnqRE9y44vZXpyLjLv1I5qrH" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMib_OJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/jFK6JkhWri8AjPFULHlhnlW5Asd_Nt9XH-Jv4IFejbI7QLMwIKXpkpEmeFRvngE72uzAe4uh3b4RGRCxvFPdLHy_tZcLCIFwd6d_2aXjN1ESTu1rYnqRE9y44vZXpyLjLv1I5qrH" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a component of the React Table that supports virtualization, fixed columns and headers, tree views and more. The good thing about this library is that it comes with a lot of examples on each feature.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Library offers sorting, expandable child nodes, and RTL;&lt;/li&gt;
&lt;li&gt;Detailed docs with many examples;&lt;/li&gt;
&lt;li&gt;Many pre-built components inside.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Customizing this library might be a bit challenging;&lt;/li&gt;
&lt;li&gt;There is no big community and active development of the library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-virtualized"&gt;
  &lt;/a&gt;
  React Virtualized
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZpPpVaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/yqINkyL_8i29vz45BEK0E_ycKd8pmdrxarEQmMupqxJzTGYvz4FIjATiZT2yshZjZwPzlvHSeekw2XnHJ5_GhGob0MJCOGJ7qHtVET12OCm9D-hc5C1pXeJAIwxv1gLCOwRvfzx1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZpPpVaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/yqINkyL_8i29vz45BEK0E_ycKd8pmdrxarEQmMupqxJzTGYvz4FIjATiZT2yshZjZwPzlvHSeekw2XnHJ5_GhGob0MJCOGJ7qHtVET12OCm9D-hc5C1pXeJAIwxv1gLCOwRvfzx1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React-virtualized is a react table library heavily optimized for performance when the dataset is large. This library is not exactly a table library; it’s React components for efficiently rendering large lists and tabular data. You should consider using this product when you want to manage a large set of data. The documentation is comprehensive and the community around this tool is very mature, it has more than 18k stars on Github.&lt;/p&gt;

&lt;p&gt;For normal use cases, this library would be overkill, and the API would be too advanced. You can successfully go with react-virtualized for custom timelines, charts involving infinitely long calendars, and heavy UI elements for your large dataset.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-data-grid"&gt;
  &lt;/a&gt;
  React Data grid
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUzfPyQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/Gks8AQ8knU2Vud1-vCnqxhhMvwbepw6uv0rXCyYuQ2LsWBtTsRSZMypMIUrtBTeoxFT9SbHxC3ZAlQX6YfHZyB6KsGvPMiNVR9x-rmzGvecnO5D8FJChyVbuY_BA_zaYx-jAKULf" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUzfPyQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/Gks8AQ8knU2Vud1-vCnqxhhMvwbepw6uv0rXCyYuQ2LsWBtTsRSZMypMIUrtBTeoxFT9SbHxC3ZAlQX6YfHZyB6KsGvPMiNVR9x-rmzGvecnO5D8FJChyVbuY_BA_zaYx-jAKULf" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Data Grid is a react table library for creating apps similar to google spreadsheets and MS excel. The broad range of features includes data binding, editing, Excel-like filtering, custom sorting, row aggregation, Excel, CSV, and PDF format collection, and support.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Lightning-fast rendering;&lt;/li&gt;
&lt;li&gt;Rich editing and formatting;&lt;/li&gt;
&lt;li&gt;Configurable and customizable;&lt;/li&gt;
&lt;li&gt;Packed with excel features including cell copy and paste.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Сomplicated to jumpstart with the development of the table;&lt;/li&gt;
&lt;li&gt;Poor documentation;&lt;/li&gt;
&lt;li&gt;It does not support pagination by default;&lt;/li&gt;
&lt;li&gt;It is not easily customizable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Excel-like filtering and grouping options;&lt;/li&gt;
&lt;li&gt;Data exporting in any format: PDF, CSV, and Excel;&lt;/li&gt;
&lt;li&gt;Inline editing of columns;&lt;/li&gt;
&lt;li&gt;Supports virtual rendering for infinitely long table rows;&lt;/li&gt;
&lt;li&gt;Uses Bootstrap for styling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#kendo-react-grid-component"&gt;
  &lt;/a&gt;
  Kendo React Grid component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TYbs60H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Y-DZcWolttyBvlwv7kumvr4o5GAjifgIApom7Ipv7DN3SIzZ4wNirnmIHZ3kCl7u8rOUUVaaupN8WghRn0aaQvcaiGJ7YDjgJoa-WS1reB3fpqiYjrnikFq9fLRXewA-6HQOl6OM" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TYbs60H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Y-DZcWolttyBvlwv7kumvr4o5GAjifgIApom7Ipv7DN3SIzZ4wNirnmIHZ3kCl7u8rOUUVaaupN8WghRn0aaQvcaiGJ7YDjgJoa-WS1reB3fpqiYjrnikFq9fLRXewA-6HQOl6OM" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kendo React Grid component is one of the most powerful data grid components available to React developers, containing many must-have features. React data table has a lot of complex features: reordering and resizing columns, displaying hierarchical data, column and context menus. These provide additional functionality based on currently selected rows or columns, options for custom rendering, and much, much more. Moreover, the Kendo React library is compliant with many security and accessibility standards out of the box.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Zero dependencies;&lt;/li&gt;
&lt;li&gt;100+ features to effectively manipulate the bit amount of data;&lt;/li&gt;
&lt;li&gt;Documentation is very (!) well structured and comprehensive;&lt;/li&gt;
&lt;li&gt;3 themes of your choice;&lt;/li&gt;
&lt;li&gt;Dedicated support team option.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Price is a bit high;&lt;/li&gt;
&lt;li&gt;We assume that the implementation of custom styles can be a bit tricky.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want the table/grid to be a very comprehensive feature-packed component for your application, with good docs and dedicated support – we recommend looking at the Kendo UI React grid.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-data-sheet"&gt;
  &lt;/a&gt;
  React data sheet
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8SYtCbuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/q0OS96E7EEm53nnKnfcdpvhqhfGqdkmZalU59ZQpBMwlaMrQ6ehbSA5ojL_Kp8koJmH7IBRu4Yb0Lqqz_tsPjab9J2I3xLPM3tIvAV5qqoURUoJx-d6dOE6CwKz_2RSQYvwJEjn3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8SYtCbuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/q0OS96E7EEm53nnKnfcdpvhqhfGqdkmZalU59ZQpBMwlaMrQ6ehbSA5ojL_Kp8koJmH7IBRu4Yb0Lqqz_tsPjab9J2I3xLPM3tIvAV5qqoURUoJx-d6dOE6CwKz_2RSQYvwJEjn3" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React-datasheet is similar to react-data-grid. It has many GitHub starts, so it’s well-maintained and has a very helpful and productive community. As you presumably noticed, the main goal of this library is to help you create your own Google Sheets/Excel-like application on React. The project has prebuilt styles and functions, so you will receive that view and complex functions out-of-the-box. However, note that this library is not suited for the basic, small-sized tables with limited functionality.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Well documented;&lt;/li&gt;
&lt;li&gt;Good looking UI;&lt;/li&gt;
&lt;li&gt;Good customization;&lt;/li&gt;
&lt;li&gt;Pre Built formulas tables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Limited to the specific use-case;&lt;/li&gt;
&lt;li&gt;Not suitable for large datasets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#material-table"&gt;
  &lt;/a&gt;
  Material Table
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iNGuBV4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/8h0TTiWMeVM6FAy4_-gQld9_ITj6c4t5csALIIq9UiCT5qb32qlDXCYrG9-99MYvpAoFdev_MPUjCRCMrnmeefEx2dWxk-SCjY4vWUPVkqaq_o4GeeaHOpH28dgzveE74sTGLC1R" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNGuBV4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/8h0TTiWMeVM6FAy4_-gQld9_ITj6c4t5csALIIq9UiCT5qb32qlDXCYrG9-99MYvpAoFdev_MPUjCRCMrnmeefEx2dWxk-SCjY4vWUPVkqaq_o4GeeaHOpH28dgzveE74sTGLC1R" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Material table is one of the most popular react table libraries, thanks to &lt;a href="https://flatlogic.com/blog/top-material-design-dashboards/"&gt;material design&lt;/a&gt; and usage of Material-UI components. The project is very easy to use and install even for the beginners; robust documentation will speed up the development.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Feature-packed;&lt;/li&gt;
&lt;li&gt;Pre build Export to CSV;&lt;/li&gt;
&lt;li&gt;Robust documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Component overriding;&lt;/li&gt;
&lt;li&gt;Not everyone is a fan of Material UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-material-table-works"&gt;
  &lt;/a&gt;
  How Material Table works
&lt;/h2&gt;

&lt;p&gt;To start development you need to install this library by typing &lt;code&gt;yarn add&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt; commands in the console. You also need to add Material-UI icons.&lt;/p&gt;

&lt;p&gt;The library works in the following way – you just need to transfer two props to the &lt;code&gt;&amp;lt;MaterialTable /&amp;gt;&lt;/code&gt; component. The prop data is there to display the data in row format. Another prop column defines the number of columns.&lt;/p&gt;

&lt;p&gt;A third prop on &lt;code&gt;&amp;lt;MaterialTable /&amp;gt;&lt;/code&gt; component called &lt;code&gt;‘title’&lt;/code&gt; can be used to give a title to the whole table. See the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
  &amp;lt;div&amp;gt;
    &amp;lt;MaterialTable columns={columns} data={data} title='Flatlogic' /&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the material-table library displays a search bar and pagination. At Flatlogic we recommend to use Material table in case you are in love with Material-UI and material design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rctable"&gt;
  &lt;/a&gt;
  RC-Table
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80cbnRbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/urEoTq-zHK0zfmflK4ssaksUo1S5hMMmNnlVYnV3kEWkVWQXuG4uf8bAoISzFlATYKmN4NJtmK7eKUZxkxWQ4AqPQalR1jzYODtn1aeM_C-KQDQWnZoS4K_Xd5XhO8pPdZEDeZ9l" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80cbnRbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/urEoTq-zHK0zfmflK4ssaksUo1S5hMMmNnlVYnV3kEWkVWQXuG4uf8bAoISzFlATYKmN4NJtmK7eKUZxkxWQ4AqPQalR1jzYODtn1aeM_C-KQDQWnZoS4K_Xd5XhO8pPdZEDeZ9l" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rc-Table is another useful tiny React Table library with the set of basic functions that will equip you to build a well structured react table. The table is good if you want to use your own styling. The other good thing with this library is that it is very easy to understand and start.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Very lightweight;&lt;/li&gt;
&lt;li&gt;The docs has many examples with the source code;&lt;/li&gt;
&lt;li&gt;Fast jump start to the actual development;&lt;/li&gt;
&lt;li&gt;Limited community.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Documentation is not so good. Some functions are not described at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus this library is good for small applications or apps where the table is not a core part of the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As we saw from our guide, building react tables requires some effort compared to other libraries such as bootstrap. We also learned the fact that in most cases you do not need to develop your own react table from scratch: there already are many react table solutions for various project requirements, both paid and free.&lt;/p&gt;

&lt;p&gt;When choosing a library for your requirements, pay attention to the number of stars on the github, how active the community is, how often the library is updated and how often the downloads happen.&lt;/p&gt;

&lt;p&gt;However, let’s look at the cases when you can still consider building your own react table:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you need a custom UI for the table. It might be faster to build your own;&lt;/li&gt;
&lt;li&gt;When your table is just a showcase;&lt;/li&gt;
&lt;li&gt;You need a very lightweight table without any dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope that our guide and selection were useful for you and that you have chosen the library that you will use when building the react table.&lt;/p&gt;

&lt;p&gt;If you notice that our article is missing a good react table library, we will gladly consider including it in the collection – just drop us a line.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#about-flatlogic"&gt;
  &lt;/a&gt;
  About Flatlogic
&lt;/h1&gt;

&lt;p&gt;At Flatlogic, we help businesses to speed up web development with our beautifully designed web &amp;amp; mobile application templates built with &lt;a href="https://flatlogic.com/templates/react"&gt;React&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/vue"&gt;Vue&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/angular"&gt;Angular&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/react-native"&gt;React Native&lt;/a&gt;, and &lt;a href="https://flatlogic.com/templates/bootstrap"&gt;Bootstrap&lt;/a&gt;. During the last several years we have successfully delivered more than 100 custom dashboards and data management solutions to various clients starting from innovative startups to established and respected enterprises.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WpVQsS-Bb3U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You might also like these articles:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/top-24-free-essential-plugins-to-extend-bootstrap-4mn6"&gt;Top 24 Free Essential Plugins To Extend Bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/37-simple-and-useful-table-templates-examples-for-web-developers-i3j"&gt;37 Simple And Useful Table Templates &amp;amp; Examples For Web Developers&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/top-13-login-pages-design-examples-57ip"&gt;Top 13+ Login Pages Design Examples&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Setting up application monitoring for your Nodejs app in 20 mins with open source solution</title>
      <author>Ankit Anand</author>
      <pubDate>Tue, 08 Jun 2021 13:37:27 +0000</pubDate>
      <link>https://dev.to/signoz/setting-up-application-monitoring-for-your-nodejs-app-in-20-mins-with-open-source-solution-134i</link>
      <guid>https://dev.to/signoz/setting-up-application-monitoring-for-your-nodejs-app-in-20-mins-with-open-source-solution-134i</guid>
      <description>&lt;p&gt;Node.js tops the list of most widely used frameworks by developers. Powered by Google's V8 javascript engine, its performance is incredible. Ryan Dahl, the creator of Node.js, wanted to create real-time websites with push capability. On Nov 8, 2009, Node.js was first demonstrated by Dahl at the inaugural European JSconf. Node.js has now become a critical component in the technology stack of large-scale enterprises. But like any technology, it has its own set of limitations.&lt;/p&gt;

&lt;p&gt;Node.js is a dynamically typed single-threaded programming language. There is a lot of freedom for the interpreter and runtime to make decisions that can easily lead to memory leaks and high CPU loads. This can lead to performance issues, loss of resources, and potential downtime. Hence, it is crucial to monitor your Node.js apps for app performance metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz"&gt;SigNoz&lt;/a&gt; is an open-source application monitoring and observability platform which can be installed within your infra. There's no need to go through any sales team or complex onboarding process to start monitoring your application with SigNoz. In this article, let's take a look at how it can be deployed with Docker in a sample Node.js application.&lt;/p&gt;

&lt;p&gt;Let's divide this tutorial into 2 parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing SigNoz&lt;/li&gt;
&lt;li&gt;Installing &amp;amp; setting up a sample Node.js app for monitoring&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#part1-installing-signoz"&gt;
  &lt;/a&gt;
  Part-1 Installing SigNoz
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install Docker&lt;/strong&gt;&lt;br&gt;
You can install Docker by following the steps listed on their website &lt;a href="https://www.docker.com/get-started"&gt;here&lt;/a&gt;. For this tutorial, you can choose the Docker Desktop option based on the system you have.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJlFqNkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xm05wcxw24lrfmto5dht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJlFqNkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xm05wcxw24lrfmto5dht.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clone SigNoz GitHub repository&lt;/strong&gt;&lt;br&gt;
From your terminal use the following command to clone SigNoz's GitHub repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Update path to signoz/deploy and install SigNoz&lt;/strong&gt;&lt;br&gt;
The deploy folder contains the files necessary for deploying SigNoz through Docker.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You will be asked to select one of the 2 ways to proceed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clickhouse as database (default)&lt;/li&gt;
&lt;li&gt;Kafka + Druid setup to handle scale (recommended for production use)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Trying out SigNoz with clickhouse database takes less than 1GB of memory and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCEa3C8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uenodd3f8igg2tghijmv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCEa3C8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uenodd3f8igg2tghijmv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will get the following message once the installation is complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jaXCBdab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phjjj8ns2l0wmi1pghsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jaXCBdab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phjjj8ns2l0wmi1pghsp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the installation runs successfully, the UI should be accessible at port 3000. Wait for 2-3 mins for the data to be available to frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Al3hUTeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtmmoslacztt1j5cxqk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Al3hUTeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtmmoslacztt1j5cxqk9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The applications shown in the dashboard are from a sample app called Hot R.O.D that comes with the installation bundle. It has 4 microservices being monitored: Frontend, Customer, Driver and Route. You can access the Hot R.O.D application UI at: &lt;a href="http://localhost:9000/"&gt;http://localhost:9000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now comes the part where you can instrument your own sample app and get the metrics reported through SigNoz.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-2-installing-amp-setting-up-a-sample-nodejs-app-for-monitoring"&gt;
  &lt;/a&gt;
  Part 2 - Installing &amp;amp; setting up a sample Node.js app for monitoring
&lt;/h2&gt;

&lt;p&gt;To start monitoring your application, you need to set up its instrumentation. Instrumentation is the process of implementing code instructions to monitor your application's performance.&lt;/p&gt;

&lt;p&gt;SigNoz supports &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; as the primary way for users to instrument their application. OpenTelemetry is a single, vendor-agnostic instrumentation library per language with support for both automatic and manual instrumentation. You don't need to worry about instrumentation in this tutorial. OpenTelemetry comes with all currently available &lt;a href="https://github.com/open-telemetry/opentelemetry-js#plugins"&gt;instrumentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But to see how SigNoz helps you in monitoring an app's performance, we need an app first.&lt;/p&gt;

&lt;p&gt;You need to ensure that you have &lt;strong&gt;Node.js version 12 or newer&lt;/strong&gt;. You can download the latest version of Node.js &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt;. For the sample application, let's create a basic 'hello world' express.js application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make a directory and install express&lt;/strong&gt;&lt;br&gt;
Make a directory for your sample app on your machine. Then open up the terminal, navigate to the directory path and install express with the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Setup server.js&lt;/strong&gt;&lt;br&gt;
Create a file called 'server.js' in your directory and with any text editor setup your 'Hello World' file with the code below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');

const app = express();

app.get('/hello', (req, res) =&amp;gt; {
 res.status(200).send('Hello World');
});

app.listen(9090);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Boot up the server with the following command on the terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can check if your app is working by visiting: &lt;a href="http://localhost:9090/hello"&gt;http://localhost:9090/hello&lt;/a&gt;&lt;br&gt;
Once you are finished checking, exit the localhost on your terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up OpenTelemetry&lt;/strong&gt;&lt;br&gt;
In the same directory path at the terminal, install the OpenTelemetry launcher package with this command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install lightstep-opentelemetry-launcher-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Go to your directory and create a new file named, "server_init.js". This will act as the new entry point for your app. Paste the following code in the file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {
    lightstep,
    opentelemetry,
   } = require('lightstep-opentelemetry-launcher-node');

   const sdk = lightstep.configureOpenTelemetry();

   sdk.start().then(() =&amp;gt; {
    require('./server');
   });

   function shutdown() {
    sdk.shutdown().then(
      () =&amp;gt; console.log("SDK shut down successfully"),
      (err) =&amp;gt; console.log("Error shutting down SDK", err),
    ).finally(() =&amp;gt; process.exit(0))
   };

   process.on('exit', shutdown);
   process.on('SIGINT', shutdown);
   process.on('SIGTERM', shutdown);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once the file is created, you only need to run one last command at your terminal.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_EXPORTER_OTLP_SPAN_ENDPOINT="http://&amp;lt;IP of SigNoz Backend&amp;gt;:55681/v1/trace" LS_SERVICE_NAME=&amp;lt;service name&amp;gt; node server_init.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Replacing the placeholders in the above command for local host:&lt;/p&gt;

&lt;p&gt;IP of SigNoz Backend: localhost (since we are running SigNoz on our local host)&lt;/p&gt;

&lt;p&gt;service name: sample_app (you can give whatever name that suits you)&lt;/p&gt;

&lt;p&gt;So the final command is:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_EXPORTER_OTLP_SPAN_ENDPOINT="http://localhost:55681/v1/trace" LS_SERVICE_NAME=sample_app node server_init.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The app should be accessible at &lt;a href="http://localhost:9090/hello"&gt;http://localhost:9090/hello&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Congratulations! You have instrumented your sample Node.js app. You can now access the SigNoz dashboard at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to monitor your app for performance metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x1uNBidS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad5aui0o4da5ry67vase.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x1uNBidS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad5aui0o4da5ry67vase.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't find 'Sample_app' in your list of applications, hit the endpoint at port 9090, and wait for 1-2 mins.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#identifying-events-causing-high-latency-in-your-app"&gt;
  &lt;/a&gt;
  Identifying events causing high latency in your app
&lt;/h2&gt;

&lt;p&gt;Now that you have installed SigNoz, let's see how you can identify specific events causing high latency in your deployed applications.&lt;/p&gt;

&lt;p&gt;In just 5 easy steps, SigNoz dashboard lets you drill down to events causing a delay in your deployed apps 👇&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose your microservice&lt;/li&gt;
&lt;li&gt;Choose the timestamp where latency is high&lt;/li&gt;
&lt;li&gt;Click on view traces&lt;/li&gt;
&lt;li&gt;Choose the trace ID with the highest latency&lt;/li&gt;
&lt;li&gt;Zero in on the highest latency event and take action&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's a glimpse of how you can drill down and identify specific issues:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/552957573" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you need any help with trying out SigNoz, feel free to mail me at &lt;a href="mailto:ankit.anand@signoz.io"&gt;ankit.anand@signoz.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They say, "If it's not monitored, then it's not in production." And with SigNoz you can start monitoring your Node.js application now. Enabling your team to resolve issues quickly in production is critical to maintaining complex distributed systems in fine health.&lt;/p&gt;

&lt;p&gt;At SigNoz, we are committed to making the best open-source, self-hosted tool for application performance monitoring. Feel free to check out our GitHub repo here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;
&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;
&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
👇 Features:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>node</category>
      <category>devops</category>
      <category>monitoring</category>
      <category>opensource</category>
    </item>
    <item>
      <title>I want to be a Web developer!</title>
      <author>Koichi19</author>
      <pubDate>Tue, 08 Jun 2021 13:28:31 +0000</pubDate>
      <link>https://dev.to/koichi19/i-want-to-be-a-web-developer-149e</link>
      <guid>https://dev.to/koichi19/i-want-to-be-a-web-developer-149e</guid>
      <description>&lt;p&gt;Hello! I'm Koichi. I'm a college student and I'm self-taught in Javascript and react.　I'm still a beginner, but I'll be posting what I learn here to inspire you. Let's learn together!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>firstpost</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Take a journey with your own map service by AWS Amplify and Amazon Location Service</title>
      <author>Kihara, Takuya</author>
      <pubDate>Tue, 08 Jun 2021 13:19:29 +0000</pubDate>
      <link>https://dev.to/aws-builders/take-a-journey-with-your-own-map-service-by-aws-amplify-and-amazon-location-service-1nj6</link>
      <guid>https://dev.to/aws-builders/take-a-journey-with-your-own-map-service-by-aws-amplify-and-amazon-location-service-1nj6</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/G1BclFCVMmw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Amazon Location Service is Generally Available on June 1st, 2021.&lt;br&gt;
&lt;a href="https://aws.amazon.com/jp/blogs/aws/amazon-location-service-is-now-generally-available-with-new-routing-and-satellite-imagery-capabilities/"&gt;https://aws.amazon.com/jp/blogs/aws/amazon-location-service-is-now-generally-available-with-new-routing-and-satellite-imagery-capabilities/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we can make our own map service which used Amazon Location Service.&lt;/p&gt;

&lt;p&gt;This post shows how to make your own map service by AWS Amplify and Amazon Location Service.&lt;br&gt;
We can search the location and display it on the map.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-setup"&gt;
  &lt;/a&gt;
  1. Setup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vue CLI (+ Vuetify)&lt;/li&gt;
&lt;li&gt;Amplify CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#11-vue-cli"&gt;
  &lt;/a&gt;
  1.1. Vue CLI
&lt;/h3&gt;

&lt;p&gt;Install "Vue CLI."&lt;br&gt;
&lt;a href="https://cli.vuejs.org/guide/prototyping.html"&gt;Vue CLI&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vue &lt;span class="nt"&gt;-V&lt;/span&gt;
@vue/cli 4.5.13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#12-amplify-cli"&gt;
  &lt;/a&gt;
  1.2. Amplify CLI
&lt;/h3&gt;

&lt;p&gt;Install "Amplify CLI."&lt;br&gt;
&lt;a href="https://docs.amplify.aws/start/getting-started/installation/q/integration/vue"&gt;AWS Amplify&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;amplify &lt;span class="nt"&gt;-v&lt;/span&gt;
Scanning &lt;span class="k"&gt;for &lt;/span&gt;plugins...
Plugin scan successful
4.52.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#13-create-vue-project"&gt;
  &lt;/a&gt;
  1.3. Create Vue project
&lt;/h3&gt;

&lt;p&gt;Create a Vue project by &lt;code&gt;Vue CLI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  vue create amplify-amazon-location
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vue create amplify-amazon-location


Vue CLI v4.5.13
? Please pick a preset: Manually &lt;span class="k"&gt;select &lt;/span&gt;features
? Check the features needed &lt;span class="k"&gt;for &lt;/span&gt;your project: Choose Vue version, Babel, Linter
? Choose a version of Vue.js that you want to start the project with 2.x
? Pick a linter / formatter config: Prettier
? Pick additional lint features: Lint on save
? Where &lt;span class="k"&gt;do &lt;/span&gt;you prefer placing config &lt;span class="k"&gt;for &lt;/span&gt;Babel, ESLint, etc.? In dedicated confi
g files
? Save this as a preset &lt;span class="k"&gt;for &lt;/span&gt;future projects? No

&lt;span class="o"&gt;(&lt;/span&gt;snip&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;amplify-amazon-location/
&lt;span class="nv"&gt;$ &lt;/span&gt;vue add vuetify
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#14-setup-amplify-project"&gt;
  &lt;/a&gt;
  1.4. Setup Amplify project
&lt;/h3&gt;

&lt;p&gt;Setup Amplify project.&lt;/p&gt;

&lt;p&gt;
  amplify init
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;amplify init
Note: It is recommended to run this &lt;span class="nb"&gt;command &lt;/span&gt;from the root of your app directory
? Enter a name &lt;span class="k"&gt;for &lt;/span&gt;the project amplifyamazonlocatio
The following configuration will be applied:

Project information
| Name: amplifyamazonlocatio
| Environment: dev
| Default editor: Visual Studio Code
| App &lt;span class="nb"&gt;type&lt;/span&gt;: javascript
| Javascript framework: vue
| Source Directory Path: src
| Distribution Directory Path: dist
| Build Command: npm run-script build
| Start Command: npm run-script serve

? Initialize the project with the above configuration? No
? Enter a name &lt;span class="k"&gt;for &lt;/span&gt;the environment dev
? Choose your default editor: Visual Studio Code
? Choose the &lt;span class="nb"&gt;type &lt;/span&gt;of app that you&lt;span class="s1"&gt;'re building javascript
Please tell us about your project
? What javascript framework are you using vue
? Source Directory Path:  src
? Distribution Directory Path: dist
? Build Command:  yarn build
? Start Command: yarn serve
Using default provider  awscloudformation
? Select the authentication method you want to use: AWS profile

For more information on AWS Profiles, see:
https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html

? Please choose the profile you want to use amplify-dev
Adding backend environment dev to AWS Amplify Console app: d2qfsvhqbazu5s
⠦ Initializing project in the cloud...

(snip)

$
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;And don't forget to add UI Components.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add aws-amplify @aws-amplify/ui-vue
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#15-add-other-packages"&gt;
  &lt;/a&gt;
  1.5. Add other packages
&lt;/h3&gt;

&lt;p&gt;This time we use "MapLibre GL JS," so we need to add these packages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sdk-js"&gt;aws-sdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benchmark-urbanism/vue-mapbox-map"&gt;@benchmark-urbanism/vue-mapbox-map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/maplibre/maplibre-gl-js"&gt;maplibre-gl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href="https://docs.aws.amazon.com/location/latest/developerguide/tutorial-maplibre-gl-js.html"&gt;the official document&lt;/a&gt; for the detail.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add aws-sdk @benchmark-urbanism/vue-mapbox-map maplibre-gl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#16-edit-mainjs"&gt;
  &lt;/a&gt;
  1.6. Edit main.js
&lt;/h3&gt;

&lt;p&gt;Then, we edit &lt;code&gt;src/main.js&lt;/code&gt; like below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;vuetify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./plugins/vuetify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-amplify/ui-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;awsconfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./aws-exports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;awsconfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl/dist/maplibre-gl.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;productionTip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;vuetify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;$mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#2-add-auth"&gt;
  &lt;/a&gt;
  2. Add Auth
&lt;/h2&gt;

&lt;p&gt;Add Authentication.&lt;/p&gt;

&lt;p&gt;
  amplify add auth
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;amplify add auth
Using service: Cognito, provided by: awscloudformation

 The current configured provider is Amazon Cognito. 

 Do you want to use the default authentication and security configuration? Defau
lt configuration
 Warning: you will not be able to edit these selections. 
 How &lt;span class="k"&gt;do &lt;/span&gt;you want &lt;span class="nb"&gt;users &lt;/span&gt;to be able to sign &lt;span class="k"&gt;in&lt;/span&gt;? Username
 Do you want to configure advanced settings? No, I am &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Successfully added auth resource amplifyamazonlocatio3e211eea locally

Some next steps:
&lt;span class="s2"&gt;"amplify push"&lt;/span&gt; will build all your &lt;span class="nb"&gt;local &lt;/span&gt;backend resources and provision it &lt;span class="k"&gt;in &lt;/span&gt;the cloud
&lt;span class="s2"&gt;"amplify publish"&lt;/span&gt; will build all your &lt;span class="nb"&gt;local &lt;/span&gt;backend and frontend resources &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;you have hosting category added&lt;span class="o"&gt;)&lt;/span&gt; and provision it &lt;span class="k"&gt;in &lt;/span&gt;the cloud

&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Then, Push project.&lt;/p&gt;

&lt;p&gt;
  amplify push
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;amplify push
✔ Successfully pulled backend environment dev from the cloud.

Current Environment: dev

| Category | Resource name                | Operation | Provider plugin   |
| &lt;span class="nt"&gt;--------&lt;/span&gt; | &lt;span class="nt"&gt;----------------------------&lt;/span&gt; | &lt;span class="nt"&gt;---------&lt;/span&gt; | &lt;span class="nt"&gt;-----------------&lt;/span&gt; |
| Auth     | amplifyamazonlocatio3e211eea | Create    | awscloudformation |
? Are you sure you want to &lt;span class="k"&gt;continue&lt;/span&gt;? Yes
⠧ Updating resources &lt;span class="k"&gt;in &lt;/span&gt;the cloud. This may take a few minutes...

&lt;span class="o"&gt;(&lt;/span&gt;snip&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-create-a-map-and-a-search-index"&gt;
  &lt;/a&gt;
  3. Create a Map and a Search index
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#31%E3%80%80create-a-map"&gt;
  &lt;/a&gt;
  3.1.　Create a Map
&lt;/h3&gt;

&lt;p&gt;Next, we open the AWS console by the browser and move to "Amazon Location Service."&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the "Maps" menu on the left panel.&lt;/li&gt;
&lt;li&gt;And click "Create map" in the My maps area.&lt;/li&gt;
&lt;li&gt;Input the map name "SampleMap" in the Name field.&lt;/li&gt;
&lt;li&gt;Select the map in the Maps area. In this case, we select "Esri Light."&lt;/li&gt;
&lt;li&gt;Select "Pricing plan use-case." In this case, we select "Yes" to the first question.&lt;/li&gt;
&lt;li&gt;Push "Create map" at the bottom of the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzrjHg6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc5r70fou1f60vvrlna6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzrjHg6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc5r70fou1f60vvrlna6.png" alt="Create a Map"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#32%E3%80%80create-a-search-index"&gt;
  &lt;/a&gt;
  3.2.　Create a Search index
&lt;/h3&gt;

&lt;p&gt;Continuously, we create a Place index.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the "Search indexes" menu on the left panel.&lt;/li&gt;
&lt;li&gt;And click "Create place index" in the My maps area.&lt;/li&gt;
&lt;li&gt;Input the map name "SamplePlaceIndex" in the Name field.&lt;/li&gt;
&lt;li&gt;Select the data provider in the Data provider area. In this case, we select "Esri."&lt;/li&gt;
&lt;li&gt;Select the data storage option in the Data storage options area. In this case, we select "No, single use only."&lt;/li&gt;
&lt;li&gt;Select "Pricing plan use-case." In this case, we select "Yes" to the first question.&lt;/li&gt;
&lt;li&gt;Push "Create place index" at the bottom of the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6sGppm-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoje6x7d1uac9qcv03n8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6sGppm-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoje6x7d1uac9qcv03n8.png" alt="Create　a Search index"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-set-iam-role"&gt;
  &lt;/a&gt;
  4. Set IAM Role
&lt;/h2&gt;

&lt;p&gt;We have already added the authentication function by Amplify.&lt;br&gt;
However, the IAM role is incomplete. Unable to access previously created location services resources.&lt;br&gt;
Let's add it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to IAM Services and click the Roles menu on the left panel.&lt;/li&gt;
&lt;li&gt;Input "amplify-amplifyamazonlocatio" in the search field.&lt;/li&gt;
&lt;li&gt;Click the role that name ends with "-authRole".&lt;/li&gt;
&lt;li&gt;Click "Add inline policy".&lt;/li&gt;
&lt;li&gt;Select the JSON tab and input below JSON data. (Set your ARN in [MAP_ARN] and [PLACE_INDEX_ARN].)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VisualEditor0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"geo:GetMapGlyphs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"geo:GetMapSprites"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"geo:GetMapStyleDescriptor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"geo:GetMapTile"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;MAP_ARN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VisualEditor1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"geo:SearchPlaceIndexForText"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;PLACE_INDEX_ARN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#5-implement"&gt;
  &lt;/a&gt;
  5. Implement
&lt;/h2&gt;

&lt;p&gt;OK, we can implement a search place and show it on the map.&lt;br&gt;
Please see the repository for code details.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tacck"&gt;
        tacck
      &lt;/a&gt; / &lt;a href="https://github.com/tacck/amplify-amazon-location"&gt;
        amplify-amazon-location
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#51-search-the-location"&gt;
  &lt;/a&gt;
  5.1. Search the location
&lt;/h3&gt;

&lt;p&gt;"Search the location" implementation is like below.&lt;br&gt;
Only use &lt;code&gt;searchPlaceIndexForText&lt;/code&gt;, we can get the place information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tacck/amplify-amazon-location/blob/main/src/components/SearchMap.vue"&gt;&lt;code&gt;src/components/SearchMap.vue&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;IndexName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SamplePlaceIndex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchPlaceIndexForText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Results&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Geometry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Geometry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#52-display-the-location-on-the-map"&gt;
  &lt;/a&gt;
  5.2. Display the location on the map
&lt;/h3&gt;

&lt;p&gt;"Display the location on the map" implementation is like below.&lt;br&gt;
&lt;code&gt;mapInstance&lt;/code&gt; is the object rendering the map.&lt;br&gt;
&lt;code&gt;transformRequest&lt;/code&gt; make a Signed URL for access to the Map resource previously created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tacck/amplify-amazon-location/blob/main/src/components/Map.vue"&gt;&lt;code&gt;src/components/Map.vue&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentCredentials&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;maplibregl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;transformRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transformRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;maplibregl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NavigationControl&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;top-left&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;transformRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resourceType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resourceType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;://&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://maps.geo.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;awsconfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_project_region&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.amazonaws.com/maps/v0/maps/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/style-descriptor`&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazonaws.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Signer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;access_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessKeyId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secretAccessKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;session_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessionToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-take-a-journey"&gt;
  &lt;/a&gt;
  6. Take a journey
&lt;/h2&gt;

&lt;p&gt;We arrive at the final section.&lt;br&gt;
Let's get to the journey!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/G1BclFCVMmw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>vue</category>
      <category>geolocation</category>
    </item>
    <item>
      <title>How to Learn Anything: 5 Simple Tips That Works</title>
      <author>John Wakahiu</author>
      <pubDate>Tue, 08 Jun 2021 13:13:55 +0000</pubDate>
      <link>https://dev.to/jonniwaka/how-to-learn-anything-5-simple-tips-that-works-1mbl</link>
      <guid>https://dev.to/jonniwaka/how-to-learn-anything-5-simple-tips-that-works-1mbl</guid>
      <description>&lt;p&gt;In our quest to achieve success, we end up wasting much time doing things that do not contribute to our success.&lt;/p&gt;

&lt;p&gt;When we want to learn something new, oftentimes, we rush to books and videos.&lt;/p&gt;

&lt;p&gt;Books and videos that are never related to the field we are aiming to learn. Other times you are watching videos that motivate you to get started.&lt;/p&gt;

&lt;p&gt;We always do this not knowing we are on the wrong path. Watching these videos is not bad as a beginner but there is so much to gain when you dive into the exact intent.&lt;/p&gt;

&lt;p&gt;Here are five simple tips for starting any project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Identify Your Goal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The only sure way that I have found to work is actually to go straight to the goal you need to achieve.&lt;/p&gt;

&lt;p&gt;What is your goal and what do you aim to achieve in the future. Have a picture of the kind of work you will be doing 5 years from today.&lt;/p&gt;

&lt;p&gt;Say you want to start a software company. Research on things that go into building a successful software company.&lt;/p&gt;

&lt;p&gt;Now that you have an idea of what you aim to achieve, let us now get those skills that make us stand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Identify Your Skills&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you have the skills to work as a software engineer? What languages do you need to create products for your clients?&lt;/p&gt;

&lt;p&gt;Identify what languages you need to learn. To start selling your services as a professional, you have to learn those languages well.&lt;/p&gt;

&lt;p&gt;Say you settle for a front-end developer, you will need to learn HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;Here is where a surprising number of people make mistakes.&lt;/p&gt;

&lt;p&gt;Searching for motivation.&lt;/p&gt;

&lt;p&gt;People want proof that things have worked for other people. And what do they do? They dive into endless tutorials on the subject matter.&lt;/p&gt;

&lt;p&gt;A little start to get you started might not hurt but it will if you end up moving from one HTML course to another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Start by Doing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Watching YouTube tutorials might seem like your best way to get started. But it might lead you into an endless tutorial hell.&lt;/p&gt;

&lt;p&gt;The best bet would be to make sure you have all the tools you need to get started. Computer or a laptop, IDE, and language documentation.&lt;/p&gt;

&lt;p&gt;That’s all you need actually.&lt;/p&gt;

&lt;p&gt;Start writing your code on day one. You will have moved from a “one day I will…” person to a “today was my day one to…” person.&lt;/p&gt;

&lt;p&gt;Start and see how much you achieve on your first day. If you are stuck, search for solutions on the internet and fix them. There is a high chance that another person faced a similar issue before you.&lt;/p&gt;

&lt;p&gt;This would save you time by checking the available solutions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Blog Your Problems&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you encounter an issue that you cannot find online, find a way to get a solution on your own.&lt;/p&gt;

&lt;p&gt;This may take you time but it is the best way to remember things you learn.&lt;/p&gt;

&lt;p&gt;Document your solution on a blog since it helps you to remember and luckily help another person too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Build a Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use your skills to build a project. The first project may not look great but it will give you satisfaction.&lt;/p&gt;

&lt;p&gt;This way you will be confident of your skills and you will be more marketable. From this, you can keep improving and getting better.&lt;/p&gt;

&lt;p&gt;Then you can create more projects and contribute to open-source projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrapping Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remember, people are looking for solutions. Offer solutions instead.&lt;/p&gt;

&lt;p&gt;No one will ever ask you how motivated you feel after reading the famous fancy guys’ books you see on media.&lt;/p&gt;

&lt;p&gt;Stop wasting time reading their books and attending every other webinar. Get better by doing. Done is always better at the end of the day.&lt;/p&gt;

&lt;p&gt;And while at it, make sure you enjoy the process.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Setting up Google Authentication With Firebase🚀</title>
      <author>Karan Choudhary</author>
      <pubDate>Tue, 08 Jun 2021 13:03:00 +0000</pubDate>
      <link>https://dev.to/karanchoudhary/setting-up-google-authentication-with-firebase-n6i</link>
      <guid>https://dev.to/karanchoudhary/setting-up-google-authentication-with-firebase-n6i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#a-bit-about-me"&gt;
  &lt;/a&gt;
  A Bit About Me
&lt;/h1&gt;

&lt;p&gt;Hey folks👋🏻, I am Karan Choudhary. A frontend developer passionate about web technologies and building things with code💻.&lt;/p&gt;

&lt;p&gt;In this article, we will learn the easiest and the fastest way to setup Google Authentication with Firebase. So without wasting any time, let's get straight into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-firebase-authentication"&gt;
  &lt;/a&gt;
  Why Firebase Authentication?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H730Vywy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebase.google.com/docs/auth/images/auth-providers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H730Vywy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebase.google.com/docs/auth/images/auth-providers.png" alt="firebase"&gt;&lt;/a&gt;&lt;br&gt;
Most apps need to know the identity of a user. Knowing a user's identity allows an app to securely save user data in the cloud and provide the same personalized experience across all of the user's devices.&lt;/p&gt;

&lt;p&gt;Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more.&lt;/p&gt;

&lt;p&gt;Firebase Authentication integrates tightly with other Firebase services, and it leverages industry standards like OAuth 2.0 and OpenID Connect, so it can be easily integrated with your custom backend.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Since we'll be needing some starter files for that. I've published a NPM package for easy build setup. Or else you can just clone the GitHub Repository. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation⚒️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You’ll need to have Node 10.16.0 or later version on your local development machine&lt;/strong&gt;. I recommend using the latest LTS version.&lt;/p&gt;

&lt;p&gt;To create a new app, you may choose one of the following methods:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  npm
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install the package
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i firebase-auth-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create a project using Firebase-Auth-App CLI
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;firebase-auth-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install dependencies
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  git
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Clone the repository
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone git@github.com:itskaranchoudhary/firebase-auth-app.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Change the working directory
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;firebase-auth-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install dependencies
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It will create a directory called &lt;code&gt;firebase-auth-app&lt;/code&gt; inside the current folder.&lt;br&gt;&lt;br&gt;
Inside that directory, it will generate the following project structure and install the required dependencies.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#file-structure"&gt;
  &lt;/a&gt;
  File Structure
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── src/
│   └── assets
│   └── scripts
│   └── styles
│   └──favicon.ico
├── .gitignore
├── firebase.json
├── index.html
├── package-lock.json
└── package.json
├── README.md
├── LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-firebase-project"&gt;
  &lt;/a&gt;
  Creating a Firebase Project
&lt;/h2&gt;

&lt;p&gt;First of all, go to you  &lt;a href="https://console.firebase.google.com/"&gt;firebase console&lt;/a&gt; and Create a new project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZPQjFak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528133%2529.png%3Falt%3Dmedia%26token%3D13a60363-85d2-4cb5-be77-2b37976816c2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZPQjFak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528133%2529.png%3Falt%3Dmedia%26token%3D13a60363-85d2-4cb5-be77-2b37976816c2" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating a project, click on  &lt;strong&gt;Web&lt;/strong&gt;  button to register your web app.  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3rDYs5H7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528134%2529.png%3Falt%3Dmedia%26token%3Df924455a-9a98-4495-a3fc-32be862a16d9" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3rDYs5H7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528134%2529.png%3Falt%3Dmedia%26token%3Df924455a-9a98-4495-a3fc-32be862a16d9" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
Enter the name of your web app and that's it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XJMrlfXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528136%2529.png%3Falt%3Dmedia%26token%3D81b565eb-30da-419d-92cd-2e02b4b7d1db" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XJMrlfXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528136%2529.png%3Falt%3Dmedia%26token%3D81b565eb-30da-419d-92cd-2e02b4b7d1db" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enabling-google-authentication"&gt;
  &lt;/a&gt;
  Enabling Google Authentication
&lt;/h2&gt;

&lt;p&gt;Since you have added the web app, enable the Google Sign-Up Method under the &lt;code&gt;Authentication/Sign-In Method/Sign-In Providers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qou5Hu4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528128%2529.png%3Falt%3Dmedia%26token%3Dc004aaad-3a8f-4f17-b725-fb86a58b6787" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qou5Hu4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528128%2529.png%3Falt%3Dmedia%26token%3Dc004aaad-3a8f-4f17-b725-fb86a58b6787" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-the-authorized-domain"&gt;
  &lt;/a&gt;
  Adding the Authorized Domain
&lt;/h2&gt;

&lt;p&gt;Since Firebase Auth doesn't work with live server. You'll have to manually add the domain you would be deploying your app to. &lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;Authentication/Sign-In Method/Authorized Domains&lt;/code&gt;add your domain. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NaqdgOXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528131%2529.png%3Falt%3Dmedia%26token%3Da3819431-0098-40c3-a67f-4be041c94b30" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NaqdgOXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528131%2529.png%3Falt%3Dmedia%26token%3Da3819431-0098-40c3-a67f-4be041c94b30" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#firebase-config"&gt;
  &lt;/a&gt;
  Firebase Config
&lt;/h2&gt;

&lt;p&gt;Now, go to  &lt;strong&gt;Project Settings &amp;gt; SDK Setup and Configuration&lt;/strong&gt;  to get your  &lt;code&gt;firebaseConfig&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C12ipQ-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528140%2529.png%3Falt%3Dmedia%26token%3Db80615bf-d03d-41f3-b03b-2f4a6f3caa48" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C12ipQ-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528140%2529.png%3Falt%3Dmedia%26token%3Db80615bf-d03d-41f3-b03b-2f4a6f3caa48" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var firebaseConfig = {
    apiKey: "API_KEY",
    authDomain: "PROJECT_ID.firebaseapp.com",
    databaseURL: "https://PROJECT_ID.firebaseio.com",
    projectId: "PROJECT_ID",
    storageBucket: "PROJECT_ID.appspot.com",
    messagingSenderId: "SENDER_ID",
    appId: "APP_ID",
    measurementId: "G-MEASUREMENT_ID",
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the config and paste it into &lt;code&gt;index.html &amp;gt; script tag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🌟 You are all set!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-app"&gt;
  &lt;/a&gt;
  Testing the App
&lt;/h2&gt;

&lt;p&gt;To test the app, we need to deploy it to the domain we have added in the firebase console. &lt;/p&gt;

&lt;p&gt;Since, I have already deployed my app. I can visit &lt;a href="https://friendlychatapp.netlify.app"&gt;https://friendlychatapp.netlify.app&lt;/a&gt; to check if the authentication is working properly or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfn7jw4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528145%2529.png%3Falt%3Dmedia%26token%3Da725f12f-2140-42cf-b3b4-65bb1f8d2312" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfn7jw4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528145%2529.png%3Falt%3Dmedia%26token%3Da725f12f-2140-42cf-b3b4-65bb1f8d2312" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
And it seems like everything is working fine.✔&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJ-gaKhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528146%2529.png%3Falt%3Dmedia%26token%3Dd93f2edd-1b1b-403d-a8bf-79266acfcf7d" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJ-gaKhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528146%2529.png%3Falt%3Dmedia%26token%3Dd93f2edd-1b1b-403d-a8bf-79266acfcf7d" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
Now, go to &lt;a href="https://console.firebase.google.com/"&gt;firebase console&lt;/a&gt; and open up your firebase project and go to &lt;strong&gt;Authentication &amp;gt; Users&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqnTymaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528147%2529.png%3Falt%3Dmedia%26token%3Dd7416d4a-e412-487d-964d-34ab5421b10a" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqnTymaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528147%2529.png%3Falt%3Dmedia%26token%3Dd7416d4a-e412-487d-964d-34ab5421b10a" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
We can see a that a new user is added✨.&lt;/p&gt;

&lt;p&gt;Let's do another check by logging the user details in the console using &lt;code&gt;console.log()&lt;/code&gt;&lt;br&gt;
Copy and paste the following code in the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var user = firebase.auth().currentUser;
var name, email, photoUrl, uid, emailVerified;

if (user != null) {  
    name = user.displayName;  
    email = user.email;  
    photoUrl = user.photoURL;  
    emailVerified = user.emailVerified;  
    uid = user.uid;  // The user's ID, unique to the Firebase project. 
    }

console.log(name, email, uid);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is right it should log my details in the console. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3DCWWpdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528148%2529.png%3Falt%3Dmedia%26token%3Dca41b27f-31bc-4468-902e-ea3415555dea" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3DCWWpdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528148%2529.png%3Falt%3Dmedia%26token%3Dca41b27f-31bc-4468-902e-ea3415555dea" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
That's pretty much it! Congratulations. You've just setup Google Authentication using Firebase🥳&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;So that's it. Hope you enjoyed the article. Feel free to share your thoughts in the comment section below. Any feedback is greatly appreciated.&lt;/p&gt;

&lt;p&gt;Feel free to the check out my GitHub: &lt;a href="https://github.com/itskaranchoudhary"&gt;https://github.com/itskaranchoudhary&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Star the repo⭐: &lt;a href="https://github.com/itskaranchoudhary/firebase-auth-app"&gt;https://github.com/itskaranchoudhary/firebase-auth-app&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Find the NPM Package here: &lt;a href="https://www.npmjs.com/package/firebase-auth-app"&gt;https://www.npmjs.com/package/firebase-auth-app&lt;/a&gt;&lt;/p&gt;




</description>
      <category>firebase</category>
      <category>authentication</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
