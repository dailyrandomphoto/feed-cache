<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Google Efficiently?
</title>
      <author>FOSS@Amrita</author>
      <pubDate>Mon, 15 Nov 2021 06:22:04 +0000</pubDate>
      <link>https://dev.to/amfoss_in/how-to-google-efficiently-264e</link>
      <guid>https://dev.to/amfoss_in/how-to-google-efficiently-264e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt; ü™ß
&lt;/h2&gt;

&lt;p&gt;Everyone uses Google search at least once a day but most people may not be utilizing Google search to its full potential. If you want to learn how to use Google search more efficiently and get relevant and useful results as you want then you are at the right place. So here we start üôÇ&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimize-google-search-guesswork"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Minimize Google search guesswork&lt;/strong&gt; ü§î
&lt;/h3&gt;

&lt;p&gt;Using quotes, one can minimize the guesswork of google search. For example: Suppose if you searched for &lt;strong&gt;"Flutter based projects"&lt;/strong&gt; then google will also give the search results for individual words such as &lt;strong&gt;'Flutter'&lt;/strong&gt; but will not be doing this when you use the whole search text inside quotes and they will be considered as a single search and results will be given only for whole text searched and not for individual words.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tell-google-search-what-to-exclude-from-the-search-result"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Tell Google search what to exclude from the search result&lt;/strong&gt; üòé
&lt;/h3&gt;

&lt;p&gt;Hyphens are a great way to exclude alternate meanings of a word. For example, if you intend to find more information on the popular Python distribution, Anaconda, you would not prefer having Google telling you more about a snake.&lt;br&gt;
Hence, to make your search more specific, you can use hyphens like this.&lt;br&gt;
anaconda -snake&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-tell-google-search-where-to-search-a-particular-text"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Can tell Google Search where to search a particular text&lt;/strong&gt; üßê
&lt;/h3&gt;

&lt;p&gt;To search for something on a particular site, use the following format:-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;\text to search&amp;gt;:siteURL&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if you want to search Python functions on StackOverflow, you would enter the following in the search bar,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;\Python functions&amp;gt;:&lt;a href="http://www.stackoverflow.com"&gt;www.stackoverflow.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-asterisk-wildcard"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Use asterisk wildcard&lt;/strong&gt; ‚ú≥Ô∏è
&lt;/h3&gt;

&lt;p&gt;Use an asterisk to let google fill the spaces between text. For example, suppose if you forgot some Linux commands and remember just some part of it then you can fill the spaces you are not sure about with an asterisk and let google do its job.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stop-words-and-the-where-how-what-or"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STOP WORDS (AND, THE, WHERE, HOW, WHAT, OR)&lt;/strong&gt; ‚ùó
&lt;/h3&gt;

&lt;p&gt;Using keywords would make a difference, but that doesn't include smaller words like "the", "and", "where", "how", "what", and "or".  Google ignores these words because they basically just slow down your search. If you need to use a stop word in your search, you can override Google's rule by adding a "+" in front of the stop word with a space before it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-other-common-shortcuts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Some other common shortcuts&lt;/strong&gt; ‚è©
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-related"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Related&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The shortcut related can be used to search for a website related to a particular website.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eg:  related:djangoproject.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#2-or"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. OR&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This shortcut can be used to search multiple words at once.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eg: "The best way to learn competitive programming" OR "Competitive programming tutorials"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#3-define"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Define&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This will display the definition of a word.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eg: Define: hackathons&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#4-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Time&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This will display the time of whatever place you want.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eg: Time Silicon Valley&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now the above tips were enough to know the basics hacks (there are many more though) of google searching now we can get into general tips,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Keep the things simple:&lt;/strong&gt; üí°

Describing each and everything about what you are searching for is not recommended. Believe that Google is intelligent enough to guess things and try to search for minimum basic. Like instead of typing a whole question to search for, just the main phrase of the question can be searched.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be intelligent in navigating the search results:&lt;/strong&gt; üéØ

Sometimes we have to be intelligent enough from our side also to get a result that we wished to from the search results returned by google. This is the case mostly when you are using google search to debug an error you might have encountered. For example, suppose you wanted to debug a ubuntu installation error then instead of navigating to random sites first StackOverflow or ubuntu official support website should be looked into.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-this-article%EF%B8%8F"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thanks for reading this articleüòäÔ∏è&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Feel free &lt;strong&gt;Follow&lt;/strong&gt; üö∂Ô∏èüö∂‚Äç‚ôÄÔ∏èÔ∏è us on our social media handles &lt;a href="https://www.instagram.com/amfoss.in/"&gt;Instagram&lt;/a&gt; or &lt;a href="https://twitter.com/amfoss_in?ref_src=twsrc%5Etfw"&gt;Twitter&lt;/a&gt; to connect with us and share this article with your friends üë¨Ô∏è and family üë®‚Äçüë©‚Äçüëß‚Äçüë¶Ô∏è.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#happy-coding%EF%B8%8F"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Happy Coding&lt;/strong&gt;üë®‚ÄçüíªÔ∏è
&lt;/h3&gt;

</description>
      <category>productivity</category>
      <category>google</category>
      <category>beginners</category>
      <category>search</category>
    </item>
    <item>
      <title>Every JavaScript Developer should Know this....(Part 1)</title>
      <author>#im_Bshubh</author>
      <pubDate>Mon, 15 Nov 2021 05:57:32 +0000</pubDate>
      <link>https://dev.to/shubham57396755/every-javascript-developer-should-know-thispart-1-821</link>
      <guid>https://dev.to/shubham57396755/every-javascript-developer-should-know-thispart-1-821</guid>
      <description>&lt;p&gt;Before going to Developer path in JavaScript every future developer should acquire these concepts like Objects,Class,ES6. Below are some core concepts which we are going to learn starting from scratch.&lt;/p&gt;

&lt;p&gt;1.Objects&lt;br&gt;
In JavaScript, an object is an collection of key-value pairs. Each key-value pair is called a property also  object is a standalone entity, with properties and type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AGJ9RdWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tze2y3mma6xq90drt7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGJ9RdWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tze2y3mma6xq90drt7x.png" alt="Image description" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key of a property can be a string and the value of a property can be JavaScript value e.g., a string, a number, an array, and even a function.&lt;/p&gt;

&lt;p&gt;Different way to create Objects:&lt;br&gt;
In JavaScript, there are four methods to use to create an object:&lt;/p&gt;

&lt;p&gt;a. Object Literals.&lt;br&gt;
b. New operator or constructor.&lt;br&gt;
c. Object.create method.&lt;br&gt;
d. Class&lt;/p&gt;

&lt;p&gt;i.Object Literals:&lt;br&gt;
Object Literals are more convenient way to define objects.we need to simple define the property and values inside the brackets as shown below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OmYyHY4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vrfj6ru8arpcsgareh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OmYyHY4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vrfj6ru8arpcsgareh8.png" alt="Image description" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ii.New operator or constructor.&lt;br&gt;
The another way to create an object is to use the constructor function. Here we are calling a function using a new operator, the function will acts as a constructor and returns an new object. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IL56bF8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8oqqbk96yqsj0yosqdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IL56bF8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8oqqbk96yqsj0yosqdw.png" alt="Image description" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iii.Object.create method&lt;br&gt;
The third way where we can also create new objects using the Object.create() method&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rI1VZ45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s38npcugynay73emj2d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rI1VZ45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s38npcugynay73emj2d.png" alt="Image description" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iv.Class&lt;br&gt;
ES6 is a new standardized version of JavaScript that was released in 2015. ES6 has many new features that can help a developer to understand and write code efficiently and effectively. The class keyword to create classes in JavaScript. Now we can use the class attribute to create a class in JavaScript rather than other ways like function constructor, and we can utilize "new" operator to create an instance of that class with ease.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUueNqpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ebcumesiq4jpvc7wng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUueNqpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ebcumesiq4jpvc7wng.png" alt="Image description" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see we have Blog class in which we have getblogDetails() method which we will be calling on after creating instance of Blog class. This is best way to create object in JavaScript and used in many JavaScript pattern.&lt;/p&gt;

&lt;p&gt;2.Functions in JavaScript&lt;br&gt;
Functions are the most crucial  part of JavaScript programming. Functions are a set of statements that are used to performs a certain task. It gives us a way to structure larger programs, to reduce repetition, to associate names with subprograms, and to isolate these subprograms from each other.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#defining-a-function"&gt;
  &lt;/a&gt;
  Defining a function
&lt;/h1&gt;

&lt;p&gt;function definition tells about a function's name, return type, and parameters. A function definition provides the actual body of the function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nJxX4eco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1acw476ri57yofmocg6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJxX4eco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1acw476ri57yofmocg6e.png" alt="Image description" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript function is created using keyword "function" suffix with function_name. Functions have a set of parameters and a body, which includes the instruction or operations  that are to be executed when the function is called inside the program.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build Responsive Dashboard Using JavaScript HTML CSS </title>
      <author>fahim kabir</author>
      <pubDate>Mon, 15 Nov 2021 04:49:47 +0000</pubDate>
      <link>https://dev.to/fahimkabir/build-responsive-dashboard-using-javascript-html-css-1e9n</link>
      <guid>https://dev.to/fahimkabir/build-responsive-dashboard-using-javascript-html-css-1e9n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#using-html-css-amp-javascript-we-can-create-a-professional-looking-responsive-dashboard-admin-page"&gt;
  &lt;/a&gt;
  Using HTML CSS &amp;amp; JavaScript, we can create a professional looking responsive dashboard admin page.
&lt;/h2&gt;

&lt;p&gt;This &lt;strong&gt;responsive dashboard&lt;/strong&gt; will have sidebar for all the menus &amp;amp; a interface for detailed view. The sidebar will be hidden in smaller devices &amp;amp; will have a toggle menu bar to enable the sidebar. Pretty cool right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lets create a responsive eye catching dashboard using HTML CSS &amp;amp; JS.&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/g6HqL18plx4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;More JavaScript?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecommerce-product-search-engine-using-javascript"&gt;
  &lt;/a&gt;
  Ecommerce Product Search Engine Using JavaScript.
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZFUOC-y4i0s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#responsive-testimonials-slider-with-javascript"&gt;
  &lt;/a&gt;
  Responsive Testimonials Slider With JavaScript.
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5cO5Xf4QVPY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Previous Posts:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/fahimkabir" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKX2P2LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8_Vu5jyt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/642043/5a98e096-84fd-4f50-a9f6-10caf87d9fa2.png" alt="fahimkabir"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fahimkabir/9-responsive-website-tutorials-with-html-css-javascript-bootstrap-step-by-step-56ng" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;9 Html CSS JavaScript Bootstrap Website Tutorial Step By Step&lt;/h2&gt;
      &lt;h3&gt;fahim kabir „Éª Jun 15 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/fahimkabir" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKX2P2LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8_Vu5jyt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/642043/5a98e096-84fd-4f50-a9f6-10caf87d9fa2.png" alt="fahimkabir"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fahimkabir/7-javascript-projects-for-beginners-d3m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;8 JavaScript Projects For Beginners&lt;/h2&gt;
      &lt;h3&gt;fahim kabir „Éª Jun 11 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/fahimkabir" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKX2P2LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8_Vu5jyt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/642043/5a98e096-84fd-4f50-a9f6-10caf87d9fa2.png" alt="fahimkabir"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fahimkabir/15-python-projects-for-beginners-4j4f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;15 Python Projects For Beginners&lt;/h2&gt;
      &lt;h3&gt;fahim kabir „Éª Jun 12 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#resume&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Feel free to visit my YouTube channel:&lt;br&gt;
&lt;a href="//www.youtube.com/tech2etc"&gt;@Tech2etc&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow me on Instagram where I'm sharing lots of useful resources!&lt;br&gt;
&lt;a href="https://www.instagram.com/fahimkabir.hamim/"&gt;@fahimkabir.hamim&lt;/a&gt; üòâ&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>40+ Nodejs Projects for Beginners ‚Äì Easy Ideas to Get Started Coding Nodejs [Beginners - Advance]</title>
      <author>Jarvis</author>
      <pubDate>Mon, 15 Nov 2021 04:39:09 +0000</pubDate>
      <link>https://dev.to/jvscode/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-2ah1</link>
      <guid>https://dev.to/jvscode/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-2ah1</guid>
      <description>&lt;p&gt;If you have decided to build your career in¬†&lt;span&gt;NodeJS¬†&lt;/span&gt;development, we have gathered a list of¬†&lt;span&gt;nodeJS projects for beginners&lt;/span&gt;¬†for all node enthusiasts to build highly scalable¬†&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best¬†&lt;span&gt;nodeJS projects for beginners&lt;/span&gt;¬†will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it‚Äôs highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn¬†&lt;em&gt;git&lt;/em&gt;¬†and show your coding expertise to future employers.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;40+ Nodejs Projects for Beginners ‚Äì Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt;¬†&lt;/p&gt;






</description>
    </item>
    <item>
      <title>Task Management Web App UI Kit</title>
      <author>Mahfuzul Islam Nabil</author>
      <pubDate>Mon, 15 Nov 2021 04:35:01 +0000</pubDate>
      <link>https://dev.to/mahfuzulnabil/task-management-web-app-ui-kit-7fl</link>
      <guid>https://dev.to/mahfuzulnabil/task-management-web-app-ui-kit-7fl</guid>
      <description>&lt;p&gt;Introducing Trim - - a premium UI kitüî•. Trim is a task management web app UI kit that lets you easily create and monetize all your work. With unlimited projects and unlimited collaborators, This product lets you control your team.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kktlG6aW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a7pnw10w5k4x2cys3tc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kktlG6aW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a7pnw10w5k4x2cys3tc.jpg" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.uihut.com/web-app-designs/task-management-web-app-ui-kit/17253"&gt;https://www.uihut.com/web-app-designs/task-management-web-app-ui-kit/17253&lt;/a&gt;&lt;br&gt;
With Trim, you can easily organize your teamwork, manage to-do's and tasks, assign projects to your clients and staff, monitor workflow progress. üòç&lt;/p&gt;

&lt;p&gt;Black Friday Offerüí•üí•&lt;br&gt;
Download 15000+ Design Resources&lt;br&gt;
Get Lifetime Access only $99&lt;br&gt;
Use "nab10" coupon for extra 10% OFF.&lt;br&gt;
Enjoyüòçüòç&lt;/p&gt;

</description>
      <category>taskmanagement</category>
      <category>webapp</category>
      <category>projectmanagement</category>
      <category>uikit</category>
    </item>
    <item>
      <title>Pre-planning Your Project</title>
      <author>Toby Parent</author>
      <pubDate>Mon, 15 Nov 2021 04:08:54 +0000</pubDate>
      <link>https://dev.to/parenttobias/pre-planning-your-project-4fd5</link>
      <guid>https://dev.to/parenttobias/pre-planning-your-project-4fd5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-why"&gt;
  &lt;/a&gt;
  The Why
&lt;/h2&gt;

&lt;p&gt;I mentor at a few different online courses, and a common theme I've noticed across quite a few of them is an odd "gap" in the training. &lt;/p&gt;

&lt;p&gt;Some courses are a great introduction. They tend to do a great job introducing the "Web 101" stuff, the basics of HTML, CSS and javascript, and then there are some lessons about advanced data structuring in javascript or basic DOM manipulation. Then they get into things like frameworks and libraries.&lt;/p&gt;

&lt;p&gt;Others are a solid full-spectrum, providing a stream of resources and references, working through from introductory HTML, CSS and javascript through using them together to build small projects, and building up to those frameworks, just as above.&lt;/p&gt;

&lt;p&gt;But both approaches, while great in terms of sheer information, lack something that strikes me as vital. I'm hoping to start addressing some of that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-what"&gt;
  &lt;/a&gt;
  The What
&lt;/h2&gt;

&lt;p&gt;It seems to me that a significant missing piece is "starting to think more like a developer." We are teaching some valuable coding skills, and regardless of which approach, the technical resources are great. &lt;/p&gt;

&lt;p&gt;But there's a difference between simply &lt;em&gt;coding&lt;/em&gt;, and &lt;em&gt;developing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding&lt;/strong&gt; is, to my mind, sitting down at the keyboard and actually writing the code. The stuff that we are teaching. It is not only teachable, but its replicable. We can guide folks through the same series of steps, and they can find a similar way through those steps each time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developing&lt;/strong&gt; is a bit different. Before I sit down in front of my editor to put on my coder hat, I should already be wearing that developer hat. When I am presented a spec, thoughts should already be percolating, bubbling up, considering the best strategy to approach the problem.&lt;/p&gt;

&lt;p&gt;Coders think in code. Developers think in patterns. And &lt;em&gt;that&lt;/em&gt;, it seems to me, is where I want to spend some time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-how"&gt;
  &lt;/a&gt;
  The How
&lt;/h2&gt;

&lt;p&gt;As a developer, I need to think about a few different things. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I need to stay aware of the big-picture;&lt;/li&gt;
&lt;li&gt;I need to be aware of the moving parts;&lt;/li&gt;
&lt;li&gt;I need to be constantly thinking about the data my project manipulates &lt;em&gt;(the state)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's consider a concrete example, and one common to most courses: &lt;strong&gt;Building a calculator in HTML, CSS and JS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As soon as a coder sees that, they're likely to be planning out their HTML, or figuring how to fire off button events, or thinking in code.&lt;/p&gt;

&lt;p&gt;As soon as a developer sees that, while they might be considering code at some level, they're more likely to be thinking about the parts that make up the whole, and how they interact.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good development is about planning&lt;/strong&gt;. I spoke last time about the three original tenets of OO, &lt;em&gt;Encapsulation&lt;/em&gt;, &lt;em&gt;Communication&lt;/em&gt; and &lt;em&gt;Late Instantiation&lt;/em&gt;, and good developers think about those things first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how can I encapsulate my parts so they don't interfere with each other?&lt;/li&gt;
&lt;li&gt;how can I enable my parts to communicate with each other, so each can respond appropriately?&lt;/li&gt;
&lt;li&gt;how can I make my parts reusable, and create more as I need them?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#developing-the-calculator"&gt;
  &lt;/a&gt;
  Developing the Calculator.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPoLwRnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnakdx7ytpx52rhlo4gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPoLwRnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnakdx7ytpx52rhlo4gu.png" alt="A simple calculator" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we look at that, there are three main bits to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A display;&lt;/li&gt;
&lt;li&gt;A keypad;&lt;/li&gt;
&lt;li&gt;A container holding the parts together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a developer, I think about those parts. I often start with a high-level brain-dump of my ideas, and refine from there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Components of a calculator:
  * Display
    * Upper display showing entire 
      operation until equals?
    * Lower display showing current number
  * Keypad containing different types of keys
    * Numbers
    * Operators
    * Equals (still an operator, but
      special case?)
    * Special Keys 
      (C/AC/Backspace of some sort)
  * Container or Manager
    * Operations Stack
      Not necessarily a displayed
      component, but important.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a birds-eye view of the components of the calculator, and really, that's about it. There isn't much to it, when you break it down. But if we were to dive in and try to code it without a starting plan, we'd likely be quickly stuck.&lt;/p&gt;

&lt;p&gt;Next, we look at the parts. The components list above is a good representation of the &lt;em&gt;encapsulation&lt;/em&gt; we want - the display should be self-contained, the keypad should as well, and the calculator container should encapsulate them both.&lt;/p&gt;

&lt;p&gt;The next step is to think about &lt;em&gt;communication&lt;/em&gt;. How can the parts talk to each other?&lt;/p&gt;

&lt;p&gt;This is planning out an &lt;em&gt;interface&lt;/em&gt;, and to my mind is one of the more fun parts of developing. I am creating this thing, I am defining the "language" we use to talk to it, and I can "wish-list" whatever verbs I like here!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-display"&gt;
  &lt;/a&gt;
  The Display
&lt;/h4&gt;

&lt;p&gt;The display is easy enough: it might maintain its own internal &lt;em&gt;state&lt;/em&gt; or display logic, but that isn't what we should be thinking about just yet. At this point, &lt;em&gt;how do we want to talk to the display, and is there anything it needs to tell us in return?&lt;/em&gt; We might want to tell the display to update, for example, by passing in a single character of some sort. Or we might want to tell the display to clear part or all of the display. Let's start small:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Display interface:
  * update(string)
    display the given string
  * reset()
    clear the entire display
  * value
    maybe a way to get back the currently
    displayed value?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think that'll do for a start. We aren't &lt;em&gt;bound&lt;/em&gt; to that, if later we want to modify that interface, we can, but at the planning stage, that might work well.&lt;/p&gt;

&lt;p&gt;Let's move on to the keypad.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-keypad"&gt;
  &lt;/a&gt;
  The Keypad
&lt;/h4&gt;

&lt;p&gt;Thinking about the communication from the keypad, things are pretty simple: we want to know if a key has been pressed, maybe the type of the key, and maybe the value of it. We could easily do this with HTML, CSS and JS, and I &lt;strong&gt;know&lt;/strong&gt; more than a few of you are thinking about event delegation, having the keypad container listening for clicks on the child buttons and... &lt;/p&gt;

&lt;p&gt;And you're right. We can do that. It's easy to get excited and to think ahead, and it's totally okay. It means we might be working on a good &lt;em&gt;pattern&lt;/em&gt;, because it's easier to see the components and how to make them go!&lt;/p&gt;

&lt;p&gt;But still, let's slow down. We don't know what keys we might have in the keypad, and again, we might like to &lt;em&gt;encapsulate&lt;/em&gt; the behaviors here.  So we think again: How do we want to talk to this keypad? Do we have anything we &lt;em&gt;need&lt;/em&gt; to tell it? And how does the keypad talk back to us? Let's start with the known:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Keypad Interface
  * when a key is clicked, emit a notification.
    Indicate the type and value of the key.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the interface &lt;em&gt;will&lt;/em&gt; likely be the javascript events API, but we should keep an open mind.&lt;/p&gt;

&lt;p&gt;Note that we haven't &lt;em&gt;coded&lt;/em&gt; anything yet. We have simply defined our components, and we have started talking about their communication paths. In the container, we might start thinking differently, and even start thinking in code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-container"&gt;
  &lt;/a&gt;
  The container.
&lt;/h4&gt;

&lt;p&gt;The display and the keypad are &lt;em&gt;sibling&lt;/em&gt; components. Usually, they wouldn't know about each other. Done well, each part will work on its own without requiring the other, but allowing communication in and out.&lt;/p&gt;

&lt;p&gt;That matters, because the container acts as the manager of those smaller components. It can handle communication from the keypad, and can notify the display about those communications.&lt;/p&gt;

&lt;p&gt;The manager is the &lt;em&gt;consumer&lt;/em&gt; of those components' interfaces. It uses the defined paths to facilitate communications, and might provide an interface of its own. At this point, it &lt;em&gt;won't&lt;/em&gt;, but it could.&lt;/p&gt;

&lt;p&gt;What it will do, though, is contain one more piece that neither of the others have. Neither the display nor the keypad have a true "state", in that they don't really need to track anything. The keypad passes a click notification, but it doesn't keep that event. The display updates itself on command, but it likely doesn't keep data about the data its been passed.&lt;/p&gt;

&lt;p&gt;The container acts as a manager, not only of the components, but of the &lt;em&gt;state&lt;/em&gt; of the calculator. In the comonents list above, the only entry under the container was the &lt;code&gt;Operations Stack&lt;/code&gt;, which represents the state of the calculator internally.&lt;/p&gt;

&lt;p&gt;But rather than outline the interface the container provides, now's the time to think about how the container handles internal communications:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Container Interface
  * Keypad events:
    * update the Operations Stack as needed,
    * notify the Display as needed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's really it - calculators are a largely one-directional application. A key is clicked, the internal state is updated, and we tell the display to update itself. &lt;/p&gt;

&lt;p&gt;Some particular applications or user stories might be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* User clicks '9','4','.','3','+'
  - at each click, the Operations Stack 
    (the state) is updated by appending;
  - and the Display is updated with each digit,
    or cleared when an operator is pressed.
* User then clicks '3','='
  - the Operations Stack should append the
    digit, and then collapse to a single 
    value for the equals;
  - the Display is updated with the final value.  
* User clicks "AC"
  - the Operations Stack should be emptied;
  - the display should be cleared.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we can see each component part, and how it encapsulates its own functionality. We can also see ways in which those parts can communicate (an &lt;em&gt;interface&lt;/em&gt;), allowing them to interact. By taking the time to pre-plan, by moving from being a &lt;strong&gt;coder&lt;/strong&gt; to a &lt;strong&gt;developer&lt;/strong&gt;, we save ourselves time and aggravation later.&lt;/p&gt;

&lt;p&gt;It is common to &lt;em&gt;refactor&lt;/em&gt; our projects, to revisit and post-mortem after completion - but its just as important that we &lt;em&gt;pre-factor&lt;/em&gt; our projects, designing and developing with intent.&lt;/p&gt;

&lt;p&gt;Next time, we'll start coding our component parts, building to a completed calculator project.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To: Build A Simple Search Bar in JavaScript</title>
      <author>Adriana DiPietro</author>
      <pubDate>Mon, 15 Nov 2021 03:35:15 +0000</pubDate>
      <link>https://dev.to/am20dipi/how-to-build-a-simple-search-bar-in-javascript-4onf</link>
      <guid>https://dev.to/am20dipi/how-to-build-a-simple-search-bar-in-javascript-4onf</guid>
      <description>&lt;p&gt;Hi Everyone!&lt;/p&gt;

&lt;p&gt;Today, we will be walking through how to build a functional, yet very simple search bar in JavaScript. This mini project will also utilize CSS and HTML. &lt;/p&gt;

&lt;p&gt;üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠&lt;/p&gt;

&lt;p&gt;Let's look at our goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#base"&gt;Creating Base Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#HTML-base"&gt;Building out the Basics of the HTML File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#data"&gt;Creating Simple Data&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#event-listeners"&gt;Establishing Event Listeners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#results"&gt;Showing Results on the Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clear-results"&gt;Clearing Results from the Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#no-results"&gt;Showing No Results/Invalid Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test"&gt;Testing Our Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we have a clear outline of what we need to achieve... let's get started!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#creating-base-files"&gt;
  &lt;/a&gt;
  Creating Base Files&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Remember: this is a simple project. You may want to add and embellish this as you want. But for today's needs, we will only need three (3) files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;index.js&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;style.css&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have one (1) JavaScript file which will hold our event listeners, functions, variable declarations + assignments, and our basic data.&lt;/p&gt;

&lt;p&gt;We have one (1) HTML file which will hold our DOM elements and portray our code in a visible format onto the web page. &lt;/p&gt;

&lt;p&gt;And we have one (1) CSS file which we will use to style our HTML elements and add some flair + creativity. &lt;/p&gt;

&lt;p&gt;You can create these files directly in your code editor(by right clicking and choosing "new file" or using the new file button) or in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.html
touch index.js
touch style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#building-out-the-basics-of-html"&gt;
  &lt;/a&gt;
  Building out the Basics of HTML&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I usually utilize the standard pattern of HTML5 to get started; it looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Search Bar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the title tags, you may name your project anything you would like. This is not necessarily visible on the browser page, but visible as the tab label on your browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Search Bar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two (2) important things to initially add (and by initially, I mean &lt;strong&gt;right away&lt;/strong&gt;!) are the necessary &lt;strong&gt;link&lt;/strong&gt; and &lt;strong&gt;script tags&lt;/strong&gt;. Get into the practice of adding a link tag of style.css file and a script tag of your index.js file as you begin to build out your HTML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The stylesheets should go in the head tag portion of your HTML file. This tag allows whatever styling you program in your CSS file to appear visibly on the browser. &lt;/p&gt;

&lt;p&gt;While the script tag to your JavaScript file should go in the body tag. It is common to put it toward the bottom. It is important to connect your HTML file with any of your JS files. Your JS files will reference DOM elements from your HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will need some elements nested in the body of our HTML. We will definitely need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a form element with an input field&lt;/li&gt;
&lt;li&gt;a "clear" button to clear our results&lt;/li&gt;
&lt;li&gt;an unordered list element to hold our results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"search..."&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"clear"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"clear-results"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;clear&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"results-container&amp;gt;
       &amp;lt;ul class="&lt;/span&gt;&lt;span class="na"&gt;results-list&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

       &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

       &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With each element, provide a "class" name and/or "id". Make sure the class names or id names reflect what the element is doing or providing. &lt;/p&gt;

&lt;p&gt;From outside-in, I created a div element called "form-container"; this is a regular standard in JavaScript. We want our different sections, that have specific roles, to be nested in their own containers. So, our form container contains the form and the adjacent buttons. Then, we have another div called "results-container", this will hold our results. &lt;/p&gt;

&lt;p&gt;Within our form container, I created a form element. This holds our succeeding form elements. I created an input tag with a type of "text". This allows the user to type inside the input form. I also provided a class name, id and a placeholder. I then created a "submit" button with a type of "submit"; this button also has a class name. The text between the button tags will showcase "search" on the button in the browser. The same idea goes for the "clear" button. &lt;/p&gt;

&lt;p&gt;Our browser should look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LENnZ2aJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg7hwe30paoeu6l15a6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LENnZ2aJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg7hwe30paoeu6l15a6z.png" alt="search bar" width="698" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, our HTML file is set: let's continue onto our JavaScript file. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#creating-simple-data"&gt;
  &lt;/a&gt;
  Creating Simple Data &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since we are not referencing an API, as this is a simple project, we are going to create some simple data to be rendered onto the page as search results. Head into your index.js file. &lt;/p&gt;

&lt;p&gt;I like to create data using JavaScript nested arrays. For today's example, our data is going to be people's names. So our array is going to be called "people".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each array item is going to be an object --- meaning each array item is going to have a property and value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adri&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;becky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dillon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;evan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;georgette&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hugh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;igor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jacoby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kristina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lemony&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;matilda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ophelia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;patrick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quincy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;roslyn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;solene&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timothy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wyatt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yadri&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is our simple data! Feel free to create an array of food, colors, TV shows... anything you want!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#establishing-event-listeners"&gt;
  &lt;/a&gt;
  Establishing Event Listeners &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We have to establish two (2) event listeners. An event listener waits for an event to happen (a "click", a "keystroke", "input") and then invokes an action. In this case, we need to have something happen when input is typed into the input form and when the clear button is clicked. In JavaScript, event listener syntax looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;whateverElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;event type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, for our input form to have an event listener attached to it, I am going to use a querySelector to retrieve the button by its class name and set it to a constant (so that it can be used later).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am now going to attach the event listener to the constant we declared and assigned:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;searchInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// inside, we will need to achieve a few things:&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. declare and assign the value of the event's target to a variable AKA whatever is typed in the search bar&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;// 2. check: if input exists and if input is larger than 0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// 3. redefine 'value' to exclude white space and change input to all lowercase&lt;/span&gt;
         &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// 4. return the results only if the value of the search is included in the person's name&lt;/span&gt;
        &lt;span class="c1"&gt;// we need to write code (a function for filtering through our data to include the search input value)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 5. return nothing&lt;/span&gt;
        &lt;span class="c1"&gt;// input is invalid -- show an error message or show no results&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create a foundation for the clear button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clearButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;clearButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. write a function that removes any previous results from the page&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#showing-results-on-the-page"&gt;
  &lt;/a&gt;
  Showing Results on the Page &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To show our results, we have to ultimately iterate through our simple data and if any of the data matches the input value, then append the data to the page (visibly). &lt;/p&gt;

&lt;p&gt;Let's create a function that first appends the results to the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creating and declaring a function called "setList"&lt;/span&gt;
&lt;span class="c1"&gt;// setList takes in a param of "results"&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// creating a li element for each result item&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// adding a class to each item of the results&lt;/span&gt;
        &lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// grabbing the name of the current point of the loop and adding the name as the list item's text&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// appending the text to the result item&lt;/span&gt;
        &lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// appending the result item to the list&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that we have written &lt;strong&gt; how to &lt;/strong&gt; append the results to the page; we need to focus on figuring out what &lt;strong&gt;should be&lt;/strong&gt; appended to the page. &lt;/p&gt;

&lt;p&gt;If we go back to our event listener, we left off at #4. &lt;br&gt;
We are going to call "setList()" and pass in our people array, but not the whole array. We are going to filter through the people array and only use the items of "people" whose name value's include the value of the search input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;searchInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;//returning only the results of setList if the value of the search is included in the person's name&lt;/span&gt;
        &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test this, if we type "be" into our search bar, "becky" should appear on the page underneath the search bar. &lt;/p&gt;

&lt;p&gt;What do you see ?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#clearing-results-from-the-page"&gt;
  &lt;/a&gt;
  Clearing Results from the Page &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To remove the results from the page, we need to call on our "list" element and remove each child because right now our result items are &lt;strong&gt;children elements&lt;/strong&gt; of "list".&lt;/p&gt;

&lt;p&gt;An easy, quick way to do this is to remove the first child of the parent element, until there is no more... we can do this using a "while" loop. &lt;/p&gt;

&lt;p&gt;** While Loops: while the condition is still true, do the action described. **&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;clearList&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// looping through each child of the search results list and remove each child&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can refer to this function, clearList(), in our event listeners --&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;searchInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// inside, we will need to achieve a few things:&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. declare and assign the value of the event's target to a variable AKA whatever is typed in the search bar&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;// 2. check: if input exists and if input is larger than 0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// 3. redefine 'value' to exclude white space and change input to all lowercase&lt;/span&gt;
         &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// 4. return the results only if the value of the search is included in the person's name&lt;/span&gt;
        &lt;span class="c1"&gt;// we need to write code (a function for filtering through our data to include the search input value)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 5. return nothing&lt;/span&gt;
        &lt;span class="nx"&gt;clearList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;clearButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#showing-no-results"&gt;
  &lt;/a&gt;
  Showing No Results &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Well, we have to ask ourselves, what happens if the input value renders no matches? no results? We need to tell the user exactly that!&lt;/p&gt;

&lt;p&gt;Let's build a function called "noResults()". This function will render an error message onto the page, where the results would've been.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;noResults&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// create an element for the error; a list item ("li")&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// adding a class name of "error-message" to our error element&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error-message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// creating text for our element&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No results found. Sorry!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// appending the text to our element&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// appending the error to our list element&lt;/span&gt;
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use this function within our setList() function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;clearList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;noResults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#testing-our-code"&gt;
  &lt;/a&gt;
  Testing Our Code &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now, that we have beautifully written JavaScript file and HTML file, loaded with event listeners, variable declarations and functions, we can test our code. &lt;/p&gt;

&lt;p&gt;Head over to your browser... in your terminal, type:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;open index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Here is what I see... I added a title and did some slight styling...&lt;/p&gt;

&lt;p&gt;Case # 1: No Input (yet)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kRNQfchI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q5dsrfc9vfbonh5jg7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kRNQfchI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q5dsrfc9vfbonh5jg7j.png" alt="no input yet" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Case # 2: Results!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YD6ivAfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohxprm0y3oemrsvslibr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YD6ivAfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohxprm0y3oemrsvslibr.png" alt="Image description" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Case # 3: No Matching Results &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkE1EbZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xv7jy0jvt21gmigqy54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkE1EbZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xv7jy0jvt21gmigqy54.png" alt="Image description" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;







&lt;p&gt;Thank you so much for reading along and coding with me. I hope you learned as much as I have with this mini-JavaScript project.&lt;/p&gt;

&lt;p&gt;Please leave comments, questions or suggestions. Let's continue to learn together. &lt;br&gt;
üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠üí≠&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Converting a Git master Branch to main</title>
      <author>Kristen Kinnear-Ohlmann</author>
      <pubDate>Mon, 15 Nov 2021 02:58:56 +0000</pubDate>
      <link>https://dev.to/kristenkinnearohlmann/converting-a-git-master-branch-to-main-1c9h</link>
      <guid>https://dev.to/kristenkinnearohlmann/converting-a-git-master-branch-to-main-1c9h</guid>
      <description>&lt;p&gt;Many organizations began to be aware of and change non-inclusive language in the second decade of the 21st century. Many of those changes affected technology, including the choice for &lt;code&gt;git&lt;/code&gt; to replace &lt;code&gt;master&lt;/code&gt; with &lt;code&gt;main&lt;/code&gt; for the default repo branch to avoid connotations with slavery.&lt;/p&gt;

&lt;p&gt;While GitHub took actions to ensure new repos created on the site used &lt;code&gt;main&lt;/code&gt;, older projects still used &lt;code&gt;master&lt;/code&gt; as the default branch. In addition, some generator libraries still create new projects with &lt;code&gt;master&lt;/code&gt; as the default and Azure DevOps also creates new repos with &lt;code&gt;master&lt;/code&gt; as the default.&lt;/p&gt;

&lt;p&gt;I had some time between projects at work in the last week and I wanted to tackle making the change for some organization repos I created to manage SQL objects and SSIS projects. This will allow all developers and contributors to have a common reference regardless of repo. There is a small process involved in making the change, as well as communicating the change to any other developers or contributors to the repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rename-raw-master-endraw-to-raw-main-endraw-and-push-to-remote"&gt;
  &lt;/a&gt;
  Rename &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt; and push to remote
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In the local environment, open a terminal and navigate to the project to be updated&lt;/li&gt;
&lt;li&gt;Move (rename) the &lt;code&gt;master&lt;/code&gt; branch to &lt;code&gt;main&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-m&lt;/span&gt; master main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Push the new branch to the remote
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reset-default-branch-on-github"&gt;
  &lt;/a&gt;
  Reset default branch on GitHub
&lt;/h2&gt;

&lt;p&gt;I use GitHub for my personal projects.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Branches&lt;/strong&gt;; &lt;code&gt;master&lt;/code&gt; will display as the default branch
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMMSIrns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/49e545a34ff47fd332989e72cc19a5ea/11ff9/personal-100days-01-settings-branches.jpg" alt="GitHub master as default" width="880" height="243"&gt;
&lt;/li&gt;
&lt;li&gt;Click the arrows icon to &lt;strong&gt;Switch to another branch&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_5CVCO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/492607f81c6f457b44ee008cfc19f459/3b78f/personal-100days-02-switch.jpg" alt="GitHub switch to another branch as default" width="880" height="369"&gt;
&lt;/li&gt;
&lt;li&gt;Select the new &lt;code&gt;main&lt;/code&gt; branch and click &lt;strong&gt;Update&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--enb5xH1r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/43836c981780dd10415421e41a6ab8f8/7aa7d/personal-100days-03-switch-main.jpg" alt="GitHub select main branch" width="597" height="247"&gt;
&lt;/li&gt;
&lt;li&gt;Acknowledge the warning for changing the default branch (ideally, you will communicate separately with others working in this repo that the default branch has changed)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SC71gNgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/396bfc3c50cce9c32c86955655ec8801/52eca/personal-100days-04-switch-main-confirm.jpg" alt="GitHub acknowledge warning" width="585" height="380"&gt;
&lt;/li&gt;
&lt;li&gt;A message will display confirming the change
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ypey68kU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/8a68aee61a1b8c2dddb5db0c93c653fb/37c2d/personal-100days-05-switch-main-confirm-notif.jpg" alt="GitHub default branch changed" width="453" height="170"&gt;
&lt;/li&gt;
&lt;li&gt;Review the branches for the project and confirm that &lt;code&gt;main&lt;/code&gt; is set as the default
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4v-aODQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/3194ec823fca5f5b233d3266c0f679ae/7f450/personal-100days-06-final.jpg" alt="GitHub main default" width="728" height="547"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reset-default-branch-azure-devops"&gt;
  &lt;/a&gt;
  Reset default branch Azure DevOps
&lt;/h2&gt;

&lt;p&gt;My organization uses Azure Devops for version control.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &lt;strong&gt;Repos&lt;/strong&gt; &amp;gt; &lt;strong&gt;Branches&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVmeE3Bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/0a7f3cf1022d08ab12de8046819d68e0/7b996/azdo-01-branches.jpg" alt="Azure DevOps branches" width="331" height="367"&gt;
&lt;/li&gt;
&lt;li&gt;Click the 3 dots menu on the &lt;code&gt;main&lt;/code&gt; record and choose &lt;strong&gt;Set as default branch&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV0tYERg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/28cd375aada425d6e0088eba9ad1cfc5/f2a9a/azdo-02-branches-set-main-default.jpg" alt="Azure DevOps set main as default" width="880" height="431"&gt;
&lt;/li&gt;
&lt;li&gt;Confirm the change to &lt;code&gt;main&lt;/code&gt; as the default branch
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQtEhDSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/91af972b9d5eaa99c2f7c725e371eab7/f2a9a/azdo-03-branches-main-default.jpg" alt="Azure DevOps confirm main" width="880" height="189"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#postconversion"&gt;
  &lt;/a&gt;
  Post-conversion
&lt;/h2&gt;

&lt;p&gt;In each case, I plan to leave the &lt;code&gt;master&lt;/code&gt; branch in place for about a week before removing it. At my work organization, I am in the process of informing other contributors about the need to change to using &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>github</category>
      <category>tutorial</category>
      <category>azure</category>
    </item>
    <item>
      <title>Drawing an animated 3D store front with CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 15 Nov 2021 02:50:37 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/drawing-an-animated-3d-store-front-with-css-9ff</link>
      <guid>https://dev.to/alvaromontoro/drawing-an-animated-3d-store-front-with-css-9ff</guid>
      <description>&lt;p&gt;This past few weeks, I have been playing with 3D CSS and creating animated 3D demos (like this &lt;a href="https://codepen.io/alvaromontoro/full/vYJjNOB"&gt;paper plane&lt;/a&gt; or a &lt;a href="https://codepen.io/alvaromontoro/full/dyzggdp"&gt;single element dice&lt;/a&gt;). This weekend I started coding a &lt;a href="https://codepen.io/alvaromontoro/pen/rNzZgLg"&gt;3D version of a store&lt;/a&gt; and completed the outline. There are still many parts missing in the interior, but the exterior is (kind of) complete:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This demo is a fork of the original linked above, so it doesn't change as I add more things to the original demo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/dyzgrdd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Some decorations on the wall will be interesting, and furniture (on twitter I got some interesting suggestions: maybe a counter and a table with chairs? an arcade machine? some posters?) I will be working on that soon. &lt;/p&gt;

&lt;p&gt;I have been recording the whole process in order to share it later on &lt;a href="https://www.youtube.com/c/AlvaroMontoroCSS"&gt;my Youtube channel&lt;/a&gt;. The demo is still incomplete, but here's a time-lapse of the progress so far:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7Ggk7N5a7-Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>18 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project </title>
      <author>Jarvis</author>
      <pubDate>Mon, 15 Nov 2021 02:44:29 +0000</pubDate>
      <link>https://dev.to/jvscode/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4d25</link>
      <guid>https://dev.to/jvscode/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4d25</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ Vuejs Projects for Beginners ‚Äì Easy Ideas to Get Started Coding Vuejs [Beginners - Advance]</title>
      <author>Jarvis</author>
      <pubDate>Mon, 15 Nov 2021 02:43:56 +0000</pubDate>
      <link>https://dev.to/jvscode/40-vuejs-projects-for-beginners-easy-ideas-to-get-started-coding-vuejs-beginners-advance-50a5</link>
      <guid>https://dev.to/jvscode/40-vuejs-projects-for-beginners-easy-ideas-to-get-started-coding-vuejs-beginners-advance-50a5</guid>
      <description>&lt;p&gt;In this article, I‚Äôm going to share another list of project ideas, today for the Vue.js apps.&lt;/p&gt;
&lt;p&gt;You could realize that we‚Äôre publishing articles with a list of project ideas for the particular front-end technology to provide you some apps ideas that you can create to practice coding and create an excellent portfolio.¬†It‚Äôs also helpfull if you wonder¬†how to practice Javascript.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/vuejs-project-for-beginners/&amp;amp;ved=2ahUKEwjnzOvzuIf0AhWDj-YKHf8IATAQFnoECA8QAQ&amp;amp;usg=AOvVaw2n3XO5CZAnv9fpZ08vYyWu"&gt;40+ Vuejs Projects for Beginners ‚Äì Easy Ideas to Get Started Coding Vuejs¬†&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Criando vari√°veis no Kotlin - Explorando a documenta√ß√£o</title>
      <author>Morganna Giovanelli</author>
      <pubDate>Mon, 15 Nov 2021 02:21:59 +0000</pubDate>
      <link>https://dev.to/kotlinautas/criando-variaveis-no-kotlin-explorando-a-documentacao-4a4g</link>
      <guid>https://dev.to/kotlinautas/criando-variaveis-no-kotlin-explorando-a-documentacao-4a4g</guid>
      <description>&lt;p&gt;Pensando em formas diferentes de aproximar a comunidade da documenta√ß√£o do Kotlin, darei in√≠cio a uma s√©rie de postagens para traduzir o conte√∫do dessa documenta√ß√£o. Fiquem a vontade para compartilhar seus feedbacks e complementar o conte√∫do.&lt;/p&gt;

&lt;p&gt;De qualquer forma, ainda que voc√™ j√° esteja trabalhando com kotlin, aconselho a consultar a documenta√ß√£o sempre que puder. Muitas das vezes, existem recursos da linguagem que facilitam nosso dia a dia, mas por costume de outras linguagens de programa√ß√£o com as quais j√° trabalhamos, temos a tend√™ncia de estruturar o c√≥digo da forma como conhecemos at√© ent√£o.&lt;/p&gt;

&lt;p&gt;Vamos dar os primeiros passos?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kF-wXzFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex5bu69g7ledxr5tclmj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kF-wXzFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex5bu69g7ledxr5tclmj.gif" alt='gif bruxa subindo em uma vassoura dizendo "e l√° vamos n√≥s"' width="498" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se ainda n√£o conhece a documenta√ß√£o, voc√™ pode consultar o conte√∫do por &lt;a href="https://kotlinlang.org/docs/home.html"&gt;aqui&lt;/a&gt;. Ela est√° em ingl√™s e n√£o existe, at√© o momento, uma tradu√ß√£o oficial para outras l√≠nguas, como o portugu√™s.&lt;/p&gt;

&lt;p&gt;Dentro do t√≥pico &lt;em&gt;&lt;a href="https://kotlinlang.org/docs/basic-syntax.html"&gt;Basic Syntax&lt;/a&gt;&lt;/em&gt;, que seria a Sintaxe B√°sica, est√£o os primeiros t√≥picos da linguagem. Vamos iniciar aqui pelas &lt;a href="https://kotlinlang.org/docs/basic-syntax.html#variables"&gt;vari√°veis&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#vari%C3%A1veis"&gt;
  &lt;/a&gt;
  Vari√°veis
&lt;/h1&gt;

&lt;p&gt;Vari√°veis s√£o utilizadas para guardar valores durante a execu√ß√£o do nosso c√≥digo. Esses valores podem ser apenas de leitura, ou seja, n√£o podemos alter√°-lo durante a execu√ß√£o do programa. Mas tamb√©m podem ser mut√°veis, ou seja, podem mudar de valor durante o processamento e de acordo com a necessidade.&lt;/p&gt;

&lt;p&gt;No Kotlin, as vari√°veis de leitura, as chamadas &lt;em&gt;read-only&lt;/em&gt; em ingl√™s, s√£o definidas no c√≥digo quando utilizamos a palavra-chave &lt;strong&gt;val&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para vari√°veis que podem ter seu valor alterado durante a execu√ß√£o de um programa, utilizamos a palavra-chave &lt;strong&gt;var&lt;/strong&gt; para sua cria√ß√£o no c√≥digo.&lt;/p&gt;

&lt;p&gt;Vejamos os exemplos a seguir.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#vari%C3%A1veis-somente-leitura"&gt;
  &lt;/a&gt;
  Vari√°veis somente leitura
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-declarado-e-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma vari√°vel pode ter seu tipo declarado e receber uma atribui√ß√£o durante a sua cria√ß√£o:
&lt;/h3&gt;

&lt;p&gt;No trecho de c√≥digo abaixo, estamos criando uma vari√°vel apenas de leitura chamada "a". Seu tipo √© Int, ou seja, ela recebe valores que s√£o n√∫meros inteiros. E foi declarada com o valor 1.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=e53Je697Aq&amp;amp;from=2&amp;amp;to&amp;amp;theme&amp;amp;readOnly"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-n%C3%A3o-declarado-e-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma vari√°vel pode ter seu tipo n√£o declarado e receber uma atribui√ß√£o durante a sua cria√ß√£o:
&lt;/h3&gt;

&lt;p&gt;Quando atribu√≠mos um valor diretamente a uma vari√°vel, o Kotlin entende qual ser√° o seu tipo. No caso abaixo, o tipo √© Int, pois recebeu o valor 1, que √© um n√∫mero inteiro.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=3zXo0Rau2&amp;amp;from=2&amp;amp;to&amp;amp;theme&amp;amp;readOnly"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-declarado-e-n%C3%A3o-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma vari√°vel pode ter seu tipo declarado e n√£o receber uma atribui√ß√£o durante a sua cria√ß√£o:
&lt;/h3&gt;

&lt;p&gt;No caso abaixo, a vari√°vel foi criada e, s√≥ durante a execu√ß√£o do programa, ela receber√° um valor. N√£o necessariamente precisa ter uma atribui√ß√£o diretamente em sua cria√ß√£o.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=KjTUxNuiC&amp;amp;from=2&amp;amp;to&amp;amp;theme&amp;amp;readOnly"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-de-leitura-n%C3%A3o-poder%C3%A1-ter-seu-valor-alterado"&gt;
  &lt;/a&gt;
  Uma vari√°vel de leitura n√£o poder√° ter seu valor alterado:
&lt;/h3&gt;

&lt;p&gt;No caso abaixo, se voc√™ executar o c√≥digo, ver√° que retornar√° um erro dizendo &lt;em&gt;Val cannot be reassigned&lt;/em&gt;, ou seja, a vari√°vel declarada como somente leitura n√£o poder√° ter um novo valor atribu√≠do.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=BKUI0ABeA&amp;amp;from&amp;amp;to&amp;amp;theme&amp;amp;readOnly=false"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vari%C3%A1veis-mut%C3%A1veis"&gt;
  &lt;/a&gt;
  Vari√°veis mut√°veis
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-declarado-e-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma vari√°vel pode ter seu tipo declarado e receber uma atribui√ß√£o durante a sua cria√ß√£o:
&lt;/h3&gt;

&lt;p&gt;No trecho de c√≥digo abaixo, estamos criando uma vari√°vel mut√°vel chamada "a". Seu tipo √© Int, ou seja, ela recebe valores que s√£o n√∫meros inteiros. E foi inicializada com o valor 1. Posteriormente, teve seu valor alterado para 2, pois √© var.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=6wTZ10Mab&amp;amp;from&amp;amp;to&amp;amp;theme&amp;amp;readOnly=false"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-n%C3%A3o-declarado-e-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma vari√°vel pode ter seu tipo n√£o declarado e receber uma atribui√ß√£o durante a sua cria√ß√£o:
&lt;/h3&gt;

&lt;p&gt;Quando atribu√≠mos um valor diretamente a uma vari√°vel, o Kotlin entende qual ser√° o seu tipo. No caso abaixo, o tipo √© Int, pois recebeu o valor 1, que √© um n√∫mero inteiro. E, por ser var, teve seu valor alterado para 2 sem problemas.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=9hAwY5Gk-P&amp;amp;from&amp;amp;to&amp;amp;theme&amp;amp;readOnly=false"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-declarado-e-n%C3%A3o-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma vari√°vel pode ter seu tipo declarado e n√£o receber uma atribui√ß√£o durante a sua cria√ß√£o:
&lt;/h3&gt;

&lt;p&gt;No caso abaixo, a vari√°vel foi criada e, s√≥ durante a execu√ß√£o do programa, ela receber√° um valor. N√£o necessariamente precisa ter uma atribui√ß√£o diretamente em sua cria√ß√£o.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=vI0uFRfTz&amp;amp;from&amp;amp;to&amp;amp;theme&amp;amp;readOnly=false"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mundo-real"&gt;
  &lt;/a&gt;
  Mundo real
&lt;/h2&gt;

&lt;p&gt;Precisamos avaliar e entender um contexto para tomar uma decis√£o entre deixar uma vari√°vel como mut√°vel ou como somente leitura. Tudo depende da necessidade e dos requisitos que estamos atendendo, al√©m de pontos de controle e de seguran√ßa que podem ser importantes em nosso c√≥digo.&lt;br&gt;
Normalmente, uma vari√°vel √© criada como &lt;strong&gt;val&lt;/strong&gt;, impedindo altera√ß√µes diretas de seu valor. E, se houver necessidade, alteramos para &lt;strong&gt;var&lt;/strong&gt; durante o desenvolvimento de um projeto.&lt;br&gt;
Contudo, al√©m disso, tamb√©m avaliamos a necessidade de uma vari√°vel ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uma constante;&lt;/li&gt;
&lt;li&gt;local, que atenda apenas a um escopo;&lt;/li&gt;
&lt;li&gt;global, que esteja dispon√≠vel a todo o projeto;&lt;/li&gt;
&lt;li&gt;uma propriedade, controlando de acordo com o modificador de acesso.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pontos extremamente importantes e que abordaremos no pr√≥ximo artigo.&lt;/p&gt;

&lt;p&gt;Caso tenha algo a acrescentar, sugest√µes ou queira tirar alguma d√∫vida, fique a vontade para enviar nos coment√°rios. At√© a pr√≥xima!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>braziliandevs</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
