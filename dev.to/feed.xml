<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Property-Based Testing In Go</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Wed, 12 Jan 2022 16:31:08 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/property-based-testing-in-go-48kb</link>
      <guid>https://dev.to/adamgordonbell/property-based-testing-in-go-48kb</guid>
      <description>&lt;p&gt;Have you ever wanted your unit tests written for you? Property based testing is a powerful testing technique that, in a sense, is just that. You describe the properties you’d like to test, and the specific cases are generated for you.&lt;/p&gt;

&lt;p&gt;Property-based testing can be a bit trickier to learn, and not every problem can be well tested in this manner, but it’s a powerful technique that’s well supported by the go std-lib (&lt;code&gt;testing/quick&lt;/code&gt;) and that is under-utilized.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-raw-csvquote-endraw-"&gt;
  &lt;/a&gt;
  Testing &lt;code&gt;csvquote&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;csvquote&lt;/code&gt; is a small program that makes it easier to deal with CSV files at the command line. It does this by replacing problematic CSV characters with the controls characters &lt;code&gt;\x1e&lt;/code&gt; and &lt;code&gt;\x1f&lt;/code&gt; and later removing them.&lt;/p&gt;

&lt;p&gt;You can use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;csvquote | head | csvquote -u
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want to improve it a bit, but first, I want to add some testing to ensure I don’t break it. The tests will also help me document how it works.&lt;/p&gt;

&lt;p&gt;Here are my initial test cases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var tests = []struct {
 in string
 out string
}{
 {`"a","b"`, `"a","b"`}, // Simple
 {"\"a,\",\"b\"", "\"a\x1f\",\"b\""}, //Comma
 {"\"a\n\",\"b\"", "\"a\x1e\",\"b\""}, //New Line
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test that the &lt;code&gt;in&lt;/code&gt; string always results in the &lt;code&gt;out&lt;/code&gt;, I do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func TestSubstitute(t *testing.T) {
 f := substituteNonprintingChars(',', '"', '\n')
 for _, tt := range tests {
  out := string([]byte(apply([]byte(tt.in), f)))
  assert.Equal(t, tt.out, out, "input and output should match")
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;substituteNonprintingChars&lt;/code&gt; returns a function that does the conversion and &lt;code&gt;apply&lt;/code&gt; is a helper for applying that function over a &lt;code&gt;[]byte&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Slightly simplified, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func apply(data []byte, f mapper) []byte {
 count := len(data)

 for i := 0; i &amp;lt; count; i++ {
  data[i] = f(data[i])
 }
 return data
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second thing I want to test is that I can reverse this operation. That is, when &lt;code&gt;csvquote&lt;/code&gt; is run with &lt;code&gt;-u&lt;/code&gt;, it should always return the original input.&lt;/p&gt;

&lt;p&gt;I can test this by going in reverse from output to input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func TestRestore(t *testing.T) {
 f := restoreOriginalChars(',', '\n')
 for _, tt := range tests {
  in := string([]byte(apply([]byte(tt.out), f)))
  assert.Equal(t, tt.in, in, "input and output should match")
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;restoreOriginalChars&lt;/code&gt; is the function that restores the string to its original form.&lt;/p&gt;

&lt;p&gt;Both these tests pass (the full source is &lt;a href="https://github.com/adamgordonbell/csvquote/blob/7f4698ad3d3c2d12f063b5d8a8bd304e8307a089/cmd/cvsquote/main_test.go"&gt;on GitHub&lt;/a&gt;). However, it’s still possible there are edge cases that work incorrectly. What I need is a way to generate more test cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#propertybased-testing"&gt;
  &lt;/a&gt;
  Property-Based Testing
&lt;/h2&gt;

&lt;p&gt;One way I could improve my testing is to combine the two tests. That is, rather than testing that the substituted value matches expectations and that the restored value matches expectations, I can simply test that substituting and restoring a string always results in the original string.&lt;/p&gt;

&lt;p&gt;That is for almost all possible values of the string &lt;code&gt;a&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo a | csvquote | csvquote -u == a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my go test, I can state that property like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func doesIdentityHold(in string) bool {
 substitute := substituteNonprintingChars(',', '"', '\n')
 restore := restoreOriginalChars(',', '\n')
 substituted := apply([]byte(in), substitute)
 restored := string([]byte(apply(substituted, restore)))
 return in == restored
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is, for a string &lt;code&gt;in&lt;/code&gt;, substituting and then restoring it should equal itself. I’m calling this &lt;code&gt;doesIdentityHold&lt;/code&gt; because an identity is any function that returns the original result. &lt;code&gt;csvquote | csvquote -u&lt;/code&gt; should be an identity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-check"&gt;
  &lt;/a&gt;
  Quick Check
&lt;/h3&gt;

&lt;p&gt;Now that we have that function, we can use &lt;code&gt;testing/quick&lt;/code&gt;, the property-based testing library, to test it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func TestIdentity1(t *testing.T) {
 if err := quick.Check(doesIdentityHold, nil); err != nil {
  t.Error(err)
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, this will cause &lt;code&gt;testing/quick&lt;/code&gt; to run 100 iterations of my identity test, using random strings as inputs. You can bump that up much higher, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func TestIdentity1(t *testing.T) {
 c := quick.Config{MaxCount: 1000000} // &amp;lt;- changed
  if err := quick.Check(doesIdentityHold, &amp;amp;c); err != nil {
  t.Error(err)
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that number of tests cases, I run into a problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--- FAIL: TestIdentity1 (5.17s)
    main_test.go:43: #13072: failed on input "\x1f\U00037f8b\U000732a1\"
FAIL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The failing test is helpfully printed. However, it’s found a problem in my testing method, not with the code under test. You see, &lt;code&gt;csvquote&lt;/code&gt; should always be able to reverse it’s input, &lt;em&gt;except in the case that the input contains the non-printable ASCII control characters&lt;/em&gt; and that is what this test case has found.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\x1f&lt;/code&gt; may not be used much outside of traditional teletype terminals but I asked &lt;code&gt;csvquote&lt;/code&gt; to check across all possible strings, and eventually, it found a failing case.&lt;/p&gt;

&lt;p&gt;Long term, I should adjust &lt;code&gt;csvquote&lt;/code&gt; to exit with an error condition when it receives input it can’t handle, but that is a problem for another day. Instead let’s focus on constraining the input used in the tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-a-property-testing-generator"&gt;
  &lt;/a&gt;
  Writing a Property Testing Generator
&lt;/h2&gt;

&lt;p&gt;As I’ve shown above, &lt;code&gt;testing/quick&lt;/code&gt; can generate test values for testing on its own, but it’s often valuable to write your own.&lt;/p&gt;

&lt;p&gt;In this case, writing my own CSV file generator will allow me to make a couple of improvements to the test. First of all, I can remove control characters from the test set. But also, I can move to generating strings that are valid CSV files, rather than just random characters. Testing with random characters is easy, but my main concern is that &lt;code&gt;csvquote&lt;/code&gt; can handle valid CSV files, so by narrowing in on that case, I’ll have a better chance of catching real-world issues.&lt;/p&gt;

&lt;p&gt;First I write a function to generate random strings of size &lt;code&gt;size&lt;/code&gt; and from the character set &lt;code&gt;alphabet&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func RandString(r *rand.Rand, size int, alphabet string) string {
 var buffer bytes.Buffer
 for i := 0; i &amp;lt; size; i++ {
  index := r.Intn(len(alphabet))
  buffer.WriteString(string(alphabet[index]))
 }
 return buffer.String()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It outputs what I expect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;r := rand.Rand{}
println(RandString(&amp;amp;r, 5, "abc"))
println(RandString(&amp;amp;r, 5, "abc"))

caccb
cabbb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I used that to generate a CSV files with random number or lines and rows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func randCSV(r *rand.Rand) string {
 var sb strings.Builder
 lines := r.Intn(20) + 1
 rows := r.Intn(20) + 1
 for i := 0; i &amp;lt; lines; i++ {
  for j := 0; j &amp;lt; rows; j++ {
   if j != 0 {
    sb.WriteString(`,`)
   }
   sb.WriteString(fmt.Sprintf(`"%s"`, randCSVString(r)))
  }
  sb.WriteString("\n")
 }
 return sb.String()
}

func randCSVString(r *rand.Rand) string {
 s := RandString(r, 20, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01233456789,\"")
 return strings.Replace(s, `"`, `""`, -1) // In CSV all double quotes must be doubled up
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is what calling &lt;code&gt;randCSVString&lt;/code&gt; will generate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"7IWvdDEGTxlRdJZrc4Ra","LMHcCcN,D2RVRsfbw0IF",",LrZ3B4SvFEfG3FqO01n","""vY4FmzhbyR4iDgYpr6f","sw83uJkitIc8trzaYmEO"
"fGloXshqwC""O9Bd,eM,L","LDRajiwNgZNitCA0QL11","1Q
nqhMhzu7Mlu92qxK""8","jtj33vTlH5VP4UlbKu2e","sDhVlor4RRg4JrKfdR""W"
"EGWYmpm1TVNdB3rfmU80","Mx0RdqqVUuWiOpKY""IXk","ctprb8
7PrVu8rX8iJqTg","wnmagEjUDJrZCGBdmAYH","EJtuq1ZJqz9jf,j6vzh1"
",88Q7qWLewZVK9pE83ut","1kZJipoz2FOWLS96xMjW","5BkVvtZqZk""S2wpOB3rQ","kYN6aGPDmgSLAEI4CJtu","xOH,9y9wDDtwWUPsjgz7"
"mbexX2,Wl4""cuq3VGekP","uMXK5uLDz2ZS3Wv4wynY","KJBLt0RipsJyEqVHqrDx","glDHHs6Ujyg""piJGv595","rIa4KOxe,B""qS7EmO
nTB"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can then hook this up to my test method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func TestIdentity2(t *testing.T) {
 c := quick.Config{MaxCount: 10000,
  Values: func(values []reflect.Value, r *rand.Rand) {
   values[0] = reflect.ValueOf(randCSV(r))
  }}
 if err := quick.Check(doesIdentityHold, &amp;amp;c); err != nil {
  t.Error(err)
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now I can test &lt;code&gt;csvquote&lt;/code&gt; against ten thousand random CSV files in under a second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; go test
PASS
ok github.com/adamgordonbell/csvquote/cmd/cvsquote 0.635s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’ll leave extending this to covering Unicode values and unquoted rows for another day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#property-testing"&gt;
  &lt;/a&gt;
  Property Testing
&lt;/h3&gt;

&lt;p&gt;Property-based testing is a powerful technique for testing your code. As you can see from this real-world but somewhat contrived scenario, it moves the work of testing away from specific test cases and towards validating properties that hold for all values. Here the property under test was that substituting and restoring are inverses of each other (and therefore form an identity).&lt;/p&gt;

&lt;p&gt;For me, the most challenging part of property-based testing is seeing how I can transform a specific test-case into a testable property. It’s not always immediately clear what’s possible to test in this manner and some tests are simply hard to state in this form. But when a problem is well suited for property-based testing, it is a powerful tool!&lt;/p&gt;

&lt;p&gt;( The second most challenging thing about property-based testing is writing generators for your problem domain. Although once written, they make testing in this style feel quite natural. )&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-resources"&gt;
  &lt;/a&gt;
  More Resources
&lt;/h2&gt;

&lt;p&gt;The hardest part of this style of testing is seeing where and how it can apply. The places I’ve found it valuable include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verifying serialization and deserialization code&lt;/li&gt;
&lt;li&gt;Verifying an optimization (by comparing the results to the un-optimized version)&lt;/li&gt;
&lt;li&gt;Anywhere I have more than one representation of some data and need to test the boundaries of those representations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But others have found more ways to use this paradigm. If you want to learn more about property-based testing, then &lt;a href="https://github.com/leanovate/gopter"&gt;&lt;code&gt;gopter&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;the GOlang Property TestER&lt;/em&gt;, is worth taking a look at. &lt;a href="https://github.com/amir"&gt;Amir Saeid&lt;/a&gt;, who’s good at this technique, recommends this &lt;a href="https://leanpub.com/property-based-testing-in-a-screencast-editor"&gt;book&lt;/a&gt; full of examples, and &lt;a href="https://jacobstanley.io/how-to-use-hedgehog-to-test-a-real-world-large-scale-stateful-app/"&gt;this blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any tips or suggested resources for property-based testing, please let me know on Twitter (&lt;a href="https://twitter.com/adamgordonbell/"&gt;@adamgordonbell&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;And if you care about reliable software, take a look at &lt;a href="https://earthly.dev/"&gt;Earthly&lt;/a&gt;. Earthly makes continuous integration less flakey and works with your existing workflow.&lt;/p&gt;

</description>
      <category>go</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To SSH Your ECS Server(Running Fargate)</title>
      <author>Lei Feng</author>
      <pubDate>Wed, 12 Jan 2022 15:38:30 +0000</pubDate>
      <link>https://dev.to/leifengflying/how-to-ssh-your-ecs-serverrunning-fargate-4587</link>
      <guid>https://dev.to/leifengflying/how-to-ssh-your-ecs-serverrunning-fargate-4587</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1install-acli-v2"&gt;
  &lt;/a&gt;
  &lt;a href="#1"&gt;1.Install ACLI V2&lt;/a&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#2install-and-run-docker-on-ec2"&gt;
  &lt;/a&gt;
  &lt;a href="#2"&gt;2.Install and Run Docker On EC2&lt;/a&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#3use-ecr-create-repository"&gt;
  &lt;/a&gt;
  &lt;a href="#3"&gt;3.Use ECR create repository&lt;/a&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#4attach-iam-role-to-ec2"&gt;
  &lt;/a&gt;
  &lt;a href="#4"&gt;4.Attach IAM Role To EC2&lt;/a&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#5build-and-push-image-to-repository"&gt;
  &lt;/a&gt;
  &lt;a href="#5"&gt;5.Build and Push Image to Repository&lt;/a&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#6create-ecs-task-definition"&gt;
  &lt;/a&gt;
  &lt;a href="#6"&gt;6.Create ECS Task Definition&lt;/a&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#7create-cluster"&gt;
  &lt;/a&gt;
  &lt;a href="#7"&gt;7.Create Cluster&lt;/a&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#8create-service"&gt;
  &lt;/a&gt;
  &lt;a href="#8"&gt;8.Create Service&lt;/a&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#9use-ssh-tool-connect-your-container"&gt;
  &lt;/a&gt;
  &lt;a href="#9"&gt;9.Use SSH Tool connect your container&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id="1"&gt;1.Install ACLI V2 On Ami-2&lt;/h2&gt;

&lt;p&gt;In here,I use Amazon Linux 2, t3.micro instance type.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zxp87-xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pft0xoa0r89hoks191.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zxp87-xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pft0xoa0r89hoks191.png" alt="Image description" width="880" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First,We need give the instance right IAM Role&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3-YYopTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxx7bsi71q1aimqpnodb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-YYopTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxx7bsi71q1aimqpnodb.png" alt="Image description" width="880" height="323"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Install ACLI V2,I will put the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm -rf /bin/aws
rm -rf /bin/aws*
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
ln -s /usr/local/bin/aws /bin/aws

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---XUvv2GO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmtwqlreo80fsp6fm4fj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XUvv2GO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmtwqlreo80fsp6fm4fj.png" alt="Image description" width="880" height="119"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[root@ip-172-31-43-69 ~]# yum install docker &amp;amp;&amp;amp; systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sAyyJFZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwkknrdgze3hn1vo5yo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAyyJFZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwkknrdgze3hn1vo5yo1.png" alt="Image description" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="3"&gt;Use ECR create repository&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQnt-mBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o1id8d4n5ynxcg7ibc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQnt-mBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o1id8d4n5ynxcg7ibc1.png" alt="Image description" width="880" height="242"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="4"&gt;Attach IAM Role To EC2&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.amazonaws.cn/en_us/AmazonECR/latest/userguide/registry-permissions-create.html"&gt;https://docs.amazonaws.cn/en_us/AmazonECR/latest/userguide/registry-permissions-create.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvBBGCUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3weecswiqbo0z2b790z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvBBGCUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3weecswiqbo0z2b790z.png" alt="Image description" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="5"&gt;Build and Push Image to Repository&lt;/h2&gt;

&lt;h3&gt;1.Write Dockerfile&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM centos:7

RUN yum install -y openssh-server sudo
RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config 
RUN useradd admin  
RUN echo "admin:123456" | chpasswd
RUN echo "admin   ALL=(ALL)       ALL" &amp;gt;&amp;gt; /etc/sudoers 

RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key

RUN mkdir /var/run/sshd
EXPOSE 22
CMD ["/usr/sbin/sshd", "-D"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;2.Build Image&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[root@ip-172-31-43-69 ~]# docker build -t sshd .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KAPNV4Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p452clp1etpj627x0q83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAPNV4Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p452clp1etpj627x0q83.png" alt="Image description" width="644" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;3.Tag and Push Image&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
docker tag sshd:latest aws_account_id.dkr.ecr.region.amazonaws.com/sshd:latest
docker push aws_account_id.dkr.ecr.region.amazonaws.com/sshd:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tA5t3wqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm9446iu7y010ovqrauj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tA5t3wqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm9446iu7y010ovqrauj.png" alt="Image description" width="880" height="253"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AfF_hFtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slqv4fl5d8opyxk5l2py.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AfF_hFtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slqv4fl5d8opyxk5l2py.png" alt="Image description" width="880" height="236"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb31ssWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5ad541y5y2qep0pm94e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb31ssWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5ad541y5y2qep0pm94e.png" alt="Image description" width="880" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="6"&gt;Create Fargate Task Definitions(I put my json code)&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#noticereplace-the-capital-letter-identification-part"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Notice:Replace the capital letter identification part&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "ipcMode": null,
  "executionRoleArn": "YOUR_EXEC_ROLE_ARN": [
    {
      "dnsSearchDomains": null,
      "environmentFiles": null,
      "logConfiguration": {
        "logDriver": "awslogs",
        "secretOptions": null,
        "options": {
          "awslogs-group": "/ecs/sshd_task",
          "awslogs-region": "YOUR_REGION",
          "awslogs-stream-prefix": "ecs"
        }
      },
      "entryPoint": null,
      "portMappings": [
        {
          "hostPort": 22,
          "protocol": "tcp",
          "containerPort": 22
        }
      ],
      "command": null,
      "linuxParameters": null,
      "cpu": 0,
      "environment": [],
      "resourceRequirements": null,
      "ulimits": null,
      "dnsServers": null,
      "mountPoints": [],
      "workingDirectory": null,
      "secrets": null,
      "dockerSecurityOptions": null,
      "memory": null,
      "memoryReservation": 2048,
      "volumesFrom": [],
      "stopTimeout": null,
      "image": "YOU_CREATE_IMG_URL",
      "startTimeout": null,
      "firelensConfiguration": null,
      "dependsOn": null,
      "disableNetworking": null,
      "interactive": null,
      "healthCheck": null,
      "essential": true,
      "links": null,
      "hostname": null,
      "extraHosts": null,
      "pseudoTerminal": null,
      "user": null,
      "readonlyRootFilesystem": null,
      "dockerLabels": null,
      "systemControls": null,
      "privileged": null,
      "name": "sshd_container"
    }
  ],
  "placementConstraints": [],
  "memory": "2048",
  "taskRoleArn": "USE_YOURSELF_TASK_ROLE",
  "compatibilities": [
    "EC2",
    "FARGATE"
  ],
  "taskDefinitionArn": "USE_YOURSELF_ARN",
  "family": "sshd_task",
  "requiresAttributes": [
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.logging-driver.awslogs"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "ecs.capability.execution-role-awslogs"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.ecr-auth"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.19"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.21"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.task-iam-role"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "ecs.capability.execution-role-ecr-pull"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.18"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "ecs.capability.task-eni"
    }
  ],
  "pidMode": null,
  "requiresCompatibilities": [
    "FARGATE"
  ],
  "networkMode": "awsvpc",
  "cpu": "1024",
  "revision": 2,
  "status": "ACTIVE",
  "inferenceAccelerators": null,
  "proxyConfiguration": null,
  "volumes": []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2 id="7"&gt;7.Create Cluster&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QdRWopLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va9r3tuqpedo2ldxhq7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QdRWopLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va9r3tuqpedo2ldxhq7c.png" alt="Image description" width="880" height="648"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFFzROmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbi032ei7aq65a0cdke7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFFzROmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbi032ei7aq65a0cdke7.png" alt="Image description" width="880" height="682"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="8"&gt;8.Create Service&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0bz5rsa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chokwk702qpzpyn9xxjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0bz5rsa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chokwk702qpzpyn9xxjd.png" alt="Image description" width="880" height="434"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iajqfpO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yle8xd0usrvhvw6eyyag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iajqfpO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yle8xd0usrvhvw6eyyag.png" alt="Image description" width="880" height="728"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNuardWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chgnxux3g7prrg3oxocf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNuardWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chgnxux3g7prrg3oxocf.png" alt="Image description" width="880" height="584"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vvh0zIBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k871ha9832c2vsne7lo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vvh0zIBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k871ha9832c2vsne7lo.png" alt="Image description" width="880" height="539"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwLOdIrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssufpsgouoi87z09r5cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwLOdIrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssufpsgouoi87z09r5cb.png" alt="Image description" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="9"&gt;9.Use SSH Tool connect your container&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OP5XmHPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0v9qn3kjczvz6nkzgx5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OP5XmHPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0v9qn3kjczvz6nkzgx5x.png" alt="Image description" width="672" height="189"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ecs</category>
      <category>docker</category>
    </item>
    <item>
      <title>ToDo List Using NodeJS, MongoDB</title>
      <author>Aditya Narad</author>
      <pubDate>Wed, 12 Jan 2022 15:35:12 +0000</pubDate>
      <link>https://dev.to/adinarad/todo-list-using-nodejs-mongodb-2l0l</link>
      <guid>https://dev.to/adinarad/todo-list-using-nodejs-mongodb-2l0l</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;A simple &lt;strong&gt;&lt;a href="https://my-todo-list-nodejs.herokuapp.com/"&gt;To-do List&lt;/a&gt;&lt;/strong&gt; web application which allows you to keep a list of your day-to-day. You can also create custom lists by adding &lt;em&gt;/ListName&lt;/em&gt; to the URL. &lt;/p&gt;

&lt;p&gt;Application is built using NodeJS and Express framework. The persistent data is stored in a MongoDB Database hosted on MongoDB Atlas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://my-todo-list-nodejs.herokuapp.com/"&gt;Try it out!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/adinarad"&gt;
        adinarad
      &lt;/a&gt; / &lt;a href="https://github.com/adinarad/Todo-List-NodeJS"&gt;
        Todo-List-NodeJS
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A ToDo List🔖 Application built with Node.js and Express. You can create new lists by adding /ListName to the URL.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Todo List using NodeJS&lt;/h1&gt;
&lt;p&gt;A &lt;a href="https://my-todo-list-nodejs.herokuapp.com/" rel="nofollow"&gt;ToDo List🔖&lt;/a&gt; Application built with Node.js and Express. You can create new lists by adding &lt;em&gt;/ListName&lt;/em&gt; to the URL.&lt;/p&gt;
&lt;h2&gt;
Technologies Used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Frontend: &lt;strong&gt;HTML, CSS, JavaScript&lt;/strong&gt; and &lt;strong&gt;EJS&lt;/strong&gt; for templating.&lt;/li&gt;
&lt;li&gt;Backend: &lt;strong&gt;Node.js&lt;/strong&gt; with &lt;strong&gt;Express&lt;/strong&gt; Framework&lt;/li&gt;
&lt;li&gt;Database: &lt;strong&gt;MongoDB&lt;/strong&gt; (hosted on MongoDB Atlas)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/adinarad/Todo-List-NodeJS"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Default List&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uLAUeZEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d3r4ksuubs7qav06ry5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLAUeZEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d3r4ksuubs7qav06ry5.png" alt="Default List" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;Custom List&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---wJKpktW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uhmzn3ju4cwp9pcuwcv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---wJKpktW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uhmzn3ju4cwp9pcuwcv.png" alt="Custom List" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>atlashackathon</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>my-notebook using MongoDB</title>
      <author>Mohit Maroliya</author>
      <pubDate>Wed, 12 Jan 2022 15:23:14 +0000</pubDate>
      <link>https://dev.to/mohitm15/my-notebook-using-mongodb-2ej6</link>
      <guid>https://dev.to/mohitm15/my-notebook-using-mongodb-2ej6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Today, writing notes is very important in order to stay organised. Especially in Corperate sector, When you write all your tasks in form of notes, they seem more manageable. When you've got a clear outline of the tasks you've got to do and those you've completed, it helps you stay focused. Also it works as a reminder for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;my-notebook&lt;/strong&gt; is a web application that is used to keep your notes securly. Each user can create, edit and delete its own notes. It also authenticates the user before performing any CRUD operations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category-prime-time"&gt;
  &lt;/a&gt;
  Submission Category: Prime Time
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mohitm15"&gt;
        mohitm15
      &lt;/a&gt; / &lt;a href="https://github.com/mohitm15/my-notebook"&gt;
        my-notebook
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      my-notebook is a web application that is used to keep your notes securely. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;

&lt;h3&gt;
my-notebook&lt;/h3&gt;
  &lt;p&gt;
    Handy tool to make your notes
    &lt;br&gt;
    &lt;a href="https://github.com/mohitm15/my-notebook"&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://github.com/github_username/repo_name"&gt;View Demo&lt;/a&gt;
  &lt;/p&gt;

  &lt;h2&gt;
Table of Contents&lt;/h2&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href="https://github.com/mohitm15/my-notebook#about-the-project"&gt;About The Project&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#built-with"&gt;Built With&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="https://github.com/mohitm15/my-notebook#getting-started"&gt;Getting Started&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#runningcode"&gt;Running the code&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#rpreview"&gt;Preview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/mohitm15/my-notebook#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;

&lt;h2&gt;
About The Project&lt;/h2&gt;
&lt;p&gt;my-notebook is a web application that is used to keep your notes securly. Each user can create, edit and delete its own notes. It also authenticates the user before performing any CRUD operation.&lt;/p&gt;
&lt;h3&gt;
Built With&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/" rel="nofollow"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/" rel="nofollow"&gt;ExpressJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/" rel="nofollow"&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;To get a local copy up and running follow these simple steps.&lt;/p&gt;
&lt;h3&gt;
Prerequisites&lt;/h3&gt;
&lt;p&gt;Package.json file mentioned the requirements you need to use the software and how to install them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install npm@latest -g&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any code editor of your choice (VScode preferable )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repo
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/mohitm15/my-notebook.git&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Install NPM packages and requirements
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
Running the code&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To run the frontend server , go to terminal and run&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;    &lt;span class="pl-c1"&gt;cd&lt;/span&gt; frontend&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;and then&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;…
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mohitm15/my-notebook"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;[Note:] # (Be sure to link to any open source projects that are using your workflow!)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;FrontEnd :&lt;/strong&gt; ReactJS &amp;amp; Framer Motion&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Backend :&lt;/strong&gt; ExpressJS &amp;amp; NodeJS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DataBase :&lt;/strong&gt; MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  ScreenShots
&lt;/h4&gt;

&lt;p&gt;[Note:] # Screenshots/demo videos are encouraged!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#signup-page"&gt;
  &lt;/a&gt;
  &lt;em&gt;SignUp Page&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJ6ITd3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06v52ia1umt3pqzjs7a5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJ6ITd3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06v52ia1umt3pqzjs7a5.png" alt="signup_page" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#login-page"&gt;
  &lt;/a&gt;
  &lt;em&gt;Login Page&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_4iBKKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92lt03wfto33xgspcctj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_4iBKKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92lt03wfto33xgspcctj.png" alt="login_page" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  &lt;em&gt;Home Page&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Theme : &lt;strong&gt;Dark&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrMwlgZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igkrq7azed7sq6p4ktpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrMwlgZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igkrq7azed7sq6p4ktpj.png" alt="homepage_dark" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Theme : &lt;strong&gt;High Contrast&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-Rfyygy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98r1q9p0qy6detyprg3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-Rfyygy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98r1q9p0qy6detyprg3x.png" alt="homepage_highcontrast" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Theme : &lt;strong&gt;Dark Teal&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X0RxQd5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlxugxr5lh7ok7ve22m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0RxQd5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlxugxr5lh7ok7ve22m2.png" alt="homepage_teal" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Theme : &lt;strong&gt;Rainbow&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjfxdhjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x331zpeaspibuo9gw50u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjfxdhjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x331zpeaspibuo9gw50u.png" alt="homepage_rainbow" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo-video"&gt;
  &lt;/a&gt;
  Demo video
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://kapwi.ng/c/VdweXzAmR-"&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PS: Project is built and hosted with MongoDB ecosystem and ❤️&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Are micro frontends still a thing?</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 12 Jan 2022 15:14:28 +0000</pubDate>
      <link>https://dev.to/ben/are-micro-frontends-still-a-thing-3jbm</link>
      <guid>https://dev.to/ben/are-micro-frontends-still-a-thing-3jbm</guid>
      <description>&lt;p&gt;This idea was all the rage for a while: The idea is no longer trending like it once was, but is that because it has settled in as a common pattern or has the idea faded?&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ruppysuppy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oA7zxE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E69pqyft--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/530414/941751d8-06b8-41bd-9de9-6ea056b7199f.png" alt="ruppysuppy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ruppysuppy/micro-frontends-the-next-gen-way-to-build-web-apps-16da" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Micro-Frontends: The Next Gen Way to build Web Apps&lt;/h2&gt;
      &lt;h3&gt;Tapajyoti Bose ・ Oct 24 '21 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webpack&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontend&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>discuss</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Writing Documentation and Caring About Developer Mental Health with Lorna Mitchell </title>
      <author>Mandy Moore</author>
      <pubDate>Wed, 12 Jan 2022 15:04:36 +0000</pubDate>
      <link>https://dev.to/newrelic/writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell-79l</link>
      <guid>https://dev.to/newrelic/writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell-79l</guid>
      <description>&lt;p&gt;&lt;a href="https://therelicans.com"&gt;Relicans&lt;/a&gt; host, &lt;a href="https://twitter.com/RabbiGreenberg"&gt;Ben Greenberg&lt;/a&gt;, talks to Developer Evangelist, &lt;a href="https://twitter.com/lornajane"&gt;Lorna Mitchell&lt;/a&gt;, about developer burnout, writing technical documentation, and open-source culture and what it can bring into our working cultures and docs portals.&lt;/p&gt;

&lt;p&gt;Should you find a burning need to share your thoughts or rants about the show, please spray them at &lt;a href="mailto:devrel@newrelic.com"&gt;devrel@newrelic.com&lt;/a&gt;. While you're going to all the trouble of shipping us some bytes, please consider taking a moment to let us know what you'd like to hear on the show in the future. Despite the all-caps flaming you will receive in response, please know that we are sincerely interested in your feedback; we aim to appease. Follow us on the Twitters: &lt;a href="https://twitter.com/PolyglotShow"&gt;@PolyglotShow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do you have ideas about how we can make our show better? Or would you like to be a guest on an upcoming episode? Reach out to our #devrel team at &lt;a href="mailto:devrel@newrelic.com"&gt;devrel@newrelic.com&lt;/a&gt;. We would LOVE to hear from you with any questions, curiosities, and/or feedback you have in hopes of making this the best show possible!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/polyglot/writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;Writing Documentation and Caring About Developer Mental Health with Lorna Mitchell&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/polyglot"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        Polyglot
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell" alt="Polyglot" src="https://res.cloudinary.com/practicaldev/image/fetch/s--prQztuYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--x4RqpYHb--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/496/4200958a-043c-4854-a785-6877ccac9751.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/polyglot/writing-documentation-and-caring-about-developer-mental-health-with-lorna-mitchell"&gt;
      &lt;img id="episode-profile-image" alt="Writing Documentation and Caring About Developer Mental Health with Lorna Mitchell" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HeRpArfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S6L3li0I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/496/4200958a-043c-4854-a785-6877ccac9751.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;Jonan Scheffler: Hello and welcome to &lt;a href="https://twitter.com/polyglot"&gt;Polyglot&lt;/a&gt;, proudly brought to you by &lt;a href="https://newrelic.com"&gt;New Relic's&lt;/a&gt; developer relations team, &lt;a href="https://therelicans.com"&gt;The Relicans&lt;/a&gt;. Polyglot is about software design. It's about looking beyond languages to the patterns and methods that we as developers use to do our best work. You can join us every week to hear from developers who have stories to share about what has worked for them and may have some opinions about how best to write quality software. We may not always agree, but we are certainly going to have fun, and we will always do our best to level up together. You can find the show notes for this episode and all of The Relicans podcasts on &lt;a href="//developer.newrelic.com/podcasts"&gt;developer.newrelic.com/podcasts&lt;/a&gt;. Thank you so much for joining us. Enjoy the show.&lt;/p&gt;

&lt;p&gt;Ben Greenberg: &lt;a href="https://twitter.com/lornajane"&gt;Lorna Mitchell&lt;/a&gt; is based in Yorkshire, United Kingdom. She is Head of DevRel at &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt; as well as a published author and experienced conference speaker. She has a strong background in open source and a passion for better developer experiences for developers everywhere. You can find out more about Lorna on her website at &lt;a href="https://lornajane.net/"&gt;lornajane.net&lt;/a&gt;. Lorna, welcome to &lt;a href="https://twitter.com/PolyglotShow"&gt;Polyglot&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Lorna Mitchell: Hi, thanks for having me.&lt;/p&gt;

&lt;p&gt;Ben: It is so nice to have you. I was recently on a plane on my way back home because that is the story of so much of developer relations, on a plane somewhere. And I was reading a &lt;a href="https://techcrunch.com/2021/11/11/5-ways-to-improve-mental-health-for-software-developers/"&gt;recent article you wrote in TechCrunch around improving mental health for developers&lt;/a&gt;. And I absolutely loved that article. &lt;/p&gt;

&lt;p&gt;And so much of what you wrote in that article really resonated with me, specifically around when you talked about burnout, and what causes burnout, and how we can help mitigate against burnout. And I wonder if you could share some of those insights with us here on &lt;a href="https://twitter.com/PolyglotShow"&gt;Polyglot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lorna: Yeah, let me try and summarize. It's definitely a topic that's really close to my heart, which is why you see me writing about it and on &lt;a href="https://techcrunch.com/2021/11/11/5-ways-to-improve-mental-health-for-software-developers/"&gt;TechCrunch&lt;/a&gt;, which is amazing. I think burnout for developers for DevRel as well is we can do amazing things. Like, humans are incredible, and they have untold depths. When you really believe in something, isn't it incredible what you can do? &lt;/p&gt;

&lt;p&gt;And I feel like burnout is the opposite when you don't really believe in it, or you're really dragging yourself or being dragged through something. So it's about conflict. It's about there being too much of something that you don't want. Sometimes it's too much of something you do want, and we see that particularly in the startup founders burning out. They literally just burn everything they have to chase their dream. &lt;/p&gt;

&lt;p&gt;Ben: [laughs]&lt;/p&gt;

&lt;p&gt;Lorna: For me, that burnout piece is about taking care of yourself and realizing when something is happening, or something is changing that it is time to look after yourself. And I think this is something that we should be better at as technical professionals. &lt;/p&gt;

&lt;p&gt;You don't wait till the disk is 99% full before you upgrade [chuckles] to new storage. You set the alert level at 80%, and you get a new disk. You deploy it to a bigger cloud or whatever your setup is. So don't wait until you're absolutely broken because the roadmap from there is long.&lt;/p&gt;

&lt;p&gt;Ben: So how do you know when your disk is getting to 99% full when we're talking about burnout? What are some of the cues that you've seen in others or maybe in yourself that says, "Wait, hold on a moment here. I think I'm approaching a crisis moment." And what are some of the signs, and what do you do to help address those?&lt;/p&gt;

&lt;p&gt;Lorna: The signs are, for me, it's definitely negativity. I mean, it's all right to be grumpy once in a while. But if you're grumpy four days out of five, something's wrong, especially in something like software development or developer relations where really, we are doing what we love. We are chasing our dreams. And so when that's gone wrong, I think that's one really big sign.&lt;/p&gt;

&lt;p&gt;I'm remote from my team, and I have been for more than a decade in all sorts of different types of jobs and different employers. And you have small children; you’ll know this; when it's too quiet in the other room, and you suddenly hear the silence, and you run through to find they are cutting up something. &lt;/p&gt;

&lt;p&gt;Ben: Something is wrong when it's too quiet. &lt;/p&gt;

&lt;p&gt;Lorna: Yeah, it's too quiet. It's a little bit like that that you don't get the same engagement on the virtual channels. It's harder to tell when you're not in the office. You might see someone leaving early or coming in late or just looking a bit rubbish. &lt;/p&gt;

&lt;p&gt;And I think for remote teams, this stuff is harder, but it makes it more important that we look out for those signs in each other, in losing interest in hobbies, being less present at work, always being negative. Like, let's talk about it. &lt;/p&gt;

&lt;p&gt;And I would rather reach out to someone and then think I'm a lunatic for deciding they had a problem that didn't exist than not reach out to someone that I could have given some words of support to.&lt;/p&gt;

&lt;p&gt;Ben: So being overly proactive in your support and care for your colleagues because that proactivity might not hurt, but it'll definitely potentially help if they're actually in a crisis situation. &lt;/p&gt;

&lt;p&gt;And I think what you said is particularly prescient around when we actually really love what we're doing, when we care about what we're doing when we're passionate about the things that we're working on, that's when the challenges of burnout can become even more pressing in many ways. That's a really, really good insight. Thank you. &lt;/p&gt;

&lt;p&gt;And you also in that &lt;a href="https://techcrunch.com/2021/11/11/5-ways-to-improve-mental-health-for-software-developers/"&gt;article&lt;/a&gt;, you talked around...so we work in code, we're working in software, whether we're working in core engineering teams or working in developer relations. Our lives gravitate around the cycles of software.&lt;/p&gt;

&lt;p&gt;And you talked about open source, what that culture of open source can come and contribute to our teams, whether our developer relations teams, our engineering teams. How does the culture of open source lend insight, and what kind of insight can it lend to our working teams?&lt;/p&gt;

&lt;p&gt;Lorna: I think increasingly, we are remote now. And if you think about the things that have been built in open source by people who not only have you never met in person but may only know one another by an IRC handle, mailing list, my mind is slightly blown. I look at the number of meetings on my calendar for things that really are not Linux, [laughter], and I wonder why we're not better at this. &lt;/p&gt;

&lt;p&gt;I think the open-source practices of always logging the bug in a formal way, giving a description that somebody else can use to replicate without needing to go back to the original author. My projects, a lot of the reviewers will have merge access. I expect the reviewers to merge. Don't wait for the author again. &lt;/p&gt;

&lt;p&gt;So it's about asynchronous work and trust, giving all the information but also the permission and passing it forward so that everyone can do their best work in turn. And this is important across time zones. It's important across open-source projects where people are not available on a regular schedule. It's maybe your Sunday night. I ran an open-source project for years on purely the occasional Sunday night blitz. &lt;/p&gt;

&lt;p&gt;Ben: [laughs]&lt;/p&gt;

&lt;p&gt;Lorna: And you can do a lot. And I think our developer relations is a bit like that because the interruptions of conference season mean that we are, as I described to my office-based colleagues, very unreliable. Because you'll find the wrong month of the year the whole team is gone for three weeks. Don't talk to us. We are fundamentally not here. &lt;/p&gt;

&lt;p&gt;Ben: Absolutely.&lt;/p&gt;

&lt;p&gt;Lorna: And so being able to set those tasks up and to be able to jump in and make a difference with them at the right time is really important. And I think that's what comes from an open-source culture, which is very respectful of everyone's time because they volunteer.&lt;/p&gt;

&lt;p&gt;Ben: If you take a step back, what you said is absolutely astounding. You look at what has been created over time to this very day and continues in that culture of open source without anyone maybe even knowing each other's full names, not living in the same geographic proximity, not having back-to-back &lt;a href="https://zoom.us/"&gt;Zoom&lt;/a&gt; meetings together. And yet, entire worlds of open source that we all rely upon have been created in this culture of, like you said, accountable, empowered, open-source. &lt;/p&gt;

&lt;p&gt;So it sounds like to me one of the things that people can do is be very intentional in their asynchronous communication, describing things in a way in which that person who's describing it would not need to be reached out to again for clarification unless absolutely necessary. But because they've described it so well, that the work can continue, and trusting and empowering built on that foundation of intentional descriptiveness, intentional accountability. I think that's absolutely profound. You're totally right.&lt;/p&gt;

&lt;p&gt;Lorna: How I try to work with my team is I how try to build things with other people. And again, they might not be full-time. I mean, it is my team now, but this is my first time really officially being in charge. And so the rest of the time, I've just brought people along with me and tried to get people to buy in as a side project or whatever. And you have to respect people's time. And it lets us do our best work, in my opinion.&lt;/p&gt;

&lt;p&gt;Ben: So what ways are you doing then now at fostering and cultivating that culture now that you are the person in charge? The buck stops with you, Lorna. So in what ways are you doing that in your team?&lt;/p&gt;

&lt;p&gt;Lorna: Well, it's brilliant. I just tell people what to do, and they do it. [laughter] It's like playing the game on easy. &lt;/p&gt;

&lt;p&gt;Ben: You just get to do it, and that's it.&lt;/p&gt;

&lt;p&gt;Lorna: [laughs] Yeah, I just assign things to them, and they do it as opposed to having to gain excitement around the project, and tag issues, and ask people nicely or whatever, and that still happens. The big project that I'm working on at work is our new docs portal, and the whole company has input into that. It's very much like an open-source project. In fact, it is an open-source project because it's a public repo as well.&lt;/p&gt;

&lt;p&gt;Ben: So, our listeners, we will link to the public repo for &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt;'s new &lt;a href="https://developer.aiven.io/"&gt;docs portal&lt;/a&gt; as well as the &lt;a href="https://techcrunch.com/2021/11/11/5-ways-to-improve-mental-health-for-software-developers/"&gt;article on TechCrunch&lt;/a&gt; in the show notes once this is published. But talking about the docs portal, it's a great transition because I was looking at that codebase just a few days ago. And you're doing some really interesting things there. &lt;/p&gt;

&lt;p&gt;And I know you have a lot to say about docs as somebody who has thought deeply about what docs mean for developers. And I think we have to start at ground zero, which is why are docs...why is documentation important when you're thinking about developer tooling and developer products?&lt;/p&gt;

&lt;p&gt;Lorna: I think that docs...it's entry-level. We know from the recent surveys...the &lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;Stack Overflow survey&lt;/a&gt; and the &lt;a href="https://octoverse.github.com/"&gt;GitHub State of the Universe&lt;/a&gt; both, I think threw this up as well that people really expect docs, and they rely on them. All of us are new to something sometime. &lt;/p&gt;

&lt;p&gt;And for developer experience, there are lots of things we could do to make things easier. But writing things down is the number one way. It's not the coolest or the most glamorous or the most high-profile way to convey information. And we work in developer relations, and we're famous for all sorts of...we're both streamers and whatever. &lt;/p&gt;

&lt;p&gt;Ben: [laughs]&lt;/p&gt;

&lt;p&gt;Lorna: When you write something down, that content can be searched. It can be discovered by machines. Someone can read it; it can be spoken out loud, it can be translated, it can be read with high contrast. It can also be read by someone on the other side of the world. It's low bandwidth. It can be read in a hurry; someone can search for the keyword on the page. &lt;/p&gt;

&lt;p&gt;It can be read for years from now when someone else is learning the cool technology that I'm excited about today. They don't have to find me giving the talk or find the recording. The information is there. And it's just there to support them and to help them along the way. &lt;/p&gt;

&lt;p&gt;If you don't have documentation, there's no point in having a product because people can't use it. You're not enabling the developer experience if there's nothing there for them to understand and get started with. I've been a writer for a long time, but I'm super passionate about documentation as such an important part of any developer-facing product.&lt;/p&gt;

&lt;p&gt;Ben: Sounds like documentation as written documentation serves as the foundation stone for everything else you build on top of it for all the reasons you enumerated. &lt;/p&gt;

&lt;p&gt;Recently, I was speaking to somebody who was telling me that...and this is an angle I had never really considered, but this person is not neurotypical. And they said that written documentation for them allows them to process the content in their own time and in their own unique modalities. &lt;/p&gt;

&lt;p&gt;Whereas if I'm presenting to them in a stream or in a &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt; video, I get to choose how I present it, whereas, in the written content, they can consume it in the way that is best for them. And honestly, I had never considered that perspective either until that person said it. &lt;/p&gt;

&lt;p&gt;Written content not only is it evergreen for good and for bad sometimes, and it's stable, and it's searchable and indexable. But it also allows the consumer of the content to consume it in any way that they need to consume it without you deciding how that should be consumed. So you start with reading content when you're beginning your documentation for anything you're working on. And it hearkens back to your open-source history.&lt;/p&gt;

&lt;p&gt;Lorna: Yeah, I think so. And I think that kind of low bandwidth, high information, the written content is also easier to have reviewed, to have additions, to have updates in a way that your conference doc or your recording isn't going to. &lt;/p&gt;

&lt;p&gt;Don't get me wrong, I like to publish video, and it's something that we're also working on at &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt;. But if the content is not written down, it's like, pics, or it didn't happen. You have to be able to find that in written form with your favorite search engine in the moment that you need it.&lt;/p&gt;

&lt;p&gt;Ben: Something I think about also is I'm sure &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt; has different audience personas, including junior developers who are just starting out and staff level of senior-level engineers who are maybe looking for an entirely different picture. How do you build documentation, or where do you start when you're building your documentation that addresses those different needs of different developers along their learning journey?&lt;/p&gt;

&lt;p&gt;Lorna: The thing about developers is they're very good at finding their way around. I'm stereotyping, but they're smart, and they are resourceful. So as long as you put all of the resources out, they will typically find things. We also have an excellent search box and all the best structure in the world.&lt;/p&gt;

&lt;p&gt;Ben: Clearly.&lt;/p&gt;

&lt;p&gt;Lorna: Developers just use the search box. I worked really hard on this navigation structure, and you don't care. And that's fine. I'm good with it. The way that we approached it at &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt;...and our developer portal &lt;a href="https://developer.aiven.io/"&gt;developer.aiven.io&lt;/a&gt; is a greenfield project. So it's not been live very long, and it's still a little bit under construction. &lt;/p&gt;

&lt;p&gt;We used existing best practice. So we took the &lt;a href="https://diataxis.fr/"&gt;Diátaxis framework&lt;/a&gt;,  which came originally from &lt;a href="https://www.divio.com/"&gt;Divio&lt;/a&gt;. You might know it also from the &lt;a href="https://docs.djangoproject.com/"&gt;Django docs project&lt;/a&gt;. And it uses some very distinct content types that put the user front and center and thinks about what it is that the user is trying to achieve. So the content types of things like reference, looking up information, learning about something. &lt;/p&gt;

&lt;p&gt;So if you don't know what, for example, a &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; connection pool is, you can find out. And then if you need to set one up, then there's a separate piece which is like the task for that, which will link back to the explanation. But if you're already a senior and you know how to do it, then you feel like you're in the right place. And you could just go ahead and follow those linear tasks in that type of content that matches your need today. &lt;/p&gt;

&lt;p&gt;So we really built on that existing model, and I think that has helped a lot also for consistency. This is the work of hundreds of hands. [laughter] And so there isn't one person keeping a strict voice on it. We're just keeping things consistent and trying to put it together for everyone that needs the information.&lt;/p&gt;

&lt;p&gt;Ben: So the different types of content are connected. But in some ways, they're modularized so that if I don't need the explanatory text, I can get right into the nitty-gritty of how do I do it? But if I need the explanatory text and I may be a senior developer, but I may not have been familiar with this concept, whatever this concept is, I can easily find that explanatory text if I need it. Am I hearing that correctly?&lt;/p&gt;

&lt;p&gt;Lorna: Exactly that. So there's like, I need to do a thing. And remember, no matter how senior you are, some of these things will be things that you need to do on a production database in an urgent manner, which I don't know about you but makes me stupid. [laughter] &lt;/p&gt;

&lt;p&gt;So we try and make it absolutely clear, here are the steps that you need to follow. Here is where you get your access token; here’s what you should type now. Like, here are the things to be aware of. And we try and just walk you through and knowing that whether you're a new person intimidated trying to learn something that feels big or a busy person with not much brain space, we've all been there fixing something between meetings.&lt;/p&gt;

&lt;p&gt;Ben: All of us.&lt;/p&gt;

&lt;p&gt;Lorna: Somebody called out at 4:00 a.m. It doesn't matter. These instructions need to be as good as they can be for everybody. And I feel like that is how it includes everybody. &lt;/p&gt;

&lt;p&gt;Ben: So I'm curious, do you ever write documentation only for a certain developer for, let's say, the senior developer? And if you do or if you don't, why not? And if you do, in what ways might that be different?&lt;/p&gt;

&lt;p&gt;Lorna: I do. I do write for just that senior developer. So you will never see this is how you use the dependency manager. This is how you create a directory. This is how you install &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt;. Because if you're reading those instructions, &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt;'s very detailed documentation is probably not the right place. &lt;/p&gt;

&lt;p&gt;We shouldn't be teaching you a beginner thing in any tech stack. If you come to us for highly available cloud database services, you probably know quite a lot about a lot. You might not know this thing, but we're not going to start at the beginning of the story because we'll lose you. &lt;/p&gt;

&lt;p&gt;And I hope that there's enough there that somebody who vaguely has used &lt;a href="https://nodejs.org/"&gt;Node&lt;/a&gt; before could be like, yes, I can go and read the instructions. I know which packages I need to install. So I'll go and read the docs for pip. I need it differently on my platform, so I'll go and look that up. And that's how developers put things together. &lt;/p&gt;

&lt;p&gt;So I think it's important for us to keep the scope pretty small for each of the different pieces. And the things that don't belong to us are the beginner things. If you don't know how to write &lt;a href="https://www.w3schools.com/sql/sql_intro.asp"&gt;SQL&lt;/a&gt;, you are on the wrong documentation site. Then they find their way, and they put things together. &lt;/p&gt;

&lt;p&gt;So I've tried to just really keep focus on yes, our main customers are pretty experienced developers who need a platform like ours at the kind of scale that we run it. And I keep them in mind. So yeah, I skip the intro, so you know you're in the right place.&lt;/p&gt;

&lt;p&gt;Ben: So it's an assumed knowledge of where you're starting from is, in many ways, a differentiator.&lt;/p&gt;

&lt;p&gt;Lorna: Yeah, I try to do that. And I think it really helps people to realize they're in the right place. I am assuming they do know how to use the &lt;a href="https://redis.io/topics/rediscli"&gt;Redis CLI&lt;/a&gt; tool. So it'll be like, you can connect with &lt;a href="https://redis.io/topics/rediscli"&gt;Redis CLI&lt;/a&gt;. Here's the command. If you've never heard of that, by all means, go and look that up. But I am not going to put the install instructions between you and the bug fix that you urgently need.&lt;/p&gt;

&lt;p&gt;Ben: That makes a lot of sense. And then they look it up, and then they can come back to you when they've looked it up. &lt;/p&gt;

&lt;p&gt;Lorna: Absolutely. &lt;/p&gt;

&lt;p&gt;Ben: That makes a lot of sense. Something else I can geek out about a lot with you is docs portals. I love talking about docs portals as someone who's worked on one for three years. How did you come to the tech stack you chose for your docs portal? First of all, what is the tech stack you chose for the &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt; docs portal, and why did you choose it?&lt;/p&gt;

&lt;p&gt;Lorna: Okay, so we chose &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt;, which is a Python-based static site generator. And I chose it because &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt;'s a Python shop. &lt;/p&gt;

&lt;p&gt;Ben: That's a reasonable choice. &lt;/p&gt;

&lt;p&gt;Lorna: It's a really short story. I knew that I wanted a markup type text-based &lt;a href="https://docs-as-co.de/"&gt;Docs as Code&lt;/a&gt;-type setup. And if you look, which you can't, but if you could have access to the &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt; private repos, there are some very well structured documentation repos there. &lt;/p&gt;

&lt;p&gt;Some of them do have &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt;; some of them are just really well-organized folders of a markup format called &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html"&gt;reStructuredText&lt;/a&gt;, which is absolutely mainstream in the Python community. And I looked at that, and I looked at who our contributors are, and they're mostly employees. So they're mostly Python developers.&lt;/p&gt;

&lt;p&gt;Ben: They're in-house.&lt;/p&gt;

&lt;p&gt;Lorna: Yeah. I mean, it's a public repo. So we do get contributions from outside, and I hope that we'll get more over time. So it's &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html"&gt;reStructuredText&lt;/a&gt;; it’s &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt;. And I also feel like it's really important that when you're choosing tools for an organization, it has to be something that they can be independent with. I hope &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt; won't fire its DevRel team tomorrow. But it can safely operate a &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt; project given the knowledge that it already has in-house. &lt;/p&gt;

&lt;p&gt;The support team could probably fix it out of hours if they needed to. It deploys to &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; alongside all our main websites. So it's looking at what's the closest thing to what we already know? What's familiar to this audience? It's a bit like DevRel, meeting people where they're at. So although I hadn't used &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt; before at all, it seemed like the right thing. And so far, I still think it's the right thing.&lt;/p&gt;

&lt;p&gt;Ben: I think that makes a lot of sense. You chose the resource that you had the best capability amongst your team and amongst the larger organization for. So that's a very legitimate decision for how you choose a docs portal. Are there things in it that you love? Because this is new to you, &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt; is new to you. Are there things that you've really come to enjoy using it or something that stood out for you in &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Lorna: Something that &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt; has in common with, particularly the Python community. I came to it for the tech, for the code, but the community blows me away. It's the support. You're looking for a plugin, and there's always a plugin. You log a bug with the plugin, and it's always politely responded to. &lt;/p&gt;

&lt;p&gt;People just look out for one another; they help one another. Some random stranger will respond on your issue, and it feels very healthy. So yeah, I could tell you about all my favorite plugins in &lt;a href="https://stackshare.io/dcsil/sphinx"&gt;Sphinx&lt;/a&gt;, and that's cool, and these new themes or whatever. But yeah, I came for the tech and stayed for the community.&lt;/p&gt;

&lt;p&gt;Ben: Doesn't that say a lot? Because we talked about what makes a great community, and one of the things that makes great software is the community, and that makes us sustainable. I think you're testimony to that, that you've chosen to stay with it because of that warm, supportive community. &lt;/p&gt;

&lt;p&gt;Something that I think people don't realize is you have had a bit of an incredible journey to the place you're at right now. How did you end up being in the role you're at in &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt;? What was that like? I'm sure you could write an entire book on that journey. But if you can encapsulate how you are where you are right now, how did you end up there?&lt;/p&gt;

&lt;p&gt;Lorna: Well, early in my career, I was a software developer for a really long time. And then I was freelance for a while. I was delivering some training. I was on the conference speaking circuit. &lt;/p&gt;

&lt;p&gt;Now, I was only on the conference speaking circuit because I love to learn things. But conference tickets, if you're a junior or a mid-level developer, are totally out of reach. But they'll give you a ticket if you give a talk. So I was like, barter for your own knowledge.&lt;/p&gt;

&lt;p&gt;Ben: [laughs] Incentivisation right there.&lt;/p&gt;

&lt;p&gt;Lorna: I know. So I learned to speak at conferences, and I did a bunch of stuff. When I was freelance, I also wrote a couple of books. I'm an &lt;a href="https://www.oreilly.com/"&gt;O'Reilly&lt;/a&gt; author. And so you look at all those things. And I was running my own business. I did a bit of technical project management. What does it look like? It looks like developer relations. &lt;/p&gt;

&lt;p&gt;Ben: [laughs]&lt;/p&gt;

&lt;p&gt;Lorna: And so I've been in DevRel for a little bit over five years. And I've done a bunch of different things but essentially databases and APIs. And I write, I speak, and I code. So really, a software engineer is really a back-end sort of scripting person. But I absolutely love to write. &lt;/p&gt;

&lt;p&gt;And I'm a very accomplished speaker, which says I'm good at it. But I don't love it in the same way that I love writing. But it's the most high-profile thing I do, so I'm well known for it. But I really feel like the writing is me, and it makes the biggest impact. And it's the thing I'm the most proud of. &lt;/p&gt;

&lt;p&gt;So I came into DevRel. I've done a few different things within developer relations. I've built a couple of libraries for different things, or I've published some packages, published quite a lot of integrations, given a bunch of talks. I've worked on a couple of docs projects as well. And when I came to join &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt; as to found the developer relations team, I joined as an individual contributor. And they hired two of us at the same time. But that was nearly a year ago.&lt;/p&gt;

&lt;p&gt;Partway through the year, the question came in, "Would you be prepared to run that team?" So today, I run the team, run the strategy, do the hiring, look after the budgets, run the technical blog post content process, run the developer portal. And as you can, I imagine, Ben, because you've worked with me before, interfere on a bunch of other things that I think developers need me to advocate for them about.&lt;/p&gt;

&lt;p&gt;Ben: [laughs] Interfere is not the way I would put it.&lt;/p&gt;

&lt;p&gt;Lorna: [laughs]&lt;/p&gt;

&lt;p&gt;Ben: I would put it that you have a way to find your voice being an advocate for people and the community across all the different sectors of the organization. And you don't feel constrained by your role to do so. Wherever the developer community, wherever developers' voices matter, you will be in that space. As someone who has worked with you firsthand, I can attest to that. &lt;/p&gt;

&lt;p&gt;It's interesting to me. You described all the different things you do. But you do so many different types of work, a multiplicity of kind of content types and areas of work. Do you think that helps you manage going full circle? Do you think it helps you manage longevity you have in a place and your sustainability of that role for you?&lt;/p&gt;

&lt;p&gt;Lorna: I hope so. I've only moved into this management role during the year. And I'll be honest; I’m still finding my feet. As an individual contributor, I think the range of skill sets is amazing for two reasons: one is content reuse. &lt;/p&gt;

&lt;p&gt;Yes, written content is the foundation stone. But there are lots of reasons to publish in other formats, to reach other people who prefer a different way. And so being able to write your own demo, and then write the docs, the landing pages, give the talks, record the videos, and whatever else and then hear the feedback from people. &lt;/p&gt;

&lt;p&gt;If you publish whichever library for an API and then you go and demo it, and someone complains to you, then you're really in touch with those people. So I really enjoy not being siloed for a DevRel role. But also, the variety really helps. &lt;/p&gt;

&lt;p&gt;I often talk about the seasons of DevRel, which are certain times of the year, we're difficult to get hold of because all of the events are in the second week in October for reasons that are still unclear to me after ten years.&lt;/p&gt;

&lt;p&gt;Ben: Just to keep us in the air all the time, basically. &lt;/p&gt;

&lt;p&gt;Lorna: Yeah, but then you find sometimes in the year you can go four or six weeks with no travel because there are no events. Now, why is that? And it's a bit different between geographies. &lt;/p&gt;

&lt;p&gt;But I've come to think that the skills and the moving of the seasons, knowing right now we're doing a massive...the biggest piece of the docs migration is happening now in my team because we're all on the ground until the end of January. And that's like, boom.&lt;/p&gt;

&lt;p&gt;Ben: This is the time you're all present.&lt;/p&gt;

&lt;p&gt;Lorna: It's the winter season. Other people think there are holidays and disruption to work schedules. They're actually the least disruptive times. December is the right time to ask developer relations to do something. &lt;/p&gt;

&lt;p&gt;So I think that difference in skills but also the constant changing of the tides has really helped me with my longevity. And because it's quite flexible often, you can choose what you work on. If you have writer's block, there's always a bug to fix in a library. Then that has helped me to find the balance. The week that we moved house, I was incredibly, incredibly stressed. And I wrote almost a whole PHP database library. That's how my brain works.&lt;/p&gt;

&lt;p&gt;Ben: That sounds like a perfectly suited brain for developer relations if I say so myself. [laughs]&lt;/p&gt;

&lt;p&gt;Lorna: I like it. &lt;/p&gt;

&lt;p&gt;Ben: That's amazing. As you're now shipping a whole chunk of the docs in what others call the holiday season, but DevRel calls the busy time for getting work done, how do you know you'll be successful? How do you measure yourself with documentation?&lt;/p&gt;

&lt;p&gt;Lorna: Yeah, this is a really tricky one. And part of the problem could be opportunity. With the &lt;a href="https://developer.aiven.io/"&gt;Aiven dev portal&lt;/a&gt;, it's really new. So I don't even have a baseline status, really.&lt;/p&gt;

&lt;p&gt;Ben: You don't have a baseline. It's brand new.&lt;/p&gt;

&lt;p&gt;Lorna: It hasn't been live that long. So we're migrating content off an older site that didn't really have content design but has really, really good information, just the format's a bit hit and miss, and some of it is outdated. &lt;/p&gt;

&lt;p&gt;Ben: Well, that's a problem as well. &lt;/p&gt;

&lt;p&gt;Lorna: So being able to grab that and read old docs and try stuff and then produce new instructions or new resources that fit the new world.&lt;/p&gt;

&lt;p&gt;Ben: So you're running through the old docs as you're doing it. &lt;/p&gt;

&lt;p&gt;Lorna: Yes. So it's like a big migration; all the screenshots need updating and everything. You know &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt; has 9 or 10 open-source data products on its platform. I'm getting to know all of them.&lt;/p&gt;

&lt;p&gt;Ben: [chuckles] In this process.&lt;/p&gt;

&lt;p&gt;Lorna: It's like the best study ever. So yeah, how are we successful? I mean, getting the migration done is a big one because there are lots of new resources that I want to build. But because we're now in the middle of the migration, we're confusing people by having stuff in multiple locations. &lt;/p&gt;

&lt;p&gt;So the initial set of success is...in developer relations, we'd call this activity metrics. Like, is a thing done? I would like to move it forward to be did people find what they were looking for? How many searches didn't return anything? Or how many...we've got feedback, and it's a public project. So &lt;a href="https://github.com/features/issues"&gt;GitHub issues&lt;/a&gt; for why don't you have this in Java, and those types of things are further down the line. &lt;/p&gt;

&lt;p&gt;I think our success will be measured by do people contribute to this? It is a community project. We know that we have awesome, active community members at &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt;. Is it something that we can all work on together? Do our colleagues contribute, and do they find that easy? Because advocacy is so often internal, enabling what happens inside the company. &lt;/p&gt;

&lt;p&gt;So yeah, there are a lot of things there. The documentation is not part of the funnel. We report to marketing. So I get into some hilarious meetings where I'm like, no, that is not what is happening here. And so yes, maybe clicking through, but I always think it's more important that people click through from the web interface into the docs to learn something. I would rather see that than necessarily going the other way into the product.&lt;/p&gt;

&lt;p&gt;Ben: Than the other way. I think that's a really good perspective. And I also really like how you said that your goals will move as the project matures. And what success looks like is going to change through the lifecycle of the project. &lt;/p&gt;

&lt;p&gt;Right now, you're managing the liminality of being between the two different platforms. And it's trying to figure out how successful you are and keeping your users not utterly confused between the old and the new. &lt;/p&gt;

&lt;p&gt;And then what you said at the end where I might manage and look to manage some metrics around community engagement with the docs. And are people contributing? I don't think a lot of places think enough about that, what that means, that I have something out there in the open. Is the larger user base running &lt;a href="https://aiven.io/"&gt;Aiven&lt;/a&gt;? Is it actually using it or not? &lt;/p&gt;

&lt;p&gt;Are they bringing back into it their shared learnings, their frustrations, and how they overcame it? And maybe in this doc, if you wrote it this way, and raising an issue or raising a pull request, or what have you. I think that's a really good and, I think, fascinating metric to actually ponder on for a little bit as well. Amazing. &lt;/p&gt;

&lt;p&gt;Well, &lt;a href="https://twitter.com/lornajane"&gt;Lorna&lt;/a&gt;, I want to thank you for your time. This has been a journey through burnout, and through documentation, and talking about open-source culture and what it can bring into our working cultures and docs portals. It's been wonderful. Thank you so much, Lorna, for joining us on &lt;a href="https://twitter.com/PolyglotShow"&gt;Polyglot&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Lorna: It's my pleasure. Thanks so much for having me.&lt;/p&gt;

&lt;p&gt;Jonan: Thank you so much for joining us. We really appreciate it. You can find the show notes for this episode along with all of the rest of The Relicans podcasts on &lt;a href="https://therelicans.com"&gt;therelicans.com&lt;/a&gt;. In fact, most anything The Relicans get up to online will be on that site. We'll see you next week. Take care.&lt;/p&gt;

</description>
      <category>mentalhealth</category>
      <category>podcast</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>An Introduction to Tech Debt (And Why It Can Change Your Career)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Wed, 12 Jan 2022 14:57:26 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/an-introduction-to-tech-debt-and-why-it-can-change-your-career-381m</link>
      <guid>https://dev.to/michaelmangial1/an-introduction-to-tech-debt-and-why-it-can-change-your-career-381m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;Recently, I have found much success with a simple planning system.&lt;/p&gt;

&lt;p&gt;Every season, I jot down a list of goals.&lt;/p&gt;

&lt;p&gt;Every week, I jot down a list of things I want to get done that help me accomplish everyday tasks and work towards my seasonal goals.&lt;/p&gt;

&lt;p&gt;Every day, I prioritize from items from the weekly list.&lt;/p&gt;

&lt;p&gt;Additionally, I have a &lt;em&gt;someday&lt;/em&gt; list. A list of projects and goals that I would like to do at some undetermined time in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--522NXxkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0pbhg9wgyrcnnsapo55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--522NXxkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0pbhg9wgyrcnnsapo55.png" alt="introduction to tech debt" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In software development, &lt;em&gt;tech debt&lt;/em&gt; is basically the "someday" list of your codebase.&lt;/p&gt;

&lt;p&gt;It is a collection of things that would be ideal to get done but are not prioritized.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-log-it"&gt;
  &lt;/a&gt;
  Why log it?
&lt;/h2&gt;

&lt;p&gt;Ok, so that's tech debt in a gist, but why should developers bother with tracking it?&lt;/p&gt;

&lt;p&gt;Good question.&lt;/p&gt;

&lt;p&gt;There are several reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you don't track it, you have to rely solely upon your memory. At some point or another, our memories will fail us.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It helps communicate that ideal work is worth doing, even if we're ok with not doing it right this second.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It provides assurance that if you can't do the ideal things now that you can still be able to do them later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It helps to generate a longterm vision and goal of a codebase.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-log-it"&gt;
  &lt;/a&gt;
  How do I log it?
&lt;/h2&gt;

&lt;p&gt;Whatever works. I tend to create a wiki page in the GitHub repository of the codebase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-log-exactly"&gt;
  &lt;/a&gt;
  What do I log exactly?
&lt;/h2&gt;

&lt;p&gt;Again, tech debt is anything that you'd like to do someday.&lt;/p&gt;

&lt;p&gt;Frequently, this includes upgrading dependencies, implementing new design patterns, refactoring a decent portion of the code, automating manual tasks, adopting new technologies, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Upgrade to Tailwind v3&lt;/li&gt;
&lt;li&gt;Upgrade to Next v12&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/michaelmangial1/wrapping-react-springs-usespring-hook-a-use-case-for-wrapping-external-libraries-18lp"&gt;Create React spring animation hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/michaelmangial1/wrapping-react-querys-usequery-a-use-case-for-wrapping-external-libraries-34ed"&gt;Wrap React Query's &lt;code&gt;useQuery&lt;/code&gt; hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Move shared, generic components into the design system&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/michaelmangial1/towards-perfecting-code-organization-m8e"&gt;Adopt a New Way of Organizing the Codebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/michaelmangial1/help-i-need-to-organize-my-global-state-in-my-react-application-14lk"&gt;Reorganize the global state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...etc...&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-know-whether-something-is-a-someday-ideal-or-a-present-requirement"&gt;
  &lt;/a&gt;
  How do I know whether something is a "someday" ideal or a present requirement?
&lt;/h2&gt;

&lt;p&gt;This is the million dollar question. There is no right answer.&lt;/p&gt;

&lt;p&gt;I cannot provide a detailed blueprint, but I can provide a couple guiding principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If the thought of doing it "someday" is stressful, it likely should be done in the present.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you have time to do it? If not, then you either need to negotiate for time or accept the less-than-ideal situation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-it-prioritizeddone"&gt;
  &lt;/a&gt;
  How do I get it prioritized/done?
&lt;/h2&gt;

&lt;p&gt;For some, the concept of a "someday" list doesn't sound all that assuring. There can be memories of previous "someday" items that never seen the light of day.&lt;/p&gt;

&lt;p&gt;I get that.&lt;/p&gt;

&lt;p&gt;While thinking of tech debt as a "someday" list is the easiest way to describe it, perhaps it is more appropriate to think of it as a kanban board of "stretch goals."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wOxS_d2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2aadpbs5affgo9bz2ni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wOxS_d2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2aadpbs5affgo9bz2ni.png" alt="introduction to tech debt" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Stretch goals" are things that you prioritize to get done but don't have to get done for you to sleep at night.&lt;/p&gt;

&lt;p&gt;Generally, I have found that the best time to prioritize tech debt is around the lifecycle of projects.&lt;/p&gt;

&lt;p&gt;Tech debt should be treated as stretch goals added to the main requirements of a project.&lt;/p&gt;

&lt;p&gt;If you are a developer on a product team, then you usually have a cadence of 1) planning for a project, 2) starting a project, and 3) wrapping up a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8rPGPop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcgusaxq6nqxudv4xuel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8rPGPop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcgusaxq6nqxudv4xuel.png" alt="introduction to tech debt" width="800" height="533"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you plan a project, you can prioritize a few interesting tech debt items to be completed thorough the project (although treating them as stretch goals).&lt;/p&gt;

&lt;p&gt;Although it's best to treat them as stretch goals, I would recommend padding your estimates for a project with them in mind.&lt;/p&gt;

&lt;p&gt;They are not stretch goals because they shouldn't be accounted for in estimate. Rather, they are stretch goals because they can be the first things scope needs to be cut in an unexpected event.&lt;/p&gt;

&lt;p&gt;In addition to prioritizing tech debt items in the project planning phase, I have also found that a good time to do them is as soon as a project wraps up.&lt;/p&gt;

&lt;p&gt;Usually, the end of a project is a slower time where a launched project is being monitored and the next project is getting finalized for planning.&lt;/p&gt;

&lt;p&gt;During this slower time, take full advantage to complete tech debt items.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-tips"&gt;
  &lt;/a&gt;
  Final Tips
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-it-is-nice-when-a-team-has-a-formal-expectationprocess-for-completing-tech-debt-items-around-projects-but-take-initiative-even-if-such-a-formal-process-does-not-exist-with-time-you-may-be-able-to-advocate-for-things-to-be-formalized"&gt;
  &lt;/a&gt;
  1. It is nice when a team has a formal expectation/process for completing tech debt items around projects, but take initiative even if such a formal process does not exist. With time, you may be able to advocate for things to be formalized.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#2-tackle-tech-debt-items-in-separate-pull-requests-that-way-reviewers-can-treat-it-separately-from-the-musthave-project-pull-requests"&gt;
  &lt;/a&gt;
  2. Tackle tech debt items in separate pull requests. That way, reviewers can treat it separately from the must-have project pull requests.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#3-keep-track-of-completed-tech-debt-items"&gt;
  &lt;/a&gt;
  3. Keep track of completed tech debt items.
&lt;/h3&gt;

&lt;p&gt;Like with a todo list, I like to see the work that I've accomplished. And, tracking every task that is done can bring a rewarding sense of accomplishment, or it can be an indicator that work needs to be delegated.&lt;/p&gt;

&lt;p&gt;Completed tech debt items are also great things to include in your yearly reviews, resumes, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-take-pride-in-your-craft"&gt;
  &lt;/a&gt;
  4. Take pride in your craft.
&lt;/h3&gt;

&lt;p&gt;Coding is a craft. Tech debt is a way of improving your craft.&lt;/p&gt;

&lt;p&gt;Even though managers may not see (nor ask) about the technical details of your craft, focusing on your craft by making the code ideal will help you stay motivated and relevant for future career opportunities.&lt;/p&gt;

&lt;p&gt;But don't get me wrong, people don't need to know the technical details to see the value of someone who is taking their craft seriously and improving a team because of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-find-ways-to-share-your-tech-debt-work-with-peers"&gt;
  &lt;/a&gt;
  5. Find ways to share your tech debt work with peers.
&lt;/h3&gt;

&lt;p&gt;I'm a big fan of &lt;a href="https://www.michaelmang.dev/blog/the-developers-content-model"&gt;The Developer's Content Model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a word, you take the things you are working on and present them to others in unique ways.&lt;/p&gt;

&lt;p&gt;You can present your work to a global audience by tweeting things you learned, sharing gists, recording videos, and/or writing blog posts on the work you've done.&lt;/p&gt;

&lt;p&gt;When you see people of a global audience take interest in your learnings, it can be very rewarding.&lt;/p&gt;

&lt;p&gt;Moreover, it helps you build a portfolio. Even for your current role, you can take tweets and blog posts and repurpose them as documentation for your team.&lt;/p&gt;

&lt;p&gt;You can also present your work to a broader audience within your company.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIqlyWLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kddta4v467jdecemfpcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIqlyWLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kddta4v467jdecemfpcf.png" alt="introduction to tech debt" width="880" height="587"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A good way to do this is by either doing a tech talk (gather a group of engineers and present your learnings in a 15-30 minute slide deck presentation) and/or by doing a &lt;a href="https://www.michaelmang.dev/blog/code-show-and-tell"&gt;show-and-tell&lt;/a&gt; (gather a group of engineers and have everyone take up to 5-10 minutes to highlight something you learned recently).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you can see that tech debt is much more than tracking "we really should have done this but we couldn't so maybe we'll get to it but probably not" type of items.&lt;/p&gt;

&lt;p&gt;Tech debt is a powerful way to improve a codebase, develop your craft, and gain influence and respect among peers.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>CSS Methodologies</title>
      <author>Sameer Trimade</author>
      <pubDate>Wed, 12 Jan 2022 14:18:10 +0000</pubDate>
      <link>https://dev.to/sameer_trimade/css-methodologies-2cl0</link>
      <guid>https://dev.to/sameer_trimade/css-methodologies-2cl0</guid>
      <description>&lt;p&gt;&lt;strong&gt;Writing CSS is easy. Making it scalable and maintainable is not.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You must have experienced the scenario when you update the CSS of your application and you broke something else?&lt;/li&gt;
&lt;li&gt;did you wonder where the CSS you have to change is coming from?&lt;/li&gt;
&lt;li&gt;did you update some HTML and it broke your design?&lt;/li&gt;
&lt;li&gt;did you write some CSS and wonder why it wasn’t applied to the browser and then ultimately discovered that it was overridden by some other CSS?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is when you decide there is a better way and come across some CSS methodologies, which seems like a good solution to all those headaches.&lt;/p&gt;

&lt;p&gt;There are multiple CSS methodologies , but at the end of the day, it’s all about what fits your projects.&lt;/p&gt;

&lt;p&gt;Also, you may think you’re perfectly fine without them and you may be right. But you might be missing out on big improvements too. You should at least have an idea on what’s out there and why you're or you’re not using it.&lt;/p&gt;

&lt;p&gt;⭐ It’s all about maintaining your CSS code and reusability ⭐ &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Big Reveal !!!&lt;/strong&gt;&lt;br&gt;
There is no best CSS methodology. It depends on you and the type of your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top 3 CSS methodologies:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;OOCSS (Object Oriented CSS)&lt;/li&gt;
&lt;li&gt;BEM (Block Element Modifier)&lt;/li&gt;
&lt;li&gt;SMACSS (Scalable and Modular Architecture CSS)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Applying a modular approach to your CSS will save you hours.&lt;br&gt;
Web components are the future of the web and starting now will make your life easier.&lt;br&gt;
Each piece of your application helps you build the final results and you should be able to move or replace it without breaking anything else. This is the goal most CSS methodologies aim for.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#oocss-methodology"&gt;
  &lt;/a&gt;
  OOCSS Methodology
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OOCSS stands for Object Oriented CSS.&lt;/li&gt;
&lt;li&gt;OOCSS is concerned with converting your regular CSS styles to reusable classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OOCSS has two major principles&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;1. Separate structure and skin:&lt;/strong&gt;&lt;br&gt;
The structure refers to invisible styles applied to elements (width, height, margin, padding) while the skin is the visible styles (colors, fonts, shadows).&lt;br&gt;
OOCSS defines these 2 separately. For example, Below there is a random snippet of CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.button-1 {
    width: 100px;
    height: 50px;
    background: #000;
    color: #fff;
 }

 .button-2 {
    width: 100px;
    height: 50px;
    background: #fff;
    color: #333;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see in the previous example that both classes have the same structure but differs in the skin properties. OOCSS deals with this situation and separate them as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.button-1 {
    background: #000;
    color: #fff;
 }

 .button-2 {
    background: #fff;
    color: #333;
 }

 .btn-structure {
    width: 100px;
    height: 50px;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we don't have redundant code and the .btn-structure class can be used on any button having the same structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Separate container and content:&lt;/strong&gt;&lt;br&gt;
Content refers to the elements such as images, paragraphs, divs which are nested inside other elements that serve as Containers. CSS Styles used for Content elements should be independent of the Container class so that it can be used without restrictions on their parent element. For example, this is a random piece of code dealing with the styling for a sidebar component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#sidebar {
    left: 0;
    margin: 3px;
    position: absolute;
    width: 140px;
}

#sidebar .list {
    margin: 3px;
}
#sidebar .list .list-header {
    font-size: 16px;
    color: red;
} 

#sidebar .list .list-body {
    font-size: 12px;
    color: #FFF;
    background-color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if we separate content from container, it will something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#sidebar {
  padding: 2px;
  left: 0;
  margin: 3px;
  position: absolute;
  width: 140px;
}

.list {
  margin: 3px;
}

.list-header {
  font-size: 16px;
  color: red
}

.list-body {
  font-size: 12px;
  color: #FFF;
  background-color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now these classes can be used in many situations without the restriction of having a parent with an id of &lt;strong&gt;#sidebar&lt;/strong&gt; or &lt;strong&gt;.list&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of OOCSS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved Scalability and Reusability.&lt;/li&gt;
&lt;li&gt;Better Readability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of OOCSS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is not suitable for small projects.&lt;/li&gt;
&lt;li&gt;It increases number of classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bem-methodology"&gt;
  &lt;/a&gt;
  BEM Methodology
&lt;/h2&gt;

&lt;p&gt;BEM stands for Block-Element-Modifier.&lt;br&gt;
When the use of CSS is no longer to just style the personal websites or small projects and moves to large, scalable and complex projects, there is a need to organize and think about the architecture for the CSS. Simple things like class naming can become a huge problem in future maintenance.&lt;br&gt;
To correct problems like these, some organizational architectures and methodologies were created and one of the most popular is BEMCSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is BEM?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The acronym comes from &lt;strong&gt;Block-Element-Modifier&lt;/strong&gt;, which is basically a method to create names for the CSS classes. &lt;/li&gt;
&lt;li&gt;The idea is to create a rigid standard for class naming, making it easy to read and understand what the class does and what component it targets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⭐ The class names follow the line&lt;br&gt;
&lt;strong&gt;.block__element--modifier {}&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One point to Note here is that there are Two underlines that separate the block from the element and two lines that separate the element from the modifier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Block:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A block is an independent, modular UI component. &lt;/li&gt;
&lt;li&gt;A block may be composed of multiple HTML elements, or even multiple blocks. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So basically a Block is the element or component that a class is assigned to. You don't need to respect the name of the element, the idea is that it describes what the component is doing in the scope of the project. For example, if you create a class for a login form, the name would not be .form, even though in HTML you do create a form.&lt;br&gt;
In the scope of the project the class could be &lt;strong&gt;.Login&lt;/strong&gt;, which would make it clear to everyone what it is about. A general naming rule is to separate compound names with a single dash for example,  &lt;strong&gt;.select-box-container&lt;/strong&gt; would be the correct way to write a name with three words.&lt;/p&gt;

&lt;p&gt;For example, &lt;strong&gt;.login&lt;/strong&gt;, &lt;strong&gt;.select-box-container&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Element:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An element is a component of a block. Each element serves a singular purpose.&lt;/li&gt;
&lt;li&gt;For example, if you have a navigation menu block, then elements of it might be your navigation menu’s links, which in turn might be in the form of list items (li elements) and anchor tag’s (a elements).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Element are internal parts of the component. In the example shown in previous slide, inside the login block there would be multiple inputs for the username, email, password and few action button's.&lt;br&gt;
So the CSS class naming convention for block-element will be like,&lt;br&gt;
&lt;strong&gt;.login__username&lt;/strong&gt;, &lt;strong&gt;.login__email&lt;/strong&gt;, &lt;strong&gt;.login__password&lt;/strong&gt;, &lt;strong&gt;.login__button&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modifier:&lt;/strong&gt;&lt;br&gt;
A modifier is a CSS class that changes the default presentation of a block or element.&lt;br&gt;
For example, in the login form when the user put something that does not match the password or email in the inputs and there was a check to confirm this, the visual feedback of the error, for example, could be done by changing the colors of the edges of the incorrect inputs to red. The modifier class that would be used to create this case will be in this way:&lt;br&gt;
 &lt;strong&gt;.login__email--error {}&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The modifiers can also be used for the block as a whole, and can be applied directly over it in the class, ignoring the existence of the elements. For example, &lt;strong&gt;.login--error {}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Point to remember:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have to remember that each element has its class in an isolated way. For example, if an element has another element within it, it is not correct to join the elements into a single class, such as:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.block__class1__class2__class3 {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In these cases each element has its own class, ignoring the order of the HTML structure, such as:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.block {}
.block__class1 {}
.block__class2 {}
.block__class3 {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Advantages of using BEM:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BEM is a very robust class-naming convention. &lt;/li&gt;
&lt;li&gt;It successfully distinguishes the different concerns that classes are used for.&lt;/li&gt;
&lt;li&gt;It is easy to see in the markup which classes are related to one another.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of using BEM:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The class names can end up being long and ugly.&lt;/li&gt;
&lt;li&gt;The naming convention is not intuitive to inexperienced developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#smacss-methodology"&gt;
  &lt;/a&gt;
  SMACSS Methodology
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SMACSS stands for Scalable and Modular Architecture for CSS.&lt;/li&gt;
&lt;li&gt;SMACSS offers a simpler naming convention than BEM.&lt;/li&gt;
&lt;li&gt;There are no class names for base styles because only type selectors like { h1, p, a, etc. } are used for those.&lt;/li&gt;
&lt;li&gt; Modules are given their own unique class names. Also, in SMACSS the Sub-components and variations are prefixed with the name of their parent module.&lt;/li&gt;
&lt;li&gt;SMACSS is a style guide rather than a framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SMACSS is all about organising your CSS in &lt;strong&gt;5 Categories&lt;/strong&gt;:&lt;br&gt;
1) &lt;strong&gt;Base:&lt;/strong&gt; Base rule is applied to an element using an element selector, a descendent selector, or a child selector, along with any pseudo-classes. It is defining the default styling for how that element should look in all occurrences on the page.&lt;br&gt;
This category include applying CSS to the selector. No CSS is applied to classes or id here. This is to reset browser rules and set a base style for elements which are going to be consistent and reused. &lt;br&gt;
In this category you are defining the default style for your elements. This can include html, body, h1, h2, h3, h4, h5, h6, a, img.&lt;/p&gt;

&lt;p&gt;An example for the BASE rule is given here,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body, form {
  margin: 0;
  padding: 0;
}

a {
  color: #039;
}

a:hover {
  color: #03F;    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) &lt;strong&gt;Layout:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is where the style used to lay out your pages will sit. It should be separated from your module style for flexibility. &lt;/li&gt;
&lt;li&gt;Layout styles can also be divided into major and minor styles based on reuse. &lt;/li&gt;
&lt;li&gt;Major layout styles such as header and footer are traditionally styled using ID selectors but it takes time to think about the elements that are common across all components of the page and use class selectors where appropriate. &lt;/li&gt;
&lt;li&gt;Therefore, Usually layout modules are not many so id selector can be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example for the LAYOUT rule is given here,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#header, #article, #footer {
  width: 960px;
  margin: auto;
}

#article {
  border: solid #CCC;
  border-width: 1px 0 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) &lt;strong&gt;Module:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A module is a part or a component of your page. Your menu, dialog box, download list or any widget you have on your page can be a module.&lt;/li&gt;
&lt;li&gt;A module is independent from your layout so it can live anywhere in you application.&lt;/li&gt;
&lt;li&gt;You should be able to copy/paste the html and move somewhere else, and it will look and behave the same.&lt;/li&gt;
&lt;li&gt;Each Module should be designed to exist as a standalone component. In doing so, the page will be more flexible. If done right, Modules can easily be moved to different parts of the layout without breaking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example for the MODULE rule is given here,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul class="tabnav"&amp;gt;
    &amp;lt;li class="" tabnav__item"&amp;gt;&amp;lt;a href="" class="tabnav__link"&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=""&amp;gt;2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=""&amp;gt;3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=""&amp;gt;4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.tabnav {
  display: flex;
}

.tabnav li {
  border-top: 1px solid black;
  border-right: 1px solid black;
  border-bottom: 1px solid black;
}

.tabnav li:first-child {
  border-left: 1px solid black;
}

.tabnav li a {
  display: block;
  padding: 10px 30px;
  text-decoration: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4) &lt;strong&gt;State:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A state will be a style which modifies or overrides other rules. &lt;/li&gt;
&lt;li&gt;Good practise is to prefix or add a namespace to the classes which fall under this category like &lt;strong&gt;is-&lt;/strong&gt; or &lt;strong&gt;has-&lt;/strong&gt; --&amp;gt; is-hidden, is-displayed, is-collapsed, has-children, etc.&lt;/li&gt;
&lt;li&gt;A great example is accordion when collapsing or expanding elements. Using a is-collapsed class will make sure your element is collapsed. &lt;/li&gt;
&lt;li&gt;This is a good place to use !important (and probably the only one) as you want this state to be applied no matter what.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.is-active {
    background-color: red;
}

.is-hidden {
    pointer-events: none;
    color: black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5) &lt;strong&gt;Theme:&lt;/strong&gt;&lt;br&gt;
In Theme rule, the idea is to have a file called theme.css where you can define all the theme rules. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// in module-name.css
.mod {
    border: 1px solid;
}

// in theme.css
.mod {
    border-color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Advantages of using SMACSS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modular.&lt;/li&gt;
&lt;li&gt;Flexible.&lt;/li&gt;
&lt;li&gt;Better file organisation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of using SMACSS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No specific naming convention to write a class.&lt;/li&gt;
&lt;li&gt;Modules and submodules can be hard to identify.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Thank you for reading this blog post!!! 🙂 *&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beyond a JPEG: NFT as a Primary Key</title>
      <author>Austin Vance</author>
      <pubDate>Wed, 12 Jan 2022 14:17:10 +0000</pubDate>
      <link>https://dev.to/focusedlabs/beyond-a-jpeg-nft-as-a-primary-key-1nfo</link>
      <guid>https://dev.to/focusedlabs/beyond-a-jpeg-nft-as-a-primary-key-1nfo</guid>
      <description>&lt;p&gt;These days, we most often see NFTs used to record the ownership information of &lt;a href="https://www.bloomberg.com/news/articles/2021-03-11/beeple-everydays-nft-sells-at-art-auction-for-60-million-paid-in-ether"&gt;artwork&lt;/a&gt;. There are the pie-in-the-sky folks who think NFTs will become a new standard for ownership for everything from &lt;a href="https://www.forbes.com/sites/nataliakarayaneva/2021/11/24/real-estate-nfts-how-it-began/?sh=1f3f8d033b12"&gt;houses&lt;/a&gt;, to &lt;a href="https://cointelegraph.com/news/rapper-nas-to-let-fans-own-part-of-his-music-through-nfts"&gt;music&lt;/a&gt;, to &lt;a href="https://www.bbc.com/news/technology-59568929"&gt;in-game items&lt;/a&gt; - only time will tell.&lt;/p&gt;

&lt;p&gt;NFTs are powerful, but they ​get a bad rap. I don't have strong opinions about the disruptive nature of NFTs or how they affect art, games, or anything else. I do see that the "&lt;em&gt;Non-Fungible&lt;/em&gt;" attribute of an NFT has some remarkable properties that allow smart contract developers to store state in a permissionless manner and enable that state to be transferred or sold.&lt;br&gt;
​&lt;br&gt;
Ok, I admit that's rather abstract and confusing. Since this is a dev blog, let's build an app that uses an NFT contract and holds information specific to a user.&lt;/p&gt;

&lt;p&gt;Before we dive in, this is not revolutionary. Several projects already do this. The &lt;a href="https://mai.finance"&gt;QiDAO&lt;/a&gt; uses &lt;a href="https://docs.mai.finance/functions/smart-contract-functions"&gt;NFTs to manage loan ownership&lt;/a&gt; and &lt;a href="https://uniswap.org/blog/uniswap-v3"&gt;Uniswap V3&lt;/a&gt; uses NFTs to manage a Liquidity Position. Before the release of V3, Uniswap recorded Liquidity by issuing the liquidity provider an LP Token. These tokens are an &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/"&gt;ERC-20&lt;/a&gt; token, and ERC-20's are fungible. Fungibility means that one token is the same as another. Think if someone hands you a 1€ note. That note is the same as the other 1€'s in your wallet. The ERC-20's are 100% transferable, farmable, and sellable, but they cannot store any secondary information about a Liquidity Position.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NFTs allow for encapsulation and transfer and sale of metadata in a permissionless manner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uniswap V3 enables the addition of metadata to a liquidity position. Instead of issuing an ERC-20 token to represent a liquidity position, they issue an &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/"&gt;ERC-721 (NFT)&lt;/a&gt;. With that ERC-721, Uniswap can now add unique features (like impermanent loss protection) to each liquidity position.&lt;/p&gt;

&lt;p&gt;How cool is that! But how does it work? Let's build it.&lt;/p&gt;



&lt;p&gt;Without giving too much background, at Focused Labs, we offer a blog bounty and a bonus for blogging streaks. The more frequently the company blogs, the larger the blog bounty becomes.&lt;/p&gt;

&lt;p&gt;I want to move this bounty from a spreadsheet to the blockchain and use an NFT to identify wallets contributing a blog to the streak.&lt;/p&gt;

&lt;p&gt;We will need an ERC-721 contract. Let's use &lt;a href="https://openzeppelin.com/"&gt;OpenZeppelin&lt;/a&gt; to enforce the correct interface for our NFT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;// contracts/FocusedBlogPost.sol
// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/ERC721.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/utils/Counters.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;const&lt;/span&gt; 
    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FocusedBlogPost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"FCSD"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;publishBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt;
        &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever we call &lt;code&gt;publishBlog()&lt;/code&gt; with an address, we will mint and transfer an NFT to the blogger.&lt;/p&gt;

&lt;p&gt;A new blog must be published every two weeks to earn a streak. Each week at least one new blog post goes out our streak counter increases. This streak counter is a multiple on our Blog Bounty! Now let’s set up our contract to add logic around a streak.&lt;/p&gt;

&lt;p&gt;Let's start by tracking when new posts are published.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;publishedAt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;originalAuthor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="c1"&gt;// two weeks in seconds
&lt;/span&gt;    &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="k"&gt;constant&lt;/span&gt; &lt;span class="n"&gt;twoWeeks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// map of NFT ids to Blog Posts
&lt;/span&gt;    &lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;publishBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt;
    &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...
&lt;/span&gt;        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newPostId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newPostId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;publishedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;originalAuthor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="c1"&gt;// ...
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now every time a new blog post is published, we not only create an NFT for the post, but we record when it was published and keep track of the original author.&lt;/p&gt;

&lt;p&gt;We still don't track a streak, though, so let's add a new method to our token contract.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;SafeMath&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
     &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getCurrentStreak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;currentBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
            &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;previousBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publishedAt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;previousBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publishedAt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;twoWeeks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use OpenZeppelin's &lt;code&gt;ERC721Enumerable&lt;/code&gt;; this gives us a few new methods to loop through each NFT we have minted. Then we can check the timestamp of each &lt;code&gt;BlogPosts.publishedAt&lt;/code&gt;. Pretty easy, right?!&lt;/p&gt;

&lt;p&gt;In a future part of this series, we will continue to add features to the NFT, allowing for payouts to streak contributors and adding validations like only increasing a streak if the author isn't in the current streak.&lt;/p&gt;




&lt;p&gt;Although this example is a bit contrived, honestly, why would someone want to transfer their streak? I think the practical applications are straightforward.&lt;/p&gt;

&lt;p&gt;The NFT can act as a unique identifier, recording metadata about an event or individual actions. A dApp can then use that NFT to make decisions like providing access to a "secret" website or paying a dividend for contributing a blogpost.&lt;/p&gt;

&lt;p&gt;Source code is available on &lt;a href="https://github.com/focused-labs/NFTs-for-more-than-just-JPEGs"&gt;GitHub&lt;/a&gt; where there is a complete example with passing tests.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>blockchain</category>
      <category>programming</category>
      <category>testing</category>
    </item>
    <item>
      <title>Multi-arch docker images the easy way, with Github Actions</title>
      <author>Pablo Romeo</author>
      <pubDate>Wed, 12 Jan 2022 13:56:35 +0000</pubDate>
      <link>https://dev.to/cloudx/multi-arch-docker-images-the-easy-way-with-github-actions-4k54</link>
      <guid>https://dev.to/cloudx/multi-arch-docker-images-the-easy-way-with-github-actions-4k54</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDvp46Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pabloromeo/posts/main/posts/assets/docker-multi-arch-images-small.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDvp46Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pabloromeo/posts/main/posts/assets/docker-multi-arch-images-small.png" alt="multi-arch docker image example" width="846" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may have come across Docker images like the one above ☝️. In this example, you can see that the &lt;code&gt;latest&lt;/code&gt; tag supports two different architectures. Meaning there are two different images for the same tag, and docker will pull the appropriate one depending on the target architecture. But...how are they built?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-old-way"&gt;
  &lt;/a&gt;
  The old way
&lt;/h2&gt;

&lt;p&gt;Back in the day, the only option was to manually built each separate image using the &lt;code&gt;ARCH&lt;/code&gt; build-arg, push it, and then use the &lt;code&gt;docker manifest&lt;/code&gt; command to group the images together under the same manifest. &lt;br&gt;
This manual process is described in depth in &lt;a href="https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/"&gt;this post by the Docker team&lt;/a&gt;. But now there's even an easier way.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#buildx-to-the-rescue"&gt;
  &lt;/a&gt;
  Buildx to the rescue
&lt;/h2&gt;

&lt;p&gt;Thankfully &lt;a href="https://docs.docker.com/buildx/working-with-buildx/"&gt;Buildx&lt;/a&gt; automates this process and simplifies it quite a bit. A single command can do all that for you.&lt;br&gt;
But who wants to be building images locally anyway? 😁&lt;br&gt;
Plus, automating it with Github Actions is a great excuse to also implement a proper tagging and versioning strategy as well as exploring multiple Container Registries.&lt;br&gt;
Let's get to it! 💪&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github-actions-build"&gt;
  &lt;/a&gt;
  Github Actions build
&lt;/h2&gt;

&lt;p&gt;The overall process is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Checkout the code&lt;/li&gt;
&lt;li&gt;Setup &lt;a href="https://www.qemu.org/"&gt;QEMU&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Setup Buildx&lt;/li&gt;
&lt;li&gt;Log into the target container registry&lt;/li&gt;
&lt;li&gt;Docker Metadata tag voodoo magic &lt;em&gt;(optional)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Build and push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's assume we have a Github repo with a &lt;code&gt;main&lt;/code&gt; and a &lt;code&gt;dev&lt;/code&gt; branch, PRs, as well as &lt;a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository"&gt;versioned releases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll have a github actions YAML similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;workflow_dispatch&lt;/span&gt;
  &lt;span class="s"&gt;push&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;main'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dev'&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;v*.*.*'&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;main'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dev'&lt;/span&gt;

&lt;span class="c1"&gt;# permissions are needed if pushing to ghcr.io&lt;/span&gt;
&lt;span class="na"&gt;permissions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;write&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#steps-12-and-3"&gt;
  &lt;/a&gt;
  Steps 1,2 and 3
&lt;/h3&gt;

&lt;p&gt;These are quite straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="c1"&gt;# Get the repository's code&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="c1"&gt;# https://github.com/docker/setup-qemu-action&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up QEMU&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-qemu-action@v1&lt;/span&gt;
      &lt;span class="c1"&gt;# https://github.com/docker/setup-buildx-action&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Docker Buildx&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildx&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-buildx-action@v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;For Github's Container Registry you can use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to GHCR&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event_name != 'pull_request'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;registry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ghcr.io&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.repository_owner }}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for Dockerhub:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to Docker Hub&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event_name != 'pull_request'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DOCKERHUB_USERNAME }}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DOCKERHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;a href="https://docs.docker.com/docker-hub/access-tokens/"&gt;dockerhub access token&lt;/a&gt; and set the corresponding &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets"&gt;github secrets&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h3&gt;

&lt;p&gt;We could skip this step and just use the &lt;code&gt;latest&lt;/code&gt; docker tag, but in real world scenarios you'll likely want a more elaborate image tagging strategy. Such as sha, branch, &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt;, etc. &lt;/p&gt;

&lt;p&gt;So we'll use the extremely useful &lt;code&gt;docker/metadata-action@v3&lt;/code&gt; for preparing those tags for us.&lt;br&gt;
Check out &lt;a href="https://github.com/docker/metadata-action"&gt;https://github.com/docker/metadata-action&lt;/a&gt; for more example tagging strategies. The documentation is great!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Docker meta&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;meta_id&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# you'll use this in the next step&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/metadata-action@v3&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# list of Docker images to use as base name for tags&lt;/span&gt;
          &lt;span class="na"&gt;images&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;&amp;lt;specify the image name&amp;gt;&lt;/span&gt;
          &lt;span class="c1"&gt;# Docker tags based on the following events/attributes&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;type=schedule&lt;/span&gt;
            &lt;span class="s"&gt;type=ref,event=branch&lt;/span&gt;
            &lt;span class="s"&gt;type=ref,event=pr&lt;/span&gt;
            &lt;span class="s"&gt;type=semver,pattern={{version}}&lt;/span&gt;
            &lt;span class="s"&gt;type=semver,pattern={{major}}.{{minor}}&lt;/span&gt;
            &lt;span class="s"&gt;type=semver,pattern={{major}}&lt;/span&gt;
            &lt;span class="s"&gt;type=sha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This prepares image tags for branch, PR, major, major.minor, version, and sha, which you should adapt according to your own release process.&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;meta_id&lt;/code&gt; with something more appropriate. It will be used in the next step.&lt;/li&gt;
&lt;li&gt;Specify the image name under the &lt;code&gt;images:&lt;/code&gt; section. For ex: &lt;code&gt;ghcr.io/pabloromeo/foo&lt;/code&gt; for GHCR or &lt;code&gt;pabloromeo/foo&lt;/code&gt; for dockerhub.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-6"&gt;
  &lt;/a&gt;
  Step 6
&lt;/h3&gt;

&lt;p&gt;And the final step is to actually build for each target platform and push to the registry.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and push&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/build-push-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
          &lt;span class="na"&gt;platforms&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;linux/amd64,linux/arm/v7&lt;/span&gt;
          &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event_name != 'pull_request' }}&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.&amp;lt;meta_id&amp;gt;.outputs.tags }}&lt;/span&gt;
          &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.&amp;lt;meta_id&amp;gt;.outputs.labels }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The target architecture platforms to build, using &lt;code&gt;platforms:&lt;/code&gt; (in this example AMD64 and ARMv7)&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;&amp;lt;meta_id&amp;gt;&lt;/code&gt; with the proper id used previously. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-comments"&gt;
  &lt;/a&gt;
  Final comments
&lt;/h2&gt;

&lt;p&gt;This turned out to be a lengthy post, but the actual build definition is quite simple when put together, and you'll not only  get multi-arch docker images, but nice semver versioning and tagging as well. 😄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59eGKjhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pabloromeo/posts/main/posts/assets/docker-multi-arch-semver-tags.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59eGKjhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pabloromeo/posts/main/posts/assets/docker-multi-arch-semver-tags.png" alt="Multi-arch images with SemVer" width="880" height="695"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see full working examples of this we can take a look at the builds of two pet projects of mine: &lt;a href="https://github.com/pabloromeo/docker-dogecoin"&gt;Docker-Dogecoin&lt;/a&gt; and &lt;a href="https://github.com/pabloromeo/clusterplex"&gt;ClusterPlex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://github.com/pabloromeo/docker-dogecoin/blob/master/Dockerfile"&gt;Docker-Dogecoin's Dockerfile&lt;/a&gt; there's an example of how to write conditional logic as part of the docker build process depending on the target architecture to install different binaries for each.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://github.com/pabloromeo/clusterplex/blob/master/.github/workflows/main.yml"&gt;Clusterplex's build&lt;/a&gt; it actually pushes to BOTH ghcr.io and Dockerhub simultaneously, as well as updating Dockerhub's Description page to the content of the README.md in the repo.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>github</category>
      <category>githubactions</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Detect crashes in your Kubernetes cluster using kwatch and Slack</title>
      <author>Andrew Ashraf Sabry </author>
      <pubDate>Wed, 12 Jan 2022 13:54:45 +0000</pubDate>
      <link>https://dev.to/andrew44ashraf/detect-crashes-in-your-kubernetes-cluster-using-kwatch-and-slack-487d</link>
      <guid>https://dev.to/andrew44ashraf/detect-crashes-in-your-kubernetes-cluster-using-kwatch-and-slack-487d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-kwatch"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/abahmed/kwatch"&gt;kwatch&lt;/a&gt; is an open-source project that started late in 2021.&lt;br&gt;
It aims to help you monitor all changes in your Kubernetes(K8s) cluster,&lt;br&gt;
detect crashes in your running apps, and publish notifications to your favorite channels (Slack, Discord, etc.) in real-time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this tutorial, I will help you setup and deploy kwatch on your Kubernetes cluster.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Plus, integrate with Slack to get notified on a channel when there is a crash in your apps.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-kwatch-with-slack"&gt;
  &lt;/a&gt;
  Configure kwatch with Slack
&lt;/h2&gt;

&lt;p&gt;First of all, we need to get the webhook URL of the channel you want the notification to be received on it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you know how to generate the webhook URL you can escape this part and go to the configuration section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: create a new slack channel (if you don't have one already)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ2nV642--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r77dfouinwbsx867a14h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ2nV642--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r77dfouinwbsx867a14h.png" alt="new Slack channel" width="700" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Go to &lt;a href="https://api.slack.com/apps"&gt;https://api.slack.com/apps&lt;/a&gt; and create an app from scratch and connect it with your workplace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kqxRUft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stck5fyrvz0eqosb8ijf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kqxRUft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stck5fyrvz0eqosb8ijf.png" alt="creating a new Slack app" width="700" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Create an incoming webhook and activate it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUTUAqp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7vmkvvezfpv1ygz8d9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUTUAqp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7vmkvvezfpv1ygz8d9b.png" alt="adding a webhook" width="700" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Connect it to you channel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b1ILNwCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugz7twf44qv69i3jjiqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1ILNwCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugz7twf44qv69i3jjiqy.png" alt="connecting your webhook to your channel" width="700" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we have the webhook URL for the channel!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Get Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get the configuration template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl  &lt;span class="nt"&gt;-L&lt;/span&gt; https://raw.githubusercontent.com/abahmed/kwatch/v0.3.0/deploy/config.yaml &lt;span class="nt"&gt;-o&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6: Edit config.yaml with the corresponding configs&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Namespace&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;config.yaml&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;alert:&lt;/span&gt;
      &lt;span class="s"&gt;slack:&lt;/span&gt;
        &lt;span class="s"&gt;webhook: WEBHOOK_URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 7: Apply Configuration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-kwatch"&gt;
  &lt;/a&gt;
  Deploy kwatch
&lt;/h2&gt;

&lt;p&gt;Deploy &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt; on your cluster with one command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/abahmed/kwatch/v0.3.0/deploy/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After deploying you will get notified on the channel that kwatch has started successfully. Now, &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt; is monitoring your apps!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--knMBDnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4eqrerz081cd2su68an.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knMBDnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4eqrerz081cd2su68an.png" alt="kwatch just started" width="700" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of kwatch messages when a crash is detected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpGlBNDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79d0j8jd6j4kwcfzo0dh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpGlBNDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79d0j8jd6j4kwcfzo0dh.png" alt="kwatch detected a crash" width="700" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find more documentation about kwatch &lt;a href="https://kwatch.dev/docs"&gt;Here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you like kwatch, give it a star on &lt;a href="https://github.com/abahmed/kwatch"&gt;GitHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We are happy to hear feedback from you and if you have any request, or suggestion don't hesitate to ping us on our channels (&lt;a href="https://discord.gg/kzJszdKmJ7"&gt;Discord&lt;/a&gt;, &lt;a href="https://github.com/abahmed/kwatch"&gt;GitHub&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>monitoring</category>
      <category>devops</category>
      <category>docker</category>
    </item>
    <item>
      <title>How to Create BMI Calculator using Javascript</title>
      <author>Shantanu Jana</author>
      <pubDate>Wed, 12 Jan 2022 13:51:16 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/how-to-create-bmi-calculator-using-javascript-3l07</link>
      <guid>https://dev.to/shantanu_jana/how-to-create-bmi-calculator-using-javascript-3l07</guid>
      <description>&lt;p&gt;If you want to make BMI calculator using JavaScript then this tutorial will help you. Here I have shared a tutorial of a &lt;a href="https://www.foolishdeveloper.com/2021/10/bmi-calculator-using-javascript.html"&gt;BMI calculator using JavaScript&lt;/a&gt;. BMI (Body Mass Index) is used to calculate the amount of mass in our body.&lt;/p&gt;

&lt;p&gt;First I created a simple box on the webpage. In this box I have created all the information like heading, display and input slider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/10/bmi-calculator-using-javascript.html"&gt;&lt;strong&gt;Watch its live demo&lt;/strong&gt;&lt;/a&gt; to learn how it works. I first created a heading using the h1 tag and designed it with CSS. Then he made a display in which all the information can be seen. In this display you can see the BMI and its status. In other words, the amount of BMI is more or less it will be shown through a text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bmi-calculator-using-javascript"&gt;
  &lt;/a&gt;
  BMI Calculator using Javascript
&lt;/h2&gt;

&lt;p&gt;Then I created two range sliders using the input function of HTML. The first slider to input weight and the second input slider to input your height. Weight will be input in kg and height will be input in cm. &lt;/p&gt;

&lt;p&gt;By inputting these two information, your BMI can be seen in the automatic display. I used HTML CSS and JavaScript to build it. Designed &lt;a href=""&gt;Simple BMI Calculator with HTML and CSS&lt;/a&gt; and implemented by JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-make-a-box-and-add-a-heading"&gt;
  &lt;/a&gt;
  1. Make a box and add a heading
&lt;/h3&gt;

&lt;p&gt;First the basic structure of this BMI calculator was created. For this we have taken the help of HTML and CSS below. First I made a box and added a heading in it. HTML's h1 tag is used to create headings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;BMI Calculator&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have designed the webpage with the help of CSS below. Here the background color of the webpage is blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#046db9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now who made the box. Box &lt;code&gt;width: 400px&lt;/code&gt; and height depends on the amount of content. I used white as the background color and box-shadow to make the box more attractive.&lt;/p&gt;

&lt;p&gt;Then the headings are designed. The background of the heading has been used in Garo blue and the text color has been used in white. &lt;code&gt;Font-size: 23px&lt;/code&gt; has been used for &lt;code&gt;text-align: center&lt;/code&gt; to keep the text in the middle and to increase the size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#024b94&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;23px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1XGSz71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiXULq1qTcvmJAzonSV-cFGW3oNjkaAsEC-7-TqB7_7m6Ml3bePGny5Xad5YW3kr9zNPH05fhzm78risS8S6YcApaNgxRzLJU-mQLmntTnDIib_8qKj3Ldkja9kfVxmfFctTtBgTxcS-2fTPBbu8u6-4X-mU9RXwo7LSwfszeUjwR7vgd9YBt3Voh25lA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1XGSz71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiXULq1qTcvmJAzonSV-cFGW3oNjkaAsEC-7-TqB7_7m6Ml3bePGny5Xad5YW3kr9zNPH05fhzm78risS8S6YcApaNgxRzLJU-mQLmntTnDIib_8qKj3Ldkja9kfVxmfFctTtBgTxcS-2fTPBbu8u6-4X-mU9RXwo7LSwfszeUjwR7vgd9YBt3Voh25lA%3Ds16000" alt="Make a box and add a heading" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-create-bmi-result-viewing-area"&gt;
  &lt;/a&gt;
  2. Create BMI result viewing area
&lt;/h3&gt;

&lt;p&gt;Now we have created a display that will show the result of the calculation and a text. There is no specific size of the display it will depend on the amount of content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;20.0&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"category"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Normal weight&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.display&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;139&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#result&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0be881&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#category&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifsERasD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiA6_cI9OvpQ5i72Bk4188avOjHJs3jcUZTOJVMTzVmUBN9aXd000zCZ4dNQcKrxxrCTDt2qPHKcs5646_jQkGj7kExkCDcuNPvJMzIJMtMj5XNwdWtRPVT7Lfq1MlcZT6uKZC7x71Qey2v0mo6vsne8nZx-dGd1bthpmFAw5bAefPfwrhDLGBDwojOsg%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifsERasD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiA6_cI9OvpQ5i72Bk4188avOjHJs3jcUZTOJVMTzVmUBN9aXd000zCZ4dNQcKrxxrCTDt2qPHKcs5646_jQkGj7kExkCDcuNPvJMzIJMtMj5XNwdWtRPVT7Lfq1MlcZT6uKZC7x71Qey2v0mo6vsne8nZx-dGd1bthpmFAw5bAefPfwrhDLGBDwojOsg%3Ds16000" alt="Create BMI result viewing area" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-create-range-slider-to-input-height-and-weight"&gt;
  &lt;/a&gt;
  3. Create range slider to input height and weight
&lt;/h3&gt;

&lt;p&gt;Now it's time to create a range slider. Who created the first range slider using the HTML and CSS code below. I used &lt;code&gt;type = "range"&lt;/code&gt; using HTML input to create slider. Here the minimum and maximum values ​​are determined. This range is for slider weight input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"weight"&lt;/span&gt; &lt;span class="na"&gt;oninput=&lt;/span&gt;&lt;span class="s"&gt;"calculate()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"weight-val"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;20 kg&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have designed some basics of slider with the help of CSS below. Here the slider is used &lt;code&gt;width: 70%&lt;/code&gt; and &lt;code&gt;height: 3.5px&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.row&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.row&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"range"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dcdcdc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have designed the thumbnail. Each range slider has a button that changes the value of the range. The following CSS code has been used to design this button. Border-radius is used to make this thumbnail &lt;code&gt;width: 15px&lt;/code&gt;, &lt;code&gt;height: 15px&lt;/code&gt; and round.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"range"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-slider-thumb&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1c1c1c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have made another slide to make a hairy anklet. It is made like this sea. Here minimum value 100 and maximum L250 are used. Flight No need to use any different code to design it because I have already added code to design here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"height"&lt;/span&gt; &lt;span class="na"&gt;oninput=&lt;/span&gt;&lt;span class="s"&gt;"calculate()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"height-val"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;100 cm&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b0C_H29---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEgXvK9pD1rXdBWoZmEk07bBK_4rB0ybX4ANdpylMUHNXAU-mA3d00WnPY8NcheaLMWAIGUEWKB0-ZOPRbPF1vzSL5A3HHq6N3H-hF2ZT-bMJZdRVbpNdCchFvzUB54yCo7JI-KnzGVaVydPlucpGf8LEffGODpSRyugPAFV2WtRLfSMF26VD09Ae_inyA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b0C_H29---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEgXvK9pD1rXdBWoZmEk07bBK_4rB0ybX4ANdpylMUHNXAU-mA3d00WnPY8NcheaLMWAIGUEWKB0-ZOPRbPF1vzSL5A3HHq6N3H-hF2ZT-bMJZdRVbpNdCchFvzUB54yCo7JI-KnzGVaVydPlucpGf8LEffGODpSRyugPAFV2WtRLfSMF26VD09Ae_inyA%3Ds16000" alt="Create range slider to input height and weight" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-javascript-of-bmi-calculator"&gt;
  &lt;/a&gt;
  4. JavaScript of BMI Calculator
&lt;/h3&gt;

&lt;p&gt;Above we have designed this &lt;a href="https://www.foolishdeveloper.com/2021/10/bmi-calculator-using-javascript.html"&gt;JavaScript BMI Calculator&lt;/a&gt; complete with the help of HTML and CSS. However, it is not yet effective. You need JavaScript enabled to view it. &lt;/p&gt;

&lt;p&gt;Below I have given all the JavaScript together and given the necessary explanations. Hopefully the following explanation will help you understand these JavaScripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;//Need to determine the constant of some id functions.&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//The value of the height slider&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;height&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//The value of the weight slider&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//The value of height and width should be displayed in the webpage using "textContent".&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weight-val&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; kg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;height-val&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Now I have added the formula for calculating BMI in "bmi"&lt;/span&gt;
    &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//With the help of "textContent" we have arranged to display in the result page of BMI&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="c1"&gt;//Now we have to make arrangements to show the text&lt;/span&gt;


  &lt;span class="c1"&gt;//When the BMI is less than 18.5, you can see the text below&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;18.5&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Underweight 😒&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffc44d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//If BMI is &amp;gt;=18.5 and &amp;lt;=24.9&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;18.5&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;24.9&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Normal Weight 😍&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#0be881&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//If BMI is &amp;gt;= 25 and &amp;lt;= 29.9 &lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;29.9&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Overweight 😮&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff884d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//If BMI is &amp;lt;= 30&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Obese 😱&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff5e57&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//All of the above text is stored in "category".&lt;/span&gt;

&lt;span class="c1"&gt;//Now you have to make arrangements to display the information in the webpage with the help of "textContent"&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;category&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gLnQbHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEg045ozdq4agA84VQACpObyoVHrVLdhZASMgLvT1Xw3JoV1LFcQPBO1jxmfGy20Qxetbg2yxhtK0ropCfXAYzZixCiK4Fqutn9TidF_Ok3MvXpgdhVcJXaviEZQW-Yp6E7-1zGyZdCa7O9ZMypRNnGMMZWdc3S-Jg8LzubkHlI41k_VxbgO3h0oCY5tgQ%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gLnQbHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEg045ozdq4agA84VQACpObyoVHrVLdhZASMgLvT1Xw3JoV1LFcQPBO1jxmfGy20Qxetbg2yxhtK0ropCfXAYzZixCiK4Fqutn9TidF_Ok3MvXpgdhVcJXaviEZQW-Yp6E7-1zGyZdCa7O9ZMypRNnGMMZWdc3S-Jg8LzubkHlI41k_VxbgO3h0oCY5tgQ%3Ds16000" alt="JavaScript of BMI Calculator" width="880" height="425"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Related Post:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;Simple Weather App using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/11/todo-list-javascript.html"&gt;Make a Todo List using JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/10/simple-stopwatch-using-javascript.html"&gt;Simple Stopwatch using JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/09/skeleton-screen-loading-animation.html"&gt;Skeleton Screen Loading Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/07/javascript-age-calculator.html"&gt;Javascript Age Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.foolishdeveloper.com/2021/07/random-password-generator-javascript.html"&gt;Random Password Generator with JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.foolishdeveloper.com/2021/07/automatic-image-slider.html"&gt;Automatic Image Slider in Html, CSS&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.foolishdeveloper.com/2021/06/sidebar-menu-using-html-css-javascript.html"&gt;Sidebar Menu Using HTML CSS&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully with the help of the above tutorial you have learned how I created this BMI calculator using HTML CSS and JavaScript. If there is any difficulty then you can let me know by commenting.&lt;/p&gt;

&lt;p&gt;You can use this link if you want to &lt;a href="https://www.foolishdeveloper.com/2021/10/bmi-calculator-using-javascript.html"&gt;download&lt;/a&gt; the required source code.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this. 😊&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
