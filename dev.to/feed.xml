<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>[Markdown] How do use markdown text on Discord?</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Sun, 27 Jun 2021 19:51:57 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/markdown-how-do-use-markdown-text-on-discord-24mg</link>
      <guid>https://dev.to/yumatsushima07/markdown-how-do-use-markdown-text-on-discord-24mg</guid>
      <description>&lt;p&gt;You want to be cool on Discord and show of your friends with the ability to use the one and only Markdown text.&lt;br&gt;
Discord uses Markdown, a simple plain text formatting system that'll help you &lt;strong&gt;make your sentences stand out&lt;/strong&gt;. Here's how to do it! Just add a few characters before &amp;amp; after your desired text to change your text! I'll show you some examples...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#text-styles"&gt;
  &lt;/a&gt;
  Text Styles
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;*Italics*&lt;/code&gt; --&amp;gt;    *italics* &lt;strong&gt;or&lt;/strong&gt; _italics_&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__*Underline italics*__&lt;/code&gt; --&amp;gt;  _&lt;em&gt;*underline italics*&lt;/em&gt;_&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**Bold**&lt;/code&gt; --&amp;gt; **bold**&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__**Underline bold**__&lt;/code&gt; --&amp;gt;   _&lt;em&gt;**underline bold**&lt;/em&gt;_&lt;/p&gt;

&lt;p&gt;&lt;code&gt;***Bold Italics***&lt;/code&gt; --&amp;gt;   ***bold italics***&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__***underline bold italics***__&lt;/code&gt; --&amp;gt; _&lt;em&gt;***underline bold italics***&lt;/em&gt;_&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__Underline__&lt;/code&gt;     --&amp;gt; __underline__    &lt;/p&gt;

&lt;p&gt;&lt;code&gt;~~Strikethrough~~&lt;/code&gt; --&amp;gt;     ~~Strikethrough~~&lt;/p&gt;

&lt;p&gt;Don't want to use markdown? You can slap a backslash in front of your statement, or put your message in a code block, and it'll escape the markdown formatting. You'll see those asterisks as you'd like! Just keep in mind, it doesn't work in messages with edits or underscores.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#block-quotes"&gt;
  &lt;/a&gt;
  Block Quotes
&lt;/h2&gt;

&lt;p&gt;The syntax to use Block Quotes is &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; followed by a space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; at the beginning of a line of text, creates a single-line block quote.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhykUUPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6t8asuuhb5ag0dp28ek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhykUUPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6t8asuuhb5ag0dp28ek.png" alt="block quotes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; at the beginning of a line of text, creates a multi-line block quote. All text from &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; until the end of the message will be included in the quote.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCt7xYxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80716a4y15o9ifudl51j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCt7xYxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80716a4y15o9ifudl51j.png" alt="multi block quotes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code-blocks"&gt;
  &lt;/a&gt;
  Code Blocks
&lt;/h2&gt;

&lt;p&gt;Discord also supports code blocks as well.  You can make your own code blocks by wrapping your text in backticks (`)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4TGqBSBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v0mo79br4l0dfkxl8q2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4TGqBSBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v0mo79br4l0dfkxl8q2.png" alt="one line code blocks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use three backticks (`&lt;code&gt;\&lt;/code&gt;) to create multiline code blocks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MhdU6FD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtr53st2bkycgl1ah2gf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MhdU6FD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtr53st2bkycgl1ah2gf.png" alt="multiline code blocks"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#syntax-highlighting"&gt;
  &lt;/a&gt;
  Syntax Highlighting
&lt;/h2&gt;

&lt;p&gt;If you really want to spruce up your code blocks, you can denote a specific language for &lt;strong&gt;syntax highlighting&lt;/strong&gt;, by typing the name of the language you want the code block to expect right after the first three backticks beginning your code block. An example...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cp7_L2DZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sxn58ep016ufs7qri40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cp7_L2DZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sxn58ep016ufs7qri40.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many different languages in place of Markdown that Discord's syntax highlighting support. Each different language has its own approach to highlight-able syntax. For a full list: &lt;a href="https://highlightjs.org/static/demo/"&gt;https://highlightjs.org/static/demo/&lt;/a&gt;. Note that you won't be able to view syntax highlighting on the mobile app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cp7_L2DZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sxn58ep016ufs7qri40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cp7_L2DZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sxn58ep016ufs7qri40.png" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KJUPYDbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d02c0gc0g1p7kon1zdw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJUPYDbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d02c0gc0g1p7kon1zdw8.png" alt="html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bash (bash)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKpK3iMz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgygi2q0fe7uhzrk1hoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKpK3iMz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgygi2q0fe7uhzrk1hoe.png" alt="bash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C++ (cpp)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcOr_aJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aqv0674wskjc40p9wux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcOr_aJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aqv0674wskjc40p9wux.png" alt="cpp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C# (cs)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20REK5QR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yiz1fcjc3vc365dvajku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20REK5QR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yiz1fcjc3vc365dvajku.png" alt="cs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Markdown (md)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qnh-WBJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr27y809y21snsshgbrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qnh-WBJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr27y809y21snsshgbrg.png" alt="md"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diff (diff)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IZDXFeZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62gp65vzemf8ickqyyk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IZDXFeZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62gp65vzemf8ickqyyk9.png" alt="diff"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript (js)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q85xqlTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqu6subgrkljqycv2f3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q85xqlTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqu6subgrkljqycv2f3k.png" alt="js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python (py)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5AgwROj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouocfg8ynvengvcaygep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5AgwROj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouocfg8ynvengvcaygep.png" alt="py"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shell Session&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPPfHdr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq1yn2p6ejujoyf8n9af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPPfHdr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq1yn2p6ejujoyf8n9af.png" alt="shell"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5M8B4yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzjufymx2agsvuojgrhk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5M8B4yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzjufymx2agsvuojgrhk.png" alt="sql"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3oSZS0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptn9ssfgt7s847mibvjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3oSZS0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptn9ssfgt7s847mibvjs.png" alt="java"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VuXxuJMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z26ml4jeug7o3jlucsi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VuXxuJMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z26ml4jeug7o3jlucsi2.png" alt="json"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you get the idea! Now you're a &lt;strong&gt;Discord text markdown expert&lt;/strong&gt;. Get out there and highlight your statements!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://support.discordapp.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline-"&gt;Hammer and Chisel&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://discord.gg/SkZTwPk"&gt;Discord Highlight.js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
❯ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
❯ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
❯ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/hack-with-your-heart-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Author: Yuma-Tsushima&lt;/p&gt;

</description>
      <category>languages</category>
      <category>markdown</category>
    </item>
    <item>
      <title>Connect To GitHub Using SSH</title>
      <author>Sanmati Kumar Jain</author>
      <pubDate>Sun, 27 Jun 2021 19:50:59 +0000</pubDate>
      <link>https://dev.to/sjcodebook/connect-to-github-using-ssh-2la3</link>
      <guid>https://dev.to/sjcodebook/connect-to-github-using-ssh-2la3</guid>
      <description>&lt;p&gt;Original Post Link =&amp;gt; &lt;a href="https://webbrainsmedia.com/blogs/connect-to-github-using-ssh"&gt;https://webbrainsmedia.com/blogs/connect-to-github-using-ssh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github provides two network protocols, &lt;code&gt;HTTPS &amp;amp; SSH&lt;/code&gt; to clone, pull and push changes to your repositories from your machine. Both have their own pros and cons. Personally i use &lt;code&gt;SSH&lt;/code&gt; for all of my Git activities. Because compared to &lt;code&gt;HTTPS&lt;/code&gt;, using &lt;code&gt;SSH&lt;/code&gt; keys is more secure and saves me more time by doesn't requiring me to enter my username and password every time i perform a push or pull operation. Let me elaborate on why i find &lt;code&gt;SSH&lt;/code&gt; more secure and convienient than &lt;code&gt;HTTPS&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssh-vs-https"&gt;
  &lt;/a&gt;
  SSH Vs HTTPS
&lt;/h2&gt;

&lt;p&gt;If you are using &lt;code&gt;HTTPS&lt;/code&gt;, you are using the same username and password of your github account to access remote repositories from your machine. So, if those details gets compromised. Then, the attacker can access everything in your account. They can even change the master password and can lock you out of your own account.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;SSH&lt;/code&gt;, Even if, your computer gets stolen and an attacker gets access to your private key. They will not be able to gain full control of your github account and you can quickly remove the compromised key by logging in your github account with the master password.&lt;/p&gt;

&lt;p&gt;Setting up &lt;code&gt;SSH&lt;/code&gt; keys for the first time requires a little setup, but in the long run, it pays by providing you the extra control and security of your account. Also, by using &lt;code&gt;SSH&lt;/code&gt; you will never again required to type your username and password for accessing your Github account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-generate-and-add-ssh-keys-to-your-github"&gt;
  &lt;/a&gt;
  Steps To Generate And Add SSH Keys To Your GitHub:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-genrate-your-ssh-keys"&gt;
  &lt;/a&gt;
  1) Genrate your SSH keys
&lt;/h3&gt;

&lt;p&gt;First step is to generate your own &lt;code&gt;SSH&lt;/code&gt; key pairs. You can do that by running the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-keygen &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; rsa &lt;span class="nt"&gt;-C&lt;/span&gt; &lt;span class="s2"&gt;"your@email.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Remember to replace the comment with your own email)&lt;/p&gt;

&lt;p&gt;After That, you will be asked for the path to save the keys. hit enter to accept the default location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Generating public/private rsa key pair.
Enter file in which to save the key (/home/sj/.ssh/id_rsa):
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you will get an option to provide the passphrase to make your keys more secure. This is optional and you can skip it by pressing enter two times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter passphrase (empty for no passphrase):
Enter same passphrase again:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, After your keys are generated. You will see the below message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Your identification has been saved in /home/sj/.ssh/id_rsa
Your public key has been saved in /home/sj/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:40XYRaLv66J9UVk1wrMVgMFQh0/BaV5OhJG2ZsOsbEU your@email.com
The key's randomart image is:
+---[RSA 3072]----+
|         .=+O*O=o|
|         + *.Eo+.|
|        o o XoO  |
|         o  o% . |
|        S +.= .  |
|       . +.+     |
|        . o.     |
|       .. ..     |
|      ...+o      |
+----[SHA256]-----+

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-adding-your-public-key-to-github"&gt;
  &lt;/a&gt;
  2) Adding your public key to GitHub
&lt;/h3&gt;

&lt;p&gt;So, we have generated our &lt;code&gt;SSH&lt;/code&gt; key pairs. Now, we need to register our public key on github for that we can access content of our public key by using &lt;code&gt;cat&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDOXmwRpIsoXEQsKgw1Y43+yJ8JaU2iY1uc45pg7VcD9Pim748LcUzoa8YHF14yE6LeD9YVZcdu1PHC2xOJP5/eVzweBEFHq4onzNZZ5mO04+2WZQB72d6drJKJce+JXtHv8S3PWZQFYXA6cueBZwpiSeMI1Bu5Sz+idafsw4QY01E9JBDWOtx8d468u2uLeMl8rlFj+0uiN/K9tDlMuiH3U8B3XcH3bYBky0C2bQxeSZ4l3o/X76rt0tythOxxd/Xasw461wFQYYNYqLRZKHxryg/5uTBzOMIVXBykTzH1ffBx/BoZioBVsWeH/uPC5i6zle800MZEBylWDpHh8VBp7NBrEQEwJqPrHEtchIyiFkBSMUKoAUku2EzyT7aFxM+O0hAJMZ9wqHX0qdF0zJb0U4rMysyuAs+MVK54e6dMXqV0ai03jOde9/TibDMdeKYZ8SygxhbKH8ibNIwwoF/YtyJoqsBRiOj8R2YN/GCnijNlB8sMq6J4XRcfl7JKyp0= your@email.comcat ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the above public &lt;code&gt;SSH&lt;/code&gt; key to your clipboard&lt;/p&gt;

&lt;p&gt;Visit github.com, Login to your account, Go to your account settings and select &lt;code&gt;SSH and GPG keys&lt;/code&gt; option from side the menu. Click on &lt;strong&gt;New SSH key&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bnaYtNnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webbrainsmedia.com/static/7c205661a53cf3f37b597f9c4ce6692e/a7a19/github-settings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bnaYtNnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webbrainsmedia.com/static/7c205661a53cf3f37b597f9c4ce6692e/a7a19/github-settings.png" alt="Github Settings Page" title="Github Settings Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give your new key a relevant title and paste the public key that you have previously saved in your clipboard into the &lt;strong&gt;Key&lt;/strong&gt; text box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEEuG4p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webbrainsmedia.com/static/d372369086307c750b6ce656522141e4/e84a7/add-pub-key.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEEuG4p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webbrainsmedia.com/static/d372369086307c750b6ce656522141e4/e84a7/add-pub-key.png" alt="Add Public SSH Key" title="Add Public SSH Key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click &lt;strong&gt;Add SSH Key&lt;/strong&gt; and enter your github password to save the key.&lt;/p&gt;

&lt;p&gt;Now, You can use SSH to clone your repositories to your local machine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xe-htF8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webbrainsmedia.com/static/860187985552110b5d689bc9a510f7b3/60a1a/using-ssh-to-clone.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xe-htF8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webbrainsmedia.com/static/860187985552110b5d689bc9a510f7b3/60a1a/using-ssh-to-clone.png" alt="Clone Using SSH" title="Clone Using SSH"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone git@github.com:sjcodebook/WBM.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enjoy the &lt;strong&gt;secure&lt;/strong&gt; freedom 🍻!!&lt;/p&gt;

&lt;p&gt;Original Post Link =&amp;gt; &lt;a href="https://webbrainsmedia.com/blogs/connect-to-github-using-ssh"&gt;https://webbrainsmedia.com/blogs/connect-to-github-using-ssh&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>ssh</category>
    </item>
    <item>
      <title>How To Structure Your App In a Way That Scales.</title>
      <author>Michał Pietraszko</author>
      <pubDate>Sun, 27 Jun 2021 19:50:07 +0000</pubDate>
      <link>https://dev.to/pietmichal/how-to-structure-your-app-in-a-way-that-scales-bkf</link>
      <guid>https://dev.to/pietmichal/how-to-structure-your-app-in-a-way-that-scales-bkf</guid>
      <description>&lt;p&gt;The best codebases I found myself working on had their folders structured around the features the app provides. &lt;/p&gt;

&lt;p&gt;Some folks might tell that it is very close to the Domain-Driven Design's principle of &lt;a href="https://martinfowler.com/bliki/BoundedContext.html"&gt;bounded contexts&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-app-we-will-structure"&gt;
  &lt;/a&gt;
  The App We Will Structure
&lt;/h2&gt;

&lt;p&gt;Thinking of application as a feature that contains features creates a robust mental model that can be easily mapped to the folder structure of your project.&lt;/p&gt;

&lt;p&gt;The following example will refer to a Single-Page Application written in JavaScript that consists of the following building blocks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routes - root components displayed when an URL is used,&lt;/li&gt;
&lt;li&gt;Components - logical units handling state and rendering,&lt;/li&gt;
&lt;li&gt;Queries - functions calling an HTTP API,&lt;/li&gt;
&lt;li&gt;Styles - CSS bound to the specific component they are named after,&lt;/li&gt;
&lt;li&gt;Services - logical units handling overarching problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, this pattern can be applied to any programming language, framework, and problem domain. &lt;/p&gt;

&lt;p&gt;For example, a game could use shaders, prefabs, entities, and systems as its own building blocks instead.&lt;/p&gt;

&lt;p&gt;My goal here is to present the idea in an easy-to-digest way. For this reason, I'll make a few simplifications when we go through the evolutionary steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-genesis"&gt;
  &lt;/a&gt;
  The Genesis
&lt;/h2&gt;

&lt;p&gt;Our app will start with login and register features. &lt;/p&gt;

&lt;p&gt;It should be able to take input data and communicate with the API. &lt;/p&gt;

&lt;p&gt;When a user is logged in, then they will be able to see some kind of message that they have an active session.&lt;/p&gt;

&lt;p&gt;The simplest way to start is with one file. From this point, we will take a few steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
├─ index.js
├─ style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The features are apparent when someone opens the &lt;code&gt;index.js&lt;/code&gt; file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-buckets"&gt;
  &lt;/a&gt;
  The Buckets
&lt;/h2&gt;

&lt;p&gt;Now, imagine the business wants the app to do more. They say, that after the user logs in, they should see the dashboard with charts representing important data.&lt;/p&gt;

&lt;p&gt;You start writing code and at one point the sense of guilt ensues... the &lt;code&gt;index.js&lt;/code&gt; file became too large and you think that as a good engineer you should organize your code better.&lt;/p&gt;

&lt;p&gt;Usually, people organize the code in what I like to refer to as &lt;em&gt;buckets&lt;/em&gt; and end up with something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
├─ services/
│  ├─ session.service.js
├─ components/
│  ├─ button.component.js
│  ├─ input.component.js
│  ├─ piechart.component.js
│  ├─ linechart.component.js
├─ routes/
│  ├─ login.route.js
│  ├─ register.route.js
│  ├─ dashboard.route.js
├─ styles/
│  ├─ input.component.css
│  ├─ button.component.css
│  ├─ piechart.component.css
│  ├─ linechart.component.css
│  ├─ dashboard.route.css
│  ├─ login.route.css
│  ├─ register.route.css
├─ queries/
│  ├─ login.query.js
│  ├─ register.query.js
│  ├─ dashboard.query.js
├─ index.js
├─ style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is there an objective problem, at this point, with this? No. Things might feel alright because every concept has its own bucket. There is not much functionality, but as it grows - your feelings might change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-features"&gt;
  &lt;/a&gt;
  More Features
&lt;/h2&gt;

&lt;p&gt;Now, the business says that we should add some reports that will allow users to see critical information - for example, how much money they've gained and how much money they've lost. These are expected to include tabular data and charts.&lt;/p&gt;

&lt;p&gt;Let's add more to the buckets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
├─ services/
│  ├─ session.service.js
├─ components/
│  ├─ button.component.js
│  ├─ input.component.js
│  ├─ data-table.component.js
│  ├─ piechart.component.js
│  ├─ linechart.component.js
│  ├─ barchart.component.js
├─ routes/
│  ├─ login.route.js
│  ├─ register.route.js
│  ├─ dashboard.route.js
│  ├─ loses-report.route.js
│  ├─ gains-report.route.js
├─ styles/
│  ├─ input.component.css
│  ├─ button.component.css
│  ├─ data-table.component.css
│  ├─ piechart.component.css
│  ├─ linechart.component.css
│  ├─ barchart.component.css
│  ├─ dashboard.route.css
│  ├─ login.route.css
│  ├─ register.route.css
│  ├─ loses-report.route.css
│  ├─ gains-report.route.css
├─ queries/
│  ├─ login.query.js
│  ├─ register.query.js
│  ├─ dashboard.query.js
│  ├─ gains-report.query.js
│  ├─ loses-report.query.js
├─ index.js
├─ style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a lot of files scattered around. &lt;/p&gt;

&lt;p&gt;Ask yourself the following questions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it immediately obvious to you what features the app consists of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it clear what features are dependent on each other?&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featuredriven-folder-structure"&gt;
  &lt;/a&gt;
  Feature-driven Folder Structure
&lt;/h2&gt;

&lt;p&gt;Let's take a step back and write down what features and areas of concern the app covers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login

&lt;ul&gt;
&lt;li&gt;Receives data input&lt;/li&gt;
&lt;li&gt;Cares about current session&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Registration

&lt;ul&gt;
&lt;li&gt;Receives data input&lt;/li&gt;
&lt;li&gt;Cares about current session&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Dashboard

&lt;ul&gt;
&lt;li&gt;Visualization via charts&lt;/li&gt;
&lt;li&gt;Cares about current session&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Loses Reporting

&lt;ul&gt;
&lt;li&gt;Visualization via data table&lt;/li&gt;
&lt;li&gt;Visualization via charts&lt;/li&gt;
&lt;li&gt;Cares about current session&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Gains Reporting

&lt;ul&gt;
&lt;li&gt;Visualization via data table&lt;/li&gt;
&lt;li&gt;Visualization via charts&lt;/li&gt;
&lt;li&gt;Cares about current session&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Think about the whole app as a feature. &lt;/p&gt;

&lt;p&gt;Also, think about each bullet point as a separate feature. &lt;/p&gt;

&lt;p&gt;Each feature is specialized in one problem domain. &lt;/p&gt;

&lt;p&gt;Some features &lt;em&gt;are shared&lt;/em&gt; between features.&lt;/p&gt;

&lt;p&gt;Let's map this to the folder structure. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please keep in mind that structure might differ depending on a person and the team working on the codebase!&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
├─ shared/
│  ├─ session/
│  │  ├─ session.service.js
│  ├─ data-table/
│  │  ├─ data-table.component.js
│  │  ├─ data-table.component.css
│  ├─ data-input/
│  │  ├─ button.component.js
│  │  ├─ button.component.css/
│  │  ├─ input.component.js/
│  │  ├─ input.component.css
│  ├─ charts/
│  │  ├─ piechart.component.js
│  │  ├─ piechart.component.css
│  │  ├─ linechart.component.js
│  │  ├─ linechart.component.css
│  │  ├─ barchart.component.js
│  │  ├─ barchart.component.css
├─ login/
│  ├─ login.route.js
│  ├─ login.route.css
│  ├─ login.query.js
├─ register/
│  ├─ register.route.js
│  ├─ register.route.css
│  ├─ register.service.js
│  ├─ register.query.js
├─ dashboard/
│  ├─ dashboard.route.js
│  ├─ dashboard.route.css
│  ├─ dashboard.query.js
├─ gains-report/
│  ├─ gains-report.route.js
│  ├─ gains-report.route.css
│  ├─ gains-report.query.js
├─ loses-report/
│  ├─ loses-report.route.js
│  ├─ loses-report.route.css
│  ├─ loses-report.query.js
├─ style.css
├─ index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ask yourself the following questions, &lt;strong&gt;again&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it immediately obvious to you what features the app consists of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it clear what features are dependent on each other?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;From my experience, a developer can immediately tell what features the app has and where they have to go if they have the task of modifying the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feature-of-features-of-features"&gt;
  &lt;/a&gt;
  Feature of Features... of Features?
&lt;/h2&gt;

&lt;p&gt;The problem I've experienced when applying this pattern was the shared program expanding to unmanageable size creating a similar problem to "the buckets" approach.&lt;/p&gt;

&lt;p&gt;There is one trick to deal with this. &lt;/p&gt;

&lt;p&gt;Take a look at the structure above and try to tell what shared features are not related to everything? &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;charts&lt;/strong&gt; and *&lt;em&gt;data table&lt;/em&gt; features.&lt;/p&gt;

&lt;p&gt;The important thing to remember is that the feature-driven pattern has no limit to how deep the structure can go.&lt;/p&gt;

&lt;p&gt;It should go as deep or as flat to ensure comfort &lt;em&gt;which is subjective&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Check the following example of how the structure can be made to represent the relationship between features even better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
├─ shared/
│  ├─ session/
│  │  ├─ session.service.js
│  ├─ data-input/
│  │  ├─ button.component.js
│  │  ├─ button.component.css/
│  │  ├─ input.component.js/
│  │  ├─ input.component.css
├─ login/
│  ├─ login.route.js
│  ├─ login.route.css
│  ├─ login.query.js
├─ register/
│  ├─ register.route.js
│  ├─ register.route.css
│  ├─ register.service.js
│  ├─ register.query.js
├─ reporting/ 
│  ├─ data-table/
│  │  ├─ data-table.component.js
│  │  ├─ data-table.component.css
│  ├─ charts/
│  │  ├─ piechart.component.js
│  │  ├─ piechart.component.css
│  │  ├─ linechart.component.js
│  │  ├─ linechart.component.css
│  │  ├─ barchart.component.js
│  │  ├─ barchart.component.css
│  ├─ dashboard/
│  │  ├─ dashboard.route.js
│  │  ├─ dashboard.route.css
│  │  ├─ dashboard.query.js
│  ├─ gains-report/
│  │  ├─ gains-report.route.js
│  │  ├─ gains-report.route.css
│  │  ├─ gains-report.query.js
│  ├─ loses-report/
│  │  ├─ loses-report.route.js
│  │  ├─ loses-report.route.css
│  │  ├─ loses-report.query.js
├─ style.css
├─ index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you traverse the codebase, you can clearly see what you are looking at and what are the dependencies that you take into consideration.&lt;/p&gt;

&lt;p&gt;This way you can add as many features as you need and the structural complexity should be proportional to the actual problem the app tries to solve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;Keep in mind that there is a lot of space when it comes to organizing code in a feature-driven way and people can come up with different structures.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There is no objectively correct structure.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can also mix "the bucket" and feature-driven approaches. &lt;/p&gt;

&lt;p&gt;This is because sometimes it might be easier for the eyes to just put shared single components into components folder to avoid many single file folders.&lt;/p&gt;

&lt;p&gt;The important thing is to define your own rules of thumb and stick to them. &lt;/p&gt;

&lt;p&gt;You can always reflect back and refactor the structure as the codebase evolves.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>architecture</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Replace Graphiql With Graphql Playground Using These Simple Steps</title>
      <author>Sanmati Kumar Jain</author>
      <pubDate>Sun, 27 Jun 2021 19:43:34 +0000</pubDate>
      <link>https://dev.to/sjcodebook/replace-graphiql-with-graphql-playground-using-these-simple-steps-5bdl</link>
      <guid>https://dev.to/sjcodebook/replace-graphiql-with-graphql-playground-using-these-simple-steps-5bdl</guid>
      <description>&lt;p&gt;Original Post Link =&amp;gt; &lt;a href="https://webbrainsmedia.com/blogs/replace-graphiql-with-graphql-playground"&gt;https://webbrainsmedia.com/blogs/replace-graphiql-with-graphql-playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graphiql is the default IDE for working with Graphql API in Gatsby. But Gatsby also support, newer and more featured IDE known as Graphql Playground. Graphql Playground provides us with additional features like a nice fully customizable UI interface, multiple tab options, detailed docs drawer, copy CURL option etc. These features makes building queries easy and fun.&lt;br&gt;
So, lets see how we can swap Graphiql for Graphql Playground.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#steps-to-replace-graphiql-to-graphql-playground"&gt;
  &lt;/a&gt;
  Steps To Replace Graphiql To Graphql Playground:
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-install-dotenv-dependency"&gt;
  &lt;/a&gt;
  1) Install dotenv dependency
&lt;/h3&gt;

&lt;p&gt;For replacing the IDE we need to declare an environment variable and for that environment variable to load in &lt;code&gt;process.env&lt;/code&gt; we need to use an dotenv package. You can install it by running this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-define-the-environment-variable"&gt;
  &lt;/a&gt;
  2) Define the environment variable
&lt;/h3&gt;

&lt;p&gt;For gatsby to know that we want to use Graphql Playground we need to define an environment variable &lt;code&gt;GATSBY_GRAPHQL_IDE=playground&lt;/code&gt;. We can define this variable in an &lt;code&gt;.env&lt;/code&gt; file. Its a best practice to seperate environment variables for development and production. So, we can define the env files in our root folder like this &lt;code&gt;.env.development&lt;/code&gt; and &lt;code&gt;.env.production&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── node_modules
├── public
├── src
├── static
├── .env.development
├── .env.production
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, In the &lt;code&gt;.env.development&lt;/code&gt; file define this key value pair.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------------------
||.env.development||
--------------------
GATSBY_GRAPHQL_IDE=playground
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-update-gatsbyconfigjs"&gt;
  &lt;/a&gt;
  3) Update gatsby-config.js
&lt;/h3&gt;

&lt;p&gt;Inside your gatsby-config.js file at the very top require the dotenv plugin and provide the path to the appropriate &lt;code&gt;.env&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;-------------------------&lt;/span&gt;
&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nx"&gt;gatsby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="o"&gt;-------------------------&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`.env.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;siteMetadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when you run &lt;code&gt;gatby develop&lt;/code&gt;. it will set the &lt;code&gt;NODE_ENV&lt;/code&gt; to development, and the dotenv package will load the environment variables defined in &lt;code&gt;.env.development&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Finally, go to &lt;code&gt;http://localhost:8000/___graphql&lt;/code&gt; and use the newer and nicer Graphql Playground IDE.&lt;/p&gt;

&lt;p&gt;Original Post Link =&amp;gt; &lt;a href="https://webbrainsmedia.com/blogs/replace-graphiql-with-graphql-playground"&gt;https://webbrainsmedia.com/blogs/replace-graphiql-with-graphql-playground&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>react</category>
      <category>graphql</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Migrate From Remark To MDX In Gatsby Using These Simple Steps</title>
      <author>Sanmati Kumar Jain</author>
      <pubDate>Sun, 27 Jun 2021 19:37:10 +0000</pubDate>
      <link>https://dev.to/sjcodebook/migrate-from-remark-to-mdx-in-gatsby-using-these-simple-steps-322a</link>
      <guid>https://dev.to/sjcodebook/migrate-from-remark-to-mdx-in-gatsby-using-these-simple-steps-322a</guid>
      <description>&lt;p&gt;Original Post Link =&amp;gt; &lt;a href="https://webbrainsmedia.com/blogs/remark-to-mdx-in-gatsby"&gt;https://webbrainsmedia.com/blogs/remark-to-mdx-in-gatsby&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mdx-vs-remark"&gt;
  &lt;/a&gt;
  MDX VS Remark
&lt;/h2&gt;

&lt;p&gt;Mdx and remark are both markdown compilers i.e. they convert markdown to HTML. So, that it can be rendered on the browser. We can also write HTML in our &lt;code&gt;.md&lt;/code&gt; file, as the final result is HTML the compiler will process it as HTML.&lt;/p&gt;

&lt;p&gt;Coming to Remark, It gives us the advantage of extending its functionalities using plugins. Mdx is also very similar to remark and icing on the cake is it supports all remark plugins. But what makes it so popular is the ability to process JSX in &lt;code&gt;.md&lt;/code&gt; files. Basically, it converts the markdown files into React components making it eligible for importing and rendering other components.&lt;/p&gt;

&lt;p&gt;This MDX’s ability becomes very useful for things like data-visualization in your blog. MDX makes blogging super fun and easy. Now lets see how we can convert an existing gatsby blog to use MDX in place of Remark.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-migrate-from-remark-to-mdx"&gt;
  &lt;/a&gt;
  Steps To Migrate From Remark To MDX:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-installing-mdx-plugin"&gt;
  &lt;/a&gt;
  1) Installing MDX plugin
&lt;/h3&gt;

&lt;p&gt;We first need to install the &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt; plugin with its dependencies (&lt;code&gt;@mdx-js/mdx&lt;/code&gt; and &lt;code&gt;@mdx-js/react&lt;/code&gt;) .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;gatsby-plugin-mdx @mdx-js/mdx @mdx-js/react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also remove the &lt;code&gt;gatsby-transformer-remark&lt;/code&gt; plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm remove gatsby-transformer-remark
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-replacing-remark-plugin-with-mdx"&gt;
  &lt;/a&gt;
  2) Replacing Remark Plugin With MDX
&lt;/h3&gt;

&lt;p&gt;Go to your &lt;code&gt;gatsby-config.js&lt;/code&gt; file, Replace plugin &lt;code&gt;gatsby-transformer-remark&lt;/code&gt; with &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;--------------------
&lt;/span&gt;&lt;span class="err"&gt;||gatsby-config.js||&lt;/span&gt;
--------------------
&lt;span class="gd"&gt;- resolve: `gatsby-transformer-remark`
&lt;/span&gt;&lt;span class="gi"&gt;+ resolve: `gatsby-plugin-mdx`
&lt;/span&gt;&lt;span class="p"&gt;options: {
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the sub-plugins of Remark works perfectly with MDX. We just need to change the &lt;code&gt;plugins&lt;/code&gt; option to &lt;code&gt;gatsbyRemarkPlugins&lt;/code&gt; to let MDX know that these are Remark plugins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-------------------------
&lt;/span&gt;&lt;span class="err"&gt;||gatsby-config.js||&lt;/span&gt;
-------------------------
&lt;span class="p"&gt;resolve: `gatsby-plugin-mdx`
options: {
&lt;/span&gt;&lt;span class="gd"&gt;- plugins: [
&lt;/span&gt;&lt;span class="gi"&gt;+ gatsbyRemarkPlugins: [
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need to add &lt;code&gt;gatsby-remark-images&lt;/code&gt; plugin as both a sub-plugin of &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt; and a string entry in the plugins array.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;-------------------------&lt;/span&gt;
&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nx"&gt;gatsby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="o"&gt;-------------------------&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`gatsby-remark-images`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-source-filesystem`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/content/blog`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`blog`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-source-filesystem`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/content/assets`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`assets`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-plugin-mdx`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`.md`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`.mdx`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;gatsbyRemarkPlugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-remark-images`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;590&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;linkImagesToOriginal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-remark-copy-linked-files`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-remark-smartypants`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-plugin-feed`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-plugin-sharp`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-change-file-extensions"&gt;
  &lt;/a&gt;
  3) Change File Extensions
&lt;/h3&gt;

&lt;p&gt;Change your markdown files extension from &lt;code&gt;.md&lt;/code&gt; to &lt;code&gt;.mdx&lt;/code&gt;. This will allow MDX to recognize and process them with specified configurations.&lt;/p&gt;

&lt;p&gt;If you don't want to change the files extention might be because of large number of files in your project. In this case you can configure MDX plugin to accept both &lt;code&gt;.md&lt;/code&gt; and &lt;code&gt;.mdx&lt;/code&gt; files by adding the &lt;code&gt;extensions&lt;/code&gt; option in &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;-------------------------&lt;/span&gt;
&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nx"&gt;gatsby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="o"&gt;-------------------------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;`gatsby-plugin-mdx`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`.md`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;`.mdx`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;u&gt;Tip&lt;/u&gt;: If you use Vs-code as your code editor. Use this &lt;a href="https://marketplace.visualstudio.com/items?itemName=silvenon.mdx"&gt;MDX extention&lt;/a&gt; for syntax highlighting and bracket matching in MDX files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#4-changes-in-gatsbynodejs"&gt;
  &lt;/a&gt;
  4) Changes In gatsby-node.js
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;createPages&lt;/code&gt; API, Replace &lt;code&gt;allMarkdownRemark&lt;/code&gt; with &lt;code&gt;allMdx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-----------------------
&lt;/span&gt;&lt;span class="err"&gt;||gatsby-node.js||&lt;/span&gt;
-----------------------
&lt;span class="p"&gt;exports.createPages = ({ graphql, actions }) =&amp;gt; {
&lt;/span&gt;  const { createPage } = actions;

  const blogPost = path.resolve(`./src/templates/blog-post.tsx`);
  const blogList = path.resolve(`./src/templates/blog-list.tsx`);
  const tagTemplate = path.resolve(`./src/templates/tags.tsx`);

  return graphql(
    `
      {
&lt;span class="gd"&gt;-       allMarkdownRemark(
&lt;/span&gt;&lt;span class="gi"&gt;+       allMdx(
&lt;/span&gt;          sort: { fields: [frontmatter___date], order: DESC }
          limit: 1000
        ) {
          edges {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Also, In the &lt;code&gt;onCreateNode&lt;/code&gt; API. Where it compares the node type to create slugs, there replace &lt;code&gt;MarkdownRemark&lt;/code&gt; to &lt;code&gt;Mdx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-----------------------
&lt;/span&gt;&lt;span class="err"&gt;||gatsby-node.js||&lt;/span&gt;
-----------------------
&lt;span class="p"&gt;exports.onCreateNode = ({ node, actions, getNode }) =&amp;gt; {
&lt;/span&gt;  const { createNodeField } = actions;

-  if (node.internal.type === `MarkdownRemark`) {
&lt;span class="gi"&gt;+  if (node.internal.type === `Mdx`) {
&lt;/span&gt;    const value = createFilePath({ node, getNode });
    if (typeof node.frontmatter.slug !== 'undefined') {
      createNodeField({
        node,
        name: 'slug',
        value: node.frontmatter.slug,
      });
    } else {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-other-replacements"&gt;
  &lt;/a&gt;
  5) Other Replacements
&lt;/h3&gt;

&lt;p&gt;In your GraphQL queries, wherever you use &lt;code&gt;allMarkdownRemark&lt;/code&gt; change it to &lt;code&gt;allMdx&lt;/code&gt; and &lt;code&gt;markdownRemark&lt;/code&gt; to &lt;code&gt;mdx&lt;/code&gt;. Also in the &lt;code&gt;mdx&lt;/code&gt; feild in query, change &lt;code&gt;html&lt;/code&gt; to &lt;code&gt;body&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;------------------------------------
&lt;/span&gt;&lt;span class="err"&gt;||src/templates/blog-post.tsx||&lt;/span&gt;
------------------------------------
&lt;span class="p"&gt;export const pageQuery = graphql`
&lt;/span&gt;  query BlogPostBySlug($slug: String!, $tag: [String!]) {
    site {
      siteMetadata {
        siteUrl
      }
    }
&lt;span class="gd"&gt;-    markdownRemark(fields: { slug: { eq: $slug } }) {
&lt;/span&gt;&lt;span class="gi"&gt;+    mdx(fields: { slug: { eq: $slug } }) {
&lt;/span&gt;      id
      excerpt(pruneLength: 160)
&lt;span class="gd"&gt;-      html
&lt;/span&gt;&lt;span class="gi"&gt;+      body
&lt;/span&gt;      fields {
        slug
      }
      frontmatter {
        title
        date(formatString: "DD MMM, YYYY")
        description
        hasJs
        tags
        cover {
          publicURL
          childImageSharp {
            fluid(maxWidth: 1170, quality: 100) {
              ...GatsbyImageSharpFluid_noBase64
            }
          }
        }
      }
    }
&lt;span class="gd"&gt;-    allMarkdownRemark(
&lt;/span&gt;&lt;span class="gi"&gt;+    allMdx(
&lt;/span&gt;      limit: 3
      sort: { fields: [frontmatter___date], order: DESC }
      filter: {
        frontmatter: { tags: { in: $tag } }
        fields: { slug: { ne: $slug } }
      }
    ) {
      edges {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is a chance that you receive an error at build time by a plugin which is quering for &lt;code&gt;allMarkdownRemark&lt;/code&gt;. I received this error from &lt;code&gt;gatsby-plugin-feed&lt;/code&gt; plugin to resolve this i moved this inside &lt;code&gt;gatsbyRemarkPlugins&lt;/code&gt; option in &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt; from the main plugins array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, In your post-template file import &lt;code&gt;MDXRenderer&lt;/code&gt; component from &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-----------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tsx&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="o"&gt;-----------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MDXRenderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gatsby-plugin-mdx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Finally, Replace &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; to a &lt;code&gt;MDXRenderer&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-----------------------------------------------------
&lt;/span&gt;&lt;span class="err"&gt;||src/components/post-details/post-details.tsx||&lt;/span&gt;
-----------------------------------------------------
  &amp;lt;PostDescriptionWrapper className="post_des_wrapper"&amp;gt;
&lt;span class="gd"&gt;-   &amp;lt;PostDescription
-     dangerouslySetInnerHTML={{ __html: description }}
-     className="post_des"
-   /&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+   &amp;lt;PostDescription className="post_des"&amp;gt;
+     &amp;lt;MDXRenderer&amp;gt;{description}&amp;lt;/MDXRenderer&amp;gt;
+   &amp;lt;/PostDescription&amp;gt;
&lt;/span&gt;    {tags == null ? null : (
      &amp;lt;PostTags&amp;gt;
        {tags.map((tag, index) =&amp;gt; (
          &amp;lt;Link key={index} to={`/tags/${_.kebabCase(tag)}/`}&amp;gt;
            {`#${tag}`}
          &amp;lt;/Link&amp;gt;
        ))}
      &amp;lt;/PostTags&amp;gt;
    )}
  &amp;lt;/PostDescriptionWrapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now you can use custom React components or third-party UI elements in your markdown files. Remember that MDX uses JSX in place of HTML. So, make sure that HTML in you markdown file is valid JSX. for example, if you have used &lt;code&gt;class&lt;/code&gt; attribute in HTML component, change it to &lt;code&gt;className&lt;/code&gt;. So, that it doesn't create a conflict when processed by MDX.&lt;/p&gt;

&lt;p&gt;Original Post Link =&amp;gt; &lt;a href="https://webbrainsmedia.com/blogs/remark-to-mdx-in-gatsby"&gt;https://webbrainsmedia.com/blogs/remark-to-mdx-in-gatsby&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>react</category>
      <category>markdown</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Class Fields in JavaScript 🔥</title>
      <author>Suprabha</author>
      <pubDate>Sun, 27 Jun 2021 19:30:33 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/class-fields-in-javascript-500</link>
      <guid>https://dev.to/suprabhasupi/class-fields-in-javascript-500</guid>
      <description>&lt;p&gt;&lt;span&gt;I&lt;/span&gt;n JavaScript, there are two types of object fields (properties and methods):&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#public"&gt;
  &lt;/a&gt;
  1️⃣ Public 👭
&lt;/h4&gt;

&lt;p&gt;Accessible from anywhere. They comprise the external interface. Until now we were only using public properties and methods.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#private"&gt;
  &lt;/a&gt;
  2️⃣ Private 🔐
&lt;/h4&gt;

&lt;p&gt;Accessible only from inside the class. These are for the internal interface.&lt;/p&gt;

&lt;p&gt;Class fields are public by default, but private class members can be created by using a hash &lt;code&gt;#&lt;/code&gt; prefix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-field-syntax"&gt;
  &lt;/a&gt;
  Class Field Syntax
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can define new private members&lt;/li&gt;
&lt;li&gt;You will get error if you break the access rule&lt;/li&gt;
&lt;li&gt;It has public and private static fields, which allow you to declare class member that can be accessed without creating instance of the class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using variable like &lt;code&gt;_variableName&lt;/code&gt;, it means we can use that variable only in the class.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;example&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GetDateTime&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this does not prevent &lt;code&gt;_start&lt;/code&gt; variable accessible publicly. Checkout here 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GetDateTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// Thu Jun 24 2021 16:36:06 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create real private instance you can use &lt;code&gt;#&lt;/code&gt; to create &lt;strong&gt;private variables.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;📝 NOTE: You just need to replace &lt;code&gt;_&lt;/code&gt; with &lt;code&gt;#&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GetDateTime&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GetDateTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// Uncaught SyntaxError: Private field '#start' must be declared in an enclosing class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The encapsulation is enforced by language. &lt;/p&gt;

&lt;p&gt;It has also support for &lt;strong&gt;private methods&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GetDateTime&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;getNow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;getNow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GetDateTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;// Thu Jun 24 2021 16:55:32 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The private methods can only be accessible inside of the class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Private static fields&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also create private static variable.&lt;/p&gt;

&lt;p&gt;The limitation of static variables being called by only static methods still holds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GetDateTime&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GetDateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;// Thu Jun 24 2021 17:53:02 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields"&gt;Private Class Fields&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Coercion In Javascript</title>
      <author>Thomas(Tripp) White </author>
      <pubDate>Sun, 27 Jun 2021 19:18:31 +0000</pubDate>
      <link>https://dev.to/turpp/coercion-in-javascript-3fch</link>
      <guid>https://dev.to/turpp/coercion-in-javascript-3fch</guid>
      <description>&lt;p&gt;Javascript utilizes implicit type coercion. Understanding this concept is the difference in writing fluid code or having a debugging mess. In this article I will explain what coercion is, how it behaves with different operators, difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;, truthy/flasy values, and logical operators. Let's jump in so you can start taking advantage of this javascript magic. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-coercion"&gt;
  &lt;/a&gt;
  What is Coercion?
&lt;/h2&gt;

&lt;p&gt;Coercion is basically the converting of one data type to another. Javascript has implicit coercion. This means that it automatically changes data types depending on the situation. These situations range from adding/subtracting, if statements, and when comparing different data types. This saves us from having to convert the data type manually and then performing these operations. Just make sure you know what converts and when!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-endraw-or-raw-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;===&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The easiest way to see coercion in action is with the &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;===&lt;/code&gt; operators. This is a way you can manually control javascript implicit coercion. When you use the &lt;code&gt;==&lt;/code&gt; operator, javascript will change the data types to match and then compare the two values. When using the &lt;code&gt;===&lt;/code&gt; Javascript will not change the data types and will compare the values just like they are .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//return true &lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//return false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-endraw-or-raw-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Javascript will change types when using both the &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; operator. Javascript will behave differently depending on which operator you use. For example, when you add a string and a number together Javascript will automatically convert the number type to a string type and then concatenate (add) the two strings together. When subtracting a string and a number Javascript will change the string data type to a number and then subtract and return a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//return ’33’&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//return 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#boolean-coercion"&gt;
  &lt;/a&gt;
  Boolean Coercion
&lt;/h2&gt;

&lt;p&gt;This type of coercion takes place with logical operators and if statements. In these situations Javascript doesn’t change the type to match like above, but instead converts to truth or false. Javascript does this by utilizing truthy and falsy values. Truthy values are anything that is NOT &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0n&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;“”&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;zero&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="c1"&gt;// will not console log anything because 0 is a falsy value and converts x to false in the if statement.&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;worked&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="c1"&gt;// y is a truthy value. Y is converted to true in the if statement.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logical-operators"&gt;
  &lt;/a&gt;
  Logical Operators
&lt;/h2&gt;

&lt;p&gt;Logical Operators in javascript works a little different than some other programming languages. When you use a logical operator, javascript will return one of the values passed into the operator and NOT true or false. To understand how this works make sure you understand truthy and falsy values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-or-operator"&gt;
  &lt;/a&gt;
  &lt;code&gt;||&lt;/code&gt; (or operator)
&lt;/h3&gt;

&lt;p&gt;This operator will always check if the first value is true. If the first value is true it will return it. If it is false it will always return the second value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;zero&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//returns ‘zero’ first value is false so will return the second value&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;//returns ‘zero’ first value is truth so will return first value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ampamp-endraw-and-operator"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and operator)
&lt;/h3&gt;

&lt;p&gt;With the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator javascript will check to see if any of the values are falsy. If any value is falsy javascript will return the first falsy value. If both values are true then javascript will return the second value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;zero&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="c1"&gt;//returns 0. 0 is falsy so javascript returns the first falsy value.&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="c1"&gt;//returns undefined. z is false so javascript returns the first falsy value.&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;//returns ‘hello’. both values are truthy so javascript returns the second value. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this helps you get a better grasp on implicit coercion in Javascript. Take your time to read this over and let the topic fully sink in. Bookmark it and use it as a reference when studying for technical interviews! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introduction to Law and Artificial Intelligence - Upcoming event</title>
      <author>Hannah</author>
      <pubDate>Sun, 27 Jun 2021 19:11:56 +0000</pubDate>
      <link>https://dev.to/cyberqueen/introduction-to-law-and-artificial-intelligence-upcoming-event-49g4</link>
      <guid>https://dev.to/cyberqueen/introduction-to-law-and-artificial-intelligence-upcoming-event-49g4</guid>
      <description>&lt;p&gt;Join me @ AI Advocates Community to learn how Law affects artificial intelligence and also how artificial intelligence affects the law field.&lt;/p&gt;

&lt;p&gt;Many people don't really understand the concept of law and AI.&lt;br&gt;
So AI Advocates Community is advocating for it.&lt;/p&gt;

&lt;p&gt;DATE of the event:July 3, 2021&lt;/p&gt;

&lt;p&gt;Register for the event using the link below;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.eventbrite.com/e/introduction-to-law-and-ai-tickets-159225560939"&gt;https://www.eventbrite.com/e/introduction-to-law-and-ai-tickets-159225560939&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>Currying in JavaScript</title>
      <author>Christopher Glikpo</author>
      <pubDate>Sun, 27 Jun 2021 17:55:07 +0000</pubDate>
      <link>https://dev.to/cglikpo/currying-in-javascript-1jke</link>
      <guid>https://dev.to/cglikpo/currying-in-javascript-1jke</guid>
      <description>&lt;p&gt;Currying is a process in functional programming in which we can transform a function with multiple arguments into a sequence of nesting functions. It returns a new function that expects the next argument inline.&lt;/p&gt;

&lt;p&gt;NB:The number of arguments a function takes is also called &lt;code&gt;arity&lt;/code&gt;.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply(a, b) {
    // do sth
}
function _multiply(a, b, c) {
    // do sth
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;function &lt;code&gt;multiply&lt;/code&gt; takes two arguments (2-arity function) and &lt;code&gt;_multiply&lt;/code&gt; takes three arguments (3-arity function).&lt;/p&gt;

&lt;p&gt;So,Currying break down a function that takes multiple arguments into a series of functions that each take only one argument.&lt;/p&gt;

&lt;p&gt;Here's an example in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function  multiply(x,y,z) {
  return x*y*z;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a function that takes three arguments, x, y and z  and returns their product.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; multiply(1,2,3); // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will now curry this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply(x) {
    return (y) =&amp;gt; {
        return (z) =&amp;gt; {
            return x * y * z
        }
    }
}
console.log(multiply(1)(2)(3)) // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now,we turn a function call multipy(1,2,3) into multipy(1)(2)(3)&lt;/p&gt;

&lt;p&gt;To better understand this multiply(1)(2)(3), we may divide it into three parts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multi1 = multiply(1);
const multi2 = multi1(2);
const result = multi2(3);
console.log(result); // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now,let's get to know how it works.We passed 1 to the multiply function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let multi1 = multiply(1);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It returns the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (y) =&amp;gt; {
        return (z) =&amp;gt; {
            return x * y * z
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, &lt;code&gt;multi1&lt;/code&gt; holds the above function definition which takes an argument &lt;code&gt;y&lt;/code&gt;.&lt;br&gt;
We called the &lt;code&gt;multi1&lt;/code&gt; function, passing in &lt;code&gt;2&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let multi2 = multi1(2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The multi1 will return the third function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (z) =&amp;gt; {
            return x * y * z
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The returned function is now stored in multi2 variable.&lt;br&gt;
multi2 will essentially be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multi2 = (z) =&amp;gt; {
            return x * y * z
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When multi2 is called with 3 as the parameter,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const result = multi2(3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does the computation using the parameters that were previously provided in: x = 1, y = 2, and returns 6.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(result); // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last function only accepts &lt;code&gt;z&lt;/code&gt; variable but will perform the operation with other variables whose enclosing function scope has long since returned. Because of &lt;code&gt;Closure&lt;/code&gt;, it still functions🔥.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#currying-amp-partial-application"&gt;
  &lt;/a&gt;
  Currying &amp;amp; Partial application 🤔
&lt;/h2&gt;

&lt;p&gt;Some may now believe that the number of nested functions a curried function has is proportional to the number of arguments it receives. That qualifies it as a curry.&lt;/p&gt;

&lt;p&gt;Let's take same multiply example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply(x) {
    return (y) =&amp;gt; {
        return (z) =&amp;gt; {
            return x * y * z
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be called like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = multiply(10);
a(3,12);
a(20,12);
a(20,13);

// OR

multiply(10)(3,12);
multiply(10)(20,12);
multiply(10)(20,13);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In contrast to our previous version, which had three arguments and three nesting functions, the above function takes three arguments and contains two nested functions.&lt;/p&gt;

&lt;p&gt;This isn't a curry in the traditional sense. We've only used the multiply function in a limited way.&lt;/p&gt;

&lt;p&gt;Currying and Partial Application are related (because of closure), but they are of different concepts.&lt;/p&gt;

&lt;p&gt;Partial application transforms a function into another function with smaller &lt;code&gt;arity&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply1(x, y, z) {
    return multiply2(x,y,z)
}

// to

function multiply1(x) {
    return (y,z) =&amp;gt; {
        return mulitply2(x,y,z)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Currying, it would be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply1(x) {
    return (y) = &amp;gt; {
        return (z) = &amp;gt; {
            return multiply2(x,y,z)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Currying generates nested functions based on the number of arguments passed into the function. Each function is given a parameter. There is no currying if there is no argument.&lt;/p&gt;

&lt;p&gt;To create a function that accepts a function and returns a curried function, follow these steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function currying(fn, ...args) {
    return (..._arg) =&amp;gt; {
        return fn(...args, ..._arg);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function takes a function (fn) and a variable number of parameters (...args) to curry. After fn, the rest operator is used to collect the number of parameters into...args.&lt;/p&gt;

&lt;p&gt;Then, as... args, we return a function that additionally collects the remaining parameters. This function uses the spread operator to call the original function fn, giving in...args and... args as parameters, and then returns the value to the user.&lt;/p&gt;

&lt;p&gt;The above code may now be used to build a curry function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply(x,y,z) {
    return x * y * z
}

let multi = currying(multiply,10);
multi(2,3); // 60
multi(1,4); // 40
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Closure&lt;/code&gt; makes currying possible in JavaScript. I hope you have learned something new about currying!&lt;/p&gt;

&lt;p&gt;If you've reached this point, thank you very much. I hope that this tutorial has been helpful for you and I'll see you all in the next.&lt;/p&gt;

&lt;p&gt;If you  want to learn more about Web Development don't forget to to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo/featured"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to set up Golang application performance monitoring with open source monitoring tool</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Sun, 27 Jun 2021 17:54:27 +0000</pubDate>
      <link>https://dev.to/signoz/how-to-set-up-golang-application-performance-monitoring-with-open-source-monitoring-tool-80d</link>
      <guid>https://dev.to/signoz/how-to-set-up-golang-application-performance-monitoring-with-open-source-monitoring-tool-80d</guid>
      <description>&lt;p&gt;If you want to check our Github repo before diving in 👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;

&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;

&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
👇 Features:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Scalability, Reliability, Maintainability...&lt;/p&gt;

&lt;p&gt;The list goes on for the benefits of microservices architecture in today's world. But along with these benefits also comes the challenges of complexity. How do you ensure your distributed infrastructure, which spans across servers, datastores, cloud vendors, and third-party APIs, is in fine health to meet customer requirements all the time?&lt;/p&gt;

&lt;p&gt;A single user request may get routed through three, five, eighteen, or hundred different layers of services.&lt;/p&gt;

&lt;p&gt;And it quickly becomes unrealistic for teams to identify which service was responsible for slowing a request down. Engineering teams need a system that brings context to this complexity. A system which enables quick identification of potential issues so that it can be resolved as quickly. And that's where there is a need for a robust monitoring framework.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introducing-signoz"&gt;Introducing SigNoz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-1-installing-signoz"&gt;Installing SigNoz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-2-instrumenting-sample-golang-app"&gt;Instrumenting sample Golang app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-signoz-dashboard-to-identify-issues-causing%20high-latency-in-your-app"&gt;Using SigNoz dashboard to identify issues causing high latency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#introducing-signoz"&gt;
  &lt;/a&gt;
  Introducing SigNoz
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application monitoring and observability platform which can be installed within your infra. You can track metrics like p99 latency, error rates for your services, external API calls, and individual endpoints. With service maps, you can quickly assess the health of your services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhx_qDbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sitmi6l5fy202h64yfad.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhx_qDbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sitmi6l5fy202h64yfad.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And once you know the affected service, trace data can help you identify the exact code causing the issue. Using SigNoz dashboard, you can visualize your traces easily with flamegraphs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0f0pQhsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxnezrbcvik2l0qd0iuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0f0pQhsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxnezrbcvik2l0qd0iuv.png" alt="Flamegraphs on SigNoz dashboard"&gt;&lt;/a&gt;Distributed tracing visualized with flamegraphs on SigNoz dashboard&lt;/p&gt;

&lt;p&gt;Now let's get down to some action and see everything for yourself.&lt;/p&gt;

&lt;p&gt;We will divide the tutorial into two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing SigNoz&lt;/li&gt;
&lt;li&gt;Instrumenting sample app to start monitoring&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#part-1-installing-signoz"&gt;
  &lt;/a&gt;
  Part 1 - Installing SigNoz
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install Docker&lt;/strong&gt;&lt;br&gt;
You can install Docker by following the steps listed on their website &lt;a href="https://www.docker.com/get-started"&gt;here&lt;/a&gt;. For this tutorial, you can choose the Docker Desktop option based on the system you have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMxlqiQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj2h0mewmcwyf8j72ypw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMxlqiQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj2h0mewmcwyf8j72ypw.png" alt="Docker installation landing page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clone SigNoz GitHub repository&lt;/strong&gt;&lt;br&gt;
From your terminal use the following command to clone SigNoz's GitHub repository.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Update path to signoz/deploy and install SigNoz&lt;/strong&gt;&lt;br&gt;
The deploy folder contains the files necessary for deploying SigNoz through Docker.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You will be asked to select one of the 2 ways to proceed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clickhouse as database (default)&lt;/li&gt;
&lt;li&gt;Kafka + Druid setup to handle scale (recommended for production use)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Trying out SigNoz with clickhouse database takes less than 1.5GB of memory and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCEa3C8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uenodd3f8igg2tghijmv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCEa3C8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uenodd3f8igg2tghijmv.png" alt="SigNoz installation process on mac terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will get the following message once the installation is complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jaXCBdab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phjjj8ns2l0wmi1pghsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jaXCBdab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phjjj8ns2l0wmi1pghsp.png" alt="Success message once the installation is complete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the installation runs successfully, the UI should be accessible at port 3000. Wait for 2-3 mins for the data to be available to frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Al3hUTeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtmmoslacztt1j5cxqk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Al3hUTeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtmmoslacztt1j5cxqk9.png" alt="SigNoz dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The applications shown in the dashboard are from a sample app called Hot R.O.D that comes with the installation bundle. It has 4 microservices being monitored: Frontend, Customer, Driver and Route. You can access the Hot R.O.D application UI at: &lt;a href="http://localhost:9000/"&gt;http://localhost:9000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you have SigNoz up and running, let's see how instrumentation works. Instrumentation is the process of implementing code instructions to monitor your application's performance. Instrumentation is key to see how your application handles the real world. It helps you generate trace data which you can then use to understand what's happening inside your systems.&lt;/p&gt;

&lt;p&gt;SigNoz supports &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; as the primary way for users to instrument their application. OpenTelemetry is a single, vendor-agnostic instrumentation library with support for both automatic and manual instrumentation. More details on OpenTelemetry  Golang SDKs and APIs &lt;a href="https://github.com/open-telemetry/opentelemetry-go"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-2-instrumenting-sample-golang-app"&gt;
  &lt;/a&gt;
  Part 2 - Instrumenting sample Golang app
&lt;/h2&gt;

&lt;p&gt;To see how SigNoz can start reporting data of a Golang app, let's see how it works with a sample bookstore app (&lt;a href="https://github.com/SigNoz/sample-golang-app"&gt;GitHub repo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It is a simple bookstore app with a REST API that provides book data and performs CRUD operations. The app uses Gin framework to build a RESTful API. Gin is a high-performance HTTP web framework written in Golang containing a set of commonly used functionalities like routing, middleware support and rendering. &lt;/p&gt;

&lt;p&gt;OpenTelemetry has specific instrumentation packages to support popular Golang packages and use cases.  For example, this app uses the Gin framework for request routing. OpenTelemetry provides instrumentation package named otelgin to instrument the Gin framework which you need to import in your app. You can find the complete list of supported Golang packages by OpenTelemetry &lt;a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;br&gt;
Verify if you have Golang installed on your machine by running &lt;code&gt;$ go version&lt;/code&gt; on your terminal. If you don't have Golang installed, you can download it here.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Clone sample Golang app repository&lt;/strong&gt;&lt;br&gt;
From your terminal use the following command to clone sample Golang app GitHub repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/sample-golang-app.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Update path to sample-golang-app &amp;amp; check if the app is working&lt;/strong&gt;&lt;br&gt;
Update your terminal path to the sample app directory and check if the app is working or not using the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd sample-golang-app
go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure you have an available port for running your app. If by default, the golang app tries to run on port 8080, you might get an error as SigNoz uses port 8080 for its query service. On your mac terminal, you can set the listening port of your app by using following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export PORT = 8081
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When the server runs successfully, you can check the endpoint of your sample bookstore app at: &lt;a href="http://localhost:8081/books"&gt;http://localhost:8081/books&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see an empty array, it means your application is working. You can check out how to write, update and delete books in your array from the article &lt;a href="https://blog.logrocket.com/how-to-build-a-rest-api-with-golang-using-gin-and-gorm/"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSI4sv2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4frszm97m98cazjo0up.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSI4sv2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4frszm97m98cazjo0up.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;code&gt;/books&lt;/code&gt; endpoint of our bookstore app&lt;/p&gt;

&lt;p&gt;Once you ensure that your application is working, exit the server by pressing 'Ctrl + C' on your mac terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up OpenTelemetry Golang instrumentation packages&lt;/strong&gt;&lt;br&gt;
The file &lt;code&gt;main.go&lt;/code&gt; has instructions to import all the necessary OpenTelemetry packages in order to instrument the sample app. For this app, we import the following OpenTelemetry packages.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import (
    "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/exporters/otlp"
    "go.opentelemetry.io/otel/exporters/otlp/otlpgrpc"
    "go.opentelemetry.io/otel/label"

    "go.opentelemetry.io/otel/sdk/resource"
    sdktrace "go.opentelemetry.io/otel/sdk/trace"
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You just need to run it with the necessary environment variables in order to start sending data to SigNoz. Use the following command to run and configure the app to send data to SigNoz:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SERVICE_NAME=goApp INSECURE_MODE=true OTEL_EXPORTER_OTLP_ENDPOINT=&amp;lt;IP of SigNoz backend&amp;gt;:4317 go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;'Ip of SigNoz' can be replaced with &lt;code&gt;localhost&lt;/code&gt; in this case. Hence, the final command becomes:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SERVICE_NAME=goApp INSECURE_MODE=true OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317 go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And, congratulations! You have instrumented your sample Golang app. Hit the &lt;code&gt;/books&lt;/code&gt; endpoint of the bookstore app at &lt;a href="http://localhost:8081/books"&gt;http://localhost:8081/books&lt;/a&gt;. Refresh it a bunch of times in order to generate load, and wait for 1-2 mins for data to appear on SigNoz dashboard. &lt;/p&gt;

&lt;p&gt;You can now access the SigNoz dashboard at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to monitor your app for performance metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ekuvt2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tossy6w8p5t75ksmvlux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ekuvt2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tossy6w8p5t75ksmvlux.png" alt="SigNoz dashboard"&gt;&lt;/a&gt;Sample Golang app appears in the list of application&lt;/p&gt;

&lt;p&gt;If you want to instrument your own Golang application, you can read about it in our &lt;a href="https://signoz.io/docs/instrumentation/golang/#instrumentation-of-a-sample-golang-application"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-signoz-dashboard-to-identify-issues-causing-high-latency-in-your-app"&gt;
  &lt;/a&gt;
  Using SigNoz dashboard to identify issues causing high latency in your app
&lt;/h2&gt;

&lt;p&gt;Now that you have installed SigNoz, let's see how you can identify specific events causing high latency in your deployed applications.&lt;/p&gt;

&lt;p&gt;In just 5 easy steps, our dashboard lets you drill down to events causing a delay in your deployed apps 👇&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose the service you want to inspect&lt;/strong&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdb5nemO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yehyrukl18lzatn0mvw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdb5nemO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yehyrukl18lzatn0mvw0.png" alt="List of application on SigNoz dashboard"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose the timestamp where latency is high and click on view traces&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ssJqp_Ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mbmhfdu0vmczzm8nuj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssJqp_Ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mbmhfdu0vmczzm8nuj5.png" alt="Inspect latency graph and click on view traces for high latency timestamps"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose the trace ID with the highest latency&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EG1CVGcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40jgfgum0b1x42620jqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EG1CVGcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40jgfgum0b1x42620jqi.png" alt="Sort and choose the trace ID with highest latency"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Inspect distributed traces with flamegraph&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tje39LHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58fvwt6eaet6nb07iwwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tje39LHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58fvwt6eaet6nb07iwwh.png" alt="Flamegraphs"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Zero in on the highest latency event and take action&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1d-KV7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efon6ci18irrwwu0f0m1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1d-KV7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efon6ci18irrwwu0f0m1.png" alt="Identify specific event causing the delay"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you need any help with trying out SigNoz, feel free to mail me at &lt;a href="mailto:ankit.anand@signoz.io"&gt;ankit.anand@signoz.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out our documentation for more installation guides and troubleshooting instructions.&lt;/p&gt;

&lt;p&gt;They say, "If it's not monitored, then it's not in production." And with SigNoz you can start monitoring your applications now. Enabling your team to resolve issues quickly in production is critical to maintaining complex distributed systems in fine health.&lt;/p&gt;

&lt;p&gt;At SigNoz, we are committed to making the best open-source, self-hosted tool for application performance monitoring. Feel free to check out our GitHub repo here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;
&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;
&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
👇 Features:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>devops</category>
      <category>go</category>
      <category>cloud</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Learn how to build responsive websites with CSS media query (Practical)</title>
      <author>David Asaolu</author>
      <pubDate>Sun, 27 Jun 2021 17:53:45 +0000</pubDate>
      <link>https://dev.to/arshadayvid/learn-how-to-build-responsive-websites-with-css-media-query-practical-59k5</link>
      <guid>https://dev.to/arshadayvid/learn-how-to-build-responsive-websites-with-css-media-query-practical-59k5</guid>
      <description>&lt;p&gt;Hi, welcome to this tutorial. Today, I will be explaining how to build websites that are fully responsive to all screen sizes with CSS3 media query. 🚀&lt;/p&gt;

&lt;p&gt;So sit back, put your seatbelts on, Let's Ride!🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/u5bbqJE63sBGM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/u5bbqJE63sBGM/giphy.gif" alt="Learn how to build responsive websites with CSS media query"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-a-media-query"&gt;
  &lt;/a&gt;
  So what is a Media Query?
&lt;/h3&gt;

&lt;p&gt;Media query consists of a media type and one or more expressions, involving media features, which resolve to either true or false.&lt;br&gt;
It is written as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media screen and (max-width: 768px) {
    body {
       display : none;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above, simply means if the screen size is &amp;lt;=768px (less than or equal to 768px), the body of the HTML page should be blank.&lt;/p&gt;

&lt;p&gt;The result of the query is true if the media type specified in the media query matches the type of device the document is being displayed on and all expressions in the media query are true. When a media query is true, the corresponding CSS styles are applied.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a website to be fully website, &lt;strong&gt;Breakpoints&lt;/strong&gt; are used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Breakpoints are customizable widths that determine how your responsive layout behaves across device or viewport sizes. They can be at any point you choose to make them available, but mostly, at the points where your website layout breaks. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Breakpoints are the building blocks of a responsive design&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an image of breakpoints, you should note, either of the two can be used.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYnKTamL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3ex65nj56kwvezi4398.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYnKTamL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3ex65nj56kwvezi4398.png" alt="Screen sizes breakpoints"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgdpsApX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gysmy2cpzufnkbek2k8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgdpsApX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gysmy2cpzufnkbek2k8v.png" alt="Screen sizes breakpoints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's jump right into the practical use of media query and make a website layout fully responsive.😀🚀&lt;/p&gt;

&lt;p&gt;I just created a website layout using CSS Flexbox, if you are not familiar with flexbox, you may &lt;a href="https://dev.to/arshadayvid/learn-and-master-flexbox-by-building-commonly-used-web-components-14n8"&gt;check here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-is-an-exercise-for-you"&gt;
  &lt;/a&gt;
  Here is an Exercise for you 😀🚀
&lt;/h2&gt;

&lt;p&gt;🚀 Edit this &lt;a href="https://codepen.io/arshadayvid/pen/XWRroXg"&gt;code&lt;/a&gt; on &lt;a href="https://codepen.io"&gt;Codepen&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;🚀 Share the link your solution in the comment section &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My Solution 🚀 : Download the Source code &lt;a href="https://github.com/dha-stix/media-query-DEV"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope you enjoyed this short tutorial on Media query?&lt;br&gt;
&lt;a href="https://i.giphy.com/media/XbxZ41fWLeRECPsGIJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XbxZ41fWLeRECPsGIJ/giphy.gif" alt="Media Query"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow and Connect with me on &lt;br&gt;
🚀 &lt;a href="https://www.linkedin.com/in/david-asaolu234/"&gt;Linkedin&lt;/a&gt;&lt;br&gt;
🚀 &lt;a href="https://twitter.com/Arshadayvid"&gt;Twitter&lt;/a&gt;&lt;br&gt;
🚀 &lt;a href="https://github.com/dha-stix"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may also view more examples&lt;br&gt;
🚀 &lt;a href="https://www.w3schools.com/css/css3_mediaqueries_ex.asp"&gt;W3Schools&lt;/a&gt;&lt;br&gt;
🚀&lt;a href="https://css-tricks.com/snippets/css/media-queries-for-standard-devices/"&gt;CSS Tricks&lt;/a&gt;&lt;br&gt;
🚀 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;MDN&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title> 11 JavaScript concepts to understand before you learn Reactjs</title>
      <author>Anjan Shomodder</author>
      <pubDate>Sun, 27 Jun 2021 17:47:03 +0000</pubDate>
      <link>https://dev.to/thatanjan/11-javascript-concepts-to-understand-before-you-learn-reactjs-4f94</link>
      <guid>https://dev.to/thatanjan/11-javascript-concepts-to-understand-before-you-learn-reactjs-4f94</guid>
      <description>&lt;p&gt;Reactjs is a javascript framework. But a beginner can struggle if they don't have solid javascript knowledge. In this blog, you will know about 11 concepts to understand before learning javascript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pass by Value vs Reference: Primitive datas like number, boolean etc. are passed by their value. But non-Primitives like array and object are passed by their memory reference. This is a very important concept of programming. If you don't know about it, you won't be able to write good code.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Class &amp;amp; inheritance: Class and inheritance are very concept of Object oriented programming. And in React, You will use classes to write components. But it is disappearing because of react hooks. But you might find older codes where classes are used. So, learn it.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Spread and Rest operator: Spread and rest operator are very common in reactjs development. If you don't know you will get stuck.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Higher order function and callback: Higher order functions are the function that takes a another function  as an argument. And that function that you pass as an argument is called Callback function. It is a very important concept. In react you will use them. Specially array higher order function. Or more specificaly the &lt;code&gt;map&lt;/code&gt; higher order function.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Asynchronous JavaScript: Learning Asynchronous java script can be time consuming and brain confusing. But its worth is. Once you learn it, your life will be easier with js.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Destructuring: Destructuring simply means pulling your data from object or array to a separate variable. It is very common task with react props.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Arrow function: An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations. Arrow function makes you code clean. Once you understand it, most of the time you will use this. You will see plenty of code using arrow function in react.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Data fetching: Data fetching is really important. Most probably you will need some data from external sources. So you have to know how to fetch data.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Module system: It basically means splitting your code into different parts. You export and import code for code re-usability. I believe it is the most common thing in reactjs development.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Npm: If you don't know how to use npm or yarn or package.json, then just do it. Without it you won't even able to use react locally.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;This keyword: This 'This' is one of the scariest thing of the universe. I still hate 'This'. But you have to understand it. But if you use react hooks then you won't have to worry about it much. &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;These are the things that I think everyone should learn. You might disagree with me. That's completely fine. So, do you know all of the concepts that I have talked about? Let me know in the comment section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I am creating a video series on my youtube channel about how to build a static blogging site using JAMstack.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KYLBb1W1ZBA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/01q6hHwTuP0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-you-going-to-learn-from-this-video-series"&gt;
  &lt;/a&gt;
  What are you going to learn from this video series?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS, NextJs&lt;/li&gt;
&lt;li&gt;Static Site Generation&lt;/li&gt;
&lt;li&gt;Dynamic Routing&lt;/li&gt;
&lt;li&gt;Material-ui&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;how to build a real time view counter&lt;/li&gt;
&lt;li&gt;a small search engine with mongodb and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-demo"&gt;
  &lt;/a&gt;
  Project Demo
&lt;/h2&gt;

&lt;p&gt;You can demo the project from &lt;a href="https://jamstack-blog-demo.vercel.app/"&gt; here &lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig-vao6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owol9cfa63vw4n5t2zsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig-vao6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owol9cfa63vw4n5t2zsr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thatanjan/cules-blog-yt"&gt; View the Project code. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So like, share and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It takes a lot of effort to build those videos.&lt;/p&gt;

&lt;p&gt;If you have any question, put them on the comment section. And also you can connect to me on any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.  I post content there. So stay safe and good bye.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#who-am-i"&gt;
  &lt;/a&gt;
  Who am I?
&lt;/h3&gt;

&lt;p&gt;My name is Anjan. I am a full stack web developer from Dhaka, Bangladesh.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-problems-do-i-solve"&gt;
  &lt;/a&gt;
  What problems do I solve?
&lt;/h4&gt;

&lt;p&gt;I can create complex full stack web applications like social media application, blogging, e-commerce website and many more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;I love to solve problems and develop new ideas. I also enjoy sharing my knowledge to other people who are wiling to learn. That's why I write blog posts and run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#think-we-should-work-together"&gt;
  &lt;/a&gt;
  Think we should work together?
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#feel-free-to-contact-me"&gt;
  &lt;/a&gt;
  Feel free to contact me
&lt;/h5&gt;

&lt;p&gt;Email: &lt;a href="mailto:anjancules@gmail.com"&gt;anjancules@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;portofolio: &lt;a href="https://anjan.vercel.app/"&gt;anjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-my-channel"&gt;
  &lt;/a&gt;
  About My channel:
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#why-would-you-subscribe-to-cules-coding"&gt;
  &lt;/a&gt;
  Why would you subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt; Cules Coding &lt;/a&gt; will teach you full stack development. I will teach you not only the basic concepts but also the advanced concepts that other youtube channels don't cover. I will also teach you Data Structures and Algorithms with abstraction and without Math. You will also find many tutorials about developer tools and technologies. I also explain advanced concepts and technologies with simplicity.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-what-are-you-waiting-for"&gt;
  &lt;/a&gt;
  So what are you waiting for?
&lt;/h4&gt;

&lt;p&gt;Subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;&lt;br&gt;
so that my friend you don't miss any of these cool stuffs.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
  </channel>
</rss>
