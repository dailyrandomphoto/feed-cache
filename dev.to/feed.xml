<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Setup TailwindCSS in Angular the easy way</title>
      <author>Pato</author>
      <pubDate>Thu, 11 Feb 2021 07:04:05 +0000</pubDate>
      <link>https://dev.to/angular/setup-tailwindcss-in-angular-the-easy-way-1i5l</link>
      <guid>https://dev.to/angular/setup-tailwindcss-in-angular-the-easy-way-1i5l</guid>
      <description>&lt;p&gt;In this tutorial, I'm going to show you how to integrate TailwindCSS to your Angular project the EZ EZ way.&lt;/p&gt;

&lt;p&gt;This tutorial is for people that want to work with TailwindCSS in their Angular application with the new released version &lt;code&gt;11.2.0&lt;/code&gt; (comes with native support for TailwindCSS now 😉) or with with older versions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YOU CAN SKIP THE 💩 AND GO STRAIGHT TO THE INSTALLATION STEPS&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Content&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is TailwindCSS?&lt;/li&gt;
&lt;li&gt;How does TailwindCSS work?&lt;/li&gt;
&lt;li&gt;Advantages of TailwindCSS&lt;/li&gt;
&lt;li&gt;Disadvantages of TailwindCSS&lt;/li&gt;
&lt;li&gt;Installing TailwindCSS (Angular version &amp;lt; &lt;code&gt;11.2.0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Installing TailwindCSS (Angular version &amp;gt;= &lt;code&gt;11.2.0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Applying styles to components using TailwindCSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What is TailwindCSS?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"A utility-first CSS framework packed with classes like &lt;code&gt;flex&lt;/code&gt;, &lt;code&gt;pt-4&lt;/code&gt;, &lt;code&gt;text-center&lt;/code&gt; and &lt;code&gt;rotate-90&lt;/code&gt; that can be composed to build any design, directly in your markup." - Tailwind team&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;How does TailwindCSS work?&lt;/h2&gt;

&lt;p&gt;TailwindCSS is different than other CSS frameworks like Bootstrap. It comes with a set of utility classes(CSS classes). This will allow you to create and combine the classes to give your UI the aspect that you want. TailwindCSS allows you to customize their styles in a very easy way to create your own design systems.&lt;/p&gt;

&lt;h2&gt;Advantages of TailwindCSS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You will spend more time in your business logic rather than your CSS&lt;/li&gt;
&lt;li&gt;Pre-made utility classes ready to use&lt;/li&gt;
&lt;li&gt;You add their classes like you would with any CSS class&lt;/li&gt;
&lt;li&gt;Light weight in production&lt;/li&gt;
&lt;li&gt;Mobile first&lt;/li&gt;
&lt;li&gt;Expandable and customizable &lt;/li&gt;
&lt;li&gt;Use it the "old school" way by applying their styles into your CSS classes&lt;/li&gt;
&lt;li&gt;Extensions for your IDE&lt;/li&gt;
&lt;li&gt;Well documented&lt;/li&gt;
&lt;li&gt;Well supported by different tools like Vue and React&lt;/li&gt;
&lt;li&gt;You can always inspect the TailwindCSS classes in a website and see the actual CSS code :)&lt;/li&gt;
&lt;li&gt;The naming convention for the classes make sense
e.g
&lt;code&gt;space-y-4&lt;/code&gt; it will add a vertical(Y-AXIS) space of 4 pixels between your HTML elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Disadvantages of TailwindCSS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I don't recommend it if you are new to CSS, not because is hard but because it makes you lazier. You won't be writing any CSS sometimes just adding classes&lt;/li&gt;
&lt;li&gt;Can make your HTML very dirty. If you add a lot of classes to you HTML element it can get ugly, quick! A solution for this is to create components using the classes from TailwindCSS that way you clean up your HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Installing TailwindCSS (Angular version &amp;lt; 11.2.0)&lt;/h2&gt;

&lt;p&gt;&lt;i&gt;&lt;strong&gt;If your Angular version is greater than or equal to 11.2.0, you can skip this section &lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to use TailwindCSS in your Angular app with version less thatn 11.2.0 in my personal opinion is by using the &lt;a href="https://www.npmjs.com/package/@ngneat/tailwind"&gt;@ngneat/tailwind&lt;/a&gt; npm package. I had a great experience with it (plug and play).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First step is to run the following schematic in your Angular project: &lt;code&gt;ng add @ngneat/tailwind&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When asked if you want to enable dark mode select &lt;code&gt;class&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When asked if you would you like to use Tailwind directives &amp;amp; functions in component styles? select &lt;code&gt;Yes&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When asked what TailwindCSS plugins you want to enable, select &lt;code&gt;forms&lt;/code&gt; and &lt;code&gt;typography&lt;/code&gt; or all of them. That's up to you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v24fEGQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iba6e28rp88mrkuawoa0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v24fEGQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iba6e28rp88mrkuawoa0.gif" alt="angular tailwind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's 4 parts we need to focus on after we have installed TailwindCSS in our Angular app.&lt;/p&gt;

&lt;p&gt;-A new file created &lt;code&gt;tailwind.config.js&lt;/code&gt; it should look like &lt;a href="https://gist.github.com/devpato/ba3507c91396fe852ffde9c0c93bf437"&gt;this&lt;/a&gt;&lt;br&gt;
-A new file created &lt;code&gt;webpack.config.js&lt;/code&gt; it should look like &lt;a href="https://gist.github.com/devpato/0c39042d10993e24c64540696a19bad6"&gt;this&lt;/a&gt;&lt;br&gt;
-The new &lt;code&gt;dark&lt;/code&gt; class added to your &lt;code&gt;index.html&lt;/code&gt; body element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;-Some imports added to your &lt;code&gt;styles.scss&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;'tailwindcss/base'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;'tailwindcss/components'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;'tailwindcss/utilities'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take a look to &lt;a href="https://youtu.be/XFxuKUBUqao"&gt;this&lt;/a&gt; amazing video created by my friend Beeman. It shows you how use TailwindCSS in Angular in 3 MINUTES!&lt;/p&gt;

&lt;h2&gt;Installing TailwindCSS (Angular version &amp;gt;= 11.2.0)&lt;/h2&gt;

&lt;p&gt;&lt;i&gt;&lt;strong&gt;If your Angular version is less than 11.2.0, you can skip this section and look at the instructions above for installation. If you already performed the previous steps, go to &lt;code&gt;Testing TailwindCSS in Angular&lt;/code&gt; section below.&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install with &lt;code&gt;npm install -D tailwindcss&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a TailwindCSS configuration file in the workspace or project root. Name that configuration file &lt;code&gt;tailwind.config.js&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.{html,ts}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
    &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tailwindcss/forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tailwindcss/typography&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In your styles.scss file add the following TailwindCSS imports
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;'tailwindcss/base'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;'tailwindcss/components'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;'tailwindcss/utilities'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;if you are using CSS not SCSS, your file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;Making sure TailwindCSS in Angular is working&lt;/h2&gt;

&lt;p&gt;Go to any of you components and write the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-400"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should see the following button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EI9Xr3Xy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tvvo9pqx7ua7yc2kjzhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EI9Xr3Xy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tvvo9pqx7ua7yc2kjzhz.png" alt="angular tailwindcss"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't want to have that many classes in your HTML, you can clean it up by putting the TailwindCSS classes in your CSS/SCSS files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;py-2&lt;/span&gt; &lt;span class="err"&gt;px-4&lt;/span&gt; &lt;span class="err"&gt;border&lt;/span&gt; &lt;span class="err"&gt;border-transparent&lt;/span&gt; &lt;span class="err"&gt;shadow-sm&lt;/span&gt; &lt;span class="err"&gt;text-sm&lt;/span&gt; &lt;span class="err"&gt;font-medium&lt;/span&gt; &lt;span class="err"&gt;rounded-md&lt;/span&gt; &lt;span class="err"&gt;text-white&lt;/span&gt; &lt;span class="err"&gt;bg-red-400&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;** Notice I'm using the @apply  **&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;Special thanks to:&lt;/h2&gt;

&lt;p&gt;Contributors of the ngneat/tailwind package:&lt;br&gt;
&lt;a href="https://twitter.com/Nartc1410"&gt;Chau Tran&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/beeman_nl"&gt;Beeman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and the other contributors of this awesome package.&lt;/p&gt;

&lt;p&gt;Special thanks to Kevin, GDE from Angular Taiwan for helping me debug my issues.&lt;br&gt;
&lt;a href="https://twitter.com/yoKevinYang"&gt;Kevin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>css</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Data Structures Introduction</title>
      <author>Code_Regina</author>
      <pubDate>Thu, 11 Feb 2021 06:10:36 +0000</pubDate>
      <link>https://dev.to/code_regina/data-structures-introduction-5073</link>
      <guid>https://dev.to/code_regina/data-structures-introduction-5073</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                   -Which Data Structure is The Best?
                   -ES2015 Class Syntax Overview
                   -Data Structure: The Class Keyword
                   -Data Structure: Adding Instance Methods
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#which-data-structure-is-the-best" class="anchor"&gt;
  &lt;/a&gt;
  Which Data Structure is The Best?
&lt;/h3&gt;

&lt;p&gt;Data structures are collections of values, the relationships among them, and the functions or operations that can be applied to the data. Data structures excel at different things. Some are highly specialized, while others are more generally used. &lt;/p&gt;

&lt;p&gt;Visualized Data Structures&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#array" class="anchor"&gt;
  &lt;/a&gt;
  Array
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRHJ9E7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5fwvhuwuptqzphxond1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRHJ9E7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5fwvhuwuptqzphxond1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#singly-linked-list" class="anchor"&gt;
  &lt;/a&gt;
  Singly Linked List
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ixhz2Qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zjcvtqzwjhx1jy05h5g1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ixhz2Qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zjcvtqzwjhx1jy05h5g1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#hash-table" class="anchor"&gt;
  &lt;/a&gt;
  Hash Table
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oJG2NK6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ww820m7x9cuwm0b6sdac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oJG2NK6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ww820m7x9cuwm0b6sdac.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#tree" class="anchor"&gt;
  &lt;/a&gt;
  Tree
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWwCOdzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/anr5fmbcnq45qna5mzj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWwCOdzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/anr5fmbcnq45qna5mzj3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#binary-search-tree" class="anchor"&gt;
  &lt;/a&gt;
  Binary Search Tree
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Zb8sWZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/43qx67syoph46215a1dj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Zb8sWZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/43qx67syoph46215a1dj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#undirected-graph" class="anchor"&gt;
  &lt;/a&gt;
  Undirected Graph
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qFOAhrod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9e2hjh6crh7zsw5eq4cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qFOAhrod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9e2hjh6crh7zsw5eq4cl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#directed-graph" class="anchor"&gt;
  &lt;/a&gt;
  Directed Graph
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ildwh7ZZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g0x7xd5pywrncyjb6q5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ildwh7ZZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g0x7xd5pywrncyjb6q5i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All data structures store data, however the relationship between the data and the functionality between methods differ. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#es2015-class-syntax-overview" class="anchor"&gt;
  &lt;/a&gt;
  ES2015 Class Syntax Overview
&lt;/h3&gt;

&lt;p&gt;What is a class? &lt;br&gt;
A class is a blueprint for creating objects with pre-defined properties and methods. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#class-example" class="anchor"&gt;
  &lt;/a&gt;
  Class example
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstStudent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Colt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steele&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secondStudent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steele&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The method to create new objects must be called constructor. &lt;br&gt;
The class keyword creates a constant that can not be redefined. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-structure-adding-instance-methods" class="anchor"&gt;
  &lt;/a&gt;
  Data Structure: Adding Instance Methods
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tardies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Your full name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;markLate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tardies&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tardies&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOU ARE EXPELLED!!!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; has been late &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tardies&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;addScore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;calculateAverage&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstStudent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Colt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steele&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secondStudent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steele&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>4 Takeaways (mistakes) From my First Big Javascript Project</title>
      <author>Mark Okoh</author>
      <pubDate>Wed, 10 Feb 2021 23:24:31 +0000</pubDate>
      <link>https://dev.to/markokoh/4-takeaways-mistakes-from-my-first-big-javascript-project-fh8</link>
      <guid>https://dev.to/markokoh/4-takeaways-mistakes-from-my-first-big-javascript-project-fh8</guid>
      <description>&lt;p&gt;I learned to code intent on building a project, I’d had in mind for some time. Previously, I’d hired freelance developers to build my ideas - some were good, some were bad, but they were always expensive! Learning to code, was a great decision - I love it!&lt;/p&gt;

&lt;p&gt;So, I created &lt;a href="https://onyourfrequency.com/"&gt;On Your Frequency&lt;/a&gt;, which provides a way for new music producers and artists, to get help and feedback from experienced musicians, instantly via video chat. &lt;/p&gt;

&lt;p&gt;Though I’m pleased with the project, I definitely made some mistakes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i-spent-too-much-time-building-before-testing" class="anchor"&gt;
  &lt;/a&gt;
  I spent too much time building before testing
&lt;/h1&gt;

&lt;p&gt;I did a Udemy course to create the video element, and quite quickly I had something good enough to test with users - I just didn’t realize it. So I kept building, which was fun. and I learnt a lot - Firebase, Github, Stripe integration, Bootstrap, Twilio, Node.js to name a few - but I was making assumptions. Testing sooner would have given me clearer direction. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i-built-too-much" class="anchor"&gt;
  &lt;/a&gt;
  I built too much
&lt;/h1&gt;

&lt;p&gt;Any time someone said “what about adding this?” I would add it. Sometimes it worked, sometimes it didn’t, but it always took time, and made the project more complicated. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i-built-everything-from-scratch" class="anchor"&gt;
  &lt;/a&gt;
  I built everything from scratch
&lt;/h1&gt;

&lt;p&gt;I really enjoy problem solving, and some aspects of the project, like the video connection, work I because I experimented. However, I quickly realized the more mundane problems weren’t worth spending time solving, as they’ve already been solved many times, by people smarter than me! I could have saved time by using existing templates, and by making my own code more reusable. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i-didnt-use-a-framework" class="anchor"&gt;
  &lt;/a&gt;
  I didn’t use a framework
&lt;/h1&gt;

&lt;p&gt;I really like vanilla javascript. For me it’s like reading, writing and math - I don’t know how I lived without it. That said, although the platform the works, the code is difficult to maintain. It’s ’noob’ code to start with, and it’s not well organized. So I’m using Vue JS now - here’s a video I made on some great ways I found to learn it:&lt;br&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OPiMJ787-c0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-whats-next" class="anchor"&gt;
  &lt;/a&gt;
  So what’s next?
&lt;/h1&gt;

&lt;p&gt;I’m glad you asked. I really enjoyed working on this project, although it’s not perfect. The next goal is to take this concept and make it a business - part of that is writing manageable code, of course. I’ve gotten great feedback, and will be rebranding and expanding beyond music, including areas of interest to the Dev.to community. I’m also moving beyond just video. There will be some announcements soon, so if you’re interested please follow me on here. If you’d like to know more before then, ask me in the comments, or send me a message.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>vue</category>
    </item>
    <item>
      <title>New React Component Pattern? Compound Components w/ a Hook</title>
      <author>Andrew Petersen</author>
      <pubDate>Wed, 10 Feb 2021 22:55:17 +0000</pubDate>
      <link>https://dev.to/droopytersen/new-react-component-pattern-compound-components-w-a-hook-jgf</link>
      <guid>https://dev.to/droopytersen/new-react-component-pattern-compound-components-w-a-hook-jgf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;React Components == UI and React Hooks == Behavior&lt;/li&gt;
&lt;li&gt;Often, UI is coupled to behavior. That's okay.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;isOpen&lt;/code&gt;, and &lt;code&gt;closeModal&lt;/code&gt; (Behavior), feel pretty coupled to a &lt;code&gt;Modal&lt;/code&gt; component (UI).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Sometimes the parent component needs access to that "behavior data".

&lt;ul&gt;
&lt;li&gt;So should the parent own the "behavior data" even though it is coupled to the child component?&lt;/li&gt;
&lt;li&gt;Ex: The parent creating a &lt;code&gt;Modal&lt;/code&gt; needs to know if a modal has closed so the parent can cancel an async request. So does the parent have to own the &lt;code&gt;isOpen&lt;/code&gt; state and recreate the modal boilerplate every usage?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The big thesis&lt;/strong&gt;: Expanding the &lt;a href="https://kentcdodds.com/blog/compound-components-with-react-hooks"&gt;Compound Components&lt;/a&gt; pattern to also return hooks could be an elegant solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the final solution if want to jump straight into the code*.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/compount-components-with-a-hook-txolo?file=/SortingDemo.js"&gt;https://codesandbox.io/s/compount-components-with-a-hook-txolo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;I am using a Material UI table here because this stemmed from a work project. However, the concepts should apply with or without a component library.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article I am building a &lt;code&gt;Table&lt;/code&gt; component, but in &lt;a href="https://dev.to/droopytersen/new-react-hooks-pattern-return-a-component-31bh"&gt;a previous article&lt;/a&gt;, I ran into similar problems building a &lt;code&gt;Modal&lt;/code&gt;. There, I experimented with returning a Component definition from a custom React hook.  Here, I flip it and return the hook on the Component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#coupled-ui-amp-behavior" class="anchor"&gt;
  &lt;/a&gt;
  Coupled UI &amp;amp; Behavior
&lt;/h2&gt;

&lt;p&gt;The fundamental problem is that you have UI and behavior that are tightly coupled. You need the "behavior data" inside the component to render, but you also need access to the "behavior data" outside/above the component.&lt;/p&gt;

&lt;p&gt;For example you want a custom &lt;code&gt;Table&lt;/code&gt; component that can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be used very simply just to encapsulate some brand styling.&lt;/li&gt;
&lt;li&gt;Optionally, be configured to sort items, and display the column headers in a way that indicates which column is being sorted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n68MlX0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/droopytersen/image/upload/v1612994906/blog/table.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n68MlX0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/droopytersen/image/upload/v1612994906/blog/table.png" alt="Table Component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;Table&lt;/code&gt; itself were to own the sorting behavior, the &lt;code&gt;Table&lt;/code&gt; would need to be explicitly given the full set of &lt;code&gt;items&lt;/code&gt;. But wait, how would you control what the table looks like then?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If the &lt;code&gt;Table&lt;/code&gt; component were to own the sorting behavior, you'd have to pass it all your items&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;enableSort&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* What do you map over to display table rows? */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* It's not 'myData' because that isn't sorted. */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You could try something like a &lt;code&gt;renderRow&lt;/code&gt; prop, or use the "render as children" pattern. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Neither option feels right&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// OPTION A: renderRow prop - This will to turn into prop sprawl &lt;/span&gt;
&lt;span class="c1"&gt;// as we identify more render scenarios (or be very un-flexible)&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;
  &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;enableSort&lt;/span&gt;
  &lt;span class="na"&gt;renderRow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// OPTION B: Render as children - this syntax just feels gross&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;enableSort&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Besides the fact that it already smells, we'd still have to figure out how to render the Table Header. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How would the &lt;code&gt;Table&lt;/code&gt; know which columns to use? &lt;/li&gt;
&lt;li&gt;We could expose a &lt;code&gt;renderHeader&lt;/code&gt; prop and let developers show whatever they want. But then we'd be forcing developers to handle the sorting UI (showing the correct Sort Icon) on their own too.&lt;/li&gt;
&lt;li&gt;That feels like it defeats the purpose of the &lt;code&gt;Table&lt;/code&gt; component!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We've already hit a wall and we've only discussed sorting. What if we also want to support paging? What about a textbox to filter table rows?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We don't want to force developers to implement those behaviors themselves.&lt;/li&gt;
&lt;li&gt;But we also can't bake it into the component because we need to give them control over what it looks like. &lt;/li&gt;
&lt;li&gt;Lastly, we want to provide "happy path" UI defaults to make the component really simple to use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#compound-components-w-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Compound Components w/ Hooks
&lt;/h2&gt;

&lt;p&gt;My idea is to take the &lt;a href="https://kentcdodds.com/blog/compound-components-with-react-hooks"&gt;Compound Components Pattern&lt;/a&gt; and combine it with custom React Hook composition. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Take a look at this usage example, then scroll below to see a breakdown of the notable elements.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./table/table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SortingDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This is the interesting bit, the Component definition has&lt;/span&gt;
  &lt;span class="c1"&gt;// a custom hook attached to it.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showingItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sorting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sortKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sortDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// The parent has access to behavior data&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You are sorting by: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sorting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* 
          Here, we take advantage the fact that the hook
          returns the behavior data, 'sorting', in the same
          shape needed for the Table.Header props.
      */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;sorting&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"department"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Department&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"jobTitle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show the first 10 sorted items */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showingItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Row&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;department&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jobTitle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In addition to compound components like &lt;code&gt;Table.Column&lt;/code&gt; and &lt;code&gt;Table.Cell&lt;/code&gt;, &lt;strong&gt;the &lt;code&gt;Table&lt;/code&gt; component also has a &lt;code&gt;useTable&lt;/code&gt; hook attached to it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;useTable&lt;/code&gt; hook returns a &lt;code&gt;sorting&lt;/code&gt; object that:

&lt;ul&gt;
&lt;li&gt;Provides the parent component access to the sorting behavior like the current &lt;code&gt;sortKey&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;sorting&lt;/code&gt; object is structured to overlap the prop signature of the &lt;code&gt;Table.Header&lt;/code&gt; component so that it's really easy to use the built-in sorting UI if desired.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;Table.Header {...sorting}&amp;gt;&lt;/code&gt; is all it takes to opt into the sorting UI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The beauty of this pattern is it doesn't complicate the simple scenarios. We can use the &lt;code&gt;Table&lt;/code&gt; for UI things without having to worry about any of the hook/behavior code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A simple table w/ zero behavior&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./table/table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SimpleDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Department&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Row&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"120px"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"130px"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"170px"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;department&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"250px"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jobTitle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This pattern can also scale to add more and more behavior without over complicating the usage.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;We could add more behavior to our &lt;code&gt;useTable&lt;/code&gt; hook&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showingItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sorting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;paging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filtering&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sortKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sortDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;filterKeys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;department&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jobTitle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because the behavior data comes from a hook we have it readily available to do whatever our application needs from a logic perspective, but we can also easily (and optionally) render it using the coupling between the built-in &lt;code&gt;Table&lt;/code&gt; compound components and the useTable hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Render the built-in paging controls&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Paging&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;paging&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goTo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Render the built-in search box&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Search&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;filtering&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filterText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;filtering&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFilterText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Render custom "stats" &lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Showing &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; - &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; of &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;totalItems&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#isnt-tight-coupling-bad" class="anchor"&gt;
  &lt;/a&gt;
  Isn't tight coupling bad?
&lt;/h2&gt;

&lt;p&gt;You may have read &lt;em&gt;"The sorting object is structured to overlap the prop signature of the &lt;code&gt;Table.Header&lt;/code&gt;"&lt;/em&gt; and involuntarily shuddered at the tight coupling. &lt;/p&gt;

&lt;p&gt;However, &lt;strong&gt;because hooks are so easy to compose, we can build the "core behaviors" totally decoupled, then compose them (in the &lt;code&gt;useTable&lt;/code&gt; hook) in a way that couples them to the (Table) UI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you look at the implementation of &lt;code&gt;useTable&lt;/code&gt;, you'll see it is mostly the composition of individual, decoupled behavior hooks, &lt;code&gt;useFilteredItems&lt;/code&gt;, &lt;code&gt;usePaging&lt;/code&gt;, and &lt;code&gt;useSorting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;useTable.js is really just responsible for pulling in decoupled behavior hooks, and tweaking things to line up perfectly with the &lt;code&gt;Table&lt;/code&gt; components.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFilteredItemsByText&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../hooks/useFilteredItems&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;usePagedItems&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../hooks/usePaging&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSortedItems&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../hooks/useSorting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filterKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;sortKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sortDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;pageSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filteredItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;filtering&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFilteredItemsByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;filterKeys&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;sorting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSortedItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sortKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sortDir&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showingItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;paging&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePagedItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;totalItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;showingItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;filtering&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sorting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;paging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;stats&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the end there is nothing really earth shattering here. We've already been building hooks like this, and we've already been building components like this. I'm just suggesting (for certain situations) to embrace the coupling and package them up together.&lt;/p&gt;

&lt;p&gt;Thanks for making it this far. Let me know what you think in the comments. I haven't really seen anyone doing something like this yet so I am nervous I'm missing a tradeoff.&lt;/p&gt;

&lt;p&gt;Here is the final codesandbox&lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/txolo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>4 Conference talks that changed my perspective as a web dev</title>
      <author>Ben Holmes</author>
      <pubDate>Wed, 10 Feb 2021 21:44:22 +0000</pubDate>
      <link>https://dev.to/bholmesdev/conference-talks-that-changed-my-perspective-as-a-web-dev-lfp</link>
      <guid>https://dev.to/bholmesdev/conference-talks-that-changed-my-perspective-as-a-web-dev-lfp</guid>
      <description>&lt;p&gt;I've resolved to make 2021 my biggest year of learning yet. My blogging game has been pretty sporadic up until now... but I've finally decided to go all-in on the &lt;a href="https://www.swyx.io/learn-in-public/"&gt;learning in public mantra&lt;/a&gt; with 1 post a week!&lt;/p&gt;

&lt;p&gt;I used to believe blog posts had to be shining nuggets of wisdom only I could find. But with all the notes I take on a weekly basis, why not share my journal with the world too? 😁&lt;/p&gt;

&lt;p&gt;So, here's some of the most impactful conference talks I've found in the last year or so. I hope to check-in with more entries in the future, and I'd love to &lt;strong&gt;hear your own favorite talks&lt;/strong&gt; in the comments!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rich-hickey-simple-made-easy" class="anchor"&gt;
  &lt;/a&gt;
  Rich Hickey - Simple Made Easy 🧶
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;&lt;strong&gt;🎥 View the talk + transcript here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've ever heard the someone say that something is "easy, but not simple," this is probably the talk they're referencing. This is an easy recommend to programmers in general (not just web devs). That said, I think this talk is &lt;em&gt;especially&lt;/em&gt; relevant to frontend-ers nowadays with all the tools at our disposal. &lt;/p&gt;

&lt;p&gt;It feels like web frameworks and "best practices" are moving towards some powerful new opinions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Everything is a component&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functional programming is king&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;State management is complex&lt;/strong&gt; and deserves a rethink (&lt;a href="https://www.youtube.com/watch?v=hiT4Q1ntvzg"&gt;hello state machines&lt;/a&gt; 👋)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;☝️ These are the points Rich was getting at with this talk &lt;em&gt;a decade ago!&lt;/em&gt; This is why I've resisted this talk multiple times throughout my web dev journey. As a junior getting comfortable with enterprise-grade React apps, it's helped me understand the &lt;em&gt;why&lt;/em&gt; behind my team's architectural decisions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-notes" class="anchor"&gt;
  &lt;/a&gt;
  Personal notes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Simple&lt;/strong&gt; is an objective measure, no matter the person, reflecting how many &lt;strong&gt;interwoven pieces&lt;/strong&gt; (complexity) there are in a given system&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy&lt;/strong&gt; is relative to every individual, reflecting how "familiar" or "near at hand" something feels&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile programming encourages us to move fast without taking a step back&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complexity and tech debt pile up when we ignore signs of bad abstraction&lt;/li&gt;
&lt;li&gt;Favorite quote of the talk: &lt;em&gt;"But programmers fire the starting pistol every 100 yards and call it a (new) sprint!"&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Replace &lt;strong&gt;complecting&lt;/strong&gt; (knotted-up code with lots of interdependent pieces) with &lt;strong&gt;composing&lt;/strong&gt; (modularity a la modern frontend frameworks)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Think building a castle from Legos instead of a "knitted castle" from interweaving&lt;/li&gt;
&lt;li&gt;Separate horizontally, stratify vertically&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Concrete improvements to make&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;"Stateful" variables complect &lt;em&gt;values&lt;/em&gt; with &lt;em&gt;change overtime&lt;/em&gt;&lt;/strong&gt;; make transition from one state to another predictable (see &lt;a href="https://www.youtube.com/watch?v=hiT4Q1ntvzg"&gt;state machines&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stay close to what the system does;&lt;/strong&gt; consider the &lt;em&gt;behavior&lt;/em&gt; over &lt;em&gt;implementation details&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Example: &lt;a href="https://www.freecodecamp.org/news/imperative-vs-declarative-programming-difference/"&gt;Declarative over imperative programming&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Example: test-driven-development done right (&lt;a href="https://www.youtube.com/watch?v=EZ05e7EMOLM"&gt;incredible talk by Ian Cooper here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work with &lt;em&gt;rules&lt;/em&gt; over conditional / switch case spaghetti&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Given some data X, here's some rules to make it become Y&lt;/li&gt;
&lt;li&gt;Lean on &lt;a href="https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/"&gt;pure functions&lt;/a&gt;, which give you a consistent output for a given input&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dan-abramov-the-wet-codebase" class="anchor"&gt;
  &lt;/a&gt;
  Dan Abramov - The Wet Codebase 🌊
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.deconstructconf.com/2019/dan-abramov-the-wet-codebase"&gt;&lt;strong&gt;🎥 View the talk + transcript here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's another architecture-y talk that also reaches far beyond web development. If you're unfamiliar with &lt;a href="https://overreacted.io"&gt;Dan Abramov&lt;/a&gt;, he's one of the most prolific members of the React core team from a teaching standpoint alone. So if you want advice on architecting your web apps, this is your guy 😁&lt;/p&gt;

&lt;p&gt;This talk goes hand-in-hand with &lt;a href="https://kentcdodds.com/blog/aha-programming"&gt;Kent C Dodd's post on "AHA programming"&lt;/a&gt;. Generally, they're both addressing the biggest pitfall of component-based thinking: copy / paste feels like bad practice, so you abstract &lt;em&gt;every&lt;/em&gt; piece of logic to its own little file.&lt;/p&gt;

&lt;p&gt;Sure there's a place for abstraction, but there's &lt;em&gt;also&lt;/em&gt; a place for duplication! This talk has a lot of examples and funny quotables to keep things light; definitely worth the watch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-notes" class="anchor"&gt;
  &lt;/a&gt;
  Personal notes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If left unchecked, abstractions can become &lt;em&gt;Frankenstein&lt;/em&gt; code overtime

&lt;ul&gt;
&lt;li&gt;An abstraction &lt;em&gt;almost&lt;/em&gt; fits are use case, but not quite 👉 we wittle away that round hole to fit our square peg&lt;/li&gt;
&lt;li&gt;When bugs arise for &lt;em&gt;one&lt;/em&gt; use case, we introduce fixes affecting &lt;em&gt;tons&lt;/em&gt; of other use cases&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;👍 When abstraction is good

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Makes your code more declarative&lt;/strong&gt; / focus on a specific intent (see that Rich Hickey talk above 😉)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoids missed bug fixes&lt;/strong&gt; 👉 fix it once, fix everywhere&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;👎 When abstraction is bad

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creates coupling&lt;/strong&gt; - when it doesn't &lt;em&gt;quite&lt;/em&gt; fit, you can create a monster of refactors&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Adds indirection&lt;/strong&gt; - creates layers and layers overtime; &lt;em&gt;"We avoid spaghetti code, but we create lasagna code"&lt;/em&gt; 🇮🇹&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ways to improve going forward

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Test code that &lt;em&gt;uses&lt;/em&gt; an abstraction&lt;/strong&gt;, not the abstraction itself&lt;/li&gt;
&lt;li&gt;If you remove that abstraction later, your tests explode!&lt;/li&gt;
&lt;li&gt;Abstractions are just another implementation detail (again, &lt;a href="https://www.youtube.com/watch?v=EZ05e7EMOLM"&gt;TDD is king&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't commit to abstraction layers until you need them;&lt;/strong&gt; &lt;em&gt;"If a girl is into the same obscure bands as you are... that doesn't mean you're meant to be together"&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be ready to remove abstractions later;&lt;/strong&gt; Be the one asking &lt;em&gt;"Please inline this abstraction!"&lt;/em&gt; in a PR review!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#rich-harris-rethinking-reactivity" class="anchor"&gt;
  &lt;/a&gt;
  Rich Harris - Rethinking Reactivity ⚛️
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AdNJ3fydeao"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In my opinion, this is &lt;strong&gt;the biggest bombshell to drop&lt;/strong&gt; since React was first revealed 💣&lt;/p&gt;

&lt;p&gt;A trigger warning is probably in order here: if you're a diehard React follower, this talk questions many practice React holds dear (including the virtual DOM itself!).&lt;/p&gt;

&lt;p&gt;But even if you disagree with Rich's points, this talk is a &lt;em&gt;serious&lt;/em&gt; landmark in the web framework canon. It also exposes what "bundlers," "compilers," and "reacting to change" all &lt;em&gt;really&lt;/em&gt; mean under the hood. If you aren't convert to a Svelte fan after this, you'll at least understand where the web has been, and where it might be heading!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-notes" class="anchor"&gt;
  &lt;/a&gt;
  Personal notes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;What is reactive programming?&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;It all started with spreadsheets&lt;/li&gt;
&lt;li&gt;I change a value in one cell, and other cells "react" to those changes with formulas&lt;/li&gt;
&lt;li&gt;Earliest example of &lt;strong&gt;only re-rendering values that change&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It's 1) about tracking values and 2) updating &lt;em&gt;dependents&lt;/em&gt; on that value&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Problem with React's model&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;When state changes in a component, that &lt;em&gt;whole component&lt;/em&gt; re-evaluates itself from the top&lt;/li&gt;
&lt;li&gt;Treats your HTML like a black box; apply the change, then diff against the previous chunk&lt;/li&gt;
&lt;li&gt;Really, React doesn't know about your "state values" or how they affect the DOM!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bad signs for efficiency:&lt;/strong&gt; I shouldn't need &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate&lt;/code&gt;, etc&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Instead of opting &lt;em&gt;out&lt;/em&gt; of reevaluating state (a la &lt;code&gt;useMemo&lt;/code&gt;), we could opt &lt;em&gt;in&lt;/em&gt; by flagging state variables that depend on other state variables

&lt;ul&gt;
&lt;li&gt;Much like a spreadsheet; write formulas that flag which variables affect a given value&lt;/li&gt;
&lt;li&gt;Svelte uses a custom &lt;code&gt;$:&lt;/code&gt; operator to "flag" state that is computed from &lt;em&gt;other&lt;/em&gt; state &lt;a href="https://svelte.dev/tutorial/reactive-declarations"&gt;(example here)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Svelte is a compiler, not a runtime&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;In other words, a "Svelte" component compiles to JS your browser understand&lt;/li&gt;
&lt;li&gt;No "runtime" (like React's virtual DOM) needs to get imported&lt;/li&gt;
&lt;li&gt;Also means Svelte can &lt;strong&gt;bend the JS language to its will&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Evan You, creator of VueJS - Svelte is too magical, since it lets you write JavaScript that isn't totally valid &lt;/li&gt;
&lt;li&gt;Rich Harris' response - this opinion is like believing HTML, CSS and JS should live in separate files. CSS-in-JS is weird too, so what's wrong with this?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Some other cool demos of Svelte

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/what-i-like-about-writing-styles-with-svelte/"&gt;&lt;strong&gt;CSS scoping by component&lt;/strong&gt;&lt;/a&gt; just by using a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://svelte.dev/tutorial/transition"&gt;&lt;strong&gt;Transition directives&lt;/strong&gt;&lt;/a&gt; with sensible out-of-the-box options&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#shawn-swyx-wang-getting-closure-on-react-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Shawn "swyx" Wang - Getting Closure on React Hooks 🎣
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KJP1E-Y-xyo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is a fast-paced and code-heavy talk, so you'll probably want 1x speed on this one. &lt;/p&gt;

&lt;p&gt;That said... this is &lt;em&gt;the most&lt;/em&gt; enlightening talk I've seen on React. Period. It's only 30 minutes long, but it gave me holistic understanding on how React hooks, state management, and re-rendering all work together. It also shows some huge use cases for "closure" in JS. If you have a web dev interview coming up, point to this! 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-notes" class="anchor"&gt;
  &lt;/a&gt;
  Personal notes
&lt;/h3&gt;

&lt;p&gt;Hard to write a succinct, bulleted list for this one. So, I just annotated the finished product to explain how everything works. Fair warning: it's a &lt;em&gt;lot&lt;/em&gt; to take in!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://codepen.io/bholmesdev/pen/YzpWGaz?editors=0011"&gt;🚀 Functioning codepen to see it in action&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create an array for all the state variables in our "React app"&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stateValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="c1"&gt;// start our state index at 0. We'll use this&lt;/span&gt;
  &lt;span class="c1"&gt;// to throw state into that array ☝️ everytime someone calls "useState"&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// state should be set to either:&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. the initial value (aka React.useState(initValue))&lt;/span&gt;
    &lt;span class="c1"&gt;// if this is the first time our component rendered&lt;/span&gt;
    &lt;span class="c1"&gt;// 2. the value from the *last* render&lt;/span&gt;
    &lt;span class="c1"&gt;// if we're re-rendering our component (aka stateValues[index])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stateValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;initValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// "freeze" our index to this particular useState call with _index.&lt;/span&gt;
    &lt;span class="c1"&gt;// prevents the index from changing before we try to call setState later!&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;stateValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// increment index so our next useState call doesn't override the state&lt;/span&gt;
    &lt;span class="c1"&gt;// we just stored above&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// every time we re-render our app,&lt;/span&gt;
    &lt;span class="c1"&gt;// update all our state variables starting from the top&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// "render" the component (which calls the useState function)&lt;/span&gt;
    &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// return all our functions from this foe React "module"&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// whenever we "render" this component with React.render, &lt;/span&gt;
    &lt;span class="c1"&gt;// just log the value of our state variable&lt;/span&gt;
    &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// logs { count: 2 }&lt;/span&gt;
&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// sets the state at stateValues[0] to 3&lt;/span&gt;
&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// sets the state at stateValues[0] to 4&lt;/span&gt;
&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// logs { count: 4 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thanks-for-reading-if-this-post-helped-you" class="anchor"&gt;
  &lt;/a&gt;
  Thanks for reading! If this post helped you...
&lt;/h2&gt;

&lt;p&gt;I love writing about this sort of stuff. With this, I'm officially 6 posts into my goal to &lt;strong&gt;post once a week in 2021!&lt;/strong&gt; Go ahead and &lt;a href="https://dev.to/bholmesdev"&gt;&lt;strong&gt;drop a follow&lt;/strong&gt;&lt;/a&gt; to hold me accountable 😁&lt;/p&gt;

&lt;p&gt;You can also 🐦 &lt;a href="https://twitter.com/BHolmesDev"&gt;find me on Twitter&lt;/a&gt; for tens of tweets of month.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>architecture</category>
      <category>react</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Snow Days and Javascript Promises</title>
      <author>Quinn Lashinsky</author>
      <pubDate>Wed, 10 Feb 2021 18:42:05 +0000</pubDate>
      <link>https://dev.to/qmaximillian/snow-days-and-javascript-promises-48id</link>
      <guid>https://dev.to/qmaximillian/snow-days-and-javascript-promises-48id</guid>
      <description>&lt;p&gt;Your eyes are glued to the TV. You watch the news in awe, just waiting for them to get to the weather forecast. You haven't had a snow day all year, and you're hoping that tomorrow will be the first. You think of all the things you'll be able to do—Drink hot chocolate, watch a movie, sleep in, sled, build a snowman with a bunch of friends. It all sounds so amazing.&lt;/p&gt;

&lt;p&gt;Finally, the weather forecast comes on and they are promising snow tomorrow!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;snowPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Our Promise function&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now all we can do is wait! We don't know whether it will snow or not, and we won't know until tomorrow. We then find out if it snows our school district will announce school closures at 7am tomorrow! It's currently 6pm. We have 13 hours until this prediction proves to be true or false!&lt;/p&gt;

&lt;p&gt;You are elated. So happy, you almost miss the forecaster tell you that there's only 30% chance of snow happening. If it snows, school will be closed.&lt;/p&gt;

&lt;p&gt;You're gonna be absolutely devastated if it doesn't!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;willItSnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;snowPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;willItSnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;School's Closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;School's Open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;46800000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 13 hours in milliseconds&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snowPromise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Promise {&amp;lt;pending&amp;gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It looks like things are in motion! Our &lt;code&gt;snowPromise&lt;/code&gt; will act as a placeholder, waiting for an asynchronous operation to complete (in our case a &lt;code&gt;setTimeout&lt;/code&gt;), resolving or rejecting with data. In our case, 13 hours later.&lt;/p&gt;

&lt;p&gt;That's a long time to wait...what're we gonna do between now and our predicted snowfall?&lt;/p&gt;

&lt;p&gt;If we didn't use a &lt;code&gt;Promise&lt;/code&gt; we wouldn't be able to do things like perform our snow-bringing bed time rituals. We would be blocked from doing anything else. We'd just sit on the ground waiting to hear if school is closed or not for 13 HOURS. This sounds like a huge waste of time!&lt;/p&gt;

&lt;p&gt;The asynchronous nature of a &lt;code&gt;Promise&lt;/code&gt; lets us run other code while we wait for our &lt;code&gt;Promise&lt;/code&gt; to resolve or reject. While this happens, we can go ahead with leaving a spoon under our pillow and flushing ice cubes down the toilet. This will definitely ensure we get snow tomorrow!&lt;/p&gt;

&lt;p&gt;It's been an exciting day and we still don't know whether it will or won't snow.&lt;/p&gt;

&lt;p&gt;To get ready, we'll turn our PJ's inside out and look forward to our &lt;code&gt;snowPromise&lt;/code&gt; result in the morning!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-morning" class="anchor"&gt;
  &lt;/a&gt;
  Next Morning
&lt;/h1&gt;

&lt;p&gt;We wake up! We're excited! But we're unsure of whether school is closed or not. We need to hear it from the source. But how do we find our information?! Listening to the radio, tv, or reading information on the internet may help us figure out if school is closed or not. These are conduits for receiving the information, much like &lt;code&gt;Promise&lt;/code&gt; methods we are going to discuss below!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt;'s have a few methods that will allow us to handle our eventual returned result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promise-methods" class="anchor"&gt;
  &lt;/a&gt;
  Promise Methods
&lt;/h2&gt;

&lt;p&gt;We can handle a &lt;code&gt;Promise&lt;/code&gt; using 3 different types of promise handlers; &lt;code&gt;.then()&lt;/code&gt;, &lt;code&gt;.catch()&lt;/code&gt;, &lt;code&gt;.finally()&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#then" class="anchor"&gt;
  &lt;/a&gt;
  Then
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.then(onFulfilled, onRejected)&lt;/code&gt; - This method will let us handle a success and error cases, which are technically called our &lt;code&gt;onFulfilled&lt;/code&gt; and &lt;code&gt;onRejected&lt;/code&gt; handlers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of these parameters must be functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;willItSnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;snowPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;willItSnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;School's Closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;School's Open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// We'll use 1 second here and going forward so we don't have to wait for&lt;/span&gt;
  &lt;span class="c1"&gt;// 13 hours for our Promise to resolve&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;snowPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// onFulfilled&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// onRejected&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// If it snows, below will be logged to the console:&lt;/span&gt;
&lt;span class="c1"&gt;// "School's Closed"&lt;/span&gt;

&lt;span class="c1"&gt;// If it doesn't snow, below will be logged to the console:&lt;/span&gt;
&lt;span class="c1"&gt;// "School's Open"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If our &lt;code&gt;snowPromise&lt;/code&gt; &lt;code&gt;resolve&lt;/code&gt;'s, it will pass any arguments we passed to our &lt;code&gt;resolve&lt;/code&gt; function to our &lt;code&gt;onFulfilled&lt;/code&gt; handler function.&lt;/p&gt;

&lt;p&gt;If our &lt;code&gt;snowPromise&lt;/code&gt; &lt;code&gt;reject&lt;/code&gt;'s, we'll pass any arguments we passed to our &lt;code&gt;reject&lt;/code&gt; function to our &lt;code&gt;onRejected&lt;/code&gt; handler function.&lt;/p&gt;

&lt;p&gt;Finally, we're able to tell whether school is closed or not!&lt;/p&gt;

&lt;p&gt;Put the above code into your chosen Web Browser's console or a program like &lt;a href="https://runjs.app/"&gt;RunJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Is School Closed?! That's amazing! That means our &lt;code&gt;Promise&lt;/code&gt; resolved and our &lt;code&gt;onFulfilled&lt;/code&gt; function ran! Let's go play in the snow!&lt;/p&gt;

&lt;p&gt;Is School Open?! That's unfortunate! That means our &lt;code&gt;Promise&lt;/code&gt; rejected and our &lt;code&gt;onRejected&lt;/code&gt; function ran. Time to get ready for school...&lt;/p&gt;

&lt;p&gt;This may seem a bit cluttered to you though. It may be useful to have both possible paths within our &lt;code&gt;.then()&lt;/code&gt; handler, but we can also use a different method to handle our &lt;code&gt;onRejected&lt;/code&gt; function...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#catch" class="anchor"&gt;
  &lt;/a&gt;
  Catch
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.catch(onRejected)&lt;/code&gt; - This method will let us handle our error case, which is technically called our &lt;code&gt;onRejected&lt;/code&gt; handler
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;willItSnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;snowPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;willItSnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;School Closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;School Open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;snowPromise&lt;/span&gt;
  &lt;span class="c1"&gt;// onFulfilled&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c1"&gt;// onRejected&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// If it snows, below will be logged to the console:&lt;/span&gt;
&lt;span class="c1"&gt;// "School's Closed"&lt;/span&gt;

&lt;span class="c1"&gt;// If it doesn't snow, below will be logged to the console:&lt;/span&gt;
&lt;span class="c1"&gt;// "School's Open"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This method makes it easier to break apart our success and failure/error states!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;TIP: We can even chain a bunch of &lt;code&gt;.then()&lt;/code&gt;'s together and add a single &lt;code&gt;.catch()&lt;/code&gt; at the end to handle any error from our &lt;code&gt;Promise&lt;/code&gt; or any previous &lt;code&gt;.then()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Lastly, we know we'll always want more snow. Multiple snow days in a row? That sounds like heaven!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finally" class="anchor"&gt;
  &lt;/a&gt;
  Finally
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.finally(onFinally)&lt;/code&gt; - This &lt;code&gt;Promise&lt;/code&gt; method allows us to execute some code whether or not our Promise &lt;code&gt;resolve&lt;/code&gt;'s or &lt;code&gt;reject&lt;/code&gt;'s.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;willItSnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;snowPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;willItSnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;School Closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;School Open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;snowPromise&lt;/span&gt;
  &lt;span class="c1"&gt;// onFulfilled&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c1"&gt;// onRejected&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🤞🏽⛄️ PLEASE SNOW TOMORROW ⛄️🤞🏽&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// If it snows, below will be logged to the console:&lt;/span&gt;
&lt;span class="c1"&gt;// "School's Closed"&lt;/span&gt;
&lt;span class="c1"&gt;// "🤞🏽⛄️ PLEASE SNOW TOMORROW ⛄️🤞🏽"&lt;/span&gt;

&lt;span class="c1"&gt;// If it doesn't snow, below will be logged to the console:&lt;/span&gt;
&lt;span class="c1"&gt;// "School's Open"&lt;/span&gt;
&lt;span class="c1"&gt;// "🤞🏽⛄️ PLEASE SNOW TOMORROW ⛄️🤞🏽"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Well...are you going to school today? Or do you have the day off? Either way, we'll always hope for more snow.&lt;/p&gt;

&lt;p&gt;Let's bring this home with some final considerations to remember when using Promises.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-considerations" class="anchor"&gt;
  &lt;/a&gt;
  Final Considerations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;In Javascript, all asynchronous code will only run if there are no other functions on the &lt;a href="https://blog.usejournal.com/everything-you-need-to-know-about-event-loop-in-javascript-1f14f94e5ab6"&gt;Call Stack&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;If you want access to a result in multiple chained &lt;code&gt;.then()&lt;/code&gt; methods, you must return the result from each &lt;code&gt;.then()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No Return -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resolve Function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`1 - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`2 - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// "1 - Resolve Function"&lt;/span&gt;
&lt;span class="c1"&gt;// "2 - undefined"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Return -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resolve Function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`1 - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// "1 - Resolve Function"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;❄️ Now let's get back to having a snowball fight! ❄️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Importing Data From The Web Into Python</title>
      <author>Olayinka Atobiloye</author>
      <pubDate>Wed, 10 Feb 2021 16:47:28 +0000</pubDate>
      <link>https://dev.to/olayinkaatobiloye/importing-data-from-the-web-into-python-3h0n</link>
      <guid>https://dev.to/olayinkaatobiloye/importing-data-from-the-web-into-python-3h0n</guid>
      <description>&lt;p&gt;Throughout your journey as a Data Scientist, you will find yourself regularly dealing with data. Sometimes, these data are readily available, while other times, you have to source for and gather the data yourself.&lt;/p&gt;

&lt;p&gt;Your data can be gathered from various sources, but more often than not, you would get these data from the web.&lt;/p&gt;

&lt;p&gt;Now imagine you found a website that has this gigantic enormous data that you find very useful. Unfortunately, there is no way you can download the contents on this website onto your device for analysis.&lt;/p&gt;

&lt;p&gt;Manually collating the data from the website would cost you a great amount of time. Fortunately, you can seamlessly import these data using some Python packages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-data-using-urlretrieve" class="anchor"&gt;
  &lt;/a&gt;
  Importing data using &lt;em&gt;urlretrieve&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Import the function &lt;em&gt;urlretrieve&lt;/em&gt; from the &lt;em&gt;urllib.request&lt;/em&gt; subpackage.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lR6ivLga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xhxc7tyih4dqz5lc7x4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lR6ivLga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xhxc7tyih4dqz5lc7x4k.png" alt="source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assign the url of the website to a variable - ‘url’ is used as example here.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the function &lt;em&gt;urlretrieve&lt;/em&gt; to save this file locally. Pass two arguments to the function - the url of the website (which has been assigned to the variable ‘url’)  and the name you wish to save the file as.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoCPXJuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whefm4l2kjtv84k1schp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoCPXJuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whefm4l2kjtv84k1schp.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data is now saved as a file on your device, which you can manage and wrangle as you wish.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-data-using-urlopen-and-request" class="anchor"&gt;
  &lt;/a&gt;
  Importing data using &lt;em&gt;urlopen&lt;/em&gt; and &lt;em&gt;Request&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;To fully understand how this works, you need to have a basic understanding of HTTP requests. But worry not, even if you do not understand requests, you can follow the steps below and import data from the web.&lt;/p&gt;

&lt;p&gt;Import the functions urlopen and Request from the subpackage urllib.request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NivY7wza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/suf6ig12ori21nk8psok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NivY7wza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/suf6ig12ori21nk8psok.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specify the url.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Package the request by calling Request on the url.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rg9B8dRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3e8wfmy7i8oqsppj51s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rg9B8dRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3e8wfmy7i8oqsppj51s.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Send the request and catch the response.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Lj_xi3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfqpbkfpo4h79vptswut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Lj_xi3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfqpbkfpo4h79vptswut.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response gotten from your request is an object. To extract the content of the html, call the read method on the response object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q25NPslP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u6dcbfl1megew2ptvdzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q25NPslP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u6dcbfl1megew2ptvdzu.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can then print, wrangle and manage the content of the webpage.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWmHPpvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r97qlerq1n34tv9zsydv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWmHPpvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r97qlerq1n34tv9zsydv.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-data-with-requests" class="anchor"&gt;
  &lt;/a&gt;
  Importing Data With &lt;em&gt;requests&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Then here comes the almighty requests package. It is an easier and more recommended way of performing the same import performed with urllib above.&lt;/p&gt;

&lt;p&gt;Import the request package.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6PO2CEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5etg3mpkgol1tv7yjo6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6PO2CEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5etg3mpkgol1tv7yjo6t.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specify the url.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Call requests' get method on the url. This packages the request, sends it and catches the response. All with one command. Pretty cool, right?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3u1tnuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bxogvwatoxvpyzilwmw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3u1tnuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bxogvwatoxvpyzilwmw3.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response is an HTTP object. To access the contents of the response, call the text attribute on the object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0blDomMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/608m9gooq9j7leey1grr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0blDomMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/608m9gooq9j7leey1grr.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;Note that there are several other actions you could take with the packages used above, like interacting with an API. However, for the context of this article, we are only concerned with using them for importing data from a webpage.&lt;/blockquote&gt;

&lt;p&gt;Woohoo! You can now easily import data from the web with Python. &lt;br&gt;
The data imported however are HTML contents, with html tags, and other html attributes. They are therefore not quite ready for use or analysis. &lt;/p&gt;

&lt;p&gt;To make them ready for use, you have to format them using a package called BeautifulSoup. This will be discussed in a follow-up article.&lt;/p&gt;

&lt;p&gt;Till then, keep importing data with these packages and doing wonders with Python.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React is a black box. Why does that matter?</title>
      <author>WDavid Calsin</author>
      <pubDate>Wed, 10 Feb 2021 16:35:12 +0000</pubDate>
      <link>https://dev.to/wdavidcalsin/react-is-a-black-box-why-does-that-matter-pm</link>
      <guid>https://dev.to/wdavidcalsin/react-is-a-black-box-why-does-that-matter-pm</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P28qXxhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pf5ixu950sob36so0lfo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P28qXxhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pf5ixu950sob36so0lfo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React is arguably the most-loved frontend technology. One of the reasons for this success is undoubtedly React’s small API surface, which has grown in recent years but can still be learned in just a couple of hours.&lt;/p&gt;

&lt;p&gt;Even though React’s API is small, many devs argue that React’s internals are not only quite complicated, but need to be known these days. So naturally, the question arises — does it matter that React is a black box? Does it help us, or does it impact us negatively?&lt;/p&gt;

&lt;p&gt;In this article, I’ll explore the ins and outs of React’s abstraction model in pursuit of an answer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reacts-outside-api" class="anchor"&gt;
  &lt;/a&gt;
  React’s outside API
&lt;/h1&gt;

&lt;p&gt;In many use cases, React’s outside API is pretty much nonexistent. If we write JSX like so:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Or like so:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am a component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then this is transpiled into a call to &lt;code&gt;jsx&lt;/code&gt; from the &lt;code&gt;react/jsx-runtime&lt;/code&gt; module. Even before the new JSX transform was introduced, all we had to do was to bring in &lt;code&gt;React&lt;/code&gt;, such as:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And a transpiler such as Babel or TypeScript would have transformed it to call &lt;code&gt;React.createElement&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we can see already that React’s most important API is pretty much hidden. With &lt;code&gt;createElement&lt;/code&gt; or &lt;code&gt;jsx&lt;/code&gt; being used implicitly, we never called the outside API explicitly.&lt;/p&gt;

&lt;p&gt;Now, excluding more “classic” APIs such as &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;PureComponent&lt;/code&gt; (including their lifecycle), we know that React offers a lot more than we may want (or even need) to use. For instance, using lazy for &lt;code&gt;lazy&lt;/code&gt; loading (e.g., for bundle splitting) capabilities is quite cool but requires a &lt;code&gt;Suspense&lt;/code&gt; boundary.&lt;/p&gt;

&lt;p&gt;On the other hand, we have APIs like &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; that bring in a certain magic. First, these are all functions, but these functions cannot be used just anywhere. They can only be used inside a component, and only when being called (i.e., rendered) from React. Even then, they may not behave exactly as we expect.&lt;/p&gt;

&lt;p&gt;These are APIs that are quite leaky. To understand them, we need to have quite a sophisticated understanding of what happens inside of React — which brings us to the inside API.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reacts-inside-api" class="anchor"&gt;
  &lt;/a&gt;
  React’s inside API
&lt;/h1&gt;

&lt;p&gt;There are three kinds of inside APIs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;APIs that are usually only implemented by a few libraries (such as the reconciliation API — more on that later)&lt;/li&gt;
&lt;li&gt;APIs that can sometimes be useful and reachable, but not stable, on the outside&lt;/li&gt;
&lt;li&gt;APIs that cannot be reached from the outside; they are (and can) only be used internally&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don’t want to focus on No. 3 above, as this is anyway beyond our reach. Going for No. 2 does not make much sense either, as these are always subject to change and should be avoided. Which leaves us with APIs that are implemented by only a few libraries but have quite some impact.&lt;/p&gt;

&lt;p&gt;As previously mentioned, the most important thing to implement is the reconciliation API. One implementation of this is provided by the &lt;code&gt;render&lt;/code&gt; function of &lt;code&gt;react-dom&lt;/code&gt;. Another example is &lt;code&gt;renderToString&lt;/code&gt; from &lt;code&gt;react-dom/server&lt;/code&gt;. What’s the difference?&lt;/p&gt;

&lt;p&gt;Let’s consider a more complex (yet still simple) component:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Select your preferred background color.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;White&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Black&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Red&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Green&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There are parts about this component that make it less trivial to use within different rendering options. First, we obviously use the DOM directly, though only in the layout effect. Second, we use an effect — and a special one (“layout effect”), at that.&lt;/p&gt;

&lt;p&gt;Using the DOM directly should be avoided as much as possible, but as seen in the example above, we sometimes miss the right methods to do things differently. To improve the situation, we could still guard this line like so:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Or use some alternative check.&lt;/p&gt;

&lt;p&gt;That still leaves us with &lt;code&gt;useLayoutEffect&lt;/code&gt;. This one is highly rendering-specific and may not exist at all. For instance, using the &lt;code&gt;renderToString&lt;/code&gt; function, we’ll get an error when we use this Hook.&lt;/p&gt;

&lt;p&gt;One possibility, of course, is to fall back to the standard &lt;code&gt;useEffect&lt;/code&gt;. But then we need to know the (not-so-obvious) difference between these two. In any case, the when of the &lt;code&gt;useEffect&lt;/code&gt; execution is as foggy as the re-rendering strategy of calling the returned setter from a &lt;code&gt;useState&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Let’s use this chance to step back a bit and explore why we care about any of this.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Kubernetes Pods Advanced Concepts Explained</title>
      <author>tmcclung</author>
      <pubDate>Wed, 10 Feb 2021 16:09:43 +0000</pubDate>
      <link>https://dev.to/tmcclung/kubernetes-pods-advanced-concepts-explained-17hl</link>
      <guid>https://dev.to/tmcclung/kubernetes-pods-advanced-concepts-explained-17hl</guid>
      <description>&lt;p&gt;In this blog post we’ll investigate certain advanced concepts related to Kubernetes init containers, sidecars, config maps, and probes. We’ll show you how to implement these concepts in your own cluster, but more importantly how to apply these to your projects in &lt;a href="https://releaseapp.io/"&gt;Release&lt;/a&gt; for both fun and profit.&lt;/p&gt;

&lt;p&gt;We’ll start with a brief introduction to pods and containers in Kubernetes, and then show specific examples of each item listed above. Below you will find a drawing of these examples to keep yourself oriented during our bumpy ride ahead.&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/qf96nnjfyr2y/5StzQNBGjSiQRmuBATNdH1/c58328398227bd62299b87e5b70ed280/Understanding_Advanced_Kubernetes_Concepts.jpg" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/qf96nnjfyr2y/5StzQNBGjSiQRmuBATNdH1/c58328398227bd62299b87e5b70ed280/Understanding_Advanced_Kubernetes_Concepts.jpg" alt="Advanced Kubernetes Pod Concepts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-kubernetes-pod-concepts" class="anchor"&gt;
  &lt;/a&gt;
  Key Kubernetes Pod Concepts
&lt;/h2&gt;

&lt;p&gt;Before we begin, let’s get a brief overview of some key concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#container" class="anchor"&gt;
  &lt;/a&gt;
  Container
&lt;/h3&gt;

&lt;p&gt;In Docker, a container is an image that bundles layered filesystems which can be deployed as a runnable bundle. This container is usually built with a Dockerfile and has a startup binary or executable command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sidecar-container" class="anchor"&gt;
  &lt;/a&gt;
  Sidecar Container
&lt;/h4&gt;

&lt;p&gt;A &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/#how-pods-manage-multiple-containers"&gt;sidecar container&lt;/a&gt; is simply a container that runs alongside other containers in the pod. There’s no official definition of a sidecar concept. The only thing that distinguishes a container as a sidecar container is that you consider it ancillary or secondary to the primary container. Running multiple sidecar containers does not scale well, but does have additional advantages of being able to reuse configuration files and container images. The reason sidecars do not scale well is that they may be overprisioned or wasteful based on the performance of the main application container. However, the tradeoffs can make sense in legacy applications or during migrations toward truly cloud-native designs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#init-container" class="anchor"&gt;
  &lt;/a&gt;
  Init Container
&lt;/h4&gt;

&lt;p&gt;An &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"&gt;init container&lt;/a&gt; is simply a container that runs before any other containers in the pod. You can have several init containers that run sequentially. As each container finishes and exits properly (with a zero!), the next container will start. If an init container exits with an error or if it does not finish completely, the pod could go into a &lt;a href="https://releaseapp.io/blog/kubernetes-how-to-debug-crashloopbackoff-in-a-container"&gt;dreaded CrashLoopBackoff&lt;/a&gt;. All of the containers share a filesystem, so the benefit here is that you can use or reuse container images to process, compile, or generate files or documents that can be picked up later by other containers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#probes" class="anchor"&gt;
  &lt;/a&gt;
  Probes
&lt;/h4&gt;

&lt;p&gt;Although the word "probes" may stir up visions of Alien tools used for discovery and investigation of humans, fear not. These probes will only make your services run better! Kubernetes has &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"&gt;several probes&lt;/a&gt; for defining the health of containers inside a pod. A startup probe allows the scheduler to tolerate delays in a slow-startup container. A liveness probe allows Kubernetes to restart a faulty or stalled container. A readiness probe allows a container to receive traffic only when it is ready to do so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pod" class="anchor"&gt;
  &lt;/a&gt;
  Pod
&lt;/h3&gt;

&lt;p&gt;You may harbour some fear in the back of your mind of “pod people” or vegetable clones grown to replace humanity with mindless zombies who hunt and destroy mankind. However, in Kubernetes, the smallest managed unit is the pod. But a pod could be composed of several containers that run in a single process space and filesystem. A pod is usually composed of one container that runs a single process as a service. However, there are several advanced usage examples we will go into that run multiple containers for expanded options and use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#node" class="anchor"&gt;
  &lt;/a&gt;
  Node
&lt;/h3&gt;

&lt;p&gt;A Kubernetes node is ultimately a physical machine (which can have several layers of virtualisation) that runs the pod or pods, providing the critical CPU, memory, disk, and network resources. Multiple pods can be spread across multiple nodes, but a single pod is contained on a single node.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#volumes" class="anchor"&gt;
  &lt;/a&gt;
  Volumes
&lt;/h3&gt;

&lt;p&gt;Volumes are simply abstractions of filesystems that can be mounted inside containers. You cannot overlap or nest volume mounts. However, there are several mount types that might be very useful to your use case.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configmap" class="anchor"&gt;
  &lt;/a&gt;
  configMap
&lt;/h4&gt;

&lt;p&gt;A &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#configmap"&gt;configMap&lt;/a&gt; is a so-called “blob” of information that can be mounted as a file inside your container. Remember, that this is not an evil, destructive blob out to devour our planet! It is a batch of text that is treated amorphously, like a... well... blob. The usual use case here is for a configuration file or secrets mount.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#emptydir" class="anchor"&gt;
  &lt;/a&gt;
  emptyDir
&lt;/h4&gt;

&lt;p&gt;An &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir"&gt;emptyDir&lt;/a&gt; is an empty filesystem that can be written into and used by containers inside a pod. The usual use case here is for temporary storage or initialization files that can be shared.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hostpath" class="anchor"&gt;
  &lt;/a&gt;
  hostPath
&lt;/h4&gt;

&lt;p&gt;A &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"&gt;hostPath&lt;/a&gt; is a filesystem that exists on the Kubernetes node directly and can be shared between containers in the pod. The usual use case here is to store cached files that could be primed from previous deployments if they are available.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#persistent-volume-claim-pvc" class="anchor"&gt;
  &lt;/a&gt;
  Persistent Volume Claim (PVC)
&lt;/h4&gt;

&lt;p&gt;A &lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/"&gt;persistent volume claim&lt;/a&gt; is a filesystem that lasts across nodes and pods inside a namespace. Data in a PVC are not erased or destroyed when a pod is removed, only when the namespace is removed. PVCs come in many underlying flavors of storage, depending on your cloud provider and infrastructure architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#namespace" class="anchor"&gt;
  &lt;/a&gt;
  Namespace
&lt;/h3&gt;

&lt;p&gt;A Kubernetes namespace is a collection of resources that are grouped together and generally have access to one another. Multiple pods, deployments, and volume claims (to list a few) will run together, potentially across multiple nodes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sidecars-and-init-containers" class="anchor"&gt;
  &lt;/a&gt;
  Sidecars and Init Containers
&lt;/h2&gt;

&lt;p&gt;The first use case we will cover involves running several containers inside a single pod. Once again, a pod here refers to one or more containers grouped together in Kubernetes, not vegetable human clones grown for evil reasons. In the following scenario, we will examine how multiple containers can share a single process space, filesystem, and network stack.&lt;/p&gt;

&lt;p&gt;Keep in mind that most docker and Kubernetes purists will tell you that running more than one process in a container, or having more than one container in a pod is not a good design and will inevitably lead to scalability and architectural issues down the road. These concerns are generally well founded. However, careful application of the following supported and recommended patterns will allow you to thrive either during your transition from a legacy stack to Kubernetes or once you are successfully running your application in a cluster.&lt;/p&gt;

&lt;p&gt;One particular use case we encounter with customers is that their application has a backend container that requires a reverse proxy like Nginx to perform routing, static file serving, and so forth. The best method to achieve this objective would be to create a separate pod with Nginx (for example) and run the two service pods in a single namespace. This gives us the flexibility to scale the backend pods and Nginx pods separately as needed. However, typically the backend service or application needs to also serve static files that are located inside the container filesystem and would not be available across the pod boundary. We agree this is not a preferred pattern to use, but it is common enough with legacy applications that we see it happen.&lt;/p&gt;

&lt;p&gt;In this scenario, we often recommend a sidecar container running Nginx which can be pulled directly from Docker Hub or a custom image can be created. We also recommend that customers reuse their backend application container as an init container that starts with a custom command for creating any initialization or other startup tasks that need to be completed before the application itself starts.&lt;/p&gt;

&lt;p&gt;One feature of this multi-container setup is that the Nginx container can use the “localhost” loopback to communicate with the backend service. Of course the sidecar container might be a logging or monitoring agent, but the principle is the same: the containers can speak with each other over a private network that is potentially not available outside of the pod, unless you make it available. In our Nginx example, the backend could be isolated so that all communication traffic inbound to the service container must be routed to the Nginx proxy.&lt;/p&gt;

&lt;p&gt;The other nice feature of this configuration is that the containers all share a common file system so that the Nginx container can access static files generated by (or stored on) the backend service container.&lt;/p&gt;

&lt;p&gt;Here is a link to our documentation that shows an example of running &lt;a href="https://docs.releaseapp.io/reference-guide/application-settings/application-template#sidecar-containers"&gt;sidecar&lt;/a&gt; and &lt;a href="https://docs.releaseapp.io/reference-guide/application-settings/application-template#init-containers"&gt;init&lt;/a&gt; containers on Release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#probes" class="anchor"&gt;
  &lt;/a&gt;
  Probes
&lt;/h2&gt;

&lt;p&gt;As we have noted, probes are not just for Aliens! Kubernetes uses them to test your application stack and report on its health. Kubernetes will also take action based on these probes, just like an Alien might. There are several probes that are supported natively by Kubernetes. The main use cases we support for our customers are the liveness probe and readiness probe.&lt;/p&gt;

&lt;p&gt;The liveness probe is a way to test whether a container is “alive” or not, and if it fails the probe, then Kubernetes will restart the container. We usually recommend that your application not freeze up or have memory leaks and so forth so that a liveness probe should not be necessary. This “reboot your app to fix the problems” philosophy is not generally considered good practice. However, perfect code is impossible and when services are running in a production container environment, we know that almost anything can (and will) happen.&lt;/p&gt;

&lt;p&gt;The readiness probe is a way to test whether a container is capable of serving traffic or not, and if it fails the probe, then the service port will be removed from the ingress controller. Contrary to our stance on the liveness probe, we strongly encourage and recommend that customers implement a readiness probe on any service that receives inbound traffic. In some sense, we consider a readiness probe mandatory for your production services.&lt;/p&gt;

&lt;p&gt;Here is a link to our documentation that shows an example of using a &lt;a href="https://docs.releaseapp.io/reference-guide/application-settings/application-template#readiness-and-liveness-probes"&gt;liveness and readiness probe&lt;/a&gt; for services running in Release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#volumes" class="anchor"&gt;
  &lt;/a&gt;
  Volumes
&lt;/h2&gt;

&lt;p&gt;This section gets a bit technical and tricky. Of course, no actual customer stacks would use every single type of volume, container, and probe listed in this article. But we do hope this overview shows all the features that are possible. You should carefully consider the use cases presented below and choose the one that best fits your use case.&lt;/p&gt;

&lt;p&gt;Here is a link to our documentation that shows options for our &lt;a href="https://docs.releaseapp.io/reference-guide/application-settings/application-template#resources"&gt;storage volume types&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configmap-just-in-time-file-mounts" class="anchor"&gt;
  &lt;/a&gt;
  configMap (Just in Time File Mounts)
&lt;/h3&gt;

&lt;p&gt;A configMap (purposely spelled in &lt;a href="https://en.wikipedia.org/wiki/Camel_case#Programming_and_coding"&gt;camelCase&lt;/a&gt;) is not itself a volume in Kubernetes. Strictly speaking, a configMap is just a blob of text that can be stored in the &lt;a href="https://kubernetes.io/docs/concepts/overview/components/#etcd"&gt;etcd key-value datastore&lt;/a&gt;. However, one convenient use case Release supports is creating a container storage volume that is mounted inside a container as a file whose contents are the text blob stored in etcd. At Release, we call this customer helper function a &lt;a href="https://docs.releaseapp.io/reference-guide/application-settings/file-mounts"&gt;Just in Time File Mount&lt;/a&gt;. The common use case for a configMap at Release is being able to upload a file with configuration details. For example, in our previous example involving an Nginx sidecar, the &lt;a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/"&gt;nginx.conf&lt;/a&gt; file could be uploaded as a Just in Time File Mount. &lt;em&gt;"What do we want? File Mounts! When do we want them? Just in Time!"&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emptydir-scratch-volume" class="anchor"&gt;
  &lt;/a&gt;
  emptyDir (Scratch Volume)
&lt;/h3&gt;

&lt;p&gt;An emptyDir volume is a native Kubernetes construct Release supports for containers in a pod to share empty space that can be mounted locally. This volume is erased as soon as the pod ends its life-cycle, and it is blank to begin with. Thus, the most common use case is for a scratch or temporary location to store files that only need to be stored during the lifetime of the pod.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hostpath-intrapod-cache-or-shared-volume" class="anchor"&gt;
  &lt;/a&gt;
  hostPath (Intra-pod Cache or Shared Volume)
&lt;/h3&gt;

&lt;p&gt;The next example is a native Kubernetes construct that Release supports for containers in a pod to share a filesystem path that stays on a node. The most common use case for a hostPath volume is to store cache or build data that can be generated and re-generated as needed inside a pod. Unlike an emptyDir volume that only lasts as long as the pod does, the hostPath can last as long as the application that deploys the pods. Thus, a container could generate (or compute) files, assets, or data that could be reused or incrementally updated with the next pod deployment on the same node. Release automatically sets the correct permissions and ensures that each namespace has unique files so that data are not leaked between customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pvc-long-term-persistent-storage" class="anchor"&gt;
  &lt;/a&gt;
  PVC (Long Term Persistent Storage)
&lt;/h3&gt;

&lt;p&gt;The final example of a volume mount that Release offers is the ability to store data on persistent storage that is available across nodes and pods in a namespace. This long term storage is persistent and does not disappear during pod or node life cycles. Release uses Amazon Web Services (AWS) Elastic File System (EFS), which is their cloud offering of Network File System (NFSv4) storage. This allows customers to store long term data that will persist between deployments, availability zones (AZs), and node failures, and can be shared between multiple pods. The most common use cases for persistent storage of this type are for pre-production databases that need long term storage between deployments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we’ve given you an overview of key advanced concepts for Kubernetes pods that you will not find anywhere else. If you are confident and practiced in using these examples in your Kubernetes deployments, then you can consider yourself one of the members of an elite club of practitioners. This benefit does not just come with a distinguished title or piece of paper stating your qualifications: it also confers substantial success and accomplishment in your DevOps career journey.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@wynand_uys?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Wynand Uys&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/pod?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
    </item>
    <item>
      <title>React children 👶 💭 – why, when, how</title>
      <author>Franca</author>
      <pubDate>Wed, 10 Feb 2021 15:52:24 +0000</pubDate>
      <link>https://dev.to/franca/react-children-2k4e</link>
      <guid>https://dev.to/franca/react-children-2k4e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#use-case" class="anchor"&gt;
  &lt;/a&gt;
  Use Case
&lt;/h2&gt;

&lt;p&gt;React is great for building reusable components. Components often come in multiple variations – most of the time we can pass &lt;strong&gt;props&lt;/strong&gt; to the component and all good.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, what if we build a component that doesn’t only change in style but also contains different JSX? This is often the case with complex, nested components like accordions, carousels and tabs or buttons with text and icon.&lt;/p&gt;

&lt;p&gt;To keep it simple, imagine a &lt;code&gt;&amp;lt;Post /&amp;gt;&lt;/code&gt; component for a blog post. All posts look alike but vary in content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfNpe72_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d4sf1zp9mgfhub7l9qrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfNpe72_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d4sf1zp9mgfhub7l9qrz.png" alt="The Post.js component within App.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The plain &lt;code&gt;Post&lt;/code&gt; component could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To use &lt;code&gt;Post&lt;/code&gt; in &lt;code&gt;App.js&lt;/code&gt; , it's &lt;em&gt;possible&lt;/em&gt; to create a property, e.g. &lt;code&gt;content&lt;/code&gt; that contains all kind of JSX like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: the empty &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; tag is a &lt;a href="https://reactjs.org/docs/fragments.html#short-syntax"&gt;Fragment&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://codesandbox.io/s/props-example-8mks2?file=/src/App.js"&gt;CodeSandbox example here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s just that this solution doesn’t look simple and clean. It’s not that we want to pass certain properties to the component, it’s more that we want to &lt;strong&gt;define what’s inside&lt;/strong&gt;.  In this case, use React children!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-children-in-action" class="anchor"&gt;
  &lt;/a&gt;
  React Children In Action 👶
&lt;/h2&gt;

&lt;p&gt;You don’t pass children like a property, you place it &lt;strong&gt;inside the component tags&lt;/strong&gt; as if you'd write plain old HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This looks so much better! It feels like writing HTML with superpowers!&lt;/em&gt; ✨&lt;/p&gt;

&lt;p&gt;You created your own component &lt;code&gt;&amp;lt;Post&amp;gt;&lt;/code&gt; and filled it with JSX tags. You can insert custom React components as well!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TF6vMfyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dm2ue56e42e86usr4vs0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TF6vMfyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dm2ue56e42e86usr4vs0.png" alt="The Post component consists of various different elements."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But – we have to tweak the component itself a little. At the moment, the Post component looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As children are special properties, you don’t have to declare them when using the component, but you have to tell the component itself that &lt;strong&gt;children are welcome&lt;/strong&gt;. The word &lt;code&gt;children&lt;/code&gt; is a special word in the React world with a set meaning like &lt;code&gt;function&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the next step, you have to define the children's location inside the component’s JSX structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3qRVdRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhsnl2ixg8ekvksdujif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3qRVdRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhsnl2ixg8ekvksdujif.png" alt="Post.js contains fixed JSX tags as well as a space for flexible children."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://codesandbox.io/s/children-example-5z93h?file=/src/App.js"&gt;CodeSandbox example here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caution" class="anchor"&gt;
  &lt;/a&gt;
  ⚠️ Caution
&lt;/h2&gt;

&lt;p&gt;Only use children if you can’t control the component’s content. If you know that a component is always going to be based on the same JSX structure, it’s better to pass string props for the heading, etc. &lt;strong&gt;Be as strict as possible.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, don’t try to style the children. Don’t do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You don’t have a place to define that CSS class. &lt;/p&gt;

&lt;p&gt;There are several options in this case:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-smaller-components" class="anchor"&gt;
  &lt;/a&gt;
  1. Create Smaller Components
&lt;/h3&gt;

&lt;p&gt;If the heading is used universally, you could create a Heading component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Heading&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-use-props-instead" class="anchor"&gt;
  &lt;/a&gt;
  2. Use Props Instead
&lt;/h3&gt;

&lt;p&gt;If you want to use a special &lt;code&gt;post__heading&lt;/code&gt; class, the &lt;code&gt;Post&lt;/code&gt; component itself is the right place to do this. Just pass the heading as a normal prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My first Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// Property&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;Children&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;See&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-split-component-into-smaller-functions" class="anchor"&gt;
  &lt;/a&gt;
  3. Split Component Into Smaller Functions
&lt;/h3&gt;

&lt;p&gt;This is my advice if you want to style the children specifically and use more than one JSX tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My first Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostMain&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;See&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;See it in action in &lt;a href="https://codesandbox.io/s/split-component-into-smaller-functions-360eu?file=/src/Post/Post.js"&gt;this CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-case-split-up-your-children" class="anchor"&gt;
  &lt;/a&gt;
  Advanced Case: Split Up Your Children
&lt;/h2&gt;

&lt;p&gt;We can go even further and split our &lt;code&gt;Post&lt;/code&gt; components into intro, main and outro 😎&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My first Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostIntro&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Intro&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PostIntro&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostMain&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PostMain&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostOutro&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PostOutro&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;PostIntro&lt;/code&gt;, &lt;code&gt;PostMain&lt;/code&gt; and &lt;code&gt;PostOutro&lt;/code&gt; are small, separate components that can be used as children inside the &lt;code&gt;Post&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostIntro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__intro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostOutro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__outro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;See&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Post&lt;/code&gt; component itself is "stupid" and doesn't know which children will be passed. This is a simple example, but if your components contain a lot of logic and/or JSX, this is a way to separate concerns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9GYXZKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gyit3y3x4s48u86rhide.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9GYXZKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gyit3y3x4s48u86rhide.png" alt="Final relationship between App.js and Post.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the finished example here – feel free to fork and play with it!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/advanced-u1wmo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#linklist" class="anchor"&gt;
  &lt;/a&gt;
  Linklist
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/composition-vs-inheritance.html"&gt;React Docs: Composition vs Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/fragments.html#short-syntax"&gt;React Docs: React Fragments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.robinwieruch.de/react-function-component#react-function-component-props"&gt;Robin Wieruch: React function components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to build Rock Paper Scissors Game in Python</title>
      <author>Rishabh Singh ⚡</author>
      <pubDate>Wed, 10 Feb 2021 15:41:31 +0000</pubDate>
      <link>https://dev.to/mindninjax/how-to-build-rock-paper-scissors-game-in-python-383d</link>
      <guid>https://dev.to/mindninjax/how-to-build-rock-paper-scissors-game-in-python-383d</guid>
      <description>&lt;p&gt;Hola everyone! Today we will be creating a fun and amazing &lt;strong&gt;Rock Paper Scissors game in Python&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--47trhuMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yyv3bw81r2q97sdrra7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--47trhuMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yyv3bw81r2q97sdrra7r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;Our game will be based on the rules of the original Rock Paper Scissors game. We will be asking for input to the user and then we will ask the computer to choose between Rock, Paper &amp;amp; Scissors randomly. Then we will compare the user input with the computer made choice and then see who is the winner through basic conditional comparisons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's Code
&lt;/h2&gt;

&lt;p&gt;Alright so, as usual, we are going to import our favourite module &lt;strong&gt;&lt;code&gt;random&lt;/code&gt;&lt;/strong&gt; to get started.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we are going to create a simple function which will do the important job of comparing the input by the user and the choice made by the computer to find out the winner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_win&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'s'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'p'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's give it the name &lt;strong&gt;&lt;code&gt;check_win()&lt;/code&gt;&lt;/strong&gt; and it will take two parameters, &lt;strong&gt;&lt;code&gt;user&lt;/code&gt;&lt;/strong&gt; parameter represents the input provided by user &amp;amp; &lt;strong&gt;&lt;code&gt;computer&lt;/code&gt;&lt;/strong&gt; represents the choice made by our machine.&lt;/p&gt;

&lt;p&gt;Within the function, it uses one &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement which uses &lt;strong&gt;&lt;code&gt;and&lt;/code&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;code&gt;or&lt;/code&gt;&lt;/strong&gt; operator to find the winner. I guess this part is clear enough for anyone who has played Rock Paper Scissors before.&lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement will check if the user is winning or not, if the user is winning then it will return a &lt;strong&gt;&lt;code&gt;True&lt;/code&gt;&lt;/strong&gt; else nothing.&lt;/p&gt;

&lt;p&gt;Now let's move on to the next function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rock_paper_scissors&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What is your choice - 'r' for rock, 's' for scissor, 'p' for paper: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;opponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;opponent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Its a Tie! Choice is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;opponent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;check_win&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opponent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Yay! you won! Choice is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;opponent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;check_win&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"You lost! Choice is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;opponent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we have created an function named &lt;strong&gt;&lt;code&gt;rock_paper_scissors()&lt;/code&gt;&lt;/strong&gt;. This function is going to be the core of our game. &lt;/p&gt;

&lt;p&gt;Let's break it down &amp;amp; try to understand what is going on here.&lt;/p&gt;

&lt;p&gt;First, we are asking the choice of the user as an input. Here the user can provide input through only &lt;code&gt;**r**&lt;/code&gt;, &lt;code&gt;**s**&lt;/code&gt; or &lt;code&gt;**p**&lt;/code&gt; which resembles &lt;strong&gt;rock, scissor &amp;amp; paper&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;Now we have the user input stored in &lt;strong&gt;&lt;code&gt;player&lt;/code&gt;&lt;/strong&gt; variable.&lt;/p&gt;

&lt;p&gt;It's the turn of our machine to make a choice for &lt;strong&gt;rock, scissor &amp;amp; paper.&lt;/strong&gt; For that we have created a list &lt;strong&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/strong&gt; which contains three elements &lt;code&gt;**r**&lt;/code&gt;, &lt;code&gt;**s**&lt;/code&gt; or &lt;code&gt;**p&lt;/code&gt;.**&lt;/p&gt;

&lt;p&gt;Now we are going to make use of &lt;strong&gt;&lt;code&gt;random.choice()&lt;/code&gt;&lt;/strong&gt; function to randomly choose a single element from the list &lt;strong&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we have stated 3 &lt;code&gt;**if**&lt;/code&gt; statements which accomplish the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first &lt;code&gt;**if**&lt;/code&gt; statement, comparison between player &amp;amp; opponent is done to call it a tie if the choice of user and computer is the same. In this case, there is no winner.&lt;/li&gt;
&lt;li&gt;In second &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement, we are using our &lt;strong&gt;&lt;code&gt;check_win()&lt;/code&gt;&lt;/strong&gt; function to decide the winner. If the winner has won, the &lt;strong&gt;&lt;code&gt;check_win()&lt;/code&gt;&lt;/strong&gt; will return a &lt;strong&gt;&lt;code&gt;True&lt;/code&gt;&lt;/strong&gt; and in that case the second &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement will execute and the user will be declared as the winner.&lt;/li&gt;
&lt;li&gt;The third &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement works in the same way as the second &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement, the only difference is that it will be executed if the &lt;strong&gt;&lt;code&gt;check_win()&lt;/code&gt;&lt;/strong&gt; returned nothing which it will not if the computer is the winner. In this case, the computer will be declared as the winner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now finally to run our code, let's call our function &lt;strong&gt;&lt;code&gt;rock_paper_scissors()&lt;/code&gt;.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;rock_paper_scissors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#source-code" class="anchor"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;You can find the complete source code of this project here -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mindninjaX/Python-Projects-for-Beginners/tree/master/Rock%20Paper%20Scissors"&gt;mindninjaX/Python-Projects-for-Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support" class="anchor"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you found this beginner project useful. &lt;/p&gt;

&lt;p&gt;If you like my work please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also if you have any questions or doubts feel free to contact me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt;. Or you can also post a comment/discussion &amp;amp; I will try my best to help you :D&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>20 Most Common Time Management Problems &amp; Solutions ⚡</title>
      <author>Anastasia 🏄🏻‍♀️</author>
      <pubDate>Wed, 10 Feb 2021 15:27:26 +0000</pubDate>
      <link>https://dev.to/actitime/20-most-common-time-management-problems-solutions-3abb</link>
      <guid>https://dev.to/actitime/20-most-common-time-management-problems-solutions-3abb</guid>
      <description>&lt;p&gt;Smart time management enables you to work smarter, not harder so that you get more done in less time. If we could squeeze this concept into a single piece of advice, it’d be the following: think through your day and put the things you want to get done in your calendar. However, most people struggle to live up to this rule, which leads to disappointment and frustration over time.&lt;/p&gt;

&lt;p&gt;The hard truth is that time waits for no one. If you want to accomplish more, you should learn to keep up with the time. No amount of time management books and training sessions can make you perform better unless you set your mind to it. It’s not enough to collect the best time management practices and approaches until you recognize your flaws. That is why in this article, we’ve put together 20 time management mistakes and even more pieces of advice on how to deal with them. Save this list and get back to it whenever you will feel the need for more time management ideas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#perfectionist"&gt;Being a Perfectionist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#focus"&gt;Not Being Able to Concentrate &amp;amp; Maintain Focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scheduling"&gt;Scheduling Tasks Ineffectively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vision"&gt;Lack of Vision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tomorrow"&gt;Never Thinking About Tomorrow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tracking-time"&gt;Not Tracking Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#review"&gt;Lack of Regular Time Management Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stress"&gt;Not Being Able to Cope With Stress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attention"&gt;Not Practicing Attention Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-your-own"&gt;Doing Everything On Your Own&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#estimating"&gt;Being Bad at Estimating Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#busy"&gt;Being Busy Instead of Effective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#skills"&gt;Not Mastering Your Skills &amp;amp; Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#distractions"&gt;Not Managing Distractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#habits"&gt;Doing Routines Instead of Habits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automation"&gt;Avoiding Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#breaking-down"&gt;Not Breaking Down Big Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#brain"&gt;Not Conserving Your Brain Power&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;Being Unmotivated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tech"&gt;Not Taking Technology Along&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-being-a-perfectionist" class="anchor"&gt;
  &lt;/a&gt;
  1. Being a Perfectionist &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Perfectionism is a double-edged sword. On the one hand, perfectionists strive to produce high-quality work as well as show more conscientiousness, engagement and motivation levels. However, their high and inflexible standards and all-or-nothing mindset often cause stress, burnout and anxiety that impair their performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get comfortable with imperfection&lt;/strong&gt;. Diligence is a good trait, but sometimes it may take more of your time and effort than required. Attention to detail is also a great one but it can be very time-consuming. Whenever you find yourself putting too much effort into your task, take a break and ask yourself: “Am I using my time wisely? Am I being productive?”. It’s often the case that a handful of imperfect tasks bring more results than one task that meets your high standards.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reflect on your progress regularly&lt;/strong&gt;. Review your performance on a weekly, bi-weekly and monthly basis. Could you be less fussy about some of the tasks with little or no damage to the outcome? Can you think of tasks that you avoided or put too much effort into due to fear of making a mistake?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Take some pressure off yourself&lt;/strong&gt;. If you want to accomplish more in less time, allow yourself to be less perfect and concentrate and what’s important.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ask for perspective and support&lt;/strong&gt;. Show your work to your manager or supervisor regularly to learn if you are doing good and the current quality of work is sufficient. Be open with your intention to become a more productive employee and be ready to take criticism.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-not-being-able-to-concentrate-amp-maintain-focus" class="anchor"&gt;
  &lt;/a&gt;
  2. Not Being Able to Concentrate &amp;amp; Maintain Focus &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Most of us at least once experienced this state when you read a paragraph of text over and over and can’t get a grip on what it says. Or you need to write an article or prepare a report, but your mind is wandering and unable to concentrate. Here are a couple of ideas on how you can get back on track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Know thy enemy&lt;/strong&gt;. Identify workplace distractions that interfere with your ability to focus and be productive. Take a short &lt;a href="https://hbr.org/web/assessment/2014/11/why-cant-you-focus-at-work"&gt;assessment test&lt;/a&gt; by Harvard Business Review, learn which distractions damage your concentration most and get some tips on how to eliminate them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take better care of your health&lt;/strong&gt;. Sleep deprivation can easily disrupt concentration, not to mention other cognitive functions, such as memory and attention. Regular physical activity &lt;a href="https://www.hindawi.com/journals/bmri/2018/2539748/"&gt;improves&lt;/a&gt; concentration and attention and &lt;a href="https://www.nih.gov/news-events/nih-research-matters/moderate-exercise-may-improve-memory-older-adults"&gt;maintains&lt;/a&gt; brain health of older adults. Meditation and mindfulness practices can offer multiple benefits, including Improved concentration.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use your peak performance time&lt;/strong&gt;. Identify the most productive parts of the day and use them to schedule the most demanding tasks. Don’t use peak time to process emails or make phone calls and use it wisely.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take breaks&lt;/strong&gt;. Breaks are not only fun, but they also refresh your mind, replenish mental resources, restore motivation and reduce decision fatigue. Spending time in nature alleviates fatigue (&lt;a href="https://depts.washington.edu/hhwb/Thm_Mental.html"&gt;study&lt;/a&gt;), even 10 minutes of exercise improve attention and performance (&lt;a href="http://journals.sagepub.com/doi/abs/10.2466/22.06.PMS.118k10w4"&gt;study&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Set daily goals&lt;/strong&gt;. Our brains like &lt;a href="https://facilethings.com/blog/en/micro-tasks"&gt;short-term goals&lt;/a&gt; due to physiological reasons. When we succeed at something, our brain releases dopamine, making us feel more concentrated and inspired to experience this sense of accomplishment once again.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Practice single-tasking&lt;/strong&gt;. Multitasking has many adverse effects on your concentration and performance: it slows down your progress, makes you prone to making mistakes, stresses you out and more. Instead, focus on one task at a time. For even more concentration and focus, start a timer – it will give you the mental commitment to start working on the task.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Speak to your doctor&lt;/strong&gt;. If you noticed a sudden decline in your ability to concentrate – having a harder time doing your routine tasks, making more errors, making more frequent poor decisions – do not ignore it. These may be symptoms of depression or anxiety, and time management approaches can make your performance even worse due to high pressure that your body can’t tolerate at the moment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Limit your Internet and social media time&lt;/strong&gt;. In his &lt;a href="https://www.theatlantic.com/magazine/archive/2008/07/is-google-making-us-stupid/306868/"&gt;article&lt;/a&gt;, Nicholas Carr highlights a dangerous tendency that most of us probably noticed but didn’t pay much attention to: social media and search engines narrow our attention span and our ability to focus (&lt;a href="https://www.nature.com/articles/s41467-019-09311-w"&gt;study&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-scheduling-tasks-ineffectively" class="anchor"&gt;
  &lt;/a&gt;
  3. Scheduling Tasks Ineffectively &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Effective scheduling makes a great part of an efficient time management strategy. You can’t manage your time and focus if you prioritize the wrong things and invest time into tasks that return little or no goal-related results. Even if you’ve learned how to sort out priorities, it’s still not enough because a never-ending circle of demanding and challenging tasks can cause anxiety, stress, depression and burnout. Let’s see how you can distribute your workload effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Consider the &lt;a href="https://www.nifs.org/blog/productivity-hacks-prioritize-tasks-with-the-ivy-lee-method"&gt;Ivy Lee method&lt;/a&gt;&lt;/strong&gt;. At the end of the day, write down the six most important tasks for tomorrow and prioritize them. The next day, start working on the most important ones.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid the &lt;a href="https://academic.oup.com/jcr/article-abstract/45/3/673/4847790?redirectedFrom=fulltext"&gt;mere urgency effect&lt;/a&gt;&lt;/strong&gt;. According to research, we tend to choose urgent tasks with objectively lower payoffs over important tasks with more significant and long-term consequences. Prioritize tasks that are both urgent and important. Next, choose important tasks over the urgent ones, which are ineffective in most cases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Narrow down your list of tasks&lt;/strong&gt;. Review your to-do list and narrow it down to the most crucial tasks (try the &lt;a href="https://czarto.com/2012/04/24/four-quadrants-of-time/"&gt;Covey time management grid&lt;/a&gt;). Figure out which tasks and activities will deliver the best returns and prioritize them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Eat the frog&lt;/strong&gt;. Mark Twain once said, “Eat a live frog first thing in the morning and nothing worse will happen to you the rest of the day.” Do the most important or challenging task – the one you are most likely to procrastinate on and probably the one that can have the greatest positive impact on your life or project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-lack-of-vision" class="anchor"&gt;
  &lt;/a&gt;
  4. Lack of Vision &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First of all, there’s no need to master your time management skills if you don’t have a clear vision of where you are heading. If tasks and responsibilities that you want to manage with more skill and grace don’t inspire you, you need to develop more direction and meaning first. Without a vision, you have little chance of creating the results you want and feeling joy and excitement to keep on going.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Get a bird’s eye view&lt;/strong&gt;. Think of how your tasks at hand contribute to your personal or corporate goals. Maintain your focus on the end result – it will bring you inspiration and energy to keep going. Adjust your vision if necessary but never lose sight of it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Identify time wasters&lt;/strong&gt;. Most management problems come from spending too much time on things that don’t bring you results and move you forward. Make sure to invest your time into meaningful tasks and projects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a &lt;a href="https://www.projectmanager.com/blog/contingency-plan"&gt;contingency plan&lt;/a&gt;&lt;/strong&gt;. There’s always a possibility that things won’t unfold as expected. Think about best-case and worst-case scenarios, prepare the “Plan B” and “Plan C” to manage risks and problems with grace.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-never-thinking-about-tomorrow" class="anchor"&gt;
  &lt;/a&gt;
  5. Never Thinking About Tomorrow &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;People who create extraordinary results in life are typically visionaries. To make their visions a reality, they have to think strategically and set short-term goals that bring them toward their goals step by step. When you think about tomorrow, you’ll be better prepared with what’s coming next and feel more motivated investing efforts every day to attain the results you envision.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Develop awareness and &lt;a href="https://www.thebalancecareers.com/important-adaptability-skills-4768260"&gt;adaptability&lt;/a&gt; skills&lt;/strong&gt;. Think about how your time and efforts you invested today will contribute to your tomorrow’s reality and bring you closer to your goals (e.g., how will today’s project tasks impact next week’s tasks?). Adapt your plans to changing circumstances.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your progress regularly&lt;/strong&gt;. Break your projects into manageable tasks and track their progress. Use charts, reports, progress bars to see how you are doing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider the 7-minute rule&lt;/strong&gt;. Spend 7 minutes in the morning to plan your day and 7 minutes before you go to sleep to review your day and prepare a plan for tomorrow.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn from your &lt;a href="https://www.actitime.com/features-in-detail/powerful-time-and-billing-reports"&gt;past performance&lt;/a&gt;&lt;/strong&gt;. Estimate your tasks, set deadlines and track time against them. When you finish the task, review your performance, identify trends, and make it a game to reach better results next time if you need a little more competition.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-not-tracking-time" class="anchor"&gt;
  &lt;/a&gt;
  6. Not Tracking Time &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can’t improve your time management tactics and approaches if you don’t keep track of your time. Time tracking sounds like a tedious task, but once you implement it into your routine, it will reveal unexpected trends and insights. When you analyze how many hours phone calls, emails and distractions take, you can develop a more strategic approach to your time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pick a time tracking tool&lt;/strong&gt; that fits you best: timesheet app, desktop time tracker, mobile app, browser extension or even a stopwatch timer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider time tracking software&lt;/strong&gt;. Choose the one that meets your needs and doesn’t overwhelm you with a complicated interface and unnecessary features.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Track even the smallest tasks&lt;/strong&gt; like phone calls, meetings, coffee breaks, distraction time, or consider a desktop monitoring software that automatically records your app, website, and off time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your performance regularly&lt;/strong&gt;. Use Excel sheets, Google Sheets, timesheet apps or time trackers with project management features to record time against the tasks and use your time logs to build reports.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-lack-of-regular-time-management-review" class="anchor"&gt;
  &lt;/a&gt;
  7. Lack of Regular Time Management Review &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Whether you work on your personal goals or want to improve your efficiency at work, you should regularly review your performance. If you use time tracking software, you can use your time logs and build reports to identify productivity trends, adjust your approach and use your time even more wisely. Make sure to review not only your daily and weekly performance but look into monthly and half-year reports to get a birds-eye view of your efforts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Avoid &lt;a href="https://www.lifehack.org/articles/communication/how-the-sunk-cost-fallacy-makes-you-act-stupid.html"&gt;sunk cost fallacy&lt;/a&gt;&lt;/strong&gt; – investing too much time into ineffective and low-priority tasks. When you notice that your current activity takes more time than you can afford, step back and evaluate how valuable is its outcome and how it will affect your progress.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take a future time perspective&lt;/strong&gt;. Think about how your current activity will help or hurt your next steps, next week’s tasks and your project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your schedule regularly&lt;/strong&gt;. Start your day by spending 5 minutes going over your daily schedule. Take a few minutes in the middle of the day to review your progress and what’s left to be done. End your day with a 5-minute performance review.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build a &lt;a href="https://www.skillsyouneed.com/ps/planning-personal-development.html"&gt;personal development plan&lt;/a&gt;&lt;/strong&gt; and document your goals, plans, skills to master. Review your progress regularly to make sure you stay on track.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-not-being-able-to-cope-with-stress" class="anchor"&gt;
  &lt;/a&gt;
  8. Not Being Able to Cope With Stress &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Stress management and time management often go hand in hand. If you wait until the last minute to complete your task at hand, fail to plan ahead and prioritize, then you will more likely feel stressed. Not all stress is bad, but persistent exposure to stress can put your health and performance at risk. Let’s see what you can do to manage stress effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Identify your stressors&lt;/strong&gt;. Practice journaling for a few weeks to record your stressors, thoughts, feelings and reactions. Review your notes to find patterns and look into ways to cope with stress more effectively.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Develop healthy responses&lt;/strong&gt;. Junk food and alcohol may seem like a good way to soothe stress, but instead, try more healthy choices: exercise, yoga, meditations, hobbies, favorite activities, quality sleep.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Set boundaries&lt;/strong&gt;. Whether you work from home or the office, stick to your working hours and leave work at work. Avoid thinking about work and answering emails, mute corporate chats and other work-related notifications on your smartphone at the end of your workday.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-not-practicing-attention-management" class="anchor"&gt;
  &lt;/a&gt;
  9. Not Practicing Attention Management &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let’s face it: we all have 24 hours in a day and there’s no such thing as “managing time.” The good news is that we can manage our attention and focus. Ultimately, &lt;a href="https://www.realsimple.com/work-life/life-strategies/time-management/attention-management"&gt;attention management&lt;/a&gt; is the ability to recognize your brain state and consciously shift yourself into that state that will serve you best at the moment. We won’t delve into details here, but we will give you some ideas on how to tune into work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Control your environment&lt;/strong&gt;. Communicate to others that you try to stay focused: change your chat status to “Don’t disturb,” put on headphones, close the door – anything that is appropriate in your situation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your attention-stealing habits&lt;/strong&gt;. Some of us prefer background TV noise when working from home, most of us can’t resist the temptation to check out a notification and answer a message right away. Discover and review your bad habits and develop a more healthy time management approach to regain your attention span and focus.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Exercise and meditate&lt;/strong&gt;. According to a study by Harvard Medical School, regular exercises improve memory, concentration, and mental sharpness. Just a couple of weeks of meditation reduce mind wandering, boost focus and memory (study).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-doing-everything-on-your-own" class="anchor"&gt;
  &lt;/a&gt;
  10. Doing Everything On Your Own &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It doesn’t matter if you are an employee, a business owner or a self-employed person, you can’t do everything on your own. We all have 24 hours in a day and limited energy capacities as human beings. So if we push ourselves too hard, we are more likely to become stressed, less effective and deliver low-quality results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Outsource&lt;/strong&gt;. If you are a business owner or a self-employed person, consider outsourcing a part of your efforts. For example, if the accounting routine takes a lot of your time, consider using accounting agencies’ services. Weigh the opportunity costs and you may find out that your time and energy are more crucial for your success than your money.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate your routines&lt;/strong&gt;. Let’s say you are a project manager and you need to keep an eye on your project progress, team performance, billing and accounting matters. There is time tracking software that can do most of this work for you, so, again, consider the opportunity costs, and, most likely, you’ll make a choice towards its purchase. Automated routines will save weeks of your time in the long run.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Delegate&lt;/strong&gt;. Let’s say you are a manager in a marketing team and you’ve got a lot on your plate: meetings, job interviews, reports, management routine tasks. Consider delegating a report building task to one of your most reliable and detail-oriented team member. This way, they’ll learn some new skills and will be able to back you up in the future, while you will have more time on tasks that require your direct involvement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#11-being-bad-at-estimating-time" class="anchor"&gt;
  &lt;/a&gt;
  11. Being Bad at Estimating Time &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Most of us tend to underestimate how long projects and tasks will take us to finish. This phenomenon is called &lt;strong&gt;planning fallacy&lt;/strong&gt; and refers to making unrealistic best-case scenario plans and estimations. The main causes of this effect include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;score creep&lt;/strong&gt; – underestimating the complexity of a project;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;planning focalism&lt;/strong&gt; – not taking into account experience with similar tasks in the past;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;natural optimism&lt;/strong&gt; – thinking that tasks will go smoothly, without bottlenecks and changes;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;motivated reasoning&lt;/strong&gt; – making optimistic estimates because managers want to see work completed as quickly as possible;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;lack of &lt;a href="https://hbr.org/2015/03/research-were-not-very-self-aware-especially-at-work"&gt;accurate self-awareness&lt;/a&gt;&lt;/strong&gt; regarding your competence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Calculate your &lt;a href="https://medium.com/swlh/your-schedule-needs-a-buffer-3930bebc0cfa"&gt;fudge ratio&lt;/a&gt;&lt;/strong&gt;. Build a list of tasks, estimate and track time against them. Then add up your total time spent, divide it by the total estimated time and multiply the result by 100% – this is your fudge ratio.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your previous performance&lt;/strong&gt;. If you track time in paper timesheets, Excel or Google Spreadsheets, you’ll have a hard time calculating your performance. Consider &lt;a href="https://www.actitime.com/"&gt;time tracking software&lt;/a&gt; where you can be sure that your data will be safely stored and you’ll be able to build performance reports in a few clicks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Assume the worst-case scenario&lt;/strong&gt;. Include possible interruptions and roadblocks into your estimates because projects rarely go smoothly.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Have someone else estimate for you&lt;/strong&gt;. Kahneman and Tversky, who first mentioned the concept of planning fallacy, also discovered the following: while we’re bad at estimating our own tasks, we make more accurate estimations for others.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ask for feedback&lt;/strong&gt;. When planning your next activities, ask a neutral party for feedback on your estimations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#12-being-busy-instead-of-effective" class="anchor"&gt;
  &lt;/a&gt;
  12. Being Busy Instead of Effective &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Being busy and being productive is not the same thing. You can be busy clearing your inbox, sorting out tasks in your to-do list all day and still accomplish nothing meaningful. Busy time doesn’t bring you closer to your goals, making you feel anxious and unsettled. In contrast, productive time feels like steady progress towards your goals. The main reasons people get stuck in being busy include bad prioritizing and overthinking instead of getting things done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Apply the &lt;a href="https://learn.g2.com/pareto-principle"&gt;Pareto principle&lt;/a&gt;&lt;/strong&gt;. Focus on 20% tasks of the highest value that give 80% of results. For example, instead of planning and analyzing how to start your new project, take action and do the job 80% of the time and use the rest of your time to plan your next steps.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider the &lt;a href="https://www.calendar.com/blog/using-the-4ds-of-time-management-to-your-advantage/#:~:text=If%20you're%20unfamiliar%2C%20the,the%20things%20that%20really%20matter."&gt;4Ds technique&lt;/a&gt;&lt;/strong&gt;. When a new interruption or distraction shows up, choose one of the following: delete, delegate, defer, do now.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Or implement the &lt;a href="https://www.briantracy.com/blog/time-management/the-abcde-list-technique-for-setting-priorities/"&gt;ABCDE approach&lt;/a&gt;&lt;/strong&gt;, where A: most important tasks, B: less important tasks, C: tasks with no consequences, D: delegate, E: eliminate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Set agile results&lt;/strong&gt;. Focus on three key results you want to achieve over a certain period of time: day, week, month or year.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Try the 1-3-5 strategy&lt;/strong&gt;. Commit to 1 big task, 3 medium tasks, and 5 small tasks every day.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#13-not-mastering-your-skills-amp-tools" class="anchor"&gt;
  &lt;/a&gt;
  13. Not Mastering Your Skills &amp;amp; Tools &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The success of your time management efforts is closely related to how you apply and whether you develop your hard and soft skills. These are related to your professional tools, communication, problem-solving, creative thinking, self-awareness, decision-making and more. Without mastering other skills, no amount of time management books and advice can make you grow faster and achieve more in life and career.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Hone your professional skills&lt;/strong&gt;. Review your skills regularly, think of how you could improve them, what additional skills you could benefit from.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Know your tools&lt;/strong&gt;. Most of us use emails, task boards, industry-specific software, time trackers and more. But we often forget that every tool offers shortcuts and tiny features that could significantly improve our routines. For example, if you use Google a lot, &lt;a href="https://time.com/4116259/google-search-2/"&gt;Google search tricks&lt;/a&gt; can save you hours of your time monthly. Be sure to explore your tools of the trade.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improve your soft skills&lt;/strong&gt;. Be more conscious about how you deal with feedback, communicate, learn new things, adapt to the changes, work through conflicts and so on. With soft skills, you’ll be able to learn and grow faster, meaning managing your time with more skill and grace.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#14-not-managing-distractions" class="anchor"&gt;
  &lt;/a&gt;
  14. Not Managing Distractions &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;By distractions, we mean emails, notifications, social media, paper clutter, and there are thousands of articles on the internet on how to manage these. But in reality, on top of this, we are distracted from important work by other lower-priority work. It happened to all of us: urgent calls from clients and colleagues asking for our immediate attention. It doesn’t mean that we have to block these distractions entirely because it will create roadblocks and impact team productivity. Still, we need to learn to manage such things wisely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Define your boundaries&lt;/strong&gt;. Make time for phone calls and emails, use chat statuses to communicate when you are available, and, most importantly, schedule time for important tasks that require your deep focus and attention.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hold standup meetings with your team&lt;/strong&gt;. Hold 10-20 minutes meetings to discuss progress, eliminate roadblocks and brainstorm ideas.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn to say no&lt;/strong&gt;. Avoid participating in team chit-chats and gossip and postpone low-priority tasks. When you say no, explain your reasons professionally and provide an alternative.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Schedule work time and play time&lt;/strong&gt;. In your calendar, schedule fixed commitments (e.g., meals, commute, sleep), self-care activities (e.g., exercise, meditation), guilt-free time (e.g., socializing, hobbies), and then schedule work time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#15-doing-routines-instead-of-habits" class="anchor"&gt;
  &lt;/a&gt;
  15. Doing Routines Instead of Habits &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Actions that we do every day can be either routines or habits. They both mean regular and repeated actions and we often use these words interchangeably, but in terms of personal performance, they mean different things.&lt;/p&gt;

&lt;p&gt;Habits are routines that you do with little or no conscious thought, also meaning little energy investments. In contrast, routines are not automated actions that require conscious efforts. When you buy a cup of coffee on your way to work, certain circumstances trigger the action. But when you go to the gym after work, it requires your conscious practice; otherwise, they die out. The good news is that you can intentionally turn routines into habits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Build the habit loop&lt;/strong&gt;. You need to choose a trigger, execute the routine and do something enjoyable afterward. Let’s say at 10 a.m. you have a standup meeting (trigger), then you disable notifications, put your headphones on and attack the most demanding task (routine), and after that you go for lunch at around 2 p.m. or whenever you are done. Read more about building habits in &lt;a href="https://www.amazon.co.uk/gp/product/1847941834/"&gt;Atomic Habits&lt;/a&gt; by James Clear.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-avoiding-automation" class="anchor"&gt;
  &lt;/a&gt;
  16. Avoiding Automation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Regardless of our occupations, many aspects of our jobs are repetitive and open to automation. According to &lt;a href="https://content.workmarket.com/2020-insight-report-what-ai-automation-mean-for-work/"&gt;WorkMarket’s 2020 In(Sight) Report&lt;/a&gt;, 54% of employees believe they could save 240 hours annually through automation, while 78% of business leaders estimated their time losses at 360 hours per year. Now imagine that you could invest your time into career or business development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Improve routine tasks&lt;/strong&gt;. Review your routine activities regularly and brainstorm ideas of how you could tackle them even more effectively. Let’s say you spend an hour daily to answer emails, then you may have the following ideas: create email templates, review sorting settings, empty inbox every day, use third-party tools to &lt;a href="https://blog.hubspot.com/sales/newsletter-organization-system"&gt;unsubscribe&lt;/a&gt; from unnecessary newsletters in bulk and so on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate management routines&lt;/strong&gt;. Modern time and project management tools also provide billing, accounting and even &lt;a href="https://www.actitime.com/features-in-detail/leave-management"&gt;absence management&lt;/a&gt; features. It means that you can manage essential business data and processes in a single tool.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use automation tools&lt;/strong&gt;. Automate routines in your web apps with tools like &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt; and &lt;a href="https://ifttt.com/"&gt;IFTTT&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#17-not-breaking-down-big-projects" class="anchor"&gt;
  &lt;/a&gt;
  17. Not Breaking Down Big Projects &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Big projects look overwhelming and often lead to stress and procrastination. When you break them down into digestible parts, individual tasks seem more approachable and doable. After you finish a tiny task, you will feel accomplishment and more motivation to keep on going. Your project progress becomes more visible, you’ll feel more productive and efficient.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Break it down&lt;/strong&gt;. Whenever you start a new task, break it down into steps that you can complete in 20-30 minutes, even if they look trivial. This approach is especially useful for those who prefer working in tiny intervals like &lt;a href="https://www.themuse.com/advice/take-it-from-someone-who-hates-productivity-hacksthe-pomodoro-technique-actually-works#:~:text=The%20Pomodoro%20Technique%20is%20a,are%20referred%20to%20as%20pomodoros."&gt;Pomodoros&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Develop a logical sequence&lt;/strong&gt;. The easiest tasks may seem more attractive, but you should better complete them in order, one by one, which will bring you closer to your project’s goal.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your progress regularly&lt;/strong&gt;. When working on a big assignment, you may not always feel the progress. Try the &lt;a href="https://www.amazon.com/Checklist-Manifesto-How-Things-Right/dp/0312430000"&gt;Checklist Manifesto&lt;/a&gt; approach – break your tasks into an easy-to-follow, step-by-step checklist. Or use task boards like &lt;a href="https://www.actitime.com/getting-more-efficient-with-actitime/kanban-system/"&gt;Kanban&lt;/a&gt; to visualize your progress.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#18-not-conserving-your-brain-power" class="anchor"&gt;
  &lt;/a&gt;
  18. Not Conserving Your Brain Power &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;No offense, but our average working memory capacity is &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2864034/"&gt;limited&lt;/a&gt; to three to five items. Anything that exceeds these limits has a high chance of falling out of our brains. This is why it’s important to keep our brain uncluttered to have more space, energy and focus to accomplish tasks at hand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use external storage&lt;/strong&gt; for anything you aren’t focused on right now. Use organizers, notes, tasks apps and software to unload your mind and come back to these tasks when needed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use collaboration software&lt;/strong&gt;. Let’s say you are already aware of your next project but not sure where to start. You have doubts and ideas running through your head that don’t allow you to focus on the ongoing task. Implement a collaboration environment to take off ideas from your mind, ask your team to brainstorm more ideas or provide feedback. This way, you’ll set your future tasks in motion in background mode and will be able to get back to them later.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simplify everyday choices&lt;/strong&gt;. It is believed that Albert Einstein had seven identical suits for each day of the week not to waste his brainpower on mundane tasks. Most likely, Steve Jobs preferred to wear black turtlenecks for the same reason. Reduce the number of everyday choices not to waste your energy on trivial decisions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#19-being-unmotivated" class="anchor"&gt;
  &lt;/a&gt;
  19. Being Unmotivated &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://oxfordre.com/psychology/view/10.1093/acrefore/9780190236557.001.0001/acrefore-9780190236557-e-12"&gt;Goal-Setting Theory&lt;/a&gt;, motivation comes from the intention to work toward a goal. And that intention appears when the goal meets the three following criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Specific&lt;/strong&gt; goals are measurable and unambiguous. They enable us to focus on the relevant activities rather than to meander relatively aimlessly. On the contrary, vague goals allow multiple interpretations of whether the goal is attained (e.g., launch a new project).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Difficult&lt;/strong&gt; and specific goals require effort and persistence – two key components of motivation. High goals lead to higher efforts and performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Challenging&lt;/strong&gt; goals must be difficult yet attainable. Challenging tasks require commitment and focus, while easy or tedious tasks are demotivating.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see what else can fuel you with motivation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Review future plans&lt;/strong&gt;. Think about how your current work can help you in the future. Even if you aren’t excited about your current project, a long-term perspective may give you enough motivation to keep on going and manage your time better.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trick your brain&lt;/strong&gt;. Whenever we accomplish a task, our brains release dopamine, which is connected to feelings of pleasure, learning and motivation. Break your tasks down into small goals to keep yourself motivated during long-term projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#20-not-taking-technology-along" class="anchor"&gt;
  &lt;/a&gt;
  20. Not Taking Technology Along &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Technology and the Internet era create many obstacles and distractions as well as opportunities for better time management and higher quality of life. On the one hand, an increasingly digitalized lifestyle shortens our attention span and concentration abilities that can be &lt;a href="https://time.com/3858309/attention-spans-goldfish/"&gt;compared&lt;/a&gt; to those of a goldfish. On the other hand, time trackers and project management tools can save you hours weekly if used wisely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use technology to plan your day&lt;/strong&gt;. Consider &lt;a href="https://www.lifewire.com/free-online-calendars-1357935"&gt;online calendars&lt;/a&gt; and scheduling apps for personal time management purposes. Break your day into a sequence of activity blocks, allow some time buffers and go through your schedule step by step.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Experiment with &lt;a href="https://www.actitime.com/time-tracking/how-to-stay-focused-with-a-time-tracker/"&gt;time trackers&lt;/a&gt;&lt;/strong&gt;. There are thousands of time tracking tools on the market for personal and business purposes. It may take you a while until you find the right one for you. Two things to keep in mind: 1) benefits must exceed cost when using these tools 2) gains should outweigh the time spent using the app.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider &lt;a href="https://www.actitime.com/software-collections/project-management-tools/"&gt;project management tools&lt;/a&gt;&lt;/strong&gt;. As a project manager, you need to keep track of project progress and employee performance, build reports and look for ways to enhance your team performance. Modern project management tools provide time tracking features and automate management routines in a single environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ready-to-level-up-your-time-management" class="anchor"&gt;
  &lt;/a&gt;
  Ready to Level Up Your Time Management?
&lt;/h2&gt;

&lt;p&gt;As humans, we can’t be productive 100% of the time. Still, there are always time management mistakes to correct and a dozen productivity approaches to try. The key takeaway of this article goes as follows: you can’t manage what you don’t measure and you can’t improve what you don’t manage. &lt;a href="https://www.actitime.com/free-online-trial"&gt;Start with time tracking&lt;/a&gt; and try different time management approaches to power up your performance.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>100daysofcode</category>
      <category>womenintech</category>
    </item>
  </channel>
</rss>
