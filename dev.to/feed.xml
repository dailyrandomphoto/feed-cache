<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Orientação a objetos de outra forma: Métodos estáticos e de classes</title>
      <author>Eduardo Klosowski</author>
      <pubDate>Sun, 11 Apr 2021 02:18:19 +0000</pubDate>
      <link>https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-metodos-estaticos-e-de-classes-jba</link>
      <guid>https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-metodos-estaticos-e-de-classes-jba</guid>
      <description>&lt;p&gt;Na &lt;a href="https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-classes-e-objetos-3mfd"&gt;postagem anterior&lt;/a&gt; foi apresentado o &lt;code&gt;self&lt;/code&gt;, nessa postagem será discutido mais a respeito desse argumento, considerando opções para ele e suas aplicações.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m%C3%A9todos-est%C3%A1ticos"&gt;
  &lt;/a&gt;
  Métodos estáticos
&lt;/h2&gt;

&lt;p&gt;Nem todas as funções de uma classe precisam receber uma referência de um objeto para lê-lo ou alterá-lo, muitas vezes uma função pode fazer o seu papel apenas com os dados passados como argumento, por exemplo, receber um nome e validar se ele possui pelo menos três caracteres sem espaço. Dessa forma, essa função poderia ser colocada fora do escopo da classe, porém para facilitar sua chamada, e possíveis alterações (que será discutido em outra postagem), é possível colocar essa função dentro da classe e informar que ela não receberá o argumento &lt;code&gt;self&lt;/code&gt; com o decorador &lt;code&gt;@staticmethod&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Demais funções
&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dessa forma, essa função pode ser chamada diretamente de um objeto pessoa, ou até mesmo diretamente da classe, sem precisar criar um objeto primeiro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Chamando diretamente da classe
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Chamando através de um objeto do tipo Pessoa
&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E essa função também pode ser utilizada dendro de outras funções, como validar o nome na criação de uma pessoa, de forma que caso o nome informado seja válido, será criado um objeto do tipo Pessoa, e caso o nome seja inválido, será lançado uma exceção:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Nome inválido'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sobrenome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Demais funções
&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;


&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Cria objeto
&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Lança ValueError: Nome inválido
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#m%C3%A9todos-da-classe"&gt;
  &lt;/a&gt;
  Métodos da classe
&lt;/h2&gt;

&lt;p&gt;Entretanto algumas funções podem precisar de um meio termo, necessitar acessar o contexto da classe, porém sem necessitar de um objeto. Isso é feito através do decorador &lt;code&gt;@classmethod&lt;/code&gt;, onde a função decorada com ele, em vez de receber um objeto como primeiro argumento, recebe a própria classe.&lt;/p&gt;

&lt;p&gt;Para demonstrar essa funcionalidade será implementado um &lt;em&gt;id&lt;/em&gt; auto incremental para os objetos da classe &lt;code&gt;Pessoa&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total_de_pessoas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;novo_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;novo_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sobrenome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;

&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 1
&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Maria'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'dos Santos'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse código é criado uma variável &lt;code&gt;total_de_pessoas&lt;/code&gt; dentro do escopo da classe &lt;code&gt;Pessoas&lt;/code&gt;, e que é compartilhado tanto pela classe, como pelos objetos dessa classe, diferente de declará-la com &lt;code&gt;self.&lt;/code&gt; dentro do &lt;code&gt;__init__&lt;/code&gt;, onde esse valor pertenceria apenas ao objeto, e não é compartilhado com os demais objetos. Declarar variáveis dentro do contexto da classe é similar ao se declarar variáveis com &lt;code&gt;static&lt;/code&gt; em outras linguagens, assim como o &lt;code&gt;@classmethod&lt;/code&gt; é semelhante a declaração de funções com &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As funções declaradas com &lt;code&gt;@classmethod&lt;/code&gt; também podem ser chamadas sem a necessidade de se criar um objeto, como &lt;code&gt;Pessoa.novo_id()&lt;/code&gt;, embora que para essa função específica isso não faça muito sentido, ou receber outros argumentos, tudo depende do que essa função fará.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Embora possa parecer confuso identificar a diferença de uma função de um objeto (função sem decorador), função de uma classe (com decorador &lt;code&gt;@classmethod&lt;/code&gt;) e função sem acesso a nenhum outro contexto (com decorador &lt;code&gt;@staticmethod&lt;/code&gt;), essa diferença fica mais clara ao se analisar o primeiro argumento recebido por cada tipo de função. Podendo ser a referência a um objeto (&lt;code&gt;self&lt;/code&gt;) e assim necessitando que um objeto seja criado anteriormente, ser uma classe (&lt;code&gt;cls&lt;/code&gt;) e não necessitando receber um objeto, ou simplesmente não recebendo nenhum argumento especial, apenas os demais argumentos necessários para a função. Sendo diferenciados pelo uso dos decoradores.&lt;/p&gt;

&lt;p&gt;Na orientação a objetos implementada pelo Python, algumas coisas podem ficar confusas quando se mistura com nomenclaturas de outras linguagens que possuem implementações diferentes. A linguagem Java, por exemplo, utiliza a palavra-chave &lt;code&gt;static&lt;/code&gt; para definir os atributos e métodos de classe, enquanto no Python um método estático é aquele que não acessa nem um objeto, nem uma classe, devendo ser utilizado o escopo da classe e o decorador &lt;code&gt;@classmethod&lt;/code&gt; para se criar atributos e métodos da classe.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>python</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>[PT-BR] Resolvendo o Bandit (níveis 5-10)</title>
      <author>Leticia Pegoraro Garcez</author>
      <pubDate>Sun, 11 Apr 2021 02:14:01 +0000</pubDate>
      <link>https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-5-10-29na</link>
      <guid>https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-5-10-29na</guid>
      <description>&lt;p&gt;Olá serumaninhos!&lt;br&gt;
Sei que já faz um tempo desde a útlima vez que eu escrevi sobre o assunto, mas com a faculdade fica difícil encontrar tempo entre listas de exerícios para me dedicar ao dev.to, porém faço o melhor que eu posso.&lt;/p&gt;

&lt;p&gt;Este é o segundo artigo da série "Resolvendo o Bandit" que eu estou produzindo, e hoje vamos avançar mais cinco níveis desse desafio de &lt;em&gt;Capture the Flag&lt;/em&gt; do &lt;a href="https://overthewire.org/wargames/"&gt;OverTheWire&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Se você caiu neste artigo de para-quedas, não deixe de conferir o artigo anterior, onde solucionei (e contei minha jornada de solução) dos cinco primeiros níveis desse jogo &lt;a href="https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-0-5-4ipp"&gt;clicando aqui&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;É importante lembrar que estes artigos tem um foco na minha jornada para solucionar o problema, não na solução em si, o que é bem diferente do que você encontra na internet por ai. Então, se você está pronto pra ir nessa aventura comigo, vamos nessa!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onde-parei"&gt;
  &lt;/a&gt;
  Onde parei:
&lt;/h2&gt;

&lt;p&gt;No último artigo, eu consegui a senha e o login para o nível 6 do desafio.&lt;br&gt;
Comando de login: ssh &lt;a href="mailto:bandit5@bandit.labs.overthewire.org"&gt;bandit5@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: koReBOKuIDDepwhWk7jZC0RTdopnAYKh&lt;/p&gt;

&lt;p&gt;Com essas informações, já podemos &lt;a href="https://overthewire.org/wargames/bandit/bandit6.html"&gt;acessar o link&lt;/a&gt; das instruções e prosseguir o desafio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-5-gt-n%C3%ADvel-6"&gt;
  &lt;/a&gt;
  Nível 5 -&amp;gt; Nível 6
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está em algum lugar na pasta inhere e tem todas as seguintes propriedades: pode ser lida por humanos, tem tamanho de 1033 bytes e não é executável.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alguns comandos são disponibilizados na página do desafio, como dicas. O comando que já me parece útil, é o comando &lt;code&gt;find&lt;/code&gt;, já que pelo enunciado precisamos procurar por um arquivo de acordo com suas propriedades, mas só para garantir, eu usei o comando &lt;code&gt;whatis find&lt;/code&gt; para ter certeza de que é este o comando que eu preciso.&lt;/p&gt;

&lt;p&gt;Para saber mais sobre esse comando, eu utilizaria o comando &lt;code&gt;find --help&lt;/code&gt; no terminal no Linux, ou &lt;code&gt;man find&lt;/code&gt;, mas vou tentar fazer algo diferente, e usar uma sugestão do &lt;a href="https://dev.to/eduardoklosowski"&gt;Eduardo Klosowski&lt;/a&gt; (inclusive, se você não conhece o conteúdo que ele produz, recomendo fortemente que conheça, porque ele tem domínio de tudo que fala e está sempre falando de conteúdo relevanete, além é claro de me dar dicas ótimas!) e usar o site &lt;a href="https://explainshell.com/"&gt;https://explainshell.com/&lt;/a&gt; para ter uma alternativa diferente ao terminal. Basta digitar o comando e o site fará uma busca, exibindo os comandos relacionados à sua busca. Então é só selecionar o comando, e tentar entender o que precisamos fazer para passar de nível.&lt;/p&gt;

&lt;p&gt;Lendo &lt;a href="https://explainshell.com/explain/1/find"&gt;o resultado da busca para &lt;code&gt;find&lt;/code&gt;&lt;/a&gt;, vemos que este comando possui uma série de parâmetros para procurar por arquivos por diferentes tipos de coisas. Então precisamos de alguma maneira para filtrar a legibilidade, tamanho, e executabilidade dos arquivos na pasta.&lt;/p&gt;

&lt;p&gt;As diretivas que eu encontrei que podem resolver o problema foram &lt;code&gt;-readable&lt;/code&gt;, &lt;code&gt;-size&lt;/code&gt; e &lt;code&gt;-executable&lt;/code&gt;. Para o parâmetro &lt;code&gt;executable&lt;/code&gt;, eu preciso descobrir uma maneira de inverter seu resultado, algo que eu penso que pode ser feito usando &lt;code&gt;!&lt;/code&gt; ou &lt;code&gt;not&lt;/code&gt;, e como não encontrei essa informação no site, utilizo o &lt;code&gt;find --help&lt;/code&gt; para ver se encontro alguma coisa. De fato, podemos obsersar alguns operadores para os parâmetros, entre eles, o &lt;code&gt;-not&lt;/code&gt; que deve ser usado antes de outro parâmetros. Agora só preciso combinar todos os parâmetros, e teremos uma solução para o problema.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find -readable -not -executable -size 1033&lt;/code&gt;, infelizmente não funcionou (como se algo funcionasse na primeira tentativa hehe), mas quando eu tirei o parâmetro referente ao tamanho, consegui um resultado para a busca, o que significa que meu problema está neste último parâmetro da busca. E como era de se esperar, eu acabei esquecendo de especificar o tamanho, ou seja, indicar que 1033 se refere a bytes. Então é só aplicar &lt;code&gt;find -readable -not -executable -size 1033c&lt;/code&gt; e temos como resultado um único arquivo. Agora é só usar o comando cat nesse arquivo, e temos a senha para o próximo nível. Lembrando que para fechar a conexão com o servidor atual, você precisa digitar &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit6@bandit.labs.overthewire.org"&gt;bandit6@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: DXjZPULLxYr17uwoI01bNLQbtFemEgo7&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-6-gt-n%C3%ADvel-7"&gt;
  &lt;/a&gt;
  Nível 6 -&amp;gt; Nível 7
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está em algum lugar no servidor e tem todas as seguintes propriedades: pertence ao usuário bandit7, pertence ao grupo bandit6 e tem 33 bytes de tamanho.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lendo este enunciado, me parece que temos que usar o comando &lt;code&gt;find&lt;/code&gt; outra vez. Para ter certeza disso, volto à nossa &lt;a href="https://explainshell.com/explain/1/find"&gt;busca no explainshell.com&lt;/a&gt; para ver se existe algum comando que filtre a quem determinado arquivo pertence.&lt;/p&gt;

&lt;p&gt;Logo encontro os parâmetros &lt;code&gt;-group&lt;/code&gt;, que retorna arquivos pertences a determinado grupo, e &lt;code&gt;-user&lt;/code&gt;, que retorna arquivos pertences a um determinado usuário. Como já conhecemos o &lt;code&gt;-size&lt;/code&gt; para encontrar um arquivo por tamanho, já temos tudo na mão para resolver esse desafio.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find -user bandit7 -group bandit6 -size 33c&lt;/code&gt; parece que vai resolver o desafio, porém não consegui nenhum tipo de retorno com este comando. Este é um momento decisivo. Você pode aceitar que algo não funciona e é isso, ou pode tentar entender porque ele não funciona e assim encontrar uma solução. Lógicamente, eu escolhi ler um pouco mais da documentação do comando para entender porque não estava funcionando.&lt;/p&gt;

&lt;p&gt;O comando &lt;code&gt;file&lt;/code&gt; procura arquivos no diretório atual, e nos diretórios que estão dentro deste diretório, porém precisamos realizar nossa busca no servidor inteiro, não em uma pasta específica, por isso não consegui nenhum resultado na pasta home do usuário. &lt;/p&gt;

&lt;p&gt;Para isso, precisamos especificar uma pasta diferente para fazer a procura, no caso, o diretório &lt;code&gt;/&lt;/code&gt; do servidor, já que todo o conteúdo do servidor está dentro deste diretório. Para especificar um novo diretório, o colocamos logo após o comando &lt;code&gt;file&lt;/code&gt;, então rodando &lt;code&gt;find / -user bandit7 -group bandit6 -size 33c&lt;/code&gt;, temos alguns resultados, vários deles indicando &lt;em&gt;"Permission denied"&lt;/em&gt;, ou permissão negada. &lt;/p&gt;

&lt;p&gt;Bom, é quase intuitivo que temos que encontrar um arquivo que tenhamos permissão de acessar, então aqui você tem duas opções: olhar cada um dos resultados atrás de algum que tenha permissão, ou procurar na documentação do &lt;code&gt;find&lt;/code&gt; algo que automatize isso. Eu, novamente, escolhi a segunda opção, mas não encontrei nada relevante. Também dei uma olhada no comando &lt;code&gt;grep&lt;/code&gt; (utilizado para encontrar padrões), e também não encontrei nada de útil.&lt;/p&gt;

&lt;p&gt;Por fim, recorri ao google. É muito importante que você saiba pesquisar para obter melhor um melhor resultado. No meu caso, eu fiz a busca em inglês porque geralmente consigo resultados mais interessantes mais rápido. &lt;em&gt;"linux find skip permission denied"&lt;/em&gt; me pareceu uma boa busca, já que eu quero realmente pular os arquivos que não consigo acessar. E olhando os resultados da pesquisa, consegui encontrar o comando &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; &lt;a href="https://www.cyberciti.biz/faq/bash-find-exclude-all-permission-denied-messages/"&gt;clique aqui para acessar o link do artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Antes de usar o comando, copiei e colei ele novamente no google (google é essencial se você trabalha com tecnologia, só quero deixar isso registrado aqui), para tentar descobrir do que se tratava, e encontrei a resposta que eu precisava &lt;a href="https://askubuntu.com/questions/350208/what-does-2-dev-null-mean"&gt;neste link&lt;/a&gt;. Basicamente, o número 2 se refere a mensagens de erro, ou seja, falhas no acesso, entre outras coisas. O símbolo &amp;gt; é o simbolo de redirecionamento, então estamos redirecionando todos os erros para &lt;code&gt;/dev/null&lt;/code&gt;, que é um diretório de "lixo". Parece fazer sentido com o que eu preciso, então vamos tentar executar o comando &lt;code&gt;find / -user bandit7 -group bandit6 -size 33c 2&amp;gt;/dev/null&lt;/code&gt;, e temos um único arquivo novamente, onde temos a senha do próximo nível. Só usar &lt;code&gt;cat&lt;/code&gt; e pegar!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit7@bandit.labs.overthewire.org"&gt;bandit7@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-7-gt-n%C3%ADvel-8"&gt;
  &lt;/a&gt;
  Nível 7 -&amp;gt; Nível 8
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt, do lado da palavra "millionth"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Este exercício parece mais simples que o anterior, a primeira vista, mas só vamor ter certeza, resolvendo. Eu comecei usando o comando &lt;code&gt;cat&lt;/code&gt; no arquivo &lt;code&gt;data.txt&lt;/code&gt; para entender melhor a estrutura dele, e como eu deveria estruturar a minha busca. Basicamente, o arquivo possui várias linhas, cada uma contendo uma palavra chave, e uma senha. O que temos que fazer então é achar um comando que retorne o texto da linha onde determinada palavra foi encontrada. &lt;/p&gt;

&lt;p&gt;Vendo os comandos oferecidos pela ajuda no nível, o comando &lt;code&gt;strings&lt;/code&gt; me parece útil, porém após uma rápida busca no &lt;a href="https://explainshell.com/"&gt;explainshell.com&lt;/a&gt;, acho que não é este o comando que precisamos. Reanalizando o problema, uma solução muito simples me veio a cabeça. Eu quero encontrar uma sequência de caracteres em um arquivo, e o comando &lt;code&gt;grep&lt;/code&gt; é perfeito para isso, já que ele busca por determinados padrões de caracteres em um input. Tudo que eu preciso fazer é redirecionar a saída do comando &lt;code&gt;cat&lt;/code&gt; para o comando grep, e BAM! Temos a senha para o próximo nível. E por sorte, &lt;code&gt;cat data.txt | grep millionth&lt;/code&gt; retorna exatamente a linha de código que eu preciso com a senha &lt;em&gt;cvX2JJa4CFALtqS87jk27qwqGhBM9plV&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Algo que acho importante mencionar aqui, é que o comando &lt;code&gt;grep&lt;/code&gt; foi o primeiro da lista de sugestões do &lt;a href="https://overthewire.org/wargames/bandit/bandit8.html"&gt;OverTheWire&lt;/a&gt;, mas só passou pela minha cabeça utilizá-lo depois que eu já tinha pesquisado e feito algumas tentativas com outros comandos. Talvez eu devesse ter prestado mais atenção às dicas, hehe.   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit8@bandit.labs.overthewire.org"&gt;bandit8@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: cvX2JJa4CFALtqS87jk27qwqGhBM9plV&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-8-gt-n%C3%ADvel-9"&gt;
  &lt;/a&gt;
  Nível 8 -&amp;gt; Nível 9
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está guardada no arquivo data.txt e é a única linha de código que ocorre apenas uma vez.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Como no exercício anterior, precisamos realizar uma filtragem em um arquivo de texto, mas uma filtragem que identifique um a linha única. Nos comandos oferecidos na ajuda, &lt;code&gt;uniq&lt;/code&gt; me parece útil, e observando o resultado e &lt;code&gt;whatis uniq&lt;/code&gt;, vejo que ele omite linhas repetidas, então parece que tudo que precisamos fazer é filtrar o arquivo com este comando. Porém não tive muito sucesso com a utilização dele. Isso significa que precisamos ir mais a fundo nas funcionalidades do comando para entender como ele funciona. &lt;/p&gt;

&lt;p&gt;Uma opção de contagem está disponível no comando, e utilizando ela em conjunto com o comando grep, ainda recebemos várias ocorrências de linhas que ocorrem apenas uma vez, e observando a saída, encontrei o problema. Como não existem duas linhas iguais em seguida, o comando &lt;code&gt;uniq&lt;/code&gt; não filtra essas ocorrências separadas, então precisamos de alguma maneira de ordenar as linhas do arquivo de texto. O comando que me parece útil é o comando &lt;code&gt;sort&lt;/code&gt; que ordena linhas de texto. Agora é entender como este comando funciona e de que maneira ele pode ser utilizado.&lt;/p&gt;

&lt;p&gt;O comando &lt;code&gt;sort&lt;/code&gt; ordena as linhas de texto em ordem alfabética, então tudo o que precisamos fazer é ler o arquivo, ordená-lo e remover as linhas duplicadas. Minha primeira ideia foi criar um novo arquivo com a lista ordenada, mas não tenho permissão de fazer esse tipo de alteração, então minha segunda ideia foi redirecionar a saída do comando &lt;code&gt;sort&lt;/code&gt; para o comando &lt;code&gt;uniq&lt;/code&gt;, e isso também não deu muito certo, mas lendo a documentação do comando &lt;code&gt;uniq&lt;/code&gt;, é possível ver que o parâmetro &lt;code&gt;-u&lt;/code&gt; imprime apenas linhas não repetidas, e de fato &lt;code&gt;sort data.txt | uniq -u&lt;/code&gt; retorna apenas uma linha de texto, que é a senha do próximo nível. Note que não é necessário especificar o input para o comando &lt;code&gt;uniq&lt;/code&gt;, já que a entrada deste comando é a saída do comando &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandi9@bandit.labs.overthewire.org"&gt;bandi9@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-9-gt-n%C3%ADvel-10"&gt;
  &lt;/a&gt;
  Nível 9 -&amp;gt; Nível 10
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt em uma das poucas strings que podem ser lidas por um humano, precedida de vários '='&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Assim como nos desafios anteriores, aqui precisamos fazer uma filtragem no texto de um arquivo. Basta definir como. Minha primeira ideia para resolver este problema, foi utilizar o comando &lt;code&gt;cat&lt;/code&gt; e filtrar essa saída com o comando &lt;code&gt;grep&lt;/code&gt;, mas como você já deve estar acostumado se leu tudo o que eu escrevi até aqui, isso não deu certo, e não é nenhuma surpresa.&lt;/p&gt;

&lt;p&gt;Já que não deu certo, comecei a procurar na documentação do comando &lt;code&gt;cat&lt;/code&gt; algum motivo para me explicar porque isso não deu certo, mas não consegui chegar em nada muito claro. Minha segunda opção (pelas dicas do nível), é o comando &lt;code&gt;strings&lt;/code&gt; que parece fazer quase a mesma coisa que o &lt;code&gt;cat&lt;/code&gt;, mas ao invés de imprimir na tela, este comando apenas gera uma saída com todas as strings lidas do arquivo, o que o torna um bom candidato para um segundo teste. &lt;/p&gt;

&lt;p&gt;Lembrando que eu preciso filtrar o documento por um padrão, (o que já torna o uso do &lt;code&gt;grep&lt;/code&gt; quase que institivo). Surpreendentemente, (não, eu não esperava que isso fosse funcionar, porque geralmente preciso de muitos erros e a maioria deles não é documentado aqui), &lt;code&gt;strings data.txt |grep '=='&lt;/code&gt; retorna um pequeno texto e a senha para o próximo nível. Note que eu usei '==' como filtro do grep, e se você ler a descrição do problema verá que o exercício enuncia que a senha está &lt;em&gt;precedida de vários '='&lt;/em&gt;, portanto me pareceu mais lógico utilizar dois iguais pois estaria retirando algumas linhas que eu já sabia que não se adequavam à condição (aquelas que contém apenas um '='). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit10@bandit.labs.overthewire.org"&gt;bandit10@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-10-gt-n%C3%ADvel-11"&gt;
  &lt;/a&gt;
  Nível 10 -&amp;gt; Nível 11
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt que contém dados criptografados em base64&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Já que um dos comandos das dicas se chama literalmente &lt;code&gt;base64&lt;/code&gt;, acho que a solução desse problema não vai ser muito difícil. Utilizando o comando &lt;code&gt;whatis&lt;/code&gt; vemos que &lt;code&gt;base64&lt;/code&gt; é um comando para criptografar e discriptografar dados. Parece ser o que precisamos, e rodando &lt;code&gt;base64 --help&lt;/code&gt;, o parâmetro &lt;code&gt;-d&lt;/code&gt; fornece uma descriptografia de um arquivo. E de uma maneira muito mais simples do que parece, só precisamos utilizar o comando &lt;code&gt;base64 -d data.txt&lt;/code&gt; para obter a senha do próximo nível.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit11@bandit.labs.overthewire.org"&gt;bandit11@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;
  &lt;/a&gt;
  Considerações finais
&lt;/h2&gt;

&lt;p&gt;Confesso que demorei muito mais do que eu gostaria para escrever este arquivo, porém, antes tarde do que nunca, está publicado.&lt;/p&gt;

&lt;p&gt;Resolver estes desafios está sendo bem divertido, porém eu gostaria muito de ter mais tempo para me dedicar aos desafios. Se você acha que eu "enrolo" muito explicando meus erros, saiba que só os mais significativos realmente entram para o artigo, e que esse processo é bem complicado. &lt;/p&gt;

&lt;p&gt;De qualquer jeito, espero que este artigo tenha sido útil de alguma forma, e até a próxima!&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>linux</category>
      <category>security</category>
    </item>
    <item>
      <title>Tip: use the WordPress code editor to pass attributes to your Gutenberg block variations</title>
      <author>Ashley Kolodziej</author>
      <pubDate>Sun, 11 Apr 2021 02:00:02 +0000</pubDate>
      <link>https://dev.to/ashleykolodziej/tip-use-the-wordpress-code-editor-to-pass-attributes-to-your-gutenberg-block-variations-4jcb</link>
      <guid>https://dev.to/ashleykolodziej/tip-use-the-wordpress-code-editor-to-pass-attributes-to-your-gutenberg-block-variations-4jcb</guid>
      <description>&lt;p&gt;I’ve been learning Gutenberg block development lately, and one of the things I was struggling with was trying to figure out what parameters I could pass on to blocks defined in block variations. I was looking all over the place for documentation on the parameters each block takes, such as font size and color. Little did I know I had all the documentation I needed right in front of me, in the form of the WordPress code editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-whats-a-variation"&gt;
  &lt;/a&gt;
  Wait, what’s a variation?
&lt;/h2&gt;

&lt;p&gt;A block variation is an easy way of leveraging WordPress core blocks (and even custom blocks you build) to create your own sets of blocks without writing any React code. You’ll need to write a bit of JavaScript, but it’s a lot like writing an array or object. If you can do that, you can write a block variation.&lt;/p&gt;

&lt;p&gt;I like using block variations to create recommended sets of content and help guide my users in content entry. You can nest blocks in block variations, and do things like pre-set the background or font size on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-editor-to-speed-up-block-variation-development"&gt;
  &lt;/a&gt;
  Use the editor to speed up block variation development
&lt;/h2&gt;

&lt;p&gt;My new workflow with block variations is to build the variation just the way I like it in the visual editor, and then switch over to the code editor to grab the attributes I need from there. This lets me set hard-to-remember parameters the right way, like gradients, without having to guess and check, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_szirpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8hg7bjq1pk76zj8q5ae.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_szirpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8hg7bjq1pk76zj8q5ae.jpeg" alt="The attributes in the code editor are between curly braces, and can be used in block variations."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you identify the block you want to model your variation off of in the code editor, just grab those attributes and bring them back into your block variations code. &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/blob/solution-code/src/variations/index.js#L61"&gt;Here’s what that looks like in my final code.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXg78IZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6s03fvk2bs6j9ma3hzt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXg78IZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6s03fvk2bs6j9ma3hzt.jpeg" alt="Code example demonstrating attributes being passed to a block variation using the attributes parameter."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works for both your variations and your &lt;code&gt;innerBlocks&lt;/code&gt;. &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/blob/solution-code/src/variations/index.js#L28"&gt;Here’s an example in my final code of how I used this in a nested block.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7nX8CpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5pl3yxmaj8qh82eopv9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7nX8CpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5pl3yxmaj8qh82eopv9.jpeg" alt="Code example demonstrating attributes being passed to inner blocks in a block variation."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Block variations are a low key way to get into Gutenberg block development and get familiar with the ecosystem without getting into React or the more complicated bits. Check it out if you’re new to Gutenberg and looking for a place to start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-tutorial"&gt;
  &lt;/a&gt;
  Full tutorial
&lt;/h2&gt;

&lt;p&gt;If you’re new to JavaScript or Gutenberg, I recorded my full process of building block variations using this method in a beginner-friendly way here.  I also put together sample code below in Github you can use to get started with a new block variation.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m6IH-G286DU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ashleykolodziej"&gt;
        ashleykolodziej
      &lt;/a&gt; / &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations"&gt;
        professorkexplains-block-variations
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Block Variations tutorial&lt;/h1&gt;
&lt;p&gt;These are companion files to my &lt;a href="https://youtu.be/m6IH-G286DU" rel="nofollow"&gt;Build Your First Block Variation tutorial on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use these files, download them, and then unzip them to the directory of your choice. In my tutorial, this directory is called &lt;code&gt;variations-example&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can view the final code from the tutorial on the &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/tree/solution-code"&gt;solution-code branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also see exactly what changed codewise from the beginning of the tutorial to the end of the tutorial by &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/pull/1"&gt;taking a look at this pull request&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ashleykolodziej/professorkexplains-block-variations"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>wordpress</category>
      <category>javascript</category>
      <category>gutenberg</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Are Default Params in JavaScript bad? (Snack pack #4)</title>
      <author>Blake Campbell</author>
      <pubDate>Sun, 11 Apr 2021 01:52:58 +0000</pubDate>
      <link>https://dev.to/blaketweeted/are-default-params-in-javascript-bad-snack-pack-4-g9</link>
      <guid>https://dev.to/blaketweeted/are-default-params-in-javascript-bad-snack-pack-4-g9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#not-if-its-still-passed"&gt;
  &lt;/a&gt;
  Not if it's still passed
&lt;/h1&gt;

&lt;p&gt;Take this example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjeZ1Rp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljcsshc6kr9q2fy1164o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjeZ1Rp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljcsshc6kr9q2fy1164o.png" alt="carbon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote this function well over two years ago. It just pops up a notification if the user makes a CRUD call. (Create, Read, Update Delete). The function only takes two defined parameters a message and a notification. &lt;/p&gt;

&lt;p&gt;The notification parameter is a boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;notification = true // notify user by a pop-up
notification = false // inline-notification by form button, or in a defined space
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Looking back at this function, it could be much better. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of a notification boolean, it can be notification style as a string. &lt;/li&gt;
&lt;li&gt;Call with the second parameter everywhere&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#back-to-the-question-default-params-in-js-bad"&gt;
  &lt;/a&gt;
  Back to the question: &lt;strong&gt;Default Params in JS bad?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I think so if I'm not explicitly calling with all the params of a function. &lt;strong&gt;It's okay to have a fallback, but don't depend on it!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It's leaves technical debt. &lt;/li&gt;
&lt;li&gt;How is another developer supposed to know what parameters are passed if they only see a partial picture? &lt;/li&gt;
&lt;li&gt;My boolean parameter is bad in this case.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#how-i-refactored-this-function"&gt;
  &lt;/a&gt;
  How I refactored this function:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZYSqqnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhir0fjvc94eo9na9av9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZYSqqnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhir0fjvc94eo9na9av9.png" alt="carbon (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My snack pack reads are intended for a quick read without any fluff or BS.&lt;/p&gt;

&lt;p&gt;Feedback is always welcome.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codequality</category>
      <category>refactorit</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I set up my Mac</title>
      <author>Alessandro</author>
      <pubDate>Sat, 10 Apr 2021 23:56:14 +0000</pubDate>
      <link>https://dev.to/dieman/how-i-set-up-my-mac-9m4</link>
      <guid>https://dev.to/dieman/how-i-set-up-my-mac-9m4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Keep in mind:&lt;/strong&gt; some of these steps will be of course optional, such as the iTerm2 installation and configuration. I personally highly suggest the following everything to improve your productivity! If you are at an advanced level already, you can skip all of this.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mac-shortcuts"&gt;
  &lt;/a&gt;
  Mac Shortcuts
&lt;/h2&gt;

&lt;p&gt;If you are not very experienced with a Macbook, follow this chapter to discover useful tips!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spotlight-search"&gt;
  &lt;/a&gt;
  Spotlight Search
&lt;/h3&gt;

&lt;p&gt;This will be your best friend. Are you looking for a specific software or folder... or whatever? Press &lt;code&gt;Command-Space&lt;/code&gt; and start writing what you need. You can even use it as a calculator. Try it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-switcher"&gt;
  &lt;/a&gt;
  Application Switcher
&lt;/h3&gt;

&lt;p&gt;Press &lt;code&gt;Command-Tab&lt;/code&gt; to open the switcher. If you keep Command key pressed you can use Tab repetitively to navigate through the icons and choose the one you wish to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminal"&gt;
  &lt;/a&gt;
  Terminal
&lt;/h2&gt;

&lt;p&gt;If you never used Linux or Mac before, you probably need to learn how to use a terminal efficiently. Below a list of the most used commands.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Home Directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to parent directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd &amp;lt;folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to the specified folder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pwd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show your current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display files and subdir in the actual directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls -la&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as before but detailed with hidden files as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mkdir &amp;lt;name folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Create a new directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rm -R &amp;lt;folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete folder with its entire content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rm &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;touch &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Create a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;chmod -x &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Make a file executable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;./&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Run an executable file. Example: &lt;code&gt;./install.sh&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;top&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display info about running processes (similar to Task Manager), you can exit it with CTRL+C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kill &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Kill a process using its PID (using the top command, it will be the first column)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output the content of a specified file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nano &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open and edit a file with the in-built Linux editor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;These are - in my opinion - the basic that you need to navigate easily through the Terminal. There are many other more commands and flags, and if you need a more detailed list, you can always google it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-install"&gt;
  &lt;/a&gt;
  What to Install
&lt;/h2&gt;

&lt;p&gt;What do you need to install on your new shiny Mac? Below I will cover what I think any Mac should have, and some are real MUST.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#homebrew"&gt;
  &lt;/a&gt;
  Homebrew
&lt;/h3&gt;

&lt;p&gt;Homebrew is a package manager. You can use it to install most of the stuff you need, very fast and from the Terminal.&lt;/p&gt;

&lt;p&gt;Open your Terminal and copy-paste this command to install Homebrew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now install new software with the &lt;code&gt;brew install &amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;brew cask install &amp;lt;name&amp;gt;&lt;/code&gt; if what you want to install is a graphical GUI application such as our next in the list: Visual Studio Code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h3&gt;

&lt;p&gt;If you still do not have a favourite code editor, I suggest you give VSCode a try.&lt;/p&gt;

&lt;p&gt;You can install VSCode with Homebrew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew cask &lt;span class="nb"&gt;install &lt;/span&gt;visual-studio-code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installation, to be able to use &lt;code&gt;code&lt;/code&gt; command from the terminal, we need to first to install the 'code' command in PATH. How? Open VSCode with Spotlight (&lt;code&gt;Command-Space&lt;/code&gt;) and press F1 (if you have Touch Bar, press fn and it will appear on it) and type &lt;code&gt;path&lt;/code&gt;, select the first sentence and press enter. Now go in the terminal and try to open your current folder with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, have fun customising your new code editor!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-better-terminal"&gt;
  &lt;/a&gt;
  A better terminal
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GucBJ6g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oww14k8k0lmkz320iw5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GucBJ6g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oww14k8k0lmkz320iw5y.png" alt="iTerm2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to install and customise iTerm2 and finally get rid of the default Terminal. This process will not only make your Terminal look good, but also improve your productivity with syntax highlight, auto-suggestion and tab auto-complete.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-iterm2"&gt;
  &lt;/a&gt;
  Install iTerm2
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew cask &lt;span class="nb"&gt;install &lt;/span&gt;iterm2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-oh-my-zsh"&gt;
  &lt;/a&gt;
  Install Oh My Zsh
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-powerlevel10k"&gt;
  &lt;/a&gt;
  Install Powerlevel10k
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/romkatv/powerlevel10k.git &lt;span class="nv"&gt;$ZSH_CUSTOM&lt;/span&gt;/themes/powerlevel10k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visual Studio Code will open then set &lt;code&gt;ZSH_THEME="powerlevel10k/powerlevel10k"&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-autosuggestion"&gt;
  &lt;/a&gt;
  Install Auto-Suggestion
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="p"&gt;~/.oh-my-zsh/custom&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/plugins/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now type the following code &lt;code&gt;plugins=(zsh-autosuggestions)&lt;/code&gt; on a new line.&lt;/p&gt;

&lt;p&gt;Close the terminals (Command-Q) and restart it again (&lt;code&gt;Command-Space iTerm2&lt;/code&gt;) and follow the instructions as per your preference.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-highlighting"&gt;
  &lt;/a&gt;
  Syntax highlighting
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add &lt;code&gt;source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&lt;/code&gt; at the end of &lt;code&gt;~./zshrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Restart the terminal to apply the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;I will write something else in the near future!&lt;/p&gt;

&lt;p&gt;Meanwhile feel free to join us in our &lt;a href="https://discord.gg/ohmyzsh"&gt;ohmyzsh discord&lt;/a&gt; if you need any help!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tips</category>
    </item>
    <item>
      <title>Ruby blocks made easy, part II, curry and procs as arguments</title>
      <author>Leandro Proença</author>
      <pubDate>Sat, 10 Apr 2021 23:21:53 +0000</pubDate>
      <link>https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25</link>
      <guid>https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2"&gt;In the previous post&lt;/a&gt;, we learned that methods can be transformed into procs to be evaluated &lt;em&gt;later&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One thing worth to mention is that, the method itself can be used like a proc: every &lt;code&gt;Method&lt;/code&gt; structure has a method called &lt;code&gt;call&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:05&lt;/span&gt;

&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:07&lt;/span&gt;

&lt;span class="c1"&gt;# checking the classes&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Method&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Proc (lambda)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Given that, the &lt;code&gt;method&lt;/code&gt; structure is good enough to be used in &lt;em&gt;later evaluations&lt;/em&gt;. In theory, it is NOT a Proc. But in practice, it &lt;strong&gt;behaves&lt;/strong&gt; like proc lambdas and &lt;em&gt;will&lt;/em&gt; evaluate the expression later.&lt;/p&gt;

&lt;p&gt;We can also evaluate methods later with arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#proc-with-arguments-curry"&gt;
  &lt;/a&gt;
  Proc with arguments (curry)
&lt;/h3&gt;

&lt;p&gt;Sometimes it's useful to define a proc with some &lt;em&gt;static arguments&lt;/em&gt;, which can be evaluated later along with the dynamic arguments. These arguments can be "curried" to the proc using the method &lt;code&gt;.curry&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# creates a proc with no curried arguments&lt;/span&gt;
&lt;span class="c1"&gt;#   and calls using two dynamic arguments&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;

&lt;span class="c1"&gt;# creates a proc with the first argument curried&lt;/span&gt;
&lt;span class="c1"&gt;#   and calls using one remaining dynamic argument&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 15&lt;/span&gt;

&lt;span class="c1"&gt;# checking the class&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Proc&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; It's also a Proc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This feature is powerful because it allows us to write more expressive code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;multiply_by_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;multiply_by_2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#passing-a-lambda-method-as-argument-to-another-method"&gt;
  &lt;/a&gt;
  Passing a lambda method as argument to another method
&lt;/h3&gt;

&lt;p&gt;Lambda methods can be passed as arguments to methods like any other valid expression. &lt;/p&gt;

&lt;p&gt;Let's suppose we want a method which takes a list of numbers and applies some &lt;strong&gt;calculation&lt;/strong&gt; method to each number, returning a new calculated list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
    &lt;span class="c1"&gt;# `calculation` is a proc, but we don't care about&lt;/span&gt;
    &lt;span class="c1"&gt;#    its logic: we simply evaluate whatever the&lt;/span&gt;
    &lt;span class="c1"&gt;#    calculation is to the number&lt;/span&gt;
    &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we want to use the method &lt;code&gt;map_numbers&lt;/code&gt; to take a list of numbers and return a new list with &lt;em&gt;each number multiplied by 2&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# declaring the list&lt;/span&gt;
&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# declaring the "calculation" proc, using the "2" curried&lt;/span&gt;
&lt;span class="c1"&gt;#    as we've seen in the previous example&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiply_by_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do even better, &lt;em&gt;in a single line&lt;/em&gt;, applying other calculations as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# multiplying by 2&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# multiplying by 4&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# multiplying by 42&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could go beyond, supposing we'd have more calculation methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:sum_by&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:square_of&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned that procs can be passed as arguments to another methods and, optionally, can use curried arguments, making our code appear more &lt;em&gt;declarative&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-iii-grand-finale-blocks-and-syntactic-sugar-4d48"&gt;In the next and last post of this series&lt;/a&gt;, we will unblock more fundamentals and introduce &lt;em&gt;blocks&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>programming</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Ruby blocks made easy, part I, methods and procs</title>
      <author>Leandro Proença</author>
      <pubDate>Sat, 10 Apr 2021 23:17:45 +0000</pubDate>
      <link>https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2</link>
      <guid>https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2</guid>
      <description>&lt;p&gt;Blocks in Ruby are powerful structures that are part of our daily basis as Ruby developers. We see them being used across a variety of standard classes as well as in almost every popular gem. &lt;/p&gt;

&lt;p&gt;A few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# print each number within an array&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# usage in some ActiveRecord models &lt;/span&gt;
&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;published: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# usage in Devise configuration&lt;/span&gt;
&lt;span class="no"&gt;Devise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# config.encryptor = :sha512&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# usage in Rails views&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= form_for @user do |form| %&amp;gt;
  // do something with the `form` object
&amp;lt;% end %&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The examples could go beyond.&lt;/p&gt;

&lt;p&gt;Blocks enable &lt;em&gt;flexibility and extensibility&lt;/em&gt;. It's practically impossible for any Ruby application to exist without blocks. &lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://www.rubyguides.com/2016/02/ruby-procs-and-lambdas/"&gt;lots of blogposts explaining the differences between blocks, procs and lambdas&lt;/a&gt;, but in this guide which is a series of articles, I'll explain the fundamentals and try to present, in baby-steps, some common problems and how Ruby blocks can help to solve them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-ruby-evaluates-expressions"&gt;
  &lt;/a&gt;
  How Ruby evaluates expressions
&lt;/h2&gt;

&lt;p&gt;Everything in Ruby is an expression, so an expression results in a value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ruby evaluates the expression, which results in a value `2`&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# ruby evaluates the expression, which results in a value `2`, and stores the result in the variable `number`&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same as calling any method in an Object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ruby evaluates the method `.now` in the class `Time`,&lt;/span&gt;
&lt;span class="c1"&gt;#  resulting in a value which is the current time,&lt;/span&gt;
&lt;span class="c1"&gt;#  and stores the result in the variable `current_time` &lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#everything-in-ruby-is-an-object"&gt;
  &lt;/a&gt;
  Everything in Ruby is an object
&lt;/h4&gt;

&lt;p&gt;For those who are already know that &lt;a href="https://dev.to/craigbrad/everything-is-an-object-5184"&gt;everything in Ruby is an object&lt;/a&gt;, the following expression is familiar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; is an instance object of the class &lt;code&gt;Integer&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The class &lt;code&gt;Integer&lt;/code&gt; defines a special method, called &lt;code&gt;+&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This method takes an argument, which should be an instance of the class &lt;code&gt;Integer&lt;/code&gt;, in this case, &lt;code&gt;2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The method results in a value, which is &lt;code&gt;3&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that, once:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everything is object&lt;/li&gt;
&lt;li&gt;objects have methods&lt;/li&gt;
&lt;li&gt;and everything is an expression which results in a value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, expressions are all about &lt;em&gt;calling methods&lt;/em&gt;. Hence, we can come to the conclusion that &lt;strong&gt;expressions are evaluated immediately&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_current_time&lt;/span&gt;
  &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_current_time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, Ruby will evaluate the expression &lt;code&gt;fetch_current_time&lt;/code&gt;, which is a &lt;em&gt;method&lt;/em&gt;, then resulting in the value &lt;strong&gt;immediately&lt;/strong&gt;, storing the result in the variable &lt;code&gt;current_time&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No matter how many times we call the variable: anytime the variable &lt;code&gt;current_time&lt;/code&gt; is called, it will produce the &lt;em&gt;same&lt;/em&gt; value that was already evaluated previously. Expressions are evaluated &lt;strong&gt;only immediately&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluating-expressions-later"&gt;
  &lt;/a&gt;
  Evaluating expressions later
&lt;/h2&gt;

&lt;p&gt;What if we wanted to evaluate an expression, &lt;em&gt;not immediately&lt;/em&gt;, but &lt;strong&gt;later&lt;/strong&gt;? Sometimes, we have the need to pass through some variable that contains an expression to be evaluated in &lt;em&gt;another context&lt;/em&gt;, not in the current one. &lt;/p&gt;

&lt;p&gt;Let's see the implementation for the &lt;code&gt;fetch_current_time&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_current_time&lt;/span&gt;
  &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's suppose we want to store this method in some variable, but we want to send this variable to another component, class, whatever context, but &lt;em&gt;later&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#potential-solution"&gt;
  &lt;/a&gt;
  Potential solution
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#this-is-not-ruby-code-just-a-pseudo-code-for-didatic-purposes"&gt;
  &lt;/a&gt;
  This is not Ruby code, just a PSEUDO CODE for didatic purposes
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we &lt;strong&gt;could&lt;/strong&gt; have the ability to call &lt;code&gt;current_time&lt;/code&gt;, producing a different result (time) everytime it is called:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:15&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:16&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that, everytime time the variable is called, the expression within &lt;strong&gt;is evaluated again&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ruby-solution"&gt;
  &lt;/a&gt;
  Ruby solution
&lt;/h3&gt;

&lt;p&gt;The Ruby standard API provides a method called &lt;code&gt;method&lt;/code&gt; which takes an argument which is the method &lt;em&gt;name&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#&amp;lt;Method: main.fetch_current_time() (irb):91&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Yes, this is weird at first but it is part of the metaprogramming Ruby API. Metaprogramming in Ruby is really powerful. We should learn and use its capabilities &lt;strong&gt;consciously&lt;/strong&gt; and with moderation.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;meth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, this is the representation of a &lt;em&gt;method&lt;/em&gt;. &lt;br&gt;
It is literally the instance of the class &lt;code&gt;Method&lt;/code&gt; (remember everything in Ruby is object? Methods included!). &lt;br&gt;
And as such, it has a method that &lt;strong&gt;transforms the method into an structure that can be evaluated later&lt;/strong&gt;. This method is called &lt;code&gt;.to_proc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;

&lt;span class="c1"&gt;#&amp;lt;Proc:0x00007fca441d4ed8 (lambda)&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;it returns an instance of the class &lt;code&gt;Proc&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the class &lt;code&gt;Proc&lt;/code&gt; is used to include expressions that will be evaluated later&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;lambda&lt;/code&gt; indicates that this proc is a &lt;em&gt;lambda&lt;/em&gt; type. Then, we can say that &lt;em&gt;method procs are lambdas&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we know that, how to use the proc to solve the problem of evaluating the &lt;code&gt;current_time&lt;/code&gt; variable many times later?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;

&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:00&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:01&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:02&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post we learned that Ruby methods can be transformed into Procs to be evaluated later. &lt;/p&gt;

&lt;p&gt;In the upcoming series, we will keep learning the fundamentals of &lt;em&gt;Ruby blocks&lt;/em&gt; and see &lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25"&gt;how to use procs as arguments to methods&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>programming</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Tools to improve as a Programmer</title>
      <author>Elijah Trillionz</author>
      <pubDate>Sat, 10 Apr 2021 22:54:09 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/tools-to-improve-as-a-programmer-a7i</link>
      <guid>https://dev.to/elijahtrillionz/tools-to-improve-as-a-programmer-a7i</guid>
      <description>&lt;p&gt;Hello Devs! I have put together some activities to improve daily as a programmer. Be you a &lt;strong&gt;web developer&lt;/strong&gt;, &lt;strong&gt;Front-End&lt;/strong&gt;, &lt;strong&gt;Back-End&lt;/strong&gt;, &lt;strong&gt;Full-Stack&lt;/strong&gt;; whatever you are into, as long as you are coding then this is for you.&lt;/p&gt;

&lt;p&gt;It's all in one &lt;a href="https://discord.gg/K5YNx85pta"&gt;&lt;strong&gt;Discord server&lt;/strong&gt;&lt;/a&gt;. This server has channels for all programmers.&lt;/p&gt;

&lt;p&gt;The primary aim of this server is to make programmers develop and improve on a daily basis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;p&gt;• &lt;strong&gt;Coding Tasks&lt;/strong&gt;: Get access to tasks from our API as often as you want. You can also add tasks if you want.&lt;/p&gt;

&lt;p&gt;Tasks are into different categories, &lt;em&gt;beginners&lt;/em&gt;, &lt;em&gt;intermediates&lt;/em&gt;, and &lt;em&gt;experts&lt;/em&gt;.&lt;br&gt;
I have made a bot to supply you any category you need.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Project challenging&lt;/strong&gt;: Challenge yourself or others in building projects that will improve your confidence and skills. Good thing is you can be challenged as well. I recently challenged myself to build a &lt;strong&gt;NoSQL database Clone with JavaScript Classes&lt;/strong&gt; which I have done.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;100DaysOfCode&lt;/strong&gt;: The 100DaysOfCode is one of the best ways to stick to coding daily and realize your daily achievements.&lt;/p&gt;

&lt;p&gt;With this challenge you dedicate at least an hour of coding daily.&lt;br&gt;
I built a bot to track your progress on this challenge.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;100DaysOfLearning&lt;/strong&gt;: Are you learning a new technology? Taking a new course? And you can't seem to be focused. Well this challenge is for you.&lt;/p&gt;

&lt;p&gt;This challenge will task you to commit at least an hour to learning on a daily basis.&lt;br&gt;
There is also a bot that tracks your progress on this challenge.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Numerous Project Ideas&lt;/strong&gt;: You a beginner? And want to put your learning into practice with some real projects? Then this is for you.&lt;/p&gt;

&lt;p&gt;Be it mini projects like &lt;em&gt;calculator&lt;/em&gt;, &lt;em&gt;calendar&lt;/em&gt; or big projects like a &lt;em&gt;Music app&lt;/em&gt;, we've got you covered.&lt;br&gt;
I am building a bot for this function.&lt;br&gt;
When I am done with the bot, you will be able to add project ideas as well.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Infinite Resources&lt;/strong&gt;: New technologies in town! New courses! Great Books! New Tools! In this server you get to hear it and you get to share it.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Projects&lt;/strong&gt;: You can share your projects for testing and feedback. For collaborations, suggestions etc.&lt;/p&gt;

&lt;p&gt;There are numerous other features and more others to come. Joining this server is completely free, no boost, no pro feature.&lt;/p&gt;

&lt;p&gt;If you want to join. &lt;a href="https://discord.gg/K5YNx85pta"&gt;Click here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>4 Books that are not about computers that made me a good Software Developer</title>
      <author>Jordi Enric</author>
      <pubDate>Sat, 10 Apr 2021 22:29:05 +0000</pubDate>
      <link>https://dev.to/jordienr/4-books-that-are-not-about-computers-that-made-me-a-good-software-developer-2hac</link>
      <guid>https://dev.to/jordienr/4-books-that-are-not-about-computers-that-made-me-a-good-software-developer-2hac</guid>
      <description>&lt;p&gt;I enjoy reading and learning about Software Development but if I spend half my day working as a Software Dev and the other half reading about Software Development I end up burning out and not doing any reading for a while.&lt;/p&gt;

&lt;p&gt;What I do is read about other things. Sometimes it happens that whatever I'm reading about helps me with aspects of my career. These are the books that helped me the most so far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-a-mind-for-numbers-by-barbara-oakley"&gt;
  &lt;/a&gt;
  1. A mind for numbers by Barbara Oakley
&lt;/h2&gt;

&lt;p&gt;If you ever think that you're not "good with numbers" or letters or whatever, read this. It will teach you how you learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-so-good-they-cant-ignore-you-by-cal-newport"&gt;
  &lt;/a&gt;
  2. So good they can't ignore you by Cal Newport
&lt;/h2&gt;

&lt;p&gt;Taught me the value of becoming an expert in something and all the ways it pays off. Motivated me to focus on Frontend Development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-war-of-art-by-steven-pressfield"&gt;
  &lt;/a&gt;
  3. The War of Art by Steven Pressfield
&lt;/h2&gt;

&lt;p&gt;I should read this one once a year. It taught me that the hard part is sitting down to do a job, not doing it itself. If you have procrastination problems I recommend this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-show-your-work-by-austin-kleon"&gt;
  &lt;/a&gt;
  4. Show your work by Austin Kleon
&lt;/h2&gt;

&lt;p&gt;I learned to keep track of the work I was doing and showing it to the world no matter how imperfect it was. Thanks to doing that I got my job as a SD.&lt;/p&gt;

&lt;p&gt;If you know any other books not related directly to software development that helped you please share them :)&lt;/p&gt;

&lt;p&gt;If you liked the article you can &lt;a href="https://twitter.com/intent/user?screen_name=jordienr"&gt;follow me on twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>micro-MVC :: Alternative Web Development Framework</title>
      <author>George Delaportas (ViR4X)</author>
      <pubDate>Sat, 10 Apr 2021 21:29:41 +0000</pubDate>
      <link>https://dev.to/g0d/micro-mvc-alternative-web-development-framework-1o62</link>
      <guid>https://dev.to/g0d/micro-mvc-alternative-web-development-framework-1o62</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtirPMxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koxl5xejnh60qt3oji4n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtirPMxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koxl5xejnh60qt3oji4n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having a solid 20+ years of experience on programming languages, frameworks, utilities, etc. and having seen various approaches to problems, ideas and techniques, I decided to develop an alternative framework for web development that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enterprise-ready&lt;/li&gt;
&lt;li&gt;Dead simple (KISS)&lt;/li&gt;
&lt;li&gt;Extensible with no limits&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;Having very small footprint&lt;/li&gt;
&lt;li&gt;Fast and reliable&lt;/li&gt;
&lt;li&gt;Creative and not super strict&lt;/li&gt;
&lt;li&gt;Able to integrate any other framework/platform&lt;/li&gt;
&lt;li&gt;...and much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all the details check micro-MVC at &lt;a href="https://github.com/g0d/micro-MVC"&gt;https://github.com/g0d/micro-MVC&lt;/a&gt; and read all the critical details in the documentation at &lt;a href="https://github.com/g0d/micro-MVC/tree/master/Documentation"&gt;https://github.com/g0d/micro-MVC/tree/master/Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>mvc</category>
      <category>ajax</category>
    </item>
    <item>
      <title>Update blog to ghost version 4 running in Kubernetes</title>
      <author>Harish Babu</author>
      <pubDate>Sat, 10 Apr 2021 21:11:25 +0000</pubDate>
      <link>https://dev.to/chekkan/update-blog-to-ghost-version-4-running-in-kubernetes-2b43</link>
      <guid>https://dev.to/chekkan/update-blog-to-ghost-version-4-running-in-kubernetes-2b43</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwWzphAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chekkan/image/upload/q_auto:good/ghostv3-kubernetes-ghostv4--2-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwWzphAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chekkan/image/upload/q_auto:good/ghostv3-kubernetes-ghostv4--2-.png" alt="Update blog to ghost version 4 running in Kubernetes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My personal blog site is running on the ghost blogging platform at the time of this writing. Its current running version 3.42.x and there was a new major version released recently and its currently on version 4.2.0. There are guides available on &lt;a href="https://ghost.org/docs/update/"&gt;ghost documentation site&lt;/a&gt; to help make the upgrade when you have installed ghost on a server using the ghost-CLI tooling. However, none exists for ghost running on Kubernetes, or docker containers. &lt;code&gt;ghost-cli&lt;/code&gt; update path seemed desirable compared to the clean install option especially because some database migration might be involved I assumed. Also, I didnt want to re-configure my site with google analytics etc.   &lt;/p&gt;

&lt;p&gt;Follow the initial steps of backing up all the important content as mentioned in &lt;a href="https://ghost.org/docs/update/"&gt;the documentation site&lt;/a&gt;. Then come back here...  &lt;/p&gt;

&lt;p&gt;You will have ssh into the docker container in order to copy the content folder across.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl cp &amp;lt;namespace&amp;gt;/&amp;lt;pod_name&amp;gt;:/var/lib/ghost/content ghost-migration-to-4.x/content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I didn't have much luck copying the theme folder in content. But, I haven't made any changes to the theme using the default Casper theme at present. Make sure run the upgrade check for your theme before progressing any further. Download your existing theme from the Admin site and upload the zipped file into the &lt;a href="https://gscan.ghost.org/"&gt;GScan&lt;/a&gt; website.  &lt;/p&gt;

&lt;p&gt;The way I have the blog setup in Kubernetes is by using the base image &lt;a href="https://hub.docker.com/r/chekkan/ghost-cloudinary"&gt;chekkan/ghost-cloudinary&lt;/a&gt; which builds off the &lt;code&gt;ghost-alpine&lt;/code&gt; image. I have already gone ahead and published version &lt;code&gt;4.2.0&lt;/code&gt; of the docker image.   &lt;/p&gt;

&lt;p&gt;You will need to ssh into the docker container pod and install &lt;code&gt;ghost-cli&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl exec --stdin --tty -n "&amp;lt;namespace&amp;gt;" "&amp;lt;pod_name&amp;gt;" -- /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
ssh into the pod thats running ghost container







&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g ghost-cli@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
install ghost-cli npm package





&lt;p&gt;Make sure your current working directory is where you've installed ghost. For me, its at &lt;code&gt;/var/lib/ghost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I used environment variables in deployment spec file together with Kubernetes secrets to configure my database credentials. For some reason, these were not picked up when I ran &lt;code&gt;ghost config get database.connection.host&lt;/code&gt; command. So, I decided to configure them again manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ghost config --db mysql --dbhost &amp;lt;dbhost&amp;gt; --dbuser &amp;lt;dbuser&amp;gt; \
  --dbpass &amp;lt;dbpass&amp;gt; --dbport &amp;lt;dbport&amp;gt; --dbname &amp;lt;dbname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Update the ghost config values for database





&lt;p&gt;Running the above command will update the &lt;em&gt;config.production.json&lt;/em&gt; file. Review the file to make sure its got the expected values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;su node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
switch user to node





&lt;p&gt;&lt;code&gt;ghost-cli&lt;/code&gt; stops you from updating as a &lt;code&gt;root&lt;/code&gt; user. If you wanted to get back to being a root user again, &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before you can update to version 4, ghost wants you to be in the latest version of the currently installed ghost version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ghost update v3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
updates ghost to the latest version of major version 3







&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ghost update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
updates ghost to the latest version; version 4.2.0 at the time of writing





&lt;p&gt;Once ghost is updated, go ahead and &lt;code&gt;kubectl apply&lt;/code&gt; with your deployment spec file thats updated to the same version of ghost.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>ghost</category>
    </item>
    <item>
      <title>Rails Dependent Destroy</title>
      <author>M Bellucci</author>
      <pubDate>Sat, 10 Apr 2021 21:02:04 +0000</pubDate>
      <link>https://dev.to/delbetu/rails-dependent-destroy-id3</link>
      <guid>https://dev.to/delbetu/rails-dependent-destroy-id3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#dependent-options"&gt;
  &lt;/a&gt;
  Dependent Options
&lt;/h1&gt;

&lt;p&gt;Given:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;dependent: &lt;/span&gt;&lt;span class="no"&gt;XXXXXXX&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what happens when using the existing dependent options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#destroy"&gt;
  &lt;/a&gt;
  destroy
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;*&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                      
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:39:08.099961000 +0000", updated_at: "2021-04-10 13:39:08.099961000 +0000"&amp;gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deleteall"&gt;
  &lt;/a&gt;
  delete_all
&lt;/h2&gt;

&lt;p&gt;:delete  =&amp;gt; u.destroy will call u.posts.delete (callbacks no executed)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                             
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:17:09.423794000 +0000", updated_at: "2021-04-10 13:17:09.423794000 +0000"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destroyasync"&gt;
  &lt;/a&gt;
  destroy_async
&lt;/h2&gt;

&lt;p&gt;It is supposed to delete posts in an async job but for my case this was the behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;*&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                      
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvalidForeignKey&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SQLite3&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ConstraintException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;FOREIGN&lt;/span&gt; &lt;span class="no"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;constraint&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nullify"&gt;
  &lt;/a&gt;
  nullify
&lt;/h2&gt;

&lt;p&gt;:nullify =&amp;gt; user.destroy will try to user.posts.each { |p| p.user = nil } (callbacks no executed)&lt;br&gt;
Will raise an error if column is not nullable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Update&lt;/span&gt; &lt;span class="no"&gt;All&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;UPDATE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;SET&lt;/span&gt; &lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                           
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NotNullViolation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SQLite3&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ConstraintException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;NOT&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;constraint&lt;/span&gt; &lt;span class="ss"&gt;failed: &lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#restrictwithexception"&gt;
  &lt;/a&gt;
  restrict_with_exception
&lt;/h2&gt;

&lt;p&gt;:restrict_with_exception =&amp;gt; u.destroy will do raise ActiveRecord::DeleteRestrictionError if u.posts.any?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Exists&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="no"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;LIMIT&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"LIMIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                              
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DeleteRestrictionError&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Cannot&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;dependent&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;:destroy =&amp;gt; a.destroy will call a.bs.destroy_all&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restrictwitherror"&gt;
  &lt;/a&gt;
  restrict_with_error
&lt;/h2&gt;

&lt;p&gt;:restrict_with_error =&amp;gt; causes an error to be added to the owner if there is an associated object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Exists&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="no"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;LIMIT&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"LIMIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                              
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;                                                                                                                                                                                              
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;003&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;                                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;ActiveModel::Errors:0x00007fc2b209d428 @base=#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:17:09.423794000 +0000", updated_at: "2021-04-10 13:17:09.423794000 +&lt;/span&gt;
&lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;, @errors=[#&amp;lt;ActiveModel::Error attribute=base, type=restrict_dependent_destroy.has_many, options={:record=&amp;gt;"&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="s2"&gt;"}&amp;gt;]&amp;gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>rails</category>
    </item>
  </channel>
</rss>
