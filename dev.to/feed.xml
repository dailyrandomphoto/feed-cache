<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Generic Approach to Consume REST API in Angular</title>
      <author>Nichola Alkhouri</author>
      <pubDate>Tue, 16 Mar 2021 18:51:32 +0000</pubDate>
      <link>https://dev.to/nicholaalkhouri/generic-approach-to-consume-rest-api-in-angular-4poj</link>
      <guid>https://dev.to/nicholaalkhouri/generic-approach-to-consume-rest-api-in-angular-4poj</guid>
      <description>&lt;p&gt;In this article, I will show you how to create a generic solution to Consume REST API in Angular. I will utilize Typescript Generics in combination with Angular HTTPClient service to eliminate any code redundant, be as &lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;DRY&lt;/a&gt; as possible, and follow the &lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;Open–closed principle&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#communicating-with-backend-services-using-httpclient" class="anchor"&gt;
  &lt;/a&gt;
  Communicating with backend services using HTTPClient
&lt;/h2&gt;

&lt;p&gt;Most applications need to communicate with a remote server over the HTTP protocol, in order to perform the basic &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; operations. With Angular, you can use &lt;code&gt;HTTPClient&lt;/code&gt; service to achieve this communication easily. As an example, if you need to manage the Posts of your blog, you may have the following service to handle all the operations on the Post resource:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This solution is simple and clean, and it even follows the best practices according to the official &lt;a href="https://angular.io/guide/http"&gt;Angular Documentation&lt;/a&gt;. However, applications usually have many resources to manage, for our example, we may have users, comments, reviews, etc. Ideally, each of these resources should have a separate service to handle CRUD operations and communicate with the server, at the end we will have UserService, CommentService, ReviewService. Let's take a look at how the CommentService would look like:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Although the above implementation is very common and widely acceptable, it suffers from two cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code redundant (breaking of the DRY principle): If you compare the &lt;code&gt;PostService&lt;/code&gt; and the &lt;code&gt;CommentService&lt;/code&gt; you will notice how redundant the code is.&lt;/li&gt;
&lt;li&gt;Changes in the server-side, or changes in the way to communicate to the server, require changes in many files (in our case we need to change both &lt;code&gt;PostService&lt;/code&gt; and &lt;code&gt;CommentService&lt;/code&gt; files)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#typescript-generics-to-the-rescue" class="anchor"&gt;
  &lt;/a&gt;
  Typescript Generics To The Rescue
&lt;/h2&gt;

&lt;p&gt;To solve the above issues let's go ahead and build the following abstract class which will be the base of all the other services:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The new service class is &lt;code&gt;abstract&lt;/code&gt;, which means it can't be instantiated and used directly, but it needs to be extended by other classes.&lt;/li&gt;
&lt;li&gt;We provide one abstract method &lt;code&gt;getResourceUrl&lt;/code&gt;, The class which extends this abstract class must implement this method, and return the URL of the resource as we will see in the following section.&lt;/li&gt;
&lt;li&gt;This is a Generic Class, it is not tied to a specific type, rather the class which extends this abstract class will define the exact type used.&lt;/li&gt;
&lt;li&gt;It has all the needed CRUD operations which we need and used before in the previous service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now after we have our abstract generic class, whenever we need a new service we can simply extend this class and implement the only one abstract method &lt;code&gt;getResourceUrl&lt;/code&gt;. so the PostService and CommentService will be as the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#server-vs-frontend-model" class="anchor"&gt;
  &lt;/a&gt;
  Server vs Front-end Model
&lt;/h2&gt;

&lt;p&gt;In most applications, the front-end model doesn't match %100 the server-side model. In other words, the REST API will respond with json object that doesn't match exactly the interface or the class defined in the front-end application. In this case, you need a mapping function to convert between server and front-side mode. This sometimes referred to as serializing/deserializing. &lt;/p&gt;

&lt;p&gt;So, let us extend our base class to provide this mapping functionality. To do so I updated the &lt;code&gt;ResourceService&lt;/code&gt; to look as the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;I added two new methods:&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;toServerModel&lt;/code&gt;: to convert from the Front-end model to the Server Model, It accepts the resource generic type &lt;code&gt;T&lt;/code&gt; and return &lt;code&gt;any&lt;/code&gt; (json)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fromServerModel&lt;/code&gt;: to convert from the Server model to the Front-end Model, it accepts a parameter of the type &lt;code&gt;any&lt;/code&gt; which represent the server response, and return the generic type &lt;code&gt;T&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;I provided a default implementation for both of the two methods &lt;code&gt;toServerModel&lt;/code&gt;, &lt;code&gt;fromServerModel&lt;/code&gt;, so in case no mapping needed, the same object returned by the server will be used as a front-end model. Also since I added a  default implementation, the consumer of this service doesn't have to override or even implement these two methods at all.&lt;/li&gt;
&lt;li&gt;In both &lt;code&gt;getList&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; methods, I am using the new method &lt;code&gt;fromServerModel&lt;/code&gt;, to map the server response to the front-end Model.&lt;/li&gt;
&lt;li&gt;In both &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; methods, I am using &lt;code&gt;toServerModel&lt;/code&gt; to map the front-model to the server model before posting the data to the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now to consume the new changes we have two cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is no mapping needed between the server and the front-end model, in this case, we don't have to change anything in the class that extends the &lt;code&gt;resourceService&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There is some kind of mapping needed between the server and the front-end model, all we need to do is to override &lt;code&gt;toServerModel&lt;/code&gt; and &lt;code&gt;fromServerModel&lt;/code&gt; models in the derived class to address our requirement mappings. For example let's assume, that the &lt;code&gt;PostsService&lt;/code&gt; implemented previously needs to map from timestamp to a js Date object, the PostsService implementation would look like the following:&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;To communicate with a server using the HTTP protocol, you need to use the Angular HTTPClient service. In this article, we implemented a generic extendable solution to allow us to achieve this communication. Our solution is clean, &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;, and follows the &lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;Open–closed principle&lt;/a&gt;. We utilized Typescrip Generics, Generic Classes, and we even took into consideration a required mapping between server and front-end model.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>JavaScript Exercises - Conditional Statements</title>
      <author>bo-iliev</author>
      <pubDate>Tue, 16 Mar 2021 16:58:50 +0000</pubDate>
      <link>https://dev.to/boiliev/javascript-exercises-conditional-statements-1jle</link>
      <guid>https://dev.to/boiliev/javascript-exercises-conditional-statements-1jle</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;When you start by learning JavaScript programming basics, it can be quite hard to think of stuff to do to practice your code knowledge skills. Well, don't worry. &lt;/p&gt;

&lt;p&gt;I am going to give you a few coding exercises to practice your code skills. They won't be as hard for some of you, but for those that are only just starting to get into coding, these exercises will be super helpful. They will mainly consist of logical thinking and math solving. The point of this is to focus on the instructions that are given to you and following them.&lt;/p&gt;

&lt;p&gt;These tasks are going to be about &lt;strong&gt;conditional statements&lt;/strong&gt;. You can think of this as your &lt;code&gt;level one&lt;/code&gt; tasks. &lt;/p&gt;

&lt;p&gt;If you enjoy these tasks and want me to make some more &lt;code&gt;levels&lt;/code&gt;, let me know so that I can bring them to you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-speed-test" class="anchor"&gt;
  &lt;/a&gt;
  Task #1 - Speed Test
&lt;/h1&gt;

&lt;p&gt;You need to write a function that receives an argument. This argument is going to be our speed.  If our speed meets a certain condition, it should return a certain string.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If our speed is under 10 or equal - return &lt;code&gt;slow&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If our speed is over 10 and up to 40 - return &lt;code&gt;average&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If our speed is over 40 and is up to 100 - return &lt;code&gt;fast&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If our speed is over 100 and up to 180 - return &lt;code&gt;very fast&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If our speed is over 180 - return &lt;code&gt;extremely fast&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is how the output should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1
&amp;lt;------------------------------&amp;gt;
speed(30)       //Input
average         //Output

Example 2
&amp;lt;------------------------------&amp;gt;
speed(97)       //Input
fast            //Output

Example 3
&amp;lt;------------------------------&amp;gt;
speed(180)       //Input
very fast        //Output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-bonus-score" class="anchor"&gt;
  &lt;/a&gt;
  Task #2 - Bonus Score
&lt;/h1&gt;

&lt;p&gt;You will be given one number - your score. This score will get some bonus points if some conditions are met. You have to write a function which counts all the bonus points which this score gets and  return the new score (&lt;code&gt;your score + bonus points&lt;/code&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the score is under 100 or equal, the bonus points are &lt;code&gt;10&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the score is over 100, the bonus points are &lt;code&gt;30%&lt;/code&gt; from the score.&lt;/li&gt;
&lt;li&gt;If the score is over 1000, the bonus points are &lt;code&gt;20%&lt;/code&gt; from the score.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The extra bonus points(added after the previous bonus point are already applied):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the score is &lt;code&gt;even&lt;/code&gt;, you get +4 bonus points.&lt;/li&gt;
&lt;li&gt;If the score ends on a &lt;code&gt;5&lt;/code&gt;, you get +5 bonus points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to return the number of the bonus points and the new score. Here are some examples of how the output should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1
&amp;lt;------------------------------&amp;gt;
score(30);  // Original Score
14          // Bonus Points
44          // New Score

Example 2
&amp;lt;------------------------------&amp;gt;
score(3343) //Original Score
668.6      //Bonus Points
4011.6     //New Score
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-3-time-25" class="anchor"&gt;
  &lt;/a&gt;
  Task #3 - Time + 25
&lt;/h1&gt;

&lt;p&gt;In this task, you have to write a function, which receives an &lt;code&gt;array as an argument with two string numbers in it&lt;/code&gt;. The first number is the hours, and the second is the minutes. Our time will be in the 24-hour time clock. Our function will calculate what the time will be in 25 minutes. &lt;/p&gt;

&lt;p&gt;You have to make the strings into numbers. Your output for the hours should always be between &lt;code&gt;0-23&lt;/code&gt; and your minutes should always be between &lt;code&gt;0-59&lt;/code&gt;. Your minutes should always be with &lt;code&gt;two digits&lt;/code&gt;. This means that in some cases it should start with a 0.&lt;/p&gt;

&lt;p&gt;In&lt;/p&gt;

&lt;p&gt;Here are some examples of how your output should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1
&amp;lt;------------------------------&amp;gt;
time(['16', '15'])  //Input
16:40               //Output

Example 2
&amp;lt;------------------------------&amp;gt;
time(['3', '58'])   //Input
4:23                //Output

Example 3
&amp;lt;------------------------------&amp;gt;
time(['23', '52'])  //Input
0:17                //Output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;These are the little fun exercises to practice your &lt;code&gt;if&lt;/code&gt; statement skill. If you have any feedback or you need some help, be sure to comment down below. I'd be happy to chat and help! I hope you liked it and if you want me to do some more of these let me know.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 16 Mar 2021 16:54:23 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-2gd4</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-2gd4</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diy-react-router" class="anchor"&gt;
  &lt;/a&gt;
  DIY React Router
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/thomascullen"&gt;@thomascullen&lt;/a&gt;
 walks us through building a simplified version of React-router, based on the newer v6 APIs 🙌 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thomascullen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzgTQNVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tj1UaA5z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/34656/a8884c47-eb5d-4608-98eb-3f8233b9451f.jpeg" alt="thomascullen image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thomascullen/build-a-react-router-clone-from-scratch-38dp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a react-router clone from scratch&lt;/h2&gt;
      &lt;h3&gt;Thomas Cullen ・ Mar 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-to-make-a-webrtc-video-chat-setup-work-in-a-production-environment" class="anchor"&gt;
  &lt;/a&gt;
  How to make a WebRTC video chat setup work in a production environment
&lt;/h2&gt;

&lt;p&gt;"Our path to functioning video chat was long and winding; I want to outline what we learned to save other people from spending the same time and effort we did to come to that understanding."&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="comment-mentioned-user" href="https://dev.to/lazerwalker"&gt;@lazerwalker&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Super interesting and helpful!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lazerwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pfrs4EKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ABVWSFac--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/279624/fe461835-3dcc-4370-99f3-ce5154d7bac4.png" alt="lazerwalker image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lazerwalker/why-video-chat-is-a-hard-technical-problem-43gj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Video Chat is a Hard Technical Problem&lt;/h2&gt;
      &lt;h3&gt;Em Lazer-Walker ・ Mar 12 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webrtc&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#sometimes-tutorials-arent-enough" class="anchor"&gt;
  &lt;/a&gt;
  Sometimes tutorials aren't enough
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/vascoalramos"&gt;@vascoalramos&lt;/a&gt;
 shares the first installment in their periodic log of learning the concepts and tools behind Kubernetes orchestration. This is a great supplement to all those Kubernetes tutorials you've bookmarked!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/vascoalramos" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mRwiVheq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ofrxEHpQ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/325980/05f84796-7065-4430-8194-5b758d1b67a3.jpg" alt="vascoalramos image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/vascoalramos/learning-kubernetes-concepts-part-1-pb0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learning Kubernetes - Part I: Introduction&lt;/h2&gt;
      &lt;h3&gt;Vasco Ramos ・ Mar 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kubernetes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#no-regrets-just-lessons" class="anchor"&gt;
  &lt;/a&gt;
  No regrets, just lessons
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/abdulbasit313"&gt;@abdulbasit313&lt;/a&gt;
 shares some insights from the past two years they've spent learning software development. It's always helpful to learn from others' "mistakes". &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abdulbasit313" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4XTNBOX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uT-vgE3R--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/143883/09804435-2bdd-49cd-aef8-8184987bd80a.jpg" alt="abdulbasit313 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abdulbasit313/5-mistakes-i-wish-i-didn-t-make-as-a-self-taught-developer-gjk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Mistakes I Wish I Didn't Make As A Self-Taught Developer&lt;/h2&gt;
      &lt;h3&gt;Abdul Basit ・ Mar 13 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#be-a-twitchstar-with-this-setup" class="anchor"&gt;
  &lt;/a&gt;
  Be a TwitchStar with this setup
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt;
 was kind enough to share how exactly they set up their Twitch stream for maximized quality and efficiency. 🤩 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt="whitep4nth3r image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/my-twitch-live-coding-setup-in-obs-4he0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My Twitch live coding setup in OBS&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor ・ Mar 14 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#twitch&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#easybase-for-easier-project-backend-processes" class="anchor"&gt;
  &lt;/a&gt;
  Easybase for easier project backend processes.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/mbagley1020"&gt;@mbagley1020&lt;/a&gt;
 explains how the React library for Easybase.io provides developers with the ability to streamline their project backend processes visually. Find out how the free-tier makes serverless frameworks and scalable databases more accessible for all kinds of developers.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mbagley1020" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RT-NU0ZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--q38hHRdz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/507252/61203df5-4717-401d-937e-bb209c395e92.jpeg" alt="mbagley1020 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mbagley1020/adding-serverless-user-authentication-to-your-react-projects-jbe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Adding Serverless User Authentication to Your React Projects&lt;/h2&gt;
      &lt;h3&gt;Michael Bagley ・ Mar 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#reactnative&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#its-ok-to-hesitate-along-the-way" class="anchor"&gt;
  &lt;/a&gt;
  It's ok to hesitate along the way
&lt;/h2&gt;

&lt;p&gt;This diary entry-esque video and article by &lt;a class="comment-mentioned-user" href="https://dev.to/kethmars"&gt;@kethmars&lt;/a&gt;
 shares insights for those of you who are looking to get more serious about software development — or those of you who want to reach the next level in your career.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kethmars" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WcjFDq4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4W84d8qj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/191155/4f698e5c-1c92-4a97-b3bb-b4afa81e9e26.jpg" alt="kethmars image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kethmars/my-first-4-years-as-a-professional-developer-in-a-dream-company-and-why-i-left-166d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My first 4 years as a professional developer in a dream company. And why I left.&lt;/h2&gt;
      &lt;h3&gt;kethmars ・ Mar 13 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#startup&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Monday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Getting started with Node JS</title>
      <author>Pooja Gupta</author>
      <pubDate>Tue, 16 Mar 2021 15:27:13 +0000</pubDate>
      <link>https://dev.to/poojagupta/getting-started-with-node-js-5f4l</link>
      <guid>https://dev.to/poojagupta/getting-started-with-node-js-5f4l</guid>
      <description>&lt;p&gt;Hey folks! I just started learning node JS and thought to share with all of you who are new to node JS and wanted to learn node JS.&lt;br&gt;
so we are gonna see little insights of node JS and after that we will write our first code in node JS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-what-is-node-js" class="anchor"&gt;
  &lt;/a&gt;
  So What is Node JS?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js is a cross-platform JavaScript runtime environment that allows developers to build server-side and network applications with JavaScript.&lt;/li&gt;
&lt;li&gt;NPM is a package manager which comes bundled with node JS which helps in downloading packages into a node_modules folder.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use npm init command to initialize your project which will ask basic information about your project and creates one file package.json which will have all information you provide.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So package.json file is face of your project which will contain all the information about your project as well as all those dependencies needed for your project with their version name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Their are a lot of frameworks available which will ease our work while writing our code like express, sails, Hapi, Koa etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But first let we use simple Node JS without any framework to understand it in depth.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In your folder create index.js and do npm init after that write this code in index.js file and do node index.js from the command line from the same path where your index file exists.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require("http");
const port = 8000;

function requestHandler(request, response) {
  console.log("Request received.");
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.write("Welcome to node.js World");
  response.end();
}

const server = http.createServer(requestHandler);
server.listen(port, function(err){
    if(err){
        console.log(err);
        return;
    }

    console.log("Server is up and running:", port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case, on each and every url, you found “welcome to node.js world”. Now we will send different response, according to requested url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require("http");
const port = 8000;

function requestHandler(req, res) {
    if (req.url == "/") {
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end("Welcome to the homepage!");
    }

    // About page
    else if (req.url == "/contact") {
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end("Welcome to the contact page!");
    }

    // 404'd!
    else {
        res.writeHead(404, { "Content-Type": "text/plain" });
        res.end("404 error! File not found.");
    }
}

const server = http.createServer(requestHandler);
server.listen(port, function(err){
    if(err){
        console.log(err);
        return;
    }

    console.log("Server is up and running:", port);
});
console.log("Server has started.");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we track requested url and respectively show that content on that url, and handle 404 condition in all other cases. &lt;br&gt;
I hope this article helps you getting started with node JS, don't forget to tell me in comment section how much you liked this post and in case any query reach me out !&lt;br&gt;
Happy Coding!&lt;/p&gt;

</description>
      <category>node</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>100 underline/overlay  animations | The ultimate CSS collection 🥇</title>
      <author>Temani Afif</author>
      <pubDate>Tue, 16 Mar 2021 15:11:39 +0000</pubDate>
      <link>https://dev.to/afif/100-underline-overlay-animation-the-ultimate-css-collection-4p40</link>
      <guid>https://dev.to/afif/100-underline-overlay-animation-the-ultimate-css-collection-4p40</guid>
      <description>&lt;p&gt;Get tired searching animations for your menu items and links? Search no more! Here is a list of more than 100 different animations. From the simple one to the more complex one, you will for sure find what you want.&lt;/p&gt;

&lt;p&gt;No SVG, No JS, No extra tag, No pseudo element, No keyframes ... All of them are done using backgrounds, transition and only one element. Simply add a class and enjoy.&lt;/p&gt;

&lt;p&gt;I am not relying on pseudo element so you can easily use them with elements like &lt;code&gt;input&lt;/code&gt; (where we cannot have pseudo element).&lt;/p&gt;

&lt;p&gt;In order to understand the logic of each animation, I highly recommend my previous article about &lt;code&gt;background-position&lt;/code&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/all-you-need-to-know-about-background-position-3aac" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;All you need to know about background-position&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Mar 13 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#table-of-content" class="anchor"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-basic"&gt;The Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-continuous"&gt;The Continuous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-double"&gt;The Double&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-two-steps"&gt;The Two Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-unexpected"&gt;The Unexpected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-rounded"&gt;The Rounded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fading"&gt;The Fading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-infinite"&gt;The Infinite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-all-sides"&gt;The All Sides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-thick"&gt;The Thick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-sliding"&gt;The Sliding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fancy"&gt;The Fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-inverted"&gt;The Inverted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-3d"&gt;The 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-basic" class="anchor"&gt;
  &lt;/a&gt;
  The Basic
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/oNYOpBe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;currentColor&lt;/code&gt; will use the color defined inside &lt;code&gt;color&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I am using CSS variables to make the code shorter. &lt;code&gt;var(--d, 0)&lt;/code&gt; means that the default value is &lt;code&gt;0&lt;/code&gt; then I change it on hover.&lt;/li&gt;
&lt;li&gt;The syntax &lt;code&gt;0 100% /var(--d, 0) 3px&lt;/code&gt; means &lt;code&gt;background-position / background-size&lt;/code&gt;. We adjust the &lt;code&gt;3px&lt;/code&gt; to control the height/thickness of the line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-continuous" class="anchor"&gt;
  &lt;/a&gt;
  The Continuous
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKNYZoK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-double" class="anchor"&gt;
  &lt;/a&gt;
  The Double
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJbGzrG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-two-steps" class="anchor"&gt;
  &lt;/a&gt;
  The Two Steps
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWNQZJa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-unexpected" class="anchor"&gt;
  &lt;/a&gt;
  The Unexpected
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYyMdKP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-rounded" class="anchor"&gt;
  &lt;/a&gt;
  The Rounded
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYbvQLX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fading" class="anchor"&gt;
  &lt;/a&gt;
  The Fading
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWGPQxp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-infinite" class="anchor"&gt;
  &lt;/a&gt;
  The Infinite
&lt;/h3&gt;

&lt;p&gt;Keep the hover for too long here.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWGPQzg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-all-sides" class="anchor"&gt;
  &lt;/a&gt;
  The All Sides
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ZEBZxEj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-thick" class="anchor"&gt;
  &lt;/a&gt;
  The Thick
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKNYoMo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-sliding" class="anchor"&gt;
  &lt;/a&gt;
  The Sliding
&lt;/h3&gt;

&lt;p&gt;The below requires us to know the width of the element so it's more suitable for monospace fonts where we can use the &lt;code&gt;ch&lt;/code&gt; unit&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/t_afif/embed/PobgRJj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fancy" class="anchor"&gt;
  &lt;/a&gt;
  The Fancy
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BaQEVqz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;sup&gt;(2) and (5) use some hardcoded values that need to be adjusted based on the element width&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-inverted" class="anchor"&gt;
  &lt;/a&gt;
  The Inverted
&lt;/h3&gt;

&lt;p&gt;The below doesn't work on Firefox due to a &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1571244"&gt;known bug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzpMvbz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-3d" class="anchor"&gt;
  &lt;/a&gt;
  The 3D
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; the below uses some advanced CSS but I considered CSS variables to make it easy to control&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzpMjWy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Tell me what do you think and which one is your favorite. 👇&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>How to Add Tailwind CSS to Your Angular Application 2021</title>
      <author>Godwin Daniel</author>
      <pubDate>Tue, 16 Mar 2021 14:47:52 +0000</pubDate>
      <link>https://dev.to/godwindaniel10/how-to-add-tailwind-css-to-your-angular-application-2021-32gj</link>
      <guid>https://dev.to/godwindaniel10/how-to-add-tailwind-css-to-your-angular-application-2021-32gj</guid>
      <description>&lt;p&gt;According to the official documentation, Tailwind CSS is a utility-first CSS framework for rapidly building custom user interfaces. I like to think of it as a cool way to write inline styling and achieve an awesome interface without writing a single line of your own CSS.   Angular, on the other hand, is a platform that allows you to build high-quality enterprise applications. Combine Angular with Tailwind CSS and you have a perfect stack for building top-notch web applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, I will walk you through how you can add &lt;br&gt;
       Tailwind CSS to your Angular application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🚩  This article assumes that you're using the Angular CLI &lt;br&gt;
       version 11.2.0 or higher.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#1-generate-a-new-angular-application" class="anchor"&gt;
  &lt;/a&gt;
  1. Generate a new Angular application
&lt;/h1&gt;

&lt;p&gt;Let's start by creating a new Angular project using the ng new command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng new my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the CLI asks you "which stylesheet format would you like to use?" choose CSS because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With Tailwind, you don't need a CSS preprocessor like Sass. &lt;br&gt;
 You'll rarely need to write custom CSS anyway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your CSS will compile much faster because it won't need to &lt;br&gt;
 pass through multiple compilation pipelines.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-install-the-needed-tailwind-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  2. Install the needed tailwind dependencies
&lt;/h1&gt;

&lt;p&gt;Now, install the required dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng add @ngneat/tailwind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;follow the instructions below:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? Would you like to enable dark mode?

     none
     class
     media
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;select &lt;strong&gt;class&lt;/strong&gt;  then click (enter)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? Would you like to use tailwind directives and functions in 
     component styles? (might increase build time) (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? What @tailwindcss plugins do you want to enable?

     ⭕ aspect-ratio
     ⭕ forms ✔
     ⭕ Line-clamp
     ⭕ typography ✔
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;select &lt;strong&gt;forms&lt;/strong&gt; &amp;amp; &lt;strong&gt;typography&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The command above install all needed packages and update the &lt;br&gt;
  project files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#3-enjoy" class="anchor"&gt;
  &lt;/a&gt;
  3. Enjoy
&lt;/h1&gt;

&lt;p&gt;You can now start your Angular application and enjoy using Tailwind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng serve --open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;code&gt;If you enjoyed this article, follow [@CodeBase__](https://twitter.com/CodeBase__) on Twitter for more content like this.&lt;/code&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>angular</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to publish an unscoped npm package to Github Package Registry</title>
      <author>Akinwunmi Aguda</author>
      <pubDate>Tue, 16 Mar 2021 13:25:24 +0000</pubDate>
      <link>https://dev.to/akinaguda/how-to-publish-an-unscoped-npm-package-to-github-package-registry-19mg</link>
      <guid>https://dev.to/akinaguda/how-to-publish-an-unscoped-npm-package-to-github-package-registry-19mg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-scenario" class="anchor"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h2&gt;

&lt;p&gt;I created a project, bootstrapped with &lt;a href="https://tsdx.io/#quick-start"&gt;tsdx&lt;/a&gt;, and deployed it to npm. I achieved this by logging into npm in my terminal and running&lt;br&gt;
&lt;code&gt;npm publish&lt;/code&gt; or &lt;code&gt;npm publish --access public&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-challenge" class="anchor"&gt;
  &lt;/a&gt;
  The challenge
&lt;/h2&gt;

&lt;p&gt;Subsequently, I decided to publish to the &lt;a href="https://github.com/features/packages"&gt;github package registry&lt;/a&gt;. That's when I realized that to publish to the github registry, the name of my package needed to be scoped (unlike with npm where this is optional).&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/scope"&gt;npm&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scopes are a way of grouping related packages together, and also affect a few things about the way npm treats the package.&lt;/p&gt;

&lt;p&gt;Each npm user/organization has their own scope, and only you can add packages in your scope. This means you don't have to worry about someone taking your package name ahead of you. Thus it is also a good way to signal official packages for organizations. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In summary, scoping a package allows two packages with the same name to co-exist, as long as they are scoped differently. Typically, a scoped package would be have the &lt;code&gt;name&lt;/code&gt; field in your &lt;code&gt;package.json&lt;/code&gt; be something like: &lt;code&gt;@someuser/common-package-name&lt;/code&gt; or &lt;code&gt;@someorganization/common-package-name&lt;/code&gt; but mine was more like &lt;code&gt;common-package-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that your package does not have to be &lt;code&gt;@someuser&lt;/code&gt; on github package registry. It could be &lt;code&gt;@anything&lt;/code&gt; but in my case, it seemed like a good idea to just scope it to my username.&lt;/p&gt;

&lt;p&gt;Naturally this would not be a problem if your npm package was already scoped like &lt;code&gt;@someuser/common-package-name&lt;/code&gt; on npm. In my case it was not&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;After some googling, I found this &lt;a href="https://github.com/formium/tsdx/issues/854"&gt;closed issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, &lt;a href="https://github.com/formium/tsdx/issues/854#issuecomment-688474830"&gt;alehechka&lt;/a&gt; created a great github action to so solve this problem.&lt;/p&gt;

&lt;p&gt;The only issue with it was, if your github username had any uppercase characters in it, it will not successfully deploy to the github package registry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
While you could manually do all of this each time you want to deploy, using github actions would be a better and more efficient way to do this.&lt;/p&gt;

&lt;p&gt;So, I made some slight modifications to his solution, and with just two steps, you could deploy your package to the github registry and npm.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: add this to your package.json
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"publishConfig": {
   "registry": "https://registry-url"
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Step 2: create a workflow file. For instance, &lt;strong&gt;deploy.yml&lt;/strong&gt; and paste in:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: npm-publish
on:
  push:
    branches:
      - master # Change this to your default branch
jobs:
  npm-publish:
    name: npm-publish
    runs-on: ubuntu-latest

    steps:
      # Publish to Node Package Manager
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Setup Node.js (NPM)
        uses: actions/setup-node@master
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Use cached node_modules
        uses: actions/cache@master
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Update Publish Config
        run: sed -i 's^registry-url^registry.npmjs.org^' package.json

      - name: Publish to NPM
        run: npm publish --access public
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  gpr-publish:
    name: gpr-publish
    runs-on: ubuntu-latest

    steps:
      # Publish to GitHub Package Registry
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Store lowercase actor name
        run: |
          echo 'actor_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
          echo ${{ github.actor }} | tr "A-Z" "a-z" &amp;gt;&amp;gt; $GITHUB_ENV
          echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV

      - name: Store package name
        run: |
          echo 'package_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
          grep -Po '"name": *\K"[^"]*"' package.json | grep -oP '"\K[^"\047]+(?=["\047])' &amp;gt;&amp;gt; $GITHUB_ENV
          echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV

      - name: Setup Node.js (GPR)
        uses: actions/setup-node@master
        with:
          node-version: '12.x'
          registry-url: https://npm.pkg.github.com/
          scope: '${{ env.actor_name }}'

      - name: Use cached node_modules
        uses: actions/cache@master
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Update Package Name
        run: |
          sed -i 's,"name": "${{ env.package_name }}","name": "@${{ env.actor_name }}/${{ env.package_name }}",' package.json
          cat package.json

      - name: Update Publish Config
        run: |
          sed -i 's^registry-url^npm.pkg.github.com/@${{ env.actor_name }}^' package.json
          cat package.json

      - name: Publish to GitHub Package Registry
        run: npm publish --access public
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's really all you need.&lt;/p&gt;

&lt;p&gt;The changes I made to &lt;a href="https://github.com/formium/tsdx/issues/854#issuecomment-688474830"&gt;this&lt;/a&gt; are:&lt;/p&gt;

&lt;p&gt;Adding the following script to convert the username to lowercase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Store lowercase actor name
   run: |
    echo 'actor_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
    echo ${{ github.actor }} | tr "A-Z" "a-z" &amp;gt;&amp;gt; $GITHUB_ENV
    echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added this to get the package name from the package.json and store in an environment variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Store package name
   run: |
    echo 'package_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
    grep -Po '"name": *\K"[^"]*"' package.json | grep -oP '"\K[^"\047]+(?=["\047])' &amp;gt;&amp;gt; $GITHUB_ENV
    echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then updated to the github action to change the name of the package in the package.json, to a scoped version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Update Package Name
   run: |
    sed -i 's,"name": "${{ env.package_name }}","name": "@${{ env.actor_name }}/${{ env.package_name }}",' package.json
    cat package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and finally, I switched out every use of &lt;code&gt;${{ github.actor }}&lt;/code&gt; with &lt;code&gt;@${{ env.actor_name }}&lt;/code&gt; which is the author's name in lowercase.&lt;/p&gt;

</description>
      <category>npm</category>
      <category>github</category>
      <category>actions</category>
      <category>tsdx</category>
    </item>
    <item>
      <title>Rails validations: unique within a certain scope</title>
      <author>matt swanson</author>
      <pubDate>Tue, 16 Mar 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/rails-validations-unique-within-a-certain-scope-41p2</link>
      <guid>https://dev.to/swanson/rails-validations-unique-within-a-certain-scope-41p2</guid>
      <description>&lt;p&gt;It’s a great idea to make your database and application validations match. If you have &lt;code&gt;validates :name, presence: true&lt;/code&gt; in your model, you should pair it with a &lt;code&gt;not null&lt;/code&gt; database constraint. Unique validations should be paired with a &lt;code&gt;UNIQUE&lt;/code&gt; database index.&lt;/p&gt;

&lt;p&gt;In real-world applications, you often have more complicated validations, but you should continue this practice whenever you can.&lt;/p&gt;

&lt;p&gt;Something I encounter regularly is the need to have records that are unique, but within a certain scope.&lt;/p&gt;

&lt;p&gt;Imagine you were building a typical project management tool. You might want &lt;code&gt;Project&lt;/code&gt;s to have a unique name so they can be distinguished within your UI – but you don’t want the name to be globally unique. If I make a project called “Onboarding”, another customer should not be restricted from using that name as well.&lt;/p&gt;

&lt;p&gt;Luckily, Rails has got us covered with a handy feature called &lt;strong&gt;validation scopes&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;scope&lt;/code&gt; option to the Rails uniqueness validation rule allows us to specify additional columns to consider when checking for uniqueness.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Project&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:account&lt;/span&gt;

  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:tasks&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;scope: :account_id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This rule says that “the name of this project must unique, within the scope of this account”. In other words, the combination of a &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;account_id&lt;/code&gt; must be unique – but you can have projects with the same name in different accounts.&lt;/p&gt;

&lt;p&gt;As we discussed earlier, you really want to back-up your application level validations with database constraints.&lt;/p&gt;

&lt;p&gt;In this case, you’ll want to do a multiple column index. You can do this in a normal Rails migration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateProject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:projects&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:projects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:account_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#options" class="anchor"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;p&gt;You can pass multiple columns to &lt;code&gt;scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you were building a dining app and wanted to enforce that a guest could only have one reservation at a restaurant per day.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Reservation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:guest&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:restaurant&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may wish to change the message since the defaults error message will be fairly spartan: “{field} has already been taken”&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"Only one reservation per guest per day is permitted"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: In PostgreSQL, the default limit for index names is 63 characters so you may find yourself needing to change the index name if your model or column names are longer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:reservations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"idx_reserveration_guest_date_uniq"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Rails API: &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of"&gt;Uniqueness Validations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PostgreSQL Docs: &lt;a href="https://www.postgresql.org/docs/current/ddl-constraints.html"&gt;Postgres Constraints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySql Docs: &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html"&gt;Multi-column Indexes&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hibernate Naming Strategies: JPA Specification vs Spring Boot Opinionation</title>
      <author>Aleksey Stukalov</author>
      <pubDate>Tue, 16 Mar 2021 12:59:34 +0000</pubDate>
      <link>https://dev.to/aleksey/hibernate-naming-strategies-jpa-specification-vs-spring-boot-opinionation-m1c</link>
      <guid>https://dev.to/aleksey/hibernate-naming-strategies-jpa-specification-vs-spring-boot-opinionation-m1c</guid>
      <description>&lt;p&gt;Each time we inject a dependency into our project, we sign a contract, which often has lots of hidden things "written in the fine print". In this article, we will take a look at something you could miss when signing a tripartite contract between you, Hibernate and Spring Boot. We will talk about naming strategies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defaults-in-jpa-naming" class="anchor"&gt;
  &lt;/a&gt;
  Defaults in JPA Naming
&lt;/h2&gt;

&lt;p&gt;The ultimate rule about defaults: they must be intuitive. Let's check if this rule applies to a standard Spring Boot application with default configuration using Hibernate as a JPA implementation. Imagine you have an entity &lt;em&gt;“PetType”&lt;/em&gt;. Let’s guess what table name in the database it is associated with.&lt;/p&gt;

&lt;p&gt;First example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetType&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// fields omitted&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To me, the most intuitive table name would be the class name, which is &lt;code&gt;PetType&lt;/code&gt;. Running a test against PostgreSQL we find out that the associated table name is actually &lt;code&gt;pet_type&lt;/code&gt;.&lt;br&gt;
Let’s set the name explicitly using &lt;code&gt;@Table&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;
&lt;span class="nd"&gt;@Table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"PetType"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetType&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// fields omitted&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time we expect to see PetType for sure, but if we run the test… &lt;code&gt;pet_type&lt;/code&gt; again!&lt;/p&gt;

&lt;p&gt;Well, let's wrap the table name in quotes. This should keep not only the defined name but also the case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;
&lt;span class="nd"&gt;@Table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\"PetType\""&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetType&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// fields omitted&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, our expectations were wrong, and we see &lt;code&gt;“pet_type”&lt;/code&gt;, but now in quotes!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hibernate-naming-strategies" class="anchor"&gt;
  &lt;/a&gt;
  Hibernate Naming Strategies
&lt;/h2&gt;

&lt;p&gt;Googling &lt;em&gt;"jpa entity default table name"&lt;/em&gt; you’ll most probably stumble onto the following &lt;a href="https://en.wikibooks.org/wiki/Java_Persistence/Tables#:~:text=The%20JPA%20default%20table%20name,a%20column%20in%20the%20table."&gt;result&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The JPA default table name is the name of the class (minus the package) with the first letter capitalized. Each attribute of the class will be stored in a column in the table. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is exactly what we expected to see in the first example, isn't it? Obviously, something breaks the standard.&lt;/p&gt;

&lt;p&gt;Let's dive deeper into Hibernate. According to the documentation, there are two interfaces responsible for naming your tables, columns etc. in Hibernate: &lt;code&gt;ImplicitNamingStrategy&lt;/code&gt; and &lt;code&gt;PhysicalNamingStrategy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ImplicitNamingStrategy&lt;/code&gt; is in charge of naming all objects that were not explicitly named by a developer: e.g. entity name, table name, column name, index, FK etc. The resulting name is called the logical name, it is used internally by Hibernate to identify an object. It is not the name that gets put into the DB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PhysicalNamingStrategy&lt;/code&gt; provides the actual physical name used in the DB based on the logical JPA object name. &lt;strong&gt;Effectively, this means that using Hibernate you cannot specify database object names directly, but only logical ones.&lt;/strong&gt; To have a better understanding of what's happening under the hood, see the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ckisD_SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s222274kavjwy1z1douf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckisD_SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s222274kavjwy1z1douf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hibernate default implementations of these interfaces are &lt;code&gt;ImplicitNamingStrategyJpaCompliantImpl&lt;/code&gt; and &lt;code&gt;PhysicalNamingStrategyStandardImpl&lt;/code&gt;. The former generates logical names in accordance with the JPA specification, and the latter uses them as physical names without any modifications. This is best described in the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JPA defines inherent rules about implicit logical name determination. If JPA provider portability is a major concern, or if you really just like the JPA-defined implicit naming rules, be sure to stick with &lt;code&gt;ImplicitNamingStrategyJpaCompliantImpl&lt;/code&gt; (the default).&lt;br&gt;
Also, JPA defines no separation between logical and physical name. Following the JPA specification, the logical name is the physical name. If JPA provider portability is important, applications should prefer not to specify a &lt;code&gt;PhysicalNamingStrategy&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, our application shows different behaviour. And this is why. Spring Boot overrides Hibernate default implementations for both interfaces and uses &lt;code&gt;SpringImplicitNamingStrategy&lt;/code&gt; and &lt;code&gt;SpringPhysicalNamingStrategy&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Effectively, &lt;code&gt;SpringImplicitNamingStrategy&lt;/code&gt; copies the behaviour of &lt;code&gt;ImplicitNamingStrategyJpaCompliantImpl&lt;/code&gt; with only a minor difference in join table naming. So, it must be &lt;code&gt;SpringPhysicalNamingStrategy&lt;/code&gt; that produces the results we’ve seen. The &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-configure-hibernate-naming-strategy"&gt;documentation&lt;/a&gt; states the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, Spring Boot configures the physical naming strategy with &lt;code&gt;SpringPhysicalNamingStrategy&lt;/code&gt;. This implementation provides the same table structure as Hibernate 4: all dots are replaced by underscores and camel casing is replaced by underscores as well. Additionally, by default, all table names are generated in the lower case. For example, a &lt;code&gt;TelephoneNumber&lt;/code&gt; entity is mapped to the &lt;code&gt;telephone_number&lt;/code&gt; table.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, it always transforms &lt;em&gt;camelCase&lt;/em&gt; and &lt;em&gt;PascalCase&lt;/em&gt; to &lt;em&gt;snake_case&lt;/em&gt;. In fact, using it isn’t possible to work with &lt;em&gt;non_snake_case&lt;/em&gt; at all. Personally, I would never use &lt;em&gt;camelCase&lt;/em&gt; or &lt;em&gt;PascalCase&lt;/em&gt; for naming database objects, but there are DB admins who would. If your Spring Boot application deals with a third-party database where at least one table or column is defined in a pascal or camel case, the default Spring Boot setup will not work for you. So, make sure the used physical naming strategy supports the given database naming convention. Learn how to change the default naming strategy in this article or, if required, learn how to provide your own implementation here.&lt;/p&gt;

&lt;p&gt;So, Hibernate complies with the JPA spec and Spring Boot doesn’t. This may look like a bug, but Spring Boot claims to be an opinionated framework. In other words, it has the full right to apply its own opinion over all standards and specs of the technology used under the hood. For a developer this means the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Opinionation may override any specification. In other words, specs and standards state how it should be, while the used implementation defines what it actually is.&lt;/li&gt;
&lt;li&gt;If something even works by default, you should always learn what this default is and how exactly it works.&lt;/li&gt;
&lt;li&gt;Defaults may change with library version upgrade, which can lead to unpredictable side effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The magic of default configurations may work until you hit some unexpected behaviour. To avoid such risk, you may prefer explicit definition to implicit use of defaults. So, in our case the recommendation would be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Always name your JPA objects explicitly, so that no Implicit Naming Strategy affects your code&lt;/li&gt;
&lt;li&gt;Use the &lt;em&gt;snake_case&lt;/em&gt; for columns, tables, indexes and other JPA objects names in order to avoid their transformation by any implementation of the Physical Naming Strategy&lt;/li&gt;
&lt;li&gt;In case of &lt;em&gt;snake_case&lt;/em&gt; doesn't work for you (e.g. using a legacy database), set Physical Naming Strategy to &lt;code&gt;PhysicalNamingStrategyStandardImpl&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Explicit naming of JPA objects will also prevent database schema from unwanted changes in case of an entity class or a field name refactoring.&lt;/p&gt;

&lt;p&gt;You may notice that solving potential problems in runtime we simply transfer responsibilities to developers by introducing naming conventions. Now we need to make sure that all developers follow the same rules. This can be automated by shifting these responsibilities further to development tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GIrx3sVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny5a139srcz4uu3uk2p4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GIrx3sVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny5a139srcz4uu3uk2p4.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, if you use IntelliJ IDEA, you may try &lt;a href="https://www.jpa-buddy.com/"&gt;JPA Buddy&lt;/a&gt; – a plugin intended to help developers with JPA, Hibernate, Spring Data JPA, Liquibase and other related technology. JPA Buddy enables a team to &lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a21t6qpecgdlylwxkk1v.gif"&gt;set up agreed code conventions&lt;/a&gt; and applies them for newly generated JPA entities.&lt;/p&gt;

</description>
      <category>hiberante</category>
      <category>java</category>
      <category>springboot</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Production ready Typescript Serverless project configuration</title>
      <author>Sebastian Bille</author>
      <pubDate>Tue, 16 Mar 2021 12:54:17 +0000</pubDate>
      <link>https://dev.to/tastefulelk/production-ready-typescript-serverless-project-configuration-mn9</link>
      <guid>https://dev.to/tastefulelk/production-ready-typescript-serverless-project-configuration-mn9</guid>
      <description>&lt;p&gt;Before we get started - if you're just here because you want a plug 'n' play starter, &lt;a href="https://www.npmjs.com/package/generator-sls-node"&gt;here's a project generator&lt;/a&gt; and &lt;a href="https://github.com/TastefulElk/serverless-typescript-starter-example"&gt;here's an example repository&lt;/a&gt;! 🚀&lt;/p&gt;

&lt;p&gt;Getting Typescript to run is usually pretty simple. You just follow a few lines of instructions from the first google link. Getting the project from that point to something that you can deploy with confidence is often surprisingly hard though. To get there, you'll at the very least want to have testing and linting set up. Tree shaking is another thing you'll probably want to be able to drastically reduce your bundle sizes. &lt;/p&gt;

&lt;p&gt;This is going to be a walkthrough of my opinionated approach to achieving a simple but extensible setup that accomplishes these simple goals for a Serverless AWS project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-initialization" class="anchor"&gt;
  &lt;/a&gt;
  Project Initialization
&lt;/h3&gt;

&lt;p&gt;Let's start off by creating a new project.  Make sure you're in an empty directory and run &lt;code&gt;npm init -y&lt;/code&gt;. We're going to need a few tools to set this up: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/serverless"&gt;Serverless&lt;/a&gt; &amp;amp; &lt;a href="https://www.npmjs.com/package/typescript"&gt;Typescript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/eslint"&gt;ESLint&lt;/a&gt; for linting&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/jest"&gt;Jest&lt;/a&gt; for testing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/webpack"&gt;Webpack&lt;/a&gt; for bundling and optimizing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/ts-loader"&gt;ts-loader&lt;/a&gt; as a Typescript loader for webpack&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/ts-jest"&gt;ts-jest&lt;/a&gt; as a Typescript preprocessor for jest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's add those as devDependencies right of the bat as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add eslint jest @types/jest serverless serverless-webpack ts-jest ts-loader typescript webpack &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#application-code-amp-tests" class="anchor"&gt;
  &lt;/a&gt;
  Application Code &amp;amp; Tests
&lt;/h3&gt;

&lt;p&gt;We'll need some example Typescript code to run in our app. I prefer placing the application code in an &lt;code&gt;src&lt;/code&gt; folder and the test code in a &lt;code&gt;tests&lt;/code&gt; folder to keep them separate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/myFunction.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello from handler!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tests/myFunction.test.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/myFunction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[myFunction]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should not crash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to transpile and run the Typescript code, we'll need a &lt;code&gt;tsconfig.json&lt;/code&gt;. We can generate one to start from by running &lt;code&gt;yarn tsc --init&lt;/code&gt;. Let's change both the &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; to &lt;code&gt;"ES2020"&lt;/code&gt; as we want to be able to use modern ECMAScript features.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tsconfig.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ES2020"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ECMAScript&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;version:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ES&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(default)&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ES&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ES&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ES&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ES&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ES&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ES&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ES&lt;/span&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ESNEXT'.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;generation:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'commonjs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'amd'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'system'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'umd'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'es&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'es&lt;/span&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ESNext'.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ES2020"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;included&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;compilation.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;strict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;type-checking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;options.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Enables&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;emit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;interoperability&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;between&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;CommonJS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Modules&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;via&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;creation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;imports.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Implies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'allowSyntheticDefaultImports'.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"skipLibCheck"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Skip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;checking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;declaration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;files.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"forceConsistentCasingInFileNames"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Disallow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;inconsistently-cased&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;references&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;file.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need now to be able to start developing and testing our app is to add a Jest configuration file. The default settings for Jest are pretty sensible to we don't have to care about most of those right now except for setting &lt;code&gt;preset&lt;/code&gt; to &lt;code&gt;"ts-jest"&lt;/code&gt; and the &lt;code&gt;testEnvironment&lt;/code&gt; to &lt;code&gt;"node"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// jest.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ts-jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;testEnvironment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now finally run our tests with &lt;code&gt;yarn jest&lt;/code&gt; to confirm that everything seems to work so far.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tb-r3VJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1udyla0i9fisuepzh54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tb-r3VJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1udyla0i9fisuepzh54.png" alt="passing tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excellent, our tests are passing! 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linting" class="anchor"&gt;
  &lt;/a&gt;
  Linting
&lt;/h3&gt;

&lt;p&gt;We'll be using ESLint for static code analysis and code style enforcement. ESLint configurations can quickly become a mess and it's by nature very subjective so let's keep it simple here. When we run &lt;code&gt;yarn eslint --init&lt;/code&gt; we'll get to answer a few questions about our preferences. In the image below I chose to create a small custom set of rules rather than using one of the "popular style guides" but it's completely up to you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iINvXmU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bewn3nzjyp9wux9ifs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iINvXmU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bewn3nzjyp9wux9ifs8.png" alt="ESLint init wizard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how mine ended up looking:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .eslintrc.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;es2021&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plugin:@typescript-eslint/recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@typescript-eslint/parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;parserOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;ecmaVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@typescript-eslint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;indent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linebreak-style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;single&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;semi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;ignore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack.config.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AirBnb style guide has a few conflicts with our Typescript setup out of the box so if you choose to extend AirBnb style guide you'll have to do these steps as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add &lt;code&gt;"jest"&lt;/code&gt; to the &lt;code&gt;env&lt;/code&gt; configuration&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;'plugin:import/typescript'&lt;/code&gt; to &lt;code&gt;extends&lt;/code&gt; &amp;amp; &lt;code&gt;import&lt;/code&gt; to &lt;code&gt;plugins&lt;/code&gt; to get rid of module resolution errors&lt;/li&gt;
&lt;li&gt;disable explicit file extension rule by adding &lt;code&gt;'import/extensions': 'off'&lt;/code&gt; to &lt;code&gt;rules&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#packaging-amp-deploying" class="anchor"&gt;
  &lt;/a&gt;
  Packaging &amp;amp; Deploying
&lt;/h3&gt;

&lt;p&gt;Lastly, we need to configure Webpack and Serverless in order to build and deploy our app. For the Webpack configuration, we can use a pretty simple setup where we specify &lt;code&gt;ts-loader&lt;/code&gt; to be used as the loader for Typescript files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slsw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serverless-webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slsw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLocal&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slsw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;tsx&lt;/span&gt;&lt;span class="se"&gt;?)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ts-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node_modules&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.serverless&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and finally, for the Serverless configuration we'll, in addition to some basic information about our app, add the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;serverless-webpack&lt;/code&gt; to the list of plugins&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;package.individually&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in order to bundle each function separately so that we can reduce the bundle size for each function by only including exactly what's needed to run it&lt;/li&gt;
&lt;li&gt;As we've been using Yarn we should set the Webpack packager to &lt;code&gt;yarn&lt;/code&gt; so that it'll respect our lock file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// serverless.yml&lt;/span&gt;
&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sls-ts&lt;/span&gt;

&lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;serverless-webpack&lt;/span&gt;

&lt;span class="na"&gt;package&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;individually&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;webpack&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;packager&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;

&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-north-1&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;myFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/myFunction.handler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Hit &lt;code&gt;yarn serverless deploy&lt;/code&gt; to deploy the project! We can verify that it works by running &lt;code&gt;yarn serverless invoke -f myFunction&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcyQRmrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdjmgkyx91z75ox0658s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcyQRmrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdjmgkyx91z75ox0658s.png" alt="invoked function responded successfully"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Project configuration is highly subjective and the complexity often grows as the projects grows but I hope this can serve as a starting point to build upon!&lt;/p&gt;

&lt;p&gt;If you enjoyed this guide and want to see more, follow me on Twitter at &lt;a href="https://twitter.com/tastefulelk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS and developer productivity!&lt;/p&gt;

&lt;p&gt;Happy hacking! 🚀&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/generator-sls-node"&gt;Project generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TastefulElk/serverless-typescript-starter-example"&gt;Example repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>tutorial</category>
      <category>serverless</category>
      <category>lambda</category>
    </item>
    <item>
      <title>10 Things 2020 has taught me</title>
      <author>Joakim Unge</author>
      <pubDate>Tue, 16 Mar 2021 12:48:51 +0000</pubDate>
      <link>https://dev.to/joakimunge/10-things-2020-has-taught-me-nfj</link>
      <guid>https://dev.to/joakimunge/10-things-2020-has-taught-me-nfj</guid>
      <description>&lt;p&gt;&lt;strong&gt;2020 started out rough for a lot of us.&lt;/strong&gt; Most of us moved out of the office, and into our couches, kitchens, closets, or otherwise improvised office areas. Whereas you might have lost some precious moments in your car or the gratuitous sneeze-in-your-face on the commute, most of us gained something far more important; &lt;em&gt;Time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I have tried my best to put this time to use as best I can. Whether practicing inversions on the piano, getting that extra hour of exercise, or scrolling through whatever blogs and articles I could find that seemed like my cup of tea.&lt;/p&gt;

&lt;p&gt;I also dedicated some of this time to document things I have learned during the day. Whenever I found something, learned something new or otherwise gained insight or knowledge into an area I deemed relevant to my professional field, I would make a note of it, and when given the opportunity, test it out for myself and detail my findings and sharing them.&lt;/p&gt;

&lt;p&gt;This could be anything from finding a new useful code snippet to gaining insight into a whole new concept or paradigm. Today I want to share with you some of my favorites from this list, and I hope you will enjoy and be inspired to take this path for yourself.&lt;/p&gt;

&lt;p&gt;I am focusing exclusively on &lt;strong&gt;JavaScript&lt;/strong&gt; for this article. I have learned other things as well, but I think the core audience would not deem my aspirations for lego, piano nor amateur furniture builds relevant. That being said, this is starting to feel like one of those recipe introductions that describes the soups' relationship to Napoleon's great-grandfather. Just give me soup?&lt;/p&gt;

&lt;p&gt;Soups, ahoy. Without further ado, here are some excerpts, and my favorite things, that I learned during 2020, in the order that I learned them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-arraysort-behaves-differently-across-browsers" class="anchor"&gt;
  &lt;/a&gt;
  1. Array.sort() behaves differently across browsers
&lt;/h3&gt;

&lt;p&gt;This is more of a mistake that I scratched my head over for a long time earlier this past spring. Consider the following:&lt;/p&gt;

&lt;p&gt;When sorting an array, me, and probably a lot of other people, fell into the trap of using this simple callback: &lt;code&gt;sort((x,y) =&amp;gt; x &amp;lt; y))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, when running this on a simple example. We get the following in Chrome and Firefox respectively:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s1SlEvCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63i4pdemdrcltmlcfmy7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1SlEvCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63i4pdemdrcltmlcfmy7.png" alt="array_sort_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The comparison callback that &lt;code&gt;sort()&lt;/code&gt; accepts must return either &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;. Since our callback returns neither, but rather booleans. The different implementations of javascript across these browsers seem to have their own quirks in how they interpret these booleans.&lt;/p&gt;

&lt;p&gt;So while Firefox for example seem to accept, or rather interpret, booleans as &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;-1&lt;/code&gt; respectively, there is no guarantee that other browsers do the same thing, or even that Firefox itself will continue to do so in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Joakim does not accurately read Array documentation. Do not be like Joakim. Read the documentation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Chrome also used to implement different sorting algorithms &lt;a href="https://bugs.chromium.org/p/v8/issues/detail?id=90#c24"&gt;depending on the size of the array&lt;/a&gt; although this has since been changed to always use a &lt;strong&gt;stable&lt;/strong&gt; sorting algorithm.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;Read more about .sort()&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-jsonstringifys-optional-replacer-argument" class="anchor"&gt;
  &lt;/a&gt;
  2. JSON.stringifys optional replacer argument.
&lt;/h3&gt;

&lt;p&gt;Everyone and their mother who has ever dabbled in web development have, or will, at some point used &lt;code&gt;JSON.stringify&lt;/code&gt;. But this year it dawned on me the second argument to this function: &lt;code&gt;replacer&lt;/code&gt;. Which can be used as a sort of whitelist for key value pairs when parsing JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1m2M-1nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mot0de4qunp1jz9drti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1m2M-1nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mot0de4qunp1jz9drti.png" alt="json_stringify_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BUT replacer can also be a function, which might be used to validate, replace or parse (or anything else under the sun. Creativity hat on, gals and guys) the JSON key value pairs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKLRzNjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87gpt399syw126i3lnw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKLRzNjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87gpt399syw126i3lnw5.png" alt="json_stringify_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This comes with a slight hit to performance, as you can see for yourself in &lt;a href="https://perf.link/#eyJpZCI6ImNveW1mczIzYjduIiwidGl0bGUiOiJKU09OLnN0cmluZ2lmeSgpIHJlcGxhY2VyIGFyZ3VtZW50IGJlbmNobWFyayIsImJlZm9yZSI6ImNvbnN0IGRhdGEgPSB7b25lOiBcIm9uZVwiLCB0d286IDIsIHRocmVlOiBcInRocmVlXCIsIGZvdXI6IFwiZm91clwiLCBmaXZlOiA1fSIsInRlc3RzIjpbeyJuYW1lIjoiU3RyaW5naWZ5IHdpdGhvdXQgcmVwbGFjZXIiLCJjb2RlIjoiSlNPTi5zdHJpbmdpZnkoZGF0YSkiLCJydW5zIjpbNjY4MDAwLDY4MzAwMCw4ODUwMDAsMjUxMDAwLDkwMDAsMjAwMDAwLDI3MTAwMCw3MzQwMDAsMTY3MDAwLDI4ODAwMCwyODMwMDAsMjEwMDAsNTg0MDAwLDQ1MDAwLDEwMDAwLDQzODAwMCw5MDAwLDk1MDAwLDE0NTAwMCwxMTYwMDAsOTgwMDAsMTAwMDAsOTAwMCwzMzIwMDAsMjU3MDAwLDkwMDAsOTAwMCw0NTUwMDAsMjM0MDAwLDczMTAwMCw5MDAwLDI2NDAwMCw5MDAwLDUyMDAwMCwxMDAwMCw5MDAwLDcxMDAwLDgzNDAwMCw5MDAwLDc3MDAwLDkwMDAsNTc2MDAwLDE2MjAwMCw5MDAwLDkwMDAsODY1MDAwLDEwMDAwLDEwMDAwLDM0MDAwLDQ1MDAwLDY4MDAwLDIxNjAwMCw5MzkwMDAsOTAwMCwzNzYwMDAsMTk0MDAwLDIyNzAwMCw3MDAwLDI2MDAwMCwxMDAwMCw2MjUwMDAsOTAwMCw5ODAwMCwyNTkwMDAsMTU3MDAwLDEwMDAsOTAwMCwzNTEwMDAsMzAyMDAwLDEwMDAwLDE0MTAwMCwxNDc4MDAwLDE5MzAwMCw0OTYwMDAsMzg1MDAwLDU0NDAwMCwxNzEwMDAsOTAwMCw5MjAwMCw2NTQwMDAsMTI5MDAwLDkwMDAsMzc0MDAwLDEwMDAwLDk4MjAwMCwxNDcwMDAsMjIwMDAsMzA0MDAwLDU3NjAwMCwyMDAwLDExNTAwMCw1MTEwMDAsOTAwMCw1MzAwMCwxMDAwMCw5MDAwLDI2MDAwLDQwNzAwMCw2ODAwMCw3MjAwMF0sIm9wcyI6MjM3MTIwfSx7Im5hbWUiOiJTdHJpbmdpZnkgd2l0aCByZXBsYWNlciBhcyB3aGl0ZWxpc3QiLCJjb2RlIjoiSlNPTi5zdHJpbmdpZnkoZGF0YSwgW1wib25lXCIsIFwidGhyZWVcIiwgXCJmaXZlXCJdKSIsInJ1bnMiOls1MjIwMDAsNjgzMDAwLDcyNjAwMCwyMzYwMDAsOTAwMCwxNDIwMDAsMjMzMDAwLDAsMTI0MDAwLDI3MjAwMCwxMTEwMDAsMjkwMDAsNTQ1MDAwLDM3MDAwLDEwMDAsMzUxMDAwLDkwMDAsNDcwMDAsOTgwMDAsOTgwMDAsNjIwMDAsMTAwMDAsOTAwMCwyOTcwMDAsMTQ5MDAwLDYyOTAwMCw5MDAwLDE1OTAwMCwxODQwMDAsNTQ2MDAwLDkwMDAsMTg5MDAwLDkwMDAsNDUwMDAwLDEwMDAwLDkwMDAsMzYwMDAsMCwzNDQwMDAsNTYwMDAsOTAwMCwzODMwMDAsOTQwMDAsOTUyMDAwLDk5MDAwLDY5NzAwMCwxMDAwMCwxMDAwMCw0MDAwMCw0MTAwMCw0NzAwMCwyMDAwMDAsNzczMDAwLDkwMDAsMzE3MDAwLDE2MjAwMCwxNjAwMDAsODU5MDAwLDE5MDAwMCw5MDAwLDUxODAwMCwxMDAwMCw5ODAwMCwxMDAwMCw5ODAwMCwxMTEwMDAsOTAwMCwzNzAwMDAsMTkwMDAwLDkwMDAsOTkwMDAsOTAwMCwxNTYwMDAsNDU5MDAwLDMzNjAwMCw1MjUwMDAsMTE3MDAwLDEwMDAwLDYzMDAwLDYwNjAwMCwxMTAwMDAsOTAwMCwzMzEwMDAsOTAwMCw5MDAwLDEyMDAwMCwzNDAwMCwzMDQwMDAsNDc1MDAwLDEwMDAsOTAwMDAsNDE0MDAwLDgzMDAwLDkwMDAsMzUwMDAwLDMwMjAwMCwxODAwMCwzNjkwMDAsODI4MDAwLDEwMDAwXSwib3BzIjoyMDE3ODB9LHsibmFtZSI6IlN0cmluZ2lmeSB3aXRoIHJlcGxhY2VyIGNhbGxiYWNrIiwiY29kZSI6IkpTT04uc3RyaW5naWZ5KGRhdGEsICh2YWwpID0%2BIE51bWJlci5pc0ludGVnZXIodmFsKSA%2FIHZhbC50b1N0cmluZygpIDogdmFsKSIsInJ1bnMiOlsxMDQ1MDAwLDY2MjAwMCw1MzMwMDAsMTAwMCw5MDAwLDEwMDAwMCwxOTgwMDAsNDEwMDAsMTAwMDAwLDE3MDAwLDIyMDAwMCwxMTAwMCwxMTAwMCwwLDcwMDAsMzE1MDAwLDg1NDAwMCw1MDAwMCw5MDAwLDUzMDAwLDEzMDAwLDkwMDAsMTAwMDAsMjAzMDAwLDE1OTAwMCw5MDAwLDkwMDAsNzMwMDAsMTc0MDAwLDUwNzAwMCw5MDAwLDE4NjAwMCw1OTUwMDAsNDEyMDAwLDkwMDAsOTAwMCwxMDAwMCw2MTcwMDAsMTk2MDAwLDM3MDAwLDkwMDAsMzg2MDAwLDc5MDAwLDAsMTEwMDAsMCwxMDAwMCwxMzAwMCwzNDIwMDAsMTAwMCwyODAwMCw3NjAwMDAsNzI5MDAwLDkwMDAsMTU2MDAwLDM4MDAwLDEzMzAwMCwwLDk4MDAwLDkwMDAsNDg5MDAwLDEwMDAwLDYyMzAwMCwxMTAwMCwxMDAwMDAsMjcwMDAsMTAwMCwyODAwMDAsMTAwMDAsMTAwMDAsNTEwMDAsMTAwODAwMCw0OTAwMCw0NDMwMDAsMjk5MDAwLDI1OTAwMCwxMTQwMDAsMTcwMDAsMTkyMDAwLDU0NjAwMCwxMjIwMDAsMTAwMCwzMDMwMDAsOTAwMCw5MDAwLDEwMDAwMCwxMTAwMCwyMTQwMDAsNDM0MDAwLDEwMDAsNzYwMDAsMjk3MDAwLDUwMDAwLDMxNTAwMCwxMDAwLDkwMDAsOTAwMCwyMzEwMDAsMzIwMDAsNTgwMDAwXSwib3BzIjoxNzYzNjB9XSwidXBkYXRlZCI6IjIwMjEtMDMtMTBUMDg6Mzc6MjYuMDEzWiJ9"&gt;these benchmarks&lt;/a&gt;, but for the average usecase it should not be a significant difference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"&gt;Read more about JSON.stringify()&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-arrayfilter-does-not-work-with-promises" class="anchor"&gt;
  &lt;/a&gt;
  3. Array.filter() does not work with Promises
&lt;/h3&gt;

&lt;p&gt;I tend to work a lot with array methods. A really common pattern would be: Perform a number of asynchronous operations, iterate over said operations to manipulate the data &amp;amp; filter out unwanted things.&lt;/p&gt;

&lt;p&gt;I first ran in to this during the summer, when in my project, we used a function to check the users access levels, when performing certain operations. Let's call it &lt;code&gt;userCan&lt;/code&gt;. By having this function return true or false, it could seamlessly be used as a &lt;code&gt;filter&lt;/code&gt; callback to determine whether the user had relevant permissions for any given set of actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zxtRNXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ph059u9575f29hmqjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zxtRNXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ph059u9575f29hmqjz.png" alt="filter_1"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Consider &lt;code&gt;actions&lt;/code&gt; a batch of requests the user has made. We need to make sure only the actions the user has permission to do gets executed. Simplified code, but you get the gist:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RY4XUoXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d2v4ingkoxlvrjrynwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RY4XUoXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d2v4ingkoxlvrjrynwv.png" alt="filter_3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Short and sweet. But what happens when we introduce asynchronous operations in &lt;code&gt;userCan&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PNbNENY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as0sblsgjwbz52jqah2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PNbNENY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as0sblsgjwbz52jqah2j.png" alt="filter_4"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Suddenly every user action is allowed! The user should not have permission to &lt;code&gt;DROP_DATABASE&lt;/code&gt;. Why is this happening?&lt;/p&gt;

&lt;p&gt;Well, Unfortunately &lt;code&gt;Array.filter()&lt;/code&gt; is a synchronous function, and therefore does not support Promises. Due to this, &lt;code&gt;filter()&lt;/code&gt; will not await &lt;code&gt;userCan&lt;/code&gt; to resolve a value, but just accept the Promise as a truthy value.&lt;/p&gt;

&lt;p&gt;To get around this, we need to get a bit creative. There are a few ways to work around this, the most common, and the way I would recommend, would be to use &lt;code&gt;.map()&lt;/code&gt; in conjunction with &lt;code&gt;.filter()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dK138iQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p5nocab1xkyjss5jl09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dK138iQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p5nocab1xkyjss5jl09.png" alt="filter_5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we are doing here is using the asynchronous supported &lt;code&gt;.map()&lt;/code&gt; to check the given predicate, and when all Promises has resolved, filter out the falsy values from the resulting array.&lt;/p&gt;

&lt;p&gt;You could also do this with &lt;code&gt;.reduce()&lt;/code&gt;, but I find it a bit more convoluted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--stOfJg1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30tvlikk2zvtyhjsifj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--stOfJg1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30tvlikk2zvtyhjsifj3.png" alt="filter_6"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Neat, ain't it?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;Read more about .filter()&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-nullish-coalescing-vs-the-logical-or-operator" class="anchor"&gt;
  &lt;/a&gt;
  4. Nullish coalescing vs the logical OR operator
&lt;/h3&gt;

&lt;p&gt;A lot of people, myself included, probably feel very familiar writing something like the following, to have a fallback in case &lt;code&gt;baz&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const foo = baz || "fallback"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;||&lt;/code&gt; checks for falsy values such as &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;. But there might be cases where you need to treat &lt;code&gt;0&lt;/code&gt; as an actual value, or otherwise more explicitly handle nullish values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QoLPcQ4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai8rwv56h5ymun1vpi6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QoLPcQ4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai8rwv56h5ymun1vpi6h.png" alt="nullish"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nullish coalescing differs from &lt;code&gt;||&lt;/code&gt; in that it only returns it's right-hand side operand when its left-hand side value is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nullish coalescing was introduced in TypeScript as of &lt;strong&gt;version 3.7&lt;/strong&gt; and is currently supported in the latest version of all major browsers and &lt;strong&gt;Node.js 14&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;More about Nullish Coalescing here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-consoletable" class="anchor"&gt;
  &lt;/a&gt;
  5. Console.table()
&lt;/h3&gt;

&lt;p&gt;This blew my feeble mind when I ran into it the first time this summer. We're all experienced developers, so we use &lt;code&gt;console.log&lt;/code&gt; as frequently as possible as it is possibly the strongest debugging tool there is! Well, here I am to tell you, that  &lt;code&gt;console.table()&lt;/code&gt; exists and how great it is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WI13r1Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcbc43zrcmt1fpvjpsp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WI13r1Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcbc43zrcmt1fpvjpsp7.png" alt="console_table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever you're working with long arrays of  objects, this can be a lifesaver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/table"&gt;More about console.table() here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-the-promise-constructor-antipattern" class="anchor"&gt;
  &lt;/a&gt;
  6. The Promise constructor anti-pattern
&lt;/h3&gt;

&lt;p&gt;The Promise constructor anti-pattern, or the deferred anti-pattern, refers to creating new objects, or in this case new Promises without reason. This is something I was very guilty of when I just started out as a junior developer and began delving into Promises.&lt;/p&gt;

&lt;p&gt;It complicates code and prevents rejections and errors from being properly propagated.&lt;/p&gt;

&lt;p&gt;I didn't know this was a recognized anti-pattern, and I myself just kind of naturally removed myself from the habit, until I learned more about it this year. It's easy to fall into this kind of way of working when you're new to Promises, and might not know that performing asynchronous operations already returns a Promise, which you in turn can chain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-1fI-Bz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98tp5ldyr4065np0skt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-1fI-Bz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98tp5ldyr4065np0skt5.png" alt="promise_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rather than explicitly creating a new Promise, it is adviced to just use the original one returned from the async function we are calling in the first place:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pHlwjR8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpyxc4hrmvepkthp1wyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHlwjR8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpyxc4hrmvepkthp1wyb.png" alt="promise_3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doesn't that look a lot prettier?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/23803743/what-is-the-explicit-promise-construction-antipattern-and-how-do-i-avoid-it"&gt;Read more about the Promise constructor anti-pattern here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#7-catch-awaited-errors" class="anchor"&gt;
  &lt;/a&gt;
  7. Catch awaited errors
&lt;/h3&gt;

&lt;p&gt;Now to something a little more bite sized. We all know you handle resolved and rejected promises by using &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;. But if you want to catch an error using &lt;strong&gt;async/await&lt;/strong&gt; you, to my knowledge, needed to wrap it in a &lt;em&gt;try/catch&lt;/em&gt; block, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRTdGBFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w77xvropho5fnzjr3lzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRTdGBFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w77xvropho5fnzjr3lzq.png" alt="catch_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But to my own amusement and amazement, I recently found that you can in fact use &lt;code&gt;.catch()&lt;/code&gt; on awaited Promises.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9_RtvCXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4sca69yg3cn1t2w3q1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_RtvCXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4sca69yg3cn1t2w3q1e.png" alt="catch_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Granted, this makes a lot of sense when you think about it, given that async/await is really just syntactic sugar on top of Promises.&lt;/p&gt;

&lt;p&gt;That being said, one might present the argument that one should stick to one convention or the other, and while I would usually agree with this sentiment, I just find it really handy in some cases. &lt;strong&gt;What do you think?&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#8-using-optional-chaining-for-function-calls" class="anchor"&gt;
  &lt;/a&gt;
  8. Using optional chaining for function calls.
&lt;/h3&gt;

&lt;p&gt;This might be common knowledge, and as someone who rigorously uses optional chaining, I wonder why it never occurred to me to try this; You can use optional chaining for function calls?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GS_uEqqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57rtruthopibgpvl5pcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GS_uEqqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57rtruthopibgpvl5pcz.png" alt="optional_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's beautiful.. And often comes in handy when working with React components for instance, which may or may not have event handlers such as &lt;code&gt;onClick&lt;/code&gt;. No more &lt;code&gt;onClick={onClick &amp;amp;&amp;amp; () =&amp;gt; onClick(param)}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"&gt;Learn more about optional chaining here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-utilizing-web-workers" class="anchor"&gt;
  &lt;/a&gt;
  9. Utilizing Web Workers
&lt;/h3&gt;

&lt;p&gt;JavaScript run-times are single-threaded environments, meaning code executions within a program can not be run in parallel, in contrast to for example Java and C#. This means that it's code execution by nature is &lt;em&gt;blocking&lt;/em&gt;. We have to wait for one piece of code to finish, before moving on to the next.&lt;/p&gt;

&lt;p&gt;Not to be confused with Promises, or &lt;a href="https://nodejs.org/api/child_process.html"&gt;Node.js Child Processes&lt;/a&gt;, &lt;strong&gt;Web Workers&lt;/strong&gt; are a means to bring this multi-threaded behaviour to JavaScript. They can be utilized for a multitude of things, but probably most commonly used to delegate CPU intensive tasks to other threads, preventing long interruptions and user interface blockers. &lt;/p&gt;

&lt;p&gt;Similar to event listeners and &lt;code&gt;Socket.io&lt;/code&gt;, workers communicate with each other using a messaging system and is very simple to get up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vtf_jLm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lswx02xj8sapg447x7ns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vtf_jLm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lswx02xj8sapg447x7ns.png" alt="worker_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the worker to listen and respond to the messages sent by the main thread, we just need to define the &lt;code&gt;onmessage&lt;/code&gt; handler and we're good to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDM_OxV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig7drfgm23obzg8oxa8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDM_OxV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig7drfgm23obzg8oxa8f.png" alt="worker_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;All we need to do now is make sure our main thread has some way to handle the messages sent back by our worker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hcWGly2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l8b928y8tee7yz6iv2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hcWGly2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l8b928y8tee7yz6iv2h.png" alt="worker_3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While Web Workers can be very useful, they do come with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers#APIs_available_in_workers"&gt;some limitations&lt;/a&gt;, such as not having access to the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;Read more about Web Workers here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10-not-depending-on-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  10. Not depending on dependencies
&lt;/h3&gt;

&lt;p&gt;Last, but not least, I want to give this honorary position in the list to one thing that probably taught me the most during this year.&lt;/p&gt;

&lt;p&gt;Earlier last spring, &lt;strong&gt;Deno&lt;/strong&gt; launched version 1.0 with an array of interesting features. Deno is a new, secure JavaScript and TypeScript runtime by Node.js creator &lt;a href="https://github.com/ry"&gt;Ryan Dahl (ry)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm not going to go deep into Deno here, but &lt;a href="https://deno.land"&gt;here&lt;/a&gt;'s a link if you want to learn more about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Me, being an avid Node.js engineer, jumped at the opportunity to discover what it can do. I dedicated a weekend to trying to write a file- &amp;amp; web server that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Has live reload&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports client routing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requires zero configuration..&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.. and at the same time being &lt;strong&gt;completely dependency free&lt;/strong&gt;. Meaning no third-party packages can be used. The resulting project is called &lt;a href="https://github.com/joakimunge/denoliver"&gt;Denoliver&lt;/a&gt;, and I went on to release version 2.0 later in 2020.&lt;/p&gt;

&lt;p&gt;I learned an absolute truckload &lt;em&gt;(no swearing here!)&lt;/em&gt; from this experiment. There's something highly intriguing having to solve problems most commonly solved with &lt;code&gt;npm install solution&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;I cannot recommend this approach enough. It really was an amazing journey. If you want to check out the project yourself for inspiration, or to contribute, you can find it &lt;a href="https://github.com/joakimunge/denoliver"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/joakimunge"&gt;
        joakimunge
      &lt;/a&gt; / &lt;a href="https://github.com/joakimunge/denoliver"&gt;
        denoliver
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple, dependency free static file server for Deno with possibly the worst name ever.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/joakimunge/denoliver/master/media/denoliver_2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcL0BSdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/joakimunge/denoliver/master/media/denoliver_2.png" title="Denoliver" alt="It's a liver" width="320"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://github.com/joakimunge/denoliver/actions"&gt;
&lt;img src="https://camo.githubusercontent.com/c847d568a1311a6b65be85fa4b71622c0731caf655b25c18fc63dda140596c47/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6a6f616b696d756e67652f64656e6f6c697665722f63693f7374796c653d666f722d7468652d6261646765"&gt;&lt;/a&gt;
&lt;a href="https://github.com/joakimunge/denoliver/releases"&gt;
&lt;img src="https://camo.githubusercontent.com/46670a9845e49fac0651c1a32de3a928efb5aa55e5a8565f526ba7089bd68532/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6a6f616b696d756e67652f64656e6f6c697665723f7374796c653d666f722d7468652d6261646765"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denoliver&lt;/strong&gt; is a small, zero config dev &amp;amp; static file server with live reloading written in TypeScript for Deno intended for prototyping and Single Page Applications.&lt;/p&gt;
&lt;h2&gt;
Prerequisites&lt;/h2&gt;
&lt;h3&gt;
To run this you need to have &lt;a href="https://deno.land/" rel="nofollow"&gt;Deno&lt;/a&gt; 1.0 or later installed.&lt;/h3&gt;
&lt;h2&gt;
Key Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dependency free! No third party dependencies.&lt;/li&gt;
&lt;li&gt;Live reload&lt;/li&gt;
&lt;li&gt;Supports client side routing for Single Page Applications.&lt;/li&gt;
&lt;li&gt;Directory lists&lt;/li&gt;
&lt;li&gt;Supports HTTPS&lt;/li&gt;
&lt;li&gt;Allows for programmatic use as a module&lt;/li&gt;
&lt;li&gt;Boilerplating for rapid prototyping.&lt;/li&gt;
&lt;li&gt;Injectable HTTP request interceptors. (TS &amp;amp; JS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;p&gt;Install as a Deno executable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Deno is a secure runtime by default. You need to include the &lt;code&gt;--allow-net&lt;/code&gt;, &lt;code&gt;--allow-read&lt;/code&gt; and &lt;code&gt;--allow-write&lt;/code&gt; flags to make sure Denoliver can serve your directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ deno install --allow-net --allow-read --allow-write --allow-run https://deno.land/x/denoliver/mod.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you're not happy with the name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ deno install -n whateverNameYouWant --allow-net --allow-read --allow-write --allow-run https://deno.land/x/denoliver/mod.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
Why do I need the &lt;code&gt;--allow-run&lt;/code&gt; flag?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You don't need it!&lt;/em&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/joakimunge/denoliver"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#closing" class="anchor"&gt;
  &lt;/a&gt;
  Closing
&lt;/h3&gt;

&lt;p&gt;2020 has been an interesting time for everyone. I am very fortunate to be able to say that I have grown a lot during this time, and I have to give this small process a lot of credit as to why that is.&lt;/p&gt;

&lt;p&gt;It might seem like a peripheral thing, but I highly recommend taking a couple of minutes each day to reflect over what knowledge you have gained and jot it down in your medium of choice. Nothing is too big, or too small. By the end of the year, or possibly a lot sooner than that, you will be amazed with the knowledge you have gained.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the little tidbits of my journal today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you learned this year?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>todayilearned</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Object Design Style Guide Summary</title>
      <author>MiguelDevelopez</author>
      <pubDate>Tue, 16 Mar 2021 10:55:29 +0000</pubDate>
      <link>https://dev.to/migueldevelopez/object-design-style-guide-summary-42bl</link>
      <guid>https://dev.to/migueldevelopez/object-design-style-guide-summary-42bl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-you-should-create-and-use-your-objects" class="anchor"&gt;
  &lt;/a&gt;
  How you should create and use your objects
&lt;/h1&gt;

&lt;p&gt;I’m currently reading an interesting book called Object Design Style Guide, wrote by Matthias Noback, about how to create objects as best as possible, so I decided to bring it up here and show you some tips and directives I found more interesting. Of course, I recommend you read the whole book if you want to go deep into this topic.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVcNnh58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m821vcaguihcytxktwzx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVcNnh58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m821vcaguihcytxktwzx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1%C2%BA-introduction-to-some-oop-concepts" class="anchor"&gt;
  &lt;/a&gt;
  1º Introduction to some OOP concepts
&lt;/h2&gt;

&lt;p&gt;In this book, inheritance plays a small role, even though it’s supposed to be one of the pillars of object-oriented programming. In practice, using inheritance mostly leads to a confusing design.&lt;br&gt;
In this book, we’ll use inheritance mainly in two situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When defining interfaces for dependencies &lt;em&gt;(dependency injection and inversion)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;When defining a hierarchy of objects, such as when defining custom exceptions that extend from built-in exception classes.
In most other cases we’d want to actively prevent developers to extend from our classes. You can do so by adding the final keyword in front of the class. It will be more explained later.
The &lt;strong&gt;composition is highly recommended&lt;/strong&gt; over the inheritance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A little space to the test about that the basic structure of the unit test is:&lt;br&gt;
The basic structure of each test method is Arrange - Act - Assert:&lt;br&gt;
1 &lt;strong&gt;Arrange&lt;/strong&gt;: Bring the object that we’re testing (also known as the SUT, or Subject Under Test) into a certain known state.&lt;br&gt;
2 &lt;strong&gt;Act&lt;/strong&gt;: Call one of its methods.&lt;br&gt;
3 &lt;strong&gt;Assert&lt;/strong&gt;: Make some assertions about the end state.&lt;/p&gt;

&lt;p&gt;Shit's getting real. &lt;strong&gt;There are 2 types of objects:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service objects that either perform a task or return a piece of information. Objects of the first type will be created once, and then be used any number of times, but nothing can be changed about them. They have a very simple lifecycle. Once they’ve been created, they can run forever, like &lt;strong&gt;little machines with specific tasks&lt;/strong&gt;. These kinds of services are &lt;strong&gt;immutables&lt;/strong&gt;.
Service objects are do-ers, and they often have names indicating what they do: renderer, calculator, repository, dispatcher, etc. &lt;/li&gt;
&lt;li&gt;Objects that will hold some data, and optionally expose some behavior for manipulating or retrieving that data, this kind is used by the first type to complete their tasks. These objects are the materials that the services work with. There are two subtypes: value objects and models/entities, but don't get ahead of ourselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#2%C2%BA-focus-on-services" class="anchor"&gt;
  &lt;/a&gt;
  2º Focus on Services
&lt;/h2&gt;

&lt;p&gt;There is a pile of suggestions about how a service should be, I’ll make the list hiper-summarizing them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To create a service use dependency injection to make the service ready for use immediately after instantiation and test double. So the dependencies should be declared &lt;em&gt;explicitly&lt;/em&gt;.
Here is an example of this, you can see how the parameter $appConfig is only used to get the directory of the cache so… Instead of injecting the whole configuration object, make sure you only inject the values that the service actually needs.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileLogger&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;Formatter&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Formatter is a dependency of FileLogger&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Formatter&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;formattedMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// ….&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;When possible you should keep together all the related configuration values that belong together. Service shouldn’t get the entire global configuration object injected, only the values that it needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WRONG WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySQLTableGateway&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GOOD WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySQLTableGateway&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;ConnectionConfiguration&lt;/span&gt; &lt;span class="nv"&gt;$connectionConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// $table is the name of the table, It isn’t necessary to make the connection &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Avoid service locators (a service from which you can retrieve other services) and inject the dependencies that you need explicitly.&lt;/li&gt;
&lt;li&gt;All the constructor arguments should be required because the code will be unnecessarily complicated. If you have the temptation to put it as an optional dependency you can use the &lt;a href="https://refactoring.guru/es/introduce-null-object"&gt;null object&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Services should be &lt;strong&gt;immutable&lt;/strong&gt;, that is, impossible to change after they have been fully instantiated because the behavior could be so unpredictable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So... avoid something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventDispatcher&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addListener&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;callable&lt;/span&gt; &lt;span class="nv"&gt;$listener&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$listener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Only assign properties or throw exceptions because of some validation error in the constructor.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileLogger&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// $logFilePath should be properly set up, so we just need a safety check&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;is_writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InvalidArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Log&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;writable&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;logFilePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Ideally, create objects to avoid the hidden dependencies, for example, the function json_encode() or a class from PHP like DateTime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WRONG WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResponseFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createApiResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// json_encode is a hidden dependency&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="no"&gt;JSON_THROW_ON_ERROR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;JSON_FORCE_OBJECT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GOOD WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonEncoder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
    &lt;span class="o"&gt;*/&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="no"&gt;JSON_THROW_ON_ERROR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;JSON_FORCE_OBJECT&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// we can throw our own exception, with more specific info&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'Failed to encode data: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;var_export&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;previous&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResponseFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;JsonEncoder&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// JsonEncoder can be injected as a dependency&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;JsonEncoder&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jsonEncoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createApiResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jsonEncoder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you can do the same with the date() and big core utilities of your language, and your application layer will be so decoupled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3%C2%BA-other-objects" class="anchor"&gt;
  &lt;/a&gt;
  3º other objects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#31-value-object-and-modelentity" class="anchor"&gt;
  &lt;/a&gt;
  3.1 value object and model/entity
&lt;/h3&gt;

&lt;p&gt;The main suggestions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate the objects in the constructor, it will assure you that you only have valid objects in your application, every object will be what it was intended to be. You should throw exceptions in the constructor in case the data is not valid. The book suggests avoiding using custom exceptions for invalid argument exceptions, for this kind of RuntimeExceptions indicates that… more about it below.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Coordinates&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InvalidArgumentException&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'Latitude should be between -90 and 90'&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Don't use property fillers, later we’ll see where you can use them with an example.&lt;/li&gt;
&lt;li&gt;Entity/model should be identifiable with a unique id, value objects don’t because they only wrap one or more primitive-type values.&lt;/li&gt;
&lt;li&gt;To add more semantic to a constructor the named constructors appear, those are static methods with domain-specific names that allow your code to have a better name than the typical new class(). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Standard way&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$salesOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SalesOrder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Better way&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$salesOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SalesOrder&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;place&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put the __construct method as private to avoid using it and call the constructor inside the place() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;Assertion&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;greaterOrEqualThan&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromInt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;DecimalValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;DecimalValue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="nv"&gt;$precision&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;One of the best points of the value objects is that, if you validate in their constructor, when you see a value object you will know that it contains validated information and you will not have to validate this information in other points of the code.&lt;/li&gt;
&lt;li&gt;Test the behavior of an object and the constructor in the way it will fail, don't create a test just to check if the values are correct.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;it_can_be_constructed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$coordinates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coordinates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;60.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;60.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$coordinates&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$coordinates&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In summary, a value object does not only represent domain concepts. They can occur anywhere in the application. A value object is an immutable object that wraps primitive-type values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#32-dto-data-transfer-object" class="anchor"&gt;
  &lt;/a&gt;
  3.2 DTO (Data transfer object)
&lt;/h2&gt;

&lt;p&gt;The rules of 3.1 don't fit well with this type of object, the DTO. While in the value object and model we want consistency and validity of the data, in the DTO we just want (nobody expected it by the name) to transfer data from one point to another.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A DTO can be created using a regular constructor. &lt;/li&gt;
&lt;li&gt;Its properties can be set one by one.&lt;/li&gt;
&lt;li&gt;All of its properties are exposed, so make them public and access them directly without getters.&lt;/li&gt;
&lt;li&gt;Its properties contain only primitive-type values.&lt;/li&gt;
&lt;li&gt;Properties can optionally contain other DTOs or simple arrays of DTOs.&lt;/li&gt;
&lt;li&gt;You can use property fillers when needed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScheduleMeetup&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromFormData&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;ScheduleMeetup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ScheduleMeetupl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, the objects have methods where they contain the behavior, there are two kinds of methods, queries to retrieve information and commands to perform a task, but both of them could be designed with the same ‘template’, that is:&lt;br&gt;
1º Checking parameters, throwing errors if there is something wrong.&lt;br&gt;
2º Do what the method has to do, throwing errors if necessary.&lt;br&gt;
3º Check postcondition checks. This won’t be necessary if you have good tests, but for example, if you are working with legacy code it could be good for safety checks.&lt;br&gt;
4º Returns if is a query method.&lt;/p&gt;

&lt;p&gt;You’ve seen that the exceptions are a good part of a code, some cases where using a custom exception is very useful:&lt;br&gt;
1º If you want to catch a specific exception type higher up&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// possibly throws ‘SomeSpecific’ exception&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SomeSpecific&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// …&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2º If there are multiple ways to instantiate a single type of exception&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CouldNotDeliverOrder&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;itWasAlreadyDelivered&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;CouldNotDeliverOrder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;insufficientQuantitiesInStock&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;CouldNotDeliverOrder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3º If you want to use named constructors for instantiating the exception&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;withId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;ProductId&lt;/span&gt; &lt;span class="nv"&gt;$productld&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;ID&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$productld&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you don’t have to put ‘Exception’ in the name of the exception class, instead, use explicit names like InvalidEmailAddress or CouldNotFindProduct.&lt;/p&gt;

&lt;p&gt;And &lt;em&gt;that’s all folks&lt;/em&gt;, there are soooo many more examples in the book, so I encourage you to take a look at it. &lt;strong&gt;If you want the second part of the book, let me know in the comments&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Sources and more info&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/38wURcK"&gt;The book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://matthiasnoback.nl/"&gt;Blog of the book author&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://verraes.net/2014/06/named-constructors-in-php/"&gt;Named constructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/49002/prefer-composition-over-inheritance?page=1&amp;amp;tab=votes#tab-top"&gt;Composition over inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>java</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
