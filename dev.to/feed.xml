<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building A Payment Application using Python Flask Framework, Docker and  and the Beyonic API.</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Sun, 10 Oct 2021 19:12:24 +0000</pubDate>
      <link>https://dev.to/grayhat/building-a-payment-application-using-python-flask-framework-docker-and-and-the-beyonic-api-2284</link>
      <guid>https://dev.to/grayhat/building-a-payment-application-using-python-flask-framework-docker-and-and-the-beyonic-api-2284</guid>
      <description>&lt;p&gt;In this article, we are going to learn how to create a payment application using Python flask framework, Docker and the Beyonic API. &lt;/p&gt;

&lt;p&gt;If you want some basics on how to use Flask to build web applications or APIS, I recommend you to read my previous article on Getting Started with Python Web Development üëáüèª &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/grayhat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkVjs71l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6aap2Bou--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/308943/da7a617c-9287-40bc-b4d6-cf99d762bedf.jpeg" alt="grayhat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/grayhat/getting-started-with-python-web-development-1jl9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting Started with Python Web Development. &lt;/h2&gt;
      &lt;h3&gt;Mwenda Harun Mbaabu „Éª Jul 30 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#beyonic-api"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Beyonic Api&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The Beyonic API is a REST based application programming interface that lets you extend the Beyonic dashboard features into your application and systems, allowing you to build amazing payment experiences.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With the Beyonic API you can:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receive and send money and prepaid airtime.&lt;/li&gt;
&lt;li&gt;List currencies and networks supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;Check whether a bank is supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;View your account transactions history.&lt;/li&gt;
&lt;li&gt;Add, retrieve, list, and update contacts to your Beyonic account.&lt;/li&gt;
&lt;li&gt;Use webhooks to send notifications to URLs on your server that when specific events occur in your Beyonic account (e.g. payments). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Getting Help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For usage, general questions, and discussions about the Beyonic API the best place to go to is &lt;a href="https://beyonic.com/join-community"&gt;Beyhive Slack Community&lt;/a&gt;, also feel free to clone and edit this repository to meet your project, application or system requirements.&lt;/p&gt;

&lt;p&gt;You can download all code snippets used in this article from this GitHub repository üëáüèª&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/HarunMbaabu"&gt;
        HarunMbaabu
      &lt;/a&gt; / &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples"&gt;
        BeyonicAPI-Python-Examples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Beyonic API Python official client library simplified examples using Flask, Django and Fast API.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
&lt;strong&gt;Beyonic API Python Examples.&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;The beyonic APIs Doc Reference: &lt;a href="https://apidocs.beyonic.com/" rel="nofollow"&gt;https://apidocs.beyonic.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Beyonic API is a &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer" rel="nofollow"&gt;representational state transfer&lt;/a&gt;, REST based application programming interface that lets you extend the Beyonic dashboard features into your application and systems, allowing you to build amazing payment experiences.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With the Beyonic API you can:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Receive and send money  and prepaid airtime.&lt;/li&gt;
&lt;li&gt;List currencies and networks supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;Check whether a bank is supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;View your account transactions history.&lt;/li&gt;
&lt;li&gt;Add, retrieve, list, and update contacts to your Beyonic account.&lt;/li&gt;
&lt;li&gt;Use webhooks to send notifications to URLs on your server that when specific events occur in your Beyonic account (e.g. payments).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
&lt;strong&gt;Getting Help&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;For usage, general questions, and discussions the best place to go to is &lt;a href="https://beyonic.com/join-community" rel="nofollow"&gt;Beyhive Slack Community&lt;/a&gt;, also feel free to clone and edit this repository to meet your project, application or system requirements.&lt;/p&gt;
&lt;p&gt;To start‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;To start using the Beyonic Python API, you need to start by downloading the Beyonic API official Python client library and setting your secret key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the Beyonic API Python Official client library.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Setting your secret key.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To set the secret key install the python-dotenv modeule, Python-dotenv is a Python module that allows you to specify environment variables in traditional UNIX-like ‚Äú.env‚Äù (dot-env) file within your Python project directory, it helps us work with SECRETS and KEYS without exposing them to the outside world, and keep them safe during development too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing python-dotenv modeule&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dotenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating a .env file to keep our secret keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside your .env file specify the Beyonic API Token .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.env file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;BEYONIC_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"enter your API key here"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get your API Token by clicking your user name on the bottom left of the left sidebar menu in the Beyonic web portal and selecting ‚ÄòManage my account‚Äô from the dropdown menu. The API Token is shown at the very bottom of the page. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;getExamples.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;beyonic&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt; 

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;myapi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'BEYONIC_ACCESS_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myapi&lt;/span&gt; 

&lt;span class="c1"&gt;# Listing account: Working. 
&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#Listing currencies: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;'''
supported_currencies = beyonic.Currency.list()
print(supported_currencies)

Supported currencies are: USD, UGX, KES, BXC, GHS, TZS, RWF, ZMW, MWK, BIF, EUR, XAF, GNF, XOF, XOF
'''&lt;/span&gt;

&lt;span class="c1"&gt;#Listing networks: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;"""
networks = beyonic.Network.list()
print(networks)
"""&lt;/span&gt;

&lt;span class="c1"&gt;#Listing transactions: Working. 
&lt;/span&gt;&lt;span class="n"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;#Listing contact: Working. 
&lt;/span&gt;&lt;span class="n"&gt;mycontacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mycontacts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="c1"&gt;#Listing events: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;'''
events = beyonic.Event.list()
print(events)

Error: AttributeError: module 'beyonic' has no attribute 'Event'
'''&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get these and more examples implemented using flask and Fast API frameworks from the links below: &lt;/p&gt;

&lt;p&gt;1). &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples/tree/main/FLASK"&gt;Flask framework examples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2). &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples/tree/main/FASTAPI"&gt;Fast API framework examples&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Dockerfile&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;Dockerfile&lt;/strong&gt; is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.8-slim-buster&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./requirements.txt ./requirements.txt&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "python3", "getExamples.py" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build docker image called demo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;bey&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run docker image called demo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;bey&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let create a Docker compose file to build and run a docker container using the Docker image we just created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockercomposeyml"&gt;
  &lt;/a&gt;
  &lt;strong&gt;docker-compose.yml&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;docker-compose.yml&lt;/strong&gt; is a config file for docker-compose. it allows to deploy, combine and configure multiple docker-container at the same time. the Docker "rule" is to outsource every single process to an own docker container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.6"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python getExamples.py&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/pythonBeyonicExamples&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to run the following command from the same directory where the &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file is located. The docker compose up command will start and run the entire app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; docker compose up 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
NB: The screenshot below might differ according to your account deatils and your transcations in deatils. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mj2ZU_NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq80x9uds7w47owi7mu9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mj2ZU_NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq80x9uds7w47owi7mu9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To stop the container running on daemon mode use the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;compose&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ArNRmt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3rfdgh8x0v2cfmj0xjc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ArNRmt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3rfdgh8x0v2cfmj0xjc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributing-to-this-repository"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Contributing to this repository.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;All contributions, bug reports, bug fixes, enhancements, and ideas are welcomed. I hope you enjoy reading the article as much as i enjoyed writing it, you can connect with me on twitter üëâüèª &lt;a href="https://twitter.com/HarunMbaabu"&gt;@HarunMbaabu&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>payment</category>
      <category>flask</category>
      <category>docker</category>
    </item>
    <item>
      <title> Introduction to Data structures and Algorithms in Python</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Sun, 10 Oct 2021 18:44:47 +0000</pubDate>
      <link>https://dev.to/luxacademy/data-structures-and-algorithms-in-python-2i88</link>
      <guid>https://dev.to/luxacademy/data-structures-and-algorithms-in-python-2i88</guid>
      <description>&lt;p&gt;Data structures are a way of organizing and storing data so that they can be accessed and worked with efficiently while Algorithms are sequence of well defined instructions  for solving a problem or a accomplishing a given task.&lt;/p&gt;

&lt;p&gt;This article gives a detailed understanding of the most commonly used data structures that is Stack and queue and their implementation in python.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  STACK
&lt;/h6&gt;

&lt;p&gt;Stack is one of the earliest data structure defined in computer science as a linear data structure which stores items using LIFO( Last In Last Out) principle for insertion and deletion.&lt;/p&gt;

&lt;p&gt;To get a clear understanding of a stack think about a pile/stack of books. You add a book at the top of the stack, so the first one to be picked up will be the last one that was added to the stack.&lt;/p&gt;

&lt;p&gt;Stack has two operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Push- adds an item to the top of the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSTJKdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdfuftiufnmwhcpbbh1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSTJKdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdfuftiufnmwhcpbbh1i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pop- removes an item from the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yx_3jLxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92m8rulj7nn08wry5dkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yx_3jLxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92m8rulj7nn08wry5dkf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#why-do-we-use-stacks"&gt;
  &lt;/a&gt;
  Why do we use stacks?
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Stack are simple to learn and implement.&lt;/li&gt;
&lt;li&gt;Stack allows us store and retrieve data sequentially.&lt;/li&gt;
&lt;li&gt;Stacks take O(1) time for insert and delete operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#real-world-use-cases-of-a-stack"&gt;
  &lt;/a&gt;
  Real world use cases of a stack.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Web browsers use stack to keep track of URL that you have accessed previously. When you visit a new page, it is added to the stack when you hit the back button, stack is popped and previous URL is accessed.&lt;/li&gt;
&lt;li&gt;Undo mechanism in text editor uses stack to keep all changes.&lt;/li&gt;
&lt;li&gt;To implement other data structures- stack is used to implement searches in graphs and trees.&lt;/li&gt;
&lt;li&gt;Compilers and Parsers uses stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://tutorialsbookmarks.com/applications-of-stack-in-data-structure/"&gt;More applications of Stack Data structures&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#stack-methods"&gt;
  &lt;/a&gt;
  Stack Methods
&lt;/h6&gt;

&lt;p&gt;Stack operations are implemented using the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stack.IsEmpty- Returns True if a stack is empty and false otherwise.&lt;/li&gt;
&lt;li&gt;stack.length()- Returns length of stack.&lt;/li&gt;
&lt;li&gt;stack.top()- returns a pointer/reference to top element in stack.&lt;/li&gt;
&lt;li&gt;stack.push(x)- inserts element x to the top of the stack.&lt;/li&gt;
&lt;li&gt;stack.pop()- Removes top element of stack and returns it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#stack-implementation-in-python"&gt;
  &lt;/a&gt;
  Stack implementation in Python.
&lt;/h6&gt;

&lt;p&gt;In python, we can implement stack using the following ways;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using the built-in List data structure. &lt;/li&gt;
&lt;li&gt;Using the deque library which efficiently provides stack operations in one object. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stack Using List.&lt;/p&gt;

&lt;p&gt;To implement stack using list, &lt;strong&gt;append&lt;/strong&gt; and &lt;strong&gt;pop&lt;/strong&gt; methods are used.&lt;br&gt;
append() method in python adds a single item to the existing list&lt;br&gt;
pop() removes the element at the specified position&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'stack'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'queue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'list'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tuple'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['stack', 'queue', 'list', 'tuple']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using pop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1HaKVwd6zhK92vLn45xm1Cim-0fIoD0bu?usp=sharing"&gt;Check this implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.edureka.co/blog/stack-in-python/"&gt; Read More about stacks&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#queues"&gt;
  &lt;/a&gt;
  QUEUES
&lt;/h6&gt;

&lt;p&gt;Just like a stack, a queue is a linear data structure. &lt;br&gt;
Queue stores items using FIFO (First in first out) principle for insertion and deletion.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#operations-associated-with-queue-in-python"&gt;
  &lt;/a&gt;
  Operations Associated with Queue in Python.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enqueue: It adds an element to the end of the queue. When the queue reaches its total capacity, it reaches an overflow condition. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dequeue: Removes an element from the queue.  When the queue becomes empty, it reaches an underflow condition. &lt;/li&gt;
&lt;li&gt;Front: returns the first item from the queue. &lt;/li&gt;
&lt;li&gt;Rare: Returns the last item from the queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#applications-of-a-queue"&gt;
  &lt;/a&gt;
  Applications of a Queue
&lt;/h6&gt;

&lt;p&gt;A queue is useful in the following scenarios;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling interrupts in real-time systems- interrupts are handled in same order as they arrive.&lt;/li&gt;
&lt;li&gt;Handling website traffic.&lt;/li&gt;
&lt;li&gt;Serving request on a single shared resource like a printer or CPU task scheduling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/applications-of-queue-data-structure/"&gt;Applications of Queue Data Structure&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#how-to-implement-queue-in-python"&gt;
  &lt;/a&gt;
  How to implement queue in Python
&lt;/h6&gt;

&lt;p&gt;There are different ways to implement a queue in Python. The &lt;br&gt;
common ways are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using built-in List data structure.&lt;/li&gt;
&lt;li&gt;Using collections.deque library&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#implementing-a-queue-in-python-with-a-list"&gt;
  &lt;/a&gt;
  Implementing a Queue in Python with a List
&lt;/h6&gt;

&lt;p&gt;The list‚Äôs append() and pop() methods are used to insert and delete elements from the queue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Initialize a queue
&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c1"&gt;# Adding elements to the queue
&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Javascript'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Typescript'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Python', 'Javascript', 'Typescript']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Removing elements from the queue
&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Python
Javascript
Typescript
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#implementing-a-queue-in-python-with-collectionsdeque"&gt;
  &lt;/a&gt;
  Implementing a Queue in Python with collections.deque
&lt;/h6&gt;

&lt;p&gt;The deque class from the python collections module can also be used to implement a queue. It is more efficient because deque provides faster enqueue and dequeue operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;rom&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;deque&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Black'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'White'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Orange'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deque(['Black', 'White', 'Orange'])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoy reading the article as much as I enjoyed writing it, the following are the useful resources and reference materials that i used. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1bd6jJFKrOZLgxMC_ieJYJNe2L48n4Fx1?usp=sharing"&gt;Find the full source code here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.section.io/engineering-education/queue-data-structure-python/"&gt;Using the Queue Data Structure in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/edpresso/how-to-implement-a-queue-in-python?utm_term=&amp;amp;utm_campaign=%5BTest%5D+Dynamic+Verticals&amp;amp;utm_source=adwords&amp;amp;utm_medium=ppc&amp;amp;hsa_acc=5451446008&amp;amp;hsa_cam=14045073269&amp;amp;hsa_grp=128822123241&amp;amp;hsa_ad=535845844735&amp;amp;hsa_src=g&amp;amp;hsa_tgt=aud-597782228546:dsa-1394252596758&amp;amp;hsa_kw=&amp;amp;hsa_mt=b&amp;amp;hsa_net=adwords&amp;amp;hsa_ver=3&amp;amp;gclid=Cj0KCQjwnoqLBhD4ARIsAL5JedKJSQeXV9jwhJBGLrU1JocjSGoeNKUGTkvbmC6EPXogXDL7tKFmaBgaAo2CEALw_wcB"&gt;How to implement a queue in Python&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creating a simple timer and score keeper in JavaScript.</title>
      <author>davidchedrick</author>
      <pubDate>Sun, 10 Oct 2021 18:40:31 +0000</pubDate>
      <link>https://dev.to/davidchedrick/creating-a-simple-timer-and-score-keeper-in-javascript-394g</link>
      <guid>https://dev.to/davidchedrick/creating-a-simple-timer-and-score-keeper-in-javascript-394g</guid>
      <description>&lt;p&gt;We are going to focus on creating a simple timer and score keeper using just HTML and JavaScript.&lt;/p&gt;

&lt;p&gt;First we will start with creating our index.html with just basic HTML and our script tag that will connect our index.html and index.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Game&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script src="index.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, within the body we will add a div with an ID of "gameDiv". This div will hold the content of our game. Within "gameDiv" we will add two more divs that will hold our Time and Score. Both will contain a span that will hold our counts. These count numbers are what we will be manipulating with our JavaScript. As you see bellow, I named the spans with an ID of "timer" and "score". Remember,all of these ID names are what I chose to call them. You can name them whatever you want, but the name should be something that makes since to you and other people reading your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;div id="gameDiv"&amp;gt;
        &amp;lt;div&amp;gt;Time: &amp;lt;span id="timer"&amp;gt;10&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Score: &amp;lt;span id="score"&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="index.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all we will put in our HTML file. Everything else will be done with JavaScript.&lt;br&gt;
Start with creating a index.js that we already connected to our index.html. &lt;/p&gt;

&lt;p&gt;First we will start with our global variables. &lt;br&gt;
The .querySelector() makes it easier to write our code buy adding our selections into variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const gameDiv= document.querySelector('#gameDiv');
let timer = document.querySelector('#timer');
let score = document.querySelector('#score');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;startCountDown holds our setInterval() method which calls our function countDown, and we will add a 1000 millisecond delay:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let startCountDown = setInterval(countDown, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Variables timeLeft and totalScore will hold the current values of our timer and score:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let timeLeft = 10;
let totalScore = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next method we will utilize will be .addEventListener()&lt;br&gt;
Once the DOM content is fully loaded it will call our first function renderGame:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.addEventListener('DOMContentLoaded', renderGame())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are into our first function. Inside this function we still have access to our variables set in our global scope, but now we will add some variables that will now only have a function scope and will not be available outside of this function.&lt;br&gt;
First we will create a new DIV using the .createElement() method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function renderGame() {
    const gameCard = document.createElement('div');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will create a button. &lt;br&gt;
Now that we stored that created button into the variable click we can now type click to access our button.&lt;br&gt;
Now we add in some text for our button and then we add on an event listener to our button. Our event listener will be triggered by a click from the mouse and will call on our function pointsClick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const click = document.createElement('button');
    click.textContent = 'CLICK FOR POINTS ';
    click.addEventListener('click', pointsClick);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly in this function we append our click variable to our gamecard. Then we append our gamecard to our gameDiv:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    gameCard.append(click);
    gameDiv.append(gameCard);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next function is pointsClick. It is called by the previous event listener we added in. Every time the button we created is clicked it triggers the event listener. &lt;br&gt;
First in this function totalScore++ adds one to our score and score.innerText changes our score from a 0 to 1 on our webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function pointsClick() {
    totalScore++
    score.innerText = totalScore
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our countDown function was called at the top when we set our variable in global scope for our .setInterval() method. &lt;br&gt;
First timeLeft-- will countdown our timer and timer.innerText will reflect that on our webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function countDown(){
    timeLeft--;
    timer.innerText = timeLeft;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once timeLeft hits 0 we need an if statement to let the program know to go to our gameOver function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    if(timeLeft === 0){
        gameOver();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our last function is gameOver(). &lt;br&gt;
First we clearInterval so that our timer stops at 0.&lt;br&gt;
Next, we have to grab that button we created earlier and tell the event listener to stop. Without taking off the event listener we would be able to continue to click for points even after the timer stopped.&lt;br&gt;
Now we want to tell the player that the game is over and display the finial score.&lt;br&gt;
So we create one more element, an h1 that will display our end game text on the screen.&lt;br&gt;
Lastly we append the gameOver variable to our gameDiv.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function gameOver() {
    clearInterval(startCountDown);

    const button = document.querySelector('button')
    button.removeEventListener('click', pointsClick)

    const gameOver = document.createElement('h1');
    gameOver.innerHTML = 'GAME OVER!' + '&amp;lt;br&amp;gt;' + `Total Score: ${totalScore}`;

    gameDiv.append(gameOver);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all we need to create a timer and score keeper. Try it out for yourself and then add this into a more complicated JavaScript game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/davidchedrick/pen/GRvRBNZ"&gt;Click to see my example code.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Free Cloud Storage</title>
      <author>Beginner Developer</author>
      <pubDate>Sun, 10 Oct 2021 18:08:46 +0000</pubDate>
      <link>https://dev.to/beginnerdeveloper/10-free-cloud-storage-33i6</link>
      <guid>https://dev.to/beginnerdeveloper/10-free-cloud-storage-33i6</guid>
      <description>&lt;p&gt;With cloud storage, all your data is safely stored in a remote database, so you do not need to store it locally on your computer hard drive or other storage device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sync"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.sync.com/"&gt;Sync&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XA3HzYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46i7er9xhi46984yr5az.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XA3HzYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46i7er9xhi46984yr5az.PNG" alt="Sync"&gt;&lt;/a&gt;&lt;br&gt;
Most cloud storage providers differ from Sync because they can access, scan and read your files. Sync's end-to-end encrypted storage platform and apps ensure that only you can access your data in the cloud. Sync can‚Äôt read your files and no one else can either.&lt;br&gt;
&lt;strong&gt;Storage: 5GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-blomp"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.blomp.com/"&gt;Blomp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhWwxaic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfhi9m9b6bs41k8zwj5a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhWwxaic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfhi9m9b6bs41k8zwj5a.PNG" alt="Blomp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Storage: 20GB&lt;/strong&gt;&lt;br&gt;
Get 20GB of storage for every referral.&lt;br&gt;
Up to 200GB of storage can be added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-degoo"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://degoo.com/"&gt;Degoo&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw5kTI7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqeyzhqxrgjcbg785109.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw5kTI7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqeyzhqxrgjcbg785109.PNG" alt="Degoo"&gt;&lt;/a&gt;&lt;br&gt;
AI based cloud storage that helps you rediscover your best photos.&lt;br&gt;
&lt;strong&gt;Storage: 100GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-icedrive"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://icedrive.net/"&gt;Icedrive&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTeBnJ7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzp1cop856pogny5bqnr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTeBnJ7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzp1cop856pogny5bqnr.PNG" alt="Icedrive"&gt;&lt;/a&gt;&lt;br&gt;
You can easily access, manage, and update your cloud storage with Icedrive, a next-generation cloud service.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-mega"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://mega.io/"&gt;Mega&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkAUZ0ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avv90w9b30fg6el1qyiy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkAUZ0ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avv90w9b30fg6el1qyiy.PNG" alt="Mega"&gt;&lt;/a&gt;&lt;br&gt;
COVID-19 has forever changed the way we work. Working remotely is now a reality and the need to keep your data secure is more important than ever. At MEGA we give millions of users with peace of mind thanks to our no-compromise user-controlled end-to-end encryption. You can rest easy knowing MEGA is a very strong link in your security chain.&lt;br&gt;
&lt;strong&gt;Storage: 20GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-media-fire"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.mediafire.com/"&gt;Media Fire&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EdTTdit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw5lf8oq8n9bfoqdpwyd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EdTTdit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw5lf8oq8n9bfoqdpwyd.PNG" alt="Media Fire"&gt;&lt;/a&gt;&lt;br&gt;
File storage made easy ‚Äì including powerful features you won‚Äôt find anywhere else. Whether you‚Äôre sharing photos, videos, audio, or docs, MediaFire can simplify your workflow.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-pcloud"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.pcloud.com/"&gt;pCloud&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zK61vBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoyodxt7l4l2ksymr0ds.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zK61vBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoyodxt7l4l2ksymr0ds.PNG" alt="pCloud"&gt;&lt;/a&gt;&lt;br&gt;
No matter how many files and folders you store in the pCloud, all of your data will be at your fingertips. Regardless of how you use your space in the cloud - via web, desktop or mobile - your files are truly easy to manage.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8internxt"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://internxt.com/"&gt;Internxt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0EfE8N2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq9yhqy016ots5sde552.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0EfE8N2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq9yhqy016ots5sde552.PNG" alt="Internxt"&gt;&lt;/a&gt;&lt;br&gt;
Transfer all your files to Yandex.Disk to access and edit them as easily as files on your hard drive.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-google-drive"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.google.com/drive/"&gt;Google Drive&lt;/a&gt; üòÅüòÄ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5M6ImHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nngec1ydaeqrr9v38vx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5M6ImHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nngec1ydaeqrr9v38vx.PNG" alt="Google Drive"&gt;&lt;/a&gt;&lt;br&gt;
This one doesn't need a description üòÅ.&lt;br&gt;
&lt;strong&gt;Storage: 15GB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My Blog:- &lt;a href="https://beginners-developer.blogspot.com"&gt;Beginner Developer Blog&lt;/a&gt;&lt;br&gt;
Website:- &lt;a href="https://ejaazrkhan.github.io/portfolio"&gt;https://ejaazrkhan.github.io/portfolio&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>React  useState</title>
      <author>abhisheks-12</author>
      <pubDate>Sun, 10 Oct 2021 18:05:35 +0000</pubDate>
      <link>https://dev.to/abhisheks12/react-usestate-4o71</link>
      <guid>https://dev.to/abhisheks12/react-usestate-4o71</guid>
      <description>&lt;p&gt;Hey guys this is my first blog...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LFfsrzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnx1f7048a9pik1ujpt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LFfsrzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnx1f7048a9pik1ujpt1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Suppose we have to render name in react app . We can save that name  in simple variable and render that name .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGEzS6lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb840l0texxq5mbbj17b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGEzS6lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb840l0texxq5mbbj17b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
But what if we want to change name to Alfred after clicking Change Name button , so let's pass changeName function . In changeName function if we change value of variable name to Alfred that's not going to work.&lt;/p&gt;

&lt;p&gt;So here we use useState hook .&lt;br&gt;
for using useState hook first we need to import it from react.&lt;br&gt;
Example-&lt;br&gt;
1.import { useState } from "react";&lt;/p&gt;

&lt;p&gt;With help of useState we set two variables like &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Y34dCR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/val54vomp5w5bfjfiatd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Y34dCR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/val54vomp5w5bfjfiatd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here name variable represents Bruce , after that in changeName  function we use setName variable to set name to Alfred.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evYQAXtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnanxubx46drkvk062cw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evYQAXtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnanxubx46drkvk062cw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
now after click name will change to Alfred. We can pass different type of  data in useState hook.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>react</category>
      <category>reacthooks</category>
    </item>
    <item>
      <title>Is "AI" generated music finally useful? [for Indie Game Devs]</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 10 Oct 2021 17:52:10 +0000</pubDate>
      <link>https://dev.to/inhuofficial/is-machine-learning-generated-music-finally-useful-for-indie-game-devs-1flp</link>
      <guid>https://dev.to/inhuofficial/is-machine-learning-generated-music-finally-useful-for-indie-game-devs-1flp</guid>
      <description>&lt;p&gt;A short post about a service I stumbled across called AIVA.&lt;/p&gt;

&lt;p&gt;I have been working on systemising my processes for content creation. &lt;/p&gt;

&lt;p&gt;One thing that I want to do is to create some YouTube shorts (1-2 minute videos, same as TikTok / Instagram stories type videos) and I was looking for some subtle background music that wouldn't be copyrighted.&lt;/p&gt;

&lt;p&gt;While searching I stumbled across &lt;a href="https://aiva.ai/"&gt;https://aiva.ai/&lt;/a&gt; - a service to generate AI music.&lt;/p&gt;

&lt;p&gt;As with anything new and interesting, I had to have a play!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-impressions"&gt;
  &lt;/a&gt;
  First impressions
&lt;/h2&gt;

&lt;p&gt;It was easy to use, even for a dummy like me!&lt;/p&gt;

&lt;p&gt;You just select a few things such as what style of music / instrumentation you want, duration (up to 3 minutes for free tier), tempo, key and time signature and then select how many tracks you want the AI to produce (up to 5 at a time).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UpG_b3aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/err1f9febjvtvhpgagtk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UpG_b3aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/err1f9febjvtvhpgagtk.jpg" alt="Screen allowing you to set the instrumentation, duration, tempo, key that you would like AIVA to generate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you press "Create Your Track" and wait for a minute or two.&lt;/p&gt;

&lt;p&gt;You can then listen to the AI masterpiece...or disaster!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-results"&gt;
  &lt;/a&gt;
  Consistency / results
&lt;/h2&gt;

&lt;p&gt;From about 100 tracks I generated I would say that 1 in 15 tracks are decent enough that you could possibly use them, a lot of them end up with too heavy a drum beat or some weird transitions etc.&lt;/p&gt;

&lt;p&gt;Despite that I am impressed with the results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-enough-for-indie-game-developers"&gt;
  &lt;/a&gt;
  Good enough for Indie game developers?
&lt;/h2&gt;

&lt;p&gt;They aren't perfect, but if you have next to no budget for sound tracks they will probably be good enough! &lt;/p&gt;

&lt;p&gt;I found about 6 tracks that I think would work for a low budget Indie game, which isn't bad considering I did no editing on the tracks (other than removing some weird bits from the end of the first example below).&lt;/p&gt;

&lt;p&gt;With a bit of work and tweaking I imagine you could make them feel like high quality pieces composed just for the game. &lt;/p&gt;

&lt;p&gt;Or at the very least use them as inspiration pieces to make the ideation part of music design a lot shorter (and therefore a lot cheaper!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Here are three examples I downloaded of tracks that I think are pretty much good enough for usage.&lt;/p&gt;

&lt;p&gt;I have given them some fun names and the sort of game I think they would work for, enjoy AIVAs work!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-draigon-born"&gt;
  &lt;/a&gt;
  Example 1 - DrAIgon born
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/1//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2-pairates-adventures"&gt;
  &lt;/a&gt;
  Example 2 - PAIrates Adventures
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-in-spaice-no-one-can-hear-you-scraim"&gt;
  &lt;/a&gt;
  Example 3 - In SpAIce, no one can hear you scrAIm
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-do-you-think"&gt;
  &lt;/a&gt;
  So what do you think?
&lt;/h2&gt;

&lt;p&gt;Do you think Machine Learning has come far enough to generate some useful music / sound tracks?&lt;/p&gt;

&lt;p&gt;Could you picture a game with one of these sound tracks in it?&lt;/p&gt;

&lt;p&gt;I personally think some of the Hip Hop, Low-Fi and Easy Listening stuff it produces would make great background music for streams and videos (the main reason I am exploring the service) with a very slim chance of a copyright strike! &lt;/p&gt;

&lt;p&gt;I would encourage you to have a play yourself and see what you think!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quick-poll"&gt;
  &lt;/a&gt;
  Quick Poll
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/mVI1C_cFsibjD0kNayrE1/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Cover image: &lt;a href="https://unsplash.com/photos/U3sOwViXhkY?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>machinelearning</category>
      <category>discuss</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Validating Markup: Write Your Own Snippet</title>
      <author>Mads Stoumann</author>
      <pubDate>Sun, 10 Oct 2021 17:36:24 +0000</pubDate>
      <link>https://dev.to/madsstoumann/validating-markup-write-your-own-snippet-2p8d</link>
      <guid>https://dev.to/madsstoumann/validating-markup-write-your-own-snippet-2p8d</guid>
      <description>&lt;p&gt;I always validate my markup. Why? There are several reasons, the main ones being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If the markup is invalid, the browser will have to spend more time guessing and interpreting what the markup &lt;em&gt;should most likely be like&lt;/em&gt;. This will take longer to process, and thus = slower rendering.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Screen-readers can/will fail for the same reasons.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search-engines will index your site faster, if the crawler does not have to interpret invalid markup.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To validate your markup, just go to &lt;a href="https://validator.w3.org/"&gt;https://validator.w3.org/&lt;/a&gt; and paste a url, upload a file, or input HTML directly.&lt;/p&gt;

&lt;p&gt;While this works, it's &lt;strong&gt;not ideal for local development.&lt;/strong&gt; That's why, I've been using &lt;a href="https://www.validity.org.uk/"&gt;Validity&lt;/a&gt; for a number of years to check my markup for errors. &lt;/p&gt;

&lt;p&gt;Unfortunately, it's recently been &lt;strong&gt;removed from the Chrome Web Store&lt;/strong&gt; ‚òπÔ∏è&lt;/p&gt;

&lt;p&gt;Luckily, W3 has a &lt;a href="https://validator.w3.org/docs/api.html"&gt;Validation API&lt;/a&gt; we can use instead. &lt;/p&gt;

&lt;p&gt;Let's look into how we can create our own validation-snippet!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#creating-a-snippet"&gt;
  &lt;/a&gt;
  Creating a snippet
&lt;/h2&gt;

&lt;p&gt;In &lt;em&gt;Chrome Dev Tools&lt;/em&gt;, go to ‚ÄúSources &amp;gt; Snippets‚Äù and click on ‚Äú+ New snippet‚Äù.&lt;/p&gt;

&lt;p&gt;Paste the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://validator.nu/?out=json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-cache&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;same-origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;follow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;referrerPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-referrer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLSerializer&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;serializeToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the snippet, rename it to ‚Äúvalid‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxn5QHIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rofw8u7iai1a6k7lhic4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxn5QHIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rofw8u7iai1a6k7lhic4.png" alt="Snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This snippet will &lt;code&gt;POST&lt;/code&gt; the markup of the current page to W3's validator, and return &lt;code&gt;json&lt;/code&gt; with validation-information. &lt;/p&gt;

&lt;p&gt;To run the snippet, press &lt;code&gt;‚åò/CTRL+ENTER&lt;/code&gt; after the last line of code.&lt;/p&gt;

&lt;p&gt;Does it run? Good! In the future, to run the snippet, just press &lt;code&gt;‚åò+O&lt;/code&gt; (MAC) or &lt;code&gt;CTRL+O&lt;/code&gt; (PC) ‚Äì then type &lt;code&gt;!valid&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#formatting-the-output"&gt;
  &lt;/a&gt;
  Formatting the output
&lt;/h2&gt;

&lt;p&gt;Now, by using all the wonderful methods of &lt;code&gt;console&lt;/code&gt;, let's format the output. &lt;/p&gt;

&lt;p&gt;Replace &lt;code&gt;console.log(data)&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;subType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`%c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; validation warnings`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color:#FFFBE5;padding:1px 4px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupCollapsed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`%c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (line: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastLine&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color:#FFFBE5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`%c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; validation errors`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color:#D93025;color:#FFF;padding:1px 4px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupCollapsed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`%c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (line: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastLine&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:#D93025&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the snippet (‚åò/CTRL+S), and check it out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LL8cSTZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ln9ogwoiaybh0jz3wz3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LL8cSTZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ln9ogwoiaybh0jz3wz3.png" alt="Console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can then expand each warning- or error-line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAsEB6-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjv1z46enkctkqi9nr4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAsEB6-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjv1z46enkctkqi9nr4t.png" alt="Expanded error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The latter is using &lt;code&gt;console.table()&lt;/code&gt;, but could also be &lt;code&gt;console.dir&lt;/code&gt; ‚Äì or whatever way you want to present the error.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I now have a fast way to validate local markup again! If you're using the snippet on external sites or with sites that have a ‚ÄúContent Security Policy‚Äù, you &lt;em&gt;might&lt;/em&gt; run into issues and have to update the snippet.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How to Enable SSL for Local Laravel Sail Development Caddy and Docker</title>
      <author>Adrian Mejias</author>
      <pubDate>Sun, 10 Oct 2021 17:21:02 +0000</pubDate>
      <link>https://dev.to/adrianmejias/how-to-enable-ssl-for-local-development-using-laravel-sail-and-docker-51ee</link>
      <guid>https://dev.to/adrianmejias/how-to-enable-ssl-for-local-development-using-laravel-sail-and-docker-51ee</guid>
      <description>&lt;p&gt;Let's talk SSL and local development; don't worry, I've been searching too.&lt;/p&gt;

&lt;p&gt;There is an issue with developing locally, not just with &lt;code&gt;Laravel&lt;/code&gt;, where developers who are building saas products aren't able to get a &lt;code&gt;clean&lt;/code&gt; setup for &lt;code&gt;SSL&lt;/code&gt; in the browser. This makes setting things up like &lt;code&gt;PWA&lt;/code&gt;s or &lt;code&gt;Google&lt;/code&gt; sign-in buttons impossible if the certificate isn't valid.&lt;/p&gt;

&lt;p&gt;Given the power of &lt;code&gt;Docker&lt;/code&gt; and &lt;code&gt;Caddy&lt;/code&gt;, the dream is real. You can absolutely use this for non-Laravel &lt;code&gt;Sail&lt;/code&gt; web applications as well.&lt;/p&gt;

&lt;p&gt;The end result of implementing the code below should give you a couple of certificates &lt;code&gt;(intermediate.crt, laravel.test.crt)&lt;/code&gt; that you can install to your local system.&lt;/p&gt;

&lt;p&gt;GitHub Gist: &lt;a href="https://gist.github.com/adrianmejias/0997f2b8a20715428f594a4798e034f5"&gt;https://gist.github.com/adrianmejias/0997f2b8a20715428f594a4798e034f5&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;docker/

&lt;ul&gt;
&lt;li&gt;caddy/&lt;/li&gt;
&lt;li&gt;authorities/ (intermediate.crt)&lt;/li&gt;
&lt;li&gt;certificates/

&lt;ul&gt;
&lt;li&gt;laravel.test/ (laravel.test.crt)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Caddyfile&lt;/li&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;start-container&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docker-compose.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dockercomposeyml"&gt;
  &lt;/a&gt;
  docker-compose.yml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="na"&gt;laravel.test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Comment or remove ports&lt;/span&gt;
        &lt;span class="c1"&gt;# ports:&lt;/span&gt;
        &lt;span class="c1"&gt;#     - "${APP_PORT:-80}:80"&lt;/span&gt;
   &lt;span class="c1"&gt;# ...&lt;/span&gt;
   &lt;span class="na"&gt;caddy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy"&lt;/span&gt;
            &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile&lt;/span&gt;
            &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;WWWGROUP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${WWWGROUP}"&lt;/span&gt;
        &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${APP_PORT:-80}:80"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${APP_SSL_PORT:-443}:443"&lt;/span&gt;
        &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;LARAVEL_SAIL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="na"&gt;HOST_DOMAIN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;laravel.test&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/Caddyfile:/etc/caddy/Caddyfile"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.:/srv:cache"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/certificates:/data/caddy/certificates/local"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/authorities:/data/caddy/pki/authorities/local"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sailcaddy:/data:cache"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sailcaddyconfig:/config:cache"&lt;/span&gt;
        &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sail&lt;/span&gt;
        &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;laravel.test&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="na"&gt;sailcaddy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;sailcaddyconfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddydockerfile"&gt;
  &lt;/a&gt;
  docker/caddy/Dockerfile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; caddy:alpine&lt;/span&gt;

&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; maintainer="Adrian Mejias"&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; WWWGROUP&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; DEBIAN_FRONTEND noninteractive&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; TZ=UTC&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-snf&lt;/span&gt; /usr/share/zoneinfo/&lt;span class="nv"&gt;$TZ&lt;/span&gt; /etc/localtime &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$TZ&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /etc/timezone

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; bash &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; nss-tools &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup &lt;span class="nt"&gt;-S&lt;/span&gt; &lt;span class="nv"&gt;$WWWGROUP&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;adduser &lt;span class="nt"&gt;-G&lt;/span&gt; &lt;span class="nv"&gt;$WWWGROUP&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; 1337 &lt;span class="nt"&gt;-S&lt;/span&gt; sail

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; start-container /usr/local/bin/start-container&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x /usr/local/bin/start-container

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["start-container"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddystartcontainer"&gt;
  &lt;/a&gt;
  docker/caddy/start-container
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env sh&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WWWUSER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;addgroup &lt;span class="nv"&gt;$WWWUSER&lt;/span&gt; sail
&lt;span class="k"&gt;fi

if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$# &lt;/span&gt;&lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# @todo find alpine equivilent of below&lt;/span&gt;
    &lt;span class="c"&gt;# exec gosu $WWWUSER "$@"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    /usr/bin/caddy run &lt;span class="nt"&gt;--config&lt;/span&gt; /etc/caddy/Caddyfile &lt;span class="nt"&gt;--adapter&lt;/span&gt; caddyfile
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddycaddyfile"&gt;
  &lt;/a&gt;
  docker/caddy/Caddyfile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    admin off
    # debug

    on_demand_tls {
        ask http://laravel.test/caddy
    }

    local_certs
}

:80 {
    reverse_proxy laravel.test {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-Host {host}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Port 443
        # header_up X-Forwarded-Proto {scheme}

        health_timeout 5s
    }
}

:443 {
    tls internal {
        on_demand
    }

    reverse_proxy laravel.test {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-Host {host}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Port 443
        # header_up X-Forwarded-Proto {scheme}

        health_timeout 5s
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#apphttpcontrollerscaddycontrollerphp"&gt;
  &lt;/a&gt;
  app/Http/Controllers/CaddyController.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaddyController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'domain'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'caddy.authorized'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Domain Authorized'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configcaddyphp"&gt;
  &lt;/a&gt;
  config/caddy.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Authorized Domains
    |--------------------------------------------------------------------------
    |
    | Domains that are authorized to be viewed through Caddy.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'authorized'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'laravel.test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// 'app.laravel.test',&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#apphttpmiddlewaretrustproxiesphp"&gt;
  &lt;/a&gt;
  app/Http/Middleware/TrustProxies.php
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Middleware&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Middleware\TrustProxies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TrustProxies&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Middleware&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * The trusted proxies for this application.
     *
     * @var array|string|null
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$proxies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Add wildcard or specific domain(s)&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_FOR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_HOST&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_PORT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_PROTO&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_AWS_ELB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routeswebphp"&gt;
  &lt;/a&gt;
  routes/web.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Controllers\CaddyController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/caddy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CaddyController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'caddy'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>laravel</category>
      <category>ssl</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>SQS Queue with across account Lambda triggers</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 10 Oct 2021 17:17:51 +0000</pubDate>
      <link>https://dev.to/aws-builders/sqs-queue-with-across-account-lambda-triggers-4job</link>
      <guid>https://dev.to/aws-builders/sqs-queue-with-across-account-lambda-triggers-4job</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;AWS SQS&lt;/a&gt; was limited to &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda functions&lt;/a&gt; triggers which belonged to the same account where the SQS Queue is created. Now with the recent announcement, we can &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/aws-lambda-lambda-function-amazon-sqs-queue/"&gt;trigger Lambda functions from a different account&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eqXOgyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/919311122808807426/lo9aQouC_normal.jpg" alt="What‚Äôs New on AWS profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        What‚Äôs New on AWS
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @awswhatsnew
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      AWS Lambda now supports triggering Lambda functions from an Amazon SQS queue in a different account&lt;br&gt;&lt;br&gt;AWS Lambda¬†now allows customers to trigger functions from Amazon Simple Queue Service (Amazon SQS) queues that are in a different AWS account. Previ... &lt;a href="https://t.co/OsTC4VSKT0"&gt;aws.amazon.com/about-aws/what‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:46 PM - 30 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443663581954773021" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443663581954773021" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443663581954773021" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h4&gt;

&lt;p&gt;The architecture of cross account Lambda triggers would be as Account 1 which has the SQS Queue with existing Lambda function triggers in the same account, now the Lambda function in Account 2 can be added as the trigger with the Lambda function ARN.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6RMGY-6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkyeavwkuf9y5lermsd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6RMGY-6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkyeavwkuf9y5lermsd7.png" alt="Architecute"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setting-up-lambda-function-trigger"&gt;
  &lt;/a&gt;
  Setting up Lambda function trigger
&lt;/h4&gt;

&lt;p&gt;Navigate to the SQS console and select the Queue, under &lt;em&gt;Lambda triggers&lt;/em&gt;, click on &lt;em&gt;Configure Lambda function trigger&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_nnUoUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txjjibh24okkzls1u9st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_nnUoUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txjjibh24okkzls1u9st.png" alt="Lambda trigger"&gt;&lt;/a&gt;&lt;br&gt;
Select the the option &lt;em&gt;Enter AWS Lambda function ARN&lt;/em&gt; and key in your Lambda function ARN from Account 2.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VcTp8ksn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dcheju1qxjzev33zre8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VcTp8ksn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dcheju1qxjzev33zre8.png" alt="Configure Lambda trigger"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#permission-and-access-to-the-sqs-queue"&gt;
  &lt;/a&gt;
  Permission and access to the SQS Queue
&lt;/h4&gt;

&lt;p&gt;Account 2 trigger Lambda function's execution role would need to be modified to give SQS access on Account 1 with the AWS managed policy &lt;code&gt;AWSLambdaSQSQueueExecutionRole&lt;/code&gt; And also SQS Queue has to be provisioned with certain access policy so that Lambda function can process the messages&lt;/p&gt;

&lt;p&gt;Lambda function execution role with &lt;code&gt;AWSLambdaSQSQueueExecutionRole&lt;/code&gt; policy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"sqs:ReceiveMessage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"sqs:DeleteMessage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"sqs:GetQueueAttributes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:CreateLogGroup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:CreateLogStream"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:PutLogEvents"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;SQS Queue access policy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2008-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"__default_policy_ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"__owner_statement"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Principal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"AWS"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:iam::account1:root"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SQS:*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:sqs:us-east-1:account1:demo"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"demo_cross_account"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Principal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"AWS"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:iam::account2:role/lambdaExecutionRole"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SQS:*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:sqs:us-east-1:account1:demo"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although, the policy states &lt;code&gt;"Action": "SQS:*"&lt;/code&gt; with &lt;code&gt;"Effect": "Allow"&lt;/code&gt;, the access rights for cross account doesn't grant you access to &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;CreateQueue&lt;/code&gt;, &lt;code&gt;DeleteQueue&lt;/code&gt;, &lt;code&gt;ListQueue&lt;/code&gt;, &lt;code&gt;ListQueueTags&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, &lt;code&gt;SetQueueAttributes&lt;/code&gt;, &lt;code&gt;TagQueue&lt;/code&gt; and &lt;code&gt;UntagQueue&lt;/code&gt; SQS actions. The only constraint for cross account Lambda triggers are both SQS and Lambda function have to be in the same AWS region.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sending-and-receiving-messages-from-sqs"&gt;
  &lt;/a&gt;
  Sending and receiving messages from SQS
&lt;/h4&gt;

&lt;p&gt;From the console, you can click on &lt;em&gt;Send and receive messages&lt;/em&gt; button and type your message and click on &lt;em&gt;Send message&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmLCW72s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg34zj1k59i67qpp6t7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmLCW72s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg34zj1k59i67qpp6t7n.png" alt="Send message"&gt;&lt;/a&gt;&lt;br&gt;
Once the message is sent to the SQS Queue, it triggers the configured Lambda functions with a SQS message records. The message is logged with CloudWatch execution logs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GH3QGdRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s160i9vtmo9rtv8xe0s8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GH3QGdRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s160i9vtmo9rtv8xe0s8.png" alt="Received message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This implementation could be tested with CLI also, you can follow the &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-cross-account-example.html"&gt;tutorial&lt;/a&gt; from AWS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;SQS being one of the oldest services has easied out integration with Lambda function triggers and now that been leveled up with cross-account Lambda function triggers it has easied the integration process for most developers who are working around to implement this. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>sqs</category>
      <category>lambdafunction</category>
      <category>triggers</category>
    </item>
    <item>
      <title>Dotnet code generation overview by example</title>
      <author>Maxim Tkachenko</author>
      <pubDate>Sun, 10 Oct 2021 17:06:55 +0000</pubDate>
      <link>https://dev.to/maximtkachenko/dotnet-code-generation-overview-by-example-1m16</link>
      <guid>https://dev.to/maximtkachenko/dotnet-code-generation-overview-by-example-1m16</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Code generation is a very interesting topic. Instead of just writing code you can write code to write code. You can do code generation at compile time (new fancy source generators) and at runtime (expressions, emit IL). Anyway the idea to create methods and classes at runtime sounds like a magic to me. Runtime code generation feature is used quite heavily under the hood of DI frameworks, ORMs, different types of object mappers etc. Now when I have a sufficient understanding of the topic I realized that in the past I had some tasks which could be solved in more efficient and elegant way by using code generation. Unfortunately during those times I knew nothing about it. Searching the internet gave me results with quite high entry threshold and they didn't give an entire understanding of the feature. Most of examples in articles are quite trivial so it's still unclear how to apply it in practice. Here as the first step I want to describe a particular problem which could be solved with &lt;a href="https://en.wikipedia.org/wiki/Metaprogramming"&gt;metaprogramming&lt;/a&gt; and then to give an overview of different code generation approaches. There will be a lot of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-description"&gt;
  &lt;/a&gt;
  Task description
&lt;/h2&gt;

&lt;p&gt;Let's imagine our application receives a data from some source as an array of strings (for simplicity only string, integer and datetime values are expected in an input array):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;["John McClane", "1994-11-05T13:15:30", "4455"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I need a generic way to parse this input into the instance of a particular class. This is an interface to create a parser delegate (i.e. it accepts an array of strings as the input and returns an instance of &lt;code&gt;T&lt;/code&gt; as the output):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public interface IParserFactory
{
    Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use &lt;code&gt;ParserOutputAttribute&lt;/code&gt; to identify classes used as parser's output. And I use &lt;code&gt;ArrayIndexAttribute&lt;/code&gt; to understand which property corresponds to each of the array elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ParserOutput]
public class Data
{
    [ArrayIndex(0)] public string Name { get; set; } // will be "John McClane"
    [ArrayIndex(2)] public int Number { get; set; } // will be 4455
    [ArrayIndex(1)] public DateTime Birthday { get; set; } // will be 1994-11-05T13:15:30
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If array element can't be parsed to the target type then it's ignored.&lt;br&gt;
So as a general idea I don't want to limit implementation by &lt;code&gt;Data&lt;/code&gt; class only. I want to produce a parser delegate for any type with the proper attributes. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#plain-c"&gt;
  &lt;/a&gt;
  Plain C#
&lt;/h2&gt;

&lt;p&gt;First of all I want to write a plain C# code without code generation or reflection at all for a known type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var data = new Data();
if (0 &amp;lt; inputArray.Length)
{
    data.Name = inputArray[0];
}
if (1 &amp;lt; inputArray.Length &amp;amp;&amp;amp; DateTime.TryParse(inputArray[1], out var bd))
{
    data.Birthday = bd;
}
if (2 &amp;lt; inputArray.Length &amp;amp;&amp;amp; int.TryParse(inputArray[2], out var n))
{
    data.Number = n;
}
return data;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quite simple, right? But now I want to generate the same code for an arbitrary type at runtime or compile time. Let's go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reflection"&gt;
  &lt;/a&gt;
  Reflection
&lt;/h2&gt;

&lt;p&gt;In the first approach with &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection"&gt;reflection&lt;/a&gt; I'm not going to generate a parser delegate. Instead I'm going to create an instance of the target type and set its properties using reflection API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class ReflectionParserFactory : IParserFactory
{
    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        return ArrayIndexParse&amp;lt;T&amp;gt;;
    }

    private static T ArrayIndexParse&amp;lt;T&amp;gt;(string[] data) where T : new()
    {
        // create a new instance of target type
        var instance = new T();
        var props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public);

        //go through all public and non-static properties
        //read and parse corresponding element in array and if success - set property value
        for (int i = 0; i &amp;lt; props.Length; i++)
        {
            var attrs = props[i].GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
            if (attrs.Length == 0) continue;

            int order = ((ArrayIndexAttribute)attrs[0]).Order;
            if (order &amp;lt; 0 || order &amp;gt;= data.Length) continue;

            if (props[i].PropertyType == typeof(string))
            {
                props[i].SetValue(instance, data[order]);
                continue;
            }

            if (props[i].PropertyType == typeof(int))
            {
                if (int.TryParse(data[order], out var intResult))
                {
                    props[i].SetValue(instance, intResult);
                }

                continue;
            }

            if (props[i].PropertyType == typeof(DateTime))
            {
                if (DateTime.TryParse(data[order], out var dtResult))
                {
                    props[i].SetValue(instance, dtResult);
                }
            }
        }
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works and it's quite readable. But it's &lt;a href="https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/"&gt;slow&lt;/a&gt; (check &lt;a href="#benchmarks"&gt;benchmarks&lt;/a&gt; section below too). If you want to call this code very often it could be an issue. I want to implement something more sophisticated using &lt;strong&gt;real&lt;/strong&gt; code generation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-generation"&gt;
  &lt;/a&gt;
  Code generation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#expression-trees"&gt;
  &lt;/a&gt;
  Expression trees
&lt;/h3&gt;

&lt;p&gt;From the &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/"&gt;official documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Expression trees represent code in a tree-like data structure, where each node is an expression, for example, a method call or a binary operation such as x &amp;lt; y. You can compile and run code represented by expression trees.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/how-to-execute-expression-trees"&gt;How to execute expression trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.expressions?view=netcore-3.1#classes"&gt;Expression classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Expression trees give primitive building blocks like &lt;code&gt;Expression.Call&lt;/code&gt; to call a method, &lt;code&gt;Expression.Loop&lt;/code&gt; to add some repeating logic etc. Then using these blocks we build a parser delegate as a &lt;code&gt;tree&lt;/code&gt; of instructions and finally compile it into the delegate at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class ExpressionTreeParserFactory : IParserFactory
{
    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        var props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public);

        //declare an input parameter of the delegate
        ParameterExpression inputArray = Expression.Parameter(typeof(string[]), "inputArray");
        //declare an output parameter of the delegate
        ParameterExpression instance = Expression.Variable(typeof(T), "instance");

        //create a new instance of target type
        var block = new List&amp;lt;Expression&amp;gt;
        {
            Expression.Assign(instance, Expression.New(typeof(T).GetConstructors()[0]))
        };
        var variables = new List&amp;lt;ParameterExpression&amp;gt; {instance};

        //go through all public and non-static properties
        foreach (var prop in props)
        {
            var attrs = prop.GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
            if (attrs.Length == 0) continue;

            int order = ((ArrayIndexAttribute)attrs[0]).Order;
            if (order &amp;lt; 0) continue;

            //validate an index from ArrayIndexAttribute
            var orderConst = Expression.Constant(order);
            var orderCheck = Expression.LessThan(orderConst, Expression.ArrayLength(inputArray));

            if (prop.PropertyType == typeof(string))
            {
                //set string property
                var stringPropertySet = Expression.Assign(
                    Expression.Property(instance, prop),
                    Expression.ArrayIndex(inputArray, orderConst));

                block.Add(Expression.IfThen(orderCheck, stringPropertySet));
                continue;
            }

            //get parser method from the list of available parsers (currently we parse only Int and DateTime)
            if (!TypeParsers.Parsers.TryGetValue(prop.PropertyType, out var parser))
            {
                continue;
            }

            var parseResult = Expression.Variable(prop.PropertyType, "parseResult");
            var parserCall = Expression.Call(parser, Expression.ArrayIndex(inputArray, orderConst), parseResult);
            var propertySet = Expression.Assign(
                Expression.Property(instance, prop),
                parseResult);

            //set property if an element of array is successfully parsed
            var ifSet = Expression.IfThen(parserCall, propertySet);

            block.Add(Expression.IfThen(orderCheck, ifSet));
            variables.Add(parseResult);
        }

        block.Add(instance);

        //compile lambda expression into delegate
        return Expression.Lambda&amp;lt;Func&amp;lt;string[], T&amp;gt;&amp;gt;(
            Expression.Block(variables.ToArray(), Expression.Block(block)), 
            inputArray).Compile();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#emit-il"&gt;
  &lt;/a&gt;
  Emit IL
&lt;/h3&gt;

&lt;p&gt;Dotnet compiler transforms your C# code into intermediate language (&lt;a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language"&gt;CIL or just IL&lt;/a&gt;) and then dotnet runtime translates IL into machine instructions. For instance, using &lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt; you can easily check how generated IL will look like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fDgpcrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtkachenko.me/blog/assets/sharplab_msil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fDgpcrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtkachenko.me/blog/assets/sharplab_msil.png" alt="C# and corresponding IL from https://sharplab.io/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit?view=net-5.0"&gt;System.Reflection.Emit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods"&gt;How to: Define and Execute Dynamic Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes?view=netcore-3.1#fields"&gt;OpCodes list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/help/resharper/Viewing_Intermediate_Language.html"&gt;ReSharper IL viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we are going to write ("emit") IL instructions directly and then compile them into the delegate at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class EmitIlParserFactory : IParserFactory
{
    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        var props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public);

        var dm = new DynamicMethod($"from_{typeof(string[]).FullName}_to_{typeof(T).FullName}", 
            typeof(T), new [] { typeof(string[]) }, typeof(EmitIlParserFactory).Module);
        var il = dm.GetILGenerator();

        //create a new instance of target type
        var instance = il.DeclareLocal(typeof(T));
        il.Emit(OpCodes.Newobj, typeof(T).GetConstructors()[0]);
        il.Emit(OpCodes.Stloc, instance);

        //go through all public and non-static properties
        foreach (var prop in props)
        {
            var attrs = prop.GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
            if (attrs.Length == 0) continue;

            int order = ((ArrayIndexAttribute)attrs[0]).Order;
            if (order &amp;lt; 0) continue;

            var label = il.DefineLabel();

            if (prop.PropertyType == typeof(string))
            {
                //check whether order from ArrayIndexAttribute is a valid index of the input array
                il.Emit(OpCodes.Ldc_I4, order);
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldlen);
                il.Emit(OpCodes.Bge_S, label);

                //set string property
                il.Emit(OpCodes.Ldloc, instance);
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldc_I4, order);
                il.Emit(OpCodes.Ldelem_Ref);
                il.Emit(OpCodes.Callvirt, prop.GetSetMethod());

                il.MarkLabel(label);
                continue;
            }

            //get parser method from the list of available parsers (currently we parse only Int and DateTime)
            if (!TypeParsers.Parsers.TryGetValue(prop.PropertyType, out var parser))
            {
                continue;
            }

            //check whether order from ArrayIndexAttribute is a valid index of the input array
            il.Emit(OpCodes.Ldc_I4, order);
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldlen);
            il.Emit(OpCodes.Bge_S, label);

            var parseResult = il.DeclareLocal(prop.PropertyType);

            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldc_I4, order);
            il.Emit(OpCodes.Ldelem_Ref);
            il.Emit(OpCodes.Ldloca, parseResult);
            il.EmitCall(OpCodes.Call, parser, null);
            il.Emit(OpCodes.Brfalse_S, label);

            //set property if an element of array is successfully parsed
            il.Emit(OpCodes.Ldloc, instance);
            il.Emit(OpCodes.Ldloc, parseResult);
            il.Emit(OpCodes.Callvirt, prop.GetSetMethod());

            il.MarkLabel(label);
        }

        il.Emit(OpCodes.Ldloc, instance);
        il.Emit(OpCodes.Ret);

        //create delegate from il instructions
        return (Func&amp;lt;string[], T&amp;gt;)dm.CreateDelegate(typeof(Func&amp;lt;string[], T&amp;gt;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sigil"&gt;
  &lt;/a&gt;
  Sigil
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kevin-montrose/Sigil"&gt;A fail-fast validating helper for .NET CIL generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach is quite similar to the previous one, but now we use sigil which gives us a syntax sugar and more understandable error messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class SigilParserFactory : IParserFactory
{
    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        var props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public);

        var il = Emit&amp;lt;Func&amp;lt;string[], T&amp;gt;&amp;gt;.NewDynamicMethod($"from_{typeof(string[]).FullName}_to_{typeof(T).FullName}");

        var instance = il.DeclareLocal&amp;lt;T&amp;gt;();
        il.NewObject&amp;lt;T&amp;gt;();
        il.StoreLocal(instance);

        foreach (var prop in props)
        {
            var attrs = prop.GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
            if (attrs.Length == 0) continue;

            int order = ((ArrayIndexAttribute)attrs[0]).Order;
            if (order &amp;lt; 0) continue;

            var label = il.DefineLabel();

            if (prop.PropertyType == typeof(string))
            {
                il.LoadConstant(order);
                il.LoadArgument(0);
                il.LoadLength&amp;lt;string&amp;gt;();
                il.BranchIfGreaterOrEqual(label);

                il.LoadLocal(instance);
                il.LoadArgument(0);
                il.LoadConstant(order);
                il.LoadElement&amp;lt;string&amp;gt;();
                il.CallVirtual(prop.GetSetMethod());

                il.MarkLabel(label);
                continue;
            }

            if (!TypeParsers.Parsers.TryGetValue(prop.PropertyType, out var parser))
            {
                continue;
            }

            il.LoadConstant(order);
            il.LoadArgument(0);
            il.LoadLength&amp;lt;string&amp;gt;();
            il.BranchIfGreaterOrEqual(label);

            var parseResult = il.DeclareLocal(prop.PropertyType);

            il.LoadArgument(0);
            il.LoadConstant(order);
            il.LoadElement&amp;lt;string&amp;gt;();
            il.LoadLocalAddress(parseResult);
            il.Call(parser);
            il.BranchIfFalse(label);

            il.LoadLocal(instance);
            il.LoadLocal(parseResult);
            il.CallVirtual(prop.GetSetMethod());

            il.MarkLabel(label);
        }

        il.LoadLocal(instance);
        il.Return();

        return il.CreateDelegate();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cache-compiled-parsers"&gt;
  &lt;/a&gt;
  Cache compiled parsers
&lt;/h3&gt;

&lt;p&gt;We have implemented three approaches to create a parser delegate: expression tree, emit IL and sigil. In all cases we have the same problem: &lt;code&gt;IParserFactory.GetParser&lt;/code&gt; does a hard job (builiding an expression tree or emitting IL and then creating delegate) every time you call it. Solution is quite simple - just cache it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class CachedParserFactory : IParserFactory
{
    private readonly IParserFactory _realParserFactory;
    private readonly ConcurrentDictionary&amp;lt;string, Lazy&amp;lt;object&amp;gt;&amp;gt; _cache;

    public CachedParserFactory(IParserFactory realParserFactory)
    {
        _realParserFactory = realParserFactory;
        _cache = new ConcurrentDictionary&amp;lt;string, Lazy&amp;lt;object&amp;gt;&amp;gt;();
    }

    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        return (Func&amp;lt;string[], T&amp;gt;)(_cache.GetOrAdd($"aip_{_realParserFactory.GetType().FullName}_{typeof(T).FullName}", 
            new Lazy&amp;lt;object&amp;gt;(() =&amp;gt; _realParserFactory.GetParser&amp;lt;T&amp;gt;(), LazyThreadSafetyMode.ExecutionAndPublication)).Value);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we reuse compiled versions of delegates which is more efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roslyn-based-approaches"&gt;
  &lt;/a&gt;
  Roslyn based approaches
&lt;/h3&gt;

&lt;p&gt;Roslyn is a dotnet compiler platform which doesn't only compile code but gives an ability to do syntax analysis and to generate code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#roslyn-runtime-code-generation"&gt;
  &lt;/a&gt;
  Roslyn runtime code generation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gunnarpeipman.com/using-roslyn-to-build-object-to-object-mapper/amp/"&gt;Using Roslyn to build object to object mapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Roslyn approach is quite interesting because it gives an ability to write plain C# (as a string though) instead of writing IL instructions or combining  expression tree blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static class RoslynParserInitializer
{
    public static IParserFactory CreateFactory()
    {
        //get all types marked with ParserOutputAttribute
        var targetTypes =
            (from a in AppDomain.CurrentDomain.GetAssemblies()
                from t in a.GetTypes()
                let attributes = t.GetCustomAttributes(typeof(ParserOutputAttribute), true)
                where attributes != null &amp;amp;&amp;amp; attributes.Length &amp;gt; 0
                select t).ToArray();

        var typeNames = new List&amp;lt;(string TargetTypeName, string TargetTypeFullName, string TargetTypeParserName)&amp;gt;();
        var builder = new StringBuilder();
        builder.AppendLine(@"
using System;
using Parsers.Common;

public class RoslynGeneratedParserFactory : IParserFactory 
{");
        //go through all types
        foreach (var targetType in targetTypes)
        {
            var targetTypeName = targetType.Name;
            var targetTypeFullName = targetType.FullName;
            var targetTypeParserName = targetTypeName + "Parser";
            typeNames.Add((targetTypeName, targetTypeFullName, targetTypeParserName));

            //generate private parser method for each target type
            builder.AppendLine($"private static T {targetTypeParserName}&amp;lt;T&amp;gt;(string[] input)");

            builder.Append($@"
{{
var {targetTypeName}Instance = new {targetTypeFullName}();");

            var props = targetType.GetProperties(BindingFlags.Instance | BindingFlags.Public);

            //go through all properties of the target type
            foreach (var prop in props)
            {
                var attrs = prop.GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
                if (attrs.Length == 0) continue;

                int order = ((ArrayIndexAttribute)attrs[0]).Order;
                if (order &amp;lt; 0) continue;

                if (prop.PropertyType == typeof(string))
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length)
{{
{targetTypeName}Instance.{prop.Name} = input[{order}];
}}
");
                }

                if (prop.PropertyType == typeof(int))
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length &amp;amp;&amp;amp; int.TryParse(input[{order}], out var parsed{prop.Name}))
{{
{targetTypeName}Instance.{prop.Name} = parsed{prop.Name};
}}
");
                }

                if (prop.PropertyType == typeof(DateTime))
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length &amp;amp;&amp;amp; DateTime.TryParse(input[{order}], out var parsed{prop.Name}))
{{
{targetTypeName}Instance.{prop.Name} = parsed{prop.Name};
}}
");
                }
            }

            builder.Append($@"
object obj = {targetTypeName}Instance;
return (T)obj;
}}");
        }

        builder.AppendLine("public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new() {");
        foreach (var typeName in typeNames)
        {
            builder.Append($@"
if (typeof(T) == typeof({typeName.TargetTypeFullName}))
{{
return {typeName.TargetTypeParserName}&amp;lt;T&amp;gt;;
}}
");
        }
        builder.AppendLine("throw new NotSupportedException();}");

        builder.AppendLine("}");

        var syntaxTree = CSharpSyntaxTree.ParseText(builder.ToString());

        //reference assemblies
        string assemblyName = Path.GetRandomFileName();
        var refPaths = new List&amp;lt;string&amp;gt; {
            typeof(Object).GetTypeInfo().Assembly.Location,
            typeof(Enumerable).GetTypeInfo().Assembly.Location,
            Path.Combine(Path.GetDirectoryName(typeof(GCSettings).GetTypeInfo().Assembly.Location), "System.Runtime.dll"),
            typeof(RoslynParserInitializer).GetTypeInfo().Assembly.Location,
            typeof(IParserFactory).GetTypeInfo().Assembly.Location,
            Path.Combine(Path.GetDirectoryName(typeof(GCSettings).GetTypeInfo().Assembly.Location), "netstandard.dll"),
        };
        refPaths.AddRange(targetTypes.Select(x =&amp;gt; x.Assembly.Location));

        var references = refPaths.Select(r =&amp;gt; MetadataReference.CreateFromFile(r)).ToArray();

        // compile dynamic code
        var compilation = CSharpCompilation.Create(
            assemblyName,
            syntaxTrees: new[] { syntaxTree },
            references: references,
            options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        //compile assembly
        using (var ms = new MemoryStream())
        {
            var result = compilation.Emit(ms);

            //to get a proper errors
            if (!result.Success)
            {
                throw new Exception(string.Join(",", result.Diagnostics.Where(diagnostic =&amp;gt;
                    diagnostic.IsWarningAsError ||
                    diagnostic.Severity == DiagnosticSeverity.Error).Select(x =&amp;gt; x.GetMessage())));
            }
            ms.Seek(0, SeekOrigin.Begin);

            // load assembly from memory
            var assembly = AssemblyLoadContext.Default.LoadFromStream(ms);

            var factoryType = assembly.GetType("RoslynGeneratedParserFactory");
            if (factoryType == null) throw new NullReferenceException("Roslyn generated parser type not found");

            //create an instance of freshly generated parser factory
            return (IParserFactory)Activator.CreateInstance(factoryType);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#source-generator"&gt;
  &lt;/a&gt;
  Source generator
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Overview of source generators from the &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview"&gt;official documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source generator gives a very interesting ability of building parser's delegate during the compilation step, i.e. in advance. So in that case we don't have any runtime overhead to build a parser delegate at the first time which is amazing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Generator]
public class ParserSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        //uncomment to debug
        //System.Diagnostics.Debugger.Launch();
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var compilation = context.Compilation;
        var parserOutputTypeSymbol = compilation.GetTypeByMetadataName("Parsers.Common.ParserOutputAttribute");
        var attributeIndexTypeSymbol = compilation.GetTypeByMetadataName("Parsers.Common.ArrayIndexAttribute");
        var typesToParse = new List&amp;lt;ITypeSymbol&amp;gt;();

        foreach (var syntaxTree in compilation.SyntaxTrees)
        {
            var semanticModel = compilation.GetSemanticModel(syntaxTree);

            //get all types marked with ParserOutputAttribute
            typesToParse.AddRange(syntaxTree.GetRoot()
                .DescendantNodesAndSelf()
                .OfType&amp;lt;ClassDeclarationSyntax&amp;gt;()
                .Select(x =&amp;gt; semanticModel.GetDeclaredSymbol(x))
                .OfType&amp;lt;ITypeSymbol&amp;gt;()
                .Where(x =&amp;gt; x.GetAttributes().Select(a =&amp;gt; a.AttributeClass)
                    .Any(b =&amp;gt; b == parserOutputTypeSymbol)));
        }

        var typeNames = new List&amp;lt;(string TargetTypeName, string TargetTypeFullName, string TargetTypeParserName)&amp;gt;();
        var builder = new StringBuilder();
        builder.AppendLine(@"
using System;
using Parsers.Common;
namespace BySourceGenerator
{
public class Parser : IParserFactory 
{");

        //go through all types
        foreach (var typeSymbol in typesToParse)
        {
            var targetTypeName = typeSymbol.Name;
            var targetTypeFullName = GetFullName(typeSymbol);
            var targetTypeParserName = targetTypeName + "Parser";
            typeNames.Add((targetTypeName, targetTypeFullName, targetTypeParserName));
            builder.AppendLine($"private static T {targetTypeParserName}&amp;lt;T&amp;gt;(string[] input)");

            builder.Append($@"
{{
var {targetTypeName}Instance = new {targetTypeFullName}();");

            var props = typeSymbol.GetMembers().OfType&amp;lt;IPropertySymbol&amp;gt;();

            //go through all properties of the target type
            foreach (var prop in props)
            {
                var attr = prop.GetAttributes().FirstOrDefault(x =&amp;gt; x.AttributeClass == attributeIndexTypeSymbol);
                if (attr == null || !(attr.ConstructorArguments[0].Value is int)) continue;

                int order = (int) attr.ConstructorArguments[0].Value;
                if (order &amp;lt; 0) continue;

                if (GetFullName(prop.Type) == "System.String")
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length)
{{
{targetTypeName}Instance.{prop.Name} = input[{order}];
}}
");
                }

                if (GetFullName(prop.Type) == "System.Int32")
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length &amp;amp;&amp;amp; int.TryParse(input[{order}], out var parsed{prop.Name}))
{{
{targetTypeName}Instance.{prop.Name} = parsed{prop.Name};
}}
");
                }

                if (GetFullName(prop.Type) == "System.DateTime")
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length &amp;amp;&amp;amp; DateTime.TryParse(input[{order}], out var parsed{prop.Name}))
{{
{targetTypeName}Instance.{prop.Name} = parsed{prop.Name};
}}
");
                }
            }

            builder.Append($@"
object obj = {targetTypeName}Instance;
return (T)obj;
}}");
        }

        builder.AppendLine("public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new() {");
        foreach (var typeName in typeNames)
        {
            builder.Append($@"
if (typeof(T) == typeof({typeName.TargetTypeFullName}))
{{
return {typeName.TargetTypeParserName}&amp;lt;T&amp;gt;;
}}
");
        }

        builder.AppendLine("throw new NotSupportedException();}");

        builder.AppendLine("}}");

        var src = builder.ToString();
        context.AddSource(
            "ParserGeneratedBySourceGenerator.cs",
            SourceText.From(src, Encoding.UTF8)
        );
    }

    private static string GetFullName(ITypeSymbol typeSymbol) =&amp;gt;
        $"{typeSymbol.ContainingNamespace}.{typeSymbol.Name}";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  Benchmarks
&lt;/h2&gt;

&lt;p&gt;The post wouldn't be comprehensive without benchmarks. I would like to compare two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;warm up step, i.e. generation of parser;&lt;/li&gt;
&lt;li&gt;invocation of already generated parser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Benchmarks are measured using &lt;a href="https://github.com/dotnet/BenchmarkDotNet"&gt;BenchmarkDotNet&lt;/a&gt;. &lt;code&gt;Œºs&lt;/code&gt; - microsecond, &lt;code&gt;ns&lt;/code&gt; - nanosecond, 1 Œºs = 1000 ns.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19043.1237 (21H1/May2021Update)
Intel Core i7-8550U CPU 1.80GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores
.NET SDK=5.0.401
  [Host]     : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT
  DefaultJob : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#generation-of-parser"&gt;
  &lt;/a&gt;
  Generation of parser
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;  Method&lt;/th&gt;
&lt;th&gt;  Mean&lt;/th&gt;
&lt;th&gt; Error&lt;/th&gt;
&lt;th&gt;StdDev&lt;/th&gt;
&lt;th&gt;Gen 0&lt;/th&gt;
&lt;th&gt;Gen 1&lt;/th&gt;
&lt;th&gt;Gen 2&lt;/th&gt;
&lt;th&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EmitIl&lt;/td&gt;
&lt;td&gt;22.02 Œºs&lt;/td&gt;
&lt;td&gt;0.495 Œºs&lt;/td&gt;
&lt;td&gt;1.429 Œºs&lt;/td&gt;
&lt;td&gt;1.2817&lt;/td&gt;
&lt;td&gt;0.6409&lt;/td&gt;
&lt;td&gt;0.0305&lt;/td&gt;
&lt;td&gt;5 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ExpressionTree&lt;/td&gt;
&lt;td&gt;683.68 Œºs&lt;/td&gt;
&lt;td&gt;13.609 Œºs&lt;/td&gt;
&lt;td&gt;31.268 Œºs&lt;/td&gt;
&lt;td&gt;2.9297&lt;/td&gt;
&lt;td&gt;0.9766&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;14 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sigil&lt;/td&gt;
&lt;td&gt;642.63 Œºs&lt;/td&gt;
&lt;td&gt;12.305 Œºs&lt;/td&gt;
&lt;td&gt;29.243 Œºs&lt;/td&gt;
&lt;td&gt;112.3047&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;460 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Roslyn&lt;/td&gt;
&lt;td&gt;71,605.64 Œºs&lt;/td&gt;
&lt;td&gt;2,533.732 Œºs&lt;/td&gt;
&lt;td&gt;7,350.817 Œºs&lt;/td&gt;
&lt;td&gt;1000.0000&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;5,826 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#invocation-of-parser"&gt;
  &lt;/a&gt;
  Invocation of parser
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;   Method&lt;/th&gt;
&lt;th&gt; Mean&lt;/th&gt;
&lt;th&gt;Error&lt;/th&gt;
&lt;th&gt;StdDev&lt;/th&gt;
&lt;th&gt;Ratio&lt;/th&gt;
&lt;th&gt;RatioSD&lt;/th&gt;
&lt;th&gt;Gen 0&lt;/th&gt;
&lt;th&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EmitIl&lt;/td&gt;
&lt;td&gt;374.7 ns&lt;/td&gt;
&lt;td&gt;7.75 ns&lt;/td&gt;
&lt;td&gt;22.36 ns&lt;/td&gt;
&lt;td&gt;1.02&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ExpressionTree&lt;/td&gt;
&lt;td&gt;378.1 ns&lt;/td&gt;
&lt;td&gt;7.56 ns&lt;/td&gt;
&lt;td&gt;20.57 ns&lt;/td&gt;
&lt;td&gt;1.03&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reflection&lt;/td&gt;
&lt;td&gt;13,625.0 ns&lt;/td&gt;
&lt;td&gt;272.60 ns&lt;/td&gt;
&lt;td&gt;750.81 ns&lt;/td&gt;
&lt;td&gt;37.29&lt;/td&gt;
&lt;td&gt;2.29&lt;/td&gt;
&lt;td&gt;0.7782&lt;/td&gt;
&lt;td&gt;3,256 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sigil&lt;/td&gt;
&lt;td&gt;378.9 ns&lt;/td&gt;
&lt;td&gt;7.69 ns&lt;/td&gt;
&lt;td&gt;21.06 ns&lt;/td&gt;
&lt;td&gt;1.03&lt;/td&gt;
&lt;td&gt;0.07&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Roslyn&lt;/td&gt;
&lt;td&gt;404.2 ns&lt;/td&gt;
&lt;td&gt;7.55 ns&lt;/td&gt;
&lt;td&gt;17.80 ns&lt;/td&gt;
&lt;td&gt;1.10&lt;/td&gt;
&lt;td&gt;0.07&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SourceGenerator&lt;/td&gt;
&lt;td&gt;384.4 ns&lt;/td&gt;
&lt;td&gt;7.79 ns&lt;/td&gt;
&lt;td&gt;21.46 ns&lt;/td&gt;
&lt;td&gt;1.05&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ManuallyWritten&lt;/td&gt;
&lt;td&gt;367.8 ns&lt;/td&gt;
&lt;td&gt;7.36 ns&lt;/td&gt;
&lt;td&gt;15.68 ns&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;All approaches besides direct usage of reflection give results almost identical to &lt;a href="#plain-c"&gt;manually written C# parser&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;Here is &lt;a href="https://github.com/MaximTkachenko/dotnet-code-generation-overview-by-example"&gt;github repository&lt;/a&gt; with parser factories, unit tests and benchmarks.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>programming</category>
    </item>
    <item>
      <title>Weekly Digest 40/2021</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 10 Oct 2021 17:00:55 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-40-2021-2dld</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-40-2021-2dld</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #40 of this year.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-i-built-a-modern-website-in-2021"&gt;
  &lt;/a&gt;
  How I built a modern website in 2021
&lt;/h3&gt;

&lt;p&gt;Kent rewrote &lt;a href="http://kentcdodds.com/"&gt;kentcdodds.com&lt;/a&gt; using the latest technologies and he wants to talk about what he did.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kentcdodds.com/blog/how-i-built-a-modern-website-in-2021"&gt;How I built a modern website in 2021&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-things-you-didnt-know-you-could-do-with-github-actions"&gt;
  &lt;/a&gt;
  4 things you didn‚Äôt know you could do with GitHub Actions
&lt;/h3&gt;

&lt;p&gt;GitHub Actions is a powerful platform that empowers your team to go from code to cloud, all from the comfort of your repositories.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.blog/2021-03-04-4-things-you-didnt-know-you-could-do-with-github-actions/"&gt;4 things you didn't know you could do with GitHub Actions | The GitHub Blog&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conditional-border-radius-in-css"&gt;
  &lt;/a&gt;
  Conditional Border Radius in CSS
&lt;/h3&gt;

&lt;p&gt;How to use CSS comparison functions to create a conditional border-radius&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ishadeed.com/article/conditional-border-radius/"&gt;Conditional Border Radius In CSS - Ahmad Shadeed&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#em-amp-rem-units"&gt;
  &lt;/a&gt;
  Em &amp;amp; Rem Units
&lt;/h3&gt;

&lt;p&gt;Em and Rem units are used to size your text elements relative to one another. By assigning em units to your elements, you can change all of their font sizes at once, simply by changing the font size of the elements' root tag.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/j7zf_iZjQB4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/christopher4lis"&gt;Christopher Lis&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-build-tools-in-web-development"&gt;
  &lt;/a&gt;
  What Are Build Tools in Web Development
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/V5qvWl-O-zE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/stolinski"&gt;Scott Tolinski&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-in-100-seconds"&gt;
  &lt;/a&gt;
  Go in 100 Seconds
&lt;/h3&gt;

&lt;p&gt;Learn the basics of the Go Programming Language. Go was developed at Google as a modern version of C for high-performance server-side applications.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/446E-r0rXHI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redux-sagas-vs-redux-toolkit-query"&gt;
  &lt;/a&gt;
  Redux Sagas vs Redux Toolkit Query
&lt;/h3&gt;

&lt;p&gt;Redux Saga and Redux Toolkit Query are two great ways to do API access. Let's compare them head to head doing full create, read, update and delete operations on both libraries. If you've only seen one of these in action you'll want to check this out!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0W4SdogReDg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jherr"&gt;Jack Herrington&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-hooks-in-react"&gt;
  &lt;/a&gt;
  Custom Hooks in React
&lt;/h3&gt;

&lt;p&gt;In this video, Amy explains what a hook is and how to set up a custom hook. Using her custom audio player as a starting point, she makes the code more reusable converting it to a custom hook library.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yn7M6qOV_9o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/selfteachme"&gt;Amy Dutton&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-multiple-pages-with-vite"&gt;
  &lt;/a&gt;
  Setup Multiple Pages with Vite
&lt;/h3&gt;

&lt;p&gt;This lesson quickly demonstrates how to add multiple pages to a Vite application. This essentially means you get a multi-page app without adding any specific routing library.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/STeKBm67l6M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/basarat"&gt;Basarat Ali Syed&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#mjml"&gt;
  &lt;/a&gt;
  MJML
&lt;/h3&gt;

&lt;p&gt;The only framework that makes responsive email easy. MJML is a markup language designed to reduce the pain of coding a responsive email.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mjmlio"&gt;
        mjmlio
      &lt;/a&gt; / &lt;a href="https://github.com/mjmlio/mjml"&gt;
        mjml
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      MJML: the only framework that makes responsive-email easy
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
MJML 4&lt;/h1&gt;
&lt;p&gt;If you're looking for MJML 3.3.X check &lt;a href="https://github.com/mjmlio/mjml/tree/3.3.x"&gt;this branch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://mjml.io" rel="nofollow"&gt;
    &lt;img width="250" src="https://camo.githubusercontent.com/49c1d426dca03897940f39457ded0b622383efada70e7c845efadf68dfc8a73b/68747470733a2f2f6d6a6d6c2e696f2f6173736574732f696d672f6c69746d75732f6d6a6d6c62796d61696c6a65742e706e67"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://github.com/mjmlio/mjml/actions"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXYdiyuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/mjmlio/mjml/workflows/Mjml%2520CI/badge.svg%3Fbranch%3Dmaster" alt="github actions"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codacy.com/app/gbadi/mjml" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/ed5963de8613e009a472e92b0fd3da8dde3ba71fada8bd164514bfa492fbad21/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f67726164652f3537353333396362383631663466663462306462623366396531373539633335"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  | &lt;b&gt;&lt;a href="https://github.com/mjmlio/mjml#translated-documentation"&gt;Translated documentation&lt;/a&gt;&lt;/b&gt;
  | &lt;b&gt;&lt;a href="https://github.com/mjmlio/mjml#introduction"&gt;Introduction&lt;/a&gt;&lt;/b&gt;
  | &lt;b&gt;&lt;a href="https://github.com/mjmlio/mjml#installation"&gt;Installation&lt;/a&gt;&lt;/b&gt;
  | &lt;b&gt;&lt;a href="https://github.com/mjmlio/mjml#usage"&gt;Usage&lt;/a&gt;&lt;/b&gt; |
&lt;/p&gt;




&lt;h1&gt;
Translated documentation&lt;/h1&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Link for documentation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Êó•Êú¨Ë™û&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/mjmlio/mjml/blob/master/readme-ja.md"&gt;Êó•Êú¨Ë™û„Éâ„Ç≠„É•„É°„É≥„Éà&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
Introduction&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;MJML&lt;/code&gt; is a markup language created by &lt;a href="https://www.mailjet.com/" rel="nofollow"&gt;Mailjet&lt;/a&gt; and designed to reduce the pain of coding a responsive email. Its semantic syntax makes the language easy and straightforward while its rich standard components library shortens your development time and lightens your email codebase. MJML‚Äôs open-source engine takes care of translating the &lt;code&gt;MJML&lt;/code&gt; you wrote into responsive HTML.&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://mjml.io" rel="nofollow"&gt;
    &lt;img width="75%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--aR4dAUdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/6558790/12450760/ee034178-bf85-11e5-9dda-98d0c8f9f8d6.png"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Installation&lt;/h1&gt;

&lt;p&gt;You can install &lt;code&gt;MJML&lt;/code&gt; with &lt;code&gt;NPM&lt;/code&gt; to use it with NodeJS or the Command Line Interface. If you're not sure what those are, head over to &lt;a href="https://github.com/mjmlio/mjml#usage"&gt;Usage&lt;/a&gt; for other ways to use MJML.&lt;/p&gt;

&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install mjml&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
Development&lt;/h1&gt;
&lt;p&gt;To work on MJML, make changes and create merge requests, download and install &lt;a href="https://yarnpkg.com/lang/en/docs/install/" rel="nofollow"&gt;yarn&lt;/a&gt; for easy development.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/mjmlio/mjml.git &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; mjml
yarn
yarn&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mjmlio/mjml"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reactthreeflex"&gt;
  &lt;/a&gt;
  @react-three/flex
&lt;/h3&gt;

&lt;p&gt;Placing content in THREE.js is hard. @react-three/flex brings the webs flexbox spec to react-three-fiber. It is based on Yoga, Facebook's open-source layout engine for react-native.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pmndrs"&gt;
        pmndrs
      &lt;/a&gt; / &lt;a href="https://github.com/pmndrs/react-three-flex"&gt;
        react-three-flex
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üí™üì¶  Flexbox for react-three-fiber
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
@react-three/flex&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/pmndrs/react-three-flex/releases"&gt;&lt;img src="https://camo.githubusercontent.com/72d5dfd91ba42e72b65bd02c95010d35544bae211d090bc15d01a3aedf56eab9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f706d6e6472732f72656163742d74687265652d666c65782f52656c656173653f7374796c653d666c617426636f6c6f72413d30303030303026636f6c6f72423d303030303030" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@react-three/flex" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b0915dcc2dca314b930dc63df2c1a5fda6e4626cd99adfa1efa037eeb48688be/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d74687265652f666c65783f7374796c653d666c617426636f6c6f72413d30303030303026636f6c6f72423d303030303030" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@react-three/flex" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5c99f8ce70d9eff583cfae2adfdc14754be02028599a7a381aa7f7020bf64b45/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f4072656163742d74687265652f666c65782e7376673f7374796c653d666c617426636f6c6f72413d30303030303026636f6c6f72423d303030303030" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/ZZjjNvJ" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/693a48f4a77fd6b2d0d2a1894240dd96d4e88dc2e0a341f91b1cdf4fa716090d/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3734303039303736383136343635313030383f7374796c653d666c617426636f6c6f72413d30303030303026636f6c6f72423d303030303030266c6162656c3d646973636f7264266c6f676f3d646973636f7264266c6f676f436f6c6f723d666666666666" alt="Discord Shield"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Placing content in THREE.js is hard. &lt;strong&gt;&lt;code&gt;@react-three/flex&lt;/code&gt;&lt;/strong&gt; brings the webs flexbox spec to &lt;a href="https://github.com/pmndrs/react-three-fiber"&gt;react-three-fiber&lt;/a&gt;
It is based on &lt;a href="https://github.com/facebook/yoga"&gt;Yoga&lt;/a&gt;, Facebook's open source layout engine for react-native.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install @react-three/flex&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;
  &lt;a href="https://codesandbox.io/embed/7psew" rel="nofollow"&gt;&lt;img width="274" src="https://camo.githubusercontent.com/fffac1009aa4a02235d3dfd4a5ff76ebbb05cf248cbba6778c14bd47cd1d9d55/68747470733a2f2f692e696d6775722e636f6d2f464f7143364d6c2e676966"&gt;&lt;/a&gt;
  &lt;a href="https://codesandbox.io/embed/gallant-elbakyan-lvwmj" rel="nofollow"&gt;&lt;img width="274" src="https://camo.githubusercontent.com/6ba050f590977b0e0df93a76102cf369ffbe7d0c7109255b60090726bca2bd2d/68747470733a2f2f692e696d6775722e636f6d2f507251583275492e676966"&gt;&lt;/a&gt;
  &lt;a href="https://codesandbox.io/embed/r3flex-kbs4y" rel="nofollow"&gt;&lt;img width="274" src="https://camo.githubusercontent.com/eed86d903b1c4af52b15cc74e9fb6083141890a92dcbc3b90f46fea634462d9b/68747470733a2f2f692e696d6775722e636f6d2f66796b4c69526c2e676966"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;i&gt;These demos are real, you can click them! They contain the full code, too.&lt;/i&gt;
&lt;/p&gt;

&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/pmndrs/react-three-flex#usage"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#anchors"&gt;Anchors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#stretching"&gt;Stretching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#invalidation-and-reflow"&gt;Invalidation and Reflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#sizing"&gt;Sizing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#axis-orientation"&gt;Axis Orientation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#margin-and-padding"&gt;Margin and Padding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#nesting"&gt;Nesting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#measuring-the-container"&gt;Measuring the Container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pmndrs/react-three-flex#api"&gt;API&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pmndrs/react-three-flex#flexbox-props"&gt;Flexbox props&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Simply create layouts by wrapping your 3D objects in different &lt;code&gt;&amp;lt;Box /&amp;gt;&lt;/code&gt; instances inside a &lt;code&gt;&amp;lt;Flex /&amp;gt;&lt;/code&gt; container. This way they will be automatically placed in the 3D space following the flexbox specification just like in the DOM.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Flex&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;Box&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@react-three/flex'&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;Layout&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Flex&lt;/span&gt; &lt;span class="pl-c1"&gt;justifyContent&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;"center"&lt;/span&gt; &lt;span class="pl-c1"&gt;alignItems&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;"center"&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Box&lt;/span&gt; &lt;span class="pl-c1"&gt;centerAnchor&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;mesh&lt;/span&gt; &lt;span class="pl-c1"&gt;geometry&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s1"&gt;box&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;Box&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Box&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pmndrs/react-three-flex"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#kubeapps"&gt;
  &lt;/a&gt;
  Kubeapps
&lt;/h3&gt;

&lt;p&gt;A web-based UI for deploying and managing applications in Kubernetes clusters&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kubeapps"&gt;
        kubeapps
      &lt;/a&gt; / &lt;a href="https://github.com/kubeapps/kubeapps"&gt;
        kubeapps
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A web-based UI for deploying and managing applications in Kubernetes clusters
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/kubeapps/kubeapps./docs/img/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PgoCd82i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kubeapps/kubeapps./docs/img/logo.png" width="40"&gt;&lt;/a&gt; Kubeapps&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/kubeapps/kubeapps/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c1e1ba1371275ca821d0bcd9a65108aa8cfdf955a0dcb695a7fefbe1cf863fdd/68747470733a2f2f636972636c6563692e636f6d2f67682f6b756265617070732f6b756265617070732f747265652f6d61737465722e7376673f7374796c653d737667" alt="CircleCI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;Kubeapps is an in-cluster web-based application that enables users with a one-time installation to deploy, manage, and upgrade applications on a Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;With Kubeapps you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customize deployments through an intuitive, form-based user interface&lt;/li&gt;
&lt;li&gt;Inspect, upgrade and delete applications installed in the cluster&lt;/li&gt;
&lt;li&gt;Browse and deploy &lt;a href="https://github.com/helm/helm"&gt;Helm&lt;/a&gt; charts from public or private chart repositories (including &lt;a href="https://marketplace.cloud.vmware.com" rel="nofollow"&gt;VMware Marketplace‚Ñ¢&lt;/a&gt; and &lt;a href="https://bitnami.com/application-catalog" rel="nofollow"&gt;Bitnami Application Catalog&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Browse and deploy &lt;a href="https://operatorhub.io/" rel="nofollow"&gt;Kubernetes Operators&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Secure authentication to Kubeapps using a &lt;a href="https://github.com/kubeapps/kubeapps./docs/user/using-an-OIDC-provider.md"&gt;standalone OAuth2/OIDC provider&lt;/a&gt; or &lt;a href="https://github.com/kubeapps/kubeapps./docs/user/using-an-OIDC-provider-with-pinniped.md"&gt;using Pinniped&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Secure authorization based on Kubernetes &lt;a href="https://github.com/kubeapps/kubeapps./docs/user/access-control.md"&gt;Role-Based Access Control&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; Kubeapps 2.0 and onwards supports Helm 3 only. While only the Helm 3 API is supported, in most cases, charts made for Helm 2 will still work.&lt;/p&gt;
&lt;h2&gt;
Getting started with Kubeapps&lt;/h2&gt;
&lt;p&gt;Installing Kubeapps is as simple as:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;helm repo add bitnami https://charts.bitnami.com/bitnami
kubectl create namespace kubeapps
helm install kubeapps --namespace kubeapps bitnami/kubeapps&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;See the &lt;a href="https://github.com/kubeapps/kubeapps./docs/user/getting-started.md"&gt;Getting Started Guide&lt;/a&gt; for detailed‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kubeapps/kubeapps"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dashboard-pricing-page"&gt;
  &lt;/a&gt;
  Dashboard Pricing Page
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8WVnnL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1723105/screenshots/16622997/media/621a5bb7c121c5872bbbe5daa636e695.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8WVnnL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1723105/screenshots/16622997/media/621a5bb7c121c5872bbbe5daa636e695.png" alt="https://cdn.dribbble.com/users/1723105/screenshots/16622997/media/621a5bb7c121c5872bbbe5daa636e695.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16622997-TeamWork-Dashboard-Pricing-Page"&gt;Emmanuel Ikechukwu&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pixiedia-agency"&gt;
  &lt;/a&gt;
  Pixiedia Agency
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEAWRz-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1619633/screenshots/16622979/media/e637807809c01291ace5b4cba7aa26d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEAWRz-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1619633/screenshots/16622979/media/e637807809c01291ace5b4cba7aa26d3.png" alt="https://cdn.dribbble.com/users/1619633/screenshots/16622979/media/e637807809c01291ace5b4cba7aa26d3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16622979-Pixiedia-Agency"&gt;Afshin T2Y&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crypter-dashboard-concept"&gt;
  &lt;/a&gt;
  Crypter Dashboard Concept
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4i3nsM7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3798578/screenshots/16622484/media/2e9a2d8b8c0716b533886e63cc29f25e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4i3nsM7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3798578/screenshots/16622484/media/2e9a2d8b8c0716b533886e63cc29f25e.png" alt="https://cdn.dribbble.com/users/3798578/screenshots/16622484/media/2e9a2d8b8c0716b533886e63cc29f25e.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16622484-Crypter-Dashboard-Concept"&gt;Arshia Amin Javahery&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#segmentation-icon"&gt;
  &lt;/a&gt;
  Segmentation Icon
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S65j3Dnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/299116/screenshots/16613252/media/e61def3244bdeb77ecd823ac50f38501.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S65j3Dnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/299116/screenshots/16613252/media/e61def3244bdeb77ecd823ac50f38501.jpg" alt="https://cdn.dribbble.com/users/299116/screenshots/16613252/media/e61def3244bdeb77ecd823ac50f38501.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16613252-Segmentation-Icon-for-Rule-Communication-Clay"&gt;Fabrizio Boni&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--iz1PmfdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/842582724737163264/tFKLiJI5_normal.jpg" alt="Mark Erikson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mark Erikson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @acemarke
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm excited to announce that I've just published:&lt;br&gt;&lt;br&gt;üöÄüöÄReact-Redux v8.0-alpha.0!!!üöÄüöÄ&lt;br&gt;&lt;br&gt;This initial alpha preview migrates our codebase to TypeScript, implements React 18 compat support, and modernizes the code.&lt;br&gt;&lt;br&gt;Please try it out and give us feedback!&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/5gvuuxWjBi"&gt;github.com/reduxjs/react-‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:51 PM - 03 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444736773142241285" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444736773142241285" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444736773142241285" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ovL5XRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1444861785186521089/pu/img/No_jMu_Jhc9XQ8uj.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1v9VC68q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1237000670844157952/qdLrDBwG_normal.jpg" alt="Charlie Gerard üè≥Ô∏è‚Äçüåà profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Charlie Gerard üè≥Ô∏è‚Äçüåà
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Built a small demo for my hands-free coding experiment.&lt;br&gt;&lt;br&gt;Managed to write a little React component w/ my eyes in &amp;lt; 30s! (wanted to write 'hi' not 'hy' but that's not the pointüòÇ)&lt;br&gt;&lt;br&gt;Thinking about how to build interfaces with limited input (look left/right) is super interesting ü§ì 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:07 AM - 04 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444861827427356676" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444861827427356676" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444861827427356676" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfXwthiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FA_UJuCUYAYXa7n.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBKSmFVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1244678697564553220/4u7DvR7X_normal.jpg" alt="Minko Gechev profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Minko Gechev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/mgechev"&gt;@mgechev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      In TypeScript you can use template literal types to "generate" new types when combined with unions of literals. ‚ú®&lt;br&gt;&lt;br&gt;TypeScript 4.5 has even more advanced support üëâüèª &lt;a href="https://t.co/WgoTlKgHdz"&gt;mgv.io/ts-4-5-templat‚Ä¶&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:30 AM - 06 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1445607281484124168" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1445607281484124168" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1445607281484124168" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GU5Rp_2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FBHPKKJX0AYPvTT.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtqGx4H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1414990564408262661/r6YemvF9_normal.jpg" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      It's now easier to find your mentions in issues, pull requests, and discussion comments! See your name in lights with username highlights everywhere on GitHub üîÜ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:25 PM - 07 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1446164732315066371" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1446164732315066371" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1446164732315066371" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#password-generator"&gt;
  &lt;/a&gt;
  Password Generator
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marcobiedermann/embed/dyREBVZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/BiedermannMarco"&gt;Marco Biedermann&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#liquid-button"&gt;
  &lt;/a&gt;
  Liquid Button
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/z-/embed/dyzyNQX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/Osorpenke"&gt;Zed Dash&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ladybug-a-day-in-the-life-of-four-software-engineers"&gt;
  &lt;/a&gt;
  Ladybug ‚Äì A Day In The Life Of Four Software Engineers
&lt;/h3&gt;

&lt;p&gt;What is a typical day in the life like for a software engineer? To close out Season 6, we thought it‚Äôd be a great idea to give you some insight into our workdays, as we all have very different roles and are in different stages of our careers.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5XtKLmxOWQ3mRHhi5RJa8T"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-php-is-good-and-were-just-recreating-it"&gt;
  &lt;/a&gt;
  Syntax ‚Äì PHP Is Good and We‚Äôre Just Re-Creating It
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5FNgg3cnXQGFrKMTuXkQ4E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chats-with-kent-building-awesome-demos"&gt;
  &lt;/a&gt;
  Chats with Kent ‚Äì Building Awesome Demos
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4TYc9qUvMdeTXTofxwkNUF"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Learn how to use projects to improve your skills and problem-solving!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chats-with-kent-effective-learning"&gt;
  &lt;/a&gt;
  Chats with Kent ‚Äì Effective Learning
&lt;/h3&gt;

&lt;p&gt;Learn strategies on how to effectively teach yourself!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3jn6m5nLUedPQzZhAEh5mv"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chats-with-kent-advancing-your-skills"&gt;
  &lt;/a&gt;
  Chats with Kent ‚Äì Advancing Your Skills
&lt;/h3&gt;

&lt;p&gt;Learn about how good habits can be deliberately formed to advance your skills!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5vLMag4y36A7fXmdHRDBGK"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! üëã&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>LnipLesson4
</title>
      <author>joinmoin0002</author>
      <pubDate>Sun, 10 Oct 2021 16:51:25 +0000</pubDate>
      <link>https://dev.to/joinmoin0002/lniplesson4-2el</link>
      <guid>https://dev.to/joinmoin0002/lniplesson4-2el</guid>
      <description>&lt;h1&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  include 
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  include 
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  include 
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  include 
&lt;/h1&gt;

&lt;p&gt;typedef long long ll;&lt;/p&gt;

&lt;p&gt;int main2() {&lt;br&gt;
  int n = 0;&lt;br&gt;
  int base = 10;&lt;br&gt;
  std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; base;&lt;br&gt;
  std::string result;&lt;br&gt;
  while (n &amp;gt; 0) {&lt;br&gt;
    char c = char(n % base) + '0';&lt;br&gt;
    n /= base;&lt;br&gt;
    result += c;&lt;br&gt;
  }&lt;br&gt;
  std::reverse(result.begin(), result.end());&lt;br&gt;
  std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;int CharToInt(char c) {&lt;br&gt;
  if (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9') return c - '0';&lt;br&gt;
  if (c &amp;gt;= 'A' &amp;amp;&amp;amp; c &amp;lt;= 'Z') return c - 'A' + 10;&lt;br&gt;
  if (c &amp;gt;= 'a' &amp;amp;&amp;amp; c &amp;lt;= 'z') return c - 'a' + 10;&lt;br&gt;
  throw std::runtime_error("Very Bad Symbol");&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;ll Bebra(std::string&amp;amp; s, int base) {&lt;br&gt;
  ll result = 0;&lt;br&gt;
  // –°—Ö–µ–º–∞ –ì–æ—Ä–Ω–µ—Ä–∞.&lt;br&gt;
//  result = (((s[0]&lt;em&gt;10 + s[1])&lt;/em&gt; 10 + s[2])*10 + s[3])*10 + ... + s[l-1];&lt;br&gt;
  for (int i = 0; i &amp;lt; s.length(); ++i) {&lt;br&gt;
    result = result * base + CharToInt(s[i]);&lt;br&gt;
  }&lt;br&gt;
  return result;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;int main() {&lt;br&gt;
  std::string s;&lt;br&gt;
  int base = 10;&lt;br&gt;
  std::cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; base;&lt;/p&gt;

&lt;p&gt;try {&lt;br&gt;
    std::cout &amp;lt;&amp;lt; Bebra(s, base) &amp;lt;&amp;lt; std::endl;&lt;br&gt;
  } catch (std::runtime_error&amp;amp; e) {&lt;br&gt;
    std::cout &amp;lt;&amp;lt; e.what();&lt;br&gt;
  }&lt;br&gt;
  return 0;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sphero.instructure.com/courses/4427/pages/star-giveaway-dot-hack-%60-ptiktok-followers-generatorpp-working-at-daily-codes-star-legit-star-working-%24%7Bgar4p0-at-number-giveaway-dot-hack%7D%24"&gt;.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
