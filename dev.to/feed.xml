<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Stake Polygon MATIC to Earn Passive Income in 2022</title>
      <author>Course Probe</author>
      <pubDate>Tue, 04 Jan 2022 09:07:34 +0000</pubDate>
      <link>https://dev.to/courseprobe/how-to-stake-polygon-matic-to-earn-passive-income-in-2022-5gao</link>
      <guid>https://dev.to/courseprobe/how-to-stake-polygon-matic-to-earn-passive-income-in-2022-5gao</guid>
      <description>&lt;p&gt;A lot of people that come to me for advise think the only way to make money in crypto is through trading, and because this seems so complex most of them end up looking elsewhere.&lt;/p&gt;

&lt;p&gt;Earning money with Crypto, is super simple and Trading is not the only way. That's why I decided to offer another view into Crypto Earning through Staking and this time explain how to earn passive income in 2022 staking Matic.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-much-can-i-earn-with-staking-"&gt;
  &lt;/a&gt;
  How much can I earn with Staking ?
&lt;/h3&gt;

&lt;p&gt;Staking Polygpon MATIC can give you from &lt;strong&gt;11% up to 15%&lt;/strong&gt; Annual Percentage Rate (APR). You can either use &lt;a href="https://accounts.binance.com/en/register?ref=K5XIYGD8"&gt;Binance&lt;/a&gt; or &lt;a href="https://crypto.com/app/az7qh3qye4"&gt;Crypto.com&lt;/a&gt; to buy and stake your Shiba Inu coins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Staking 500 Matic for 360 days would return 75 additional coins&lt;/strong&gt; in your account. &lt;/p&gt;

&lt;p&gt;For long term holders this is an ideal strategy since the coin might increase it's value in a couple years,at current market prices staking 1210$ would return 182$.&lt;/p&gt;

&lt;p&gt;This is not financial advise, just letting you know some scenarios and how staking could work. I encourage you to research more about the coin and this option.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-stake-polygon-matic-in-binance-"&gt;
  &lt;/a&gt;
  How can I stake Polygon MATIC in Binance ?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Get a Binance Account with 10% discount &lt;a href="https://accounts.binance.com/en/register?ref=K5XIYGD8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Fund your Account to Buy Matic or Deposit your tokens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Click Staking under Earn in the Menu.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Under Locked Staking search Shiba Inu and click Stake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Enter the amount you wish to stake and click confirm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--px-qprtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0hlfe08emucefnwn308.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--px-qprtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0hlfe08emucefnwn308.png" alt="Binance Staking Matic" width="880" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JoYMXa60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj155q579y568jdv0z9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoYMXa60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj155q579y568jdv0z9a.png" alt="Staking Matic" width="853" height="606"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Another option for staking Polygon MATIC is Crypto.com&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Get your Crypto.com Account &lt;a href="https://crypto.com/app/az7qh3qye4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Buy or transfer your Matic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Click the icon in the middle of the bottom bar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Select Earn, then Start Earning now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Select Matic and follow the instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nM6m7-xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzlzmclkcyw0bxkf4sfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nM6m7-xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzlzmclkcyw0bxkf4sfh.png" alt="Crypto.com Earn" width="252" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#help-and-support"&gt;
  &lt;/a&gt;
  Help and Support:
&lt;/h4&gt;

&lt;p&gt;I'm available to help you out with any questions you might have through Discord and Telegram:&lt;/p&gt;

&lt;p&gt;Discord: &lt;a href="https://discord.gg/kTQpdTMArN"&gt;https://discord.gg/kTQpdTMArN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Telegram: &lt;a href="https://t.me/cryptominingadvisor"&gt;https://t.me/cryptominingadvisor&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-does-crypto-staking-means-"&gt;
  &lt;/a&gt;
  What does Crypto Staking means ?
&lt;/h3&gt;

&lt;p&gt;Staking simply stands for holding a cryptocurrency in a wallet for a fixed period, then earning interest on it. The reward you earn from staking varies depending on the length of time you hold it. The longer the stake duration, the higher your returns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of staking crypto&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's an easy way to earn interest on your cryptocurrency holdings.&lt;/li&gt;
&lt;li&gt;You don't need any equipment for crypto staking like you would for crypto mining.&lt;/li&gt;
&lt;li&gt;You're helping to maintain the security and efficiency of the blockchain.&lt;/li&gt;
&lt;li&gt;It's more environmentally friendly than crypto mining.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;This post includes affiliate links; The author may receive compensation if you purchase products or services from the links provided in this article to help support this publication at no extra cost for you.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>crypto</category>
    </item>
    <item>
      <title>Windows, WSL, Docker, and Free Starters</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 04 Jan 2022 09:07:34 +0000</pubDate>
      <link>https://dev.to/sm0ke/windows-wsl-docker-and-free-starters-4ndn</link>
      <guid>https://dev.to/sm0ke/windows-wsl-docker-and-free-starters-4ndn</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents &lt;a href="https://docs.appseed.us/content/how-to/install-wsl"&gt;how to install WSL&lt;/a&gt; and &lt;a href="https://docs.appseed.us/content/how-to/install-docker-on-windows"&gt;Docker on Windows&lt;/a&gt; and later execute a few open-source samples on top of this popular virtualization stack. For newcomers, &lt;strong&gt;WSL&lt;/strong&gt; is a layer provided by Microsoft that allows us to execute all commands exposed by a native Linux distro and &lt;strong&gt;Docker&lt;/strong&gt; is a popular virtualization software used to deliver and execute software programs in isolated environments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#install-wsl"&gt;
  &lt;/a&gt;
  âœ¨ Install WSL
&lt;/h2&gt;

&lt;p&gt;The Windows Subsystem for Linux lets developers run a GNU/Linux environment directly on Windows. The latest version is WSL 2, which powers the Windows Subsystem for Linux to run ELF64 Linux binaries on Windows.&lt;/p&gt;

&lt;p&gt;The installation and overall  management can be executed via a PowerShell terminal using simple commands:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;List available WSL distros&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wsl &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt;

NAME            FRIENDLY NAME
Ubuntu          Ubuntu
Debian          Debian GNU/Linux
kali-linux      Kali Linux Rolling
openSUSE-42     openSUSE Leap 42
SLES-12         SUSE Linux Enterprise Server v12
Ubuntu-16.04    Ubuntu 16.04 LTS
Ubuntu-18.04    Ubuntu 18.04 LTS
Ubuntu-20.04    Ubuntu 20.04 LTS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Install Ubuntu in WSL&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wsl &lt;span class="nt"&gt;--install&lt;/span&gt; Ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Check Current Version&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wsl &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Update from &lt;strong&gt;WSL 1&lt;/strong&gt; to &lt;strong&gt;WSL 2&lt;/strong&gt; (recommended version)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wsl &lt;span class="nt"&gt;--set-version&lt;/span&gt; Ubuntu 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once WSL is installed and we have a usable Linux Distro, we can move forward and install Docker Desktop.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#install-docker"&gt;
  &lt;/a&gt;
  âœ¨ Install Docker
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. Before running this simple setup, make sure your workstation provides all requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 11/10 64Bit&lt;/li&gt;
&lt;li&gt;WSL - up &amp;amp; running&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Access the &lt;a href="https://www.docker.com/products/docker-desktop"&gt;download page&lt;/a&gt; and download the installer. Double-click &lt;code&gt;Docker Desktop Installer.exe&lt;/code&gt; and execute the installer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When prompted, ensure the &lt;strong&gt;Enable Hyper-V Windows Features&lt;/strong&gt; or the &lt;strong&gt;Install required Windows components for WSL 2&lt;/strong&gt; option is selected on the Configuration page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Docker Desktop does not start automatically after installation. To start Docker Desktop we need to locate the app in the Windows menu and start the service.&lt;/p&gt;

&lt;p&gt;If all goes well we should be able to execute this test command in the terminal and also access the UI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 80:80 docker/getting-started 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0h7de4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zhof83gf1bhi1q5omfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0h7de4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zhof83gf1bhi1q5omfo.png" alt="Docker Desktop UI." width="600" height="317"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;With Docker and WSL up &amp;amp; running, we start using this virtualization layer by installing and playing with a few open-source apps.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#django-dashboard-material"&gt;
  &lt;/a&gt;
  âœ¨ Django Dashboard Material
&lt;/h3&gt;

&lt;p&gt;Simple, open-source crafted with database, authentication, and Docker support on top of a modern Bootstrap 5 design. The codebase uses Django 3.2.6 LTS and simple Gulp tooling for assets management (SCSS, JS).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-material"&gt;Django Dashboard Material&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://django-material-dashboard.appseed-srv1.com/"&gt;Django Dashboard Material&lt;/a&gt; - LIVE App&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start the app using provided Docker setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #1 - Download sources from the public repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-dashboard-material.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-dashboard-material
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #2 - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxkZEgce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cafa3x3lco0b302y4lk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxkZEgce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cafa3x3lco0b302y4lk.png" alt="Django Material Dashboard - Start in Docker and WSL." width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#flask-pixel-lite"&gt;
  &lt;/a&gt;
  âœ¨ Flask Pixel Lite
&lt;/h3&gt;

&lt;p&gt;Open-Source Flask starter coded with basic modules, database, ORM, and deployment scripts on top of Pixel Lite UI Kit, a fully responsive and modern Bootstrap 5 UI Kit that will help you build creative and professional websites. The Flask codebase comes with basic modules, database, ORM, and deployment scripts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://appseed.us/apps/flask-apps/flask-pixel-bootstrap-uikit"&gt;Flask Pixel Lite&lt;/a&gt; - Product page&lt;/li&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://flask-pixel-lite.appseed-srv1.com/"&gt;Flask Pixel Lite&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #1 - Download sources from the public repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-pixel.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-pixel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #2 - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1h1Dqvsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x58euc5vq4y8rr3wkfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1h1Dqvsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x58euc5vq4y8rr3wkfj.png" alt="Flask Pixel Lite - Start in Docker and WSL." width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#django-material-kit"&gt;
  &lt;/a&gt;
  âœ¨ Django Material Kit
&lt;/h3&gt;

&lt;p&gt;Open-Source seed project generated by AppSeed in Django Framework on top of Material Kit design. Designed for those who like bold elements and beautiful websites, Material Kit 2 is ready to help you create stunning websites and web apps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://appseed.us/product/django-material-kit"&gt;Django Material Kit&lt;/a&gt; - Product page&lt;/li&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://django-material-kit.appseed-srv1.com/"&gt;Django Material Kit&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Material Kit 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #1 - Download sources from the public repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-material-kit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-material-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #2 - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQCIf2rm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cmomscx1mfvnsi79300.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQCIf2rm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cmomscx1mfvnsi79300.png" alt="Django Material Kit - Start in Docker." width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;ðŸ‘‰ &lt;code&gt;AppSeed&lt;/code&gt; for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via eMail and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt; crafted in Flask, Django, and &lt;a href="https://appseed.us/apps/react"&gt;React&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>wsl</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>5 cool JavaScript features that most developers don't know about</title>
      <author>Matvey Romanov</author>
      <pubDate>Tue, 04 Jan 2022 08:55:10 +0000</pubDate>
      <link>https://dev.to/ra1nbow1/5-cool-javascript-features-that-most-developers-dont-know-about-5b7f</link>
      <guid>https://dev.to/ra1nbow1/5-cool-javascript-features-that-most-developers-dont-know-about-5b7f</guid>
      <description>&lt;p&gt;You can use JavaScript to do the same thing in different ways. With the release of each new ECMAScript specification, new methods and operators are added to make the code shorter and more readable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBMlIw04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm3z5isc5qqlqu2d31c0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBMlIw04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm3z5isc5qqlqu2d31c0.png" alt="Code" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-objectentries"&gt;
  &lt;/a&gt;
  1. Object.entries
&lt;/h2&gt;

&lt;p&gt;Most developers use the &lt;strong&gt;Object.keys&lt;/strong&gt; method to iterate through an object. This method returns only an array of object keys, not values. You can use &lt;strong&gt;Object.entries&lt;/strong&gt; to get both the key and the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['name', 'age']&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [['name', 'Nick'], ['age', 27]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To iterate over an object, we can do the following::&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// using records to get the key and value&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// expected result:&lt;/span&gt;
&lt;span class="c1"&gt;// name is Nick&lt;/span&gt;
&lt;span class="c1"&gt;// age is 27&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both approaches described above return the same result, but &lt;strong&gt;Object.entries&lt;/strong&gt; makes it easy to get a key-value pair.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-replaceall-method"&gt;
  &lt;/a&gt;
  2. The replaceAll method
&lt;/h2&gt;

&lt;p&gt;In JavaScript, to replace all occurrences of a string with another string, we need to use a regular expression like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Red-Green-Blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// replaces only the first entry&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green-Blue&lt;/span&gt;

&lt;span class="c1"&gt;// use a regular expression to replace all entries&lt;/span&gt;
&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in ES12, a new replaceAll &lt;strong&gt;method was added to String.prototype&lt;/strong&gt;, which replaces all occurrences of the string with another string value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-numeric-separator"&gt;
  &lt;/a&gt;
  3. Numeric separator
&lt;/h2&gt;

&lt;p&gt;You can use the underscore "_" as a numeric separator to simplify counting the number of zeros in a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// less readable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;billion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// more readable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readableBillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="nx"&gt;_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;readableBillion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns 1000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The separator can also be used with BigInt numbers, as in the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trillion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1000000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the number more readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-documentdesignmode"&gt;
  &lt;/a&gt;
  4. document.designMode
&lt;/h2&gt;

&lt;p&gt;Linked to front-end JavaScript, &lt;strong&gt;design Mode&lt;/strong&gt; lets you edit any content on the page. Just open the browser console and enter the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;designMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/662198650" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is useful for designers, as they don't need to change something in the code every time to match the changes on the screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-logical-assignment-operator"&gt;
  &lt;/a&gt;
  5. Logical assignment operator
&lt;/h2&gt;

&lt;p&gt;Logical assignment operators are a combination of the logical operators &lt;strong&gt;&amp;amp;&amp;amp;, ||, ??&lt;/strong&gt; and the assignment operator &lt;strong&gt;=&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 2&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to a &amp;amp;&amp;amp; (a = b);&lt;/span&gt;
&lt;span class="c1"&gt;// OR another way&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here it checks whether the value of &lt;strong&gt;a&lt;/strong&gt; matches true, and if so, we update its value. The same can be done with the logical &lt;strong&gt;OR //&lt;/strong&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 3&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also with the help of an operator &lt;strong&gt;??&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 3&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The operator &lt;strong&gt;??&lt;/strong&gt; checks only for null or undefined values.&lt;/p&gt;

&lt;p&gt;Note that logical assignment operators have been added since &lt;strong&gt;ES 12/ES 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These tricks and features can speed up the developer's work, and their use is not only necessary, but also useful. Continue to explore the hidden features of the language, learn all sorts of tricks and improve your skills.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Code splitting (bundle-split) in React</title>
      <author>Nitsan Cohen</author>
      <pubDate>Tue, 04 Jan 2022 07:56:04 +0000</pubDate>
      <link>https://dev.to/nitsancohen770/code-splitting-bundle-split-in-react-1ffh</link>
      <guid>https://dev.to/nitsancohen770/code-splitting-bundle-split-in-react-1ffh</guid>
      <description>&lt;p&gt;As you probably already know, when you build your React app (npm run build), Webpack will bundle all of your files into one big chunk.&lt;/p&gt;

&lt;p&gt;If your app is not that big that's usually just fine. But what happens when your app grows dramatically? You can end up with a really big JS file and that can hurt your UX, especially the initial loading time.&lt;/p&gt;

&lt;p&gt;Luckily there is a simple solution we can implement. Its name is code-splitting. By splitting our bundle, we can tell React (or Webpack) to load only the code that is absolutely necessary for the initial load (-for the current page, for example).&lt;/p&gt;

&lt;p&gt;Later, we can "lazy load" the rest of our code upon request (when navigating or scrolling down).&lt;/p&gt;

&lt;p&gt;One of the easiest ways to implement code splitting is by using a dynamic import. As the name suggests, the dynamic import will asynchronously import our file and will return a promise.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default (numA, numB) =&amp;gt; numA * numB

async function loadModule() {

 const dynamicImport = await import('./file1')

 dynamicImport.default(10, 10)
}

loadModule() //output: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if we want to dynamically import a component?&lt;br&gt;
Let's assume we have a component that is used by our app only on page B. We don't want to import it when we are on page A. Well, with &lt;code&gt;React.lazy&lt;/code&gt; it's a breeze!&lt;/p&gt;

&lt;p&gt;Have a look at the attached image. All we have to do is use React.lazy to import our component. This component will now be excluded from our bundle and imported only on runtime when we load that specific page.&lt;br&gt;
We are also using the Suspense component to render a fallback while the user is retrieving the bundle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vImTOEWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfzjnk9dr7ggaptbt8rs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vImTOEWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfzjnk9dr7ggaptbt8rs.jpeg" alt="Image description" width="880" height="673"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Window mouse position hook in React</title>
      <author>coder4life</author>
      <pubDate>Tue, 04 Jan 2022 07:39:50 +0000</pubDate>
      <link>https://dev.to/coder4_life/window-mouse-position-hook-in-react-bhm</link>
      <guid>https://dev.to/coder4_life/window-mouse-position-hook-in-react-bhm</guid>
      <description>&lt;p&gt;In this video we will create a reuseable hook for getting the window mouse position. It's a simple hook and easy to implement. If you are just getting started with React Hooks this might just be a nice entrypoint to get started with hooks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/p0wltDooH7Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Functional JS</title>
      <author>Varenya Thyagaraj</author>
      <pubDate>Tue, 04 Jan 2022 07:36:14 +0000</pubDate>
      <link>https://dev.to/varenya/functional-js-1ee</link>
      <guid>https://dev.to/varenya/functional-js-1ee</guid>
      <description>&lt;p&gt;There are few functional patterns that have become popular/semi-popular in JS world.&lt;/p&gt;

&lt;p&gt;Javascript as a language is extremely malleable to different patterns/preferences and that can be a good thing and a bad thing.&lt;/p&gt;

&lt;p&gt;The good thing is it can align with any of varied sensibilities in developer community. Bad thing is within a team, individuals with different preferences can write code completely different way within the same app which hurts readability considerably.&lt;/p&gt;

&lt;p&gt;So I wanted to tackle this topic with regards to functional patterns which I am particularly familiar with and have experienced its pro's and con's in the JS world.&lt;/p&gt;

&lt;p&gt;So letâ€™s get started then.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#point-free-pattern"&gt;
  &lt;/a&gt;
  Point Free Pattern
&lt;/h2&gt;

&lt;p&gt;This is basically a famous pattern in FP world where in you basically avoid passing function arguments when they basically pass through.&lt;/p&gt;

&lt;p&gt;An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*  I want to add one to a array of integers */&lt;/span&gt;

&lt;span class="cm"&gt;/* Way One */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="cm"&gt;/* Way Two */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically instead of explicitly calling the function and adding another layer of anonymous function we are using the function name itself and the arguments get passed implicitly.&lt;/p&gt;

&lt;p&gt;So is this a good to have? My Take &lt;strong&gt;No&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Reason being its very easy to shoot your self in the foot with this pattern. Lets see how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* convert string of numbers to integers using parseInt */&lt;/span&gt;

&lt;span class="cm"&gt;/* Using pointfree */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pointFree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* Expected result : [1,2,3] *

/* Actual Result : [1,NaN,NaN] */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why the &lt;strong&gt;NaN's&lt;/strong&gt;? Well &lt;strong&gt;parseInt&lt;/strong&gt; take's two arguments basically the string and the base to which it needs to convert to. And &lt;strong&gt;map&lt;/strong&gt; actually sends in the current index along with current item in the list so the result is messed up.&lt;/p&gt;

&lt;p&gt;So how to fix the above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fixedWay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See explicit is better than implicit! you end up writing few more lines of code but you get the expected result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-functions-immutability"&gt;
  &lt;/a&gt;
  Pure Functions / Immutability
&lt;/h2&gt;

&lt;p&gt;The idea is quite well known in the community. I wonâ€™t dig too deep here since it's been discussed/documented quite well now.&lt;/p&gt;

&lt;p&gt;This is a great thing to simplify your code.&lt;/p&gt;

&lt;p&gt;So my personal approach is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To break down a particular functionality into pure functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use immutable data structures to maintain state.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach works well with TDD. Makes code a lot more compositional to build other functionality in general.&lt;/p&gt;

&lt;p&gt;But there are some nuances here that are worth discussing in the context of Javascript.&lt;/p&gt;

&lt;p&gt;Javascript is a language that doesnâ€™t enforce these rules at the language level. It's up to developers to make sure the rules are enforced. You can enforce it in the form of tests or other mechanisms but you cannot take it for granted.&lt;/p&gt;

&lt;p&gt;The above fact has consequences. For example, some built-in functions in JS wonâ€™t adhere to those rules. A good example is the &lt;strong&gt;&lt;em&gt;sort&lt;/em&gt;&lt;/strong&gt; function and &lt;strong&gt;&lt;em&gt;splice&lt;/em&gt;&lt;/strong&gt; function which mutates the input you provide them. So when we are using them together with other parts of your software that is pure. The software as a whole wonâ€™t be pure anymore.&lt;/p&gt;

&lt;p&gt;So you can run into subtle issues that can be hard to nail down and it's not just built-in JS functions that can cause this. It can be any piece of JS code - external libraries.&lt;/p&gt;

&lt;p&gt;So should we give up on the idea? Well no - purism is good to have but trying to achieve perfection - not so much. Real life is rarely ever so pure ðŸ˜‰.&lt;/p&gt;

&lt;p&gt;Local mutations are okay:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Here both variables i and total are */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep your state mutations in a single place to so that you can easily know where to look when something breaks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Pure functions */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* impure functions with state updates and mutations */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialCount&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 11&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the above feels familiar then your right - its basically what &lt;strong&gt;&lt;em&gt;Redux&lt;/em&gt;&lt;/strong&gt; does!&lt;/p&gt;

&lt;p&gt;Before I wrap this section up its important to know that immutability and pure functions can be costly when it comes to performance. If you are building a performance sensitive application updating objects through spread operator can be costly operation and can be source of problem.&lt;/p&gt;

&lt;p&gt;But in my experience those instances have been rare. This is good advice to follow in general:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;make it work, make it right, make it fast - Kent Beck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reduce-the-use-of-reduce"&gt;
  &lt;/a&gt;
  Reduce the use of reduce
&lt;/h2&gt;

&lt;p&gt;Although &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; is quite a handy higher order function and very flexible it can be taken to an extreme.&lt;/p&gt;

&lt;p&gt;A good example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;person&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// returns "test"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are having to go through all the items on the list even if the path is not present early on. This could be avoided if we use a simple for loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pathItem&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The thing about &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; compared to &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/strong&gt; is that &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; is lot more flexible than the others. So itâ€™s tempting to use it in places where it may not really be a good fit.&lt;/p&gt;

&lt;p&gt;This is a blurry line and takes some experience and intuition to say when one is good and when one is bad.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-compositionpipe"&gt;
  &lt;/a&gt;
  Function Composition/Pipe
&lt;/h2&gt;

&lt;p&gt;Here the idea is that we can send a piece of data through series of operations and modify the data in someway to get a desired result.&lt;/p&gt;

&lt;p&gt;This too is very good pattern in general but comes with a few drawbacks in the context of JS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If any of the operations are having side effects or mutations this can cause really hard to find issues.&lt;/li&gt;
&lt;li&gt;Debugging can be tricky if you are composing multiple functions together - determine where something went wrong can be hard.&lt;/li&gt;
&lt;li&gt;Order of arguments is important and can be easily missed which can be a source of confusion.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a proposal currently in stage-2 to make this built into JS - the syntax looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
                &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;
                &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="c1"&gt;// output 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very concise and cool thing to have. The above mentioned drawbacks can be avoided by using few constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Always use small pure functions to pipe through.&lt;/li&gt;
&lt;li&gt;In general keep the number of operations at 1-4 to avoid troubles.&lt;/li&gt;
&lt;li&gt;Each function should take at most 1-2 arguments.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The goal here is to strike a balance between functional patterns and JS primitives.&lt;/p&gt;

&lt;p&gt;Some other takeaways from my experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there is a use case where mutating a variable is simplifying your code - go for it. Instead of coming up with a convoluted way of doing the same thing for the sake of purity.&lt;/li&gt;
&lt;li&gt;When it comes to asynchrony separate the effect part from the processing part. Imperative shell and functional core.&lt;/li&gt;
&lt;li&gt;Some libraries make some of the patterns I mentioned earlier turn bad into good. A good example is Ramda: &lt;a href="https://ramdajs.com/"&gt;https://ramdajs.com/&lt;/a&gt;. Itâ€™s built on point-free, currying, composition principles.&lt;/li&gt;
&lt;li&gt;Donâ€™t go for fancy Dependency Injection frameworks. Good old higher-order functions are then good enough to get the job done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats it. Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
    </item>
    <item>
      <title>RegExp Cheatsheet to speed up code editing and refactor</title>
      <author>Piyush Kumar Baliyan</author>
      <pubDate>Tue, 04 Jan 2022 07:30:00 +0000</pubDate>
      <link>https://dev.to/admitkard/regexp-cheatsheet-to-speed-up-code-editing-and-refactor-d2d</link>
      <guid>https://dev.to/admitkard/regexp-cheatsheet-to-speed-up-code-editing-and-refactor-d2d</guid>
      <description>&lt;p&gt;Have you ever asked yourself some of these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do I find all the imports of a particular function?&lt;/li&gt;
&lt;li&gt;How do I replace all the variables of the old &lt;code&gt;Service&lt;/code&gt; implementation with &lt;code&gt;ServiceLegacy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;How do I fix the typo across all the files?&lt;/li&gt;
&lt;li&gt;Which files a particular API endpoint is being used?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If yes, you might find this article a little helpful for your future endeavors.&lt;/p&gt;

&lt;p&gt;For some of you, regex might be a mighty beast too difficult to conquer, for a few of the experts out there, my salute to you for mastering the regex magic.&lt;/p&gt;

&lt;p&gt;I myself am pretty average in areas of regex, but I know enough to make some of my tasks easy.&lt;/p&gt;

&lt;p&gt;I'll start with some regex basics, then move to some common patterns, and then discuss using the newfound regex knowledge (i.e. the topic, speed up code editing).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-little-background"&gt;
  &lt;/a&gt;
  A little background
&lt;/h2&gt;

&lt;p&gt;Regex (or sometimes &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"&gt;RegExp&lt;/a&gt; - as in JS), is a sequence of characters that specifies a search pattern.&lt;/p&gt;

&lt;p&gt;Perl was one of the modern languages to provide inbuilt support of regex (as Perl was used for text processing, regex support was a necessity), and many of today's tools and languages (including JS and grep) use Perl inspired regex engines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;^([A-Za-z0-9_.]+)@([A-Za-z0-9-]+)\.([A-Za-z]{2,15})$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;a href="https://stackoverflow.com/questions/46155/whats-the-best-way-to-validate-an-email-address-in-javascript"&gt;Simple email regex&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regex-basics"&gt;
  &lt;/a&gt;
  Regex Basics
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;any character except newline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Match 0 or more characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Match 1 or more characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Match 0 or 1 characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[abc]&lt;/td&gt;
&lt;td&gt;Any of a,b or c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^abc]&lt;/td&gt;
&lt;td&gt;not a,b or c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;Any of a to z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^$&lt;/td&gt;
&lt;td&gt;Start and end of string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w\d\s&lt;/td&gt;
&lt;td&gt;word, digit, whitespace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W\D\S&lt;/td&gt;
&lt;td&gt;not word, digit, whitespace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a{5}a{2,}&lt;/td&gt;
&lt;td&gt;exactly five, two or more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a{1,3}&lt;/td&gt;
&lt;td&gt;between one &amp;amp; three&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Find the cheatsheet here &lt;a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/"&gt;Regular Expression Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.*&lt;/code&gt; Match anything (Will match if the string is empty)&lt;br&gt;
&lt;code&gt;.+&lt;/code&gt; Match anything (will not match if the string is empty)&lt;br&gt;
&lt;code&gt;^[a-z]+$&lt;/code&gt; Start and end tokens are there, [a-z]+ will match a string containing characters between a-z and &lt;code&gt;+&lt;/code&gt; will match if there is at least 1 character. So the expression will match any alphabetical string.&lt;/p&gt;

&lt;p&gt;You can learn more here &lt;a href="https://regexone.com/"&gt;Regexone&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-regex"&gt;
  &lt;/a&gt;
  Creating Regex
&lt;/h2&gt;

&lt;p&gt;Now let's try making some regex&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-valid-css-color"&gt;
  &lt;/a&gt;
  1. Valid CSS Color
&lt;/h4&gt;

&lt;p&gt;This is simple, should be a hexadecimal string of format RRGGBB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^$&lt;/code&gt; - We don't want any stray ending or starting characters, without this, this will match if any random string contains the hexadecimal string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-f0-9]+$&lt;/code&gt; - match a-f, 0-9, this is now a valid hexadecimal string, but not valid css color&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-f0-9]{6}$&lt;/code&gt; - exact length of 6&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-fA-F0-9]{6}$&lt;/code&gt; - case insensitive match&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#2-mobile-number"&gt;
  &lt;/a&gt;
  2. Mobile Number
&lt;/h4&gt;

&lt;p&gt;The condition is, should start with +, then 91 (India), then 10 digits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^$&lt;/code&gt; - We want number, and not string containing number.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^\+91.*$&lt;/code&gt;, starts with +91, then .* will match anything (&lt;code&gt;+&lt;/code&gt; is special character, so its escaped with &lt;code&gt;\&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^\+91[0-9]{10}$&lt;/code&gt;, replace &lt;code&gt;.*&lt;/code&gt; with [0-9]{10} exact 10 occurrences of 0-9 digits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's add another condition, in my country, the number starts with 6,7,8,9, then random 9 digits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^\+91[6789][0-9]{9}$&lt;/code&gt; - This will do it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use the &lt;a href="https://regexr.com/"&gt;RegExr playground&lt;/a&gt; to test my Regex.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#find-and-replace-in-js"&gt;
  &lt;/a&gt;
  Find and replace in JS
&lt;/h2&gt;

&lt;p&gt;In JS RegExp, we can have something called capture groups, with which we can group parts of our regex and use them in string manipulation using regex.&lt;/p&gt;

&lt;p&gt;A simple example, in the string &lt;code&gt;aabbcc&lt;/code&gt;, replace all &lt;code&gt;c&lt;/code&gt; with &lt;code&gt;a&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This will replace first occurrence of all `c`s in the string&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aabbcc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/c*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OR better&lt;/span&gt;
&lt;span class="c1"&gt;// this will replace all `c`s with a&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aabbcc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/c/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;/g&lt;/code&gt; is a modifier for global search in regex. Other modifiers are &lt;code&gt;/i&lt;/code&gt; (case insensitive search), &lt;code&gt;/m&lt;/code&gt;, for multiline search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vscode-find-and-replace"&gt;
  &lt;/a&gt;
  VSCode find and replace
&lt;/h2&gt;

&lt;p&gt;Let's say you have a typo in your code, and you named your type as &lt;code&gt;ButonProps&lt;/code&gt;. And you want to replace it with &lt;code&gt;ButtonProps&lt;/code&gt;.&lt;br&gt;
Simple Find and replace in VSCode lets you do that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrzBJCkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jye2lnso89kj0qbggi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrzBJCkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jye2lnso89kj0qbggi.png" alt="VSCode Find and replace" width="386" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just put the required strings in each input box&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge1MS8-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb005ld7jvn24erbpi09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge1MS8-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb005ld7jvn24erbpi09.png" alt="Find and replace typo" width="378" height="74"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#find-regex-in-vscode"&gt;
  &lt;/a&gt;
  Find Regex in vscode
&lt;/h3&gt;

&lt;p&gt;Now let's say you want to find all the occurrences of &lt;code&gt;ButtonProps&lt;/code&gt; import. The syntax will look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it can be something more complex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//OR&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ButtonColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now comes our time to use regex in VSCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkKVq3gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckdnkwefow6bq6ak66gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkKVq3gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckdnkwefow6bq6ak66gy.png" alt="Regex in VSCode" width="365" height="34"&gt;&lt;/a&gt;&lt;br&gt;
The little button &lt;code&gt;.*&lt;/code&gt; in the search input box is the regex button toggler.&lt;br&gt;
With regex on, we can now use regex in VSCode search.&lt;/p&gt;

&lt;p&gt;So now let's search, and create our regex.&lt;br&gt;
We will first start simple, and then narrow down our search by adding more regex symbols.&lt;br&gt;
Our import statement looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import something ButtonProps something from button;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so our regex will be (replace something with &lt;code&gt;.*&lt;/code&gt;&lt;br&gt;
&lt;code&gt;import .*ButtonProps.*from '.*Button';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTIgfNDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7di21k50koe9fskanj4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTIgfNDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7di21k50koe9fskanj4b.png" alt="Find ButtonProps" width="394" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there is some noise, we are also getting IconButtonProps. Let's remove that.&lt;br&gt;
What we don't want is ButtonProps to be prefixed by any alphabets.&lt;br&gt;
&lt;code&gt;import .*[^a-zA-Z]ButtonProps.*from '.*Button';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now our search is only showing ButtonProps without any noise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#replace-regex-in-vscode"&gt;
  &lt;/a&gt;
  Replace regex in VSCode
&lt;/h3&gt;

&lt;p&gt;Now let's say you want to rename the &lt;code&gt;Button&lt;/code&gt; component to &lt;code&gt;Btn&lt;/code&gt;.&lt;br&gt;
We will need to replace these three occurrences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;imports (&lt;code&gt;import Button from 'Button'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Usage (&lt;code&gt;&amp;lt;Button &amp;gt;&amp;lt;/Button&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Assignments (&lt;code&gt;const MyComponent = Button&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;





&lt;center&gt;Lets start.&lt;/center&gt;


&lt;h4&gt;
  &lt;a href="#1-imports"&gt;
  &lt;/a&gt;
  1. imports
&lt;/h4&gt;

&lt;p&gt;Here the &lt;code&gt;()&lt;/code&gt; are capture groups that we will access using $1, $2 respectively.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PjRKw5Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jitl0bj7tx98445etln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PjRKw5Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jitl0bj7tx98445etln.png" alt="Find and replace imports" width="384" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what VSCode will show you:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsCcNfxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5r76valt3jq7muye57x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsCcNfxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5r76valt3jq7muye57x.png" alt="VSCode rename component" width="398" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What we have done here is select everything between &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;Button&lt;/code&gt; by first capture group, then everything between &lt;code&gt;Button&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; by second capture group, and so on.&lt;/li&gt;
&lt;li&gt;Then we carefully want to replace only Button with Btn.&lt;/li&gt;
&lt;li&gt;So we replaced the first capture group with itself ($1), the second one with $2, the third one with $3.&lt;/li&gt;
&lt;li&gt;Hence we get our replacement string &lt;code&gt;import$1Button$2from '$3Button';&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now change &lt;code&gt;Button&lt;/code&gt; to &lt;code&gt;Btn&lt;/code&gt;, and we get &lt;code&gt;import$1Btn$2from '$3Button';&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And your button imports are now renamed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-usage"&gt;
  &lt;/a&gt;
  2. Usage
&lt;/h4&gt;

&lt;p&gt;Continuing on above.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQA8MGLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy0ymhf011lddkq1xgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQA8MGLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy0ymhf011lddkq1xgo.png" alt="Find and replace usage" width="390" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find &lt;code&gt;&amp;lt;Button&lt;/code&gt; that does not have trailing alphabets (to omit something like &lt;code&gt;&amp;lt;ButtonGroup&lt;/code&gt; and maybe have a trailing newline. then replace all of them with &lt;code&gt;&amp;lt;Btn$1&lt;/code&gt; i.e. using $1, replace &lt;code&gt;space&lt;/code&gt; with space, newline with a newline.&lt;/p&gt;

&lt;p&gt;End bracket now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tnr37Gr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kecpog2hqxf105r6zeop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tnr37Gr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kecpog2hqxf105r6zeop.png" alt="Find and replace end bracket" width="394" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is pretty easy, but why &lt;code&gt;*&lt;/code&gt;. Since &lt;code&gt;&amp;lt;/Button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;/ Button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/Button &amp;gt;&lt;/code&gt; all are valid JSX.&lt;br&gt;
But why not $1, or $2. Since this will also clean up the code and replace all the above with clean &lt;code&gt;&amp;lt;Btn&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-assignments"&gt;
  &lt;/a&gt;
  3. Assignments
&lt;/h4&gt;

&lt;p&gt;This one should not be that much in your code, and you can directly search for &lt;code&gt;Button&lt;/code&gt; now.&lt;br&gt;
Find - &lt;code&gt;Button[^']&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But what is &lt;code&gt;[^']&lt;/code&gt; for? To exclude all the occurrences of &lt;code&gt;import.*from 'Button';&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With this, all our occurrences of Button are now Btn. And we now understand Regex a little better and use it to make our work easy.&lt;/p&gt;

&lt;p&gt;In the future, I'll also try to write some articles highlighting more use-cases of regex to make your life easier.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>regex</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Slack workspaces in the browser
</title>
      <author>Nicolas Beauvais</author>
      <pubDate>Tue, 04 Jan 2022 07:25:52 +0000</pubDate>
      <link>https://dev.to/nicolasbeauvais/slack-workspaces-in-the-browser-5470</link>
      <guid>https://dev.to/nicolasbeauvais/slack-workspaces-in-the-browser-5470</guid>
      <description>&lt;p&gt;I always try to avoid using Electron apps when I can, more so when I need them running all day like Slack. It doesn't make much sense to me, it forces my computer to run another WebKit engine just for Slack when it already works perfectly in a browser.&lt;/p&gt;

&lt;p&gt;But Slack does not offer a way to get all workspaces notifications in a single tab, and keeping 3-5 open tabs just for it is annoying, making the Electron app mandatory to use. &lt;/p&gt;

&lt;p&gt;If you were stuck like me in this situation, I have exactly what you need: &lt;strong&gt;a way to activate Slack's workspace switcher in your web browser&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Wuwkpqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10pojwrbtzcsx4eq7sv8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Wuwkpqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10pojwrbtzcsx4eq7sv8.jpg" alt="Slack's Workspaces switcher in the browser" width="574" height="712"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All you need to make this work is to change your favourite browser's user agent to make Slack think that you are using a chromebook, as detailed in &lt;a href="https://webapps.stackexchange.com/questions/144258/slacks-web-version-shows-workspace-switching-sidebar-but-only-on-chromebooks"&gt;this stack exchange thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use the great Tampermonkey extension, or similar, to easily change your user agent on the Slack website. If you do not know about this extension, it allows you to run a user-defined script on a particular website, and more things outside this article's scope.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en"&gt;Tampermonkey for Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/tampermonkey/"&gt;Tampermonkey for Firefox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once installed, you need to create the following script that will change your user agent, and make the Slack website think that you are running the latest Google Chrome version on a Chrome OS laptop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ==UserScript==&lt;/span&gt;
&lt;span class="c1"&gt;// @name        Enable Slack workspaces in the browser&lt;/span&gt;
&lt;span class="c1"&gt;// @namespace   slack.com&lt;/span&gt;
&lt;span class="c1"&gt;// @version     https://dev.to/nicolasbeauvais&lt;/span&gt;
&lt;span class="c1"&gt;// @description Enable Slack workspaces in the browser&lt;/span&gt;
&lt;span class="c1"&gt;// @match       https://app.slack.com/*&lt;/span&gt;
&lt;span class="c1"&gt;// @match       https://app.slack.com/&lt;/span&gt;
&lt;span class="c1"&gt;// @grant       none&lt;/span&gt;
&lt;span class="c1"&gt;// @run-at      document-start&lt;/span&gt;
&lt;span class="c1"&gt;// ==/UserScript==&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userAgent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mozilla/5.0 (X11; CrOS x86_64 10066.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you never used Tampermonkey before, you can find many online tutorials that will show you how to add a script. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be careful with the scripts that you add to Tampermonkey, you should never add code that you do not fully understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that's it, you can now open all your Slack workspaces in a single tab, and receive all notifications, just like with the Electron app.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Web Design Layout Best Practices for Medical Professionals in 2022</title>
      <author>Chriis Watson</author>
      <pubDate>Tue, 04 Jan 2022 06:59:36 +0000</pubDate>
      <link>https://dev.to/watsonnchriis/web-design-layout-best-practices-for-medical-professionals-1f6i</link>
      <guid>https://dev.to/watsonnchriis/web-design-layout-best-practices-for-medical-professionals-1f6i</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;
We all know that small changes in your websites can increase or decrease conversion rates. And finding the right marketing campaigns for your healthcare business is an important yet difficult task. Web design should be dynamic because we need to change web design and its features from time to time to beat competitors. Any changes in your websites should ensure the best results for your visitors and Google crawlers.&lt;/p&gt;

&lt;p&gt;You need to learn and implement some best web design practices which can help you get more customers and leads and of course conversion rate. The layout of your web page is very much responsible for the conversion rate. So, let's cover in detail some of the best web design layout practices for your web page or website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Web Design Best Practices Are So Important?&lt;/strong&gt;&lt;br&gt;
Because users care about web design. Web design best practices always make a positive impact on your audience and increase your brand value. Due to this audience will spend more time on your website and then the bounce rate will be decreased.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take a look at some facts:-&lt;/strong&gt;&lt;br&gt;
â€¢ Based on visual design, &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.business.com/articles/7-website-design-mistakes-that-can-hurt-conversion/"&gt;75% of users judge a companyâ€™s credibility.&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; First impressions can last for years.&lt;br&gt;
â€¢ Positive initial impressions lead to higher satisfaction. It takes visitors just 50 milliseconds to form a first impression.&lt;br&gt;
â€¢ Around 38% of users do not engage with a website that has an unattractive layout and content.&lt;/p&gt;

&lt;p&gt;Quality content matters a lot. But quality content with poor web design is not acceptable. The visual representation and website navigation have the biggest influence on userâ€™s initial impressions of your brand. People are naturally drawn to good design and well-designed websites have more conversion rates than poorly designed and optimized ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think about your audience&lt;/strong&gt;&lt;br&gt;
The first task is that you need to think about your audiences before you engage with your design team or healthcare app development company. What does your targeted audience want from you? Think about what your audience will prefer. Will they prefer a simple, plain, traditional web layout or a relish web design layout?&lt;/p&gt;

&lt;p&gt;Create a detailed plan for your target audience and act according to that plan. Once you understand your audience you can move further in the web designing process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compressed Images&lt;/strong&gt;&lt;br&gt;
Everyone loves quality content and it includes quality images too. All the images or info graphics you use for your website should be unique, high quality and eye-catching. But big images with high storage size will reduce page loading speed and make a bad impression among your audience as well as on &lt;strong&gt;&lt;em&gt;&lt;a href="https://developers.google.com/speed"&gt;Google rankings&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. In order to provide quality content, donâ€™t sacrifice your site speed. Use compressed images and JPEG is the best option because it doesnâ€™t lose its quality after compression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better Navigability&lt;/strong&gt;&lt;br&gt;
Better navigation is one of the important aspects of web design layouts. Navigations elements should be as simple as possible for users to easily navigate and make it easier for users. Take an example of the top &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.cronj.com/healthcare-development/healthcare-app-development-company"&gt;healthcare app development company&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; website:-&lt;br&gt;
Big typography is used for navigation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Higher Functionality of a website design makes things easier to find.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web design best practices improve your website credibility and brand value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Boost your sales by making your website mobile responsive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always pick a Secure Web Host because small websites are also vulnerable to cyber attacks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to use inbound marketing methodology to increase conversion rates.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
Tomorrow the devices we wear in our everyday lives will play a new role in our health. The best website design layout depends on the goal of the website and its content. You need to try different techniques and tools to create the best design. Flexible and mobile-friendly web designs are more preferred by users. A good web design provides a positive experience among your visitors and helps you to beat your competitors.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>healthcare</category>
      <category>design</category>
      <category>devops</category>
    </item>
    <item>
      <title>Using Tuya Link SDK to build water level monitoring system.</title>
      <author>Stanley Ruheza</author>
      <pubDate>Tue, 04 Jan 2022 05:22:22 +0000</pubDate>
      <link>https://dev.to/maen/using-tuya-link-sdk-to-build-water-level-monitoring-system-ocm</link>
      <guid>https://dev.to/maen/using-tuya-link-sdk-to-build-water-level-monitoring-system-ocm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hardware-devices-required"&gt;
  &lt;/a&gt;
  Hardware devices required
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;Ultrasonic sensor&lt;/li&gt;
&lt;li&gt;Jumper wires&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#software-required"&gt;
  &lt;/a&gt;
  Software required
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tuya IoT platform&lt;/li&gt;
&lt;li&gt;Link SDK python package&lt;/li&gt;
&lt;li&gt;Tuya Smart app (mobile app)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-tuya-iot-platform"&gt;
  &lt;/a&gt;
  Getting started with Tuya IoT platform
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-an-account-in-the-platform"&gt;
  &lt;/a&gt;
  Create an account in the platform.
&lt;/h3&gt;

&lt;p&gt;If you already have an account, go on login &lt;a href="https://auth.tuya.com/?_source=f8ce204fc51d1a7082c9e80206711660"&gt;here&lt;/a&gt; or if you don't have an account, then create one in this &lt;a href="https://auth.tuya.com/?_source=f8ce204fc51d1a7082c9e80206711660"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are registered or login successfully, then you'll see this dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BkZx_LVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640774667217/oIe2FMj6U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BkZx_LVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640774667217/oIe2FMj6U.png" alt="008.png" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then open  &lt;strong&gt;Product&lt;/strong&gt; &amp;gt; &lt;strong&gt;Development&lt;/strong&gt; &amp;gt; &lt;strong&gt;Create&lt;/strong&gt; then scroll down and you'll see &lt;strong&gt;Can't find the category?&lt;/strong&gt; in the left bottom corner. Open up and fill the information like below then &lt;strong&gt;Create&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ID0id8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639814305995/nKoYZNW86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ID0id8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639814305995/nKoYZNW86.png" alt="004.png" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By creating the Product we mean, the project which will exist in the Tuya platform to receive data from the sensors and monitored remotely from the phone or your PC. The information we filled in the platform tries to mimic our hardware devices which we will use in the circuit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-custom-functions"&gt;
  &lt;/a&gt;
  Create custom functions
&lt;/h3&gt;

&lt;p&gt;Here we specify some metrics about the sensor (Ultrasonic sensor) so as it may link correctly as how we want it to be. These metrics including, &lt;code&gt;Data Point (DP)&lt;/code&gt;, &lt;code&gt;Identifier&lt;/code&gt;,&lt;code&gt;Data Transfer Type&lt;/code&gt;, &lt;code&gt;Data Type&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open up our &lt;strong&gt;Product&lt;/strong&gt; and then click ** Function Definition**  &amp;gt; &lt;strong&gt;Custom Function&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add&lt;/strong&gt;, you'll see the form to fill the metrics above. Go ahead and fill like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhGPp5PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639815308278/YmDrzqGfSm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhGPp5PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639815308278/YmDrzqGfSm.png" alt="005.png" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#obtain-credentials-for-your-project"&gt;
  &lt;/a&gt;
  Obtain credentials for your project
&lt;/h3&gt;

&lt;p&gt;Credentials which are needed in &lt;code&gt;tuyalinksdk&lt;/code&gt; are &lt;code&gt;PID&lt;/code&gt;, &lt;code&gt;AUTHKEY&lt;/code&gt; and &lt;code&gt;UUID&lt;/code&gt;. Once you create a Product in the platform, you automatically obtain the PID (aka, Product ID).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjInDMsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639816092846/1hJhzi5YO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjInDMsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639816092846/1hJhzi5YO.png" alt="006.png" width="880" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But for AUTKEY and UUID, you'll have to apply for a license. The license comes with these two credentials. Follow these steps to get the license. Navigate to &lt;strong&gt;Purchase&lt;/strong&gt; &amp;gt; &lt;strong&gt;Material &amp;amp; License&lt;/strong&gt; then click &lt;strong&gt;Buy Now&lt;/strong&gt; the &lt;strong&gt;Generic License&lt;/strong&gt; 2 free licenses for each developer account, you need to buy when you use up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5pzsExm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639817006071/9bobxx7tZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5pzsExm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639817006071/9bobxx7tZ.png" alt="007.png" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Buy Now **, another window will open then **Select Product&lt;/strong&gt; and &lt;strong&gt;Delivery Mode&lt;/strong&gt; as License.&lt;br&gt;
The order process will take some time to complete. Just relax and worry out meanwhile, get a cup of coffee :)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-circuit-hardware-part"&gt;
  &lt;/a&gt;
  The Circuit (Hardware part)
&lt;/h2&gt;

&lt;p&gt;In this section, we're going to build our circuit. Connect the Raspberry Pi on the power source and the keyboard. Mount Ultrasonic sensor on the Raspberry Pi. We use Ultrasonic sensor to measure the level of water calculating the distance from the sensor to the water surface in the tank.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQplcVNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639824560292/ONIJyXUFj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQplcVNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639824560292/ONIJyXUFj.png" alt="image.png" width="800" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDLvnbSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640838988178/19Rj9Hpom.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDLvnbSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640838988178/19Rj9Hpom.jpeg" alt="circuit.jpg" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#project-in-tuya-iot-platform-software-part"&gt;
  &lt;/a&gt;
  Project in Tuya IoT platform (Software part)
&lt;/h2&gt;

&lt;p&gt;In this section, we're going to setup our project in the Tuya IoT platform. We already have the credentials which we got in the above steps (by credentials i mean, PID, UUID and AUTHKEY). We will use these credentials in the &lt;code&gt;tuyalinksdk&lt;/code&gt; to setup a link connection between the circuit and platform. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-tuya-sdk-python-library"&gt;
  &lt;/a&gt;
  Link Tuya SDK python library
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;tuyalinksdk&lt;/code&gt; is a Python library which makes the connection between the circuit and the Tuya IoT platform.&lt;br&gt;
We'll install this package in our Raspberry Pi in order to link and upload data from the sensor (in the circuit) to the platform. In the directory of your project in Raspberry Pi, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# install the package
$ pip install tuyalinksdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or install from the github repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/tuya/tuyaos-link-sdk-python.git
$ python3 -m pip install ./tuyaos-link-sdk-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next thing is to write the codes which establish connection by using this package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tuyalinksdk.client import TuyaClient

client = TuyaClient(productid='PID', uuid='UUID', authkey='AUTHKEY')

def on_connected():
    print('Connected.')

def on_dps(dps):
    print('DataPoints:', dps)
    client.push_dps(dps)

client.on_connected = on_connected
client.on_dps = on_dps
client.connect()
client.loop_start()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;on_connected&lt;/code&gt; is the method which checks if the connection is well setup. If everything is okay the print statement will run.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;on_dps&lt;/code&gt; is a method which receives the datapoints (values of the sensor) and upload them to the platform so that we can monitor the process from our devices (phones and PC), ie IoT itself. Data are uploaded through &lt;code&gt;client.push_dps()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Write the codes for the Raspberry Pi codes for the ultrasonic sensor alongside the above codes. This is the complete codes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/python
import RPi.GPIO as GPIO
import time
import coloredlogs
from tuyalinksdk.client import TuyaClient
from tuyalinksdk.console_qrcode import qrcode_generate
from time import sleep

GPIO.setmode(GPIO.BCM)
coloredlogs.install(level='DEBUG')

client = TuyaClient(
    productid='44apXXXXXXXXXXX',
     uuid='tuya19dXXXXXXXXXXX',
      authkey='uFjw3VqrrfXXXXXXXXXXXXXX')

TRIG = 2
ECHO = 3
i=0

GPIO.setup(TRIG ,GPIO.OUT)
GPIO.setup(ECHO,GPIO.IN)
GPIO.setup(4 ,GPIO.OUT)

GPIO.output(TRIG, False)
print("Starting.....")
sleep(2)

while True:
   GPIO.output(TRIG, True)
   sleep(0.00001)
   GPIO.output(TRIG, False)

   while GPIO.input(ECHO)==0:
      pulse_start = time.time()

   while GPIO.input(ECHO)==1:
      pulse_stop = time.time()

   pulse_time = pulse_stop - pulse_start
   water_level = pulse_time * 17150
   print(round(water_level, 2))

   time.sleep(1)

   if water_level &amp;lt; 4:
       print("Water will overflow")
       GPIO.output(4, True)
       time.sleep(0.5)
       GPIO.output(4, False)
       time.sleep(0.5)
       GPIO.output(4, True)
       time.sleep(0.5)
       GPIO.output(4, False)
       time.sleep(0.5)
   else:
       GPIO.output(4, False)

def on_connected():
    print('Connected.')

def on_qrcode(url):
    qrcode_generate(url)

def on_reset(data):
    print('Reset:', data)

def on_dps(dps):
    print('DataPoints:', dps)
    dps = {'101':True}
    dps['101'] = data
    client.push_dps(dps)

client.on_connected = on_connected
client.on_qrcode = on_qrcode
client.on_reset = on_reset
client.on_dps = on_dps
client.connect()
client.loop_start()

while True:
    data = water_level
    time.sleep(1)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get the starter codes from Tuya's page in Github and edit the codes by adding Raspberry Pi configuration codes. Run these commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git clone https://github.com/tuya/tuyaos-link-sdk-python.git
 $ cd examples
# view the starter codes here
 $ cat outlet.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reference is &lt;a href="https://pypi.org/project/tuyalinksdk/#tuyaos-link-sdk-for-python"&gt;here&lt;/a&gt; and the codes can be found  &lt;a href="https://dev.togit"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running the codes at first time will create a connection between your project in Tuya platform and the Tuya mobile application which will enable you to send commands from the application to your Raspberry Pi remotely through the platform. To allow the connection, you'll need to scan the qrcode by using your mobile phone generated once you run the &lt;code&gt;outlets.py&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCzusNGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640779236637/HkqwA_U4E.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCzusNGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640779236637/HkqwA_U4E.jpeg" alt="WhatsApp Image 2021-12-29 at 14.51.41.jpeg" width="536" height="1080"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets design a monitoring dashboard in the platform which will receive data from our sensor and display visuals and monitoring. Then after, we will connect a smartphone to view this dashboard just like how we view in the platform (in the platform, a web based)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitoring-dashboard"&gt;
  &lt;/a&gt;
  Monitoring dashboard
&lt;/h3&gt;

&lt;p&gt;In the platform, navigate to &lt;strong&gt;Product&lt;/strong&gt; &amp;gt; &lt;strong&gt;Development&lt;/strong&gt;, it will open the product we've just created in the above steps. Open up that Product (aka, the project) and you'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R6giP9gT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639800632724/KsTdmxDBq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6giP9gT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639800632724/KsTdmxDBq.png" alt="001.png" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Device Panel&lt;/strong&gt; and select a blank screen where it will open up a new page for designing the mobile view screen for your dashboard. Make the UI design of your choice, this is what i came up with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--retlQzZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639802552711/xZBzsPTba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--retlQzZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639802552711/xZBzsPTba.png" alt="002.png" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you're done with the design, &lt;strong&gt;Preview&lt;/strong&gt; to check if its okay then &lt;strong&gt;Save As&lt;/strong&gt; and finally &lt;strong&gt;Release&lt;/strong&gt; your design. Up to this point, the dashboard is ready. We can visualize this design from the smartphone by using &lt;a href="https://play.google.com/store/apps/details?id=com.tuya.smart&amp;amp;hl=en&amp;amp;gl=US"&gt;Tuya Smart App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Up to this point, the project is ready for testing and using. You can monitor the water level of your tank remotely from your device (phone for example).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h2&gt;

&lt;p&gt;If you follow along up to this point, you should be able to send values directly from your phone remotely to the platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rt_K9z_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640837937509/JLmTAV3ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rt_K9z_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640837937509/JLmTAV3ee.png" alt="device.png" width="385" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5aKDvSU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640837950212/G5-dTuA7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5aKDvSU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640837950212/G5-dTuA7a.png" alt="dps.png" width="498" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=oxfzzZoUqGk"&gt;Video demo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tuya/tuyaos-link-sdk-python"&gt;Project examples from Tuya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/maen08/tuya-linksdk-with-raspberry-pi"&gt;Source codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.tuya.com/blog"&gt;Tuya blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tuya/"&gt;Tuya github page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>raspberrypi</category>
      <category>iot</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Up and Running with gRPC</title>
      <author>Sadhan Sarker</author>
      <pubDate>Tue, 04 Jan 2022 05:00:18 +0000</pubDate>
      <link>https://dev.to/mesadhan/up-and-running-with-grpc-4e6p</link>
      <guid>https://dev.to/mesadhan/up-and-running-with-grpc-4e6p</guid>
      <description>&lt;p&gt;Hello, Today I am going to talk about gRPC.&lt;/p&gt;

&lt;p&gt;A high performance, open source universal RPC framework by google.&lt;/p&gt;

&lt;p&gt;Now its part of the Cloud Foundation (CNCF)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-understand-rpc"&gt;
  &lt;/a&gt;
  Let's Understand RPC!
&lt;/h3&gt;

&lt;p&gt;An RPC is a Remote Procedure Call. Google introduce gRPC, But Common Object Request Broker Architecture (CORBA) had RPC before!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6njsg4lf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dzau45x1dedvgqsiysp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6njsg4lf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dzau45x1dedvgqsiysp.png" alt="Image description" width="880" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this above example, you see right side a server code written any other language and left client code calling server function. Okay, Lets consider server written in python we want to call this function from another language, what we will do we simply create a rest api then call that api using other language client. Now think ðŸ¤” is not it cool? if we could call that function nativity like we call functions. I know that will be amazing using RPC we can do that easily.&lt;/p&gt;

&lt;p&gt;Here is an another example from grpc.io website. You can see gRPC server code is written in C++, and gRPC Stubs Or Clients are written in different languages. Here as Stubs they are using Ruby and Java Android client. Do not worry I will share complete example end of the season.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QxuzWNvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21nzr4lfgo9w9g80zjbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxuzWNvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21nzr4lfgo9w9g80zjbd.png" alt="Image description" width="552" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-we-choose-grpc"&gt;
  &lt;/a&gt;
  When we choose gRPC?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When we wants to build microservices&lt;/li&gt;
&lt;li&gt;Wants to communicate between cross-languages services&lt;/li&gt;
&lt;li&gt;Planning to build distributed services&lt;/li&gt;
&lt;li&gt;Needs client &amp;amp; server streamingÂ &lt;/li&gt;
&lt;li&gt;Needs Http/2 based transport protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://grpc.io/"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grpc-vs-rest"&gt;
  &lt;/a&gt;
  gRPC vs REST
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;REST&lt;/strong&gt;&lt;br&gt;
REST uses HTTP/1.1 protocol through theÂ JSON or XMLÂ messaging format. Common http verbs like {GET, POST, PUT, DELETE etc}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gRPC&lt;/strong&gt;&lt;br&gt;
gRPC uses HTTP/2 protocol through Protocol buffer. Methods {unary, server-streaming, client-streaming and bi-directional call}. It offers language independence support 11 programming languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grpc-methodsoperations"&gt;
  &lt;/a&gt;
  gRPC methods/operations
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKbU_Xi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqfxnjmf153ecdzasb06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKbU_Xi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqfxnjmf153ecdzasb06.png" alt="Image description" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-protocol-buffer"&gt;
  &lt;/a&gt;
  What is Protocol Buffer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Protocol buffer are language language-neutral, platform-neutral extensible mechanism for serializing structured data&lt;/li&gt;
&lt;li&gt;Code generated for any language&lt;/li&gt;
&lt;li&gt;Very convenient for transporting a lot of data&lt;/li&gt;
&lt;li&gt;Data is binary and efficiently serialized (small payloads)&lt;/li&gt;
&lt;li&gt;Support Java, Go, Python, NodeJs, Objective-C, C++ and more with proto3 language version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/protocol-buffers"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grpc-vs-rest"&gt;
  &lt;/a&gt;
  gRPC vs Rest
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4gN2Xvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt7haylwgnqg5kl0yxcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4gN2Xvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt7haylwgnqg5kl0yxcu.png" alt="Image description" width="880" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sample-grpc-based-microservice-architecture"&gt;
  &lt;/a&gt;
  Sample gRPC Based Micro-service Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lHWE7Xo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zl24tnet7489lipkztt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lHWE7Xo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zl24tnet7489lipkztt.png" alt="Image description" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mesadhan/grpc-codelab"&gt;Complete gRPC server &amp;amp; clients check that Demo Codebase&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  Congratulations
&lt;/h2&gt;

&lt;p&gt;I hope we learn something exciting about gRPC framework. Thanks for time &amp;amp; passion. Feel free to ask me anything.&lt;/p&gt;

&lt;p&gt;Say Hi to me on &lt;a href="https://twitter.com/eng_sadhan"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/csesadhan/"&gt;Linkedin&lt;/a&gt;, and &lt;a href="https://medium.com/@csesadhan"&gt;Medium&lt;/a&gt; where I keep on sharing interesting updates.&lt;/p&gt;

</description>
      <category>grpc</category>
      <category>webdev</category>
      <category>node</category>
      <category>go</category>
    </item>
    <item>
      <title>CMD tricks </title>
      <author>Call me Kric O_O</author>
      <pubDate>Tue, 04 Jan 2022 04:26:41 +0000</pubDate>
      <link>https://dev.to/i_am_empty/cmd-tricks-44gp</link>
      <guid>https://dev.to/i_am_empty/cmd-tricks-44gp</guid>
      <description>&lt;p&gt;**_Well here are some cool and good tricks of cmd ( command prompt )&lt;/p&gt;

&lt;p&gt;1.md aux\ --- it will create a folder that can't be copy nor deleted&lt;br&gt;
2.attrib -h -s  -r (folder u want to unhide)----------- this will unhide the folder &lt;br&gt;
3.attrib +h +s +r (folder u want to hide)----------- this will hide the folder reload it&lt;br&gt;
4.shutdown -s ----------- it will shut down the computer&lt;br&gt;
5.shutdown -l ----------- it will log off the computer&lt;br&gt;
6.shutdown -r ----------- it will restart  the computer&lt;br&gt;
7.shutdow /s /t (no. of seconds) /c "(Msg u want pop out  befor the shut down )"--------- it will shutdown the pc after the seconds are over and dislpay the msg u have written &lt;br&gt;
8.shutdow /s /t (no. of seconds) --------- it will shutdown the pc after the seconds are over &lt;br&gt;
9.color help ------- it will show the color code&lt;br&gt;
10.color   (background code)(font code ) -------it will customize the cmd by codes eg color help 42 (it changes the backfround to red and font to green)&lt;br&gt;
11.*&lt;em&gt;**prompt (name u want change )$G ---- it will change the prompt&lt;br&gt;
title (whateve u wnat ) ----- it will chane the title _&lt;/em&gt;*&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
