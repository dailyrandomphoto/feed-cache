<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Console Application Input Library in Java.</title>
      <author>Kooin-Shin</author>
      <pubDate>Fri, 23 Apr 2021 02:51:31 +0000</pubDate>
      <link>https://dev.to/kooin/console-application-input-library-in-java-44jg</link>
      <guid>https://dev.to/kooin/console-application-input-library-in-java-44jg</guid>
      <description>&lt;p&gt;Hi all, &lt;br&gt;
I will introduce a library to build console application with more easier, and with this library, you can make fine interactive methodology on your console application.&lt;/p&gt;

&lt;p&gt;You can define queries for user input using this library on your application and later, you able to use the input data in your code.&lt;/p&gt;

&lt;p&gt;All queries are managed with YAML file and you can redefine message content of it. &lt;br&gt;
You can manage trigger process by implementing ConsoleTrigger interface and treat user input data on this object.&lt;/p&gt;

&lt;p&gt;More detail thing of this library to get, you can have it to visit below GitHub project.&lt;/p&gt;

&lt;p&gt;GitHub link: [console-input][&lt;a href="https://github.com/9ins/console-input-manager/tree/1.0.0"&gt;https://github.com/9ins/console-input-manager/tree/1.0.0&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>java</category>
      <category>console</category>
      <category>input</category>
    </item>
    <item>
      <title>Creating a CLI Gem for My Flatiron School Project  </title>
      <author>Carley Tripp</author>
      <pubDate>Fri, 23 Apr 2021 00:49:22 +0000</pubDate>
      <link>https://dev.to/carleytripp/creating-a-cli-gem-for-my-flatiron-school-project-d25</link>
      <guid>https://dev.to/carleytripp/creating-a-cli-gem-for-my-flatiron-school-project-d25</guid>
      <description>&lt;p&gt;For my first portfolio project, I was challenged to program a CLI application with good object oriented code. I had to scrape a website and write a program that would offer a list of available data and information about that data that went at least one level deep. Sounds easy, right? Wrong. The task was actually quite daunting for a beginner like me.&lt;/p&gt;

&lt;p&gt;All of our previous lessons and labs offered pretty direct instructions on what we were supposed to do. Now that I was on my own, I started to panic. Which website would I choose? What kind of methods should I write? Do I really even know how to code?? Fortunately, my senses came back to me after a few minutes (or hours) of freaking out.&lt;/p&gt;

&lt;p&gt;I remembered that I had spent weeks preparing for this very moment. All the information I had absorbed from the lessons, labs, and lectures before was still there in my brain. I just needed to fish it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;I was given a few requirements to meet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provide a CLI&lt;/li&gt;
&lt;li&gt;CLI must provide access to data from a web page.&lt;/li&gt;
&lt;li&gt;The data provided must go at least one level deep, generally by showing the user a list of available data and then being able to drill down into a specific item.&lt;/li&gt;
&lt;li&gt;The CLI application can not be a Music CLI application as that is too similiar to the other OO Ruby final project. Also please refrain from using Kickstarter as that was used for the scraping 'code along'.&lt;/li&gt;
&lt;li&gt;Use good OO design patterns. You should be creating a collection of objects - not hashes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There were also bonus points up for grab if I could create and publish a gem to &lt;a href="https://rubygems.org/"&gt;RubyGems&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;After contemplating for some time, I decided on programming a science news reader. I quickly browsed my way over to the &lt;a href="http://www.sciencemag.org/"&gt;Science&lt;/a&gt; website in order to check it out. Bingo! It was perfect. The latest news was laid out in a nice order, and each story was contained within a list element that could easily be scraped. Now, I just had to figure out how to make a gem.&lt;/p&gt;

&lt;p&gt;There were a number of resources provided to help me get started. Among them was this &lt;a href="https://www.youtube.com/watch?v=_lDExWIhYKI"&gt;walkthrough video&lt;/a&gt; filmed by Avi. Admittedly, I had to start over a couple of times before getting everything in order, but I ended up successfully creating my first Ruby gem! Awesome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-code"&gt;
  &lt;/a&gt;
  Writing the code
&lt;/h2&gt;

&lt;p&gt;I began by creating two classes called CLI and Story. The CLI class would be responsible for greeting the user, listing the stories available to read, and providing menu options. I decided to include the scraper methods in my Story class rather than creating a separate class for scraping. This was because my scraper methods were rather small, and the class itself didn't contain much else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QNWQXHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RaRZfDq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QNWQXHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RaRZfDq.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code quickly came together thanks to my earlier method stubs. If you don't know what method stubs are, they're basically little pieces of code that act as a placeholder for later functionality. For example, instead of the functional code written in the list method pictured above, I originally had something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;puts "Bees!"
puts "Volcano Story"
puts "Why Science Rocks"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After writing all the necessary code, I was finally ready to publish my gem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-tada"&gt;
  &lt;/a&gt;
  Launch 🎉
&lt;/h2&gt;

&lt;p&gt;Publishing my gem to RubyGems was super easy. Bundler created a rakefile when I made my gem so all I had to do was run 'rake install'. This allowed me to make sure everything was in working order before actually releasing my gem into the wild. When I was satisfied with the program, I used 'rake release' to publish.&lt;/p&gt;

&lt;p&gt;You can check the gem out &lt;a href="https://rubygems.org/gems/sciencemag_latest_news"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cli</category>
      <category>gem</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Dependency Inversion Principle</title>
      <author>Josué Rodríguez</author>
      <pubDate>Fri, 23 Apr 2021 00:38:48 +0000</pubDate>
      <link>https://dev.to/josuerodriguez98/dependency-inversion-principle-35i</link>
      <guid>https://dev.to/josuerodriguez98/dependency-inversion-principle-35i</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Dependency Inversion Principle&lt;/strong&gt; states that entities must depend on abstractions, not on concretions. High-level modules should not depend on low-level modules. Both should depend on abstraction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;High-level modules should not depend on low-level modules. Both should depend on abstraction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we talk about &lt;strong&gt;high-level modules&lt;/strong&gt; we are referring to a class that executes an action implementing a tool or library, and when we talk about &lt;strong&gt;low-level modules&lt;/strong&gt; we are referring to the tools or libraries that are needed to execute an action.&lt;/p&gt;

&lt;p&gt;The principle allows for decoupling, which means to separate, disengage or dissociate something from something else. This helps us by reducing dependency and allowing for easier implementations of other tools in the future.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h1&gt;

&lt;p&gt;Let's imagine that we have a Candy Store and we are developing the checkout process. In the beginning, we only planned to implement &lt;a href="https://stripe.com/"&gt;Stripe&lt;/a&gt; as our payments processor. Stripe needs for the amount to be passed on as cents to make the transaction. Our classes will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Checkout.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;makePayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Multiplying by 100 to get the cents&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Stripe.js&lt;/span&gt;
&lt;span class="c1"&gt;//Custom Stripe implementation that calls the Stripe API&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*Call the Stripe API methods*/&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Payment made for $&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we created a dependency between our &lt;code&gt;Checkout&lt;/code&gt; class (high-level module) and &lt;code&gt;Stripe&lt;/code&gt; (low-level module), violating the Dependency Inversion Principle. The dependency is especially noticeable when we convert the amount to cents. The &lt;code&gt;Checkout&lt;/code&gt; should not care about which payment processor is being used, it only cares about making a transaction.&lt;/p&gt;

&lt;p&gt;To decouple these two modules, we would have to implement an intermediary between the checkout and the payment processor, creating an abstraction so that no matter what payment processor we use, the &lt;code&gt;Checkout&lt;/code&gt; class will always work with the same method calls. The new &lt;code&gt;PaymentProcessor&lt;/code&gt; class will be in charge of adapting everything to payment processor to be used (in this case, Stripe). The intermediary class will have the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//PaymentProcessor.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PaymentProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;createPaymentIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amountInCents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amountInCents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the &lt;code&gt;createPaymentIntent&lt;/code&gt; on the &lt;code&gt;PaymentProcessor&lt;/code&gt; class is converting the amount to cents. And now we refactor the Checkout class to implement the abstraction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Checkout.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PaymentProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;makePayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPaymentIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we ever need to change our payment processor, we can do so by passing the new processor instead of Stripe on the &lt;code&gt;Checkout&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;Imagine that now we are asked to replace Stripe with another payment processor that does not require for the amount to be converted to cents &lt;strong&gt;but&lt;/strong&gt; on every transaction asks for the currency that's going to be used. The resulting code will be the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Checkout.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PaymentProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BetterProcessor&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;makePayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPaymentIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//PaymentProcessor.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PaymentProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;createPaymentIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//BetterProcessor.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BetterProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Payment made for &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how on the &lt;code&gt;Checkout&lt;/code&gt; we only changed the payment processor to be used on the constructor and the &lt;code&gt;makePayment&lt;/code&gt; method remained untouched. We adapted the intermediary class &lt;code&gt;PaymentProcessor&lt;/code&gt; to the processor needs.&lt;/p&gt;

&lt;p&gt;We removed the dependency between &lt;code&gt;Checkout&lt;/code&gt; and the processor used by implementing the intermediary class &lt;code&gt;PaymentProcessor&lt;/code&gt;, following the Dependency Inversion Principle.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>agile</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Como aprendi Go en 3 dias</title>
      <author>Polibov</author>
      <pubDate>Thu, 22 Apr 2021 23:59:11 +0000</pubDate>
      <link>https://dev.to/santiagova/como-aprendi-go-en-3-dias-2nh</link>
      <guid>https://dev.to/santiagova/como-aprendi-go-en-3-dias-2nh</guid>
      <description>&lt;p&gt;En este post estaremos hablando acerca de &lt;strong&gt;Go&lt;/strong&gt;, Compartiré algunos recursos, opiniones y recomendaciones que fueron muy útiles para mí.&lt;br&gt;
Y sé lo que estás pensando y &lt;strong&gt;SI!&lt;/strong&gt;, sé que el título puede parecer un poco clickbait, pero, &lt;strong&gt;ESPERA!&lt;/strong&gt;&lt;br&gt;
Puedo explicarte si esto realmente es cierto o falso.&lt;br&gt;
Así que, empecemos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c%C3%B3mo-logre-esto"&gt;
  &lt;/a&gt;
  ¿Cómo logre esto?
&lt;/h2&gt;

&lt;p&gt;Bueno, realmente no podría decir que domino Go, pero en estos 3 días me siento muy bien con los resultados obtenidos.&lt;br&gt;
En estos 3 días mi rutina de estudio fue de alrededor de 4 horas, de las cuales 3 me las pasaba viendo tutoriales o la documentación oficial, y la otra hora me la pasaba experimentando cosas que quería saber si funcionaban o como funcionaban en Go.&lt;br&gt;
Ahora mismo me siento bastante bien para empezar algunos proyectos pequeños y así mismo ganar experiencia.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#por-qu%C3%A9-el-t%C3%ADtulo"&gt;
  &lt;/a&gt;
  ¿Por qué el título?
&lt;/h2&gt;

&lt;p&gt;El título puede ser completamente falso o engañoso en caso de que sea tu primer lenguaje, y si este es tu caso, no te preocupes, con el tiempo podrás aprenderlo también, pero claramente tendrás que ir más paso a paso.&lt;/p&gt;

&lt;p&gt;Así que, de nuevo, el título no es literal, pero en caso de que este no sea tu primer lenguaje pues puedes empezar a aprender y en 3 días podrías hacer algunas cosas que más adelante te diré.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#en-3-d%C3%ADas-que-debes-o-puedes-aprender"&gt;
  &lt;/a&gt;
  En 3 días que debes o puedes aprender
&lt;/h2&gt;

&lt;p&gt;3 días, esto puede sonar un poco loco, pero es posible aprender lo necesario para buscar un trabajo (Nah, estoy bromeando 🤣)&lt;br&gt;
Bueno, después de esa mala broma, después de esos 3 días podrás empezar a hacer proyectos como alguna API simple y cosas por el estilo y así con el tiempo volverte un Master de GO.&lt;br&gt;
Te recomiendo que empieces a aprender en este orden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Primitives&lt;/li&gt;
&lt;li&gt;Constants&lt;/li&gt;
&lt;li&gt;Arrays y Slices&lt;/li&gt;
&lt;li&gt;Maps y Structs&lt;/li&gt;
&lt;li&gt;If y Switch Statements&lt;/li&gt;
&lt;li&gt;Looping&lt;/li&gt;
&lt;li&gt;Defer, Panic, y Recover&lt;/li&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sinceramente, para mí lo que más complicado me ha sido son los Pointers y las Interfaces, aún no los logro comprender al 100%, te recomiendo prestes mucha atencion a todos los temas pero mas en especial a esos porque pueden ser un poco confusos.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recursos"&gt;
  &lt;/a&gt;
  Recursos
&lt;/h1&gt;

&lt;p&gt;Los recursos que te dejaré acá son completamente GRATIS y los dividiré por idioma, Ingles y Español&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#english-resources"&gt;
  &lt;/a&gt;
  English resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=YS4e4q9oBaU"&gt;FreeCodeCamp 7 hours course from scratch&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://tour.golang.org/"&gt;The official tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.golang.org/"&gt;The playground of Go, without installations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#recursos-en-espa%C3%B1ol"&gt;
  &lt;/a&gt;
  Recursos en Español
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/gophers-latam/awesome-latam"&gt;Este repositorio ya trae una gran cantidad de recursos en español&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gracias-por-leer-este-post"&gt;
  &lt;/a&gt;
  Gracias por leer este post
&lt;/h2&gt;

&lt;p&gt;Muchas gracias por leer este post hasta el final, si te ha gustado deja tu corazoncito y tu follow aca y en mi &lt;a href="https://github.com/SantiagoVA"&gt;github&lt;/a&gt; donde en los proximos dias empezare a subir alguno que otro repositorio de algún proyecto en go :)&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>go</category>
      <category>spanish</category>
      <category>backend</category>
    </item>
    <item>
      <title>Nasa Open Source Goes to Mars | GitHub and the Ingenuity Helicopter</title>
      <author>Davide Benvegnù</author>
      <pubDate>Thu, 22 Apr 2021 23:14:10 +0000</pubDate>
      <link>https://dev.to/n3wt0n/nasa-open-source-goes-to-mars-github-and-the-ingenuity-helicopter-4aph</link>
      <guid>https://dev.to/n3wt0n/nasa-open-source-goes-to-mars-github-and-the-ingenuity-helicopter-4aph</guid>
      <description>&lt;p&gt;Just less than 4 days ago &lt;strong&gt;Nasa has made history&lt;/strong&gt; once again, flying a helicopter on Mars for the first time in human history. And that has been possible thanks to many &lt;strong&gt;brilliant researchers, scientists, and engineers&lt;/strong&gt;... but also &lt;strong&gt;thanks to Open Source Software and GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Today's post is a special one, it is a celebration of an &lt;strong&gt;incredible achievement&lt;/strong&gt; for the teams at NASA and the Jet Propulsion Lab (JPL). &lt;/p&gt;

&lt;p&gt;Less than 4 days before the publishing of this post, in fact, we all watched in awe as the first Mars Helicopter, Ingenuity, took flight in the thin Martian atmosphere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dA8v5X5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29cwziaicsuyp5ygssd3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dA8v5X5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29cwziaicsuyp5ygssd3.jpg" alt="Ingenuity flight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this is not only an achievement for Nasa and JPL. It's &lt;strong&gt;a big day for Open Source, and for GitHub&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-win-for-open-source"&gt;
  &lt;/a&gt;
  A Win for Open Source
&lt;/h3&gt;

&lt;p&gt;In fact, &lt;strong&gt;nearly 12,000 developers on GitHub&lt;/strong&gt; contributed to Ingenuity’s software via open source.&lt;/p&gt;

&lt;p&gt;Moreover, Nasa's JPL itself has used GitHub for managing this project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjoAqprE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9088sco3j65uam2ekdt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjoAqprE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9088sco3j65uam2ekdt.png" alt="GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see above, someone in the control room is tracking the &lt;strong&gt;progress on a GitHub Issue&lt;/strong&gt; mere minutes before the take off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0rQdPht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xqfqaapcgu24quhwg5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0rQdPht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xqfqaapcgu24quhwg5i.png" alt="GitHub on a big screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and later on they have the GitHub screen open on the big screen that everyone in the control room can see, once again to manage the progress of the pre-flight moments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-achievements-badges"&gt;
  &lt;/a&gt;
  GitHub Achievements Badges
&lt;/h3&gt;

&lt;p&gt;GitHub is also using this opportunity to &lt;strong&gt;introduce a new Achievements section to the GitHub profile&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWPI5dBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80ghuv7seum5ra14iazx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWPI5dBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80ghuv7seum5ra14iazx.gif" alt="GitHub Achievements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right now, Achievements include the &lt;em&gt;Mars 2020 Helicopter Mission&lt;/em&gt; badge, the &lt;em&gt;Arctic Code Vault&lt;/em&gt; badge, and a badge for sponsoring open source work via &lt;em&gt;GitHub Sponsors&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hd5XJB-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7zvhd6amks7dlfrwy7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hd5XJB-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7zvhd6amks7dlfrwy7u.png" alt="Achievements Badges"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but watch out this space because &lt;strong&gt;new badges will be added overtime&lt;/strong&gt; to celebrate and award developers in regard of special project, or incredible successes like the first helicopter flight in space.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;Wanna watch the celebration video? Here it is:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bEJSwQ6yc3w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/bEJSwQ6yc3w"&gt;Link to the video: https://youtu.be/bEJSwQ6yc3w&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Let me know in the comment section below if you have received one or more of these badges and post your GitHub handle.&lt;/p&gt;

&lt;p&gt;Once again, &lt;strong&gt;congratulations to the teams at NASA and JPL, and to the thousands of developers&lt;/strong&gt; who made today’s first Martian flight possible. We’re all still here on Earth, but our code is now on Mars!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bEJSwQ6yc3w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>nasa</category>
      <category>mars</category>
      <category>opensource</category>
    </item>
    <item>
      <title>My Lessons From 3 Failed Interviews As A Developer</title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 22 Apr 2021 22:06:15 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/my-lessons-from-3-failed-interviews-as-a-developer-gg1</link>
      <guid>https://dev.to/ubahthebuilder/my-lessons-from-3-failed-interviews-as-a-developer-gg1</guid>
      <description>&lt;p&gt;2019.&lt;/p&gt;

&lt;p&gt;The year I started learning how to code with a free eBook I downloaded from the web. Since then a lot of things have happened.&lt;/p&gt;

&lt;p&gt;One of them is failing my interview for web developer roles three times. It's not all gloomy though, I have learnt a lot from those experience.&lt;/p&gt;

&lt;p&gt;In this post, I'll share my experience with you all. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-first-experience"&gt;
  &lt;/a&gt;
  My First Experience
&lt;/h3&gt;

&lt;p&gt;I was a young developer. While I was (admittedly) a decent up-and-coming web developer, I was very inexperienced when it came to interviews. As a matter of fact, it was going to be my first.&lt;br&gt;
The article that booked me my first interview session was a post series I created on my DEV blog. The series was about SQL. It was aptly titled “Master your SQL Commands”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZiCi-C0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuix1qs28j7ceho81s08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZiCi-C0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuix1qs28j7ceho81s08.png" alt="My Post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those of you who don’t what SQL is, it stands for &lt;em&gt;Structured Query Language&lt;/em&gt;. SQL is a computer language for storing, manipulating and retrieving data stored in a relational database&lt;/p&gt;

&lt;p&gt;The flagship article gained a bit of traction and some people were impressed with it. One of them even reached out and offered me some payment in exchange for me publishing the two remaining articles on their platform. He wanted to vet my programming/writing skills; hence he scheduled an interview with me.&lt;br&gt;
I was nervous, not because I didn’t think I’ll make it, but because I didn’t know what to expect. &lt;/p&gt;

&lt;p&gt;We initially agreed that the interview will be held in Zoom, but the notoriously poor internet connection we have here in my country (Nigeria) didn’t let that eventualize. Ultimately, we had to settle for a WhatsApp call.&lt;/p&gt;

&lt;p&gt;The session began fine, albeit some intermittent disconnections and reconnections. He asked about my past experience and portfolio. I replied that I had no portfolio, but a bit of working experience. I went on to describe my previous developer role I had to him.&lt;br&gt;
Next, he asked me about my familiarity with Databases. This made sense since the whole thing started with my article on the topic. I informed him my knowledge of SQL, MySQL and PostgreSQL.&lt;/p&gt;

&lt;p&gt;At that point, I could hear the slight hesitance in his voice. Then he asked about my writing skills. I replied a bit boastfully that I was a good, or at least a decent writer.  I even listed the previous writing roles I had for various sites and how I developed an interest for writing at a very young age.&lt;/p&gt;

&lt;p&gt;After what lasted for about 25 minutes in total, we then concluded the call. He assured me that he’ll get back via email letter that evening yet nothing happened. Ouch, I know. Luckily, I am not the kind of person who took things personally. However, I did learn something. Here it is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you’re looking for a job as a developer, always have a portfolio. As a writer, you should have enough sample copies of your previous works present and ready to be shown.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My writing skill obviously wasn’t the issue, since It was the thing that interested him in the first place. The issue, however, was my lack of credentials. Not having a portfolio. &lt;strong&gt;Never forget this&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-second-experience"&gt;
  &lt;/a&gt;
  My Second Experience
&lt;/h3&gt;

&lt;p&gt;My second experience was even more painful, but I am very excited to share it to you all. &lt;/p&gt;

&lt;p&gt;I am primarily a JavaScript developer. After learning HTML and CSS, I delved into JavaScript and instantly got hooked to it. Being an active part of the developer community on Twitter, I get a lot of direct messages. However, this time, I got one from a start-up founder who offered me a contract-based role if I was able to scale past the interview. His project was written primarily in typescript, so I was going to be working with JavaScript after all!&lt;/p&gt;

&lt;p&gt;I was excited and nervous at the same time. This is a language that I loved. The interview was also just my second so I didn’t really know what to expect. I was quite busy with School so I really didn’t have the time to prepare as well. In fact, I am going to say that I got complacent. I overestimated my knowledge of JavaScript and that would ultimately backfire at me, as you are going to find out soon.&lt;/p&gt;

&lt;p&gt;The day of the interview arrived and boy I was nervous. I set up my laptop and braced myself for the onslaught of poor internet connection. My interviewee was African so he was very aware of the network issue we had. As a result, we decided it was going to be done over at WhatsApp.  We connected through to each other and he gave me a link to the platform for the live interview, which was CoderPad.&lt;/p&gt;

&lt;p&gt;He gave me an initial test, I fumbled. Then he gave me a second test, and I failed yet again. At that point, I knew what the grim outcome will be. He courteously thanked me for my time and tried boosting my morale. While that did work a bit, here are some things I learnt from this debacle:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer, practise is very important. Even 3 days of no coding can make you forget a lot. Practise boosts your memory and internalizes a lot of programming concepts in your mind. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I made the mistake of not practising my JavaScript for over a week and I paid the price. &lt;strong&gt;Don’t be complacent&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-third-experience"&gt;
  &lt;/a&gt;
  My Third Experience
&lt;/h3&gt;

&lt;p&gt;My third experience was somewhat recent, yet still doomed. I got contacted once again though my Twitter DMs. He asked me if I was up for a role and replied positive. We discussed on the nature of languages to be used, as well as the number of workdays per week. My intended role revolved around Gatsby and React. This time I was wary of complacency. I prepared for the interview amidst other daily tasks I had.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;N/B&lt;/strong&gt;: For those of you looking to learn React, &lt;a href="https://gumroad.com/a/834147443"&gt;HTML to React&lt;/a&gt; is a brilliant course to go from knowing just HTML to knowing React.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It got delayed by hour but eventually we got seated and set. Our initial attempt was once again hampered by the terrible network connection. Video calling with Zoom and WhatsApp was not viable. We ultimately had to settle for a WhatsApp audio call instead.&lt;/p&gt;

&lt;p&gt;The interview started okay, better than I expected. He asked me a couple of things about JavaScript, then React. Everything was going on smooth and fine. However, things began to go sour as we progressed. He asked me some question about React hooks and I fidgeted and stammered. Thing got progressively worst for me from that point onwards. After that, he courteously informed me that I didn’t make the test, not before praising me for how much I have learned in just under two years as a web developer. While it sucked, I learnt something important:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Experience matters. The longer you are in the industry, the more you know and understand. Especially if you build complex and professional websites very often. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This, admittedly, isn’t something I have done a lot. Being a seasoned and experienced developer, he was able to identify this no matter how good/savvy I was.&lt;/p&gt;

&lt;p&gt;After this latest disappointment, I dedicated at least one hour everyday to building websites as side projects. Implementation is hard because of time constraints, unstable electricity and other challenges but I am committed to it.&lt;/p&gt;

&lt;p&gt;In summary, I failed those three interviews because&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was a newbie&lt;/li&gt;
&lt;li&gt;I had no portfolio&lt;/li&gt;
&lt;li&gt;I had little working experience&lt;/li&gt;
&lt;li&gt;I was complacent&lt;/li&gt;
&lt;li&gt;I stopped practising and getting better&lt;/li&gt;
&lt;li&gt;I was inexperienced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to ace and interview, you need to &lt;em&gt;avoid all of the mistakes I made&lt;/em&gt;. You should go from being a newbie to properly understanding the basics. In fact, I recently created a Web Development Beginners Guide eBook which will guide on all you need to know as an absolute beginner. You can get it here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/l/WebDevBeginners"&gt;Web Development - The Beginners Guide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secondly&lt;/strong&gt;, you must have a portfolio. This should show all your previous projects, big and small. You should make your portfolio stand out as much as possible.&lt;/p&gt;

&lt;p&gt;Also, &lt;em&gt;never be complacent&lt;/em&gt;. Always underestimate your abilities, yet remain confident. Keep &lt;strong&gt;practising&lt;/strong&gt; and building stuff.  You’ll get better and better at it. And most importantly, you’ll become more experienced in it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt;: I share my coding experiences on this blog. If you want to follow my journey, follow my blog and subscribe to newsletters to stay updated. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Iterate with JavaScript Do...While Loops</title>
      <author>Randy Rivera</author>
      <pubDate>Thu, 22 Apr 2021 21:59:45 +0000</pubDate>
      <link>https://dev.to/rthefounding/iterate-with-javascript-do-while-loops-1aci</link>
      <guid>https://dev.to/rthefounding/iterate-with-javascript-do-while-loops-1aci</guid>
      <description>&lt;p&gt;The next type of loop you will learn is called a do...while loop. It is called a do...while loop because it will first do one pass of the code inside the loop no matter what, and then continue to run the loop while the specified condition evaluates to true.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var myArray = [];
var i = 10;

do {
  myArray.push(i);
  i++;
} while (i &amp;lt; 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(myArray); will display [ 10 ]
console.log(i); will display 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In this case, we initialize the value of i to 10. When we get to the next line, there is no condition to evaluate, so we go to the code inside the curly braces and execute it. We will add a single element to the array and then increment i before we get to the while condition. When we finally evaluate the condition i &amp;lt; 10 on the last line, we see that i is now 11, which fails the I &amp;lt; 10 so we exit the loop and are done. At the end of the above example, the value of ourArray is [10]. Essentially, a do...while loop ensures that the code inside the loop will run at least once.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Raspberry Pi media player with Plex, Transmission, Sonarr, Bazarr and Jackett</title>
      <author>charly3pins</author>
      <pubDate>Thu, 22 Apr 2021 21:42:11 +0000</pubDate>
      <link>https://dev.to/charly3pins/raspberry-pi-media-player-with-plex-transmission-sonarr-bazarr-and-jackett-2k1l</link>
      <guid>https://dev.to/charly3pins/raspberry-pi-media-player-with-plex-transmission-sonarr-bazarr-and-jackett-2k1l</guid>
      <description>&lt;p&gt;So you have a Raspberry Pi abandoned and always wanted to use it for something useful. Also you like to see series but there are too many providers and you don't know which one subscribes to it. Don't worry with this tutorial you will have both problems solved at once; You will use the Raspberry Pi for watching your favourite series with no limits!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-raspberry-os"&gt;
  &lt;/a&gt;
  Install Raspberry OS
&lt;/h2&gt;

&lt;p&gt;First of all we need to install an Operating System in our Raspberry. So for that we have different options explained in the &lt;a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/"&gt;official documentation&lt;/a&gt;. I personally decided for the &lt;code&gt;Raspberry Pi OS (32-bit) Lite&lt;/code&gt; as I don't want any desktop or any recommended software, so the lighter the better.&lt;/p&gt;

&lt;p&gt;From the &lt;a href="https://www.raspberrypi.org/documentation/installation/installing-images/"&gt;source&lt;/a&gt; we follow the instructions for the linux image.&lt;/p&gt;

&lt;p&gt;AS you know, we need a microSD for running the OS in a Raspberry Pi, so we have to connect to our laptop and know the name of it. For that we can open a terminal and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;lsblk &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case it is &lt;code&gt;/dev/sda&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once we know the name of the SD, we need to write the image to the card with the command below making sure you replace the input file &lt;code&gt;if=&lt;/code&gt; argument with the path to your .img file, and the &lt;code&gt;/dev/sda&lt;/code&gt; in the output file &lt;code&gt;of=&lt;/code&gt; argument with the correct device name. &lt;/p&gt;

&lt;p&gt;⚠️ This is very important, as you will lose all the data on the hard drive if you provide the wrong device name. Make sure the device name is the name of the whole SD card as described above, not just a partition. For example: sdd, not sdds1 or sddp1; mmcblk0, not mmcblk0p1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo dd &lt;span class="nb"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;M &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2020-08-20&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;raspios&lt;span class="p"&gt;-&lt;/span&gt;buster&lt;span class="p"&gt;-&lt;/span&gt;armhf&lt;span class="p"&gt;-&lt;/span&gt;lite&lt;span class="p"&gt;.&lt;/span&gt;img of&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/dev/&lt;/span&gt;sda conv&lt;span class="p"&gt;=&lt;/span&gt;fsyn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can add the flags &lt;code&gt;status=progress conv=fsync&lt;/code&gt; to see the progress:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;dd &lt;span class="nb"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;M &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2020-08-20&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;raspios&lt;span class="p"&gt;-&lt;/span&gt;buster&lt;span class="p"&gt;-&lt;/span&gt;armhf&lt;span class="p"&gt;.&lt;/span&gt;img of&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/dev/&lt;/span&gt;sda status&lt;span class="p"&gt;=&lt;/span&gt;progress conv&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;fsync&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it's zipped we can concat the unzip and the dd commands with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo unzip &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;p&lt;/span&gt; &lt;span class="m"&gt;2020-08-20&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;raspios&lt;span class="p"&gt;-&lt;/span&gt;buster&lt;span class="p"&gt;-&lt;/span&gt;armhf&lt;span class="p"&gt;.&lt;/span&gt;zip &lt;span class="p"&gt;|&lt;/span&gt; sudo dd of&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/dev/&lt;/span&gt;sda &lt;span class="nb"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;M conv&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;fsync&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we have our OS installed in the microSD so we have our Raspberry Pi ready! 🙌&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#login"&gt;
  &lt;/a&gt;
  Login
&lt;/h3&gt;

&lt;p&gt;Now is the moment to insert the microSD back to the raspberry, connect it to your screen and plug it in.&lt;/p&gt;

&lt;p&gt;In our TV appears something like that:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnYP3hV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/raspberry-media-player/installation.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnYP3hV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/raspberry-media-player/installation.jpg" alt="installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can notice on the bottom I already logged in. The user is &lt;code&gt;pi&lt;/code&gt; and the default password &lt;code&gt;raspberry&lt;/code&gt;. It is super recommended to change the password the first time you log in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-ssh"&gt;
  &lt;/a&gt;
  Enable ssh
&lt;/h2&gt;

&lt;p&gt;Next step is to enable the ssh connection as we want to manage the Raspberry from our laptop, not from the TV so first is reading the &lt;a href="https://www.raspberrypi.org/documentation/remote-access/ssh/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second is use the &lt;code&gt;systemctl&lt;/code&gt; to start and enable the service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo systemctl start ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo systemctl enable ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check if its working with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo systemctl status ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it will appear something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;● ssh&lt;span class="p"&gt;.&lt;/span&gt;service &lt;span class="p"&gt;-&lt;/span&gt; OpenBSD Secure Shell server
   Loaded&lt;span class="p"&gt;:&lt;/span&gt; loaded &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/lib/&lt;/span&gt;systemd&lt;span class="sr"&gt;/system/&lt;/span&gt;ssh&lt;span class="p"&gt;.&lt;/span&gt;service; enabled; vendor preset&lt;span class="p"&gt;:&lt;/span&gt; enabled&lt;span class="p"&gt;)&lt;/span&gt;
   Active&lt;span class="p"&gt;:&lt;/span&gt; active &lt;span class="p"&gt;(&lt;/span&gt;running&lt;span class="p"&gt;)&lt;/span&gt; since XXX
     Docs&lt;span class="p"&gt;:&lt;/span&gt; man&lt;span class="p"&gt;:&lt;/span&gt;sshd&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           man&lt;span class="p"&gt;:&lt;/span&gt;sshd_config&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 Main PID&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;440&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;sshd&lt;span class="p"&gt;)&lt;/span&gt;
    Tasks&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;limit&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2063&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   CGroup&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/system.slice/&lt;/span&gt;ssh&lt;span class="p"&gt;.&lt;/span&gt;service
           └─&lt;span class="m"&gt;440&lt;/span&gt; &lt;span class="sr"&gt;/usr/&lt;/span&gt;sbin/sshd &lt;span class="p"&gt;-&lt;/span&gt;D

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we need to discover the &lt;code&gt;IP&lt;/code&gt; of our Raspberry. For that we can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And something like that will appear:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9WmWXc82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/raspberry-media-player/ifconfig.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WmWXc82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/raspberry-media-player/ifconfig.jpg" alt="ifconfig"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case you can see it is &lt;code&gt;192.168.1.131&lt;/code&gt;, so I will use that as reference; yours probably will be different because it depends on your network.&lt;/p&gt;

&lt;p&gt;Now we can go to our laptop and connect via ssh:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;ssh &lt;span class="nb"&gt;pi&lt;/span&gt;@&lt;span class="m"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;131&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask the password but we already know which one is because we logged in in the Raspberry directly (remember you change it 😜).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#config-an-usb-drive-as-media-storage"&gt;
  &lt;/a&gt;
  Config an USB Drive as media storage
&lt;/h2&gt;

&lt;p&gt;First we want to update and have the latest dependencies, so type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;
sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I decided to use an USB drive formatted as ExFAT since I only work with Linux. Plug the USB drive to the Raspberry Pi and restart it.&lt;/p&gt;

&lt;p&gt;From the terminal execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo fdisk &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will list all the partitions recognised by the system. Identify the one associated with the external drive. In my case it was:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;Disk &lt;span class="sr"&gt;/dev/&lt;/span&gt;sda&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; TiB&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2000398934016&lt;/span&gt; bytes&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3907029168&lt;/span&gt; sectors
Disk model&lt;span class="p"&gt;:&lt;/span&gt; External USB &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
Units&lt;span class="p"&gt;:&lt;/span&gt; sectors of &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Sector size &lt;span class="p"&gt;(&lt;/span&gt;logical&lt;span class="sr"&gt;/physical): 512 bytes /&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
I&lt;span class="sr"&gt;/O size (minimum/&lt;/span&gt;optimal&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Disklabel &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; dos
Disk identifier&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;x0072438b

Device     Boot Start        End    Sectors  Size Id Type
&lt;span class="sr"&gt;/dev/&lt;/span&gt;sda1        &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="m"&gt;3907028991&lt;/span&gt; &lt;span class="m"&gt;3907026944&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;T  &lt;span class="m"&gt;7&lt;/span&gt; HPFS&lt;span class="sr"&gt;/NTFS/&lt;/span&gt;exFAT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now install the exFAT drivers, otherwise the file-system will not be recognised:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; install exfat&lt;span class="p"&gt;-&lt;/span&gt;fuse
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And create the directory where the disk will be mounted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="sr"&gt;/media/&lt;/span&gt;storage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can mount the disk with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo mount &lt;span class="sr"&gt;/dev/&lt;/span&gt;sda1 &lt;span class="sr"&gt;/media/&lt;/span&gt;storage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⚠️ Remember to replace &lt;code&gt;sda1&lt;/code&gt; with the actual device name that you found with sudo fdisk -l.&lt;/p&gt;

&lt;p&gt;To unmount it we can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo umount &lt;span class="sr"&gt;/media/&lt;/span&gt;storage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ideally, we want the drive to be always connected, so we configure the mount at boot and save to type those commands every time we restart the Raspberry.&lt;/p&gt;

&lt;p&gt;First we find the identifier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo blkid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case the result was:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="sr"&gt;/dev/&lt;/span&gt;mmcblk0p1&lt;span class="p"&gt;:&lt;/span&gt; LABEL_FATBOOT&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"boot"&lt;/span&gt; LABEL&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"boot"&lt;/span&gt; UUID&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"4AD7-B4D5"&lt;/span&gt; TYPE&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vfat"&lt;/span&gt; PARTUUID&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"d5603eaf-01"&lt;/span&gt;
&lt;span class="sr"&gt;/dev/&lt;/span&gt;mmcblk0p2&lt;span class="p"&gt;:&lt;/span&gt; LABEL&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"rootfs"&lt;/span&gt; UUID&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"2887d26c-6ae7-449d-9701-c5a4018755b0"&lt;/span&gt; TYPE&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ext4"&lt;/span&gt; PARTUUID&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"d5603eaf-02"&lt;/span&gt;
&lt;span class="sr"&gt;/dev/&lt;/span&gt;mmcblk0&lt;span class="p"&gt;:&lt;/span&gt; PTUUID&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"d5603eaf"&lt;/span&gt; PTTYPE&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dos"&lt;/span&gt;
&lt;span class="sr"&gt;/dev/&lt;/span&gt;sda1&lt;span class="p"&gt;:&lt;/span&gt; UUID&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1200CB0C6CE045EE"&lt;/span&gt; TYPE&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ntfs"&lt;/span&gt; PTTYPE&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"atari"&lt;/span&gt; PARTUUID&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0072438b-01"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we are interested in is the UUID of our external drive. In my case that's &lt;code&gt;1200CB0C6CE045EE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can edit the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo nano &lt;span class="sr"&gt;/etc/&lt;/span&gt;fstab
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add this line at the bottom:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UUID=1200CB0C6CE045EE /media/storage exfat defaults,auto,umask=000,users,rw 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⚠️ Don't forget to replace the UUID with yours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transmission-bittorrent"&gt;
  &lt;/a&gt;
  Transmission BitTorrent
&lt;/h2&gt;

&lt;p&gt;Next step is to have a BitTorrent client to download the torrents (only legal ones of course) and for that we would need to install &lt;code&gt;Transmission&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; install &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;y&lt;/span&gt; transmission&lt;span class="p"&gt;-&lt;/span&gt;daemon transmission&lt;span class="p"&gt;-&lt;/span&gt;cli transmission&lt;span class="p"&gt;-&lt;/span&gt;common
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;New we need to stop the demon to apply changes to the configuration that will allow us to manage it remotely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo service transmission&lt;span class="p"&gt;-&lt;/span&gt;daemon &lt;span class="k"&gt;stop&lt;/span&gt;
sudo &lt;span class="k"&gt;vi&lt;/span&gt; &lt;span class="sr"&gt;/etc/&lt;/span&gt;transmission&lt;span class="p"&gt;-&lt;/span&gt;daemon/settings&lt;span class="p"&gt;.&lt;/span&gt;json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look for rpc-whitelist and rpc-whitelist-enabled and make sure they look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;"rpc-whitelist": "127.0.0.1,192.168.*.*",&lt;/span&gt;
&lt;span class="c"&gt;"rpc-whitelist-enable": "true",&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that this is assuming that your internal network works on &lt;code&gt;192.168.0.1/24&lt;/code&gt;. If otherwise please change the value accordingly.&lt;/p&gt;

&lt;p&gt;Also, we can modify download-dir and incomplete-dir to point at the external USB drive, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;"download-dir": "/media/storage/downloads",&lt;/span&gt;
&lt;span class="c"&gt;"incomplete-dir": "/media/storage/.tmp",&lt;/span&gt;
&lt;span class="c"&gt;"incomplete-dir-enabled": true,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please make sure that the directories exist on your external USB drive (we've created on the previous section).&lt;/p&gt;

&lt;p&gt;Set up the user and password:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;"rpc-password": "superSecret",&lt;/span&gt;
&lt;span class="c"&gt;"rpc-port": 9091,&lt;/span&gt;
&lt;span class="c"&gt;"rpc-url": "/transmission/",&lt;/span&gt;
&lt;span class="c"&gt;"rpc-username": "gopher",&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step is to change the peer-port because sometimes your provider will block the default one. You can select the one you want between the range 49152-65535. In my case I decided to use the 51228. So find the next line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;"peer-port": 51413,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And change it for the decided port:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;"peer-port": 51228,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also you can manage the download/upload speed from the configuration editing the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;"speed-limit-down": 3000,&lt;/span&gt;
&lt;span class="c"&gt;"speed-limit-down-enabled": true,&lt;/span&gt;
&lt;span class="c"&gt;"speed-limit-up": 900,&lt;/span&gt;
&lt;span class="c"&gt;"speed-limit-up-enabled": true,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start the service again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo service transmission&lt;span class="p"&gt;-&lt;/span&gt;daemon start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The web interface is already available at the address &lt;a href="http://192.168.1.131:9091"&gt;http://192.168.1.131:9091&lt;/a&gt; (replace the IP address with the one used by the Raspberry Pi in your network).&lt;/p&gt;

&lt;p&gt;You can login using both username and password as &lt;code&gt;transmission&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-sonarr"&gt;
  &lt;/a&gt;
  Install Sonarr
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Sonarr/Sonarr"&gt;Sonarr&lt;/a&gt; is a PVR for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.&lt;/p&gt;

&lt;p&gt;We need to install dependencies like &lt;code&gt;libmono-cil-dev&lt;/code&gt; and &lt;code&gt;mono 3.10&lt;/code&gt;. I used this &lt;a href="https://www.htpcguides.com/install-sonarr-raspberry-pi-mono-310/"&gt;link&lt;/a&gt; as a reference. For that we need to type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; install libmono&lt;span class="p"&gt;-&lt;/span&gt;cil&lt;span class="p"&gt;-&lt;/span&gt;dev
wget http&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;sourceforge&lt;span class="p"&gt;.&lt;/span&gt;net&lt;span class="sr"&gt;/projects/&lt;/span&gt;bananapi&lt;span class="sr"&gt;/files/&lt;/span&gt;mono_3&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;armhf&lt;span class="p"&gt;.&lt;/span&gt;deb
sudo dpkg &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt; mono_3&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;armhf&lt;span class="p"&gt;.&lt;/span&gt;deb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we can install Sonarr:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt; adv &lt;span class="p"&gt;--&lt;/span&gt;keyserver keyserver&lt;span class="p"&gt;.&lt;/span&gt;ubuntu&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;com&lt;/span&gt; &lt;span class="p"&gt;--&lt;/span&gt;recv&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;xA236C58F409091A18ACA53CBEBFF6B99D9B78493
echo &lt;span class="s2"&gt;"deb http://apt.sonarr.tv/ master main"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee &lt;span class="sr"&gt;/etc/&lt;/span&gt;apt&lt;span class="sr"&gt;/sources.list.d/&lt;/span&gt;sonarr&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;list&lt;/span&gt;
sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;
sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; install nzbdrone
sudo chown &lt;span class="p"&gt;-&lt;/span&gt;R &lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt; &lt;span class="sr"&gt;/opt/&lt;/span&gt;NzbDrone
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#autostart-script"&gt;
  &lt;/a&gt;
  Autostart script
&lt;/h3&gt;

&lt;p&gt;We need to create the file &lt;code&gt;/etc/systemd/system/nzbdrone.service&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo nano &lt;span class="sr"&gt;/etc/&lt;/span&gt;systemd&lt;span class="sr"&gt;/system/&lt;/span&gt;nzbdrone&lt;span class="p"&gt;.&lt;/span&gt;service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And put inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;Unit&lt;span class="p"&gt;]&lt;/span&gt;
Description&lt;span class="p"&gt;=&lt;/span&gt;Sonarr Daemon
After&lt;span class="p"&gt;=&lt;/span&gt;network&lt;span class="p"&gt;.&lt;/span&gt;target

&lt;span class="p"&gt;[&lt;/span&gt;Service&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;User&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;
Group&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;

Type&lt;span class="p"&gt;=&lt;/span&gt;simple
ExecStart&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/usr/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="sr"&gt;/mono /&lt;/span&gt;&lt;span class="k"&gt;opt&lt;/span&gt;&lt;span class="sr"&gt;/NzbDrone/&lt;/span&gt;NzbDrone&lt;span class="p"&gt;.&lt;/span&gt;exe &lt;span class="p"&gt;-&lt;/span&gt;nobrowser
TimeoutStopSec&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;
KillMode&lt;span class="p"&gt;=&lt;/span&gt;process
Restart&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;failure

&lt;span class="p"&gt;[&lt;/span&gt;Install&lt;span class="p"&gt;]&lt;/span&gt;
WantedBy&lt;span class="p"&gt;=&lt;/span&gt;multi&lt;span class="p"&gt;-&lt;/span&gt;user&lt;span class="p"&gt;.&lt;/span&gt;target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can start, check the status and enable if the service is working with the following commands respectively:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo systemctl start nzbdrone
sudo systemctl status nzbdrone
sudo systemctl enable nzbdrone
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The web interface is already available at the address &lt;a href="http://192.168.1.131:8989"&gt;http://192.168.1.131:8989&lt;/a&gt; (replace the IP address with the one used by the Raspberry Pi in your network).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-jackett"&gt;
  &lt;/a&gt;
  Install Jackett
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Jackett/Jackett"&gt;Jackett&lt;/a&gt; works as a proxy server: it translates queries from apps (Sonarr, Radarr, SickRage, CouchPotato, Mylar, Lidarr, DuckieTV, qBittorrent, Nefarious etc.) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping &amp;amp; translation logic - removing the burden from other apps.&lt;/p&gt;

&lt;p&gt;We start downloading the latest Jackett release:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;wget &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; https&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;github&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/Jackett/&lt;/span&gt;Jackett&lt;span class="sr"&gt;/releases/&lt;/span&gt;latest &lt;span class="p"&gt;-&lt;/span&gt;O &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;E \&lt;span class="sr"&gt;/tag\/&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="p"&gt;-&lt;/span&gt;F &lt;span class="s2"&gt;"[&amp;gt;&amp;lt;]"&lt;/span&gt; &lt;span class="s1"&gt;'{print $3}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you already know the release:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;wget &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; https&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;github&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/Jackett/&lt;/span&gt;Jackett&lt;span class="sr"&gt;/releases/&lt;/span&gt;download&lt;span class="sr"&gt;/v0.16.1937/&lt;/span&gt;Jackett&lt;span class="p"&gt;.&lt;/span&gt;Binaries&lt;span class="p"&gt;.&lt;/span&gt;LinuxARM32&lt;span class="p"&gt;.&lt;/span&gt;tar&lt;span class="p"&gt;.&lt;/span&gt;gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to unzip the file and move it to the correct path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;tar zxvf Jackett&lt;span class="p"&gt;.&lt;/span&gt;Binaries&lt;span class="p"&gt;.&lt;/span&gt;LinuxARM32&lt;span class="p"&gt;.&lt;/span&gt;tar&lt;span class="p"&gt;.&lt;/span&gt;gz 
sudo mv Jackett &lt;span class="sr"&gt;/opt/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change ownership of Jackett to the main user of the Raspberry Pi that in our case is &lt;code&gt;pi&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo chown &lt;span class="p"&gt;-&lt;/span&gt;R &lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt; &lt;span class="sr"&gt;/opt/&lt;/span&gt;Jackett
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#autostart-script"&gt;
  &lt;/a&gt;
  Autostart script
&lt;/h3&gt;

&lt;p&gt;We need to create the file &lt;code&gt;/etc/systemd/system/jackett.service&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo nano &lt;span class="sr"&gt;/etc/&lt;/span&gt;systemd&lt;span class="sr"&gt;/system/&lt;/span&gt;jackett&lt;span class="p"&gt;.&lt;/span&gt;service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And put inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;Unit&lt;span class="p"&gt;]&lt;/span&gt;
Description&lt;span class="p"&gt;=&lt;/span&gt;Jackett Daemon
After&lt;span class="p"&gt;=&lt;/span&gt;network&lt;span class="p"&gt;.&lt;/span&gt;target

&lt;span class="p"&gt;[&lt;/span&gt;Service&lt;span class="p"&gt;]&lt;/span&gt;
SyslogIdentifier&lt;span class="p"&gt;=&lt;/span&gt;jackett
Restart&lt;span class="p"&gt;=&lt;/span&gt;always
RestartSec&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
Type&lt;span class="p"&gt;=&lt;/span&gt;simple
&lt;span class="nb"&gt;User&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;
Group&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;
WorkingDirectory&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/opt/&lt;/span&gt;Jackett
ExecStart&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/opt/&lt;/span&gt;Jackett/jackett &lt;span class="p"&gt;--&lt;/span&gt;NoRestart
TimeoutStopSec&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;Install&lt;span class="p"&gt;]&lt;/span&gt;
WantedBy&lt;span class="p"&gt;=&lt;/span&gt;multi&lt;span class="p"&gt;-&lt;/span&gt;user&lt;span class="p"&gt;.&lt;/span&gt;target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can start, check the status and enable if the service is working with the following commands respectively:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo systemctl start jackett
sudo systemctl status jackett
sudo systemctl enable jackett
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The web interface is already available at the address &lt;a href="http://192.168.1.131:9117"&gt;http://192.168.1.131:9117&lt;/a&gt; (replace the IP address with the one used by the Raspberry Pi in your network).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-bazarr"&gt;
  &lt;/a&gt;
  Install Bazarr
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/morpheus65535/bazarr"&gt;Bazarr&lt;/a&gt; is a companion application to Sonarr and Radarr. It manages and downloads subtitles based on your requirements. You define your preferences by TV shows or movies and Bazarr takes care of everything for you.&lt;/p&gt;

&lt;p&gt;As a dependency for it we would need to install &lt;code&gt;python3&lt;/code&gt;. So first of all let's do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; install &lt;span class="k"&gt;python3&lt;/span&gt; idle3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to have git to download the repo and pip for manage the package installation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; install git &lt;span class="k"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;pip &lt;span class="k"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;distutils
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now time for install the dependencies for Bazarr:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; install libxml2&lt;span class="p"&gt;-&lt;/span&gt;dev libxslt1&lt;span class="p"&gt;-&lt;/span&gt;dev &lt;span class="k"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;libxml2 &lt;span class="k"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;lxml unrar&lt;span class="p"&gt;-&lt;/span&gt;free ffmpeg libatlas&lt;span class="p"&gt;-&lt;/span&gt;base&lt;span class="p"&gt;-&lt;/span&gt;dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that we are ready to install Bazarr in our Raspberry. We need to clone the repo directly from GitHub using git and we do directly to the destination folder &lt;code&gt;opt/bazarr&lt;/code&gt; typing the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo git clone https&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;github&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/morpheus65535/&lt;/span&gt;bazarr&lt;span class="p"&gt;.&lt;/span&gt;git &lt;span class="sr"&gt;/opt/&lt;/span&gt;bazarr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to go to that folder and install the requirements defined inside it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;cd&lt;/span&gt; &lt;span class="sr"&gt;/opt/&lt;/span&gt;bazarr
&lt;span class="k"&gt;python3&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt; pip install &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt; requirements&lt;span class="p"&gt;.&lt;/span&gt;txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ℹ️ NOTE: Don't worry about &lt;code&gt;lxml&lt;/code&gt; not being installed at this step, you have installed the module through apt-get anyway.&lt;/p&gt;

&lt;p&gt;Change the ownership to &lt;code&gt;pi&lt;/code&gt; user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo chown &lt;span class="p"&gt;-&lt;/span&gt;R &lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt; &lt;span class="sr"&gt;/opt/&lt;/span&gt;bazarr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can start and test Bazarr:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;python3&lt;/span&gt; bazarr&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the messages of starting Bazarr and configuring it, check if it works in &lt;a href="http://192.168.1.131:6767/"&gt;http://192.168.1.131:6767/&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-with-sonarr"&gt;
  &lt;/a&gt;
  Connect with Sonarr
&lt;/h3&gt;

&lt;p&gt;Next step is to connect it with Sonarr. The &lt;a href="https://github.com/morpheus65535/bazarr/wiki/Setup-Guide"&gt;official documentation&lt;/a&gt; is super straightforward and easy to follow, so I will not put it here. Just one thing that is not clear enough at least for me and it's about Sonarr API Key and it's location, so as a tip I will put here that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sonarr API Key is under &lt;code&gt;Settings/General/Security&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#autostart-script"&gt;
  &lt;/a&gt;
  Autostart script
&lt;/h3&gt;

&lt;p&gt;We need to create the file &lt;code&gt;/etc/systemd/system/bazarr.service&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo nano &lt;span class="sr"&gt;/etc/&lt;/span&gt;systemd&lt;span class="sr"&gt;/system/&lt;/span&gt;bazarr&lt;span class="p"&gt;.&lt;/span&gt;service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And put inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;Unit&lt;span class="p"&gt;]&lt;/span&gt;
Description&lt;span class="p"&gt;=&lt;/span&gt;Bazarr Daemon
After&lt;span class="p"&gt;=&lt;/span&gt;syslog&lt;span class="p"&gt;.&lt;/span&gt;target network&lt;span class="p"&gt;.&lt;/span&gt;target

# After&lt;span class="p"&gt;=&lt;/span&gt;syslog&lt;span class="p"&gt;.&lt;/span&gt;target network&lt;span class="p"&gt;.&lt;/span&gt;target sonarr&lt;span class="p"&gt;.&lt;/span&gt;service radarr&lt;span class="p"&gt;.&lt;/span&gt;service

&lt;span class="p"&gt;[&lt;/span&gt;Service&lt;span class="p"&gt;]&lt;/span&gt;
WorkingDirectory&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/opt/&lt;/span&gt;bazarr/
&lt;span class="nb"&gt;User&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;
Group&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;
UMask&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0002&lt;/span&gt;
Restart&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;failure
RestartSec&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
Type&lt;span class="p"&gt;=&lt;/span&gt;simple
ExecStart&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/usr/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="sr"&gt;/python3 /&lt;/span&gt;&lt;span class="k"&gt;opt&lt;/span&gt;&lt;span class="sr"&gt;/bazarr/&lt;/span&gt;bazarr&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt;
KillSignal&lt;span class="p"&gt;=&lt;/span&gt;SIGINT
TimeoutStopSec&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;
SyslogIdentifier&lt;span class="p"&gt;=&lt;/span&gt;bazarr
ExecStartPre&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/bin/&lt;/span&gt;&lt;span class="k"&gt;sleep&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;Install&lt;span class="p"&gt;]&lt;/span&gt;
WantedBy&lt;span class="p"&gt;=&lt;/span&gt;multi&lt;span class="p"&gt;-&lt;/span&gt;user&lt;span class="p"&gt;.&lt;/span&gt;target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can start, check the status and enable if the service is working with the following commands respectively:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo systemctl start bazarr
sudo systemctl status bazarr
sudo systemctl enable bazarr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The web interface is already available at the address &lt;a href="http://192.168.1.131:6767"&gt;http://192.168.1.131:6767&lt;/a&gt; (replace the IP address with the one used by the Raspberry Pi in your network).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-plex"&gt;
  &lt;/a&gt;
  Install Plex
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.plex.tv/"&gt;Plex&lt;/a&gt; brings together all the media that matters to you. Your personal collection will look beautiful alongside stellar streaming content. Enjoy Live TV &amp;amp; DVR, a growing catalog of great web shows, news, and podcasts. It's finally possible to enjoy all the media you love in a single app, on any device, no matter where you are.&lt;/p&gt;

&lt;p&gt;First of all we need to add a new repository and it's key. This will add to the Raspberry's OS the repositories where we need to download the installation and the future updates. It's like a list of links where the system reads automatically the programs it needs for the installation and the updates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;echo deb https&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;downloads&lt;span class="p"&gt;.&lt;/span&gt;plex&lt;span class="p"&gt;.&lt;/span&gt;tv&lt;span class="sr"&gt;/repo/&lt;/span&gt;deb public main &lt;span class="p"&gt;|&lt;/span&gt; sudo tee &lt;span class="sr"&gt;/etc/&lt;/span&gt;apt&lt;span class="sr"&gt;/sources.list.d/&lt;/span&gt;plexmediaserver&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step is adding the signatures of the repos. The system has to be sure that the repos we added manually are correct and they don't have malware. For that we need to add the key and helps system to verify those repos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;curl https&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;downloads&lt;span class="p"&gt;.&lt;/span&gt;plex&lt;span class="p"&gt;.&lt;/span&gt;tv&lt;span class="sr"&gt;/plex-keys/&lt;/span&gt;PlexSign&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now update our package list and install Plex Media Server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;
sudo apt&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt; install plexmediaserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can complete the setup opening the following link with your browser:&lt;/p&gt;

&lt;p&gt;The web interface is already available at the address &lt;a href="http://192.168.0.10:32400/web"&gt;http://192.168.0.10:32400/web&lt;/a&gt; (replace the IP address with the one used by the Raspberry Pi in your network).&lt;/p&gt;

&lt;p&gt;When you are requested to add libraries, you should add the download folder of Transmission, in our example &lt;code&gt;/media/storage/downloads&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And simply enjoy your media player with your favourite series 📺.&lt;/p&gt;

&lt;p&gt;If you are interested also in films you can install &lt;a href="https://github.com/Radarr/Radarr"&gt;Radarr&lt;/a&gt; which is an independent fork of Sonarr reworked for automatically downloading movies via Usenet and BitTorrent. The project was inspired by other Usenet/BitTorrent movie downloaders such as CouchPotato.&lt;/p&gt;

&lt;p&gt;In a future post I probably try to Dockerize all that setup and will include Radarr, or not... we will see 🧑‍🚀 &lt;/p&gt;

&lt;p&gt;I hope you enjoyed it and if you have any doubts please reach me out here or on any social network!&lt;/p&gt;

</description>
      <category>raspberrypi</category>
      <category>linux</category>
      <category>plex</category>
      <category>mediaplayer</category>
    </item>
    <item>
      <title>How I learn Golang in 3 days</title>
      <author>Polibov</author>
      <pubDate>Thu, 22 Apr 2021 21:41:31 +0000</pubDate>
      <link>https://dev.to/santiagova/how-i-learn-golang-in-3-days-3a1d</link>
      <guid>https://dev.to/santiagova/how-i-learn-golang-in-3-days-3a1d</guid>
      <description>&lt;p&gt;In this post, we will talk about &lt;strong&gt;Go&lt;/strong&gt;, I will share with you some resources, opinions, and recommendations that were so util for me.&lt;/p&gt;

&lt;p&gt;And I know that you are thinking something, Yes! I know that the title of this post is a little bit clickbait, but, &lt;strong&gt;WAIT!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I can explain to you if this is really true or not.&lt;br&gt;
So, let's begin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-achieve-that"&gt;
  &lt;/a&gt;
  How I achieve that?
&lt;/h2&gt;

&lt;p&gt;Well, I cannot tell that I domain Go, but in 3 days I feel so good with the results.&lt;br&gt;
In these 3 days, my study routine was like 4 hours per day, like 3 hours reading the docs or watching courses and at the time coding and the other hour is experimenting the learned with the curious things that I need know if works on Go.&lt;br&gt;
And now, I feel so good to start some little projects to win a lot of experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-the-title"&gt;
  &lt;/a&gt;
  Why the title?
&lt;/h2&gt;

&lt;p&gt;The title can be completely fake if is your first language, don't worry if this is your case, you can learn same this amazing language but in more time :), so...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-happens-with-the-people-that-have-a-little-bit-of-experience-in-others-programming-languages"&gt;
  &lt;/a&gt;
  What happens with the people that have a little bit of experience in others programming languages?
&lt;/h3&gt;

&lt;p&gt;I believe that maybe you know the answer. Obviously, this will be easier, because you only need to learn a new syntax, you don't need to learn again the logic that for the 99% of the people this can be the most difficult part when you are learning at the beginning.&lt;br&gt;
So, again, the title no is literally but will tell you what things you can learn in 3 days after that what you can do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-3-days-this-you-can-learn"&gt;
  &lt;/a&gt;
  In 3 days this you can learn
&lt;/h2&gt;

&lt;p&gt;3 days, this would sound a little bit crazy but is possible to learn the necessary to after that search for a job (Nah, I'm just kidding 🤣)&lt;br&gt;
Well, now out of joking after that you can start making your own projects and with the time be a master in go, but before I will tell you the things that you need learn (I recommend you the same order):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Primitives &lt;/li&gt;
&lt;li&gt;Constants &lt;/li&gt;
&lt;li&gt;Arrays and Slices&lt;/li&gt;
&lt;li&gt;Maps and Structs&lt;/li&gt;
&lt;li&gt;If and Switch Statements&lt;/li&gt;
&lt;li&gt;Looping &lt;/li&gt;
&lt;li&gt;Defer, Panic, and Recover&lt;/li&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Functions &lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, you can start making some projects simple API's and more things!&lt;/p&gt;

&lt;p&gt;Honestly, for me, the most difficult of these topics are the &lt;strong&gt;Pointers&lt;/strong&gt; and the &lt;strong&gt;Interfaces&lt;/strong&gt; I recommend you take a lot of attention to these topics, if you study a lot you will understand too well.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;p&gt;Some very good resources that I recommend &lt;strong&gt;FOR FREE&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=YS4e4q9oBaU"&gt;FreeCodeCamp 7 hours course from scratch&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://tour.golang.org/"&gt;The official tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.golang.org/"&gt;The playground of Go, without installations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thank you for reading this post
&lt;/h2&gt;

&lt;p&gt;I hope that this post was nice for you, Please, if you like this post leave a heart and follow me here and on my &lt;a href="https://github.com/SantiagoVA"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: English is not my main language, so if I have some mistake please leave me a comment and without fears, tell me :)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>backend</category>
      <category>english</category>
    </item>
    <item>
      <title>Understanding Semantic Versioning 2.0 (SemVer)</title>
      <author>charly3pins</author>
      <pubDate>Thu, 22 Apr 2021 21:37:40 +0000</pubDate>
      <link>https://dev.to/charly3pins/understanding-semantic-versioning-2-0-semver-2of4</link>
      <guid>https://dev.to/charly3pins/understanding-semantic-versioning-2-0-semver-2of4</guid>
      <description>&lt;p&gt;When you want to use a library in your project you probably noticed that you need to specify a version. Most of the time those versions are formatted like 3 numbers separated with dots between them. That format is indicative that the library is using the &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt; aka SemVer. That document specifies the format and the way of labeling your projects during all the life-cycle of it. It is just a convention so you can define the version number the way you want it to be, but the truth is that other developers across all industries agreed on using it and it became a standard for versioning.&lt;/p&gt;

&lt;p&gt;The goal of it is to have different versions of your package following the rule that each time you update the package, you update the version. With that what you  achieve is to have an unique name and version for each public package. For using SemVer you should declare a public API. That is because the versioning proposed is based on the changes against the previous version of the API, so if you don't specify one (even coded or just documented) is not possible to apply those rules.&lt;/p&gt;

&lt;p&gt;The format of the SemVer is as mentioned before 3 numbers separated with a dot between them:&lt;br&gt;
&lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The way of incrementing each number is described in the document. As a summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The new features with incompatible behaviour versions (breaks the API) increments the MAJOR;&lt;/li&gt;
&lt;li&gt;The new features backwards-compatible (does not break the API) increments the MINOR;&lt;/li&gt;
&lt;li&gt;The bug fixes increments the PATCH;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOTE: The initial development uses a major version 0.&lt;br&gt;
NOTE2: When the MINOR is increased the PATCH is reseted to 0; When the MAJOR is increased the MINOR and the PATCH are reset to 0.&lt;/p&gt;

&lt;p&gt;As a special case you can use the pre-release versions. They are denoted appending a hyphen and the globally accepted following strings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;alpha;&lt;/li&gt;
&lt;li&gt;beta;&lt;/li&gt;
&lt;li&gt;rc (release candidates);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Followed by the version number necessary. So the pre-release versions should be following a similar order like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.0.0-alpha&lt;/li&gt;
&lt;li&gt;1.0.0-alpha-1&lt;/li&gt;
&lt;li&gt;1.0.0-beta&lt;/li&gt;
&lt;li&gt;1.0.0-beta.2&lt;/li&gt;
&lt;li&gt;1.0.0-beta.10&lt;/li&gt;
&lt;li&gt;1.0.0-rc.1&lt;/li&gt;
&lt;li&gt;1.0.0-rc.40&lt;/li&gt;
&lt;li&gt;1.0.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOTE: A publicly released API starts at 1.0.0.&lt;/p&gt;

&lt;p&gt;When you want to use the SemVer you can specify an exact version or not. For that you can use the following tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want an exact version, you indicate the dependency with: X.Y.Z;&lt;/li&gt;
&lt;li&gt;If you want to use the current version or greater ones even with breaking changes on the API you can use the &lt;code&gt;&amp;gt;&lt;/code&gt; like: &amp;gt;X.Y.Z;&lt;/li&gt;
&lt;li&gt;If you want to have the current version or updated ones but with backward-compatibilities you can use the &lt;code&gt;^&lt;/code&gt; like: ^X.Y.Z (where X is fixed);&lt;/li&gt;
&lt;li&gt;If you want to have the current version or updated ones only with bug fixes with minor-level changes you can use the &lt;code&gt;~&lt;/code&gt; like: ~X.Y.Z (where X and Y are fixed);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So after reading this article as a developer using another's library you can know what type of changes they did when presenting to you the new version following the rules described above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New version 0.2.3 → The changes might be just bug fixes;&lt;/li&gt;
&lt;li&gt;New version 0.5.0 → Some functionalities added but backwards-compatible with the API;&lt;/li&gt;
&lt;li&gt;New version 5.0.0 → There might be a problem because it introduced breaking changes with the API;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a conclusion the benefit of using SemVer against not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clearer compatibility/dependencies;&lt;/li&gt;
&lt;li&gt;Encourages well-defined APIs;&lt;/li&gt;
&lt;li&gt;Makes upgrade decisions clearer;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>semver</category>
      <category>api</category>
      <category>versioning</category>
    </item>
    <item>
      <title>Nesting For Loops</title>
      <author>Randy Rivera</author>
      <pubDate>Thu, 22 Apr 2021 21:36:32 +0000</pubDate>
      <link>https://dev.to/rthefounding/nesting-for-loops-2h0p</link>
      <guid>https://dev.to/rthefounding/nesting-for-loops-2h0p</guid>
      <description>&lt;p&gt;If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here is an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiplyAll(arr) {
  var product = 1;

 for (var i = 0; i &amp;lt; arr.length; i++) {
   for (var j = 0; j &amp;lt; arr[i].length; j++) {
    product *= arr[i][j];
   }
 }
  return product;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(multiplyAll([[3,4],[1,2],[5,6,7]])); will display 5040
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we modified function multiplyAll so that it returns the product of all the numbers in the sub-arrays of arr.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 0; i &amp;lt; arr.length; i++) {
}
console.log(arr[i]); displays 
[ 3, 4 ]
[ 1, 2 ]
[ 5, 6, 7 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var j = 0: j &amp;lt; arr[i].length; i++) {
}
console.log(arr[i][j]); displays
3
4
1
2
5
6
7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;product *= arr[i][j];
console.log(product); // displays 

3    (1 (beginning product = 1;) * 3 &amp;lt;-- arr[0][0]); 1 * 3
12   (now product is equal to 3 (product = 3) * 4 &amp;lt;-- arr[0][1]); 3 * 4
12   (product = 12) * 1 &amp;lt;-- arr[1][0]; 1 * 12
24   (product = 12) * 2 &amp;lt;-- arr[1][1]; 2 * 12
120  (product = 24) * 5 &amp;lt;-- arr[2][0]; 5 * 24
720  (product = 120) * 6 &amp;lt;-- arr[2][1]; 6 * 120
5040 (product = 720) * 7 &amp;lt;-- arr[2][2]; 7 * 720
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return product; will display 5040
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Build a Dynamic Portfolio With the Github API</title>
      <author>Ramki Pitchala</author>
      <pubDate>Thu, 22 Apr 2021 21:13:37 +0000</pubDate>
      <link>https://dev.to/ramko9999/build-a-dynamic-portfolio-with-the-github-api-3eh9</link>
      <guid>https://dev.to/ramko9999/build-a-dynamic-portfolio-with-the-github-api-3eh9</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://medium.com/swlh/build-a-dynamic-portfolio-with-the-github-api-6d74081e5164"&gt;Medium&lt;/a&gt;. If you prefer reading it from there, please do check it out.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;With the advent of countless templates and web page design applications, the task of creating a personal portfolio transitioned from a painful endeavor into a painless task. &lt;/p&gt;

&lt;p&gt;However, the act of constantly updating the hard-coded information and rebuilding and redeploying your portfolio turns into a tiresome burden.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will show you how I integrated the Github API into my portfolio to pull the most recent project information, solving the issue of directly updating and redeploying my portfolio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Setup&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrate&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Before we build the solution, let’s first understand the core idea and configure Github to ease the integration.&lt;/p&gt;

&lt;p&gt;First, let’s talk about the Github repositories. To elaborate, I house my projects in the repositories themselves: I host the source code, keep detailed descriptions, and maintain links to demo gifs or images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0dQMVqC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3536/1%2Aqb3hbCXT2CI6gHVMqyjOSw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0dQMVqC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3536/1%2Aqb3hbCXT2CI6gHVMqyjOSw.png" alt="Link to the repository [https://github.com/Ramko9999/Pathfinding-Visualizer](https://github.com/Ramko9999/Pathfinding-Visualizer)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository houses my Path Finding Visualizer project. &lt;/p&gt;

&lt;p&gt;In the right side, the section outlined in blue contains the description of the project. On the other hand, the section outlined in red has a link to the demo. Finally, the section outlined in black contains topics associated with the project. &lt;/p&gt;

&lt;p&gt;To sum it all up, the Github &lt;a href="https://docs.github.com/en/rest"&gt;API&lt;/a&gt; will return the above fields upon an HTTP request to:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /users/{username}/repos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This &lt;a href="https://docs.github.com/en/rest/reference/repos#list-repositories-for-a-user"&gt;endpoint&lt;/a&gt; will return a list of public repositories for a user. &lt;/p&gt;

&lt;p&gt;Here is what the return json object looks likes for the Path Finding Visualizer repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InV9Issg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2376/1%2AY-rqrLmYUNFXvzhtZaCksA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InV9Issg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2376/1%2AY-rqrLmYUNFXvzhtZaCksA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although it is a bit difficult to see, the API returned the fields we need: description, homepage, and topics. &lt;/p&gt;

&lt;p&gt;This is fantastic news, since it shows that we can store and retrieve information from our repositories.&lt;/p&gt;

&lt;p&gt;Let’s now work on configuring Github to simplify the integration.&lt;/p&gt;

&lt;p&gt;All we need to do is generate a personal access token in the developer settings. We will use the personal access token to authenticate our requests to the Github API so we can take advantage of the generous rate limits.&lt;/p&gt;

&lt;p&gt;First, navigate to your profile settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_UqXIGkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AOVJwlVGOfwlSQl9lN2sR4A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UqXIGkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AOVJwlVGOfwlSQl9lN2sR4A.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From your profile settings, navigate to the developer settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjzC6TtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Al4B3diZ1wSWr59daXuhAIg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjzC6TtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Al4B3diZ1wSWr59daXuhAIg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, go to the personal access tokens tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xGQwD9Dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATxbSj2cOh5seKuOcRq1nsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xGQwD9Dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATxbSj2cOh5seKuOcRq1nsQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, you can click “Generate new token” and Github will walk you through the rest. Once you have generated the token, make sure you save it to the clipboard, since we will need it for later.&lt;/p&gt;

&lt;p&gt;Now that we have generated our personal access token, we can work on the actual integration.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  Service
&lt;/h2&gt;

&lt;p&gt;To start, let’s conceptualize how the portfolio would interact with the Github API.&lt;/p&gt;

&lt;p&gt;Building a separate service that communicates between the portfolio and the Github API is a good idea, since we should house our Github personal access token in a secure environment. &lt;/p&gt;

&lt;p&gt;Here is a depiction of the network flow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tuwauJL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A46SCXZw_jnBqiDBZq_LbRQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tuwauJL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A46SCXZw_jnBqiDBZq_LbRQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start building out the service. &lt;/p&gt;

&lt;p&gt;I will be using Python and &lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask&lt;/a&gt;, but just understand that you can use any stack of your choice. &lt;/p&gt;

&lt;p&gt;First, let’s create a &lt;code&gt;config.py&lt;/code&gt; file. In this file, we will store our Github username and our personal access token. Make sure you do not push this file to version control.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR GITHUB USERNAME"&lt;/span&gt;
    &lt;span class="n"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR PERSONAL ACCESS TOKEN FROM EARLIER"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let’s create a &lt;code&gt;server.py&lt;/code&gt; file and make a simple Flask app.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_cors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CORS&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;CORS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    
       &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, let’s expose an endpoint that our portfolio can call to get the project data.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/projects"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getProjects&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
       &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;getProjects()&lt;/code&gt; method will do three things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It will make a request to the Github API for the repository data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will extract the relevant fields from each of the repositories.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will return the filtered data back to the portfolio.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s tackle these steps one by one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Making a request to Github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can simply use the Python requests library to make the HTTP request.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.github.com/users/USERNAME/repos"&lt;/span&gt;        
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Accept"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"application/vnd.github.mercy-preview+json"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;        

    &lt;span class="n"&gt;repos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;USERNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TOKEN&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Github API will also include the &lt;code&gt;topics&lt;/code&gt; field for each of the repositories if we pass in the above headers. &lt;/p&gt;

&lt;p&gt;If all goes correctly, the request should have a status of 200 and the &lt;code&gt;repos&lt;/code&gt; variable should be a list of json objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extracting relevant fields&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main fields of concern are &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;html_url&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;topics&lt;/code&gt;, and &lt;code&gt;homepage&lt;/code&gt;. The &lt;code&gt;homepage&lt;/code&gt; field represents the text stored in the black outlined area:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CU326zM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2438/1%2AWZNac2V96NI4CLprgWPUKA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CU326zM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2438/1%2AWZNac2V96NI4CLprgWPUKA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can put links to our demo gifs in &lt;code&gt;homepage&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The code to parse each of the repositories is this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;projects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"html_url"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"topics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"topics"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"images"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Just to clarify, I added more than one demo link for certain projects. I separated each link with a semi-colon.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is what &lt;code&gt;project&lt;/code&gt; would look like for the Path Finding Visualizer repository:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;206887035&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Pathfinding-Visualizer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/Ramko9999/Pathfinding-Visualizer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Built a colorful visualizer for shortest path algorithms: A star search, Breadth First Search, and Bidirectional Breadth First Search. Utilized Queues and Priority Queues to reduce collection operations such as pop() and push() to O(1) and O(log(n)) run times."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;"topics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"data-structures"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"graph-algorithms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"java"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"pathfinding"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"swing"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s"&gt;"images"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"https://media.giphy.com/media/U6GuVGBOQoHUHaZ7LV/giphy.gif"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"https://media.giphy.com/media/gg9eCb2ZBqcU4LlSML/giphy.gif"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"https://media.giphy.com/media/l4Wyj6PQwwxZdPjfSe/giphy.gif"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"https://media.giphy.com/media/LRgBCMGhCvqkzHzeaY/giphy.gif"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All that remains now is to return &lt;code&gt;projects&lt;/code&gt; back to the initiator of the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Returning a response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can return the filtered data back to the client with the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    return {"projects": projects, "error": False}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So with all the pieces put together, the &lt;code&gt;getProjects()&lt;/code&gt; method will look as such:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Please be sure to test your service locally by calling the &lt;code&gt;/projects&lt;/code&gt; endpoint. Once it is working, you can deploy it wherever you like. Personally, I deployed the service on &lt;a href="https://www.pythonanywhere.com"&gt;pythonanywhere.com&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;Pat yourself on the back, as the hardest part is now over!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrate"&gt;
  &lt;/a&gt;
  Integrate
&lt;/h2&gt;

&lt;p&gt;All that remains now is that we have to make an HTTP request from our portfolio website to the service we have just created. &lt;/p&gt;

&lt;p&gt;For example, I used React to build out my portfolio, so here is how I made the call and fetched the projects.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All you need to do now is to build out the user interface based on the data.&lt;/p&gt;

&lt;p&gt;With that said, feel free to head over to my &lt;a href="https://ramki-pitch.web.app/"&gt;portfolio&lt;/a&gt; to check out how I implemented my user interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's it folks!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>github</category>
      <category>portfolio</category>
    </item>
  </channel>
</rss>
