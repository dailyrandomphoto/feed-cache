<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Using GitHub actions - Deploy to AWS &amp; SNS Publish</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sat, 04 Dec 2021 18:40:26 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/using-github-actions-deploy-to-aws-sns-publish-2m1f</link>
      <guid>https://dev.to/awscommunity-asean/using-github-actions-deploy-to-aws-sns-publish-2m1f</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub actions&lt;/a&gt; enables developers/DevOps engineers to smartly incorporate CI/CD pipelines, perform tasks on actions on different branches and many more things. In the blog, we will look into GitHub actions which uses two workflows - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#sam-pipeline"&gt;SAM Pipeline to deploy to AWS environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notify"&gt;SNS Publish on commits / delete branch&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This helps in deploying SAM applications to AWS with Pipeline to ensure multiple staging environments to be deployed and handle feature branches. Along with it, you can do more things on AWS end of there is a event trigger via SNS to process each commit action.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#sam-pipeline-to-deploy-to-aws-environments"&gt;
  &lt;/a&gt;
  SAM Pipeline to deploy to AWS environments &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/compute/introducing-aws-sam-pipelines-automatically-generate-deployment-pipelines-for-serverless-applications/"&gt;SAM Pipeline&lt;/a&gt; enables leveraging SAM and GitHub actions to deploy your Serverless application to AWS environment. This leverages &lt;code&gt;sam build&lt;/code&gt; and &lt;code&gt;sam deploy&lt;/code&gt; commands performed via SAM CLI in the GitHub actions (Ubuntu) environment. &lt;br&gt;
The workflow defines jobs for -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test : Checking if the GitHub event is &lt;em&gt;push&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;delete-feature : If the GitHub event is &lt;em&gt;delete&lt;/em&gt; on a feature branch with the name starting with &lt;em&gt;feature-&lt;/em&gt;*, it deletes that particular feature branch with &lt;code&gt;sam delete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;build-and-deploy-feature : If the GitHub event is &lt;em&gt;push&lt;/em&gt; on a feature branch with the name starting with &lt;em&gt;feature-&lt;/em&gt;*, it deploys the app to AWS with the code from feature branch with &lt;code&gt;sam deploy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;build-and-package : If the GitHub event is &lt;em&gt;push&lt;/em&gt; on a main branch, it packages the the app for two stages - &lt;strong&gt;dev&lt;/strong&gt; and &lt;strong&gt;prod&lt;/strong&gt; and uploads the artifacts zip files to S3 bucket with &lt;code&gt;sam package&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;deploy-testing : The code will use the Stage 1 - &lt;strong&gt;dev&lt;/strong&gt; and deploys the Serverless application to AWS with &lt;code&gt;sam deploy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;integration-test : If the branch is &lt;em&gt;main&lt;/em&gt;, you can run specific integration tests via bash scripts. And if the tests are passed, it proceeds to the next step.&lt;/li&gt;
&lt;li&gt;deploy-prod : If the integration tests are passed, the complete code from &lt;em&gt;main branch&lt;/em&gt; is deployed to AWS with &lt;code&gt;sam deploy&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sS8Kkx_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unhftbdtw79mrtyfj11s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sS8Kkx_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unhftbdtw79mrtyfj11s.png" alt="SAM Pipeline" width="880" height="293"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xh1yPAdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2msrn8c9w58pyj5r28jn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xh1yPAdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2msrn8c9w58pyj5r28jn.png" alt="Action details" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#sns-publish-on-commits-delete-branch"&gt;
  &lt;/a&gt;
  SNS Publish on commits / delete branch &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;The workflow is used to notify with &lt;a href="https://aws.amazon.com/sns/"&gt;AWS Simple Notification Service (SNS)&lt;/a&gt; by pushing to a SNS topic. This workflow uses &lt;code&gt;Danushka96/sns-action@v2&lt;/code&gt; which performs &lt;code&gt;SNS:PUBLISH&lt;/code&gt; to send message to the SNS topic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--StH32tNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnwtvs1gb0av89p9sub7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--StH32tNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnwtvs1gb0av89p9sub7.png" alt="SNS Publish" width="880" height="205"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gkuggAkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqcddqffvbcn11xgkdr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkuggAkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqcddqffvbcn11xgkdr4.png" alt="Action description" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;DIY Deployments&lt;/strong&gt; which eases deployment of SAM app via SAM Pipelines and also using SNS publish, we can get creative with ways of additional workflows on AWS to be triggered.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;The blog post implementation of 2 workflows is implemented with &lt;code&gt;pipeline.yaml&lt;/code&gt; and &lt;code&gt;sns.yml&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zachjonesnoel"&gt;
        zachjonesnoel
      &lt;/a&gt; / &lt;a href="https://github.com/zachjonesnoel/sam-github-actions"&gt;
        sam-github-actions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub actions&lt;/a&gt; enables developers/DevOps engineers to smartly incorporate CI/CD pipelines, perform tasks on actions on different branches and many more things. In the blog, we will look into GitHub actions which uses two workflows -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/zachjonesnoel/sam-github-actions#/sam-pipeline"&gt;SAM Pipeline to deploy to AWS environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zachjonesnoel/sam-github-actions#/notify"&gt;SNS Publish on commits / delete branch&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
My Workflow&lt;/h3&gt;
&lt;h4&gt;
SAM Pipeline to deploy to AWS environments
&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/compute/introducing-aws-sam-pipelines-automatically-generate-deployment-pipelines-for-serverless-applications/" rel="nofollow"&gt;SAM Pipeline&lt;/a&gt; enables leveraging SAM and GitHub actions to deploy your Serverless application to AWS environment. This leverages &lt;code&gt;sam build&lt;/code&gt; and &lt;code&gt;sam deploy&lt;/code&gt; commands performed via SAM CLI in the GitHub actions (Ubuntu) environment
The workflow defines jobs for -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test : Checking if the GitHub event is &lt;em&gt;push&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;delete-feature : If the GitHub event is &lt;em&gt;delete&lt;/em&gt; on a feature branch with the name starting with *feature-**, it deletes that particular feature branch with &lt;code&gt;sam delete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;build-and-deploy-feature : If the GitHub event is &lt;em&gt;push&lt;/em&gt; on a feature branch with the…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zachjonesnoel/sam-github-actions"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;This project uses several GitHub actions - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/checkout"&gt;actions/checkout@v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/setup-python"&gt;actions/setup-python@v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/checkout-sam"&gt;aws-actions/setup-sam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aws-actions/configure-aws-credentials"&gt;aws-actions/configure-aws-credentials@v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/upload-artifact"&gt;actions/upload-artifact@v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/checkoutom/actions/download-artifact"&gt;actions/download-artifact@v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/checkout"&gt;Danushka96/sns-action@v2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>aws</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Why TensorFlow.js?</title>
      <author>Rohan Raj</author>
      <pubDate>Sat, 04 Dec 2021 18:00:50 +0000</pubDate>
      <link>https://dev.to/rohan1907/why-tensorflowjs-43ii</link>
      <guid>https://dev.to/rohan1907/why-tensorflowjs-43ii</guid>
      <description>&lt;p&gt;In today's world almost everyone has come across the buzz around Artificial Intelligence (AI). We have come a long way in this domain of computer science and the amount of development happening in this field is tremendous. Several unsolved problems have been solved by harnessing the power of AI.&lt;br&gt;
So, is AI &lt;em&gt;magic&lt;/em&gt;?&lt;br&gt;
Well, it isn't. It's just science, the science of getting computers to act without being explicitly programmed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YH0spkIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn37mceak88tt9m6go37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YH0spkIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn37mceak88tt9m6go37.png" alt="Image description" width="302" height="167"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-know-hows-and-the-basics"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;u&gt;The know how's and the basics.&lt;/u&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before we get deep into this dazzling world of predictions and learning, we need to have our basics strong. Phrases like AI, &lt;em&gt;machine learning&lt;/em&gt;, &lt;em&gt;neural networks&lt;/em&gt;, and &lt;em&gt;deep learning&lt;/em&gt; mean related but different things. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjZ1sKrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cim053xrrfyxw4nho1sj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjZ1sKrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cim053xrrfyxw4nho1sj.jpg" alt="Image description" width="536" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Artificial Intelligence&lt;/strong&gt;&lt;/u&gt;&lt;br&gt;
As the Venn diagram above depicts, AI is a broad field. It encompasses machine learning, neural networks, and deep learning, but it also includes many approaches distinct from machine learning. A crisp definition of the field would be: &lt;em&gt;the effort to automate intellectual tasks normally performed by humans&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Machine Learning&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
Machine Learning, as a subfield of AI distinct from symbolic AI arises from a question that &lt;em&gt;could a computer learn on its own without being explicitly programmed for a specific task?&lt;/em&gt;&lt;br&gt;
Machine Learning seeks to avoid the hard-coding way of doing things. But the question is how a machine would learn if it were not explicitly instructed on how to perform a task. A simple answer to this question is _from the examples in data. _&lt;br&gt;
This opened the doors to a new programming paradigm. &lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;classical programming paradigm&lt;/em&gt;, we input the data and the rules to get the answers. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AaEQUOFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ld9f3z5z1zqirvkb4p6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AaEQUOFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ld9f3z5z1zqirvkb4p6.jpg" alt="Image description" width="478" height="97"&gt;&lt;/a&gt;&lt;br&gt;
Whereas, in the &lt;em&gt;machine learning paradigm&lt;/em&gt; we put in the data and the answers and get a set of rules which can be used on other similar data to get the answers. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhZoysg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfs9lr7r7egda1sbwa90.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhZoysg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfs9lr7r7egda1sbwa90.jpg" alt="Image description" width="473" height="90"&gt;&lt;/a&gt;&lt;br&gt;
Let's take the example of identifying human faces in an image.&lt;br&gt;
We, as humans can very well classify objects based on their characteristics and features. But how do we train a machine to do so? It is hard for any programmer, no matter how smart and experienced, to write an explicit set of rules in a programming language to accurately decide whether an image contains a human face. &lt;br&gt;
The &lt;em&gt;hypothetical&lt;/em&gt; search space without any constraint is infinite and it's impossible to search for explicit rules to define a task in a limited amount of time.&lt;br&gt;
Any &lt;em&gt;heuristic&lt;/em&gt; we produce is likely to fall short when facing the myriad variations that faces can present in real-life images, such as differences in size, shape, and details of the face; expression; hairstyle; color; the background of the image and many more. &lt;br&gt;
There are two important phases in machine learning. &lt;/p&gt;

&lt;p&gt;The first is the &lt;em&gt;training phase&lt;/em&gt;. &lt;br&gt;
This phase takes the data and answers, together referred to as the training data. Each pair of input data (&lt;em&gt;instances&lt;/em&gt;) and the desired answer (&lt;em&gt;labels&lt;/em&gt;) is called an example. With the help of the examples, the training process produces the automatically discovered rules. Although the rules are discovered automatically, they are not discovered entirely from scratch. In other words, although the machine is intelligent, but not enough to produce the rules.&lt;br&gt;
A human engineer provides a blueprint for the rules at the outset of training. The use of labeled data and human guidance in producing the rules is also known as &lt;em&gt;Supervised Learning&lt;/em&gt;. &lt;br&gt;
It's just like a child learning to walk and requires support in their initial stages. &lt;br&gt;
The &lt;em&gt;blueprint&lt;/em&gt; is encapsulated in a model, which forms a hypothesis space for the rules the machine may possibly learn. Without this hypothesis space, there is a completely unconstrained and infinite space of rules to search in, which is not conducive to finding good rules in a limited amount of time.&lt;/p&gt;

&lt;p&gt;In the second phase of the machine learning paradigm, we use these generated rules to perform inferences on new data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9dHxEjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbn9mdp0ma7rtnvjaiai.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9dHxEjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbn9mdp0ma7rtnvjaiai.jpg" alt="Image description" width="705" height="242"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Neural Networks and deep learning&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Neural networks&lt;/em&gt; are a subfield of machine learning which is inspired by the neurons present in the human and animal brains. The idea here is to replicate the way a brain learns things as it perceives. We build a net of &lt;em&gt;interconnected neurons&lt;/em&gt; each responsible for memorizing certain aspects of a given task to perform. The data is passed through multiple separable stages also known as layers. These layers are usually stacked on top of each other, and these types of models are also known as &lt;em&gt;sequential models&lt;/em&gt;. &lt;br&gt;
These neural networks apply a mathematical function over the input data to produce an output value. These neural networks are generally &lt;em&gt;stateful&lt;/em&gt;, i.e. they hold internal memory. Each layer's memory is captured in its_ weights_.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-tensoflowjs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;u&gt; Why TensoFlow.js? &lt;/u&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As it's known, JavaScript is scripting language traditionally devoted to creating the web pages and back-end business logic. Someone who primarily works with JavaScript may feel left out by the deep-learning revolution which seems to be an exclusive territory of languages such as Python, R, C++.  TensorFlow, is a primary tool for building deep-learning models.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4RIl9A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e62k2xmlz5gsfic9nhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4RIl9A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e62k2xmlz5gsfic9nhf.png" alt="Image description" width="259" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TensorFlow.js is the product of &lt;em&gt;cross-pollination&lt;/em&gt; between JavaScript and the world of deep learning. 
It is suitable for folks who are good in JavaScript and want to explore the world of deep learning and for folks who have basic mathematical understanding of the deep learning world and are looking for a place to dive deep into this field.
With deep learning, JavaScript developers can make their web apps more intelligent. &lt;/li&gt;
&lt;li&gt;TensorFlow.js is created and maintained by &lt;em&gt;Google&lt;/em&gt;, so it's worth noting that some of the best brains in the world have come together to make it happen.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Provides a no-install experience&lt;/em&gt; in the world of machine learning. Generally, the AI in a website is locked in an AI and the performance varies with the bandwidth of the connection. TensorFlow.js provides us with the ability to run deep learning models directly in the browsers without any installation of other dependencies. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript bases applications can run anywhere. These codes can be added to progressive web-apps or React application and then these applications can run without being connected to the internet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uw9tHCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9457lav7w5xw9kdx3r8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uw9tHCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9457lav7w5xw9kdx3r8.png" alt="Image description" width="267" height="188"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also provides a great deal of privacy as the data never leaves a user's system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can also be used in IoT based devices such as RaspberryPi.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLwADfzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gifc30p8onoxrkwmkvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLwADfzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gifc30p8onoxrkwmkvq.png" alt="Image description" width="244" height="207"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion, mastery of TensorFlow.js can help us in building cross platform intelligent application with great efficacy and security. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9EKD5Pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1duhzin02079iheui3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9EKD5Pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1duhzin02079iheui3x.png" alt="Image description" width="500" height="501"&gt;&lt;/a&gt;&lt;br&gt;
And a huge yes to the picture above XD &lt;br&gt;
Hope you enjoyed reading the blog!&lt;br&gt;
Thank you :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>deeplearning</category>
      <category>tensorflow</category>
      <category>tfjs</category>
    </item>
    <item>
      <title>Using environment variables with SvelteKit</title>
      <author>Nostro</author>
      <pubDate>Sat, 04 Dec 2021 17:56:24 +0000</pubDate>
      <link>https://dev.to/nostro/using-environment-variables-with-sveltekit-544b</link>
      <guid>https://dev.to/nostro/using-environment-variables-with-sveltekit-544b</guid>
      <description>&lt;p&gt;With Vite, using &lt;code&gt;.env&lt;/code&gt; may be a bit unfamiliar. There are two ways to go about it, with Vite's &lt;code&gt;import.meta.env&lt;/code&gt; out of the box or with the usual suspect &lt;code&gt;process.env&lt;/code&gt; that requires a bit more setting up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-may-also-be-interested-in"&gt;
  &lt;/a&gt;
  You may also be interested in
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/nostro/using-tailwindcss-with-sveltekit-25i6"&gt;Using TailwindCSS with SvelteKit&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-importmetaenv-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;import.meta.env&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Full information is available in the &lt;a href="https://vitejs.dev/guide/env-and-mode.html"&gt;official docs&lt;/a&gt; but the gist of it is that you should prefix any variable that you want exposed to your client with &lt;code&gt;VITE_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It means &lt;code&gt;import.meta.env.FOO&lt;/code&gt; will not be exposed client-side, while &lt;code&gt;import.meta.env.VITE_FOO&lt;/code&gt; will be. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.env file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FOO=BAR
VITE_FOO=BAR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// outputs undefined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FOO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// outputs BAR&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_FOO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-processenv-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;process.env&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;If for some reason you still want to use &lt;code&gt;process.env&lt;/code&gt;, because you're used to it or you don't feel like renaming all your variables &lt;code&gt;VITE_SOMETHING&lt;/code&gt;, you can also do it with the &lt;code&gt;env-cmd&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install &lt;code&gt;env-cmd&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;env-cmd&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then modify your &lt;code&gt;config&lt;/code&gt; in &lt;code&gt;svelte.config.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;svelte.config.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// other stuff&lt;/span&gt;
    &lt;span class="na"&gt;vite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;define&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;process.env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// other stuff&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally add &lt;code&gt;env-cmd&lt;/code&gt; to your &lt;code&gt;dev&lt;/code&gt; script&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// other stuff&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;env-cmd svelte-kit dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// other stuff&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// other stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now you'll be able to access &lt;code&gt;process.env&lt;/code&gt; in your client&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.env file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FOO=BAR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// outputs BAR&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FOO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>svelte</category>
      <category>sveltekit</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Awesome Markdown 🎉</title>
      <author>Md. Fahim Bin Amin</author>
      <pubDate>Sat, 04 Dec 2021 17:35:41 +0000</pubDate>
      <link>https://dev.to/fahimfba/awesome-markdown-362</link>
      <guid>https://dev.to/fahimfba/awesome-markdown-362</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-markdown"&gt;
  &lt;/a&gt;
  What is Markdown?
&lt;/h2&gt;

&lt;p&gt;According to Wikipedia, Markdown is a lightweight language that is used for creating formatted text using a plain text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-markdown-is-being-used"&gt;
  &lt;/a&gt;
  Where markdown is being used?
&lt;/h2&gt;

&lt;p&gt;We use this markdown almost every day in our day-to-day coding tasks. Writing down the documentation in a &lt;code&gt;README.md&lt;/code&gt; file is a common phenomenon for those who use &lt;code&gt;GIT&lt;/code&gt; regularly, especially in &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; or &lt;a href="https://gitlab.com/"&gt;GitLab&lt;/a&gt;. Markdown has become a must item in any open-source project nowadays. When we get a project on GitHub, the first thing we do is we read the project description and then we directly go to the README.md preview where each essential introduction about the project are kept, whether it can be a detailed description of the project, how we can install the project, how we can use the project, how we can improve the project and so on. The &lt;code&gt;README.md&lt;/code&gt; on the root branch of any project is considered as the landing page of a project. &lt;a href="https://pages.github.com/"&gt;GitHub Page&lt;/a&gt; is a nice addition to our day-to-day life. We can make a static website easily and without any hassle just by using the Markdown. By using markdown, we can create websites from a very simple template-based to a very beautiful one later. All of these can be possible within a very short amount of time if we simply use markdown for that. That also makes the site easy to manage and improve. In a sentence, markdown has become a common and essential day-to-day task to almost many of us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#editor-for-markdown"&gt;
  &lt;/a&gt;
  Editor for markdown 🥳
&lt;/h2&gt;

&lt;p&gt;Most of us use the &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; for our day-to-day coding usage. As that comes with a very rich extension marketplace and so on, obviously working on markdown can be severely progressive on that editor. As such, most of us use the VS Code for our markdown language-related tasks. It has a built-in preview window for markdown also where we can get the live preview of our markdown file side by side. Writing on the markdown can be super enjoyable by using many extensions from the VS Code extension packages also. Plus it is lightweight also which provides easy accessibility to anyone. We can also use the online-based markdown editors. Some mentionable of them can be, &lt;a href="https://stackedit.io/"&gt;StackEdit&lt;/a&gt;, &lt;a href="https://dillinger.io/"&gt;Dillinger&lt;/a&gt;, &lt;a href="https://typora.io/"&gt;typora&lt;/a&gt; etc. When we use these editors, we have to remember the syntax of the markdown as well. However, as all the syntax of the markdown is pretty easy, we don't usually need to worry about that at all. If we forget any syntax during the work, we can simply search for the syntax on the internet and we can also use any suitable template from the internet as well. Now coming to the point, as a tech-enthusiasts, I often find myself experimenting with many software, gadgets and so on. One day, I get a nice project on the GitHub trending page, and from there I checked that repository. The project caught my attention. The project is &lt;a href="https://github.com/marktext/marktext"&gt;marktext&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m23Crg-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhust868dif5g3axlwyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m23Crg-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhust868dif5g3axlwyi.png" alt="Repo image" width="880" height="894"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also visited their &lt;a href="https://marktext.app/"&gt;official website&lt;/a&gt; and grabbed the software. A nice thing is, the app supports cross-platform, which means you can use the app from Windows, Linux and Mac also. As I also love the cross-platform feature to work seamlessly from any device I want, I gave it a plus point for that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0dtEj55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr6ppqx79bhywg1wn081.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0dtEj55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr6ppqx79bhywg1wn081.png" alt="Website 1" width="880" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k4R6KiBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eemq458s6agj71l04du.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k4R6KiBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eemq458s6agj71l04du.png" alt="IWebsite 2" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2RO9Tkl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/72qvymas1yqmf6r0vmny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2RO9Tkl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/72qvymas1yqmf6r0vmny.png" alt="Website 3" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The installation process is very simple, as with any normal software. After opening the software we get a nice and clean UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1yp4ldV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqelhsucvv7g0mqh2j8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1yp4ldV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqelhsucvv7g0mqh2j8t.png" alt="UI" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I forgot to mention that it already offers 6 themes by default. You can select any theme you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBANozrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ahkpihfd8zbtubwi4fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBANozrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ahkpihfd8zbtubwi4fg.png" alt="theme" width="795" height="903"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The amazing thing about this marktext is that you don't need to remember any syntax at all. Just press &lt;code&gt;@&lt;/code&gt; key from your keyboard, and it will provide you with all the suggestions you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WwmSY3JF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xto8wsvvd88ey0j5zi83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwmSY3JF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xto8wsvvd88ey0j5zi83.png" alt="Suggestion" width="577" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For making your task simpler you can check the suggestion using any suitable word or letter you want. Such as if I type &lt;code&gt;@h2&lt;/code&gt; it will suggest me Header 2. If I want the table, I can search that using &lt;code&gt;@ta&lt;/code&gt;. Actually, if you search using &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt; it will show you all the suggestions by default starting with &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt;. It can be super helpful to anyone.&lt;/p&gt;

&lt;p&gt;Another thing I like the most about this software is the table block. Yeah! You heard me right. You don't need to worry about the &lt;code&gt;|&lt;/code&gt; sign at all. The editor will do that for you. Simply select the table block, it will provide you with a nice GUI table box (just like in any Microsoft Office application). You can select how many rows and columns you want. You can simply enter the value in the box to choose your desired rows and columns as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7hhlYoNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/riy6kcjnbjweke2tgoqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7hhlYoNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/riy6kcjnbjweke2tgoqt.png" alt="row and col" width="546" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you can tweak any setting you want from the &lt;code&gt;Preferences&lt;/code&gt; window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYKySq-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6te6r8rdhvcfklh2pzv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYKySq-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6te6r8rdhvcfklh2pzv.png" alt="Preferences" width="880" height="909"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can discover many more amazing features if you use this software for some time, and if you find more amazing features then don't forget to share those here!&lt;/p&gt;

&lt;p&gt;Another important thing, I have published a video on YouTube on a review of this software 🎉🎉🎉. Please consider checking that out from &lt;a href="https://youtu.be/K61BdvzEJPw"&gt;here&lt;/a&gt;. 🥳&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://github.com/FahimFBA"&gt;GitHub&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/fahimfba/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/Fahim_FBA"&gt;Twitter&lt;/a&gt;, &lt;a href="https://gitlab.com/FahimFBA"&gt;GitLab&lt;/a&gt;, &lt;a href="https://www.facebook.com/iptu.fba/"&gt;Facebook&lt;/a&gt;. Thank you everyone and have a nice day! 🥰&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>Variables in Python</title>
      <author>Suleiman Ibrahim</author>
      <pubDate>Sat, 04 Dec 2021 17:13:14 +0000</pubDate>
      <link>https://dev.to/princeibs/variables-in-python-3foe</link>
      <guid>https://dev.to/princeibs/variables-in-python-3foe</guid>
      <description>&lt;p&gt;A variable in programming is generally a container or location in the computer’s memory used to store values temporarily. Variables in Python are nothing different from the general programming definition of a variable. Values stored in the variable can then later be used or modified in our programs. This article discusses all the basics you need to know in Python programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-variables"&gt;What are variables?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#variables-in-python"&gt;Variables in Python&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#variable-naming-convention"&gt;Variable Naming convention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variable-declaration-and-usage"&gt;Variable declaration and usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reassigning-variables"&gt;Reassigning variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operation-on-variables"&gt;Operation on variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variable-scope-local-and-global-variables"&gt;Variable scope: Local and global variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-are-variables"&gt;
  &lt;/a&gt;
  What are Variables?
&lt;/h3&gt;

&lt;p&gt;Variable are reserved locations in the memory of the computer used to hold values that can be used later.&lt;br&gt;
Because the computer stores variables in the Random Access Memory (RAM), variables are created in the memory only when our program is in execution and are lost immediately after the program is terminated. What this means is that the value of a variable can only be accessed when a program is running. When the program has finished execution, these variables are not accessible anymore from anywhere in the computer. In order to use them again, you will have to run the program once again.&lt;/p&gt;

&lt;p&gt;If you wish to store and retrieve variable values in your programs, consider using a file or database to store these variables. Variables stored in files and databases are stored in the secondary storage of the computer (e.g. Hard Disk Drive (HDD)) and remains for as long as you want them. They can also be retrieved from the computer’s memory even after shutting down and booting up the computer.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#variables-in-python"&gt;
  &lt;/a&gt;
  Variables in Python
&lt;/h3&gt;

&lt;p&gt;In Python, variables are nothing different from the definition above. Python allows us to create variables and use them in our programs, as well as manipulate the values of these variables. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#variable-naming-convention"&gt;
  &lt;/a&gt;
  Variable Naming Convention
&lt;/h4&gt;

&lt;p&gt;Below are some of the rules that variables you must abide by when naming variables in Python.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do not use reserved keywords as a variable name. For example , keywords like class, int, def, while, else, try, e.t.c. &lt;/li&gt;
&lt;li&gt;You cannot use special characters such as @, #, $, %, ^, &amp;amp; , e.t.c. when naming variables&lt;/li&gt;
&lt;li&gt;Variable names are case sensitive. For example, age and Age are two different variables.&lt;/li&gt;
&lt;li&gt;Variable names should start with an alphabet or an underscore(_) character.&lt;/li&gt;
&lt;li&gt;A variable name can only contain the characters A-Z, a-z, 0-9 and underscore(_).&lt;/li&gt;
&lt;li&gt;You cannot start the variable name with a number.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#variable-declaration-and-usage"&gt;
  &lt;/a&gt;
  Variable Declaration and Usage
&lt;/h4&gt;

&lt;p&gt;Variables in python can be declared and used in different ways. Here, we will be exploring some of the ways variables can be declared and used.&lt;br&gt;
The snippet below declares and used the variable &lt;code&gt;message&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# prints the value of message to the console
&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="c1"&gt;## output
# Hello, World!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above is the simplest way you can declare a variable in Python. But wait, what if I need to make my variable names more descriptive?  Python has got your back. According to &lt;a href="https://www.python.org/dev/peps/pep-0008/#id43"&gt;PEP 8 Style guide&lt;/a&gt;, variable names should be lowercase, with words separated by underscores as necessary to improve readability. In a situation where you might want to use long and descriptive variable names, you can simply separate it with an underscore like in the snippet below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# long and descriptive variable names
&lt;/span&gt;&lt;span class="n"&gt;secret_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hey, here is my secret"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# Hey, here is my secret
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python also allows you to declare variables in a more flexible and dynamic way. Unlike other statically typed programming languages like Java, Python is a dynamically typed language and you don’t need to care much about the type of a variable during declaration. You can declare multiple variables of different types on the same line. Let’s see how this looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Declare multiple variables in a single line
# doing it the conventional way
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Prince"&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="n"&gt;hobby&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Swimming"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Name:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" Age:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" Hobby: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hobby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# doing it the Python way
&lt;/span&gt;&lt;span class="n"&gt;my_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_hobby&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Prince"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Swimming"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Name:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" Age:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" Hobby: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_hobby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# Name: Prince  Age: 12  Hobby:  Swimming
# Name: Prince  Age: 12  Hobby:  Swimming
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#reassigning-variables"&gt;
  &lt;/a&gt;
  Reassigning Variables
&lt;/h4&gt;

&lt;p&gt;Python allows you to reassign variables after they are declared, just like most programming languages allow you to. This process is known as “writing into a variable”. When you reassign a variable, the previous value is lost and the new value is then stored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Reassigning variables
&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# reassign the value of my_age
&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# 20
# 21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of &lt;code&gt;my_age&lt;/code&gt; was initially 20, but after printing it on the console and then reassigning it, the value changed to 21. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operation-on-variables"&gt;
  &lt;/a&gt;
  Operation on Variables
&lt;/h4&gt;

&lt;p&gt;You can also perform some operations on the values of your variables. This is one of the great benefits variables give to us. In a situation where you want to perform operations on a very lengthy value many times in your programs. You don’t need to use that length value everywhere in your program. You can simply store the value with a shorter variable name and use it throughout your program. Let’s try this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Operations on variables
&lt;/span&gt;
&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.142857143&lt;/span&gt;
&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;
&lt;span class="n"&gt;perimeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perimeter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# 276.571428584
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can perform any arithmetic operations on numbers in Python. From the snippet above, we can also operate on variables and literals (2 from the code example), provided they are all numbers (either integers or with decimal points). The value 3.142857143  from the code example is long and you might have a hard time holding it in your head. Storing it in PI makes it easily accessible and can be used throughout our programs.&lt;br&gt;
Strings are also not left out here as well as you can perform operations on strings as shown in the code example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# String operations
&lt;/span&gt;&lt;span class="n"&gt;msg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt;
&lt;span class="n"&gt;msg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;
&lt;span class="n"&gt;full_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;msg2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# HelloWorld
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most common operation on string is &lt;strong&gt;concatenation&lt;/strong&gt;. This is simply appending one string to the end of the other using the (+) operator. You can only concatenate a string with another string. If you try to do otherwise, Python will throw a &lt;code&gt;TypeError&lt;/code&gt;.&lt;br&gt;
The (*) operator can also be used on strings. But instead of appending to the end of the string, it rather duplicates the string according to the integer value specified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# String operations
&lt;/span&gt;&lt;span class="n"&gt;fav_language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python"&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fav_language&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# PythonPythonPythonPythonPython
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that the value specified must be an integer. Using otherwise will also throw a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#variable-scope-local-and-global-variables"&gt;
  &lt;/a&gt;
  Variable Scope: Local and Global Variables
&lt;/h4&gt;

&lt;p&gt;Variables declared in the programs we have written so far are available throughout the program. This means it can be accessed from anywhere in the program.&lt;br&gt;
But things begin to get complicated when we start writing complex programs that involve functions which carry out a particular task. This is where the concept of &lt;strong&gt;variable scope&lt;/strong&gt; come in.&lt;br&gt;
The scope of a variable is the region of our program where the variable can be accessed. A variable can either have two scopes: Local and Global. &lt;br&gt;
A &lt;code&gt;local&lt;/code&gt; variable is a variable accessible within the function or method it is defined. This is useful when we want to isolate a variable from the remaining part of our program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Variable scope
# local variable 
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;my_real_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_real_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my__real_age is locally available in some_function
&lt;/span&gt;
&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# execute some_function
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_real_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my_real_age is not available outside some_function 
&lt;/span&gt;

&lt;span class="c1"&gt;## output
# 19
# NameError: name 'my_real_age' is not defined
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;some_function()&lt;/code&gt; is executed, it prints out the value of &lt;code&gt;my_real_age&lt;/code&gt; to the console because &lt;code&gt;my_real_age&lt;/code&gt; is defined inside the function. But again, when we tried to print &lt;code&gt;my_real_age&lt;/code&gt; outside &lt;code&gt;some_function&lt;/code&gt;, a &lt;code&gt;NameError&lt;/code&gt; was thrown because &lt;code&gt;my_real_age&lt;/code&gt; is only available inside &lt;code&gt;some_function&lt;/code&gt; and not throughout the program. This is because &lt;code&gt;my_real_age&lt;/code&gt; is a local variable.&lt;br&gt;
A &lt;code&gt;global&lt;/code&gt; variable is a variable accessible throughout our program. It remains the same throughout our program and also throughout the module. Use the global variable when you want to use the variable throughout the methods and functions of your program. Let us use the same example from above, but this time making &lt;code&gt;my_real_age&lt;/code&gt; a global variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Variable scope
# global variable
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;my_real_age&lt;/span&gt;
    &lt;span class="n"&gt;my_real_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="c1"&gt;# globally available throughout this program
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_real_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_real_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my_real_age is now available outside the some_function 
&lt;/span&gt;

&lt;span class="c1"&gt;## output
# 19
# 19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The program above runs successfully without any errors because &lt;code&gt;my_real_age&lt;/code&gt; is now declared as a global variable.&lt;br&gt;
Declaring variables either local or global is useful in cases where you wouldn't want variables to clash in your Python packages and modules. Other programming languages like Java use class variables, instance variables, and local variables for this concept. But it is more simplified with just local and global variables as presented by Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Having a good knowledge of variables in any programming language is as important as learning the language itself. This article discusses an overview of variables in Python. It starts with a general view of a variable and then narrows down to the Python view of a variable.&lt;br&gt;
And then discussed the naming convention of variables, declaration and usage, how to reassign variables, the numerous operations you can perform on variables, and finally the scope of a variable.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://docs.python.org/3/tutorial/index.html"&gt;official Python documentation &lt;/a&gt; to know more about variables.&lt;/p&gt;

&lt;p&gt;Feel free to drop your thoughts and suggestions in the discussion box. I will be available to attend to them. And also, if you have any questions, you can as well drop them in the discussion box.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>writing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Learning from the Masters: Design</title>
      <author>Mads Stoumann</author>
      <pubDate>Sat, 04 Dec 2021 17:12:48 +0000</pubDate>
      <link>https://dev.to/madsstoumann/learning-from-the-masters-design-35pg</link>
      <guid>https://dev.to/madsstoumann/learning-from-the-masters-design-35pg</guid>
      <description>&lt;p&gt;I recently bought two &lt;strong&gt;huge&lt;/strong&gt; books on the history of graphic design from Taschen – here's volume one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9vwc9_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nklczeplni7pzxd6u4v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9vwc9_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nklczeplni7pzxd6u4v.jpg" alt="History of Graphic Design" width="400" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As each book weighs more than 4 kg, I can only read for about half an hour, or I'll lose the blood-circulation in my legs!&lt;/p&gt;

&lt;p&gt;I find it &lt;em&gt;very&lt;/em&gt; inspirational to look at beautiful designs from these &lt;strong&gt;masters of design&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;One thing I tend to do, and can &lt;strong&gt;highly recommend&lt;/strong&gt;, is trying to &lt;em&gt;recreate a classic design&lt;/em&gt; to something you can use on the web.&lt;/p&gt;

&lt;p&gt;Take a look at this simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0akKDHuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beyglufxogl1ml0ht3hv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0akKDHuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beyglufxogl1ml0ht3hv.jpeg" alt="Blue Columns" width="768" height="1024"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How would &lt;strong&gt;you&lt;/strong&gt; do this in HTML and CSS?&lt;/p&gt;

&lt;p&gt;There's no right or wrong answer – and you can probably think of &lt;em&gt;many ways&lt;/em&gt; of accomplishing it. And that's the beauty of it: You can chose to do it in a known and familiar way – or chose to challenge yourself, going into unknown territory.&lt;/p&gt;

&lt;p&gt;Either way, I &lt;strong&gt;guarentee&lt;/strong&gt; you'll learn something. I always do.&lt;/p&gt;




&lt;p&gt;Now, back to the blue columns. Notice how each blue column is &lt;em&gt;half&lt;/em&gt; the size of the previous column? In CSS Grid, with the smallest column being &lt;code&gt;1fr&lt;/code&gt;, it's:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.columns&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding five &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s inside a wrapper with &lt;code&gt;class="columns"&lt;/code&gt;, we get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tjxaijiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q23qmxe4078w9hal55i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tjxaijiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q23qmxe4078w9hal55i.png" alt="Five blue columns" width="880" height="799"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, it's only a matter of &lt;code&gt;translateY()&lt;/code&gt;'ing columns 2-4, adding &lt;code&gt;aspect-ratio: 1/1.75&lt;/code&gt; to the first column, and we have the initial version:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJSgz1sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxeqz2hyrkcc7tgazv8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJSgz1sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxeqz2hyrkcc7tgazv8f.png" alt="Finished Blue Columns" width="880" height="1358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How can we “webify” this? That's up to your imagination! For me, the columns look a bit like books on a shelf, so I'll add some dynamic font-sizing using &lt;code&gt;clamp()&lt;/code&gt; and set the &lt;code&gt;writing-mode&lt;/code&gt; to &lt;code&gt;vertical-lr&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/MWEaVPL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Let's look at another example from the book – a beautiful, old movie-poster:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQUZ0O0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1vbwkv99k14ndv76i1o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQUZ0O0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1vbwkv99k14ndv76i1o.jpg" alt="No Way Out" width="600" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me, this screams “clip-path” – so that's what I did, a bunch of layered &lt;code&gt;clip-path&lt;/code&gt;s:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/WNoxbLX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I also figured this could work as a custom header for an article – so I wrote a small piece on the “imposter syndrome” (something I have to deal with from time to time).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#one-final-example"&gt;
  &lt;/a&gt;
  One final example
&lt;/h2&gt;

&lt;p&gt;There are hundreds of beautiful designs in the Taschen-books – currently, I've fallen in love with this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YI3QjNj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bush8b10gkz99uyawnt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YI3QjNj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bush8b10gkz99uyawnt.jpg" alt="Red Circle" width="594" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've started to create the red circle, using a &lt;code&gt;radial-gradient&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#FFF&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;52%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;57%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#FFF&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;59%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;64%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#FFF&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMRDAuf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ra6g0ldnnnwvwi56mi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMRDAuf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ra6g0ldnnnwvwi56mi.png" alt="Red Circle CSS" width="772" height="772"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But then again, I might switch to &lt;code&gt;svg&lt;/code&gt;, animate the indivdual rings, add text-on-a-path etc. &lt;/p&gt;

&lt;p&gt;Maybe you might find this whole “recreate classic designs in CSS” silly or a waste of time – but believe me: it's fun, challenging, and &lt;em&gt;always&lt;/em&gt; a great way to learn new stuff!&lt;/p&gt;

&lt;p&gt;If you've become inspired to do something similar, or already &lt;em&gt;have&lt;/em&gt; done, please share links to your work in the comments.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS Re:Invent 2021 #Reaction Final Part</title>
      <author>Gerardo Castro Arica</author>
      <pubDate>Sat, 04 Dec 2021 17:05:48 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-reinvent-2021-reaction-final-part-1m65</link>
      <guid>https://dev.to/aws-builders/aws-reinvent-2021-reaction-final-part-1m65</guid>
      <description>&lt;p&gt;AWS re: Invent 2021 has come to an end. It has been a week of total ecstasy. A week has passed since I published this post at the pre-inaugural midnight madness moment:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XiHZGfTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zBhlBNbp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497606/182b3786-6675-442f-8997-f1532fb32418.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/aws-reinvent-2021-reaction-5e9c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;AWS Re:Invent 2021 #Reaction &lt;/h2&gt;
      &lt;h3&gt;Gerardo Castro Arica for AWS Community Builders  ・ Nov 29 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#news&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Now, let me tell you a summary of the brightest and most outstanding moments that happened for me during Werner's keynote.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keynote with Dr. Werner Vogels&lt;/strong&gt;&lt;br&gt;
Besides having had one of the best intros I have ever seen, listening to Werner's keynote was like going back in time, the beginnings of many services such as EC2 among others were remembered, since 2006. If you see the intro in detail, We will see references to the past like that "box" and we see that Werner remembers when he announced Lambda for the first time. Why so much nod to the past?&lt;/p&gt;

&lt;p&gt;After the nod to the past about EC2 instances, boom! nod to the future with EC2 M1 Mac Instances, what will come next? kind of InstancesVerse? we won't know yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yKfG5cD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m53rmr3jmxo6xlas3snl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yKfG5cD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m53rmr3jmxo6xlas3snl.png" alt="EC2 M1 Mac Instances" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other of the best announcements of this keynote is the launch of 30 new AWS Local Zones, including 2 AWS Local Zones in LATAM. This after highlighting how AWS has been working to offer a better user experience with very low latencies thanks to the large number of regions, and not to mention the more than 216 Edge Locations that it now has.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojvg_tG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jxv0uzloceg75yaqjvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojvg_tG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jxv0uzloceg75yaqjvt.png" alt="AWS Local Zones" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our much-loved Amplify Studio comes with a huge upgrade. Now it allows us to create applications in a matter of hour, with a nice UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ELvO595--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njweaih4n7p55hanmv9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ELvO595--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njweaih4n7p55hanmv9u.png" alt="AWS Amplify Studio" width="880" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I liked the most about this new release is its integration with the very powerful design tool &lt;a href="//figma.com"&gt;Figma&lt;/a&gt;. That is, you have the development of your application without the need to throw code, and with a single click, you export all that UI to Figma for prototyping. What more can you ask? Yes, I am a fan of Figma.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhqVUmcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwlh3wk6pdgnfr4oty9l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhqVUmcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwlh3wk6pdgnfr4oty9l.png" alt="Amplify Studio and Figma" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following that line "Dev", because now SDK is compatible with runtime like Swift, Kotlin and Rust.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjSPPsnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/212wqp8guquekldkck7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjSPPsnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/212wqp8guquekldkck7c.png" alt="SDKs" width="880" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sustainability pillar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P1XfLNzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lkry9qdfss8qa2a3awj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1XfLNzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lkry9qdfss8qa2a3awj.png" alt="Pilar de sostenibilidad" width="880" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Goodbye StackOverFlow, Welcome AWS re:Post&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6kjApCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny6jj5g9jomxbt4jfao1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6kjApCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny6jj5g9jomxbt4jfao1.png" alt="AWS re:Post" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You asked for this. Basically, this is your fault.&lt;br&gt;
By Werner Vogels.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3mw_SiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vvhnewh00vvf3m4k2vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3mw_SiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vvhnewh00vvf3m4k2vv.png" alt="AWS Services" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to see the complete Keynote, this is the video:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8_Xs8Ik0h1w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>aws</category>
      <category>discuss</category>
      <category>news</category>
      <category>meta</category>
    </item>
    <item>
      <title>Controlling auto publishing for coordinated releases on Netlify</title>
      <author>Phil Hawksworth</author>
      <pubDate>Sat, 04 Dec 2021 16:48:52 +0000</pubDate>
      <link>https://dev.to/netlify/controlling-auto-publishing-for-coordinated-releases-on-netlify-2558</link>
      <guid>https://dev.to/netlify/controlling-auto-publishing-for-coordinated-releases-on-netlify-2558</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Throughout December we'll be &lt;a href="https://www.netlify.com/blog/2021/12/01/highlighting-a-different-netlify-feature-each-day-in-december/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys"&gt;highlighting a different Netlify feature each day&lt;/a&gt;. It might just be the thing you need to unlock those creative juices, and &lt;a href="https://www.netlify.com/blog/2021/12/01/dusty-domains-your-forgotten-domains-raise-money-for-charity/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys"&gt;dust off that domain&lt;/a&gt; you registered but never deployed! Keep an eye &lt;a href="https://www.netlify.com/blog/2021/12/01/highlighting-a-different-netlify-feature-each-day-in-december/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys"&gt;on the blog&lt;/a&gt; and on &lt;a href="https://twitter.com/netlify"&gt;Twitter&lt;/a&gt; for each feature!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By locking deploys you can stick with your currently published deploy even though more updates and builds are taking place. Builds still happen when you commit changes, but they aren't published.&lt;/p&gt;

&lt;p&gt;This is a very good way to say, "hey I will be working on this site all day and I'll be pushing commits as I go, but don't make them live until I'm ready."&lt;/p&gt;

&lt;p&gt;This can be a very helpful technique for coordinating lots of updates for a big launch or announcement. Everything can be readied and verified, and then all go live instantly at the click of a button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-lock-a-deploy"&gt;
  &lt;/a&gt;
  How to lock a deploy
&lt;/h3&gt;

&lt;p&gt;When you deploy a site and navigate to the &lt;code&gt;Deploys&lt;/code&gt; tab of your Netlify UI, you will see a &lt;code&gt;Stop auto publishing&lt;/code&gt; button. If you click that button, the currently published version of this site will be locked and subsequent deploys will be built and queued.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6zeiyWc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/67417e338bab6944322c2a35a9f40879c8a7dec0/b1b0d/img/blog/lock-deploy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zeiyWc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/67417e338bab6944322c2a35a9f40879c8a7dec0/b1b0d/img/blog/lock-deploy.png" alt="The Stop Auto Publishing button in the Deploys page of the Netlify admin" title="Stop Auto Publishing button" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unlock-a-locked-deploy"&gt;
  &lt;/a&gt;
  Unlock a locked deploy
&lt;/h3&gt;

&lt;p&gt;This part is pretty intuitive as you'd expect. Once clicked, the button state will change to &lt;code&gt;Start auto publishing&lt;/code&gt; will give you the opportunity to unlock the currently locked version and re-start auto-publishing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that previously built deploys will not auto-publish when you re-start auto publishing. You'll need to choose which of your new deploys you want to publish, by clicking &lt;code&gt;Publish deploy&lt;/code&gt; in the summary page of any of your deploys.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cibQ5TTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/2d2bf3b78c17c9e1df9a763a90727e446114ade2/f4578/img/blog/publish-deploy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cibQ5TTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/2d2bf3b78c17c9e1df9a763a90727e446114ade2/f4578/img/blog/publish-deploy.png" alt="The Publish deploy button in a deploy summary page" title="The Publish deploy button" width="880" height="530"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More information
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/manage-deploys/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys#locked-deploys"&gt;Docs: locked deploys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netlify.com/products/build/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys"&gt;Netlify Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>netlify</category>
      <category>tips</category>
      <category>deployment</category>
    </item>
    <item>
      <title>Build a Mini Buymeacoffee dApp Using Solidity + Ethereum Smart Contract + ReactJs + TailwindCSS</title>
      <author>Olubisi Idris Ayinde💡</author>
      <pubDate>Sat, 04 Dec 2021 16:42:44 +0000</pubDate>
      <link>https://dev.to/olanetsoft/build-a-mini-buymeacoffee-dapp-using-solidity-ethereum-smart-contract-reactjs-tailwindcss-26j5</link>
      <guid>https://dev.to/olanetsoft/build-a-mini-buymeacoffee-dapp-using-solidity-ethereum-smart-contract-reactjs-tailwindcss-26j5</guid>
      <description>&lt;p&gt;Blockchain is typically one of the highest-paying programming industries, with developers earning between $150,000 and $175,000 per year on average as salaried employees. Sound interesting, right?&lt;/p&gt;

&lt;p&gt;To learn more about a developer roadmap and how to get started, &lt;a href="https://blog.idrisolubisi.com/web-3-a-developer-roadmap-and-resources-to-get-started"&gt;Check here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will Build a Mini Buymeacoffee dAPP Using Solidity, Ethereum Smart Contract, ReactJs, and tailwind CSS. It'll be a platform where anyone on the internet can learn a little about us and send us money to purchase coffee + a note, with the information being kept on the blockchain via an Ethereum smart contract. (A smart contract is essentially code that stays on the blockchain and can be read and written from; we'll go over this in more detail later.)&lt;/p&gt;

&lt;p&gt;We'll create the smart contract and deploy it. We will also build a website that will allow people to connect their wallets and engage with our smart contract.&lt;/p&gt;

&lt;p&gt;Here is a link to the &lt;a href="https://buymeacoffee.vercel.app/"&gt;Live Demo&lt;/a&gt; and the GitHub Repositories 👉 &lt;a href="https://github.com/Olanetsoft/buymeacoffee-fe"&gt;Frontend&lt;/a&gt; and &lt;a href="https://github.com/Olanetsoft/buymeacoffee-be"&gt;Backend/Smart Crontract&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let us ensure we have Node/NPM installed on our PC. If you don't have it, head over &lt;a href="https://hardhat.org/tutorial/setting-up-the-environment.html"&gt;here&lt;/a&gt; to for a guide&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-setup-and-installation"&gt;
  &lt;/a&gt;
  Project Setup and Installation
&lt;/h2&gt;

&lt;p&gt;Next, let's head over to the terminal. We'll need to &lt;code&gt;cd&lt;/code&gt; into the directory we wish to work with and then run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir mini-buymeacoffee-be
cd mini-buymeacoffee-be
npm init -y
npm install --save-dev hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we should have a hardhat. Let's get a sample project going by running the command below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We'll go with the option of creating a sample project. Accept all requests.&lt;br&gt;
Installing hardhat-waffle and hardhat-ethers is required for the sample project. These are some of the other things we'll be using later:).&lt;/p&gt;

&lt;p&gt;Just in case it didn't do it automatically, we will install these other requirements.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To make sure everything is working, run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will see a passed test result in our console.&lt;/p&gt;

&lt;p&gt;It is now possible for us to Delete &lt;code&gt;sample-test.js&lt;/code&gt; from the test folder. Delete &lt;code&gt;sample-script.js&lt;/code&gt; from the scripts directory as well. After that, go to contracts and delete &lt;code&gt;Greeter.sol&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The folders themselves should not be deleted!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, under the contracts directory, we'll create a file called CoffeePortal.sol. When using Hardhat, file layout is really crucial, so pay attention!&lt;br&gt;
We're going to start with the basic structure of every contract.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

import "hardhat/console.sol";

contract CoffeePortal {

    constructor() payable {
        console.log("Yo! Smart Contract");
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To build and deploy our smart contract, navigate to the &lt;code&gt;scripts&lt;/code&gt; folder, create a new file called &lt;code&gt;run.js,&lt;/code&gt; and update it with the following code snippet:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const main = async () =&amp;gt; {

// This will actually compile our contract and generate the necessary files we need to work with our contract under the artifacts directory.
  const coffeeContractFactory = await hre.ethers.getContractFactory('CoffeePortal');
  const coffeeContract = await coffeeContractFactory.deploy();

  await coffeeContract.deployed(); // We'll wait until our contract is officially deployed to our local blockchain! Our constructor runs when we actually deploy.

 console.log("Coffee Contract deployed to:", coffeeContract.address);
};

const runMain = async () =&amp;gt; {
  try {
    await main();
    process.exit(0);
  } catch (error) {
    console.log(error);
    process.exit(1);
  }
};

runMain();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's run it!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/run.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see something similar to what we have below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vkzsUhK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638189667475/M60gQS37I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vkzsUhK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638189667475/M60gQS37I.png" alt="hardhat compilation result" width="880" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a working smart contract 🥳 Let us deploy it to a network by making it available to everyone worldwide.&lt;/p&gt;

&lt;p&gt;Under the &lt;code&gt;scripts&lt;/code&gt; folder, create a file called &lt;code&gt;deploy.js&lt;/code&gt;. Here's the code for it. It looks super similar to run.js.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const main = async () =&amp;gt; {
  const [deployer] = await hre.ethers.getSigners();
  const accountBalance = await deployer.getBalance();

  console.log("Deploying contracts with account: ", deployer.address);
  console.log("Account balance: ", accountBalance.toString());

  const Token = await hre.ethers.getContractFactory("CoffeePortal");
  const portal = await Token.deploy();
  await portal.deployed();

  console.log("CoffeePortal address: ", portal.address);
};

const runMain = async () =&amp;gt; {
  try {
    await main();
    process.exit(0);
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
};

runMain();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now the command below we're going to deploy locally using the localhost network for test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js --network localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We should have something similar to what we have below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qz5ytMrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638190358448/Us0z6ba0U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qz5ytMrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638190358448/Us0z6ba0U.png" alt="Rinkeby Network" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-and-deploying-coffeecontract-to-blockchain"&gt;
  &lt;/a&gt;
  Building and Deploying CoffeeContract to Blockchain
&lt;/h2&gt;

&lt;p&gt;Everything is now in place, including the test script and the 'deploy.js' file. With the following code snippet, we'll update the Smart Contract, run.js, and deploy.js files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;contracts/CoffeePortal.sol&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Update &lt;code&gt;scripts/run.js&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Update &lt;code&gt;scripts/deploy.js&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now it's time to get down to business, deploying to the real blockchain.&lt;/p&gt;

&lt;p&gt;We'll need to sign up for an &lt;a href="https://alchemy.com/?r=37c4f8545ef30da7"&gt;Alchemy account&lt;/a&gt; before we can deploy to the blockchain.&lt;/p&gt;

&lt;p&gt;Alchemy basically allows us to broadcast our contract creation transaction so that miners can pick it up as soon as possible. The transaction is then broadcasted to the blockchain as a legitimate transaction once it has been mined. After that, everyone's copy of the blockchain is updated.&lt;/p&gt;

&lt;p&gt;We'll create an app as shown below after signing up. Remember to change the network selection to Rinkeby because that's where we'll be deploying.&lt;/p&gt;

&lt;p&gt;We switched it from mainnet to Rinkeby for a reason. Because it's real money, and it's not worth squandering! We'll start with a "testnet," which is a clone of "mainnet" but utilizes fictitious money so we can experiment as much as we like. However, it's crucial to note that testnets are operated by genuine miners and are designed to simulate real-world conditions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6THJMJc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638229612454/rkzNZJkqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6THJMJc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638229612454/rkzNZJkqe.png" alt="Alchemy App" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Afterward, we will need to grab our keys as shown below, and store them for later use:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I085s4We--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638230176052/6u192pmH3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I085s4We--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638230176052/6u192pmH3.png" alt="Alchemy keys" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll need some fake ETH in our testnet account, and we'll have to request some from the network. This fake ETH can only be used on this testnet. Rinkeby can get some phony ETH by using a faucet.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;th&gt;Amount&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MyCrypto&lt;/td&gt;
&lt;td&gt;&lt;a href="https://app.mycrypto.com/faucet"&gt;https://app.mycrypto.com/faucet&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Buildspace&lt;/td&gt;
&lt;td&gt;&lt;a href="https://buildspace-faucet.vercel.app/"&gt;https://buildspace-faucet.vercel.app/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.025&lt;/td&gt;
&lt;td&gt;1d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ethily&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ethily.io/rinkeby-faucet/"&gt;https://ethily.io/rinkeby-faucet/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;1w&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Official Rinkeby&lt;/td&gt;
&lt;td&gt;&lt;a href="https://faucet.rinkeby.io/"&gt;https://faucet.rinkeby.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3 / 7.5 / 18.75&lt;/td&gt;
&lt;td&gt;8h / 1d / 3d&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Table by &lt;a href="https://buildspace.so"&gt;Buildspace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our hardhat.config.js file needs to be updated. This can be found in the smart contract project's root directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
require("@nomiclabs/hardhat-waffle");
require("dotenv").config();

// This is a sample Hardhat task. To learn how to create your own go to
// https://hardhat.org/guides/create-task.html
task("accounts", "Prints the list of accounts", async (taskArgs, hre) =&amp;gt; {
  const accounts = await hre.ethers.getSigners();

  for (const account of accounts) {
    console.log(account.address);
  }
});

// You need to export an object to set up your config
// Go to https://hardhat.org/config/ to learn more

/**
 * @type import('hardhat/config').HardhatUserConfig
 */
module.exports = {
  solidity: "0.8.4",
  networks: {
    rinkeby: {
      url: process.env.STAGING_ALCHEMY_KEY,
      accounts: [process.env.PRIVATE_KEY],
    },
  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we look at the code snippet above, we can see that some keys were read from the &lt;code&gt;.env&lt;/code&gt; file, as well as the import at the top of &lt;code&gt;require("dotenv").config()&lt;/code&gt;, which implies we'll need to install the dotenv package and also create a &lt;code&gt;.env&lt;/code&gt; file using the command below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -D dotenv

touch .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Inside the .env file, add the following keys:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STAGING_ALCHEMY_KEY= // Add the key we copied from the Alchemy dashboard here
PRIVATE_KEY= // Add your account private key here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To get our account private key is easy, check out this &lt;a href="https://metamask.zendesk.com/hc/en-us/articles/360015289632-How-to-Export-an-Account-Private-Key"&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we can run the command to deploy our contract to a real blockchain network&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js --network rinkeby
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here's what our output should look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRjAi542--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638231542632/8XWvfuQLM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRjAi542--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638231542632/8XWvfuQLM.png" alt="Rinkeby Output" width="880" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay 🥳 we just deployed our contract.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up-frontend-react-client"&gt;
  &lt;/a&gt;
  Set up Frontend React Client
&lt;/h2&gt;

&lt;p&gt;It's time to get our website up and running! Our smart contract is completed, but we need to figure out how our front end can interact with it as soon as possible!&lt;/p&gt;

&lt;p&gt;To create a new project, we use the &lt;code&gt;npx create-next-app -e with-tailwindcss&lt;/code&gt; command to scaffold a new project in a directory of our choice.&lt;/p&gt;

&lt;p&gt;This command creates a Next.js project with TailwindCSS set up. TailwindCSS is a utility-first CSS framework packed with classes to help us style our web page.&lt;/p&gt;

&lt;p&gt;To install the dependencies, we use the commands:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd &amp;lt;project name&amp;gt; 
npm install ethers react-toastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once the app is created and the dependencies are installed, we will see a message with instructions for navigating to our site and running it locally. We do this with the command.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next.js will start a hot-reloading development environment accessible by default at &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need to connect our wallet to the blockchain in order for our website to communicate with it. Our website will have permission to call smart contracts on our behalf after we connect our wallet to our website. Remember, it's the same as logging into a website.&lt;/p&gt;

&lt;p&gt;All of our work will be done in index.js, which can be found under &lt;code&gt;pages&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;We need to import abi and update our contractAddress in the code sample above. Let's start by creating a folder named &lt;code&gt;utils&lt;/code&gt;, then using the following command to create a file called &lt;code&gt;CoffeePortal.json&lt;/code&gt; inside the &lt;code&gt;utils&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir utils
touch CoffeePortal.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following that, we'll need our contract address as well as the content that will be updated in the &lt;code&gt;CoffeePortal.json&lt;/code&gt; file. What's the best way to get it? &lt;/p&gt;

&lt;p&gt;Let's go back to the smart contract project we worked on before, then navigate to &lt;code&gt;artifacts/contracts/coffeePortal.json&lt;/code&gt; and copy the entire content inside it, as well as our contract address, which was displayed in our terminal when we deployed our contract to the blockchain.&lt;/p&gt;

&lt;p&gt;We will update the &lt;code&gt;CoffeePortal.json&lt;/code&gt; file with what we copied and also update index.js as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ...

import Head from "next/head";

// Import abi
import abi from "../utils/CoffeePortal.json";

export default function Home() {
  /**
   * Create a variable here that holds the contract address after you deploy!
   */
  const contractAddress = "";  // Add contract address here

   // ...
  return (
    &amp;lt;div className="flex flex-col items-center justify-center min-h-screen py-2"&amp;gt;
      [...]
    &amp;lt;/div&amp;gt;
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Its time to test our app, we should have something similar to what we have below when we visit &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CVz3-IL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234155936/Oa2fK6Yjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CVz3-IL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234155936/Oa2fK6Yjk.png" alt="DApp landing page" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, clicking connect wallet button should redirect us to the MetaMask UI where we will grant the site access as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrhSTVvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234397266/dUjQPY6X1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrhSTVvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234397266/dUjQPY6X1o.png" alt="MetaMask" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FRKMUIG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234407639/NcDP4cGoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRKMUIG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234407639/NcDP4cGoy.png" alt="MetaMask Connecting" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then our UI should look similar to what is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ebrb_-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234464150/gbp-L6l4B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ebrb_-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234464150/gbp-L6l4B.png" alt="Buy Me A Coffee - DApp" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now support, by buying a coffee worth $5 and also providing our name and any preferred message to the owner 😊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJjuPKza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234934356/YCwD8GSlk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJjuPKza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234934356/YCwD8GSlk.png" alt="Buy A Coffee" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGbp7B6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234964158/-u-_9Q-zi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGbp7B6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234964158/-u-_9Q-zi.png" alt="Connect MetaMask" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9xC9Nn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235016882/6TjHhS-5R.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9xC9Nn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235016882/6TjHhS-5R.png" alt="Minning" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Completed...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyRS0CAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235049991/1tN74rrlc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyRS0CAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235049991/1tN74rrlc.png" alt="Transaction Completed" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another coffee support:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUQPEafF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235139683/68GyVavYH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUQPEafF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235139683/68GyVavYH.png" alt="Blockchain Transaction" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we observe, the page updates in real-time once a transaction is completed; this is the result of the event we introduced to our smart contract, and React, of course, effortlessly updates the UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we learned how to build a mini buymeacoffee dAPP using solidity, ethereum smart contract, react, and tailwind CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ethereum.org/en/developers/docs/"&gt;Ethereum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dabit3/the-complete-guide-to-full-stack-ethereum-development-3j13"&gt;Fullstack Dapp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/photos/jpsocjU9R7s"&gt;Cover Photo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'd love to connect with you at &lt;a href="https://twitter.com/olanetsoft"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/olubisi-idris-ayinde-05727b17a/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/Olanetsoft"&gt;GitHub&lt;/a&gt; | &lt;a href="https://idrisolubisi.com/"&gt;Portfolio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next blog article. Take care!!!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>web3</category>
    </item>
    <item>
      <title>How to open other input block by selecting other option in VueJs</title>
      <author>Snehal </author>
      <pubDate>Sat, 04 Dec 2021 16:40:56 +0000</pubDate>
      <link>https://dev.to/snehalk/how-to-open-other-input-block-by-selecting-other-option-in-vuejs-176l</link>
      <guid>https://dev.to/snehalk/how-to-open-other-input-block-by-selecting-other-option-in-vuejs-176l</guid>
      <description>&lt;p&gt;Hello artisan,&lt;/p&gt;

&lt;p&gt;In today's blog I am going to show you how we can open a other option block by selecting other option in various input type like radio, select, checkbox. &lt;/p&gt;

&lt;p&gt;This is helpful when we do not have options listed in given options and we want you put our own answer/option in that.&lt;/p&gt;

&lt;p&gt;So let's begin the code.&lt;/p&gt;

&lt;p&gt;First we need to create component named as &lt;code&gt;ExampleComponent.vue&lt;/code&gt; and add the below code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-white p-7 shadow h-screen mx-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-center my-2 p-3 border-b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-full border shadow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;
        &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form.data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border border-indigo-300 rounded-lg shadow-lg px-3 py-2 w-1/4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;change&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onSelectChange(form.data)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;null&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/option&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;
          &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option in options&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option.id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getOptionValue(option)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;getOptionDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/option&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/select&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherFiled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form.others&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border px-4 py-2 my-4 border border-indigo-300 rounded-lg shadow-lg w-1/4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please specify your option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display: none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border-t mt-4 py-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;saveCheckboxValues&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkedFruits.option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkedFruits.option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkedFruits.option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;grape&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkedFruits.other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;change&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getCheckedValue(checkedFruits.other)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;change&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getCheckedValue($event)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;getRadioOtherOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherCheckedOption&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkedFruits.other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border px-4 py-2 my-4 border border-indigo-300 rounded-lg shadow-lg w-1/4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please specify your option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display: none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border shadow border-indigo-300 p-2 ml-6 rounded-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Save&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;checkedFruits&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border-t mt-4 py-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;saveRadioValue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;selectedColors.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;selectedColors.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;selectedColors.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;pink&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;selectedColors.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;change&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getRadioOptionValue(selectedColors.value)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;getRadioOtherOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherOption&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;selectedColors.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border px-4 py-2 my-4 border border-indigo-300 rounded-lg shadow-lg w-1/4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please specify your option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display: none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border shadow border-indigo-300 p-2 ml-6 rounded-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Save&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;selectedColors&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;both&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other | Other (please specify)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="na"&gt;others&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;checkedFruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;option&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;selectedColors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// other: '',&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this fn will only change the display name if it has other field&lt;/span&gt;
    &lt;span class="nx"&gt;getOptionDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other | &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// checks if value starts other | option so we can replace it with other so that we can use it for other answers by users&lt;/span&gt;
    &lt;span class="nx"&gt;getOptionValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other | &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// if selected option has other option selected then it will display other box and its value will be stored in other array&lt;/span&gt;
    &lt;span class="nx"&gt;onSelectChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherFiled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherFiled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// ex radio other option&lt;/span&gt;
    &lt;span class="nx"&gt;getRadioOtherOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;getRadioOptionValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherOption&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherOption&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;getCheckedValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherCheckedOption&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;otherCheckedOption&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;saveRadioValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$inertia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ex.store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectedColors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;saveCheckboxValues&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$inertia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example.storeCheckbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkedFruits&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add this component to &lt;code&gt;App.vue&lt;/code&gt; as given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/ExampleComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Avenir&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;antialiased&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;c3e50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check the functionality on given code block.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/open-other-options-on-various-input-type-mre4c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy Reading.. ❤️ 🦄&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Security and Authentication in MongoDB</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sat, 04 Dec 2021 16:39:11 +0000</pubDate>
      <link>https://dev.to/thenerdydev/security-and-authentication-in-mongodb-22k4</link>
      <guid>https://dev.to/thenerdydev/security-and-authentication-in-mongodb-22k4</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;br&gt;
In this article, let us understand about &lt;strong&gt;Security and Authentication in MongoDB&lt;/strong&gt;. We will understand the security aspect from the perspective of developers and NOT for the database admins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eiDELpaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnebhz6azoqxzz1imz22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eiDELpaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnebhz6azoqxzz1imz22.png" alt="Image description" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on &lt;a href="https://the-nerdy-dev.com/"&gt;https://the-nerdy-dev.com/&lt;/a&gt;.&lt;br&gt;
Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-the-most-important-parts-for-securing-the-mongodb-database-"&gt;
  &lt;/a&gt;
  What are the most important parts for securing the mongodb database ?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XrCn0ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jn1hz8pqzxch92vg6qd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XrCn0ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jn1hz8pqzxch92vg6qd.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#security-checklist"&gt;
  &lt;/a&gt;
  Security Checklist
&lt;/h2&gt;

&lt;p&gt;For hardening the Mongo Environment and making sure that it is safe and cannot be tampered from outside, we need a security checklist. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#authentication-and-authorization"&gt;
  &lt;/a&gt;
  Authentication and Authorization
&lt;/h2&gt;

&lt;p&gt;The database that we will be using to store data and users will know the users and your code will have to authenticate as a database in order to get data, update data and do all kinds of stuffs with the data that you get back. It is the most important building block for securing your MongoDB environment. &lt;/p&gt;

&lt;p&gt;Another important building block is the &lt;strong&gt;Transport Encryption&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#transport-encryption"&gt;
  &lt;/a&gt;
  Transport Encryption
&lt;/h2&gt;

&lt;p&gt;This means the data that you sent from your app to the server should be encrypted so that no &lt;em&gt;MAN IN THE MIDDLE attack&lt;/em&gt; can compromise your credentials. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#encryption-at-rest"&gt;
  &lt;/a&gt;
  Encryption at Rest
&lt;/h2&gt;

&lt;p&gt;This means that the data in the database also should be encrypted otherwise if someone somehow gets access to your database servers well they can then read plain text information easily.&lt;/p&gt;

&lt;p&gt;So it is a must to store the data in the database in the encrypted format as well.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#auditing"&gt;
  &lt;/a&gt;
  Auditing
&lt;/h2&gt;

&lt;p&gt;This is the pure server admin task and not the concern for the developer but Mongodb provides auditing to servers to see who did what and what actions occurred so that you can control and are aware of what is happening inside the database &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#server-amp-network-config-and-setup"&gt;
  &lt;/a&gt;
  Server &amp;amp; Network Config and Setup
&lt;/h2&gt;

&lt;p&gt;Additionally the server on which you run database server (like physical machine that is running somewhere or the cloud provider like &lt;strong&gt;AWS&lt;/strong&gt;) the instances that we book there the network that you are using for hosting your Mongo Server should also be secure. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#backups-and-software-updates"&gt;
  &lt;/a&gt;
  Backups and Software Updates
&lt;/h2&gt;

&lt;p&gt;As an owner of the database environment you should regularly take backup of your data. The softwares that you are running should be up to date. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#let-us-talk-about-the-below-three-in-great-detail-"&gt;
  &lt;/a&gt;
  Let us talk about the below three in great detail :
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Authentication and Authorization &lt;/li&gt;
&lt;li&gt;Transport Encryption &lt;/li&gt;
&lt;li&gt;Encryption at Rest &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#understanding-the-role-based-access-control"&gt;
  &lt;/a&gt;
  Understanding the Role Based Access Control
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#authentication-and-authorization"&gt;
  &lt;/a&gt;
  Authentication and Authorization
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; is all about identification of the users in the database&lt;br&gt;
Coming to Authorization,&lt;br&gt;
&lt;strong&gt;Authorization&lt;/strong&gt; is all about what these users may actually do in the database &lt;/p&gt;

&lt;p&gt;MongoDB employs the &lt;strong&gt;Role Based Access Control System&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Let us say we have the MongoDB server with three databases &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Admin database which is the special database that exists out of the box &lt;/li&gt;
&lt;li&gt;Blog database &lt;/li&gt;
&lt;li&gt;Shop database &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Authentication can be enabled in a very easy way and suddenly MongoDBs server only allows access to the authenticated users. &lt;/p&gt;

&lt;p&gt;Let us considered a user like some data analyst/software developer who directly connects with our shell or say we have the app code that uses the driver to connect to the database. The analyst or developer is NOT a user of your application, not the user &lt;br&gt;
of the web application that you are building and we now need to login to the MongoDB Server. With our username and password, we can do that since authentication was enabled that means user needs to exist on the MongoDB server otherwise the login of the user will not be possible. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-say-we-get-loggedin-but-we-have-no-rights-to-do-anything"&gt;
  &lt;/a&gt;
  Now say we get loggedin but we have no rights to do anything...
&lt;/h2&gt;

&lt;p&gt;The users in MongoDB are not just entities that are made up of username and passwords but they are also assigned some roles and these roles are basically the group of the privileges &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A privilege is a combination of the resource and the action.&lt;/p&gt;

&lt;p&gt;A resource would be something like the products collection in the Shop database and an action would be an insert() command for example to insert a product for example in our products collection &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actions are basically the task commands that we can do in our MongoDB database and resources define what resources we can access based on the  access privileges that we are granted. &lt;/p&gt;

&lt;p&gt;Typically multiple privileges are grouped into something called as the &lt;strong&gt;ROLES&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;That means a user has a role and that role includes all the privileges holding actions and resources that makes sense for this user.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;This is the model that MongoDB uses since it is the most flexible model that Mongo has defined for its userbase. This allows us to create multiple owners where we can give every user exactly the rights that every user needs. We do not want to give every user all the rights because if we give all rights to any unauthorized person then they may do something malicious with our database which they were not designated to do. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#different-types-of-database-users"&gt;
  &lt;/a&gt;
  Different types of database users
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Admin&lt;/strong&gt; - A real person who needs to be able to manage the database configuration and create users etc, create new databases, create new collections. The admin would need to be required to be work with data in the database. He does not need to be able to insert or fetch data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer&lt;/strong&gt; - A developer needs to be able to insert, delete, update or fetch data (all the CRUD operations that we discussed). The developer is not responsible for creating the users and manage the database configurations. This is not your job and the app code should not be able to do that. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Data Scientist&lt;/strong&gt; - A data scientist needs to be able to fetch the data. He/she does not need to be able to create users, manage the database configuration or insert, edit, delete, update the data. His sole responsibility is to work with large amounts of data and derive valuable insights that are important for an organization. Working with large dataset along with strong analytic skills are a must for a data scientist. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-user"&gt;
  &lt;/a&gt;
  CREATING A USER
&lt;/h2&gt;

&lt;p&gt;Let us learn about creating and editing a user in MongoDB.  &lt;/p&gt;

&lt;p&gt;Users are created by a user with special permissions with the&lt;br&gt;&lt;br&gt;
&lt;code&gt;createUser&lt;/code&gt; command. You then create the user with a &lt;code&gt;username&lt;/code&gt; and the &lt;code&gt;password&lt;/code&gt;. This user will have a couple of roles or &lt;strong&gt;atleast&lt;/strong&gt; one role and each role will then contain a bunch of privileges. A user is created on the database. This does not limit the access of the user to that authentication database. But this is the database against which the user will have to authenticate. The exact rights the user has depends on the role that you have assigned to the user. &lt;/p&gt;

&lt;p&gt;If we have the need we can also &lt;code&gt;updateUser&lt;/code&gt; command, this means the admin can update the user that means for example we can use this to change the password &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongod --auth&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hpfm5QJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9no82gbbxv7hfdn6y9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hpfm5QJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9no82gbbxv7hfdn6y9j.png" alt="Image description" width="798" height="262"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;We can also make use of the command &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;db.auth("username goes here","password goes here")&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;for signing up the user. &lt;/p&gt;

&lt;p&gt;We can also connect by writing  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongo -u usernamesgoeshere -p passwordgoeshere&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;But what if we don't have a user to begin with. MongoDB has a special solution which is called the &lt;strong&gt;localhost exception&lt;/strong&gt;. More on this can be read here : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/manual/core/localhost-exception"&gt;https://docs.mongodb.com/manual/core/localhost-exception&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are allowed to create one user who then can be allowed to create more users. &lt;/p&gt;

&lt;p&gt;For this you need to switch to the &lt;code&gt;admin&lt;/code&gt; database &lt;br&gt;
and run the command &lt;/p&gt;

&lt;p&gt;&lt;code&gt;use admin&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Then create a user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alex1234&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userAdminAnyDatabase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;]})&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#built-in-roles"&gt;
  &lt;/a&gt;
  Built in Roles
&lt;/h2&gt;

&lt;p&gt;MongoDB ships with a bunch of built in roles to cover most of the &lt;br&gt;
use cases that you may require. You can also create your own roles &lt;br&gt;
but that is pure admin task. &lt;/p&gt;

&lt;p&gt;We got a typical role for the users of the database &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#database-user"&gt;
  &lt;/a&gt;
  Database user
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;read readWrite&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You also got typical admin roles like the &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dbadmin"&gt;
  &lt;/a&gt;
  dbAdmin
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useradmin"&gt;
  &lt;/a&gt;
  userAdmin
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#dbowner"&gt;
  &lt;/a&gt;
  dbOwner
&lt;/h3&gt;


&lt;h2&gt;
  &lt;a href="#all-database-roles"&gt;
  &lt;/a&gt;
  All database roles
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#readanydatabase"&gt;
  &lt;/a&gt;
  readAnyDatabase
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#readwriteanydatabase"&gt;
  &lt;/a&gt;
  readWriteAnyDatabase
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useradminanydatabase"&gt;
  &lt;/a&gt;
  userAdminAnyDatabase
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#dbadminanydatabase"&gt;
  &lt;/a&gt;
  dbAdminAnyDatabase
&lt;/h3&gt;

&lt;p&gt;Besides these roles we also have the &lt;strong&gt;cluster administration&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clusters&lt;/strong&gt; are the concept where you have multiple MongoDB servers working together. So that you can have multiple machines running MongoDB servers and store your data which can then work and scale together. And managing this cluster of servers is ofcourse a meaningful task &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#clustermanager"&gt;
  &lt;/a&gt;
  clusterManager
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#clustermonitor"&gt;
  &lt;/a&gt;
  clusterMonitor
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#hostmanager"&gt;
  &lt;/a&gt;
  hostManager
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#clusteradmin"&gt;
  &lt;/a&gt;
  clusterAdmin
&lt;/h3&gt;


&lt;h2&gt;
  &lt;a href="#backuprestore-roles"&gt;
  &lt;/a&gt;
  Backup/Restore roles
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#backup"&gt;
  &lt;/a&gt;
  backup
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#restore"&gt;
  &lt;/a&gt;
  restore
&lt;/h3&gt;


&lt;h2&gt;
  &lt;a href="#superuser-roles"&gt;
  &lt;/a&gt;
  SuperUser Roles
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#dbowneradmin"&gt;
  &lt;/a&gt;
  dbOwner(admin)
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useradminadmin"&gt;
  &lt;/a&gt;
  userAdmin(admin)
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useradminanydatabase"&gt;
  &lt;/a&gt;
  userAdminAnyDatabase
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#root-the-most-powerful-role"&gt;
  &lt;/a&gt;
  root (the most powerful role)
&lt;/h3&gt;

&lt;p&gt;root superuser can do everything &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#assigning-roles-to-users-and-databases"&gt;
  &lt;/a&gt;
  ASSIGNING ROLES TO USERS AND DATABASES
&lt;/h3&gt;

&lt;p&gt;Run this command using the credentials of the created user &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongo --authenticationDatabase admin -u usernamegoeshere -p passwordgoeshere&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;appdev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;pwd&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;roles&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readWrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Successfully added user: { "user" : "appdev", "roles" : [ "readWrite" ] }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can now authenticate in that user with the following command &lt;br&gt;
&lt;code&gt;db.auth('appdev','dev')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives 1. This 1 signal indicates that this works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-ssl-transport-encryption"&gt;
  &lt;/a&gt;
  Adding SSL Transport Encryption
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#transport-encryption"&gt;
  &lt;/a&gt;
  Transport Encryption
&lt;/h2&gt;

&lt;p&gt;We have our application and this could be Node, Django, PHP &lt;br&gt;
application that uses the MongoDB driver to communicate with &lt;br&gt;
MongoDB Server to store the data and ofcourse it is important &lt;br&gt;
that the data is encrypted whilst it is in transport so that &lt;br&gt;
someone who is spoofing our connection can not read our data. &lt;br&gt;
and MongoDB has everything for that built into it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-can-secure-our-data-whilst-it-is-own-its-way-from-client-to-the-server-"&gt;
  &lt;/a&gt;
  How we can secure our data whilst it is own its way from client to the server ?
&lt;/h2&gt;

&lt;p&gt;To encrypt the data whilst it is in transport, MongoDB uses &lt;br&gt;
&lt;strong&gt;SSL&lt;/strong&gt; or actually &lt;strong&gt;TLS&lt;/strong&gt; for encryption and uses public private key pair to decrypt this information on the server and to prove &lt;br&gt;
to the server to prove that who we are. It is secure way of &lt;br&gt;
encrypting our data and decrypting our data on the server. &lt;/p&gt;

&lt;p&gt;While its own its way it is consistently updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encryption-at-rest"&gt;
  &lt;/a&gt;
  ENCRYPTION AT REST
&lt;/h2&gt;

&lt;p&gt;The data which is stored on our MongoDB Server in a file this &lt;br&gt;
ofcourse might also be encrypted so that we can decrypt there &lt;br&gt;
two different things &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The overall storage (feature built in for enterprise versions)&lt;/li&gt;
&lt;li&gt;The thing as a developer you can do is to encrypt certain values in your code. For example, if you are storing the user password you should hash that password and not store the plain text you can go so far for all data you always have a way for encrypting that. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;So you can encrypt both your data as well as the overall file storage to achieve max security that is possible&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Here are some of the important links that you must reference to know more about Security and Authentication in MongoDB: &lt;/p&gt;

&lt;p&gt;Official "Encryption at Rest" Docs: &lt;a href="https://docs.mongodb.com/manual/core/security-encryption-at-rest/"&gt;https://docs.mongodb.com/manual/core/security-encryption-at-rest/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Security Checklist: &lt;a href="https://docs.mongodb.com/manual/administration/security-checklist/"&gt;https://docs.mongodb.com/manual/administration/security-checklist/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is SSL/ TLS? =&amp;gt; &lt;a href="https://www.acunetix.com/blog/articles/tls-security-what-is-tls-ssl-part-1/"&gt;https://www.acunetix.com/blog/articles/tls-security-what-is-tls-ssl-part-1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official MongoDB SSL Setup Docs: &lt;a href="https://docs.mongodb.com/manual/tutorial/configure-ssl/"&gt;https://docs.mongodb.com/manual/tutorial/configure-ssl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official MongoDB Users &amp;amp; Auth Docs: &lt;a href="https://docs.mongodb.com/manual/core/authentication/"&gt;https://docs.mongodb.com/manual/core/authentication/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Built-in Roles Docs: &lt;a href="https://docs.mongodb.com/manual/core/security-built-in-roles/"&gt;https://docs.mongodb.com/manual/core/security-built-in-roles/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Custom Roles Docs: &lt;a href="https://docs.mongodb.com/manual/core/security-user-defined-roles/"&gt;https://docs.mongodb.com/manual/core/security-user-defined-roles/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;⚡Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>mongodb</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Local Storage in React JS!</title>
      <author>Saleh Mubashar</author>
      <pubDate>Sat, 04 Dec 2021 16:23:22 +0000</pubDate>
      <link>https://dev.to/salehmubashar/local-storage-in-react-js-2n33</link>
      <guid>https://dev.to/salehmubashar/local-storage-in-react-js-2n33</guid>
      <description>&lt;p&gt;Hi guys!&lt;/p&gt;

&lt;p&gt;Saving user progress and any temporary information is very essential in a web application. In React JS, this can be achieved using &lt;code&gt;local Storage&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-localstorage"&gt;
  &lt;/a&gt;
  What is localStorage?
&lt;/h2&gt;

&lt;p&gt;Local Storage is a web storage object to save data on a user’s computer locally, meaning it is saved in user sessions and unlike cookies, it has no expiration date. The &lt;code&gt;localStorage()&lt;/code&gt; API allows you to access the Storage object.&lt;br&gt;
We can store all kinds of data in a storage object. It is a built in hook so &lt;strong&gt;you do not need to import anything.&lt;/strong&gt; The best and most common way is to first store data in a state and then in the storage object.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-an-empty-storage-object"&gt;
  &lt;/a&gt;
  Creating an empty Storage object
&lt;/h2&gt;

&lt;p&gt;Firstly we will create an empty storage object. I will not create an entire app in this tutorial but simply show how to use the storage object.&lt;br&gt;
We will create a simple React app and inside a file, in this case App.js, and then create function called &lt;code&gt;saveData()&lt;/code&gt;. We will run this function on a button click. I know, very simple and boing, but the objective here is to learn the localstorage api.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;saveData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;saveData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Save&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we are creating a new storage object using &lt;code&gt;setItem&lt;/code&gt;. 'Test object ' can be replaced by any string, state or variable. &lt;/p&gt;

&lt;p&gt;Now, if you click the button, the text 'Test object' will be saved. But the question is, &lt;strong&gt;how to view the saved data as a developer&lt;/strong&gt;?🤔.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-saved-data"&gt;
  &lt;/a&gt;
  Viewing saved data
&lt;/h2&gt;

&lt;p&gt;To see the data or storage object, open dev tools or inspect and go to the application tab as shown below. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2JkhPe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhaa83b5jxe1t2fxp4ro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2JkhPe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhaa83b5jxe1t2fxp4ro.png" alt="Dev tools" width="880" height="791"&gt;&lt;/a&gt;.&lt;br&gt;
Next, click on the local storage option in the left menu and click on the localhost tab. The Object &lt;code&gt;Object 1&lt;/code&gt; will be visible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OdjCL3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ivd5lio5750ai4wfewk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OdjCL3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ivd5lio5750ai4wfewk.png" alt="Object" width="880" height="790"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Note!&lt;/u&gt;&lt;/strong&gt;: never save sensitive or important info here. It is only used to save temporary info or user progress not things like passwords.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#saving-multiple-items"&gt;
  &lt;/a&gt;
  Saving multiple items.
&lt;/h3&gt;

&lt;p&gt;We can save multiple items as separate objects or a single array in one object. However, always remember to convert an array to a string using &lt;code&gt;JSON.stringify()&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#retrieving-stored-data"&gt;
  &lt;/a&gt;
  Retrieving stored data
&lt;/h2&gt;

&lt;p&gt;We can get the saved data or use it using &lt;code&gt;getItem()&lt;/code&gt;. In the below example, we will display the saved data using a second button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//save data&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;saveData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//get data&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Object 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;saveData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Save&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/br&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Display&lt;/span&gt; &lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deleting-storage-objects"&gt;
  &lt;/a&gt;
  Deleting Storage Objects
&lt;/h2&gt;

&lt;p&gt;Storage object are never deleted automatically and must be done by either of the 2 ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right clicking on the object in the console and deleting it&lt;/li&gt;
&lt;li&gt;Create a delete function in your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the &lt;code&gt;localStorage.removeItem()&lt;/code&gt; method to delete and object or its contents through your code by a user event, for example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deleteData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Object 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thank you all for reading this post!&lt;br&gt;
I hope you all found the video useful.&lt;br&gt;
Check out my other &lt;a href="https://discover.hubpages.com/technology/React-Router-V6-The-Main-Changes"&gt;tutorials&lt;/a&gt; on &lt;a href="https://hubpages.com/@salehmubashar"&gt;hubpages&lt;/a&gt;.&lt;br&gt;
If you like my work, you can buy me a coffee and share your thoughts 🎉☕&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/salehmubashar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time!&lt;br&gt;
Cheers! 🎉&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
