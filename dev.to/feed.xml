<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Collection of codepen CSS Fire Animation - 2021</title>
      <author>front-end.codes</author>
      <pubDate>Thu, 16 Dec 2021 09:13:47 +0000</pubDate>
      <link>https://dev.to/codesfrontend/collection-of-codepen-css-fire-animation-2021-2348</link>
      <guid>https://dev.to/codesfrontend/collection-of-codepen-css-fire-animation-2021-2348</guid>
      <description>&lt;p&gt;Free &lt;a href="https://www.front-end.codes/2021/04/css-fire-animation-with-realistic.html"&gt;CSS Fire Animation With Realistic Effect&lt;/a&gt; examples&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bYzUA-NK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nhy1hc3guayb5eo619p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYzUA-NK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nhy1hc3guayb5eo619p.gif" alt="Image description" width="880" height="429"&gt;&lt;/a&gt;&lt;br&gt;
Preload page - fire animation&lt;br&gt;
Creator - [meow, meow]&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/i_SKY/pen/XbwxBJ"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VffuxF25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbtwjgvp3ddysp85e6ci.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VffuxF25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbtwjgvp3ddysp85e6ci.gif" alt="Image description" width="880" height="412"&gt;&lt;/a&gt;&lt;br&gt;
Fire&lt;br&gt;
Creator - Brian Bravo&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/BrianBravo/pen/JaFfz"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k2CDYz0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qut6753ac5ytha0bjst9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2CDYz0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qut6753ac5ytha0bjst9.gif" alt="Image description" width="880" height="419"&gt;&lt;/a&gt;&lt;br&gt;
Fire Buttons&lt;br&gt;
Creator - Lia Tsernant&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/LiaTsernant/details/KKvMyLp"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUJ_EPAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zscd2i7y3rili0oa09g8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUJ_EPAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zscd2i7y3rili0oa09g8.gif" alt="Image description" width="880" height="419"&gt;&lt;/a&gt;&lt;br&gt;
Text on fire&lt;br&gt;
Creator - Fabio Ottaviani&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/supah/pen/MWvOOrY"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ewbkEHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g6zgcp15h236zy7sgal.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ewbkEHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g6zgcp15h236zy7sgal.gif" alt="Image description" width="880" height="419"&gt;&lt;/a&gt;&lt;br&gt;
Sparks Float Up From A Blazing Fire&lt;br&gt;
Creator - Jess&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/RebelJess/pen/BaZVGLq"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t41EJDqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibtdpi9zyppc17r56u0l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t41EJDqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibtdpi9zyppc17r56u0l.gif" alt="Image description" width="880" height="419"&gt;&lt;/a&gt;&lt;br&gt;
literally lit Fire elements&lt;br&gt;
Creator - Manan Tank&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/MananTank/pen/MWmaWwQ"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B7s-O3Ui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75uob9vcknj05izwwd7q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7s-O3Ui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75uob9vcknj05izwwd7q.gif" alt="Image description" width="880" height="419"&gt;&lt;/a&gt;&lt;br&gt;
Fire - Congratulations&lt;br&gt;
Creator - MOHAN KHADKA&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/khadkamhn/pen/MWmWoYx"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IKCHGIJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if1xkp6qcvf2nvucgkrw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IKCHGIJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if1xkp6qcvf2nvucgkrw.gif" alt="Image description" width="880" height="582"&gt;&lt;/a&gt;&lt;br&gt;
Fire Diya&lt;br&gt;
Creator - Gajanan Patil&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/gajananpp/pen/mdEvBoL"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---nJzcB4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s8enn0kt3vz9ibt4x4a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---nJzcB4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s8enn0kt3vz9ibt4x4a.gif" alt="Image description" width="880" height="527"&gt;&lt;/a&gt;&lt;br&gt;
CSS - Fire&lt;br&gt;
Creator - RayPan&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/nocni_sovac/pen/PoZVPRz"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e_6mp6pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y368w3v5oe36sq14kfvc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e_6mp6pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y368w3v5oe36sq14kfvc.gif" alt="Image description" width="880" height="549"&gt;&lt;/a&gt;&lt;br&gt;
Multicolour fire camp&lt;br&gt;
Creator - Yoann&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/yoann-b/pen/JjdEqvL"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l30jFe3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39du22aca617o349vic5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l30jFe3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39du22aca617o349vic5.gif" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;br&gt;
Nightscape With Pug and Stylus&lt;br&gt;
Creator - Ruhan tai&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/ruhantai/pen/KEEqxx"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EigDWZlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c68fov2c45dwtllgfbio.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EigDWZlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c68fov2c45dwtllgfbio.gif" alt="Image description" width="880" height="438"&gt;&lt;/a&gt;&lt;br&gt;
SVG + GSAP 3 fire icon animation&lt;br&gt;
Creator - Ksenia Kondrashova&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/ksenia-k/pen/moYyMw"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9vh4IvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/188d8fl5vv7bkxj4bp4j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9vh4IvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/188d8fl5vv7bkxj4bp4j.gif" alt="Image description" width="880" height="477"&gt;&lt;/a&gt;&lt;br&gt;
SVG Animated Fire&lt;br&gt;
Creator - Brendan Carpenter&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/bcarpenter/pen/qvbEpz"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o_nm0vk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzvpljmopiu66j6lg0al.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_nm0vk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzvpljmopiu66j6lg0al.gif" alt="Image description" width="880" height="477"&gt;&lt;/a&gt;&lt;br&gt;
Codevember Fire&lt;br&gt;
Creator - Romina&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/RominaMartin/pen/KrqMVw"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fhavL3AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1o10idodkbwdq64pkuj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhavL3AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1o10idodkbwdq64pkuj.gif" alt="Image description" width="880" height="477"&gt;&lt;/a&gt;&lt;br&gt;
Diya on Fire&lt;br&gt;
Creator - Rajat Kanti Nandi&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/rajatkantinandi/pen/xQdJoy"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ne0DCMiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez2uq4mm4vfmexua4vto.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ne0DCMiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez2uq4mm4vfmexua4vto.gif" alt="Image description" width="880" height="477"&gt;&lt;/a&gt;&lt;br&gt;
SVG Fire 🔥&lt;br&gt;
Creator - Steve Gardner&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/ste-vg/pen/oZXmdL"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLkvCoNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2e5zad9quc5vmyuopq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLkvCoNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2e5zad9quc5vmyuopq.gif" alt="Image description" width="880" height="477"&gt;&lt;/a&gt;&lt;br&gt;
CSS3 fire animation&lt;br&gt;
Creator - RandN&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/RandN/pen/JXwRpr"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jf5uXEh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4wgmhiv2izzhrf6jf0m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jf5uXEh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4wgmhiv2izzhrf6jf0m.gif" alt="Image description" width="880" height="477"&gt;&lt;/a&gt;&lt;br&gt;
Burning Button (Chrome and Firefox only)&lt;br&gt;
Creator - Jon Kantner&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/jkantner/pen/eYEwWNY"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more than &lt;a href="https://www.front-end.codes/2021/04/css-fire-animation-with-realistic.html"&gt;30+ Collection of CSS Fire Animation&lt;/a&gt; Source blog front-end.codes/2021/04/css-fire-animation-with-realistic.html&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>opensource</category>
    </item>
    <item>
      <title>FastWSGI: An ultra-fast WSGI server for Python</title>
      <author>James Roberts</author>
      <pubDate>Thu, 16 Dec 2021 09:01:57 +0000</pubDate>
      <link>https://dev.to/jamesroberts/fastwsgi-an-ultra-fast-wsgi-server-for-python-5dmi</link>
      <guid>https://dev.to/jamesroberts/fastwsgi-an-ultra-fast-wsgi-server-for-python-5dmi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#fastwsgi"&gt;
  &lt;/a&gt;
  FastWSGI
&lt;/h2&gt;

&lt;p&gt;I've been developing a Python extension, written in C, that provides users with an ultra-fast WSGI server that they can run their WSGI applications on (Flask, Django and other WSGI apps).&lt;/p&gt;

&lt;p&gt;I have also recently managed to get it working on multiple platforms (Linux, MacOS and Windows).&lt;/p&gt;

&lt;p&gt;If you want to significantly speed up your WSGI based applications, check it out!&lt;/p&gt;

&lt;p&gt;It is still in early development at the moment. Any feedback would be greatly appreciated!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jamesroberts/fastwsgi"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/fastwsgi/"&gt;Pypi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jamesroberts/fastwsgi/blob/main/performance_benchmarks/PERFORMANCE.md"&gt;Performance benchmarks&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>performance</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to easily switch between different versions of Nodejs on your system.
</title>
      <author>Nmurgor</author>
      <pubDate>Thu, 16 Dec 2021 09:01:18 +0000</pubDate>
      <link>https://dev.to/nmurgor/how-to-easily-switch-between-different-versions-of-nodejs-on-your-system-7e8</link>
      <guid>https://dev.to/nmurgor/how-to-easily-switch-between-different-versions-of-nodejs-on-your-system-7e8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Easily switch between different versions of Nodejs on your system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this blog article we'll learn how to switch to a default version when using &lt;code&gt;nvm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NVM is a tool that handles what versions of Nodejs you can use. Let’s say one’s working on a cutting edge library that requires the latest version, they would switch/install a version of Nodejs that is compatible with the library.&lt;/p&gt;

&lt;p&gt;Scenario two, one is working on a project that requires an older version of Nodejs, let's say &lt;code&gt;version 8.0.0.&lt;/code&gt; Installing and reinstalling Nodejs becomes hectic and cumbersome. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt; makes handling versions of Nodejs rather painless.&lt;/p&gt;

&lt;p&gt;NVM, (Node Version Manager) enables one to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install different versions of Nodejs&lt;/li&gt;
&lt;li&gt;Switch to different versions of Nodejs&lt;/li&gt;
&lt;li&gt;Set a default Nodejs version from the installed versions&lt;/li&gt;
&lt;li&gt;Remove installed versions of Nodejs&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#install-nvm"&gt;
  &lt;/a&gt;
  Install nvm
&lt;/h3&gt;

&lt;p&gt;This assumes that &lt;code&gt;nvm&lt;/code&gt; installed already, if not, install &lt;code&gt;nvm&lt;/code&gt; by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# install script for nvm&lt;/span&gt;
curl &lt;span class="nt"&gt;-o-&lt;/span&gt; https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Curl installation on your system is also required. Curl enables one to make http request from the commandline.&lt;/p&gt;

&lt;p&gt;After downloading and running the &lt;code&gt;bash&lt;/code&gt; script, set your profile file &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, &lt;code&gt;~/.profile&lt;/code&gt;, or &lt;code&gt;~/.bashrc&lt;/code&gt; so that nvm is available system-wide.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;NVM_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; %s &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.nvm"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; %s &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/nvm"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NVM_DIR&lt;/span&gt;&lt;span class="s2"&gt;/nvm.sh"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NVM_DIR&lt;/span&gt;&lt;span class="s2"&gt;/nvm.sh"&lt;/span&gt; &lt;span class="c"&gt;# This loads nvm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check if &lt;code&gt;nvm&lt;/code&gt; installed correctly by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="c"&gt;# prints nvm help menu for various options&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="/static/img/default-node-version.png" class="article-body-image-wrapper"&gt;&lt;img src="/static/img/default-node-version.png" alt="terminal screenshot showing nvm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-a-different-version-of-nodejs"&gt;
  &lt;/a&gt;
  Install a different version of nodejs
&lt;/h3&gt;

&lt;p&gt;To install a different node version using nvm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nb"&gt;install &lt;/span&gt;14.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NVM handles the installation of the Nodejs version for you, afterwards , you may use this version when needed or as needed:&lt;/p&gt;

&lt;p&gt;To use the Nodejs version from above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm use 14.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command tells NVM to switch Nodejs to this version, the changes apply system-wide which is kinda cool, isn't it?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#set-a-default-version-of-nodejs-using-nvm"&gt;
  &lt;/a&gt;
  Set a default version of Nodejs using NVM
&lt;/h4&gt;

&lt;p&gt;To set a default version of Nodejs using nvm, use this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nb"&gt;alias &lt;/span&gt;defaut &amp;lt;your_nodejs_default_version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To switch to version we installed above &lt;code&gt;14.0.0&lt;/code&gt;, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nb"&gt;alias &lt;/span&gt;default 14.0.0
node &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="c"&gt;# prints 14.0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;NVM makes handling nodejs versions on your system rather painless and easy especially if you heavily use Nodejs as a tooling for your frontend work flow.&lt;/p&gt;

&lt;p&gt;NVM offers more options such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uninstall a Nodejs version&lt;/li&gt;
&lt;li&gt;Switch to a Nodejs version, &lt;code&gt;nvm use &amp;lt;nodejs_version&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further refference:&lt;br&gt;
&lt;a href="https://github.com/nvm-sh/nvm"&gt;https://github.com/nvm-sh/nvm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Cassette: Structured async meetings for remote teams. </title>
      <author>Jorge Avila</author>
      <pubDate>Thu, 16 Dec 2021 08:36:59 +0000</pubDate>
      <link>https://dev.to/jorgeavila_ss/cassette-structured-async-meetings-for-remote-teams-4lkf</link>
      <guid>https://dev.to/jorgeavila_ss/cassette-structured-async-meetings-for-remote-teams-4lkf</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cassette&lt;/strong&gt; is a free multiplatform app created to disrupt the broken meeting culture using voice notes. We believe that asynchronous work should unlock your schedule and bring back your own time. &lt;strong&gt;Cassette provides you an easy way to produce voice messages and consume them efficiently&lt;/strong&gt;. It enhances meetings by adding structure such as agenda, due date and reactions.&lt;/p&gt;

&lt;p&gt;We are releasing our first public version and we are looking forward to having you and your teammates onboard. We have been using Cassette during the last months and have replaced ALL our reporting meetings (daily standups, weekly sync, status report …) so we have unlocked our time to have more focus and be more productive. Now we also do more in-call time for informal talks and team building. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://cassetteapp.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=launch-v1"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We hope you like it.&lt;/p&gt;

</description>
      <category>meeting</category>
      <category>async</category>
    </item>
    <item>
      <title>How could I add regex (regular expression) support to ParseJS using my current method of finding tokens?</title>
      <author>Calin Baenen</author>
      <pubDate>Thu, 16 Dec 2021 08:24:11 +0000</pubDate>
      <link>https://dev.to/baenencalin/how-could-i-add-regex-regular-expression-support-to-parsejs-using-my-current-method-of-finding-tokens-154a</link>
      <guid>https://dev.to/baenencalin/how-could-i-add-regex-regular-expression-support-to-parsejs-using-my-current-method-of-finding-tokens-154a</guid>
      <description>&lt;p&gt;So, ParseJS is a tokenization library I made for JavaScript.&lt;br&gt;
It's core feature is to sort a string into an array of characters (&lt;code&gt;string&lt;/code&gt;s whose length is strictly limited to one (1)) and symbols, where each symbol is a stand-in for a token. (Tokens are &lt;code&gt;symbol&lt;/code&gt;s so you can easily tell between a token and a character.)&lt;/p&gt;

&lt;p&gt;Anyways. Where am I going with this?&lt;br&gt;
Well, ParseJS is &lt;em&gt;&lt;strong&gt;good&lt;/strong&gt;&lt;/em&gt;, but it's not &lt;em&gt;&lt;strong&gt;great&lt;/strong&gt;&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;You can statically parse tokens, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Parameters: (str:string, toks:string[])&lt;/span&gt;
&lt;span class="nx"&gt;parse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test12 test1 test2 test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and it will reliably produce:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;BUT- there is no way of creating abstract groups of tokens (e.g. like how variable names can be practically anything, but the language doesn't name them for you).&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;What I have:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;parse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class Test: end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; [Sym(class), ' ', 'T', 'e', ..., Sym(:), ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;What I want:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;parse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class Test: end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;\W]\w&lt;/span&gt;&lt;span class="sr"&gt;+]/&lt;/span&gt; &lt;span class="c1"&gt;// 'g' flag added automatically.&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; [Sym(class), ' ', Sym(Test), Sym(:), ' ', Sym(end)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The goal: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add regex support to allow abstract token groups to exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How I find tokens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loop through each string in &lt;code&gt;toks&lt;/code&gt; and collect the first character of each string in &lt;code&gt;epl&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Loop through each character of &lt;code&gt;str&lt;/code&gt; as &lt;code&gt;c&lt;/code&gt;, and if &lt;code&gt;c&lt;/code&gt; is in &lt;code&gt;epl&lt;/code&gt;, slice the next few characters ahead to see if a valid keyword exists.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The challenge(s):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unlike strings, the length that a regex represents can be variable and would need to be computed.&lt;/li&gt;
&lt;li&gt;The way I check for tokens is by seeing if the character of a keyword exists. - But, I can't exactly do that, since there's no subscript operator, or way to get the character (or potential characters) in a regex.&lt;/li&gt;
&lt;li&gt;I slice the substring to test based on the length of the keywords that exist. But, since I can't get the length(s) that a regex could be, I can't compute how big of a substring I need to slice to test.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>help</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Make button transparent</title>
      <author>Rohit Sharma</author>
      <pubDate>Thu, 16 Dec 2021 07:24:45 +0000</pubDate>
      <link>https://dev.to/devrohit0/create-a-transparent-button-bd1</link>
      <guid>https://dev.to/devrohit0/create-a-transparent-button-bd1</guid>
      <description>&lt;p&gt;Hello Everyone, In this post we're going to discuss How we can create a button with transparent background. Yesterday, I created a Linktree like website for my personal use. So, when I'm adding buttons to it, the button background was not looking cool. So, I decided to remove the background of buttons.&lt;/p&gt;

&lt;p&gt;You can also check out my&lt;a href="https://konnect-rohit.netlify.app/"&gt; website&lt;/a&gt; for better understanding. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0kdJNW0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83ybkmmuee62zw4rtdtc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0kdJNW0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83ybkmmuee62zw4rtdtc.png" alt="Final result" width="447" height="796"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;HTML part is simple we just need a button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;First of all we need to add a background image to our parent &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; (in my case it is &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;). Then &lt;code&gt;background-repeat:no-repeat&lt;/code&gt; and &lt;code&gt;background-size:cover&lt;/code&gt;. So, this makes sure that our background-image cover the whole &lt;code&gt;body&lt;/code&gt; area.&lt;/p&gt;

&lt;p&gt;Now, style the &lt;code&gt;button&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, when we set &lt;code&gt;background:transparent&lt;/code&gt; the image that we used in&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; becomes visible through button but there is border around the button and we also remove it by using property &lt;code&gt;border:none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's it for CSS part. We created our desired button. Now you can add some cool hover effect to make it more attractive(like neon effect).&lt;/p&gt;

&lt;p&gt;If you love it♥ then show some love.&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/devrohit"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gB5HhZkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-blue.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Develop a hangman game in Python in just 5 minutes</title>
      <author>Arjun Praveen</author>
      <pubDate>Thu, 16 Dec 2021 06:14:30 +0000</pubDate>
      <link>https://dev.to/arjunpraveen2008/develop-a-hangman-game-in-python-in-just-5-minutes-4c3n</link>
      <guid>https://dev.to/arjunpraveen2008/develop-a-hangman-game-in-python-in-just-5-minutes-4c3n</guid>
      <description>&lt;p&gt;Hello, world! In this post, I will walk you through a simple &lt;em&gt;hangman&lt;/em&gt; game in Python. This post already assumes that you have prior programming experience in Python. If not, a great way to get started is via &lt;a href="https://www.w3schools.com/python/default.asp"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, this is isn't a GUI based game - just a terminal based I/O game that can improve your &lt;em&gt;pythonic&lt;/em&gt; knowledge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-hangman-game"&gt;
  &lt;/a&gt;
  What's a hangman game?
&lt;/h2&gt;

&lt;p&gt;Hangman is a paper and pencil guessing game for two or more players. One player thinks of a word, phrase, or sentence, and the other tries to guess it by suggesting letters within a certain number of guesses. (Source: &lt;a href="https://en.wikipedia.org/wiki/Hangman_(game)"&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-the-plan"&gt;
  &lt;/a&gt;
  So, what's the plan?
&lt;/h2&gt;

&lt;p&gt;Now that you know what's Hangman, let me provide you with a fine pseudocode for the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Pick a random word from a large dataset.
initialize points to 0
while True:
    set POSSIBLE_ALPHABETS = list of "abcdefghijklmnopqrstuvwxyz"
    set RANDOM_ALPHABETS = pick 3 random alphabets from POSSIBLE_ALPHABETS
    for ALPHABET in RANDOM_ALPHABETS:
        replace ALPHABET from the random word with a "_"

    print the random word (after replacement of alphabets)
    take input from the user as ANSWER

    if ANSWER is equal to the random word:
        #Hurray!
        increment points by 1
    else:
        #Alas!
        print the total points
        break
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be the infrastructure of our game - feel free to change or modify this pseudocode according to your means.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pip-requirements"&gt;
  &lt;/a&gt;
  Pip requirements
&lt;/h2&gt;

&lt;p&gt;Install the following packages: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;colorama (optional)&lt;/li&gt;
&lt;li&gt;nltk&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Alright!&lt;/strong&gt; With a nice and firm pseudocode, let's get into the actual code:&lt;/p&gt;

&lt;p&gt;First of all, we want to import all modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;colorama&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brown&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Here I'm using brown dataset from nltk.corpus which is a large collection of words - alternatively, you can replace the usage of Brown with your own dataset.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we want to get all the words of the Brown dataset and put it in a variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: If you are using your own dataset, try this: &lt;code&gt;word_list = ['apple', 'computer', 'banana', 'soap', 'snake', ...]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let's initialize a &lt;em&gt;points&lt;/em&gt; variable and set its initial value to zero &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I came up with an idea of using "Colorama" which can provide you with colored output on the terminal window. It is optional, and I did this to make the output a bit nice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autoreset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we need to loop our game till the player loses (so that we can increment the points), let's wrap the upcoming lines of code with an infinite loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#rest of the code goes here.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I don't why I did this, but I re-initialized the word_list with another variable &lt;code&gt;words&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, this is the time we need a list of all possible alphabets (from &lt;strong&gt;A&lt;/strong&gt; to &lt;strong&gt;Z&lt;/strong&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;possible_alphabets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"abcdefghijklmnopqrstuvwxyz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;old_word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: I also added a variable &lt;code&gt;old_word&lt;/code&gt; to choose a random word from &lt;code&gt;word_list&lt;/code&gt; - I named it like that, just so that I can differentiate it from the word after that it has been modified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, add these lines of code to your existing Python code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;alphabets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#initialize alphabets list
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;alphabets&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_alphabets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I did this so that I have an &lt;code&gt;alphabets&lt;/code&gt; list, and that I append 3 random letters to the &lt;code&gt;alphabets&lt;/code&gt; list from the &lt;code&gt;possible_alphabets&lt;/code&gt; list (as per the pseudocode we designed before).&lt;/p&gt;

&lt;p&gt;Now that we have that, let's replace all these random alphabets from the &lt;code&gt;old_word&lt;/code&gt; with an underscore, so that we could make our guessable string (Eg: "developer" as "de_e_ope_")&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alphabets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old_word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Cool!&lt;/strong&gt; Everything seems to be right till now; let's start getting the user input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"_"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#additional error checking
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#printing the word with underscore
&lt;/span&gt;    &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'word: '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, as a conslusion, add these lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;old_word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'That&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s"&gt;s correct! Total points: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CYAN&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Sorry, but you lost. (The actual word was &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;old_word&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WHITE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'------GAME OVER------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Total points: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CYAN&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We finally checked whether the user input was the same as of the original word, and if it was, we incremented the points by 1. If it wasn't, we then broke out of the loop, saying that the game was over.&lt;/p&gt;

&lt;p&gt;In a nutshell (for lazy developers):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;colorama&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brown&lt;/span&gt;

&lt;span class="n"&gt;word_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#word_set = set(word_list)
&lt;/span&gt;
&lt;span class="c1"&gt;#print(random.choice(word_list))
&lt;/span&gt;
&lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autoreset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_list&lt;/span&gt;

    &lt;span class="n"&gt;possible_alphabets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"abcdefghijklmnopqrstuvwxyz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;old_word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;alphabets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;alphabets&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_alphabets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alphabets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old_word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"_"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'word: '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;old_word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'That&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s"&gt;s correct! Total points: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CYAN&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Sorry, but you lost. (The actual word was &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;old_word&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WHITE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'------GAME OVER------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Total points: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CYAN&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;break&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the code, and see what you get!&lt;/p&gt;

&lt;p&gt;This was just a beginning; here's an idea for you to make our project more interesting: why not create a GUI for the same?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Having any doubts or queries regarding the topic? Feel free to mention it in the comments below and I will try my best to respond to you!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Python is so amazing that it is meant for any branches of computer science. It's way of implementing algorithms in easier syntaxes makes it unchallenging to execute any plan.&lt;/p&gt;

&lt;p&gt;If you liked the project, give it a thumbs up 👍, so that I can make cooler projects like this - till then, see you next time!&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 Ways to Sync a Forked Repository on GitHub AUTOMATICALLY</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 16 Dec 2021 06:09:48 +0000</pubDate>
      <link>https://dev.to/n3wt0n/3-ways-to-sync-a-forked-repository-on-github-automatically-cfd</link>
      <guid>https://dev.to/n3wt0n/3-ways-to-sync-a-forked-repository-on-github-automatically-cfd</guid>
      <description>&lt;p&gt;Keeping your forked repo in sync with the upstream one is something tedious, and to do it usually we have to use the command line and some git command. &lt;/p&gt;

&lt;p&gt;But today I have for you &lt;strong&gt;3 ways you can make that simpler&lt;/strong&gt; and much less time consuming, and even synchronize them &lt;strong&gt;automatically&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VOakLctEC2Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/VOakLctEC2Q"&gt;Link to the video: https://youtu.be/VOakLctEC2Q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-sync-from-the-ui"&gt;
  &lt;/a&gt;
  1. Sync from the UI
&lt;/h3&gt;

&lt;p&gt;Right, so the first way you can easily synchronize your forked repo is using the feature GitHub has made recently available &lt;strong&gt;directly in the UI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can just go to the main page of your repo, in the Code Section, and next to the indicator that says if your branch is ahead or behind the source repo, you now have this "Fetch Upstream" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0T_YaKl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/863ca9tr81krdu01r2ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0T_YaKl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/863ca9tr81krdu01r2ag.png" alt="Automatic Fork Sync UI" width="880" height="242"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on that you have the possibility to &lt;strong&gt;compare&lt;/strong&gt; the changes made in the source repo with the ones made in your forked repo, and also to &lt;strong&gt;automatically fetch and merge&lt;/strong&gt; them into your repo.&lt;/p&gt;

&lt;p&gt;If the changes from the upstream repository cause conflicts, GitHub will prompt you to create a pull request to resolve the conflicts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/VOakLctEC2Q?t=26"&gt;Watch the whole demo here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-the-new-api"&gt;
  &lt;/a&gt;
  2. The new API
&lt;/h3&gt;

&lt;p&gt;Next method I have for you to synchronize your forked repo with the upstream one requires a little more setup, but then it will allow you to keep the repos in sync &lt;strong&gt;automatically&lt;/strong&gt;. I'm talking about using the new GitHub &lt;code&gt;merge-upstream&lt;/code&gt; API. This way is much more flexible than the previous one. &lt;/p&gt;

&lt;p&gt;Using the API, in fact, you can start the synchronization from many different platforms: your CLI, an application you develop to apply governance to your repos, and so on so forth. And as such it will also enable you to automate the whole process, for example using a cron job or a scheduled operation.&lt;/p&gt;

&lt;p&gt;For this example I'm gonna use &lt;code&gt;curl&lt;/code&gt; to invoke the API.&lt;/p&gt;

&lt;p&gt;First thing to notice is that this will be a &lt;strong&gt;POST&lt;/strong&gt; operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-X&lt;/span&gt; POST 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'd need to specify the &lt;em&gt;GitHub APIs version&lt;/em&gt; we are targeting, in this case let's use the v3. You need to pass that in a header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Accept: application/vnd.github.v3+json"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, &lt;strong&gt;authorization&lt;/strong&gt;. The &lt;code&gt;merge-upstream&lt;/code&gt; API requires authentication, of course otherwise everyone would be able to merge somebody else's repos :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: token YOUR_GITHUB_PAT"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since GitHub is deprecating the use of username and password for API authentication, I'm using a Personal Access Token instead. And this needs to be passed as a header as well.&lt;/p&gt;

&lt;p&gt;To know more about how you can authenticate to the GitHub's APIs, check &lt;a href="https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api#authentication"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And &lt;a href="https://youtu.be/SzrETQdGzBM"&gt;check this out&lt;/a&gt; to know how to create a PAT in GitHub.&lt;/p&gt;

&lt;p&gt;Then we need to pass the &lt;strong&gt;url of the API&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;https://api.github.com/repos/USER_OR_ORG/REPO_NAME/merge-upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is pretty self-explanatory, you just need the name of your forked repo, and the username or organization name that owns it.&lt;/p&gt;

&lt;p&gt;Last step, we need to tell GitHub what &lt;strong&gt;branch&lt;/strong&gt; we want to synchronize with the upstream repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"branch":"main"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example I'm telling the API I want to sync the &lt;code&gt;main&lt;/code&gt; branch but you can specify any branch which is present in both the upstream and the forked repos.&lt;/p&gt;

&lt;p&gt;This is how the complete API call looks when invoked using &lt;code&gt;curl&lt;/code&gt;, using my user account &lt;code&gt;n3wt0n&lt;/code&gt; and the repo &lt;code&gt;openhack-devops-team&lt;/code&gt; which I've forked a while back from Microsoft:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Accept: application/vnd.github.v3+json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: token PAT_REMOVED_FOR_SECURITY_REASONS"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  https://api.github.com/repos/n3wt0n/openhack-devops-team/merge-upstream &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"branch":"main"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything goes well, and the sync is &lt;strong&gt;successful&lt;/strong&gt;, we will see a message like &lt;code&gt;Status: 200 OK&lt;/code&gt; with a response which will give you all the details of the operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Successfully fetched and fast-forwarded from upstream defunkt:main"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"merge_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"fast-forward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"base_branch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"defunkt:main"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If instead there are &lt;strong&gt;conflicts&lt;/strong&gt;, the API will return &lt;code&gt;Status: 409 Conflict&lt;/code&gt; and you will need to solve the conflicts manually before merge.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/VOakLctEC2Q?t=64"&gt;Watch the whole demo here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-using-github-actions"&gt;
  &lt;/a&gt;
  3. Using GitHub Actions
&lt;/h3&gt;

&lt;p&gt;The final method I have for you behind the scenes still uses the new API we have just seen, but it &lt;strong&gt;abstracts&lt;/strong&gt; it to the user making it much easier to use and to automate. So much so that I can say this is my favorite one, also because &lt;strong&gt;it uses GitHub Actions&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;There are just a few actions that allow you to sync your forked repos, but &lt;a href="https://github.com/marketplace/actions/sync-and-merge-upstream-repository-with-your-current-repository"&gt;this one&lt;/a&gt; from &lt;a href="https://github.com/dabreadman"&gt;dabreadman&lt;/a&gt; is my favorite because it allows you to use &lt;strong&gt;GITHUB_TOKEN&lt;/strong&gt; rather than your PAT.&lt;/p&gt;

&lt;p&gt;The action is &lt;strong&gt;fully configurable&lt;/strong&gt; but the most important parts are the following ones:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sync and merge upstream repository with your current repository&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dabreadman/sync-upstream-repo@v1.0.0.b&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# URL of gitHub public upstream repo&lt;/span&gt;
    &lt;span class="na"&gt;upstream_repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://github.com/actions/starter-workflows.git"&lt;/span&gt;
    &lt;span class="c1"&gt;# Branch to merge from upstream (defaults to downstream branch)&lt;/span&gt;
    &lt;span class="na"&gt;upstream_branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="c1"&gt;# Branch to merge into downstream&lt;/span&gt;
    &lt;span class="na"&gt;downstream_branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
    &lt;span class="c1"&gt;# GitHub Bot token&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The actions fields are self-explanatory. The minimum information you need to pass to the action is the original (upstream) repo url you want to sync from, the branch in your forked repo you want to sync to, and the token.&lt;/p&gt;

&lt;p&gt;In my case I like to have this run on a schedule, so my repo should be always in sync with the upstream one (unless there are conflicts):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;13&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think it should be now clearer why this is my favorite way to sync a forked repo, and also why it's usually my recommendation.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/VOakLctEC2Q?t=428"&gt;Watch the whole demo here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Of course if you have to sync just once in a while, using the UI is more than enough. And if you have complex requirements for busy repos or custom apps the API is the way to go. &lt;/p&gt;

&lt;p&gt;But this last one using GitHub Actions is for me &lt;strong&gt;the sweet spot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below &lt;strong&gt;how you synchronize your forked repos&lt;/strong&gt; to their upstreams, and if are going to change now that we have this other options.&lt;/p&gt;

&lt;p&gt;Also, you may want to check out &lt;a href="https://youtu.be/msCWg2F4sck"&gt;this video here&lt;/a&gt;, where I talk about using GitHub Actions to &lt;strong&gt;automate everything&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VOakLctEC2Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>fork</category>
      <category>devops</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Six Angular Best Practices You need to apply to make your App perform at its best!

</title>
      <author>Arohi7892</author>
      <pubDate>Thu, 16 Dec 2021 05:51:34 +0000</pubDate>
      <link>https://dev.to/arohi/six-angular-best-practices-you-need-to-apply-to-make-your-app-perform-at-its-best-1ka2</link>
      <guid>https://dev.to/arohi/six-angular-best-practices-you-need-to-apply-to-make-your-app-perform-at-its-best-1ka2</guid>
      <description>&lt;p&gt;When you want to build robust applications that are content-heavy and complex in terms of size and functionalities, which ultimately can affect the performance of an Angular application, you must make the development process as efficient as possible to get the optimum advantage of this robust front-end technology. &lt;/p&gt;

&lt;p&gt;However, as it is said a ship cant sail smoothly forever&lt;/p&gt;

&lt;p&gt;When such a performance crisis hits hard, there are few actions that project managers tend to run to. However, it is not always an effective practice that one should do. Thatswhy, you need to approach the solution beforehand the error happens. And &lt;strong&gt;Angular App Optimisation&lt;/strong&gt; would be the first step towards enhancing the overall performance of your Angular App.&lt;/p&gt;

&lt;p&gt;This way, you will save your web application from going through any such malfunctioning in the first place. To get a headstart over this, take some preventive measures, and having said that, optimisation of your app performance would be the first step that you will need to begin with&lt;/p&gt;

&lt;p&gt;By performing the performance quality check, one can find several problems faced by the majority of the Angular community members. For instance,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Real-time data stream causing unexpected errors&lt;/li&gt;
&lt;li&gt;Periodic slowdown&lt;/li&gt;
&lt;li&gt;Unexpected page crash&lt;/li&gt;
&lt;li&gt;Slow page response&lt;/li&gt;
&lt;li&gt;Unnecessary server usage&lt;/li&gt;
&lt;li&gt;Not getting results for a short period from the migrated technology.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to avoid such problems, try implementing below Angular performance best practices.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_bf_a9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxu04jo7u2qsmuaj02ek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_bf_a9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxu04jo7u2qsmuaj02ek.png" alt="Angular Best Practices" width="750" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#runtime-performance-optimisation"&gt;
  &lt;/a&gt;
  Run-time Performance Optimisation
&lt;/h2&gt;

&lt;p&gt;As an &lt;em&gt;Angular Developer&lt;/em&gt;, you can take advantage of many dev tools in order to evaluate the performance of the web application or the page. These tools analyse idle time, application responsiveness, and performing issues in dynamic levels.  &lt;/p&gt;

&lt;p&gt;Although, to tweak some major performance issues and basic shortcomings, you can take certain steps like change detections, OnPush immutability, and try using Angular pipes mechanism instead of using methods. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aot-compilation"&gt;
  &lt;/a&gt;
  AoT Compilation
&lt;/h2&gt;

&lt;p&gt;Utilizing AoT Compilation which is vastly known as Ahead-of-Time compilation, significantly affects the total requirement to bootstrap your web application. &lt;/p&gt;

&lt;p&gt;AoT Compiler basically pre-compiles the transcript code and HTML before the browser downloads it, which ultimately gives a significant amount of boost to your app performance.&lt;/p&gt;

&lt;p&gt;The compiled version of the app renders the rapid performance of your app, decreasing the bootstrap timing for a fair amount of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nonblocking-user-interface"&gt;
  &lt;/a&gt;
  Non-blocking user interface
&lt;/h2&gt;

&lt;p&gt;Resizing the images and encryption of the data is one of the lengthiest processes that affect the app's performance inversely, making the user experience more complex. &lt;/p&gt;

&lt;p&gt;An experienced Angular Developer will put such issues on the secondary loop to enhance the user experience. As the web workers are the backbone of the performance of CPU-intensive operations, it handles such issues in the background while other issues have been taken care of in the main loop.&lt;/p&gt;

&lt;p&gt;The prominent job of a web worker is to run the algorithms and encrypt the data on dynamic levels.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-faster-doms-by-optimising-the-events"&gt;
  &lt;/a&gt;
  Get faster DOMS by Optimising the events.
&lt;/h1&gt;

&lt;p&gt;In order to avoid unnecessary server requests and loading, optimisation of the events should be your first checkbox to enhance your performance. Usually, after faster working DOMs, only one attribute that could work efficiently is minifying the business logic of the events.&lt;/p&gt;

&lt;p&gt;In the cases of minimal or no optimisation, the components are dependent on other platforms and could take more time to process the app optimisation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reducing-initial-load-time-using-the-lazy-load-feature"&gt;
  &lt;/a&gt;
  Reducing initial Load time using the Lazy load feature
&lt;/h1&gt;

&lt;p&gt;In order to work on your user demand, the model of lazy loading can significantly decrease the startup time, which eventually can reduce the total time of loading. Moreover, since Angular applications are generally made for large organisations and enterprises, it has a large-scale applications structure. &lt;/p&gt;

&lt;p&gt;The features of the module of lazy loading will automatically accelerate the loading time, giving your users a seamless UI and generating high engagement from your customer base.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#saving-the-memory-bytes-with-async-pipes"&gt;
  &lt;/a&gt;
  Saving the Memory bytes with Async pipes
&lt;/h2&gt;

&lt;p&gt;Angular Development technology has been established with numerous built-in pipes which work significantly on fine-tuning the output of any number of inputs tuned into. Basically, it transforms the inputs into any kind of desirable outputs that an Angular Developer wants.&lt;/p&gt;

&lt;p&gt;In order to simplify the code Architecture and increase the code reusability, the Angular Developers are required to get maximum advantage of this structure. &lt;/p&gt;

&lt;p&gt;The prominent traits of in-built Async pipes enable your Angular Application to release a boatload of the web app and get the app's speed faster than ever.&lt;/p&gt;

&lt;p&gt;So this is it, we have covered the prominent practices covering 360-degree aspects that can lead to enhancing the performance of your Angular Application and giving you an edge when it comes to serving your users right.&lt;/p&gt;

&lt;p&gt;Furthermore, if you still feel your angular app needs an expert touch, &lt;strong&gt;&lt;a href="https://www.bacancytechnology.com/angular-js-development"&gt;Hire Angular developer&lt;/a&gt;&lt;/strong&gt; from the top-notch Angular Development Company, fill the talent skill gap in your team, and take optimum advantage of this extensive front-end technology your app.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>A Comprehensive Guide to Mockito in Flutter</title>
      <author>Aswin Gopinathan</author>
      <pubDate>Thu, 16 Dec 2021 05:40:04 +0000</pubDate>
      <link>https://dev.to/infiniteoverflow/a-comprehensive-guide-to-mockito-in-flutter-1od0</link>
      <guid>https://dev.to/infiniteoverflow/a-comprehensive-guide-to-mockito-in-flutter-1od0</guid>
      <description>&lt;p&gt;No one likes testing! Everyone thinks testing is a boring job. But trust me, testing a software is as important as developing a software.&lt;/p&gt;

&lt;p&gt;Imagine, if you spend days and months building your app and finally when it went live, the app started crashing. What if you had tested all the functionalities before making it live?&lt;/p&gt;

&lt;p&gt;So, testing is a very important phase of Software Development Life Cycle. Even if you hate it, you have to do it.&lt;/p&gt;

&lt;p&gt;But, in this article i will make sure you will end up liking the process of testing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xHcmHKxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/88/5d/7c/885d7c27467f1e976d0c873336facc24.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHcmHKxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/88/5d/7c/885d7c27467f1e976d0c873336facc24.gif" alt="Celebration" width="350" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what are you gonna learn in this article?&lt;/p&gt;

&lt;p&gt;Just one thing - &lt;strong&gt;How to Unit test your code using Mockito!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before i begin, if you wanna read about Unit Testing, check out my latest tweet which talks about a basic introduction to Unit Testing in Flutter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15CV3I3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh03h2i2gwl1e818c3o6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15CV3I3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh03h2i2gwl1e818c3o6.png" alt="Tweet" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/gopinathanaswin/status/1470617070559711234?s=21"&gt;https://twitter.com/gopinathanaswin/status/1470617070559711234?s=21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, lets get to the fun part. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-mockito"&gt;
  &lt;/a&gt;
  What is Mockito?
&lt;/h2&gt;

&lt;p&gt;Mockito is a package in Flutter that helps you create Mock Dependencies of classes while testing your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me give you an example:&lt;/strong&gt;&lt;br&gt;
Imagine a feature that you are testing requires data to be fetched from an external DB such as Firebase/Supabase. &lt;br&gt;
When you are testing your code offline you cant possibly gather data from the DB right? Or even if you are online, you dont wanna wait for the actual data to return in order to test the app right?&lt;/p&gt;

&lt;p&gt;So, what will you do then?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEgg5TkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/f2/6c/be/f26cbec6fb6c5d9bf65789e4ce69479b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEgg5TkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/f2/6c/be/f26cbec6fb6c5d9bf65789e4ce69479b.jpg" alt="Joey Thinking" width="880" height="929"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use &lt;strong&gt;Mockito&lt;/strong&gt; to create a fake class which will use dummy data as input for your tests !!&lt;/p&gt;

&lt;p&gt;Before we get started with the code, lets add dependencies for two packages in pubspec.yaml :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dev_dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;mockito&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^5.0.10&lt;/span&gt;
  &lt;span class="na"&gt;build_runner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^2.1.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: I have added the packages in the &lt;code&gt;dev_dependencies&lt;/code&gt; section. This is because, we are not gonna use these packages in the actual application code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Also, the package versions may vary when you are reading this article. Do checkout &lt;a href="https://pub.dev/"&gt;pub.dev&lt;/a&gt; to get the latest versions.&lt;/p&gt;

&lt;p&gt;Let's create a new file &lt;code&gt;cat.dart&lt;/code&gt; in the &lt;code&gt;test&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Meow"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;eatFood&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;hungry&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chew&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Chewing..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;hunt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;prey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have used the example which is given in the official docs of mockito in pub.dev&lt;/p&gt;

&lt;p&gt;Next, create a file &lt;code&gt;cat_test.dart&lt;/code&gt; file which will contain all the codes to test the class.&lt;br&gt;
Add the following contents to the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:mockito/annotations.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'cat.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@GenerateMocks&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@GenerateMocks([Cat])&lt;/code&gt; is used to create a Mock Class for our &lt;code&gt;Cat&lt;/code&gt; class. &lt;/p&gt;

&lt;p&gt;Now, head over to the terminal and type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dart run build_runner build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate the mock file for us with the name &lt;code&gt;cat_test_mocks.dart&lt;/code&gt; which contains the &lt;code&gt;MockCat&lt;/code&gt; class which we are gonna use for our testing.&lt;/p&gt;

&lt;p&gt;Import this new file into our &lt;code&gt;cat_test.dart&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'cat_test.mocks.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, head over to the &lt;code&gt;main&lt;/code&gt; function and initialise an object for class &lt;code&gt;MockCat&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var cat = MockCat();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's verify some methods. But, what is verify in testing ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verify&lt;/strong&gt;: It means we are verifying a method if it was invoked in that particular scope or not.&lt;/p&gt;

&lt;p&gt;I will explain this better with an example. Append the following code inside the &lt;code&gt;main()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'verify sound'&lt;/span&gt;&lt;span class="o"&gt;,()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meow'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have defined a test block that performs verify operation on the &lt;code&gt;sound()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The first line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meow'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is known as &lt;strong&gt;Stubbing&lt;/strong&gt;. &lt;br&gt;
Oh come on! What is Stubbing now? I will explain this a bit later, but for now just imagine we have a method &lt;code&gt;sound()&lt;/code&gt;, that returns 'meow'.&lt;/p&gt;

&lt;p&gt;Now, the second line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we invoke the &lt;code&gt;sound()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Finally, the last line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we are verifying if the mentioned method with the given parameter list was invoked in this scope or not.&lt;/p&gt;

&lt;p&gt;So, this test will pass since it was invoked in line 2. But what if we write verify like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Bow'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will fail, because the &lt;code&gt;sound()&lt;/code&gt; method was not invoked in this scope with a String parameter 'Bow'.&lt;/p&gt;

&lt;p&gt;So, this is how &lt;code&gt;verify&lt;/code&gt; works in mockito.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is this helpful ?&lt;/strong&gt;&lt;br&gt;
This is helpful to know whether a method was invoked during the flow of a unit.&lt;br&gt;
&lt;strong&gt;For example&lt;/strong&gt;: Verify if the &lt;code&gt;validatePassword()&lt;/code&gt; method was called while creating a user.&lt;/p&gt;

&lt;p&gt;But, there are some more interesting variants of &lt;code&gt;verify&lt;/code&gt; known as &lt;code&gt;verifyInOrder()&lt;/code&gt;, &lt;code&gt;verifyNever()&lt;/code&gt;, and &lt;code&gt;verifyZeroInteractions()&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;verifyInOrder() takes in a list of methods, to verify if they were invoked in that particular order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;verifyNever() takes in a method, to verify if it was never invoked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;verifyZeroInteractions() takes in a mock object (not a method), to verify if that object was never called in the scope of the test.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, lets jump into &lt;strong&gt;Stubbing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Stubbing is the process of overriding the behaviour of a method belonging to the mock class instance.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Consider a method that returns 'Dart':&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getLang&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'Dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We stub the method to return 'Flutter' instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLang&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Flutter'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, no matter how many times you call the method &lt;code&gt;getLang()&lt;/code&gt;, it will always return 'Flutter' as opposed to its declaration in its class.&lt;/p&gt;

&lt;p&gt;This is helpful when you wanna test your methods for different return data.&lt;/p&gt;

&lt;p&gt;Let's consider our &lt;code&gt;MockCat&lt;/code&gt; class and test a stubbing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'stubbing'&lt;/span&gt;&lt;span class="o"&gt;,()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Flutter'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;'Flutter'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the normal flow &lt;code&gt;cat.sound()&lt;/code&gt; should return 'Meow', but after stubbing it will always return 'Flutter'.&lt;/p&gt;

&lt;p&gt;If a method invocation matches multiple stubs, the one which was declared last will be used. It is worth noting that stubbing and verifying only works on methods of a mocked class; in this case, an instance of &lt;code&gt;MockCat&lt;/code&gt; must be used, not an instance of &lt;code&gt;Cat&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices-while-working-with-mockito"&gt;
  &lt;/a&gt;
  Best Practices while working with Mockito
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Whenever you make changes to the class that you are mocking, always re-generate the mock class using the build command that i mentioned above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always Stub your method before verifying it in a test block. Otherwise, it will return an error like the following:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnvKsx-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grcsdmtloiwvm1slfx44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnvKsx-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grcsdmtloiwvm1slfx44.png" alt="Image description" width="880" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testing with real objects is preferred over testing with mocks - if you can construct a real instance for your tests, you should!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you liked this article, dont forget to hit the like button and share it with your friends and colleagues.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/GopinathanAswin"&gt;@GopinathanAswin&lt;/a&gt; where i regularly share my learnings in Dart and Flutter 💙&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rynz1uuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m90v4tivz5xqzf51xu2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rynz1uuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m90v4tivz5xqzf51xu2n.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>programming</category>
      <category>testing</category>
      <category>mockito</category>
    </item>
    <item>
      <title>Decomposing Composition</title>
      <author>Toby Parent</author>
      <pubDate>Thu, 16 Dec 2021 05:21:45 +0000</pubDate>
      <link>https://dev.to/parenttobias/decomposing-composition-9m7</link>
      <guid>https://dev.to/parenttobias/decomposing-composition-9m7</guid>
      <description>&lt;p&gt;Functional libraries like Ramda.js are great, and give us some very powerful, useful, simple functionality. But they’re the kind of thing you might not know you need, unless you know you need them.&lt;/p&gt;

&lt;p&gt;I’ve been reading (well, okay, _devouring) &lt;a href="https://medium.com/u/c359511de780?source=post_page-----d06df9c0b8a-----------------------------------"&gt;Eric Elliott&lt;/a&gt;’s &lt;strong&gt;Composing Software&lt;/strong&gt; book (and before that, the series of blog posts). Powerful read, easy to understand, lot of meat under that skin. But it’s easy to get lost in there. Trying to understand both the what and why of function composition (and later, object composition) can be challenging.&lt;/p&gt;

&lt;p&gt;So I wanted to break it down into a step-by-step, and see if we can make more sense of this as an “evolution of the idea.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-the-problem"&gt;
  &lt;/a&gt;
  Defining the Problem
&lt;/h2&gt;

&lt;p&gt;Let’s take an absurd example, reversing a string. It’s a lesson we see in all sorts of introductory lessons, and the steps are pretty easy to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;turn the string into an array of letters,&lt;/li&gt;
&lt;li&gt;reverse the array of letters,&lt;/li&gt;
&lt;li&gt;rejoin the reversed array back into a string,&lt;/li&gt;
&lt;li&gt;return the reversed (transformed) string.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Easy to follow, and easy to write. A perfect introduction to methods of core objects in javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reversedStringArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stringArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinedReversedStringArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reversedStringArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;joinedReversedStringArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we take each step of the problem, and do that thing. Each step is assigned to a variable because we can, and that variable is passed to the next step as its input. Easy to read, but kind of wasteful.&lt;/p&gt;

&lt;p&gt;Wasteful why? Because of &lt;em&gt;method chaining&lt;/em&gt;. When we call &lt;code&gt;String.prototype.split()&lt;/code&gt;, that returns an array, and we can chain directly onto that. The &lt;code&gt;Array.prototype.reverse()&lt;/code&gt; acts on an array and modifies it in place, returning the same array, and &lt;code&gt;Array.prototype.join()&lt;/code&gt; returns a string, which we are returning. So we can call each of those methods on their returned result, without needing the intermediary variables&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that does all four steps in one line. Beauty! Note the order of the functions being called there — we &lt;code&gt;split&lt;/code&gt; the string, we &lt;code&gt;reverse&lt;/code&gt; the array, we &lt;code&gt;join&lt;/code&gt; the array.&lt;/p&gt;

&lt;p&gt;It is much shorter, and it reads very well. This is often the solution that we as mentors in online programming courses might point to as the cleanest and easiest solution, and it really works. And it &lt;em&gt;does&lt;/em&gt; get us closer to where I want us to be.&lt;/p&gt;

&lt;p&gt;But this? This is about &lt;em&gt;functional composition&lt;/em&gt;. We’ve got a ways to go yet, but we’re closer. Let’s look at another way of doing much the same thing, see if that helps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prestep-3"&gt;
  &lt;/a&gt;
  Pre-Step 3
&lt;/h2&gt;

&lt;p&gt;While chaining is a great way to go, in terms of readability, it doesn’t really &lt;em&gt;compose&lt;/em&gt; well. We can’t build with chained methods like Lego blocks, snapping them together and rearranging as we like. To do that, we need to consider another way of passing data from one function to another.&lt;/p&gt;

&lt;p&gt;The pattern of what we’re about to do, in a mathematical sense, might look more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// given functions f, g, and h, and a data point x:  &lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are taking value &lt;code&gt;x&lt;/code&gt;, pushing it into function &lt;code&gt;h&lt;/code&gt; (getting “the &lt;code&gt;h&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;”), and then taking the returned value from that and pushing it into &lt;code&gt;g&lt;/code&gt; (getting “the &lt;code&gt;g&lt;/code&gt; of &lt;code&gt;h&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;”), and then taking the returned evaluation from that and pushing it into &lt;code&gt;f&lt;/code&gt; (getting “the &lt;code&gt;f&lt;/code&gt; of &lt;code&gt;g&lt;/code&gt; of &lt;code&gt;h&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;”).&lt;/p&gt;

&lt;p&gt;It makes sense, but it hurts to think in &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; hurt my little button-head. Let’s make it a bit more concrete.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/***
 * for reference, this was the mathematical idea:
 *
 * return f(
 *         g(
 *           h(
 *             x  
 *           )
 *         )
 *       );
 ***/&lt;/span&gt;

&lt;span class="c1"&gt;// and the concrete example:&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;string&lt;/span&gt;  
            &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that is doing the same thing - it gets the "split of &lt;code&gt;string&lt;/code&gt;", passes that to get "reverse of (split of &lt;code&gt;string&lt;/code&gt;), then passes that out to get "join of reverse of split of &lt;code&gt;string&lt;/code&gt;." Sounds silly worded that way, but it's part of the mental model. Our function is composed of these steps, in this order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// some utility functions, curried.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// partially-applied instances of our utilities&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="nx"&gt;string&lt;/span&gt;
             &lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is quite a bit more meat to this one, and it will require some explanation to grok fully what is going on.&lt;/p&gt;

&lt;p&gt;First, before we do the &lt;code&gt;reverseString&lt;/code&gt;, we want to turn those &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; methods into composable functions. We’ll make some curried functions, because who doesn’t like abstraction?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;splitOn&lt;/code&gt; is an abstract wrapper for the &lt;code&gt;String.prototype.split&lt;/code&gt; method, taking as its first parameter the string on which we’ll split.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;joinWith&lt;/code&gt; is an abstract wrapper for the &lt;code&gt;Array.protoype.join&lt;/code&gt; method, taking as its first parameter the string we’ll use for our join.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reverse&lt;/code&gt; doesn’t take any parameters, but it turns &lt;code&gt;Array.prototype.reverse&lt;/code&gt; into a composable function in itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, within our &lt;code&gt;reverseString&lt;/code&gt;, the first step is to &lt;em&gt;partially apply&lt;/em&gt; those two abstract functions. We tell &lt;code&gt;split&lt;/code&gt; that it is a reference to &lt;code&gt;splitOn('')&lt;/code&gt;, we tell &lt;code&gt;join&lt;/code&gt; that it is a reference to &lt;code&gt;join.with('')&lt;/code&gt;, and then we have all the parts we need to combine three functions into one call.&lt;/p&gt;

&lt;p&gt;This is much better, as we can now see each function, and the order in which they are applied. But this reads a little bit differently than the original chained example. That one read in left-to-right order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// given string, call split, then call reverse, then call join  &lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In functional circles, this is considered “pipe” order. The term comes from the Unix/Linux world, and leads down a whole ‘nother rabbit hole.&lt;/p&gt;

&lt;p&gt;Our latest code, rather than reading left-to-right, is processed inside-to-outside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
      &lt;span class="nx"&gt;string&lt;/span&gt;  
    &lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if we read these in that same left-to-right order, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, we execute them exactly &lt;em&gt;backwards&lt;/em&gt; of that. This would be considered “composed” order, and now we’re about to venture into composed-function-land!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pre-step-4"&gt;
  &lt;/a&gt;
  Pre Step 4
&lt;/h2&gt;

&lt;p&gt;This is where things start to get fun. First thing to remember is this: functions in javascript are just another kind of data (and thanks, &lt;a href="https://medium.com/u/a3a8af6addc1?source=post_page-----d06df9c0b8a-----------------------------------"&gt;Dan Abramov&lt;/a&gt; for the mental models from &lt;a href="https://justjavascript.com/"&gt;JustJavascript&lt;/a&gt;!). In javascript, we can pass ’em, we can store ’em in arrays or objects, we can manipulate them in fun and exciting ways… and we can combine ’em. And that’s just what we’ll do.&lt;/p&gt;

&lt;p&gt;In this iteration, we are going to place all our functions in an array, and then we will simply ask that array to perform each function in turn on a given piece of data. The concept is easy to understand, but again — concrete examples are helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// again, the helpers:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitSting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// with those, we can write this:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// let's define our transforming variable&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;workingValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// apply each function and transform our data.&lt;/span&gt;
    &lt;span class="nx"&gt;workingValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is nicely abstracted — inside the &lt;code&gt;reverseString&lt;/code&gt;, we simply create an array of instructions and then we process each one, passing the most recently transformed data in.&lt;/p&gt;

&lt;p&gt;If that sounds like a sneaky way of saying we are reducing the array of instructions, you’re either paying attention or reading ahead. 😉&lt;/p&gt;

&lt;p&gt;That is exactly where we are going. We are taking an array of instructions, using &lt;code&gt;workingValue&lt;/code&gt; as the starting “accumulator” of that array, and reducing the &lt;code&gt;workingValue&lt;/code&gt; to the final evaluation of each of those instructions, applying the &lt;code&gt;workingValue&lt;/code&gt; each time. This is precisely what &lt;code&gt;Array.prototype.reduce&lt;/code&gt; is for, and it works a treat. Let’s go there next!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// I'll leave those helper methods as written.&lt;/span&gt;
&lt;span class="c1"&gt;// Imagine we've placed them in a util library.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// and use string as the initial workingValue&lt;/span&gt;
    &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we’ve taken that imperative &lt;code&gt;for&lt;/code&gt; loop and made it a declarative &lt;code&gt;reduce&lt;/code&gt; statement. We simply tell javascript "reduce the original &lt;code&gt;workingValue&lt;/code&gt; by applying each &lt;code&gt;instruction&lt;/code&gt; to it in turn." It is a much more structured way to code, and if we want, we can always add, alter, rearrange the &lt;code&gt;instructions&lt;/code&gt; without breaking the way that &lt;code&gt;reduce&lt;/code&gt; function call works. It simply sees instructions, and does instructions. Is a beautiful thing.&lt;/p&gt;

&lt;p&gt;But it would be a colossal pain to have to write each function that way. The concept will be much the same any time we want to combine a number of functions — we write the instructions, then we transform some datapoint based on those instructions. Sounds like another candidate for abstraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pre-step-6"&gt;
  &lt;/a&gt;
  Pre Step 6
&lt;/h2&gt;

&lt;p&gt;Given that we’re working with the instructions in first-to-last order, we’ll talk about writing a &lt;code&gt;pipe&lt;/code&gt; function first. It’s an easy step from that to reduce, and in terms of how we think, pipe order may make more sense.&lt;/p&gt;

&lt;p&gt;So what we want is a function that takes an array of functions, and applies them to a particular data point. Internally, we know it’ll be a reducer, but how might that look?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arrayOfInstructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;arrayOfInstructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// or, with shorter variable names:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those two are exactly the same — the first simply has longer variable names to make it easier to see what’s happening.&lt;/p&gt;

&lt;p&gt;So we’ve made a curryable function here. By partially applying it (passing in any number of functions), we get back a function that wants a value. When we give it a value, it will apply each of the instructions to that value in turn, transforming the value as it goes along. Each time, the latest iteration of that transformed value will be used for the next step, until we reach the end and return the final transformation.&lt;/p&gt;

&lt;p&gt;How might that help us? Remember, we want &lt;code&gt;returnString&lt;/code&gt; to be a function that takes a value. And we want to give it a series of instructions. So how’s this look?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// again with our utility functions:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/pipe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we call in our utility functions, and we call in our &lt;code&gt;pipe&lt;/code&gt; function, and then we’re ready to begin. We partially apply the instructions to &lt;code&gt;pipe&lt;/code&gt;, which returns a function expecting a value — which is exactly what we want &lt;code&gt;reverseString&lt;/code&gt; to be! Now, when we call &lt;code&gt;reverseString&lt;/code&gt; with a string argument, it uses that string as the final argument to the reducer, runs each of those instructions, and gives us a return result!&lt;/p&gt;

&lt;p&gt;Look closely, though: our &lt;code&gt;reverseString&lt;/code&gt; is a function, &lt;strong&gt;defined without a body&lt;/strong&gt;! I can't stress enough, this is weird. This is not what we're accustomed to when we write functions. We expect to write a function body, to arrange some instructions, to do some stuff - but that is all happening &lt;em&gt;for&lt;/em&gt; us. The &lt;code&gt;pipe&lt;/code&gt; function takes all the function references passed in above, and then returns a function... awaiting a value. We aren't writing a &lt;code&gt;reverseString&lt;/code&gt; function, we're sitting in the &lt;code&gt;pipe&lt;/code&gt; function's closure!&lt;/p&gt;

&lt;p&gt;Remember above when I explained that we can look at &lt;code&gt;pipe&lt;/code&gt; as similar to chained order? If you read the above &lt;code&gt;pipe&lt;/code&gt; call, you can read it in the same order. But when we compose, it is the reverse of pipe — while we might read it left-to-right (or outermost to innermost), it should process from right to left. Let’s write a &lt;code&gt;compose&lt;/code&gt; function, and compare it to &lt;code&gt;pipe&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// remember,this is our pipe function in the compact terms&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// compose is eerily similar - we just want to reverse-order&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduceRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look at those two functions, the only difference between them is that &lt;code&gt;pipe&lt;/code&gt; uses &lt;code&gt;fns.reduce()&lt;/code&gt; while &lt;code&gt;compose&lt;/code&gt; uses &lt;code&gt;fns.reduceRight()&lt;/code&gt;. Otherwise, nothing has changed. We could test them easily, if we wanted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/my_fp_lib.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipedReverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composedReverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// let's use them!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;pipedReverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;composedRreverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// logs true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this is hardly the best explanation or implementation of pipe and reduce. There are far better, more robust FP libraries out there doing a far better job of implementing this. But what I’m doing here is more about explaining the how of it, for some who might be intimidated by the whole idea of functional composition. It doesn’t have to be intimidating, really. When we break it down to smaller steps, we can see that we already know most of this — it is simply how we combine that knowledge together.&lt;/p&gt;

&lt;p&gt;And when I wrote something similar to this some time back, the biggest critique I got was “what’s the point? I’m not gaining anything by writing little functions for every little detail!” There is some truth to that, for the person who made the comment. For me, having that &lt;code&gt;compose&lt;/code&gt; functionality means that my more complex functions become testable and debuggable quickly and easily, my development becomes more about what I want to do and less about how I’ll do it, my thinking becomes more abstract.&lt;/p&gt;

&lt;p&gt;For example, suppose we wanted to add some inline debugging to the pipe version of our &lt;code&gt;reverseString&lt;/code&gt; function? We could easily add that, without breaking anything:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/my_fp_lib.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// this would be a candidate for a useful function to add to util.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Starting Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After split&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;reverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/***
 * logs out
 * Starting Value Hello World
 *
 * After split [
 *   'H', 'e', 'l', 'l',
 *   'o', ' ', 'W', 'o',
 *   'r', 'l', 'd'
 * ]
 *
 * After reverse [
 *  'd', 'l', 'r', 'o',
 *  'W', ' ', 'o', 'l',
 *  'l', 'e', 'H'
 * ]
 *
 * dlroW olleH
 ***/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing we’ve changed here is that we’ve added a &lt;code&gt;trace&lt;/code&gt; function, something we &lt;strong&gt;&lt;em&gt;couldn’t&lt;/em&gt;&lt;/strong&gt; do with a chained function call or a normal nested series of functions. This is one of the secret superpowers of composition — we can combine things easily that might not be easy or obvious otherwise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;I hope this helped clear up some, for those (like me) who were initially confused looking at Eric’s &lt;code&gt;compose&lt;/code&gt; and &lt;code&gt;pipe&lt;/code&gt; functions. Not because they were poorly written at all, simply because I was still thinking in a linear style and these functions are next-level.&lt;/p&gt;

&lt;p&gt;I wanted to take us from the 101-level javascript, and start looking at how we might easily take the knowledge we already have and turn it into something more. First, by exploring two different ways of doing the same things — chained methods or nested function calls. Each does similar things, but the mindset and reading-order behind both are a bit different. Both are equally valid, and both apply to functional composition.&lt;/p&gt;

&lt;p&gt;If you got these concepts, you’re already well on your way down the functional programming rabbit-hole. Welcome to the madhouse, have a hat! If you didn’t quite get the concepts yet, it’s not a failing — these are deep and twisty applications of ideas. You get a hat anyway!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>functional</category>
    </item>
    <item>
      <title>What is WEB3 and Why Is It gaining so much of a Traction ?</title>
      <author>Pramit Marattha</author>
      <pubDate>Thu, 16 Dec 2021 04:49:03 +0000</pubDate>
      <link>https://dev.to/aviyel/what-is-web3-and-why-is-it-gaining-so-much-of-a-traction--2d4n</link>
      <guid>https://dev.to/aviyel/what-is-web3-and-why-is-it-gaining-so-much-of-a-traction--2d4n</guid>
      <description>&lt;p&gt;Everything began with &lt;a href="https://www.techopedia.com/definition/27960/web-10"&gt;web 1.0&lt;/a&gt;, an information transit hub of documents connected by Hyperlinks. The mechanism worked well until 2004, but when we saw the beginnings of &lt;a href="https://en.wikipedia.org/wiki/Web_2.0"&gt;web 2.0&lt;/a&gt;, things changed, with more people participating in the web through platforms such as Google, YouTube, Facebook, Twitter, resulting in massive centralized tech conglomerates that controlled the flow of information and money on the internet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8W3crTje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027693313-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8W3crTje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027693313-image.png" alt="Tech corpo" width="377" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We live in fascinating times because we've arrived at the critical juncture of &lt;a href="https://en.wikipedia.org/wiki/Web3"&gt;web 3.0&lt;/a&gt;, a decentralized yet secure internet in which people may exchange money and information without the need for a middleman such as a bank or a tech company. This blog article serves as a comprehensive introduction to the wild world of web 3.0. It's humbling to get into it because it causes you to feel like you know nothing whatsoever.&lt;/p&gt;

&lt;p&gt;Let's dive into its ecosystem from a critical perspective and try to answer questions that the whole world has been asking about web3.0. Get ready to know- "is web 3 bs" or "should I even bother getting into it?" I believe the answer to both is yes. There's obviously a lot of hype around web3, but not everyone is buying it, even Elon Musk said “&lt;a href="https://twitter.com/elonmusk/status/1466320998379175939"&gt;Web3 sounds like bs&lt;/a&gt;” just a few days ago on Twitter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_cnV6q9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639025174597-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_cnV6q9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639025174597-image.png" alt="Tweet" width="530" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The very harsh reality of web 3 is that venture capitalists and silicon valley insiders control many of the companies and the cryptocurrencies they issue. This isn't always the case, but much of the industry is bolstered up by Fear Of Missing Out, and there are a lot of scams and shady stuff to be aware of but there are actually genuine smart people out there making a very good argument about how web 3 lacks the computing power, bandwidth, and storage to scale on any practical level. The scammers and tricksters will tell you that &lt;a href="https://en.wikipedia.org/wiki/Cryptocurrency"&gt;crypto&lt;/a&gt; is growing faster than the internet was in the 1990s, but that's a ridiculous argument because crypto is built on top of the internet itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--guGnhfY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027585425-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--guGnhfY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027585425-image.png" alt="Crypto Internet" width="252" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Crypto will never be as revolutionary as the internet, but that doesn't mean it won't be significant. Here's how we should think about it: let's assume it's 1990, and things are just getting started. The best-case scenario is that web 3.0 will continue to grow for another 10 years, completely revolutionizing the way the world works; on the other hand, the worst-case scenario is that the cryptocurrency bubble has already burst, and as it crashes, it will take web 3.0 down with it. For comparison, when the dot-com bubble burst, Amazon's stock fell by a whopping 90%. &lt;a href="https://www.macrotrends.net/stocks/charts/AMZN/amazon/stock-price-history"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUr5PE1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639025731991-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUr5PE1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639025731991-image.png" alt="Amazon Stock" width="755" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, they were one of the fortunate enterprises that managed to survive. Imagine what will happen to web3.0 if Ethereum plummets down by 90%, but the next question is whether we even need cryptocurrencies to construct decentralized apps. Decentralized technology has been around for a long time, such as peer-to-peer file sharing with Napster in the 1990s or BitTorrent, which has a hundred million to Two Hundred million monthly active users. That said, cryptocurrency is still kind of essential because you need some form of payment to build up a creator economy, and banks are not an acceptable solution. It also provides the incentive for people to provide the computing infrastructure that makes it all possible.&lt;/p&gt;

&lt;p&gt;Let's use the Ethereum blockchain as an example of how a decentralized app or DAPs on the blockchain works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_u-fH0hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639031919660-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_u-fH0hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639031919660-image.png" alt="Ethereum" width="202" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although there are a variety of alternative cryptocurrencies available, Ethereum is similar to a large network of computers in which all participants agree on the same state of the data throughout the network. Ether is the cryptocurrency used on the Ethereum network to create transactions that change the state of the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7K25QCrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027214445-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7K25QCrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027214445-image-resized.png" alt="Ethereum Transaction" width="760" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you broadcast a transaction, you also offer a small amount of ether as a reward for another computer in the network to complete the transaction. This is known as a gas fee, and it works similarly to how you pay for cloud computing resources on &lt;a href="https://cloud.google.com/"&gt;GCP(Google Cloud Platform)&lt;/a&gt;, &lt;a href="https://aws.amazon.com/"&gt;AWS(Amazon Web Services)&lt;/a&gt;, and &lt;a href="https://azure.microsoft.com/en-us/"&gt;Azure&lt;/a&gt;. If you want things done faster, you pay more gas. Normally, when you build a web application, you write some back-end code and then deploy it to a centralized server like GCP, AWS, or Azure, but with a decentralized app on the blockchain, your backend code is contained in a smart contract, which is an application that lives on the blockchain that can govern the behavior of multiple accounts and is usually written in the solidity language.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--viRfM6Mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027450004-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--viRfM6Mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027450004-image.png" alt="Ethereum" width="300" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A decentralized app also requires a front end that can be developed similarly to a traditional website, with the exception that user identification is handled differently. So, how does user identity function in a decentralized app? The end-user owns all of their data, so there's no need for the developer to collect a username and password. Instead, the end-user has a public wallet address that can receive payments and a private key that can sign transactions to send payments to someone else. The user can then connect their wallet to a browser plugin like &lt;a href="https://metamask.io/"&gt;metamask&lt;/a&gt;, and your front-end application, such as a vue, react, and nextjs app, can then interact with that user's wallet to do something interesting in the UI for example purchasing the NFTs (Non-Fungible Tokens).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIkPAyWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028037246-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIkPAyWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028037246-image.png" alt="NFT" width="271" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what the hell is an NFT? To begin, we must first grasp the basic understanding of "what is a token?"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TY1VnDUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028083197-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TY1VnDUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028083197-image.png" alt="Tokens" width="200" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So a token is just a digital asset, similar to ether, the currency of Ethereum, that you can trade with other people. But the cool thing is that developers can create their own tokens in the form of smart contracts. A token is basically just a number in a smart contract mapped to a wallet address. In fact, if we wanted to create our own cryptocurrency, we could do so by writing a smart contract that gives an initial balance of 1 trillion tokens. It's conceivable to sell it to other individuals for 10 dollars, and then they sell it to their friends for 20 dollars and snowball it to 30 dollars. In that process, we might become super-rich. To be honest, that seems like a Ponzi scheme with extra steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O28452tX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639036681354-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O28452tX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639036681354-image.png" alt="Ponzi" width="301" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you look closely everything is a Ponzi scheme, with the physical currency that we use on a daily basis, so there's no need to be concerned about ethics or anything about cryptocurrencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_9eXvB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639032820217-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_9eXvB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639032820217-image.png" alt="Crypto" width="247" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what does it mean by fungible tokens? It simply means that one token has the same value as another token of the same size, or in other words, one coin is always worth the same as another coin. However, tokens can also represent assets that are not identical, such as Pokemon cards, digital artwork, house rents, and other items. Because each token is unique and represents a separate object, its actual market value may alter when exchanged for another type of currency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5o0_jB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028787621-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5o0_jB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028787621-image.png" alt="Open seas" width="100" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a large non-fungible token (NFT) frenzy on the market, with entire marketplaces like open seas springing up to sell digital artwork as non-fungible tokens, which is actually a perfect example of a highly polished web 3 app so let's speak about Web3 technology. What does a web3 application's front end look like? For the most part, it's not much different from a regular web app. You'll probably utilize a UI library like react, vue, or next, as well as all of your other front-end tools. When it comes to user authentication, things change because, as previously said, the end-user utilizes a plugin such as metamask to make their public wallet details available to a decentralized app. Now the question is how do we as developers connect to metamask.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEEQggAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028959056-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEEQggAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028959056-image.png" alt="Metamask" width="201" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's actually quite simple because metamask creates a global object on the browser window that we can use to access wallet details. Figuring out what to do with this data is a little more difficult, but luckily there are libraries to help us out. The two most popular options are &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/"&gt;web3.js&lt;/a&gt; and &lt;a href="https://docs.ethers.io/v5/"&gt;ethers.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woUbsGwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639029190569-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woUbsGwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639029190569-image.png" alt="Web3 and ether" width="368" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These libraries provide a javascript-based API that makes interacting with users and smart contracts on the blockchain much easier.&lt;/p&gt;

&lt;p&gt;The front end of a web3 application is fairly standard and straightforward, but let's look at the back end of a web3 application. Instead of a server and database like node, PHP, and MySQL, you'll be working with smart contracts. There are frameworks available to help with development; two of the most popular options are &lt;a href="https://hardhat.org/"&gt;hardhat&lt;/a&gt; and &lt;a href="https://trufflesuite.com/"&gt;truffle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ow2DLX-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gakibefr47tnlfmp5e3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ow2DLX-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gakibefr47tnlfmp5e3.png" alt="Hardhat and truffle" width="387" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These frameworks will give you a place to develop a smart contract in Solidity. It's essentially an object-oriented language designed specifically for writing smart contracts on the blockchain. While this may sound intimidating, there's a project called &lt;a href="https://openzeppelin.com/"&gt;openzeppelin&lt;/a&gt; that provides templates for writing smart contracts that adhere to industry standards, making it extremely simple to implement reliable code right out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zRb_3nT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639029808205-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zRb_3nT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639029808205-image-resized.png" alt="open zepplin" width="760" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another thing that a development toolchain will do for you is to provide a script to deploy your smart contract to the blockchain. It's just a simple node script that signs a contract with your credentials and deploys it to an address on the blockchain. Now you might be wondering how do I test this code before I deploy it because I have no idea if it actually works. That's something that hardhat and truffle can help you with. They can set up a testing network as well on localhost and produce a lot of fake crypto wallet addresses to use for testing in the browser. so people can then connect Metamask to their testing network instead of the real Ethereum network.&lt;/p&gt;

&lt;p&gt;Furthermore, if you're working on a serious project, you should think about writing automated tests for it, and there's a library called &lt;a href="https://getwaffle.io/"&gt;Waffle&lt;/a&gt; that can help you with that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oTlqN9cK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639033639781-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oTlqN9cK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639033639781-image-resized.png" alt="waffle" width="760" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there's one more question: "Do I put all of my data on the blockchain?" The answer is no, storing anything on the blockchain is inefficient and unnecessary, which is where off-chain storage comes in.&lt;/p&gt;

&lt;p&gt;In some cases, data may be too large to store on the blockchain, or it may need to be modified or deleted, which is not possible in a blockchain where all data is read-only. The most common solution is the &lt;a href="https://ipfs.io/"&gt;interplanetary file system&lt;/a&gt;, or &lt;a href="https://en.wikipedia.org/wiki/InterPlanetary_File_System"&gt;IPFS&lt;/a&gt;, which is a decentralized way to share files similar to how BitTorrent works. There are also databases built on top of IPFS, such as &lt;a href="https://orbitdb.org/"&gt;orbitdb&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/@textile/threaddb"&gt;threaddb&lt;/a&gt;, which are similar to a peer-to-peer version MongoDB database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alfG55bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639033965166-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alfG55bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639033965166-image.png" alt="Orbit and thread db" width="379" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Web3"&gt;Web 3.0&lt;/a&gt; is a refinement of &lt;a href="https://en.wikipedia.org/wiki/Web_2.0"&gt;Web 2.0&lt;/a&gt;, which is a service-oriented web that promotes and facilitates user collaboration and communication. Despite the lack of agreement on the specific traits that characterize Web 3.0, many experts agree that semantic technologies and customization techniques play a very important role in it.&lt;/p&gt;

&lt;p&gt;From this perspective, Web 3.0 might be viewed as a semantic and personalized variation of Web 2.0. Tons of features of Web 3.0 are currently available; others will appear in the future, and stunning modern technology will continue to amaze us. Web 3.0's ultimate global information architecture will boost network activity and internet traffic, open up new markets for unique content.&lt;/p&gt;

&lt;p&gt;Main article available here =&amp;gt; &lt;a href="https://aviyel.com/post/1513/what-is-web3-and-why-is-it-gaining-traction"&gt;https://aviyel.com/post/1513&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://twitter.com/AviyelHq"&gt;@aviyelHQ&lt;/a&gt; or &lt;a href="https://aviyel.com/discussions"&gt;sign-up&lt;/a&gt; on Aviyel for early access if you are a project maintainer, contributor, or just an Open Source enthusiast.&lt;/p&gt;

&lt;p&gt;Join Aviyel's Discord =&amp;gt; &lt;a href="https://discord.gg/TbfZmbvnN5"&gt;Aviyel's world&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter =&amp;gt;[&lt;a href="https://twitter.com/AviyelHq"&gt;https://twitter.com/AviyelHq&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>web3</category>
      <category>web2</category>
      <category>crypto</category>
      <category>news</category>
    </item>
  </channel>
</rss>
