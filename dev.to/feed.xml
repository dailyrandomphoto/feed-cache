<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CloudSniper ‚Äì Cloud Security Operations</title>
      <author>kalilinux</author>
      <pubDate>Thu, 22 Apr 2021 20:55:52 +0000</pubDate>
      <link>https://dev.to/kalilinux/cloudsniper-cloud-security-operations-14ln</link>
      <guid>https://dev.to/kalilinux/cloudsniper-cloud-security-operations-14ln</guid>
      <description>&lt;p&gt;Cloud Sniper is a platform designed to manage Cloud Security Operations, intended to respond to security incidents by accurately analyzing and correlating cloud artifacts. It is meant to be used as a Cloud Security Operations platform to detect and remediate security incidents by showing a complete visibility of the company‚Äôs cloud security posture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kali-linuxtr.net/cloudsniper-cloud-security-operations"&gt;CloudSniper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>security</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Top 5 DEV Comments of the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 22 Apr 2021 20:51:45 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-42gn</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-42gn</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a weekly roundup of awesome DEV comments that you may have missed. You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;We love a good &lt;a href="https://dev.to/technoglot/what-s-the-best-dev-joke-or-pun-you-know-jei"&gt;dev joke&lt;/a&gt; and this one &lt;a class="mentioned-user" href="https://dev.to/jmdejager"&gt;@jmdejager&lt;/a&gt;
 commented takes the cake!  &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/jmdejager"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ga_Mn-7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---wONnKAG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/jmdejager"&gt;
        &lt;span class="comment-username"&gt; üê§ü•á Jasper de Jager&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/jmdejager/comment/1dfi4" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 16
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;This was just on twitter:&lt;/p&gt;

&lt;p&gt;where do Javascript developers wash their hands?&lt;/p&gt;

&lt;p&gt;in async... ü§£&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now this is definitely a &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-53nb"&gt;win&lt;/a&gt;! So glad to see some folks in our community are getting vaccinated üò≠ Congrats, &lt;a class="mentioned-user" href="https://dev.to/yoursunny"&gt;@yoursunny&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/yoursunny"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOQWVnwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qZJgOhyw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/242407/5dfdb123-238c-417a-9590-5747bf7ab561.jpeg" alt="yoursunny profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/yoursunny"&gt;
        &lt;span class="comment-username"&gt;Junxiao Shi&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/yoursunny/comment/1dg9l" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 17
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I won the raffle for a "leftover" vaccine. It reduces the chance of me dying this year by 40%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5fIou5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mo37b5n2lemhzi1filhi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUF2P_pQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--u5fIou5F--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mo37b5n2lemhzi1filhi.jpeg" alt="I got vaccinated"&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Sometimes, all you need are some &lt;a href="https://dev.to/simonpaix/10-useful-vs-code-shortcuts-you-should-know-42m"&gt;VS Code Shortcuts&lt;/a&gt;, and &lt;a class="mentioned-user" href="https://dev.to/equiman"&gt;@equiman&lt;/a&gt;
 offers some really useful ones! Thanks for the tips üòä&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/equiman"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6l_Rykdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0rbmnYNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/60846/7c649d45-d4c7-4ed0-8ec1-8413e51a80d4.png" alt="equiman profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/equiman"&gt;
        &lt;span class="comment-username"&gt;Camilo Martinez&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/equiman/comment/1df8m" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 16
  &lt;/time&gt;

    ‚Ä¢ Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Apr 16&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Excellent recommendations! I would like to add this information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ctrl+i&lt;/code&gt; also does the same as &lt;code&gt;ctrl+space&lt;/code&gt; it was introduced recently.&lt;/li&gt;
&lt;li&gt;When using &lt;code&gt;ctrl+d&lt;/code&gt; and select more elements than expected, you can undo selections with &lt;code&gt;ctrl+u&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Okay, okay, only one more &lt;a href="https://dev.to/technoglot/what-s-the-best-dev-joke-or-pun-you-know-jei"&gt;dev joke&lt;/a&gt;, I promise. But this one &lt;a class="mentioned-user" href="https://dev.to/hugekontrast"&gt;@hugekontrast&lt;/a&gt;
 commented really deserves to be highlighted! Pure genius. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/hugekontrast"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFJUPycw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4nLZFY3q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/315855/94552dee-34da-436e-a7ab-48636a2a78d5.jpeg" alt="hugekontrast profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/hugekontrast"&gt;
        &lt;span class="comment-username"&gt;Ashish Khareüòé&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/hugekontrast/comment/1dglk" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 17
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Found this on reddit! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HBYCgih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltv46anes16qwb0oqmyv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2MWNksR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1HBYCgih--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltv46anes16qwb0oqmyv.jpg" alt="Recursion joke "&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;We all &lt;a href="https://dev.to/xenoxdev/where-do-you-like-to-travel-the-most-3ef0"&gt;miss travel&lt;/a&gt;, and luckily pics like these make the wanderlust ease up. Thanks for the addition, &lt;a class="mentioned-user" href="https://dev.to/manpreet"&gt;@manpreet&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/manpreet"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciVWrHTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1YFIh3kr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/114627/2699e163-a248-4544-ac61-91d73bf5d942.jpg" alt="manpreet profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/manpreet"&gt;
        &lt;span class="comment-username"&gt;Manpreet virk&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/manpreet/comment/1dkbk" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 21
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I often visit Chail- a quiet hill station in Himachal Pradesh (India). I just love its stunning panoramic views and calmness around. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYHmK7WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1t18hkmhw3vcwmrlo56r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzVS5Kyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--kYHmK7WY--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1t18hkmhw3vcwmrlo56r.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ‚úå&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>35 Principles for 35 Years</title>
      <author>swyx</author>
      <pubDate>Thu, 22 Apr 2021 20:45:31 +0000</pubDate>
      <link>https://dev.to/swyx/35-principles-for-35-years-1n2h</link>
      <guid>https://dev.to/swyx/35-principles-for-35-years-1n2h</guid>
      <description>&lt;p&gt;I turn 35 today. Here are 35 principles I have accumulated and try to live by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Life is too Short for Short Term Games&lt;/strong&gt;. We only have so many years for long term games to compound. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="swyx profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        swyx
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üíÅ‚Äç‚ôÇÔ∏è How to Play Long Term Games:&lt;br&gt;&lt;br&gt;Systems &amp;gt; Goals&lt;br&gt;Discipline &amp;gt; Motivation&lt;br&gt;Trust &amp;gt; Distrust&lt;br&gt;Principles &amp;gt; Tactics&lt;br&gt;Writing &amp;gt; Reading&lt;br&gt;Vulnerability &amp;gt; Confidence&lt;br&gt;North Stars &amp;gt; Low Hanging Fruit&lt;br&gt;Trends &amp;gt; News&lt;br&gt;Habits &amp;gt; Sprints&lt;br&gt;Questions &amp;gt; Answers&lt;br&gt;Problems &amp;gt; Solutions&lt;br&gt;People &amp;gt; Projects
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:06 AM - 10 Jul 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1281424520100737025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1281424520100737025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1281424520100737025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Writing is Stupendously High Leverage.&lt;/strong&gt; It helps to organize my thoughts and learning (aka &lt;a href="https://twitter.com/swyx/status/1245281982797373441?lang=en"&gt;Building My Second Brain&lt;/a&gt;), and enables me to share great ideas even while I sleep (as a &lt;a href="https://twitter.com/swyx/status/1224538408132993026?lang=en"&gt;Friendcatcher&lt;/a&gt;). Blogging helped me sell $4k worth of an empty PDF on the day I decided to write my book because people trusted me, and it's led to multiple job opportunities from great companies that I would have otherwise struggled to be hired at.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn in Public&lt;/strong&gt;. &lt;a href="https://www.swyx.io/learn-in-public/"&gt;https://www.swyx.io/learn-in-public/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Good Enough is Better than Best&lt;/strong&gt;. In a world of infinite abundance you can lose yourself constantly chasing the hottest new thing. &lt;a href="https://twitter.com/swyx/status/1221129594146840577"&gt;Satisfice rather than Maximize.&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less is More&lt;/strong&gt;. Minimalism wins: Subtracting is harder than Adding. Quantity reduces perceived quality. Depth and whitespace stand out. (yes I realize the irony of this principle in a list of 35)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create Clarity.&lt;/strong&gt; Simple Explanations of What, Why, and How are extremely underrated and extremely useful. This is also a core skill of all leaders.  &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJXWU4FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1296609423574446080/k98tS5P6_normal.jpg" alt="Coding Career Community profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Coding Career Community
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/coding_career"&gt;@coding_career&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ‚ÄúYou can‚Äôt call yourself a leader by coming into a situation that is by nature uncertain, ambiguous ‚Äî and create confusion. You have to create clarity where none exists.‚Äù&lt;br&gt;&lt;br&gt;‚Äî‚ÄâSatya Nadella&lt;br&gt;&lt;br&gt;dynamite leadership quote, in a dynamite article for engineering leaders. &lt;a href="https://t.co/8sReCx8W93"&gt;twitter.com/sarah_edo/stat‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:02 PM - 15 Apr 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Sarah Drasner
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/sarah_edo"&gt;@sarah_edo&lt;/a&gt;

        &lt;/div&gt;
        Well, here goes nothin‚Äô! I was asked to open source the career ladders I used for my organization, I hope it‚Äôs a helpful resource for people:

üìù Article: https://t.co/wTGlxse1Rn
üìç Site: https://t.co/slqF0ij1dZ

A little thread with some thoughts about this üßµ
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1382726094214758400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1382726094214758400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1382726094214758400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Optimize for Change&lt;/strong&gt;. Optimizing for anything else tends to make systems MORE fragile, not less. If you learn only one &lt;a href="https://twitter.com/swyx/status/1383516418205835264"&gt;lesson from Facebook's open source&lt;/a&gt;, learn this. &lt;a href="https://overreacted.io/optimized-for-change/"&gt;https://overreacted.io/optimized-for-change/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Seek First To Understand, Then To Be Understood.&lt;/strong&gt; &lt;a href="https://twitter.com/swyx/status/1218246107781832705"&gt;https://twitter.com/swyx/status/1218246107781832705&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Praise in Public, Criticize in Private&lt;/strong&gt;. As satisfying as it might be to dump on someone publicly, I need to remember how it makes them feel. Everything is &lt;em&gt;not&lt;/em&gt; awesome, and I hate people that fake positivity. But I can either help or make them feel bad about it and the former is more effective than the latter. Exception for companies and people that are actively harming or misleading the vulnerable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build an Empathy Check Habit&lt;/strong&gt;. I can't take back an impulsive response that hurts someone. When I can't check with trusted friends, &lt;a href="https://mobile.twitter.com/swyx/status/1344687793851699200"&gt;I need to think before I tweet.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;People remember how you made them feel, before what you said&lt;/strong&gt;. A good story has more power than a good argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/swyx/status/1230021710470053889"&gt;&lt;strong&gt;Treat Others How They Want To Be Treated&lt;/strong&gt;.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Complete Truths are Not Welcome.&lt;/strong&gt; Most people are more interested in being entertained, sharing outrage, feeling good about themselves, or defending their reputation, than debating truth or improving themselves. Trying to change them is less effective than simply seeking out like minds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organize IRL Events&lt;/strong&gt;. You can do a lot to create excitement and connection in a community simply by organizing dinners and meetups and conferences.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't offer unsolicited help.&lt;/strong&gt; Make Sure Help Is Wanted Before Offering It. Men - be especially wary about this when women are talking about their problems. Sometimes they just need support, not solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ask For Help More&lt;/strong&gt;. People are happy to help and like you more when they have helped you. Don't worry about showing weakness; you are getting something far more valuable in return.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Log Your Wins&lt;/strong&gt;. e.g. when you ship something big or small, or when someone says nice things about you. They can help when you are feeling emotionally down, or when writing a &lt;a href="https://jvns.ca/blog/brag-documents/"&gt;brag document&lt;/a&gt;. Help others celebrate their wins too. PS a &lt;strong&gt;brag slack channel&lt;/strong&gt; can serve as an OLTP store of personal wins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don't End The Week With Nothing.&lt;/strong&gt; &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="swyx profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        swyx
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üÜï The Part Time Creator Manifesto&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/wFA7gsTWzt"&gt;swyx.io/part-time-crea‚Ä¶&lt;/a&gt;&lt;br&gt;&lt;br&gt;There's a lot of "quit your job, indie hack your way to freedom" on social media.&lt;br&gt;&lt;br&gt;I like my job. But I want to make too. There has to be a middle way. &lt;br&gt;&lt;br&gt;Quick thread üëá
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:33 PM - 14 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1371227946136993792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1371227946136993792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1371227946136993792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pick Up What They Put Down.&lt;/strong&gt; Guarantee feedback by giving feedback. ****&lt;a href="https://www.swyx.io/PUWTPD"&gt;https://www.swyx.io/PUWTPD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Speak Succinctly&lt;/strong&gt;. Trailing sentences and double-barreled questions are hard to understand. Set the general direction and shut up. If they're off-track, interject.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Optimize for Retention, not Consumption&lt;/strong&gt;. We are the sum total of still-relevant knowledge we still remember, not the total of the volume of content we consume.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Illustrate Your Point&lt;/strong&gt;. Adding code samples or drawing 2x2's and system diagrams makes your idea much more effective. A picture &lt;em&gt;IS&lt;/em&gt; worth a thousand words!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Separate Your Identity from Your Work.&lt;/strong&gt; You can learn a lot on the Internet for &lt;a href="https://kentcdodds.com/chats-with-kent-podcast/seasons/01/episodes/you-can-learn-a-lot-for-the-low-price-of-your-ego-with-shawn-wang"&gt;the low, low price of $YOUR_EGO&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/swyx/status/1342896023350304768"&gt;&lt;strong&gt;Build Tools For Yourself&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Collect Questions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obsess on collecting good answers and you might be precise but irrelevant.&lt;/li&gt;
&lt;li&gt;Obsess on collecting good questions and you will be approximately right.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Systems &amp;gt; Goals&lt;/strong&gt;. You don't rise to the level of your goals. You fall to the level of your systems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Play Games You Cannot Win.&lt;/strong&gt; Our world is full of "winnable" games - likes, retweets, #1 of the day, employee of the month. External motivators destroy our intrinsic drive. You don't play infinite games to win. Only way to keep &lt;a href="https://twitter.com/swyx/status/968688836468453376"&gt;childlike creativity&lt;/a&gt; is to play games that you cannot win. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Your Calendar as a Todo List.&lt;/strong&gt; Normal todo lists don't force you to make tradeoffs. Sequence your work, set limits, and know when to decline or delegate tasks. When time block planning, eat your frog: Put First Things First. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="swyx profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        swyx
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Your Calendar as Todo List:&lt;br&gt;&lt;br&gt;(why I'm getting into time block planning)
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:59 AM - 23 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1364107473724919809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1364107473724919809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1364107473724919809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Practice Stoicism&lt;/strong&gt;. It'll never stay as great as you want, it's never really as bad as you feel. This, too, shall pass.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Have a Productivity Keystone.&lt;/strong&gt; If you start a day unproductive, you are extremely likely to be unproductive the rest of the day. Instead, start off with something productive that you do every morning, you reinforce the idea that today is going to be a productive day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Incorporate.&lt;/strong&gt; Companies pay expenses before taxes, People pay taxes before expenses. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stay in the Game&lt;/strong&gt;. Berkshire Hathaway originally had a third partner, Rick Guerin. He got caught out with margin loans and had to sell out. Warren and Charlie survived 14 recessions. &lt;a href="https://www.swyx.io/psychology-of-money/"&gt;https://www.swyx.io/psychology-of-money/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't Skimp On Your Equipment.&lt;/strong&gt; Spending a few hundred dollars on your keyboard and monitor setup will save &lt;a href="https://twitter.com/swyx/status/1274054230911803392?lang=en"&gt;tens of thousands of physiotherapy and pain in future&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Earn White Collar, Spend Blue Collar&lt;/strong&gt;. Don't let your expenses rise as fast as your income - you probably don't need what you're thinking of buying. Spend part of your white collar income making up for white collar downsides - gym, group classes, &lt;a href="https://twitter.com/swyx/status/1323550900816764928"&gt;personal trainer&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Always Turn Lessons To Principles&lt;/strong&gt;. When we make mistakes or have great success, we should form them into principles so we can write them down and learn from or repeat them. &lt;a href="https://twitter.com/swyx/status/952232991455174656"&gt;It is the only way for past versions of you to communicate lessons to future you.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>reflections</category>
      <category>advice</category>
    </item>
    <item>
      <title>How to get a job out of a failed job interview</title>
      <author>Piotr Wilk</author>
      <pubDate>Thu, 22 Apr 2021 20:44:11 +0000</pubDate>
      <link>https://dev.to/wilkuintheair/how-to-get-a-job-out-of-a-failed-job-interview-4icb</link>
      <guid>https://dev.to/wilkuintheair/how-to-get-a-job-out-of-a-failed-job-interview-4icb</guid>
      <description>&lt;h5&gt;
  &lt;a href="#to-the-point"&gt;
  &lt;/a&gt;
  To the point!
&lt;/h5&gt;

&lt;p&gt;On a job interview listen carefully what the team you are supposed to join struggles with. What kind of problem they're currently solving.&lt;br&gt;
Then if they say no to you, you can just say thanks and tell them &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey, I'm good at this one you're dealing with, let me do this for you as a side project, show me the code and I will estimate it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#now-i-will-give-you-some-context-how-it-worked-in-my-case"&gt;
  &lt;/a&gt;
  Now I will give you some context how it worked in my case.
&lt;/h5&gt;

&lt;p&gt;I suck. I totally suck at job interviews. Maybe I'm smart (oh the hell with it it's my blog, I can even say I'm very smart!). But I don't talk much, I'm kind of a typical introvert programmer. And as you may already know it's better to talk at job interviews.&lt;/p&gt;

&lt;p&gt;So these guys were looking for someone who talks. They said&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sorry Piotr, you are very smart but you didn't say much at the interview, you had no energy and stuff. We're looking for a guy who can talk and has the energy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then I said&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for the interview! Listen guys, you said you're struggling with upgrading your app. I did this many times and I can help you just with this one if you want. Just let me know if that sounds interesting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#success"&gt;
  &lt;/a&gt;
  Success
&lt;/h5&gt;

&lt;p&gt;It turned out this did sound interesting to them, we've discussed the details and I've got a nice side project instead.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>career</category>
      <category>5days5blogposts</category>
    </item>
    <item>
      <title>Funciones JavaScript</title>
      <author>Francisco</author>
      <pubDate>Thu, 22 Apr 2021 20:34:25 +0000</pubDate>
      <link>https://dev.to/franciscode/funciones-javascript-3l5k</link>
      <guid>https://dev.to/franciscode/funciones-javascript-3l5k</guid>
      <description>&lt;p&gt;Antes de comenzar:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Una de las cosas que nos encontramos al aprender JavaScript son las &lt;strong&gt;Funciones&lt;/strong&gt;, en esta gu√≠a que esta basada en la gu√≠a de w3 schools. Aprenderas lo principal sobre las funciones.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#funciones-javascript"&gt;
  &lt;/a&gt;
  Funciones JavaScript
&lt;/h2&gt;

&lt;p&gt;Una funci√≥n de JavaScript es un bloque de c√≥digo dise√±ado para realizar una tarea en particular.&lt;/p&gt;

&lt;p&gt;Una funci√≥n de JavaScript se ejecuta cuando "algo" la invoca (la llama).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myFunction(p1, p2) {
  return p1 * p2;   // La funci√≥n retorna el producto entre p1 y p2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sintaxis-de-funciones-de-javascript"&gt;
  &lt;/a&gt;
  Sintaxis de funciones de JavaScript
&lt;/h3&gt;

&lt;p&gt;Una funci√≥n de JavaScript se define con la functionpalabra clave, seguida de un nombre , seguido de par√©ntesis () .&lt;/p&gt;

&lt;p&gt;Los nombres de funciones pueden contener letras, d√≠gitos, subrayados y signos de d√≥lar (las mismas reglas que las variables).&lt;/p&gt;

&lt;p&gt;Los par√©ntesis pueden incluir nombres de par√°metros separados por comas:&lt;/p&gt;

&lt;p&gt;** ( par√°metro1, par√°metro2, ... ) **&lt;/p&gt;

&lt;p&gt;El c√≥digo a ejecutar, por la funci√≥n, se coloca entre llaves: {}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function name(parameter1, parameter2, parameter3) {
  // C√≥digo a ser ejecutado
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Los &lt;strong&gt;par√°metros&lt;/strong&gt; de la funci√≥n se enumeran entre par√©ntesis () en la definici√≥n de la funci√≥n.&lt;/p&gt;

&lt;p&gt;Los argumentos de la funci√≥n son los valores que recibe la funci√≥n cuando se invoca.&lt;/p&gt;

&lt;p&gt;Dentro de la funci√≥n, los argumentos (los par√°metros) se comportan como variables locales.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Una funci√≥n es muy similar a un procedimiento o una subrutina, en otros lenguajes de programaci√≥n.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#invocaci%C3%B3n-de-una-funci%C3%B3n"&gt;
  &lt;/a&gt;
  Invocaci√≥n de una Funci√≥n
&lt;/h3&gt;

&lt;p&gt;El c√≥digo dentro de la funci√≥n se ejecutar√° cuando "algo" invoca (llama) a la funci√≥n:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cuando ocurre un evento (cuando un usuario hace clic en un bot√≥n)&lt;/li&gt;
&lt;li&gt;Cuando se invoca (llama) desde el c√≥digo JavaScript&lt;/li&gt;
&lt;li&gt;Autom√°ticamente (autoinvocado)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#retorno-de-funci%C3%B3n"&gt;
  &lt;/a&gt;
  Retorno de Funci√≥n
&lt;/h3&gt;

&lt;p&gt;Cuando JavaScript llega a una &lt;code&gt;return&lt;/code&gt; declaraci√≥n, la funci√≥n dejar√° de ejecutarse.&lt;/p&gt;

&lt;p&gt;Si la funci√≥n fue invocada desde una declaraci√≥n, JavaScript "regresar√°" para ejecutar el c√≥digo despu√©s de la declaraci√≥n de invocaci√≥n.&lt;/p&gt;

&lt;p&gt;Las funciones a menudo calculan un &lt;strong&gt;valor de retorno&lt;/strong&gt; . El valor de retorno se "devuelve" al "llamador":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = myFunction(4, 3);   

function myFunction(a, b) {
  return a * b;            
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado en x ser√°&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#por-qu%C3%A9-funciones"&gt;
  &lt;/a&gt;
  ¬øPor qu√© funciones?
&lt;/h3&gt;

&lt;p&gt;Puede reutilizar el c√≥digo: defina el c√≥digo una vez y util√≠celo muchas veces.&lt;/p&gt;

&lt;p&gt;Puede usar el mismo c√≥digo muchas veces con diferentes argumentos para producir resultados diferentes&lt;/p&gt;

&lt;p&gt;Se subir√° mas contenido con respecto a JavaScript, puedes aprender mas siguiendo la gu√≠a que proporciona la w3schools.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>function</category>
      <category>guide</category>
    </item>
    <item>
      <title>Build your own event system in Python </title>
      <author>Kuba</author>
      <pubDate>Thu, 22 Apr 2021 20:10:01 +0000</pubDate>
      <link>https://dev.to/kuba_szw/build-your-own-event-system-in-python-5hk6</link>
      <guid>https://dev.to/kuba_szw/build-your-own-event-system-in-python-5hk6</guid>
      <description>&lt;p&gt;Event system is not hard to build on your own. There are plenty of libraries ready to use, but for better understanding I want to implement it by myself. &lt;/p&gt;

&lt;p&gt;The idea of this post comes from &lt;a href="https://www.youtube.com/watch?v=oNalXg67XEE"&gt;this&lt;/a&gt; video. Today I was searching the internet for tips how to manage my project which has a lot of different modules and I wanted to do it nice and clean. One of the ideas I found is &lt;a href="https://en.wikipedia.org/wiki/Observer_pattern"&gt;Observer&lt;/a&gt; pattern from ‚ÄúGang of four‚Äù book. This should be very simple implementation of it.   &lt;/p&gt;

&lt;p&gt;First thing is that you have subscribers. They subscribe to different types of events. Every time the event is posted, you have to notify the subscriber about it. &lt;/p&gt;

&lt;p&gt;First create two methods for subscribing the event, and for posting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/event.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;

&lt;span class="n"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event_type&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example I will be creating the new user which will invoke event &lt;code&gt;new_user_created&lt;/code&gt;. Subscriber for this event will be module for sending welcome message by email. &lt;/p&gt;

&lt;p&gt;Let's create a user. It will be simple dictionary, but it can be an object too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/user.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.event&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_event&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;post_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_user_created"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now handle sending emails. We will need two things here. Some kind of email provider and some kind of handler for it. I want my email provider class to handle all 'business logic' only, so I created &lt;code&gt;modules&lt;/code&gt; folder for such.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/modules/email.py 
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"=========================="&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"From: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Subject: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"=========================="&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And handler for email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/email_handler.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.modules.email&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.event&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subscribe&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_user_registered_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'Welcome!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Some welcome message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_email_event_handlers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_user_created'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_user_registered_event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's connect everything together. Make an app file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/app.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.user&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;register_new_user&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.email_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup_email_event_handlers&lt;/span&gt;

&lt;span class="n"&gt;setup_email_event_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Jakub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'secret'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name@domain.com'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First thing to do is to set email handler events up. That means, subscribe to event &lt;code&gt;new_user_created&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If all the subscriptions are done, register new user. Output should be as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==========================
From: name@domain.com
Subject: Welcome!
Some welcome message
==========================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extend-the-system"&gt;
  &lt;/a&gt;
  Extend the system
&lt;/h3&gt;

&lt;p&gt;What if we want to extend this. Let's add some database. In modules, add &lt;code&gt;database.py&lt;/code&gt; file and sample implementation of database as a list of users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/modules/database.py 
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'======================='&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'======================='&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And handler for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/database_handler.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.modules.database&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.event&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subscribe&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_user_registered_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_database_event_handlers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_user_created'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_user_registered_event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the only thing to do is set database handler up in app file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/app.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.user&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;register_new_user&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.email_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup_email_event_handlers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.database_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup_database_event_handlers&lt;/span&gt; 

&lt;span class="n"&gt;setup_email_event_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;setup_database_event_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Jakub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'secret'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name@domain.com'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the result should be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==========================
From: name@domain.com
Subject: Welcome!
Some welcome message
==========================
==========================
[{'name': 'Jakub', 'password': 'secret', 'email': 'name@domain.com'}]
==========================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice thing about it, is that this way keeps your modules independent of each other and keeps their cohesion strong. Besides that, it allows you to manipulate order of listeners in event very quickly. No more 'ctrl + c | ctrl + v' whole code üòâ.&lt;/p&gt;

&lt;p&gt;Comment what do you think about it! How do you build workflow in your apps between multiple modules? &lt;/p&gt;

</description>
      <category>python</category>
      <category>5days5blogposts</category>
      <category>eventdriven</category>
      <category>design</category>
    </item>
    <item>
      <title>Super powers of Javascript Console</title>
      <author>Kinanee Samson</author>
      <pubDate>Thu, 22 Apr 2021 19:55:00 +0000</pubDate>
      <link>https://dev.to/kalashin1/super-powers-of-javascript-console-4ek9</link>
      <guid>https://dev.to/kalashin1/super-powers-of-javascript-console-4ek9</guid>
      <description>&lt;p&gt;Chances are if you are a JavaScript developer then you might have used the console object more times than you blink your eye. That's a big exaggeration but i just wanted to point out just how much the console object is important to JavaScript developer and most notably it's log() Method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#console-object"&gt;
  &lt;/a&gt;
  Console Object
&lt;/h2&gt;

&lt;p&gt;The console object exists on the window object in JavaScript in the browser and it gives us access to the debug console that comes built in with most browsers by default. We can access the console object in any scope. &lt;/p&gt;

&lt;p&gt;In node js the console object is also available globally from any scope, it provides a debugging console that is similar to that of the web browser, however it provides a console class with which we can create and configure a console instance which we write to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#console-object"&gt;
  &lt;/a&gt;
  console object
&lt;/h2&gt;

&lt;p&gt;There are quite a handful of methods available on the console object which we can use for debugging, most notably is the log method;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consolelog"&gt;
  &lt;/a&gt;
  console.log()
&lt;/h3&gt;

&lt;p&gt;This method simply writes a message to the console, it accepts an argument which is the object we want to log to the console. The object can be of any data type e.g strings, numbers, booleans, arrays, objects, maps e.t.c&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// some message&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// {name: 'john', friend: 'doe'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a simple demonstration of the log()  method on the console object, a more useful and pratical case is to use it to output certain variables at certain stages in your code especially when there is bug, so you can pin point exactly where the error is coming from, and how to deal with it. But do ensure that you remove all calls to console.log() when you are don debugging, you could easily forget to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consolewarn"&gt;
  &lt;/a&gt;
  console.warn()
&lt;/h3&gt;

&lt;p&gt;This is another useful method on the console object, it sends a warning to the console. It lso accepts an argument which will be output to the browsers console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not an even number`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    

&lt;span class="c1"&gt;// 1 is not an even number&lt;/span&gt;
&lt;span class="c1"&gt;// 3 is not an even number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite useful when we are building packages other developers are going to be uusing, we can use this method to let them know that something could potentially lead to an error or bug in the code if it's not dealt with or stopped as fast as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consoleerror"&gt;
  &lt;/a&gt;
  console.error()
&lt;/h3&gt;

&lt;p&gt;This method allows us to send an error message to the console, like previous methods we have discussed above, the error method also accepts an argument which will be sent to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oops yous just pushed the wrong button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// oops yous just pushed the wrong button&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference between these three is that console.log() Keeps ur console clean, just  print out a message to the console, console.warn() Will print out the message along with a warning sign, while console.error() Will log the message with an error sign.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timing-your-process"&gt;
  &lt;/a&gt;
  Timing your Process
&lt;/h3&gt;

&lt;p&gt;The console object provides another method which is useful for debugging, it allows us to keep track how long it takes to complete a task. To start a timer u call console.time() And this starts a timer, to end the timer you call console.timeEnd(). This might give you insight to how long your processes are taking to complete, this can also help you refactor your code to be more efficient and avoid unnecessary memory leaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; el'
console.log(name.indexOf('K'))
console.timeEnd()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#displaying-data-in-tabular-form"&gt;
  &lt;/a&gt;
  Displaying data in tabular form
&lt;/h3&gt;

&lt;p&gt;You can use console.table() to output a message to the browser, the cool thing about this method is that it displays the data in a tabular form when you pass in an object that has key-value pairs, e.g an array or an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this were an object, we would see the keys logged out along with their values just like we get with the array in the example above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-custom-lodger"&gt;
  &lt;/a&gt;
  Building a Custom Lodger
&lt;/h2&gt;

&lt;p&gt;if you have node js installed on your computer, you can take advantage of it and build your own custom lodger, i will b giving you a brief intro on doing that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-node-js"&gt;
  &lt;/a&gt;
  install node js
&lt;/h3&gt;

&lt;p&gt;To install node js on your computer simply head to &lt;a href="https://nodejs.org"&gt;nodejs.org&lt;/a&gt; and download the most stable version,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lodger"&gt;
  &lt;/a&gt;
  Lodger
&lt;/h3&gt;

&lt;p&gt;On node js we have the console class which is globally available. It is to note that the console on node js works similar to that of the browser. You can create an instance of a console from this console class, let's see how.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// creating writeStreams that will be used by our Console class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWriteStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./log.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWriteStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./errLog.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// when we instantiate the Console class it takes in two arguments, they mudt be writeable streams&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Lodger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outStream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;Lodger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello worl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Lodger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop doing that&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Lodger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;you touched the wrong button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspect the directory you are working with and you will see that two files have been created for ud;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;log.txt&lt;/li&gt;
&lt;li&gt;errLog.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The log.txt will hold our normal logs and warnings, e.g Loger.log() and Lodger.warn(). Our error logs will be sent to errLog.txt and that's it, done!&lt;/p&gt;

&lt;p&gt;That's it fir this article, there aremore methods available to the console object, you can check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Console?wsdl"&gt;here&lt;/a&gt; for more on the, i hope you find this useful.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>WPRecon ‚Äì Vulnerability recognition tool in CMS WordPress</title>
      <author>kalilinux</author>
      <pubDate>Thu, 22 Apr 2021 19:53:11 +0000</pubDate>
      <link>https://dev.to/kalilinux/wprecon-vulnerability-recognition-tool-in-cms-wordpress-2okc</link>
      <guid>https://dev.to/kalilinux/wprecon-vulnerability-recognition-tool-in-cms-wordpress-2okc</guid>
      <description>&lt;p&gt;For you to compile wprecon you will need to have the golang compiler installed. And for that you will access the official website of golang and will download and install it. Here!&lt;/p&gt;

&lt;p&gt;Once downloaded and installed you will download wprecon directly from github with the command:&lt;/p&gt;

&lt;p&gt;go get github.com/blackbinn/wprecon;&lt;br&gt;
cd $(go env GOPATH)/src/github.com/blackbinn/wprecon;&lt;br&gt;
make build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kali-linuxtr.net/wprecon-vulnerability-recognition-tool-in-cms-wordpress"&gt;wprecon&lt;/a&gt;&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>php</category>
      <category>security</category>
      <category>vulnerability</category>
    </item>
    <item>
      <title>My productivity setup for VS Code</title>
      <author>charly3pins</author>
      <pubDate>Thu, 22 Apr 2021 19:38:39 +0000</pubDate>
      <link>https://dev.to/charly3pins/my-productivity-setup-for-vs-code-1glf</link>
      <guid>https://dev.to/charly3pins/my-productivity-setup-for-vs-code-1glf</guid>
      <description>&lt;p&gt;I spend a lot of hours during the day coding for the company I work for and during nights or weekends for myself, so I want to be comfortable with the tools I use constantly. One of them is my editor of code, specifically &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;. I started with Java and the most extended for it is Eclipse with all its variants. Then I moved to Go and I was a Sublime user for years until I gave a try to VS Code. Oh boy! Since I tried, I never wanted to switch back. Super fast, super configurable, a lot of extensions and A LOT OF THEMES.&lt;/p&gt;

&lt;p&gt;So after a long way of researching and tweaking (a never ending story I would say) I found a setup that makes me comfortable, happy and more productive. For that reason I want to share with you lovely readers my theme, my font, my icons and the extensions I have in order to inspire you to reach your own setup same as me.&lt;/p&gt;

&lt;p&gt;The default VS Code theme is not bad at all, but I will show you how to move from this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gOfVC2h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-default.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOfVC2h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-default.jpeg" alt="vscode default"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To this amazing setup&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfI2PuZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-charly3pins.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfI2PuZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-charly3pins.jpeg" alt="vscode charly3pins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theme"&gt;
  &lt;/a&gt;
  Theme
&lt;/h2&gt;

&lt;p&gt;I am a fan of the Dark themes so that was a must for me. I've tried a few like the &lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobalt2&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The Best Theme&lt;/a&gt; or even a one more "crazy" like &lt;a href="https://marketplace.visualstudio.com/items?itemName=max-SS.cyberpunk"&gt;Cyberpunk&lt;/a&gt;, until I found the one called &lt;a href="https://github.com/DHedgecock/radical-vscode/"&gt;Radical&lt;/a&gt;. It's simply the perfect one for me. A dark theme, a retro futuristic touch with subtle neon colors and the combination of dark blue for the background and blue and grey for the text with the green, yellow and pink. It has the perfect palette for me.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jb6RUke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/DHedgecock/radical-vscode/master/assets/banner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jb6RUke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/DHedgecock/radical-vscode/master/assets/banner.png" alt="radical theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#font"&gt;
  &lt;/a&gt;
  Font
&lt;/h2&gt;

&lt;p&gt;I've installed the &lt;a href="https://github.com/pcaro90/hermit"&gt;Hermit&lt;/a&gt; as my font for the editor. I don't like the ligatures so I tried to find a monospace that was clear and readable and I found this font that I really liked. I also used it for my terminal that probably soon I will publish about how I've configured it too. In addition, for the more curious of you, the font size I'm using is of 14.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXCWruLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/hermit-font.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXCWruLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/hermit-font.jpeg" alt="hermit font"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanna find your favorite font I recommend you to check the following website &lt;a href="https://www.programmingfonts.org"&gt;https://www.programmingfonts.org&lt;/a&gt; where you can see in a live demo all the fonts and the links to their websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h2&gt;

&lt;p&gt;Previously I had some Material Icons extension installed but currenlty I'm using the default &lt;a href="https://marketplace.visualstudio.com/items?itemName=qinjia.seti-icons"&gt;Seti&lt;/a&gt; icons for VS Code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ypJ7nwgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/hellopao/vscode-seti-icons/raw/master/screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypJ7nwgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/hellopao/vscode-seti-icons/raw/master/screenshot.png" alt="seti icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h2&gt;

&lt;p&gt;The extensions that I have currently installed in my editor are the following ones:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnZd2S9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-extensions.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnZd2S9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-extensions.jpeg" alt="extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXR3qoQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-rename-tag/raw/master/images/usage.gif" alt="auto rename tag"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's a big time saver when you're working with HTML or XML because it renames the open/close tags at same time you're changning one of them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbAjoZv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CoenraadS/Bracket-Pair-Colorizer-2/raw/master/images/example.png" alt="bracket pair colorizer 2"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It helps a lot to identify the open-close pairs of brackets in your code, colorizing them with the same color. Also if you put your cursor inside a block it underlines the starting line and connects to the closing bracket with a vertical line of the same color. It really helps!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=kamikillerto.vscode-colorize"&gt;Colorize&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUGNKHTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/kamikillerto/vscode-colorize/master/assets/demo.gif" alt="colorize"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your file contains some color code this extension will highlight the code with the actual color.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code"&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simply the Dart language support for the editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter"&gt;Flutter&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCHSu5YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dartcode.org/images/marketplace/flutter_hot_reload.gif" alt="flutter"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simply the Flutter language support for the editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=golang.Go"&gt;Go&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4O_9Zv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/golang/vscode-go/raw/master/docs/images/completion-signature-help.gif" alt="go"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simply the Go language support for the editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It enables you to collaboratively edit with others in real time, regardless what programming languages you're using or app types you're building. It allows you to instantly and securely share your current project in another workspace. Developers that join your sessions receive all of their editor context from your environment (e.g. language services, debugging), which ensures they can start productively collaborating immediately, without needing to clone any repos or install any SDKs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JYUgdp4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aka.ms/vsls/quickstart/invite" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JYUgdp4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aka.ms/vsls/quickstart/invite" alt="live share"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dhedgecock.radical-vscode"&gt;Radical&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The theme already explained on its section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight"&gt;TODO Highlight&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It highlights the TODOs inside the code to make them more visible once you're reading code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NeY0QWdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/wayou/vscode-todo-highlight/raw/master/assets/material-night-eighties.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NeY0QWdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/wayou/vscode-todo-highlight/raw/master/assets/material-night-eighties.png" alt="todo highlight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;Todo Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It displays the TODO and FIXME in a tree view in the explorer panel. Clicking a TODO within the tree will open the file and put the cursor on the line containing the TODO.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iNcMLghs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Gruntfuggly/todo-tree/master/resources/screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNcMLghs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Gruntfuggly/todo-tree/master/resources/screenshot.png" alt="todo tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=zxh404.vscode-proto3"&gt;vscode-proto3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simply the proto3 language support for the editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbBeLNih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/zxh0/vscode-proto3/raw/master/images/gif1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbBeLNih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/zxh0/vscode-proto3/raw/master/images/gif1.gif" alt="vscode proto3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope it helped you and feel free to comment here or contact me on my social media for any comments, questions or suggestions.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>The Data Engineering Interview Study¬†Guide</title>
      <author>SeattleDataGuy</author>
      <pubDate>Thu, 22 Apr 2021 19:08:47 +0000</pubDate>
      <link>https://dev.to/seattledataguy/the-data-engineering-interview-study-guide-439m</link>
      <guid>https://dev.to/seattledataguy/the-data-engineering-interview-study-guide-439m</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@craftedbygc?utm_source=medium&amp;amp;utm_medium=referral"&gt;Green Chameleon&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interviewing for any technical position generally requires preparing, studying, and long, all-day interviews.&lt;/p&gt;

&lt;p&gt;Data engineering interviews, like other technical interviews, require plenty of preparation. There are a number of subjects that need to be covered in order to ensure you are ready for back-to-back questions.&lt;/p&gt;

&lt;p&gt;Some positions require &lt;a href="https://hadoop.apache.org/"&gt;Hadoop&lt;/a&gt;, others &lt;a href="https://en.wikipedia.org/wiki/SQL"&gt;SQL&lt;/a&gt;. Some roles require understanding statistics, while still others require heavy amounts of system design.&lt;/p&gt;

&lt;p&gt;We have gathered many of the resources that we have used to study and get jobs at companies in the FAANG family as well as other major tech companies. We have yet to find one that requires you to know anything about Hadoop during the interview, so that has not been included in this study guide.&lt;/p&gt;

&lt;p&gt;We recommend asking the recruiter if you aren't sure which type of interview you will be facing. Some companies are very good at keeping interviews consistent, but even then, teams can deviate depending on what they are looking for. Here are some examples of what we have noticed about some companies' data engineering interviews.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon‚Ää---‚Ää&lt;/strong&gt;SQL- and database-design heavy as well as general ETL design. Surprisingly, no Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Netflix ---&lt;/strong&gt;SQL- and code-heavy, with the expectation that you can not only write SQL and code but can optimize them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"They asked about SQL queries to find time difference between two events given certain condition. "‚Ää---‚ÄäNetflix data engineer on Glassdoor&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Expedia&lt;/strong&gt;‚Ää---‚ÄäBig Data questions, like what is Spark and RDDs, as well as SQL and Python.&lt;/p&gt;

&lt;p&gt;Due to this variance, we've created a checklist to keep track of what subject areas you have already studied and what you still need to cover: &lt;a href="https://docs.google.com/spreadsheets/d/1GOO4s1NcxCR8a44F0XnsErz5rYDxNbHAHznu4pJMRkw/edit#gid=0"&gt;data engineering study checklist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, I recently created a &lt;a href="https://www.youtube.com/watch?v=2lloOlnSzSs&amp;amp;t=1s"&gt;video guide&lt;/a&gt; to walk through the data engineering interview study guide.&lt;/p&gt;

&lt;p&gt;Let's get started with SQL.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sql"&gt;
  &lt;/a&gt;
  SQL
&lt;/h3&gt;

&lt;p&gt;As a data engineer, it is almost inevitable that you will get some SQL questions. As someone who has participated in many interviews for a lot of top tech companies, like Amazon and Capital One, I know that they usually follow some similar patterns.&lt;/p&gt;

&lt;p&gt;Typically there will be at least one question that requires an aggregation with a filter, another that requires a few joins, and then one that requires a subquery. Along with that, there might be a few curveball questions that require self-joins, recursions, and analytic functions. So let's look at a couple of concepts that are good to cover.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prevideo-sql%C2%A0problems"&gt;
  &lt;/a&gt;
  Pre-video SQL¬†problems
&lt;/h4&gt;

&lt;p&gt;These first few problems will help you gauge where you are on different concepts. That way you can take notes on the study guide, and go back and review what you feel you were not comfortable with.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/trips-and-users/"&gt;262. Trips and Users&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/human-traffic-of-stadium/"&gt;601. Human Traffic of Stadium&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/department-top-three-salaries/"&gt;185. Department Top Three Salaries&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/rising-temperature/"&gt;197. Rising Temperature&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/exchange-seats/"&gt;626. Exchange Seats&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/the-report/problem"&gt;The Report&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/nth-highest-salary/"&gt;177. Nth Highest Salary&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/symmetric-pairs/problem"&gt;Symmetric Pairs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/occupations/problem"&gt;Occupations&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/challenges/harry-potter-and-wands/problem"&gt;Ollivander's Inventory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/challenges/placements/problem"&gt;Placements&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=QFj-hZi8MKk"&gt;Learning about ROW_NUMBER and Analytic Functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=G3kYPzLWtpo&amp;amp;t=4s"&gt;Advanced Implementation Of Analytic Functions Running Total&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=XecU6Ieyu-4&amp;amp;t=54s"&gt;Advanced Implementation Of Analytic Functions Median&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2-1XQHAgDsM&amp;amp;list=PL6EDEB03D20332309"&gt;Wise Owl SQL Videos&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#postvideo-sql%C2%A0problems"&gt;
  &lt;/a&gt;
  Post-video SQL¬†problems
&lt;/h4&gt;

&lt;p&gt;Once you have finished watching the SQL videos above, consider trying the new problems below. Try to see if you feel like you are improving. Again, note down any specific topics you feel weak on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/binary-search-tree-1/problem"&gt;Binary Tree Nodes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/big-countries/"&gt;595. Big Countries&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/exchange-seats/"&gt;626. Exchange Seats&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/weather-observation-station-18/problem"&gt;Weather Observation Station 18&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/challenges/problem"&gt;Challenges&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/print-prime-numbers/problem"&gt;Print Prime Numbers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://data36.com/sql-interview-questions-tech-screening-data-analysts/"&gt;SQL Interview Questions: 3 Tech Screening Exercises (For Data Analysts)&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#join-our-newsletter"&gt;
  &lt;/a&gt;
  Join Our Newsletter
&lt;/h3&gt;

&lt;p&gt;Before scrolling any further, why not join our team's newsletter to keep up to date on data science, data engineering and tech! &lt;a href="https://seattledataguy.substack.com/"&gt;Learn more here&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#databases-etl-and-data-warehouses"&gt;
  &lt;/a&gt;
  Databases, ETL, and Data Warehouses
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPTYlJv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AqxWT8N9DpBVto4hv2V6THQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPTYlJv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AqxWT8N9DpBVto4hv2V6THQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://stackoverflow.com/questions/20346850/sql-movie-database-diagram"&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For database, &lt;a href="https://seattledataguy.substack.com/p/what-are-etls-and-why-we-use-them"&gt;ETL&lt;/a&gt;, and &lt;a href="https://www.theseattledataguy.com/what-are-the-benefits-of-cloud-data-warehousing-and-why-you-should-migrate/#page-content"&gt;data warehouse&lt;/a&gt; design questions, we have gathered some books and videos we hope will help you out when it comes to explaining your design in an interview. In addition, we have listed a few plausible database/DW concepts you could attempt to design out on your own.&lt;/p&gt;

&lt;p&gt;We recommend going through the videos and at least skimming the Data Warehouse Toolkit before attempting the self-practice problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/books/data-warehouse-dw-toolkit/"&gt;The Data Warehouse Toolkit&lt;/a&gt;by Ralph Kimball&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=I_rxqSJAj6U"&gt;Designing a Traditional Relational Database Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=--OJpdPeH80"&gt;Data Warehouse Design Video&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#selfpractice-problems"&gt;
  &lt;/a&gt;
  Self-practice problems
&lt;/h4&gt;

&lt;p&gt;For this part of your interview practice, we are going to list a few business systems that you can try to design out. First, we recommend designing a relational database, then thinking about how you would design an ETL and DW that rely on that relational DB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In addition, we have found it very common that interviewers will base their interview questions on your design. So think about some of the questions you could answer with your DB and list them.&lt;/p&gt;

&lt;p&gt;Design a database/ETL and DW for a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  dating app&lt;/li&gt;
&lt;li&gt;  bicycle rental service&lt;/li&gt;
&lt;li&gt;  music streaming app&lt;/li&gt;
&lt;li&gt;  job search website&lt;/li&gt;
&lt;li&gt;  Udemy-like website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just a few ideas. We hope they help you have a clearer idea of what you can practice modeling and designing. Take some time to think about how users interact with these websites before getting started.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#programming-problems"&gt;
  &lt;/a&gt;
  Programming Problems
&lt;/h3&gt;

&lt;p&gt;Data engineers do a significant amount of programming in their daily life. There are several specific languages data engineers use. Python is arguably the most common.&lt;/p&gt;

&lt;p&gt;If the role requires a lot of Hadoop work, then &lt;a href="https://www.java.com/en/"&gt;Java&lt;/a&gt; is also a useful language to have. There are a few other useful languages, like Java and &lt;a href="https://docs.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.1"&gt;PowerShell&lt;/a&gt; (if you work at a Microsoft shop).&lt;/p&gt;

&lt;p&gt;There are two types of questions we have experienced. Some interviewers will ask you more operational questions. Others will ask classic algorithm and data structure questions.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#operational-programming-problems"&gt;
  &lt;/a&gt;
  Operational Programming Problems
&lt;/h3&gt;

&lt;p&gt;Operational interview questions are harder to prep for. There are no "classic" interview questions here. However, they are also often easier to figure out on the spot. Algorithm interview questions usually have some sort of trick. Like the balanced brackets problem: If you don't know you need to use queues, it will be very difficult to get to the correct answer.&lt;/p&gt;

&lt;p&gt;Operational problems, however, will be more focused on workflows and business processes. So as long as you are good at walking through real problems, this should be easier. Here are some problems that are great for prepping. We find it is helpful to know how to use arrays and dictionaries. Beyond that, there isn't too much more required.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/kangaroo/problem"&gt;Kangaroo problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/breaking-best-and-worst-records/problem"&gt;Breaking records&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/find-a-string/problem"&gt;Find a string&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/itertools-permutations/problem"&gt;itertools.permutations()&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/no-idea/problem"&gt;No idea!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/day-of-the-programmer/problem"&gt;Days of the programmer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/climbing-the-leaderboard/problem"&gt;Leaderboard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/word-order/problem"&gt;Word order&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/sherlock-and-squares/problem"&gt;Sherlock and squares&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/challenges/equality-in-a-array/problem"&gt;Equalize the array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/challenges/apple-and-orange/problem"&gt;Apples and oranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/domains/python"&gt;More operational style questions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  Algorithms and Data Structures
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ag31wfXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A0SDxosKzKb-Zpd91" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ag31wfXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A0SDxosKzKb-Zpd91" alt="abstract image of data on a screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@markusspiske?utm_source=medium&amp;amp;utm_medium=referral"&gt;Markus Spiske&lt;/a&gt; on¬†&lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before going too deep into data structure and algorithms, let's do a quick check to see how you are currently doing in this area. We have listed eight LeetCode problems that vary in difficulty. Try these out and try to gauge yourself on how long it takes you, as well as how many hints you needed. If you are following along with the study guide, then note this down. At the end of this list are a few more questions. So once you have watched all the videos, consider doing those problems, and see if you feel like you are improving!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prestudy-problems"&gt;
  &lt;/a&gt;
  Pre-study problems
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/sum-of-even-numbers-after-queries/"&gt;985. Sum of even numbers after queries&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/robot-return-to-origin/"&gt;657. Robot return to origin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/n-repeated-element-in-size-2n-array/"&gt;961. N-repeated element in size 2N array&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/balanced-binary-tree/"&gt;110. Balanced binary tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/"&gt;3. Longest substring without repeating characters&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/"&gt;19. Remove Nth node from end of list&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/merge-k-sorted-lists/"&gt;23. Merge k sorted lists&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/next-permutation/"&gt;31. Next permutation&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that you have gone through these eight questions and shaken off the rust, let's start reviewing these concepts.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#data-structures"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Data structures&lt;/strong&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=bum_19loj9A"&gt;Data Structures &amp;amp; Algorithms #1‚Ää---‚ÄäWhat Are Data Structures?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/njTh_OwMljA"&gt;Data Structures: Linked Lists&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/oSWTXtMglKE"&gt;Data Structures: Trees&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/t0Cq6tVNRBA"&gt;Data Structures: Heaps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/shs0KM3wKv8"&gt;Data Structures: Hash Tables&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/wjI1WNcIntg"&gt;Data Structures: Stacks and Queues&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/DuDz6B4cqVc"&gt;Data Structures: Crash Course Computer Science #14&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=zIjfhVPRZCg"&gt;Data Structures: Tries&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#algorithms"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Algorithms&lt;/strong&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=p65AHm9MX80"&gt;Python Algorithms for Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=zaBhtODEL0w&amp;amp;list=PLX6IKgS15Ue02WDPRCmYKuZicQHit9kFt"&gt;Algorithms: Graph Search, DFS, and BFS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/P3YID7liBug"&gt;Algorithms: Binary Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/KEEKn7Me-ms"&gt;Algorithms: Recursion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/6Gv8vg0kcHc"&gt;Algorithms: Bubble Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/KF2j-9iSf4Q"&gt;Algorithms: Merge Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/SLauY6PpjW4"&gt;Algorithms: Quicksort&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#big-o%C2%A0notation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Big O¬†notation&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=D6xkbGLQesk"&gt;Introduction to Big O Notation and Time Complexity (Data Structures &amp;amp; Algorithms #7)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-interview-walkthroughs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Some interview walk-throughs&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5o-kdjv7FD0"&gt;Amazon Coding Interview Question‚Ää---‚ÄäRecursive Staircase Problem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=7HgsS8bRvjo"&gt;Google Coding Interview‚Ää---‚ÄäUniversal Value Tree Problem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=GJdiM-muYqc"&gt;Google Coding Interview Question and Answer #1: First Recurring Character&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#postvideo-problems"&gt;
  &lt;/a&gt;
  Post-video problems
&lt;/h4&gt;

&lt;p&gt;Once you have finished the videos above, consider trying the algorithm and data structure problems below. Make sure you keep track of how comfortable you felt when working on the problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/bigger-is-greater/problem"&gt;Bigger is greater&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/zigzag-conversion/"&gt;6. Zigzag conversion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/reverse-integer/"&gt;7. Reverse integer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/combination-sum-ii/"&gt;40. Combination sum II&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/multiply-strings/"&gt;43. Multiply strings&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/larrys-array/problem"&gt;Larry's array&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/challenges/short-palindrome/problem"&gt;Short palindrome&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://leetcode.com/problems/valid-number/"&gt;65. Valid number&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you still feel like you need help, then consider taking a &lt;a href="https://www.udemy.com/course/coding-interview-bootcamp-algorithms-and-data-structure/"&gt;course on algorithms and data structures&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#big-data-frameworks"&gt;
  &lt;/a&gt;
  Big Data Frameworks
&lt;/h3&gt;

&lt;p&gt;Back in 2020, I made a video about practicing for a data engineering interview. Funny thing was, a person commented about the video and pointed back to my original data engineering study guide. Just by happenstance!&lt;/p&gt;

&lt;p&gt;Small world.&lt;/p&gt;

&lt;p&gt;They also added another section. In this case, they added &lt;a href="https://en.wikipedia.org/wiki/Apache_Spark"&gt;Spark&lt;/a&gt;. So for those of you out there needing to study for Spark, here is what Paul Russel added to the checklist. What would you add?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.toptal.com/spark/introduction-to-apache-spark"&gt;Architecture Overview &amp;amp; Use Cases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sparkbyexamples.com/spark/"&gt;Spark by Examples (tutorial documentation)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://s3.amazonaws.com/assets.datacamp.com/blog_assets/PySpark_SQL_Cheat_Sheet_Python.pdf"&gt;PySpark Syntax Cheat Sheet&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We do hope this list will help you prepare for your next data engineering interview. Please let us know if you have any questions or need any future help.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>career</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>From Rails scaffold listing to Hotwire infinite scroll</title>
      <author>Andrzej Krzywda</author>
      <pubDate>Thu, 22 Apr 2021 19:06:01 +0000</pubDate>
      <link>https://dev.to/andrzejkrzywda/from-rails-scaffold-listing-to-hotwire-infinite-scroll-3273</link>
      <guid>https://dev.to/andrzejkrzywda/from-rails-scaffold-listing-to-hotwire-infinite-scroll-3273</guid>
      <description>&lt;p&gt;Rails scaffold is a technique for quickly generating a typical CRUD UI. &lt;/p&gt;

&lt;p&gt;It's a server-side rendered html which allows listing/editing/creating/deleting records.&lt;/p&gt;

&lt;p&gt;One of the promises of the modern approach to building UI (like hotwire or stimulus reflex) is how easy it is to just tweak the backend logic, without using JavaScript at all.&lt;/p&gt;

&lt;p&gt;Let's look at the example of infinite scroll - full tutorial how to do it is &lt;a href="https://lewisyoul.github.io/infinitely-scrolling-lists-with-hotwire-and-zero-javascript"&gt;here&lt;/a&gt; and &lt;a href="https://dev.to/stevepolitodesign/create-an-infinite-scrolling-blog-roll-in-rails-with-hotwire-2a8n"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I just want to focus on the "diff" how to make it work.&lt;/p&gt;

&lt;p&gt;This is a typical Rails scaffold preparing all the posts to be displayed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the equivalent Rails view (rendering html).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in order to use Hotwire (actually Turbo Frame) we change the controller to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:page&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:page&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;PER_PAGE&lt;/span&gt;
    &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PER_PAGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@next_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;PER_PAGE&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In short, we pass 3 parameters to the view: page, posts, next_page.&lt;/p&gt;

&lt;p&gt;And the view changes to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"posts_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@next_page&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"posts_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@next_page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;loading: :lazy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;src: &lt;/span&gt;&lt;span class="n"&gt;posts_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;page: &lt;/span&gt;&lt;span class="vi"&gt;@next_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We wrap the whole thing with a &lt;code&gt;turbo_frame_tag&lt;/code&gt; and we append more such frames for next pages. That's it.&lt;/p&gt;

&lt;p&gt;As you can see the middle of the view stayed the same. &lt;/p&gt;

&lt;p&gt;The UI now lists posts and keeps appending them when we scroll down.&lt;/p&gt;

&lt;p&gt;I'm not claiming that it's amazing or something. But the practicality of getting our app more interactive, while not jumping to JavaScript is simple yet powerful.&lt;/p&gt;

&lt;p&gt;I like it as it allows me to gradually extend my app with new features. &lt;/p&gt;

&lt;p&gt;If you like audio to educate yourself then I recommend this podcast to learn more how it works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codewithjason.com/rails-with-jason-podcast/episodes/092-vladimir-dementyev-5fK__ZQf/"&gt;https://www.codewithjason.com/rails-with-jason-podcast/episodes/092-vladimir-dementyev-5fK__ZQf/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>5days5blogposts</category>
      <category>rails</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Environmental Impact of Digital Currency, a Problematic Spotify Patent, &amp; more on DevNews</title>
      <author>Josh Puetz</author>
      <pubDate>Thu, 22 Apr 2021 18:44:00 +0000</pubDate>
      <link>https://dev.to/devteam/u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-more-on-devnews-5dab</link>
      <guid>https://dev.to/devteam/u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-more-on-devnews-5dab</guid>
      <description>&lt;p&gt;Happy &lt;a href="https://dev.to/devteam/building-a-healthier-planet-with-open-source-software-25jn"&gt;Earth Day&lt;/a&gt; from all of us at DEV! In this week's episode of the DevNews podcast, &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 and I covered a story that is particularly relevant today...&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s4-e2-u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-a-problematic-spotify-patent-and-wordpress-google-floc-block"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S4:E2 - U.K. Central Bank Digital Currency, the Environmental Impact of Digital Currency, a Problematic Spotify Patent, and WordPress‚Äô Google FLoC Block&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s4-e2-u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-a-problematic-spotify-patent-and-wordpress-google-floc-block" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s4-e2-u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-a-problematic-spotify-patent-and-wordpress-google-floc-block" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s4-e2-u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-a-problematic-spotify-patent-and-wordpress-google-floc-block" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s4-e2-u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-a-problematic-spotify-patent-and-wordpress-google-floc-block" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s4-e2-u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-a-problematic-spotify-patent-and-wordpress-google-floc-block"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s4-e2-u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-a-problematic-spotify-patent-and-wordpress-google-floc-block"&gt;
      &lt;img id="episode-profile-image" alt="S4:E2 - U.K. Central Bank Digital Currency, the Environmental Impact of Digital Currency, a Problematic Spotify Patent, and WordPress‚Äô Google FLoC Block" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;... &lt;strong&gt;The environmental impact of digital currency.&lt;/strong&gt; For this story, we spoke with &lt;a href="//twitter.com/ofnumbers"&gt;Tim Swanson&lt;/a&gt; (Founder and Director of Research at Post Oak Labs, Head of Market Intelligence at ClearMatics, and the author of the research paper, ‚ÄúBitcoin &amp;amp; Other PoW* Coins Are An ESG** Nightmare‚Äù).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saron-and-i-also-chatted-about-the-following-things"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Saron and I also chatted about the following things...&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WordPress blocking Google‚Äôs Federated Learning of Cohorts tracking technology&lt;/li&gt;
&lt;li&gt;The Bank of England and HM Treasury creating a joint task force to explore the possibility of creating a central bank digital currency in the U.K&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@Isedua"&gt;Isedua Oribhabor‚Äôs&lt;/a&gt; letter to Spotify on why the company should abandon their recent speech-recognition patent of a technology to detect emotion, gender, and age. Oribhador is a U.S. Policy Analyst at Access Now ‚Äî and they joined us for this episode, too! &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;*POW = proof of work&lt;/em&gt;&lt;br&gt;
&lt;em&gt;**ESG = environmental, social, and governance&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope you enjoy this episode! You should feel good about the fact that you saved some trees by listening to DevNews instead of buying the paper üòâ Enjoy the rest of your Earth Day!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; ‚Äî or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s4-e2-u-k-central-bank-digital-currency-environmental/id1525581923?i=1000518214472"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/39enVKOeI7jEfXJR1Yf8xW"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzI2?hl=en&amp;amp;ved=2ahUKEwiZidmLwJLwAhXL3J4KHf9XCJkQjrkEegQIBBAI&amp;amp;ep=6"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s4-e2-u-k-central-bank-digital-currency-the-environmental-impact-of-digital-currency-a-problematic-spotify-patent-and-wordpress-google-floc-block-83380738"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=162514769"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.dev/podcasts/devnews/episodes/158"&gt;Transcript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season four sponsors, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; and &lt;a href="https://rudderstack.com/"&gt;Rudderstack&lt;/a&gt; ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/sA1r7HKuUX20g/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/sA1r7HKuUX20g/giphy.gif" alt="Happy Earth Day"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
  </channel>
</rss>
