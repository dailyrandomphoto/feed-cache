<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to Entity-Relationship model</title>
      <author>Abhinav Pandey</author>
      <pubDate>Tue, 23 Nov 2021 16:42:06 +0000</pubDate>
      <link>https://dev.to/abh1navv/introduction-to-entity-relationship-model-2kg3</link>
      <guid>https://dev.to/abh1navv/introduction-to-entity-relationship-model-2kg3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#relational-databases"&gt;
  &lt;/a&gt;
  Relational Databases
&lt;/h2&gt;

&lt;p&gt;Relational databases are the most common database type. &lt;br&gt;
They are also very flexible and can be used for many different applications. Like for example, they can be used for storing data about your users. &lt;/p&gt;

&lt;p&gt;They work with an entity-relationship model and are defined by tables and columns.&lt;/p&gt;

&lt;p&gt;Let's take a look at the main components of a relational database. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#components-of-a-relational-database"&gt;
  &lt;/a&gt;
  Components of a Relational Database
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Schema&lt;/strong&gt; - The schema is the structure of the database. It defines the tables and columns. An example of the User schema is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;User&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;AUTOINCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt; - the actual data stored in the database. An example of the User data is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id: 1&lt;/li&gt;
&lt;li&gt;name: John Doe&lt;/li&gt;
&lt;li&gt;email: &lt;a href="mailto:johndoe@gmail.com"&gt;johndoe@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;password: ajn1489valpa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Structured Query Language&lt;/strong&gt; -  the language used to query the database. It is used to select, insert, update and delete data. A few examples of SQL queries are the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'John Doe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'johndoe@gmail.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ajn1489valpa'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'John Doe'&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#entityrelationship-model"&gt;
  &lt;/a&gt;
  Entity-Relationship Model
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Entity&lt;/strong&gt;: Each type of table in a database is called an entity. An entity can have different relationships with other entities. &lt;br&gt;
&lt;strong&gt;Relationship&lt;/strong&gt;: A relationship is a way of connecting two entities. A relationship can be one-to-one, one-to-many, many-to-one or many-to-many. &lt;/p&gt;

&lt;p&gt;Types of relationships:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;One-to-One&lt;/strong&gt;: A one-to-one relationship is a relationship where each entity has a unique relationship with another entity. For example, a user has a unique relationship with their profile.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;One-to-Many&lt;/strong&gt;: A one-to-many relationship is a relationship where each entity has a relationship with multiple other entities. For example, a user can have many posts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Many-to-One&lt;/strong&gt;: A many-to-one relationship is a relationship where many entities have a relationship with one other entity. It is the opposite of a one-to-many relationship. For example, many posts can be created by a user.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Many-to-Many&lt;/strong&gt;: A many-to-many relationship is a relationship where many entities have a relationship with many other entities. For example, many users can like many posts. Many-to-many relationships are usually stored in a join table which &lt;em&gt;can&lt;/em&gt; be an entity in its own right. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How are relationships defined?&lt;/strong&gt;&lt;br&gt;
A relationship is defined by the foreign key. A foreign key is a column in a table that references primary key of another table. For example, a profile has a foreign key to a user.&lt;/p&gt;

&lt;p&gt;Let's create a profiles table to demonstrate foreign keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;profiles&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;AUTOINCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;bio&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The foreign key is defined in the &lt;code&gt;profiles&lt;/code&gt; table. &lt;br&gt;
The &lt;code&gt;user_id&lt;/code&gt; column references the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;users&lt;/code&gt; table. &lt;br&gt;
This means that each profile belongs to a &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Syntactically, we could also define the relationship in the &lt;code&gt;users&lt;/code&gt; table. &lt;br&gt;
However, semantically, it is better to define the relationship in the &lt;code&gt;profiles&lt;/code&gt; table.&lt;br&gt;
When we define a foreign key constraint, adding an item to the table will require the referenced primary key to exist. This means that the user must be created before the profile.&lt;/p&gt;

&lt;p&gt;Let's create more tables and define one-to-many, many-to-one and many-to-many relationships.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;AUTOINCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="nb"&gt;DATETIME&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="nb"&gt;DATETIME&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIMESTAMP&lt;/span&gt;
    &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;AUTOINCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;post_id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="nb"&gt;DATETIME&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="nb"&gt;DATETIME&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIMESTAMP&lt;/span&gt;
    &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;posts table&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;posts&lt;/code&gt; table, we have a &lt;code&gt;user_id&lt;/code&gt; column that references the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;users&lt;/code&gt; table. &lt;/p&gt;

&lt;p&gt;This means that each post belongs to a &lt;code&gt;user&lt;/code&gt;. But a user can have many posts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;comments table&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the comments table, the &lt;code&gt;post_id&lt;/code&gt; column references the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;posts&lt;/code&gt; table. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;user_id&lt;/code&gt; column references the id column in the &lt;code&gt;users&lt;/code&gt; table. &lt;/p&gt;

&lt;p&gt;Comments have a many-to-one relationship with posts as well as users. &lt;br&gt;
Many comments can be associated with a single post. Many comments can be associated with a single user.&lt;/p&gt;

&lt;p&gt;The comments table also demonstrates the many-to-many relationship between posts and users. &lt;/p&gt;




&lt;p&gt;Thanks for reading! Hope this gives you some ideas on how to define entity-relationship models in SQL. Stay tuned for more! If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt; &lt;/p&gt;

</description>
      <category>sql</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>database</category>
    </item>
    <item>
      <title>3 easy ways to install nodejs in linux</title>
      <author>Aashish Panthi</author>
      <pubDate>Tue, 23 Nov 2021 16:40:40 +0000</pubDate>
      <link>https://dev.to/aashishpanthi/3-easy-ways-to-install-nodejs-in-linux-lc4</link>
      <guid>https://dev.to/aashishpanthi/3-easy-ways-to-install-nodejs-in-linux-lc4</guid>
      <description>&lt;p&gt;Installing node in linux is quite challenging sometimes, especially if you are a beginner and don't have any idea on how to do that.&lt;/p&gt;

&lt;p&gt;In this article, I will show you three different ways of installing Nodejs in linux. You can feel comfortable following the same process in any ubuntu-baseds distro you use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-installation-using-apt-package-manager"&gt;
  &lt;/a&gt;
  1. Installation using apt package manager
&lt;/h2&gt;

&lt;p&gt;Installation of Nodejs is insanely easy with apt package manager in linux. To install nodejs with apt package manager, just open up your terminal. Copy this command &lt;code&gt;sudo apt update  &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt; and paste here, hit enter, and type your password. Then we use the command &lt;code&gt;sudo apt install nodejs&lt;/code&gt;, press enter, wait few seconds and you find your nodejs is successfully installed. To check the version just type the command &lt;code&gt;node —version&lt;/code&gt; and you get the version. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-installation-with-linux-binaries"&gt;
  &lt;/a&gt;
  2. Installation with Linux Binaries
&lt;/h2&gt;

&lt;p&gt;To install linux binaries, just open up your browser and head over to &lt;a href="https://nodejs.org/"&gt;nodejs.org&lt;/a&gt;. Click on &lt;a href="https://nodejs.org/en/download/"&gt;downloads tab&lt;/a&gt; then choose linux binaries. After the download is completed, go to the directory where you've downloaded your nodejs. Then extract the tar file by right-clicking on it and click on extract here.&lt;/p&gt;

&lt;p&gt;You'll have all the necessary folders here. Now, right-click and open the terminal here. Here we have to copy some folders from this directory(downloads) to our user(/user) directory. Copy this command &lt;code&gt;sudo cp -r ./{lib,share,include,bin} /usr&lt;/code&gt;, paste it here, and hit enter. Then type your password and your nodejs is installed. If you verify if it’s actually installed or not. You can use the same command &lt;code&gt;node --version&lt;/code&gt; and you get the nodejs version and &lt;code&gt;npm --version&lt;/code&gt; returns the npm version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-installation-using-nvm"&gt;
  &lt;/a&gt;
  3. Installation using NVM
&lt;/h2&gt;

&lt;p&gt;If you’re wondering what this NVM is then it’s a node version manager which helps us to easily install and switch between different versions of node.&lt;br&gt;
Actually installing NVM is also simple. We can directly install NVM using curl but in some cases, you may run into a problem. So, to avoid such problems just create some files with this command &lt;code&gt;touch ~/.bash_profile ~/.bashrc ~/.zshrc ~/.profile&lt;/code&gt;. Again run the following command &lt;code&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash&lt;/code&gt; or this one &lt;code&gt;wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash&lt;/code&gt;. It's your choice but either of them downloads a script and runs it. Press enter and if it looks like you don't have curl installed. You can simply install the curl with the command &lt;code&gt;sudo apt install curl&lt;/code&gt; and rerun that command again. To check if nvm has been installed or not, you need to restart the terminal so close the active one, and open a new one. Check the version with command &lt;code&gt;nvm --version&lt;/code&gt; and if it returns the version then you have your NVM ready to use. And there are a lot of commands waiting for you to use them. One of them is &lt;code&gt;nvm ls&lt;/code&gt; which lists all of the installed nodejs versions on your system. Then we have &lt;code&gt;nvm ls-remote&lt;/code&gt; which basically lists all of the nodejs versions available till now. There will bw few LTS versions also in there but if we only want to install the latest LTS i.e 14.x (at the time of writing this article). Again to install nodejs, we have the simple command &lt;code&gt;nvm install node&lt;/code&gt; which installs the latest release of nodejs but if we want to install some specific versions then instead of the node we give the version of nodejs that we want to install. In this case, it is &lt;strong&gt;14.18.0&lt;/strong&gt;.  Press enter and it will download and install our desired version of the node. You can verify if it is installed or not by checking the version of nodejs.&lt;/p&gt;

&lt;p&gt;You can install as many versions of the node you want on your computer. If you want to switch to nodejs version n from version m then there is indeed an easy way to switch between them with the command &lt;code&gt;nvm use version_of_node&lt;/code&gt;. In this case, it's v14.18.0, hit enter and you can verify again by checking the version of nodejs. And you can also check the version of npm.&lt;/p&gt;

&lt;p&gt;Those were the ways you can install nodejs with. Watch this video fully for the detailed information:&lt;br&gt;
&lt;a href="https://youtu.be/82xn_-MiVOM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ce0Od9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/82xn_-MiVOM/0.jpg" alt="Nodejs installation in linux" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>linux</category>
    </item>
    <item>
      <title>Ultimate list of 100+ deals for Black Friday</title>
      <author>Andrew Malrowe</author>
      <pubDate>Tue, 23 Nov 2021 16:07:08 +0000</pubDate>
      <link>https://dev.to/andrewmalrowe/ultimate-list-of-100-deals-for-black-friday-38c4</link>
      <guid>https://dev.to/andrewmalrowe/ultimate-list-of-100-deals-for-black-friday-38c4</guid>
      <description>&lt;p&gt;This is the ultimate list of 100+ software deals available for Black Friday 2021. The list features different types of software - from development and testing to marketing, sales, and web design. The discounts vary from 10% to 70%. I tried to make the list as simple as possible to improve the readability.&lt;/p&gt;

&lt;p&gt;Some deals are offered without a coupon - you will find the offer by clicking the link or on a pricing page.&lt;/p&gt;

&lt;p&gt;In case there's something missing on the list - please let me know in the comments. I will continue adding the new deals. Happy shopping to everyone! 😉😉😉&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#blisk-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://blisk.io?utm_source=dev.to&amp;amp;utm_medium=article&amp;amp;utm_campaign=100-deals-for-black-friday"&gt;Blisk&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Mobile testing, cross-device testing. Browser for developers, QAs, designers, marketers with hot reload, error notifications, screenshots, and intergration with command line.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNc1soJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.blisk.io/getting-started/v14/multi-device-set.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNc1soJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.blisk.io/getting-started/v14/multi-device-set.jpg" alt="Blisk app" width="880" height="491"&gt;&lt;/a&gt; &lt;code&gt;Coupon: BF2021&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#slides-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://designmodo.com/slides/"&gt;Slides&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Create static websites with clean code.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#startup-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://designmodo.com/startup/"&gt;Startup&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Build websites with visual editor.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#static-app-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://static.app/"&gt;Static App&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Website hosting.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pulsetic-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://pulsetic.com/"&gt;Pulsetic&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Website monitoring tool.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#blocksy-by-creativethemes-40-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://creativethemes.com/blocksy/"&gt;Blocksy by CreativeThemes&lt;/a&gt; - 40% off
&lt;/h3&gt;

&lt;p&gt;Wordpress theme.&lt;br&gt;
 &lt;code&gt;Coupon: BFCM2021&lt;/code&gt; expires on December 3.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#postcards-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://designmodo.com/postcards/"&gt;Postcards&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;HTML email template builder.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#mailpost-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://mailpost.io/"&gt;Mailpost&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Email marketing tool.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#siter-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://siter.io/"&gt;Siter&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;HTML email template builder.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#unspam-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://unspam.email/"&gt;Unspam&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;Email spam tester and heat map prediction.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#microanalytics-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://microanalytics.io/"&gt;Microanalytics&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;Website analytics.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#feeda-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://feeda.io/"&gt;Feeda&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;User feedback collection and management system.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#materio-dashboard-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://themeselection.com/products/materio-vuetify-vuejs-admin-template/"&gt;Materio Dashboard&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Dashboard template.&lt;br&gt;
 &lt;code&gt;Coupon: BLACK25OFF&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#adobe-creative-cloud-design-app-up-to-40-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.adobe.com/creativecloud.html"&gt;Adobe Creative Cloud Design App&lt;/a&gt; - up to 40% off
&lt;/h3&gt;

&lt;p&gt;Collection of 20+ desktop and mobile apps and services for photography, design, video, web, UX.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#zyro-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://zyro.com/in"&gt;Zyro&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Build websites with visual editor.&lt;br&gt;
 &lt;code&gt;Coupon: ZYROBF&lt;/code&gt; expires on December 7.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#vue-school-40-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://vueschool.io/sales/blackfriday?"&gt;Vue School&lt;/a&gt; - 40% off
&lt;/h3&gt;

&lt;p&gt;Learn VueJS, NuxtJS, Vuex and more.&lt;/p&gt;

&lt;p&gt;Discount expires on December 7.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#mockplus-up-to-72-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mockplus.com/buy/black-friday?"&gt;Mockplus&lt;/a&gt; - up to 72% off
&lt;/h3&gt;

&lt;p&gt;Prototyping and mockups.&lt;/p&gt;

&lt;p&gt;Discount expires on December 15.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#udemy-up-to-85-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt; - up to 85% off
&lt;/h3&gt;

&lt;p&gt;Online courses, eLearning.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#beaver-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.wpbeaverbuilder.com/"&gt;Beaver&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Drag-and-drop WordPress page builder.&lt;/p&gt;

&lt;p&gt;Discount expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pluralsight-up-to-40-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.pluralsight.com/"&gt;Pluralsight&lt;/a&gt; - up to 40% off
&lt;/h3&gt;

&lt;p&gt;Online courses, eLearning.&lt;/p&gt;

&lt;p&gt;Discount expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#weblium-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://weblium.com/"&gt;Weblium&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Build websites with visual editor.&lt;br&gt;
 &lt;code&gt;Coupon: WBF25OFF&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#codecademy-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Online courses, eLearning.&lt;br&gt;
 &lt;code&gt;Coupon: CYBER21&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#datacamp-75-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.datacamp.com/promo/black-friday-sale-2021?%7B%7D"&gt;DataCamp&lt;/a&gt; - 75% off
&lt;/h3&gt;

&lt;p&gt;Online courses, eLearning.&lt;/p&gt;

&lt;p&gt;Discount expires on November 27.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setapp-36-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://stacksocial.com/sales/setapp-1-year-subscription-2?rid=6084091"&gt;Setapp&lt;/a&gt; - 36% off
&lt;/h3&gt;

&lt;p&gt;Productivity application for macOS.&lt;br&gt;
 &lt;code&gt;Coupon: APPS30&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#shellhistory-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://loshadki.app/blog/2021-11-11-shellhistory-1.1.0/"&gt;ShellHistory&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Backup, sync and organize your shell history.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#proxyman-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://proxyman.io/"&gt;Proxyman&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Web Debugging Proxy.&lt;br&gt;
 &lt;code&gt;Coupon: PROXYMAN_BLACK_FRIDAY_2021&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#proxyman-33-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/us/app/svg-shaper-for-swiftui/id1566140414"&gt;Proxyman&lt;/a&gt; - 33% off
&lt;/h3&gt;

&lt;p&gt;SVG to SwiftUI Shapes/Views converter.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#script-editor-for-homematic-16-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/us/app/hmscripteditor/id1483239744"&gt;Script Editor for HomeMatic&lt;/a&gt; - 16% off
&lt;/h3&gt;

&lt;p&gt;Edit and Run HomeMatic Rega scripts.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dropdmg-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://c-command.com/store/sale"&gt;DropDMG&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Create macOS disk images .dmg files.&lt;br&gt;
 &lt;code&gt;Coupon: BLACKFRIDAY2021&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sqlpro-studio-16-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sqlprostudio.com/blackfriday.html"&gt;SQLPro Studio&lt;/a&gt; - 16% off
&lt;/h3&gt;

&lt;p&gt;Native database client for macOS and iOS.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tower-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.git-tower.com/"&gt;Tower&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Git client for macOS and Windows.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#blisk-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://blisk.io?utm_source=dev.to&amp;amp;utm_medium=article&amp;amp;utm_campaign=100-deals-for-black-friday"&gt;Blisk&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Mobile testing, cross-device testing. Browser for developers, QAs, designers, marketers with hot reload, error notifications, screenshots, and intergration with command line.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNc1soJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.blisk.io/getting-started/v14/multi-device-set.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNc1soJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.blisk.io/getting-started/v14/multi-device-set.jpg" alt="Blisk app" width="880" height="491"&gt;&lt;/a&gt; &lt;code&gt;Coupon: BF2021&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sidemirror-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://sidemirrorapp.com/"&gt;SideMirror&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Tool for presenters.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#attendant-for-zoom-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/app/id1511771853"&gt;Attendant for Zoom&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Manage Zoom meetings with automations.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#participant-for-zoom-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/app/id1532789823"&gt;Participant for Zoom&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;Zoom client with saved passcodes, native AirPlay, Apple Watch control.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#rezoom-33-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/app/id1562226532"&gt;Rezoom&lt;/a&gt; - 33% off
&lt;/h3&gt;

&lt;p&gt;Remote control for Zoom.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#mdx-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://mdx.one/"&gt;MDX&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Notion to Blog in minutes.&lt;br&gt;
 &lt;code&gt;Coupon: BFCM2021&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#trickster-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.apparentsoft.com/trickster"&gt;Trickster&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Recent Files, at your fingertips (macOS).&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#postbox-email-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.postbox-inc.com/store/pricing"&gt;Postbox Email&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;The Power Email App.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#postbox-email-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.postbox-inc.com/store/pricing"&gt;Postbox Email&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;The Power Email App.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#affinity-designer-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://affinity.serif.com/en-us/designer"&gt;Affinity Designer&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Concept art, print projects, logos, icons, UI designs, mock-ups.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#affinity-photo-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://affinity.serif.com/en-us/designer"&gt;Affinity Photo&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Image editing software.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#affinity-publisher-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://affinity.serif.com/en-us/publisher"&gt;Affinity Publisher&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Professional publishing software.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#imageframer-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://imageframer.net/"&gt;ImageFramer&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Frame your images (macOS).&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#nordvpn-72-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://nordvpn.com/de/pricing/"&gt;NordVPN&lt;/a&gt; - 72% off
&lt;/h3&gt;

&lt;p&gt;VPN software.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#appsumo-10-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://appsumo.com/"&gt;AppSumo&lt;/a&gt; - 10% off
&lt;/h3&gt;

&lt;p&gt;Marketplace for apps and digital tools.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#fill-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.fillhq.com/?deal=vladyslav95"&gt;Fill&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;E-signature software.&lt;br&gt;
 &lt;code&gt;Coupon: msplash30&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pixpa-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.pixpa.com/?refcode=BLFPIXPA50"&gt;Pixpa&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;No-code platform for creators and small businesses.&lt;br&gt;
 &lt;code&gt;Coupon: BLFPIXPA50&lt;/code&gt; expires on December 4.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#turbologo-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://turbologo.com/?ref=empactpartners"&gt;Turbologo&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Online Logo Maker.&lt;br&gt;
 &lt;code&gt;Coupon: black2021&lt;/code&gt; expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#elementor-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://elementor.com/pages/black-friday-2021/?gspk=MjcyNzc&amp;amp;gsxid=Fqc68AQi4yLV&amp;amp;utm_campaign=27277&amp;amp;utm_content=default&amp;amp;utm_medium=affiliate&amp;amp;utm_source=elementor"&gt;Elementor&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;WordPress web creation platform.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#templatemonster-up-to-55-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.templatemonster.com/?utm_campaign=blog_site_empactpartners&amp;amp;utm_source=empactpartners&amp;amp;utm_medium=referral&amp;amp;aff=empactpartners"&gt;TemplateMonster&lt;/a&gt; - up to 55% off
&lt;/h3&gt;

&lt;p&gt;Marketplace for website templates, plugins, and digital graphics.&lt;/p&gt;

&lt;p&gt;Discount expires on December 1.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#flexclip-up-to-54-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.flexclip.com/special-offer/blackfriday.html?sscid=b1k5_qa1gp"&gt;FlexClip&lt;/a&gt; - up to 54% off
&lt;/h3&gt;

&lt;p&gt;Video editing tool.&lt;/p&gt;

&lt;p&gt;Discount expires on December 6.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#vecteezy-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.vecteezy.com/signups/join-pro"&gt;Vecteezy&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Vectors, stock photos, and videos.&lt;/p&gt;

&lt;p&gt;Discount expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#moqups-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://moqups.com/?gspk=dmxhZHlzbGF2c2h2ZXRzbnN6N3AxMjM0&amp;amp;gsxid=dqXI9svjNfiU&amp;amp;partnerstack_group=Partner&amp;amp;utm_source=Partnerstack"&gt;Moqups&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;Create mockups.&lt;br&gt;
 &lt;code&gt;Coupon: FALLDEAL&lt;/code&gt; expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#saleshandy-60-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.saleshandy.com/black-friday-deal/"&gt;SalesHandy&lt;/a&gt; - 60% off
&lt;/h3&gt;

&lt;p&gt;Automated sales email outreach tool.&lt;/p&gt;

&lt;p&gt;Discount expires on December 1.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#outfunnel-40-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://outfunnel.com/black-friday/?utm_source=marketsplash&amp;amp;utm_campaign=blackfriday2020"&gt;Outfunnel&lt;/a&gt; - 40% off
&lt;/h3&gt;

&lt;p&gt;Automated sales email outreach tool.&lt;/p&gt;

&lt;p&gt;Discount expires on December 1.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#engagebay-40-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.engagebay.com/"&gt;EngageBay&lt;/a&gt; - 40% off
&lt;/h3&gt;

&lt;p&gt;Marketing, sales and support platform.&lt;/p&gt;

&lt;p&gt;Discount expires on December 4.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#nethunt-crm-40-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://nethunt.com/?fpr=tvvul"&gt;NetHunt CRM&lt;/a&gt; - 40% off
&lt;/h3&gt;

&lt;p&gt;Gmail add-on for automation and sales management.&lt;br&gt;
 &lt;code&gt;Coupon: NHWEEK20&lt;/code&gt; expires on December 1.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#poptin-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://nethunt.com/?fpr=tvvul"&gt;Poptin&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;Customer engagement.&lt;/p&gt;

&lt;p&gt;Discount expires on November 27.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#replyio-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://reply.io/thanksgiving-pricing"&gt;Reply.io&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Multi-channel sales engagement platform.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#snovio-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://snov.io/pricing?_get=empactpartners"&gt;Snov.io&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Sales CRM.&lt;br&gt;
 &lt;code&gt;Coupon: BLACKFRIDAY&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sendinblue-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sendinblue.com/black-friday/"&gt;Sendinblue&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Marketing platform with email and marketing automation.&lt;br&gt;
 &lt;code&gt;Coupon: 2021BLUEFRIDAY&lt;/code&gt; expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#emailoctopus-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://emailoctopus.com/black-friday"&gt;EmailOctopus&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Marketing platform with email and marketing automation.&lt;/p&gt;

&lt;p&gt;Discount expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#activecampaign-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.activecampaign.com/?_r=ND3U68N3"&gt;ActiveCampaign&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Marketing platform with email and marketing automation.&lt;/p&gt;

&lt;p&gt;Discount expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#ntask-29-for-all-plans"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ntaskmanager.com/"&gt;nTask&lt;/a&gt; - $29 for all plans
&lt;/h3&gt;

&lt;p&gt;Project management app.&lt;/p&gt;

&lt;p&gt;Discount expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sendpulse-35-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://sendpulse.ua/ru#6074598e15402/"&gt;SendPulse&lt;/a&gt; - 35% off
&lt;/h3&gt;

&lt;p&gt;Software tool for sending email communications.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sender-35-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sender.net/?ref=empactpartners"&gt;Sender&lt;/a&gt; - 35% off
&lt;/h3&gt;

&lt;p&gt;Branded emails with email automation.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#weekdone-35-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://weekdone.com/team-management-software"&gt;Weekdone&lt;/a&gt; - 35% off
&lt;/h3&gt;

&lt;p&gt;Branded emails with email automation.&lt;br&gt;
 &lt;code&gt;Coupon: BLKFD21&lt;/code&gt; expires on December 12.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#weekdone-35-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://weekdone.com/team-management-software"&gt;Weekdone&lt;/a&gt; - 35% off
&lt;/h3&gt;

&lt;p&gt;Team management software.&lt;br&gt;
 &lt;code&gt;Coupon: BLKFD21&lt;/code&gt; expires on December 12.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#salesblink-59-for-all-plans"&gt;
  &lt;/a&gt;
  &lt;a href="https://weekdone.com/team-management-software"&gt;SalesBlink&lt;/a&gt; - $59 for all plans
&lt;/h3&gt;

&lt;p&gt;Cold email automation and leads generation platform.&lt;/p&gt;

&lt;p&gt;Discount.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#salesflare-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://weekdone.com/team-management-software"&gt;Salesflare&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;CRM software for B2B.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#keap-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://keap.com/big-grit?group_name=group_10360&amp;amp;gspk=dmxhZHlzbGF2c2h2ZXRzbnN6N3AxMjM0&amp;amp;gsxid=3qo2qppfG1VG&amp;amp;partner_key=vladyslavshvetsnsz7p1234&amp;amp;rel=nofollow&amp;amp;utm_campaign=ps-link&amp;amp;utm_content=vladyslavshvetsnsz7p1234&amp;amp;utm_medium=referral&amp;amp;utm_source=partnerstack&amp;amp;utm_term=group_10360"&gt;Keap&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;CRM software for B2B.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pdfliner-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://pdfliner.com/pricing"&gt;PDFLiner&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Create and fill in PDFs online.&lt;/p&gt;

&lt;p&gt;Discount expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#memberpress-save-up-to-300"&gt;
  &lt;/a&gt;
  &lt;a href="https://memberpress.com/black-friday-2021/?utm_campaign=bf2021&amp;amp;utm_source=aff-empactpartners&amp;amp;utm_medium=aff-link"&gt;MemberPress&lt;/a&gt; - Save up to $300
&lt;/h3&gt;

&lt;p&gt;WordPress plugin for membership and subscription creation.&lt;br&gt;
 &lt;code&gt;Coupon: BF2021&lt;/code&gt; expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#visual-composer-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://visualcomposer.com/black-friday/"&gt;Visual Composer&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;WordPress website building tool.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#squarespace-10-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.squarespace.com/"&gt;Squarespace&lt;/a&gt; - 10% off
&lt;/h3&gt;

&lt;p&gt;Website creation and hosting services.&lt;br&gt;
 &lt;code&gt;Coupon: BLKFRI10&lt;/code&gt; expires on December 1.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#duda-20-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.duda.co/"&gt;Duda&lt;/a&gt; - 20% off
&lt;/h3&gt;

&lt;p&gt;Website builder.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#se-ranking-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://seranking.com/black-friday.html"&gt;SE Ranking&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Marketing platform.&lt;br&gt;
 &lt;code&gt;Coupon: BLACKFRIDAY2021&lt;/code&gt; expires on December 6.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#semrush-960-on-a-year-guru-plan"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.semrush.com/"&gt;SEMrush&lt;/a&gt; - $960 on a year Guru plan
&lt;/h3&gt;

&lt;p&gt;Online marketing software.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#social-champ-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.socialchamp.io/offers/"&gt;Social Champ&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;Social media marketing tool.&lt;br&gt;
 &lt;code&gt;Coupon: BFCM2021&lt;/code&gt; expires on December 2.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#contentstudio-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://contentstudio.io/special-offer/"&gt;ContentStudio&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Content marketing and social media management tool.&lt;/p&gt;

&lt;p&gt;Discount expires on December 25.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#brand24-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://brand24.com/"&gt;Brand24&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Track keywords, hashtag performance, and customer reach.&lt;/p&gt;

&lt;p&gt;Discount expires on November 29.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#socialpilot-25-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.socialpilot.co/claim-your-deal"&gt;SocialPilot&lt;/a&gt; - 25% off
&lt;/h3&gt;

&lt;p&gt;Social media marketing tool.&lt;br&gt;
 &lt;code&gt;Coupon: Deal25Off&lt;/code&gt; expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#napoleoncat-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://napoleoncat.com/"&gt;NapoleonCat&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Social media management tool.&lt;/p&gt;

&lt;p&gt;Discount expires on November 30.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pretty-links-up-to-70-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://prettylinks.com/black-friday-2021/"&gt;Pretty Links&lt;/a&gt; - Up To $70 Off
&lt;/h3&gt;

&lt;p&gt;WordPress plugin for the automation of affiliate linking.&lt;br&gt;
 &lt;code&gt;Coupon: BF2021&lt;/code&gt; expires on December 3.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#easy-affiliate-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://easyaffiliate.com/black-friday-2021/"&gt;Easy Affiliate&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;WordPress plugin for the creation of a self-hosted affiliate program.&lt;br&gt;
 &lt;code&gt;Coupon: BF2021&lt;/code&gt; expires on December 3.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thirstyaffiliates-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://thirstyaffiliates.com/pricing"&gt;ThirstyAffiliates&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Affiliate link cloaking plugin for WordPress.&lt;br&gt;
 &lt;code&gt;Coupon: BF2021&lt;/code&gt; expires on December 3.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#wpforms-65-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://wpforms.com/black-friday/"&gt;WPForms&lt;/a&gt; - 65% off
&lt;/h3&gt;

&lt;p&gt;Drag &amp;amp; Drop WordPress Form Builder.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#monsterinsights-65-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.tolink"&gt;MonsterInsights&lt;/a&gt; - 65% off
&lt;/h3&gt;

&lt;p&gt;Google Analytics plugin for WordPress.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#seedprod-65-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.seedprod.com/black-friday/"&gt;SeedProd&lt;/a&gt; - 65% off
&lt;/h3&gt;

&lt;p&gt;Landing Page Builder plugin for WordPress.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#wp-mail-smtp-65-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://wpmailsmtp.com/black-friday/"&gt;WP Mail SMTP&lt;/a&gt; - 65% off
&lt;/h3&gt;

&lt;p&gt;WordPress plugin for easy email delivery.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#affiliatewp-up-to-360"&gt;
  &lt;/a&gt;
  &lt;a href="https://affiliatewp.com/pricing/"&gt;AffiliateWP&lt;/a&gt; - Up To $360
&lt;/h3&gt;

&lt;p&gt;Affiliate program management plugin for WordPress.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#rafflepress-30-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://rafflepress.com/pricing/"&gt;RafflePress&lt;/a&gt; - 30% off
&lt;/h3&gt;

&lt;p&gt;WordPress plugin for giveaways and competitions.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#smashballoon-65-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://smashballoon.com/black-friday/"&gt;SmashBalloon&lt;/a&gt; - 65% off
&lt;/h3&gt;

&lt;p&gt;Social Media Feed Plugins for WordPress.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#all-in-one-seo-65-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://aioseo.com/black-friday/"&gt;All In One SEO&lt;/a&gt; - 65% off
&lt;/h3&gt;

&lt;p&gt;SEO Plugin and Toolkit for WordPress.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#exactmetrics-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.exactmetrics.com/pricing/"&gt;ExactMetrics&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Analytics plugin for WordPress.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#optinmonster-60-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://optinmonster.com/black-friday/"&gt;OptinMonster&lt;/a&gt; - 60% off
&lt;/h3&gt;

&lt;p&gt;Lead generation software.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pushengage-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.pushengage.com/pricing/"&gt;PushEngage&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Push notification plugin for WordPress.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#trustpulse-60-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://trustpulse.com/pricing/"&gt;TrustPulse &lt;/a&gt; - 60% off
&lt;/h3&gt;

&lt;p&gt;Social proof plugin.&lt;/p&gt;

&lt;p&gt;Discount expires on November 26.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#blisk-50-off"&gt;
  &lt;/a&gt;
  &lt;a href="https://blisk.io?utm_source=dev.to&amp;amp;utm_medium=article&amp;amp;utm_campaign=100-deals-for-black-friday"&gt;Blisk&lt;/a&gt; - 50% off
&lt;/h3&gt;

&lt;p&gt;Mobile testing, cross-device testing. Browser for developers, QAs, designers, marketers with hot reload, error notifications, screenshots, and intergration with command line.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNc1soJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.blisk.io/getting-started/v14/multi-device-set.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNc1soJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.blisk.io/getting-started/v14/multi-device-set.jpg" alt="Blisk app" width="880" height="491"&gt;&lt;/a&gt; &lt;code&gt;Coupon: BF2021&lt;/code&gt; expires on November 30.&lt;/p&gt;




</description>
    </item>
    <item>
      <title>Pitfalls of Metaprogramming in Elixir</title>
      <author>Woo Jia Hao</author>
      <pubDate>Tue, 23 Nov 2021 16:05:48 +0000</pubDate>
      <link>https://dev.to/appsignal/pitfalls-of-metaprogramming-in-elixir-aj9</link>
      <guid>https://dev.to/appsignal/pitfalls-of-metaprogramming-in-elixir-aj9</guid>
      <description>&lt;p&gt;Welcome back to this final part of our four-part series on &lt;a href="https://blog.appsignal.com/category/under-the-hood-of-metaprogramming.html"&gt;metaprogramming in Elixir&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Previously, we explored the various applications of macros.&lt;/p&gt;

&lt;p&gt;In this part, we'll delve into common pitfalls that you might encounter when metaprogramming in Elixir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-perils-of-macros"&gt;
  &lt;/a&gt;
  Common Perils of Macros
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://elixir-lang.org/getting-started/meta/macros.html#write-macros-responsibly"&gt;official documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Macros should only be used as a last resort. Remember that explicit is better than implicit. Clear code is better than&lt;br&gt;
concise code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While it may be tempting to use metaprogramming for everything, it may not always be the best option.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://blog.appsignal.com//2021/10/26/applications-of-macros-in-elixir.html"&gt;Applications of Macros&lt;/a&gt; part of this series outlines the majority of use cases of macros.&lt;/p&gt;

&lt;p&gt;However, you should only use macros with great caution.&lt;/p&gt;

&lt;p&gt;We'll be looking at these three common pitfalls to avoid when using macros:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Injecting unnecessary functions&lt;/li&gt;
&lt;li&gt;Over-injecting behavior&lt;/li&gt;
&lt;li&gt;Replacing regular functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's kick off by looking at what happens if you inject unnecessary functions into modules with macros.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;These points are inspired by &lt;a href="https://pragprog.com/titles/cmelixir/metaprogramming-elixir/#resources"&gt;Metaprogramming Elixir&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-injecting-unnecessary-functions-with-macros"&gt;
  &lt;/a&gt;
  1. Injecting Unnecessary Functions with Macros
&lt;/h2&gt;

&lt;p&gt;While macros can be used to inject functions into a caller, there are times where this is unnecessary.&lt;/p&gt;

&lt;p&gt;Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;CalculatorTransformer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;__using__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Hospital&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;CalculatorTransformer&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;calculate_cost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;procedure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;procedure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We inject various calculator functions into &lt;code&gt;Hospital&lt;/code&gt; to eliminate the need for a module identifier.&lt;/p&gt;

&lt;p&gt;However, the use of &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;multiply&lt;/code&gt; now seem like they appear from thin air.&lt;/p&gt;

&lt;p&gt;The code loses its semantic meaning and becomes harder to understand for first-time readers.&lt;/p&gt;

&lt;p&gt;To preserve the semantic meaning of the code, define &lt;code&gt;CalculatorTransformer&lt;/code&gt; as a regular module. This module can be &lt;code&gt;import&lt;/code&gt;ed into &lt;code&gt;Hospital&lt;/code&gt; to eliminate module identifiers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;CalculatorTransformer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Hospital&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="no"&gt;CalculatorTransformer&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;calculate_cost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;procedure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;procedure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As well as creating unnecessary functions, macros can also over-inject behavior into a module. Let's explore what this means.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-macros-overinjecting-behavior"&gt;
  &lt;/a&gt;
  2. Macros Over-injecting Behavior
&lt;/h2&gt;

&lt;p&gt;As Elixir injects macros into the callsite, behavior can be over-injected.&lt;/p&gt;

&lt;p&gt;Let's go back to the example of &lt;code&gt;BaseWrapper&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;What if we left the parsing logic for &lt;code&gt;post?&lt;/code&gt; within the &lt;code&gt;__using__&lt;/code&gt; macro?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;__using__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="ss"&gt;location:&lt;/span&gt; &lt;span class="ss"&gt;:keep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bind_quoted:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;opts:&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;post?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;HTTPoison&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;status_code:&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;299&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;HTTPoison&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"errors"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;HTTPoison&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;reason:&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"reason &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two issues with this approach:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;By testing &lt;code&gt;post?&lt;/code&gt;, you test the inheritor rather than &lt;code&gt;BaseWrapper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As there are multiple inheritors of &lt;code&gt;BaseWrapper&lt;/code&gt; and the entire behavior of &lt;code&gt;post?&lt;/code&gt; is injected into the inheritor, we have to test every inheritor individually.&lt;/p&gt;

&lt;p&gt;This ensures that any inheritor-specific behavior does not modify the behavior of &lt;code&gt;post?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Failure to do so can lead to lower test coverage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ambiguous error reporting.&lt;/p&gt;

&lt;p&gt;Any run-time errors raised by &lt;code&gt;post?&lt;/code&gt; will be logged under the inheritor, not &lt;code&gt;BaseWrapper&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore, leaving the entire behavior in &lt;code&gt;post?&lt;/code&gt; can create confusion.&lt;/p&gt;

&lt;p&gt;The original implementation of &lt;code&gt;BaseWrapper&lt;/code&gt; moves the bulk of the parsing behavior into the wrapper instead. This implementation is much neater, semantically more meaningful, and readable.&lt;/p&gt;

&lt;p&gt;This minimizes the two issues mentioned above, as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you test the core behavior of &lt;code&gt;post?&lt;/code&gt;, only &lt;code&gt;BaseWrapper.parse_post&lt;/code&gt; is tested — not every single inheritor.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any errors from parsing will be logged under &lt;code&gt;BaseWrapper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;location: :keep&lt;/code&gt; works in a similar fashion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While we've used wrappers in our example of over-injecting behavior, this can equally apply to regular macros.&lt;/p&gt;

&lt;p&gt;A rule of thumb is to minimize the amount of behavior in a macro.&lt;br&gt;
Once the necessary information/computations that require a macro have been accessed/performed, you should move the remaining behavior out of the macro.&lt;/p&gt;

&lt;p&gt;The final pitfall we'll examine is the use of macros when regular functions suffice.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-macros-used-in-place-of-regular-functions"&gt;
  &lt;/a&gt;
  3. Macros Used in Place of Regular Functions
&lt;/h2&gt;

&lt;p&gt;As powerful as they are, you don't always need macros. In some cases, you can replace a macro's behavior with a regular function.&lt;/p&gt;

&lt;p&gt;Let's say that behavior that does not require compile-time information (or a macro to perform computation) is placed in a macro, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="n"&gt;doubled&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Baz&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Baz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;double&lt;/code&gt; could have easily been substituted for a regular function.  &lt;/p&gt;

&lt;p&gt;Its behavior does not require compile-time information nor a macro for computation. It will be injected into &lt;code&gt;Baz&lt;/code&gt; and evaluated when &lt;code&gt;execute&lt;/code&gt; is called, just like a regular function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Baz&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Baz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, defining &lt;code&gt;double&lt;/code&gt; as a macro does not pose any benefits over a regular function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metaprogramming-in-elixir-further-reading"&gt;
  &lt;/a&gt;
  Metaprogramming in Elixir: Further Reading
&lt;/h2&gt;

&lt;p&gt;We have finally come to the end of this investigation into metaprogramming in Elixir!&lt;/p&gt;

&lt;p&gt;Remember: with great power comes great responsibility. Misusing metaprogramming can come back to bite you, so tread lightly.&lt;/p&gt;

&lt;p&gt;While this series has aimed to explain metaprogramming and its intricacies concisely, it is by no means the "bible" on this topic.&lt;/p&gt;

&lt;p&gt;There are many wonderful resources you can use to learn more about metaprogramming in Elixir! Here are just a few:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Written guides&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.theerlangelist.com/article/macros_1"&gt;Understanding Elixir Macros - The Erlangelist&lt;/a&gt;*&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elixir-lang.org/getting-started/meta/quote-and-unquote.html"&gt;Official Elixir tutorial on metaprogramming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elixirschool.com/en/lessons/advanced/metaprogramming/"&gt;Metaprogramming by Elixir School&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/elixir-metaprogramming"&gt;Metaprogramming in Elixir - Serokell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Books&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://pragprog.com/titles/cmelixir/metaprogramming-elixir/"&gt;Metaprogramming Elixir&lt;/a&gt;*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Talks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Bo48sQDb-hk"&gt;ElixirConf 2017 - Don't Write Macros But Do Learn How They Work by Jesse Anderson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(* - &lt;em&gt;highly recommended&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Thanks for reading, and see you next time!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S. If you'd like to read Elixir Alchemy posts as soon as they get off the press, &lt;a href="https://blog.appsignal.com/category/elixir-alchemy.html#elixir-alchemy"&gt;subscribe to our Elixir Alchemy newsletter and never miss a single post!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jia Hao Woo is a developer from the little red dot — Singapore! He loves to tinker with various technologies and has been using Elixir and Go for about a year. Follow his programming journey on &lt;a href="https://woojiahao.github.io/blog"&gt;his blog&lt;/a&gt; and &lt;a href="https://twitter.com/woojiahao_"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
    </item>
    <item>
      <title>Hashcode and Equals Debugging, Performance</title>
      <author>Shai Almog</author>
      <pubDate>Tue, 23 Nov 2021 16:04:47 +0000</pubDate>
      <link>https://dev.to/codenameone/hashcode-and-equals-debugging-performance-31j9</link>
      <guid>https://dev.to/codenameone/hashcode-and-equals-debugging-performance-31j9</guid>
      <description>&lt;p&gt;A few weeks ago I ran into  &lt;a href="https://www.reddit.com/r/java/comments/qi8yu8/hint_to_myself_and_other_poor_souls_dont_use/"&gt;this story on reddit&lt;/a&gt;  that discusses the problem with using the URL class as a key in a Map. This boils down to a remarkably slow implementation of the hashcode() method in java.net.URL which makes this class unusable in such situations. Unfortunately, this is a part of the Java API specification and is no longer fixable without breaking backwards compatibility. &lt;/p&gt;

&lt;p&gt;What we can do is understand the problem with equals and hashcode. How can we avoid such problems in the future?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-problem-with-urls-hashcode-and-equals"&gt;
  &lt;/a&gt;
  What’s the problem with URLs Hashcode and Equals?
&lt;/h2&gt;

&lt;p&gt;To understand this, let’s ‌look at the JavaDoc of hashcode and equals:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Compares this URL for equality with another object.&lt;/p&gt;

&lt;p&gt;If the given object is not a URL then this method immediately returns false.&lt;/p&gt;

&lt;p&gt;Two URL objects are equal if they have the same protocol, &lt;strong&gt;reference equivalent hosts&lt;/strong&gt;, have the same port number on the host, and the same file and fragment of the file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Two hosts are considered equivalent if both host names can be resolved into the same IP addresses;&lt;/strong&gt; else if either host name can't be resolved, the host names must be equal without regard to case; or both host names equal to null.&lt;/p&gt;

&lt;p&gt;Since hosts comparison requires name resolution, this operation is a blocking operation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since hosts comparison requires name resolution, this operation is a blocking operation.”&lt;/p&gt;

&lt;p&gt;This might be unclear. Let’s clarify it with a simple block of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost/"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://127.0.0.1/"&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost/"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://127.0.0.1/"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will print out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;true
true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This might be pretty simple with localhost, but if we compare domains and the Strings aren’t identical (which they often aren’t) we need to do a DNS lookup. We need to do that just for a hashcode() call!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-workaround"&gt;
  &lt;/a&gt;
  A Quick Workaround
&lt;/h2&gt;

&lt;p&gt;A quick workaround for this case is to avoid URL. Sun deeply embedded the class in the original JVM code, but we can use URI for most purposes. &lt;/p&gt;

&lt;p&gt;E.g. if we change the hashcode and equals calls from above to use URI instead of URL we will get this result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost/"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://127.0.0.1/"&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost/"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://127.0.0.1/"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will get false for both statements. While this might be problematic for some use cases, it’s a vast difference in performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bigger-pitfall"&gt;
  &lt;/a&gt;
  A Bigger Pitfall
&lt;/h2&gt;

&lt;p&gt;If all we ever used as a map key were Strings we’d be fine. This sort of bug can hit us in every place where we  use these methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sets&lt;/li&gt;
&lt;li&gt;Maps&lt;/li&gt;
&lt;li&gt;Storage&lt;/li&gt;
&lt;li&gt;Business logic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it gets deeper. When writing our own classes with our own hashcode and equals logic we can often fall prey to bad code. A small performance penalty on a hashcode method or an overly simplistic version can cause major performance penalties that would be very hard to track.&lt;/p&gt;

&lt;p&gt;E.g. A stream operation that takes longer because the hashcode method is slow or incorrect can represent a long-term problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-best-hashcode-implementation"&gt;
  &lt;/a&gt;
  The Best Hashcode Implementation
&lt;/h3&gt;

&lt;p&gt;To understand the best hashcode and equals method, we first need to understand some mediocre code. Now I won’t show horrible or old code. This is good code, but it isn’t the best:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sets&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code might seem OK at first, but is it?&lt;br&gt;
Here’s the ideal code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is fast, 100% unique and correct. There’s literally no reason to do anything beyond that. There’s one exception of an id which is an object. In that case we might want to do Objects.hashCode(id) instead which will also work for null, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hashcode-isnt-equals"&gt;
  &lt;/a&gt;
  Hashcode isn’t Equals
&lt;/h3&gt;

&lt;p&gt;Well, obviously… This is one of the most important things you need to keep in mind when writing a hashcode implementation. This method must perform fast and must be consistent with equals for the false case. It will not be correct for the case of true.&lt;/p&gt;

&lt;p&gt;To clarify, hashcode must always obey this law:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means if hashcode results are different, the objects must be different and must return false from equals. But the inverse isn’t the case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// this can be false...&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value here is in performance. A hashcode method should perform much faster than equals. It should let us skip the potentially expensive equals calculation and index elements quickly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#special-case-with-jpa"&gt;
  &lt;/a&gt;
  Special Case with JPA
&lt;/h3&gt;

&lt;p&gt;JPA developers often just use a hardcoded value for hashcode or use the Class object to generate the hashCode(). This seems weird until you think about this.&lt;/p&gt;

&lt;p&gt;If you let the database generate the ID for you, you would save an object and it would no longer be equal to the source object… One solution is to use the &lt;code&gt;@NaturalId&lt;/code&gt; annotation and data types. But that would require changing the data model. Unfortunately, there’s no decent workaround for the entity classes. &lt;/p&gt;

&lt;p&gt;In fact, I would theorize that a lot of the problems JPA developers experienced with Lombok are because it generates hashcode and equals methods for you. Those could be problematic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-this-a-blog-about-debugging"&gt;
  &lt;/a&gt;
  Is this a Blog about Debugging?
&lt;/h2&gt;

&lt;p&gt;Sorry about that long setup, but yes it damn well is. So I needed all of that preface to talk about this in a more generic sense of debugging. Notice that this is true for other languages that use similar paradigms for common interfaces.&lt;/p&gt;

&lt;p&gt;This blog started with a performance issue and I would like to discuss that aspect in the lens of debugging. In many profilers, the overhead of a hashcode method would be almost unnoticeable. But because it’s invoked so often and has wide-reaching implications, it’s possible you ultimately feel the repercussions and cast the blame elsewhere.&lt;/p&gt;

&lt;p&gt;The knee jerk reaction would be to implement a “dummy” hashcode method and see the resulting performance difference. Just return a hard coded number instead of a valid number.&lt;/p&gt;

&lt;p&gt;This is valuable for some cases and might even solve problems like the one mentioned at the top where the hashcode method performs badly. However, it won’t help with maps. If the hashcode would return identical values, using it as a key in a map would effectively disable all the performance benefits that hashcode can offer. &lt;/p&gt;

&lt;p&gt;How do we know if a hashcode method is good?&lt;/p&gt;

&lt;p&gt;Well… We can use the debugger to figure it out. Just inspect your map and look at the distribution of the objects between the various buckets to get a sense of the real world value of the hashcode method.&lt;/p&gt;

&lt;p&gt;If you have code verification process on commit I would strongly recommend defining a rule on the complexity level of a hashcode method. This should be set very low to prevent slow code from seeping in.&lt;/p&gt;

&lt;p&gt;But the problem is nesting. E.g. think about code like the one we discussed before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sets&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s short and simple. Yet, performance of this code can be all over the place. The method would invoke the hashcode method of all internal objects. These methods can be far worse in terms of performance. We need to be vigilant about this. Even for JDK classes such as URL which, as we discussed earlier, is problematic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;We often auto-generate hashcode and equals methods. The IDEs are normally pretty good at that; they offer us an option to pick the fields we wish to compare. Unfortunately, they then apply both sets of fields to hashcode and equals. &lt;/p&gt;

&lt;p&gt;Sometimes, this doesn’t matter. Often we don’t “see” the places where it does matter since the methods are too small to make a dent in the profiler. But they have wide-ranging implications we should optimize for. &lt;/p&gt;

&lt;p&gt;Debugging lets us inspect the map and look at bucket distribution so we can get a sense of how well our hashcode method is performing and whether we should tune it to get more consistent results from maps and similar APIs.&lt;/p&gt;

</description>
      <category>java</category>
      <category>performance</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build Your Own Responsive Developer Portfolio Website (App) with Flutter</title>
      <author>Pradeep Tintali</author>
      <pubDate>Tue, 23 Nov 2021 15:54:00 +0000</pubDate>
      <link>https://dev.to/pktintali/build-your-own-responsive-developer-portfolio-website-app-with-flutter-k70</link>
      <guid>https://dev.to/pktintali/build-your-own-responsive-developer-portfolio-website-app-with-flutter-k70</guid>
      <description>&lt;p&gt;&lt;em&gt;The best way of learning something is by doing.&lt;/em&gt;&lt;br&gt;
And if you have to build your own developer portfolio then why not build it by yourself!&lt;/p&gt;

&lt;p&gt;In this tutorial I'll tell you step by step how to build responsive developer portfolio website/app with flutter. By following this tutorial you will learn - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to build responsive UI with flutter.&lt;/li&gt;
&lt;li&gt;How to use &lt;code&gt;ScrollController&lt;/code&gt; and scroll programmatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#What-we'll-build"&gt;What we'll build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Live-Demo"&gt;Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Video-Explanation"&gt;Video Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Creating-Project"&gt;Creating Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Initial-Setup"&gt;Initial Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Directory-Setup"&gt;Directory Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Creating-HomePage"&gt;Creating HomePage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Creating-The-Navbar-Section"&gt;Creating The Navbar Section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Creating-endDrawer"&gt;Creating endDrawer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Creating-Components-of-HomePage"&gt;Creating Components of HomePage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Creating-Project-Model"&gt;Creating Project Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Source-Code"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-well-build"&gt;
  &lt;/a&gt;
  What we'll build &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We are going to build a portfolio app with mainly 4 sections &lt;code&gt;about&lt;/code&gt;, &lt;code&gt;skills&lt;/code&gt;, &lt;code&gt;projects&lt;/code&gt; and &lt;code&gt;contact&lt;/code&gt;. For making our app responsive we'll use media query.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  Live Demo &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you are so excited to see what we'll build like  me, you can see the live demo of app &lt;a href="https://sad-blackwell-98fd2c.netlify.app/"&gt;Here&lt;/a&gt;. This demo of web version is deployed using html renderer.&lt;br&gt;
&lt;a href="https://sad-blackwell-98fd2c.netlify.app"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#video-explanation"&gt;
  &lt;/a&gt;
  Video Explanation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;At the time of writing this post. It was getting too long so I added this video explanation section.&lt;br&gt;
If you want to watch video tutorial of this post you can watch it from here.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=I_pb-WBEJRA"&gt;Video Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-project"&gt;
  &lt;/a&gt;
  Creating Project &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Supposing flutter is installed and initial setup is done in your system.&lt;br&gt;
If you have't installed then you can get it from &lt;a href="https://docs.flutter.dev/get-started/install"&gt;here&lt;/a&gt;&lt;br&gt;
Create a new flutter project by using command palette in VS Code or from android studio or by typing the following command in terminal&lt;br&gt;
&lt;code&gt;flutter create &amp;lt;YOUR PROJECT NAME&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial Setup &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now careate a new folder in your project &lt;code&gt;assets&lt;/code&gt;&lt;br&gt;
Inside the &lt;code&gt;assets&lt;/code&gt; folder create a subfolder &lt;code&gt;images&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add an image that you want to show on your portfolio, in your images folder.&lt;br&gt;
Your image should be placed like this&lt;br&gt;
assets/images/&lt;/p&gt;

&lt;p&gt;Now load images in &lt;code&gt;pubspec.yaml&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;assets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;assets/images/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clear everything from &lt;code&gt;main.dart&lt;/code&gt; file and write the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:portfolio_app/pages/home_page.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#directory-setup"&gt;
  &lt;/a&gt;
  Directory Setup &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Inside the &lt;code&gt;lib&lt;/code&gt; folder create 3 new directory named &lt;code&gt;components&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;pages&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;-lib&lt;/span&gt;
   &lt;span class="s"&gt;- components&lt;/span&gt;
   &lt;span class="s"&gt;- models&lt;/span&gt;
   &lt;span class="s"&gt;- pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-homepage"&gt;
  &lt;/a&gt;
  Creating HomePage &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As you can see in the above code we have used &lt;code&gt;HomePage&lt;/code&gt; in the home of &lt;code&gt;MaterialApp&lt;/code&gt; lets create it.&lt;br&gt;
Inside the pages directory create a new file &lt;code&gt;homepage.dart&lt;/code&gt;.&lt;br&gt;
Create a stateless widget HomePage in it like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="c1"&gt;//Add Key&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="s"&gt;'JANE DOE'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF4756DF&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;backgroundColor:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;elevation:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;SafeArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;SingleChildScrollView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="c1"&gt;//Add Scroll Controller&lt;/span&gt;
              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;

                &lt;span class="o"&gt;],&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create a &lt;code&gt;GlobalKey&lt;/code&gt; and a &lt;code&gt;ScrollController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GlobalKey&lt;/strong&gt; - for opening and closing the end drawer that we'll use later.&lt;br&gt;
&lt;strong&gt;ScrollController&lt;/strong&gt; - for scrolling to a specific section of page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ScrollController&lt;/span&gt; &lt;span class="n"&gt;myScrollController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScrollController&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;GlobalKey&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ScaffoldState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_scaffoldKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GlobalKey&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ScaffoldState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add the &lt;code&gt;_scaffoldKey&lt;/code&gt; in the Scaffold widget and &lt;code&gt;myScrollController&lt;/code&gt; in the SingleChildScrollView.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-navbar-section"&gt;
  &lt;/a&gt;
  Creating The Navbar Section &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Because we have to create a responsive UI we'll show the navbar inside the &lt;code&gt;endDrawer&lt;/code&gt; of Scaffold on small screen and inside the &lt;code&gt;actions&lt;/code&gt; of AppBar on large screen.&lt;/p&gt;

&lt;p&gt;Inside the components directory caret a new file &lt;code&gt;home_page_actions.dart&lt;/code&gt; and write the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:portfolio_app/utils.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePageActions&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ScrollController&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;HomePageActions&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt;
        &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="n"&gt;getWidgets&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;isMobile:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="n"&gt;getWidgets&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getWidgets&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScrollController&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;scrollDur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;padding:&lt;/span&gt;
            &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;symmetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;horizontal:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;vertical:&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;TextButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;animateTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;milliseconds:&lt;/span&gt; &lt;span class="n"&gt;scrollDur&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Curves&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;easeIn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'About'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFf4756DF&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w600&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;padding:&lt;/span&gt;
            &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;symmetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;horizontal:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;vertical:&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;TextButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;animateTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;milliseconds:&lt;/span&gt; &lt;span class="n"&gt;scrollDur&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Curves&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;easeIn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'Skills'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFf4756DF&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w600&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;padding:&lt;/span&gt;
            &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;symmetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;horizontal:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;vertical:&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;TextButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;animateTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;milliseconds:&lt;/span&gt; &lt;span class="n"&gt;scrollDur&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Curves&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;easeIn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'Projects'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFf4756DF&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w600&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;padding:&lt;/span&gt;
            &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;symmetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;horizontal:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;vertical:&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;TextButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;animateTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;2600&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1900&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;milliseconds:&lt;/span&gt; &lt;span class="n"&gt;scrollDur&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Curves&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;easeIn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'Contact'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFf4756DF&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w600&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are lots of things in the above code but we'll see only the important one.&lt;/p&gt;

&lt;p&gt;As you can see we have used &lt;code&gt;Utils&lt;/code&gt; class so lets create it.&lt;/p&gt;

&lt;p&gt;Inside the lib create a new directory called &lt;code&gt;utils.dart&lt;/code&gt; and write the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/cupertino.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Utils&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MediaQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;mdqh&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MediaQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;mdqw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MediaQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the &lt;code&gt;isMobile&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the screen width of device is less than or equal to 600 pixel, you can decide your own logic for that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mdqh&lt;/code&gt; method returns the height of screen&lt;br&gt;
&lt;code&gt;mdqw&lt;/code&gt; method return the width of screen&lt;/p&gt;

&lt;p&gt;These utilities will help us to make UI responsive.&lt;/p&gt;

&lt;p&gt;Now go to HomePage and inside the &lt;code&gt;AppBar&lt;/code&gt; of Scaffold add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;actions:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
          &lt;span class="n"&gt;Utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;right:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;IconButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                      &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                      &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFf4756DF&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                      &lt;span class="nl"&gt;size:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="o"&gt;),&lt;/span&gt;
                    &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;_scaffoldKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentState&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="na"&gt;openEndDrawer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="o"&gt;},&lt;/span&gt;
                  &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HomePageActions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;sc:&lt;/span&gt; &lt;span class="n"&gt;myScrollController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the &lt;code&gt;Scaffold&lt;/code&gt; of HomePage add the &lt;code&gt;endDrawer&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;endDrawer:&lt;/span&gt; &lt;span class="n"&gt;Utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;MyDrawer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;sc:&lt;/span&gt; &lt;span class="n"&gt;myScrollController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now lets create our &lt;code&gt;MyDrawer&lt;/code&gt; widget&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-enddrawer"&gt;
  &lt;/a&gt;
  Creating endDrawer &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Inside the components create a new file &lt;code&gt;my_drawer.dart&lt;/code&gt; and write the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:portfolio_app/components/home_page_actions.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyDrawer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ScrollController&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyDrawer&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;backgroundColor:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;elevation:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;leading:&lt;/span&gt; &lt;span class="n"&gt;IconButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
          &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF4756DF&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;HomePageActions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;sc:&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we are reusing the &lt;code&gt;HomePageActions&lt;/code&gt; again here and it will be visible only on the small screen, remember the code that we wrote in it.&lt;/p&gt;

&lt;p&gt;Now inside the HomePage &lt;code&gt;Scaffold&lt;/code&gt; add the floating action button that will help to scroll at top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt; &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;mini:&lt;/span&gt; &lt;span class="n"&gt;Utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isMobile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;myScrollController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;animateTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;milliseconds:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Curves&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;easeIn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;network&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="s"&gt;'https://eager-williams-af0d00.netlify.app/assets/icons/icons8-upward-arrow.gif'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;animateTo&lt;/code&gt; method of ScrollController will scroll the page to the specified position will nice animation you can define the &lt;code&gt;duration&lt;/code&gt; and &lt;code&gt;curve&lt;/code&gt; for the animation.&lt;/p&gt;

&lt;p&gt;The same method we are using in the HomePageActions buttons to scroll at a specific section using a calculated height.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If I write the complete code the article will be too long and boring. So lets quickly complete our project. You can find the source code in the last section&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-components-of-homepage"&gt;
  &lt;/a&gt;
  Creating Components of HomePage &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now in the HomePage inside the &lt;code&gt;children&lt;/code&gt; of column add the remaining components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="n"&gt;Header1&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
&lt;span class="n"&gt;MoreAboutMe&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
&lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;TopSkills&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
&lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;RecentProjects&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
&lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;ContactForm&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
&lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;Footer&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
&lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get the code of these components from the &lt;a href="https://github.com/pktintali/flutter-portfolio/tree/main/lib/components"&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now the final thing in the bottom of &lt;code&gt;children&lt;/code&gt; of &lt;code&gt;Stack&lt;/code&gt; that we used in HomePage add the following component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nf"&gt;SocialIconsBar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-project-model"&gt;
  &lt;/a&gt;
  Creating Project Model &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;RecentProjects()&lt;/code&gt; component we need Projectmodel so&lt;br&gt;
in the models directory create a new file called &lt;code&gt;project_model.dart&lt;/code&gt; and write the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;lass&lt;/span&gt; &lt;span class="n"&gt;ProjectModel&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;imgURL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;shortDescription&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;actionLink&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;ProjectModel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;imgURL&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;projectName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shortDescription&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;actionLink&lt;/span&gt;&lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new file inside the lib called &lt;code&gt;constants.dart&lt;/code&gt; and create some ProjectModels/Demo Projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:portfolio_app/models/project_model.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Constants&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ProjectModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;projects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;ProjectModel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;actionLink:&lt;/span&gt; &lt;span class="s"&gt;'#'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;imgURL:&lt;/span&gt;
          &lt;span class="s"&gt;'https://eager-williams-af0d00.netlify.app/assets/images/expenseTracker.png'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;projectName:&lt;/span&gt; &lt;span class="s"&gt;'Expense Tracker'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ProjectModel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;actionLink:&lt;/span&gt; &lt;span class="s"&gt;'#'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;imgURL:&lt;/span&gt;
          &lt;span class="s"&gt;'https://eager-williams-af0d00.netlify.app/assets/images/netflixClone.png'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;projectName:&lt;/span&gt; &lt;span class="s"&gt;'Netflix Clone'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ProjectModel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;actionLink:&lt;/span&gt; &lt;span class="s"&gt;'#'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;imgURL:&lt;/span&gt;
          &lt;span class="s"&gt;'https://eager-williams-af0d00.netlify.app/assets/images/greenyEarth.png'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;projectName:&lt;/span&gt; &lt;span class="s"&gt;'Greeny Earth'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have successfully created our responsive developer portfolio with flutter 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can see/download the source code from github.&lt;br&gt;
&lt;a href="https://github.com/pktintali/flutter-portfolio"&gt;Repo Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>tutorial</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>How to Serve Massive Computations Using Python Web Apps.</title>
      <author>Thuwarakesh Murallie</author>
      <pubDate>Tue, 23 Nov 2021 15:51:38 +0000</pubDate>
      <link>https://dev.to/thuwarakesh/how-to-serve-massive-computations-using-python-web-apps-5ege</link>
      <guid>https://dev.to/thuwarakesh/how-to-serve-massive-computations-using-python-web-apps-5ege</guid>
      <description>&lt;p&gt;In a &lt;a href="https://towardsdatascience.com/python-web-apps-are-a-terrible-idea-for-analytics-projects-36f1bd33e84b"&gt;previous article&lt;/a&gt;, I wrote about the limitations of using Python web apps for analytics projects. Some of the points kindled readers' curiosity and inspired me to write another story to complement it.&lt;/p&gt;

&lt;p&gt;The central question of this article is, "if Python has severe drawbacks because of its sync behavior, how do platforms such as Instagram and Spotify use it to serve millions around the world?"&lt;/p&gt;

&lt;p&gt;While I have no official information from these platforms (or similar ones), I have insights into handling such massive requests from my experience.&lt;/p&gt;

&lt;p&gt;Here in this article, I prepared a demo to show the basics. A real-life project might have several other technologies in the stack; I haven't included them all here. But I've hinted at some of my favorites in this story and links to resources whenever possible.&lt;/p&gt;

&lt;p&gt;Let's begin by discussing the sync-async problem again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pythons-synchronous-behavior-and-the-cost-of-serving-web-requests"&gt;
  &lt;/a&gt;
  Python's synchronous behavior and the cost of serving web requests.
&lt;/h1&gt;

&lt;p&gt;Having a lean technology stack is an excellent choice. And the data science community is gifted with Python on that front. Because python is a general-purpose language, you can use it to build data pipelines, machine learning, web apps, and a lot more.&lt;/p&gt;

&lt;p&gt;A little caveat when using Python web frameworks is its sync behavior. Meaning, Pyhton handles tasks one at a time in every thread. Until the request finishes, others will have to wait in a queue. If you need to serve more concurrent requests, you'll have to increase the cores and the number of instances.&lt;/p&gt;

&lt;p&gt;If your web app serves only a limited number of users, this isn't a thing. Also, if you don't perform heavy computations on-demand, you're still okay. But when you grow and compute more, your hello world type of web app could cause serious issues.&lt;/p&gt;

&lt;p&gt;This is also true even if you are choosing a Node app. Node is JavaScript-based, and it's the language's nature to run asynchronously. The point is, the cost is more (if unhandled) when using a Python framework.&lt;/p&gt;

&lt;p&gt;So, let's handle it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#decoupling-computation-from-the-requestresponse-cycle"&gt;
  &lt;/a&gt;
  Decoupling computation from the request-response cycle.
&lt;/h1&gt;

&lt;p&gt;Imagine, on Instagram; you come across the image of a magnificent blue whale. Stunned by its beauty, you double-tap and like the picture. You wish you could see more of them. But this was the first time you encountered such a majestic photo on the platform.&lt;/p&gt;

&lt;p&gt;You keep scrolling down; the following few images you see are the old data science memes and stuff.&lt;/p&gt;

&lt;p&gt;In a few moments, you revisit Instagram. Splendid! You see more giant blue whales swimming and playing with their cubs. It captivates you.&lt;/p&gt;

&lt;p&gt;It is how most platforms work in suggesting content to their users. Immediate learning is not required. They might even lead to false positives as well.&lt;/p&gt;

&lt;p&gt;A clever way to handle this is to decouple computation from the request-response cycle. Use the prior knowledge about the user to serve the immediate request. Accumulate more data to learn and perform better in the future. It is how we see old data science memes by continuing scrolling down and more blue whales in the next visit.&lt;/p&gt;

&lt;p&gt;In large-scale applications, we collect every action of users in a dedicated database. Datastores such as &lt;a href="https://cassandra.apache.org/_/index.html"&gt;Cassandra&lt;/a&gt; are an excellent choice for this purpose. Based on the nature of the application, periodic tasks update the models with new data, or the system uses triggers to do the same. If they happen before your next visit to the platform, you're lucky to be served by an up-to-date model.&lt;/p&gt;

&lt;p&gt;That's enough explanation; it's time to get our hands dirty.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#performing-heavy-computations-outside-web-requests"&gt;
  &lt;/a&gt;
  Performing heavy computations outside web requests.
&lt;/h1&gt;

&lt;p&gt;For simplicity, I'll be using Flask. But this technique would work in any other Python frameworks just as well. We use celery to handle heavy computations outside the request-response cycle. Lastly, we will use a database to collect user actions.&lt;/p&gt;

&lt;p&gt;In this demo, we use the request itself as the trigger and begin computation immediately. But it may vary according to the nature of your application. Often, you might have to use a separate pipeline as well. In such scenarios, you may need technologies such as &lt;a href="https://airflow.apache.org/"&gt;Apache Airflow&lt;/a&gt; or &lt;a href="https://www.prefect.io/"&gt;Prefect&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-a-message-brokerredis"&gt;
  &lt;/a&gt;
  Installing a message broker—Redis.
&lt;/h2&gt;

&lt;p&gt;A message broker does what its name suggests. You can send a message to the broker, and the broker delivers it to all its subscribers simultaneously. Although this definition seems quite simple, life before message brokers was difficult for engineers.&lt;/p&gt;

&lt;p&gt;Here we'll install Redis, a well-known message broker software. Instead, you can also use RabbitMQ, Amazon SQS, and many other brokers with Celery.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://redis.io/download"&gt;Redis official site&lt;/a&gt; has instructions for all the OSs. A platform-agnostic way is to use their official docker image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--name&lt;/span&gt; redis-server &lt;span class="nt"&gt;-p&lt;/span&gt; 6379:6379 &lt;span class="nt"&gt;-d&lt;/span&gt; redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-celery-and-flask"&gt;
  &lt;/a&gt;
  Installing Celery and Flask
&lt;/h2&gt;

&lt;p&gt;Installation of these two modules is straightforward. Just like many other Python packages, you can use PyPI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;celery Flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Flask's purpose is to serve web requests over HTTP. It is a minimalistic framework, where its popular alternative Django is a one-stop solution for many needs. The techniques I'm about to share will work on any of these.&lt;/p&gt;

&lt;p&gt;Celery is the bridge between Flask (or Django) and the message broker. It parses your Python objects into messages that broker software can understand. A more extensive usage includes tasks scheduling and periodic executions as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decoupled-hello-world-example"&gt;
  &lt;/a&gt;
  Decoupled hello world example.
&lt;/h2&gt;

&lt;p&gt;Now, we have Celery and Flask installed, and our Redis service is running. Let's try to create our first decoupled app.&lt;/p&gt;

&lt;p&gt;Create a file named app.py and add the below content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# 1. A function to create Celery object.
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;celery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;import_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"CELERY_RESULT_BACKEND"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"CELERY_BROKER_URL"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContextTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContextTask&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;celery&lt;/span&gt;


&lt;span class="c1"&gt;# 2. Create a Flask app
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"redis://localhost:6379"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CELERY_RESULT_BACKEND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"redis://localhost:6379"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 3. Connect Flask with Celery
&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 4. Now, we can create Celery tasks by annotating @celery.task
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;massive_computation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code has four parts. The first is a function (make_celery) that will return a Celery object.&lt;/p&gt;

&lt;p&gt;The second is a Flask app creation. This part may be familiar to you if you have some experience using Flask. We pass in extra configs to inform the Flask app and Celery about the Redis server.&lt;/p&gt;

&lt;p&gt;In the third part, we create the Celery app using the make_celery function. We pass in the Flask app instance, which contains the Redis configuration information.&lt;/p&gt;

&lt;p&gt;With this setup, we can now create asynchronous tasks. This means their execution may not interrupt the regular operations of the main thread. The example task here, massive_computation, will return "Hello ," not immediately, but after five seconds.&lt;/p&gt;

&lt;p&gt;To test this, first, we need to start the Celery server. This is the decoupled process that will run your massive computation. This command below will do it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;celery &lt;span class="nt"&gt;-A&lt;/span&gt; app.celery worker &lt;span class="nt"&gt;-E&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a different terminal, run the command as shown in the recording below.&lt;/p&gt;

&lt;p&gt;This imports our massive_computation function from the app module and calls it. Note the unique delay method used for calling the function. The &lt;code&gt;@celery.task&lt;/code&gt; decorator added this extra method.&lt;/p&gt;

&lt;p&gt;Once you called the function and stored its value in a variable, you can use the result property to access its value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--foEpxiUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/750/1%2AkOsAWT-pBrqBGncftuEewg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--foEpxiUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/750/1%2AkOsAWT-pBrqBGncftuEewg.gif" alt="Running a celery task" title="Running a celery task" width="600" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the recording, the result property has no value for the first few calls. After few seconds, we have "Hello Thuwarakesh" printed on the screen.&lt;/p&gt;

&lt;p&gt;Until the function returns the value, you can perform other activities in the same thread. This isn't the typical behavior of apps developed using synchronous languages, such as Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serving-massive-computation-through-web-requests"&gt;
  &lt;/a&gt;
  Serving massive computation through web requests.
&lt;/h2&gt;

&lt;p&gt;We've installed the technologies we need and created a basic app that runs alongside the application's thread. Now, we've got one final part to put in place—the web request handling.&lt;/p&gt;

&lt;p&gt;Now replace the massive_computation function and everything below with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------------------
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# -------------------------------------------------------------------------
&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"last_calculated_value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Set it's initial value to 0.
&lt;/span&gt;
&lt;span class="c1"&gt;# Asynchronous execution
# -------------------------------------------------------------------------
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""This function will calculate the Fibonacci number"""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;massive_computation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"last_calculated_value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# -------------------------------------------------------------------------
&lt;/span&gt;
&lt;span class="c1"&gt;# Web api endpoints
# -------------------------------------------------------------------------
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/set/&amp;lt;num&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;massive_computation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"New Fibonacci number will be assigned soon."&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/current"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_current&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;last_calculated_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"last_calculated_value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Current fibonacci number is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;last_calculated_value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have created an instance of the Redis database to store our decoupled computation results.&lt;/p&gt;

&lt;p&gt;The computation we perform here is a Fibonacci calculation. The massive_computation function accepts a number, calculates the Fibonacci number, and store it in the database.&lt;/p&gt;

&lt;p&gt;We've also created two web API endpoints. The first one will set the last calculated value, and the other will read the current value.&lt;/p&gt;

&lt;p&gt;To test this app, we need a Flask app running beside the already running Celery service. You can start the Flask app in a different terminal using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have everything set up to test our massive computation using the Python web app. Let's try it out.&lt;/p&gt;

&lt;p&gt;You can either use your browser or CURL to do this. I'll be using curl in a terminal window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93lIXrcW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/750/1%2ADu8mJsS0Lnz0kNEgFAo1tg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93lIXrcW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/750/1%2ADu8mJsS0Lnz0kNEgFAo1tg.gif" alt="Calling  a flask endpoint with powerful backend computation" title="Calling  a flask endpoint with powerful backend computation" width="600" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The recording above explains the usage clearly. When we query the '/current' endpoint, it gives the initial value of 0.&lt;/p&gt;

&lt;p&gt;Then we assign a new value, the 40th Fibonacci number, through the '/set' endpoint. Calculating this number would take some time. Yet the system gives an immediate response, "New Fibonacci number will be assigned soon." This conveniently informs the user about the back-end task.&lt;/p&gt;

&lt;p&gt;An immediate query of the '/current' endpoint again results in 0. This is because the calculation hasn't been completed, and the value in the database is still 0.&lt;/p&gt;

&lt;p&gt;Yet, after a while, the same endpoint returns the value of the 40th Fibonacci number. The back-end calculations have finished and the Celery task updated the value in the database.&lt;/p&gt;

&lt;p&gt;Calculating the Fibonacci number isn't the massive computation you'd see in real-life scenarios. But it's a fair estimation of what they may look like. Instead of Fibonacci, you could trigger retraining of your machine learning model.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;You might be wondering where is the massive computation. Yet, the article is not about the calculation itself. We've focused on how we serve massive computations. For a fair estimation, we've used a Fibonacci number calculator.&lt;/p&gt;

&lt;p&gt;We've decoupled computations from the web server's request-response cycle. This allows us to perform calculations without interrupting the webserver.&lt;/p&gt;

&lt;p&gt;In this article, we used Celery to handle such decoupled tasks. While celery is capable of running in production, modern alternatives offer more features. Apache airflow and Prefect are some great technologies on this front.&lt;/p&gt;

&lt;p&gt;Python is a synchronous language by nature. Attempting to make it asynchronous comes with lots of overheads and drawbacks. Using celery for heavy computations is an elegant way to handle the problem.&lt;/p&gt;

&lt;p&gt;Yet, it doesn't mean asynchronous languages can get away with it. Massive computations aren't supposed to be served through the request-response cycle. They usually serve a different purpose than immediate, meaningful responses. Thus this method is helpful in every case.&lt;/p&gt;

</description>
      <category>python</category>
      <category>devops</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How The Cloud is Revolutionizing Gaming</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 23 Nov 2021 15:50:03 +0000</pubDate>
      <link>https://dev.to/codesphere/how-the-cloud-is-revolutionizing-gaming-3aa3</link>
      <guid>https://dev.to/codesphere/how-the-cloud-is-revolutionizing-gaming-3aa3</guid>
      <description>&lt;p&gt;There's virtually no sector of the tech industry that hasn't experienced at least some changes with the advent of cloud computing. One of the specific industries that is undergoing a shift of tectonic proportions is undeniably the gaming industry.&lt;/p&gt;

&lt;p&gt;Whether its game streaming, server hosting, or indie development, cloud is in the process of leaving a lasting mark on the gaming industry.&lt;/p&gt;

&lt;p&gt;Let's take a look into how!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#game-streaming"&gt;
  &lt;/a&gt;
  Game Streaming
&lt;/h3&gt;

&lt;p&gt;Virtually every big tech company has announced in the past couple of years that it's developing a cloud gaming platform, and it's no surprise why.&lt;/p&gt;

&lt;p&gt;Gaming is already a massive industry, but someone's ability to purchase and buy a game is currently dependent on their ability to run it. Now, while I imagine many of us developers have no issue running these games, not everyone is trying to dedicate 200gb of their hard drive to Call of Duty.&lt;/p&gt;

&lt;p&gt;Cloud gaming works by streaming the game from the cloud to the gamer's local machine. This means no downloads, complex rendering, or burdensome computing. All you need is a good internet connection to run your favorite game.&lt;/p&gt;

&lt;p&gt;There's already a laundry list of cloud gaming platforms, many of which are already up and running:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sony's Playstation Now&lt;/li&gt;
&lt;li&gt;Google's Stadia&lt;/li&gt;
&lt;li&gt;Microsoft's Xbox Game Pass&lt;/li&gt;
&lt;li&gt;Amazon's Luna&lt;/li&gt;
&lt;li&gt;NVIDIA's GeForce Now&lt;/li&gt;
&lt;li&gt;EA's Project Atlas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0D-sBwB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksvhrqzmmf47q5qcrfqn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0D-sBwB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksvhrqzmmf47q5qcrfqn.png" alt="cloud gaming" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An added benefit is that cross-platform development can become much easier if devs no longer have to build for specific platforms, however, this benefit is only going to kick in when games become cloud exclusive!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#server-hosting"&gt;
  &lt;/a&gt;
  Server Hosting
&lt;/h3&gt;

&lt;p&gt;Another way in which the cloud has changed the gaming industry is by making it increasingly easier to host game servers.&lt;br&gt;
For development companies, it means being able to create multiplayer games without massive server racks occupying both your headquarters and your balance sheet. Now, you can set up your server on the cloud and have it scale as your player base grows.&lt;/p&gt;

&lt;p&gt;Games tend to be especially prone to virality, which makes the ability to scale your servers incredibly important. That's why much of our emphasis on Codesphere, is making a truly scalable cloud platform.&lt;/p&gt;

&lt;p&gt;Additionally, private server hosting, for games Garry's Mod, Minecraft, and DayZ has become much easier. All it takes to set up a server hosting company for your favorite game is some basic cloud knowledge. So for everyday gamers, the increase of the server hosting companies means cheaper rates for server hosting.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#indie-development"&gt;
  &lt;/a&gt;
  Indie Development
&lt;/h3&gt;

&lt;p&gt;Lastly, the advent of cloud computing means that the ability to build and secure backends is no longer limited to just the big guys.&lt;/p&gt;

&lt;p&gt;Indie developers now have the ability to build multiplayer games without the massive IT costs of a huge game dev company!&lt;br&gt;
If you're an indie dev looking for a simple cloud platform to get your game up and running, check out what we're building at &lt;a href="https://link.codesphere.com/GG"&gt;Codesphere&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We're trying to take the learning curve out of cloud computing, and we need your help to make it happen!&lt;/p&gt;

&lt;p&gt;Let us know what you think down below!&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>cloud</category>
      <category>developers</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Reactor – Simple Ways to create Flux/Mono
</title>
      <author>Harry Nguyen</author>
      <pubDate>Tue, 23 Nov 2021 15:40:19 +0000</pubDate>
      <link>https://dev.to/harrynguyen88/reactor-simple-ways-to-create-fluxmono-4md</link>
      <guid>https://dev.to/harrynguyen88/reactor-simple-ways-to-create-fluxmono-4md</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/reactor-create-flux-and-mono-simple-ways-to-create-publishers-reactive-programming"&gt;https://ozenero.com/reactor-create-flux-and-mono-simple-ways-to-create-publishers-reactive-programming&lt;/a&gt;&lt;br&gt;
Reactive Streams is an API and pattern that provides a standard for asynchronous stream processing with non-blocking back pressure. It is also being introduced in Java 9 Flow API with four simple interfaces: Publisher, Subscriber, Subscription and Processor.&lt;br&gt;
Read more&lt;br&gt;
&lt;a href="https://ozenero.com/reactor-create-flux-and-mono-simple-ways-to-create-publishers-reactive-programming"&gt;https://ozenero.com/reactor-create-flux-and-mono-simple-ways-to-create-publishers-reactive-programming&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Correlate Security Findings With AWS Security Hub and Amazon EventBridge</title>
      <author>🚀  Vu Dao 🚀 </author>
      <pubDate>Tue, 23 Nov 2021 15:37:12 +0000</pubDate>
      <link>https://dev.to/aws-builders/correlate-security-findings-with-aws-security-hub-and-amazon-eventbridge-1hal</link>
      <guid>https://dev.to/aws-builders/correlate-security-findings-with-aws-security-hub-and-amazon-eventbridge-1hal</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rather than spending time manually reacting to security alerts or looking at the GuardDuty/ Security hub dashboard, you can instead focus on activities such as enhancing application protection layers and improving your security program.&lt;/li&gt;
&lt;li&gt;This blog is a combine of AWS services such as guard duty, security hub, event bridge, step functions, network firewall rule group, lambda function and slack notification to provide the automation.&lt;/li&gt;
&lt;li&gt;And we use Pulumi to deploy those services as code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Solution-overview"&gt;Solution overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Network-Firewall-Rule-group"&gt;Network Firewall Rule group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Dynamodb-table"&gt;Dynamodb table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#EventBridge"&gt;EventBridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Step-functions"&gt;Step functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Lambda-functions"&gt;Lambda functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Using-Pulumi-to-create-infrastructure-as-code"&gt;Using Pulumi to create infrastructure as code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#solution-overview"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Solution overview&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon GuardDuty is a continuous security monitoring service that analyzes and processes data from VPC flow logs, cloudTrail, S3 data events, etc. Based on this data, GuardDuty analysis and detection by using threat intelligence feeds, signatures, anomaly detection, and machine learning in the AWS Cloud.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The automation provides in this blog post is focused on blocking traffic to and from suspicious remote hosts. GuardDuty detection of unintended communication with remote hosts triggers a series of steps, including blocking of network traffic to those hosts by using Network Firewall, and notification of security operators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All in serverless by using eventBridge with event pattern from &lt;code&gt;aws.securityhub&lt;/code&gt; source. For pattern matches such as HIGH or CRITICAL severity findings, as well as suspicious IP address, the event rule triggers step functions for remediation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Step Functions is a serverless orchestration service that lets you combine AWS Lambda functions and other AWS services to build business-critical applications. Step Functions service also provides retry and error-handling logic, while Lambda functions interact with networking controls to block traffic, and with a database to store data about blocked remote IP addresses.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azck1K0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/flow.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azck1K0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/flow.png%3Fraw%3Dtrue" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How it works?&lt;/strong&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#network-firewall-rule-group"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Network Firewall Rule group&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This rulegroup is used to block traffic to and from suspicious remote hosts using &lt;code&gt;STATELESS&lt;/code&gt; type and action &lt;code&gt;drop&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZggT5v4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/nfrg.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZggT5v4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/nfrg.png%3Fraw%3Dtrue" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamodb-table"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Dynamodb table&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The DDB tables is used to store the blocked IPs with attributes &lt;code&gt;HostIp&lt;/code&gt;, &lt;code&gt;CreatedAt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Billing Mode: &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fC9XbUVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/ddb.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fC9XbUVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/ddb.png%3Fraw%3Dtrue" width="880" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eventbridge"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;EventBridge&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define rules with flowing patterns where the &lt;code&gt;source&lt;/code&gt; is from &lt;code&gt;aws.securityhub&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;catch-ipv4:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "detail": {
        "findings": {
        "ProductFields": {
            "aws/guardduty/service/action/networkConnectionAction/remoteIpDetails/ipAddressV4": [{
            "exists": true
            }]
        }
        }
    },
    "detail-type": ["Security Hub Findings - Imported"],
    "region": ["us-west-2"],
    "source": ["aws.securityhub"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other findings:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "detail": {
        "findings": {
        "Severity": {
            "Label": ["HIGH", "CRITICAL"]
        }
        }
    },
    "detail-type": ["Security Hub Findings - Imported"],
    "region": ["us-west-2"],
    "source": ["aws.securityhub"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-functions"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Step functions&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sechub-record-ip&lt;/strong&gt;: include three lambda functions &lt;code&gt;add_ip_func&lt;/code&gt;, &lt;code&gt;update_rule_group_func&lt;/code&gt;, &lt;code&gt;send_finding_func&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXlhkG0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/sechub-record-ip.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXlhkG0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/sechub-record-ip.png%3Fraw%3Dtrue" width="744" height="509"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sechub-send-findings&lt;/strong&gt;: which use lamdba function resource &lt;code&gt;send_finding_func&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26IgTcvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/send-findings.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26IgTcvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/send-findings.png%3Fraw%3Dtrue" width="416" height="435"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sechub-prune-ip&lt;/strong&gt;: lambda functions &lt;code&gt;get_ip_func&lt;/code&gt;, &lt;code&gt;remove_ip_func&lt;/code&gt;, &lt;code&gt;send_finding_func&lt;/code&gt;, &lt;code&gt;update_rule_group_func&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tgAWOFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/sechub-prune-ip.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tgAWOFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/sechub-prune-ip.png%3Fraw%3Dtrue" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lambda-functions"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Lambda functions&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;add-ip-to-ddb&lt;/strong&gt;: The function parses the event to get &lt;code&gt;HostIp&lt;/code&gt; and then adds it to Dynamodb (DDB) table, if it's actually new IP then return a record which includes IP list and flag &lt;code&gt;NewIP=True&lt;/code&gt;, otherwise, flag &lt;code&gt;NewIP=False&lt;/code&gt; due to IP already exists in DDB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;get-ip-from-ddb&lt;/strong&gt;: This function is called by scheduled statemachine to get all blocked IPs in DDB which are expired (blocking time &amp;gt; 720 hours)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;remove-ip-from-ddb&lt;/strong&gt;: Base on the input of expired IPs from previous step functions, remove those IPs from DDB and then return the rest of IPs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;update-nf-rg&lt;/strong&gt;: This function override current Network firewall rule group with the input combine with current&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;send-gd-finding&lt;/strong&gt;: This function send notification of success or failure for any blocking IPs or high/critical findings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#we-walked-through-all-resources-which-are-going-to-deploy-in-this-solution-see-the-flow-more-detail"&gt;
  &lt;/a&gt;
  We walked through all resources which are going to deploy in this solution, see the flow more detail
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XL_WQ0Q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/flow_detail.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XL_WQ0Q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/flow_detail.png%3Fraw%3Dtrue" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-pulumi-to-create-infrastructure-as-code"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Using Pulumi to create infrastructure as code&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Source code in &lt;code&gt;TypeScript&lt;/code&gt;: &lt;a href="https://github.com/vumdao/aws-guardduty-sechub"&gt;aws-guardduty-sechub GitHub repository&lt;/a&gt;. The following commands show how to deploy the solution using Pulumi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First, need to set Pulumi configs such as AWS region, AWS account, AWS profile and webhook URL of slack channel&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pulumi config set aws:region us-west-2
pulumi config set aws:profile myprofile
pulumi config set --secret aws-guardduty-sechub:webhook_url https://slack.channel.com/&amp;lt;ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preview the stack&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pulumi preview
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy stack&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pulumi up
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check result on Pulumi graph view&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InQ4WSer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/pulumi-stack.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InQ4WSer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-guardduty-sechub/blob/master/images/pulumi-stack.png%3Fraw%3Dtrue" width="880" height="745"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclution"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Conclution&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In this blog post, we walked through a solution to use AWS services, including Amazon EventBridge, AWS step function, AWS Lambda, and Amazon DynamoDB, to correlate AWS Security Hub findings from multiple different AWS security services.&lt;/li&gt;
&lt;li&gt;By automating blocking traffic from suspicious IP addresses and sending high and critical findings to slack, we can prioritize and improve our security response.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/security/automatically-block-suspicious-traffic-with-aws-network-firewall-and-amazon-guardduty"&gt;Automatically block suspicious traffic with AWS Network Firewall and Amazon GuardDuty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/security/correlate-security-findings-with-aws-security-hub-and-amazon-eventbridge/"&gt;Correlate security findings with AWS Security Hub and Amazon EventBridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;🚀  Vu Dao 🚀 &lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;🚀 AWSome Devops | AWS Community Builder | AWS SA || ☁️ CloudOpz ☁️&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>guardduty</category>
      <category>cloudopz</category>
      <category>sechub</category>
    </item>
    <item>
      <title>My Programmer Humor Videos</title>
      <author>Mike</author>
      <pubDate>Tue, 23 Nov 2021 15:35:00 +0000</pubDate>
      <link>https://dev.to/mihaha/my-programmer-humor-videos-1b40</link>
      <guid>https://dev.to/mihaha/my-programmer-humor-videos-1b40</guid>
      <description>&lt;p&gt;Presenting here the top programming funny videos I invested time to create for you to giggle a bit :-)&lt;/p&gt;

&lt;p&gt;Aladdin Parody - A Whole New Code:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=jCZuBLD_j10"&gt;https://www.youtube.com/watch?v=jCZuBLD_j10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Programmer Pick Up Lines:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=MmPFMN6nYsg"&gt;https://www.youtube.com/watch?v=MmPFMN6nYsg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aladdin Parody - The Stack Overflow song:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Zk58ht8kFdg"&gt;https://www.youtube.com/watch?v=Zk58ht8kFdg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All voice overs are original, it was a pleasure to create.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>humor</category>
      <category>funny</category>
      <category>jokes</category>
    </item>
    <item>
      <title>The end of text documentation! 👨‍💻👩‍💻</title>
      <author>magen.smith</author>
      <pubDate>Tue, 23 Nov 2021 15:32:54 +0000</pubDate>
      <link>https://dev.to/magensmith/the-end-of-text-documentation-3e1o</link>
      <guid>https://dev.to/magensmith/the-end-of-text-documentation-3e1o</guid>
      <description>&lt;p&gt;You've been working on your task for two weeks, fixing bugs, adding features, writing hundreds and maybe even thousands of lines of code 👨‍💻👩‍💻, having fun , and then it comes - the documentation phase.✍️😤&lt;br&gt;
Now you have to transfer your thoughts to T-E-X-T.&lt;br&gt;
It's boring, it's long, it's difficult but necessary!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRz13Ipn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52s7kqkms5rxnhiv4jkc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRz13Ipn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52s7kqkms5rxnhiv4jkc.jpg" alt="It's so boring" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I discovered a new tool last week that will help you make this annoying process much simpler and faster.🚀&lt;/p&gt;

&lt;p&gt;Unlike all the tools available today - finally, you have everything integrated into the IDE. 👨‍💻👩‍💻&lt;br&gt;
This tool gives you a screen recorder that opens from the IDE and with few clicks your screen will be recorded  (you can even add a camera! 📷).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMJbnCV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26bpz7y8qkw7f1a0t8p6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMJbnCV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26bpz7y8qkw7f1a0t8p6.gif" alt="How cool is it?" width="600" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be able to explain everything you have done, in your own words and the video will be saved in the cloud.&lt;br&gt;
Your video will be attached directly to the lines of code you have written, so anyone who will struggle to understand your code will be able to watch the video directly from the IDE. &lt;/p&gt;

&lt;p&gt;If you are a video fan like me and you want to try something new, go to the Jetbrains marketplace and install SpeaCode, you won’t be disappointed, I promise! 😀&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link to the plugin:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://plugins.jetbrains.com/plugin/15672-speacode-video-screen-recorder-for-code--python-java-js-php-etc/"&gt;https://plugins.jetbrains.com/plugin/15672-speacode-video-screen-recorder-for-code--python-java-js-php-etc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PHswgrs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu2m9pk34ai2jmly7nza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PHswgrs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu2m9pk34ai2jmly7nza.png" alt="No more comment like that!" width="876" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tooling</category>
    </item>
  </channel>
</rss>
