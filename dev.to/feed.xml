<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build and Deploy a Responsive Portfolio Using React and Styled Components üíÖ</title>
      <author>Chaoo Charles</author>
      <pubDate>Mon, 13 Dec 2021 16:43:46 +0000</pubDate>
      <link>https://dev.to/chaoocharles/build-and-deploy-a-responsive-portfolio-using-react-and-styled-components-22mc</link>
      <guid>https://dev.to/chaoocharles/build-and-deploy-a-responsive-portfolio-using-react-and-styled-components-22mc</guid>
      <description>&lt;p&gt;In this course I will be showing you how I revamped my portfolio site using React and styled Components üíÖ.&lt;/p&gt;

&lt;p&gt;Live Portfolio: &lt;a href="https://chaoocharles.dev/"&gt;https://chaoocharles.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial üëá
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dK4f2Piqilo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>3 Reason Why Javascript Should be your First¬†Language</title>
      <author>Jason Shelley</author>
      <pubDate>Mon, 13 Dec 2021 16:32:28 +0000</pubDate>
      <link>https://dev.to/kinjiru09/3-reason-why-javascript-should-be-your-first-language-22jo</link>
      <guid>https://dev.to/kinjiru09/3-reason-why-javascript-should-be-your-first-language-22jo</guid>
      <description>&lt;p&gt;There are many languages to choose as your first language, i.e. Python, JavaScript, Go, and Ruby. All these languages have been heralded as easy languages to learn. There are good reasons to call these languages ‚Äúeasy‚Äù.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They are easy to set up and relatively easy to start creating projects.&lt;/li&gt;
&lt;li&gt;They have easy syntax and concepts that a beginner would find easy to understand right away.&lt;/li&gt;
&lt;li&gt;They have vibrant communities around them.&lt;/li&gt;
&lt;li&gt;There are a ton of libraries to help you build robust programs.&lt;/li&gt;
&lt;li&gt;There are many tutorials, books, videos, courses and other resources to learn these languages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another reason to learn one of these languages is there are many companies looking for developers who know these languages and they are willing to pay a decent wage. For example, &lt;a href="https://www.ziprecruiter.com/Salaries/Javascript-Developer-Salary"&gt;the average JavaScript developer with experience can make over $100,000.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But which one of these languages should be your first language?&lt;/p&gt;

&lt;p&gt;There are three reasons why Javascript should be your first language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-language"&gt;
  &lt;/a&gt;
  1) Language
&lt;/h2&gt;

&lt;p&gt;The actual Javascript language, ignoring the platform i.e. browser or Nodejs, has been a matter of controversy for years. Many people love it, others hate it. It is a widely used language with a long history. But the language has gone through so many revisions, that now we are stuck in this hybrid state, where some developers write JavaScript one way and other developers write it another way. This could be very intimidating and down right annoying at times. But in reality, it created a world where a developer can learn how to code in different mindsets.&lt;/p&gt;

&lt;p&gt;JavaScript is a multi-paradigm scripting language. It supports object-oriented, imperative, and functional programming styles. Even though it‚Äôs a dynamic language, you can use strongly typed languages that are built on top of JavaScript, like Typescript.&lt;/p&gt;

&lt;p&gt;The flexibility of the language allows you to write in all these different paradigms. Mastering these paradigms can benefit you later on when you want to learn another language that emphasizes one of these paradigms, i.e. an object oriented language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-platform"&gt;
  &lt;/a&gt;
  2) Platform
&lt;/h2&gt;

&lt;p&gt;JavaScript started in the web browser. It‚Äôs one of the core technologies of the web. Learning JavaScript allows you to understand how the web works. The amazing thing about Javascript is you literally have access to thousands and thousands of websites at your fingertips. That means you have access to all these websites‚Äô Javascript code. You can read other people‚Äôs code, learn, and practice.&lt;/p&gt;

&lt;p&gt;Getting started with JavaScript is relatively easy. Open a browser and start playing with code in the console, or open up any text editor and start writing some code inside of html tags and then open the file in your browser, no setup required.&lt;/p&gt;

&lt;p&gt;Now, JavaScript engines are common components of both server-side website deployments and non-browser applications. With the creation of Nodejs, React Native, Cordova, Electron and other application frameworks, you can build mobile applications, desktop applications, games and server side applications and services.&lt;/p&gt;

&lt;p&gt;JavaScript has even appeared in some embedded systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To be honest though, depending on your requirements and needs, JavaScript may not always be the best solution for non website apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The fact that you can learn JavaScript and transfer that knowledge to a different platform is very powerful and a great incentive for learning the language.&lt;/p&gt;

&lt;p&gt;Even though many languages, like Python, can be used across different platforms, Javascript still dominates the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-concepts-amp-design-patterns"&gt;
  &lt;/a&gt;
  3) Concepts &amp;amp; Design Patterns
&lt;/h2&gt;

&lt;p&gt;The third reason why you should learn JavaScript is that there are concepts and design patterns that are openly exposed to you while learning the language on different platforms.&lt;br&gt;
For example, if you write server side JavaScript using Nodejs, you are introduced to principles and design patterns that are at the core of the Nodejs ecosystem. For example, you will learn the following concepts and design patterns:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Event Loop&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Callbacks&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Event Emitter&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1) Modules&lt;/strong&gt;&lt;br&gt;
The concept of modules teaches you how to structure your code in small well defined components. Each module should focus on one thing and it should do it well. This helps you keep your code simple and understandable. This also helps with testing. This concept is seen throughout all of Nodejs APIs. This is good training for new developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Event Loop&lt;/strong&gt;&lt;br&gt;
When you learn about Nodejs asynchronous nature and it‚Äôs Event Loop, you are actually seeing the reactor pattern in use. This design pattern is an event handling pattern. Each I/O operation/event, i.e. file access, network operation, etc, is associated with a handler (see callbacks below). When an operation is done, its result is passed to the handler and the handler is invoked. The event loop handles all of this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Callbacks&lt;/strong&gt;&lt;br&gt;
Because of Nodejs asynchronous nature, it uses a unique design pattern at its core called the callback pattern.When an operation is done, it sends the result to another function. &lt;/p&gt;

&lt;p&gt;This pattern has pros and cons. But you are exposed to another design pattern, so it is still good for new developers to see how design patterns are used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Event Emitter&lt;/strong&gt;&lt;br&gt;
The event emitter class is at the core of Nodejs. This shows the observer pattern in use. An object can notify listeners when its state changes, i.e. when a button is clicked, when user input text in a text box, etc. This is a common design pattern used in many programming frameworks and platforms. &lt;/p&gt;

&lt;p&gt;Seeing how it is used in a production grade framework like Nodejs is good training for new developers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every platform has its own pros and cons and design principles. These are just a few I wanted to mention that are associated with Nodejs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;;TLDR;&lt;br&gt;
Javascript is used in many places and it can be fun to write and use in personal projects as well as professional projects. After learning JavaScript you can definitely find a developer job to get experience as a developer. Then you can learn other languages to advance your career.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>When should I use asynchronous code in JavaScript?</title>
      <author>Nico Zerpa (he/him)</author>
      <pubDate>Mon, 13 Dec 2021 16:32:17 +0000</pubDate>
      <link>https://dev.to/nicozerpa/when-should-i-use-asynchronous-code-in-javascript-1kfk</link>
      <guid>https://dev.to/nicozerpa/when-should-i-use-asynchronous-code-in-javascript-1kfk</guid>
      <description>&lt;p&gt;If you were learning JavaScript for some time, I'm sure that you've heard about asynchronous code. Promises, callbacks, the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords, etc. But a question that often gets unanswered is, when should I even use asynchronicity?&lt;/p&gt;

&lt;p&gt;The short answer is: &lt;strong&gt;only if you have to use a function that is already asynchronous and you need the return value of that function.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;For example, imagine that we have to create a function that receives the number of a Pok√©mon and returns its name, e.g. if you pass the number 25, it returns "Pikachu".&lt;/p&gt;

&lt;p&gt;In this function, we'll call the &lt;a href="https://pokeapi.co/"&gt;Pok√©API&lt;/a&gt; using the native &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch"&gt;&lt;code&gt;fetch&lt;/code&gt; function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing is, &lt;code&gt;fetch&lt;/code&gt; is an asynchronous function. And we need what this function returns because it's the response from the API. It means that the function we create should be asynchronous.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Enable strict mode&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPokemonName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pokeApiResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pokemonNumber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;pokeApiResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pokeApiResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pokeApiResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemon25&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemonName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Pok√©mon #25 is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pokemon25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// üëÜ Prints "Pok√©mon #25 is pikachu"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;In some cases, however, you can choose whether to use synchronous or asynchronous functions&lt;/strong&gt; to perform the same task. This often happens in Node.js, where you can read and write files using synchronous functions or asynchronous ones. Which ones should I use?&lt;/p&gt;

&lt;p&gt;If you're creating the back end of a website using Node.js (or Deno) or you're working on the front end, you should definitely use the async versions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synchronous tasks block everything else.&lt;/strong&gt; It means that, if a task takes a lot of time in Node, other people won't be able to enter the website until that task finished. On the front end, the site will freeze while a synchronous task runs. That's why async works better in those cases.&lt;/p&gt;




&lt;p&gt;If you liked this article, you'll love my JavaScript Newsletter.&lt;br&gt;
Every other Monday, I'll send you easy and actionable steps to level up your JavaScript skills. Check it out: &lt;a href="https://nicozerpa.com/newsletter"&gt;https://nicozerpa.com/newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>1 line of code: How to PascalCase a string</title>
      <author>martin krause</author>
      <pubDate>Mon, 13 Dec 2021 16:08:33 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-pascalcase-a-string-1fl4</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-pascalcase-a-string-1fl4</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toPascalCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\s\.&lt;/span&gt;&lt;span class="sr"&gt;_-&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns a new string in pascal case. &lt;br&gt;
Uses &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt;, &lt;code&gt;underscore&lt;/code&gt; and &lt;code&gt;dash&lt;/code&gt; as delimiter.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Web dev and designer tools (Part-2)</title>
      <author>Madiha Eram</author>
      <pubDate>Mon, 13 Dec 2021 16:06:49 +0000</pubDate>
      <link>https://dev.to/madiha_eram/web-dev-and-designer-tools-part-2-55j5</link>
      <guid>https://dev.to/madiha_eram/web-dev-and-designer-tools-part-2-55j5</guid>
      <description>&lt;p&gt;&lt;em&gt;So in this topic I've listed web developing and designing tools part 2 and you can find link at last of part 1 ,so we'll see&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Hidden websites for Web developers&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;a)&lt;a href="https://tabler-icons.io/"&gt;Tabler Icons&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
It's a free and open source icons designed with attention to detail to make your design stand out.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlwxykuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw6235j3apq6kw1h0a3h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlwxykuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw6235j3apq6kw1h0a3h.jpg" alt="Tabler Icons" width="880" height="802"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;b)&lt;a href="https://www.remove.bg/"&gt;remove bg&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
It removes image background üíØ automatically in 5s w/o a single click for free&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Om6__GXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5w2c2xbass0wnjpnft1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Om6__GXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5w2c2xbass0wnjpnft1.jpg" alt="Remove bg" width="880" height="680"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;c)&lt;a href="https://devresourc.es/"&gt;Dev resources&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
A collaborative list of resources for developers,presented in curated categories.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_MiycHX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38q00i0bzgutp64o0lnf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MiycHX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38q00i0bzgutp64o0lnf.jpg" alt="Dev resources" width="880" height="854"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;d)&lt;a href="https://freecodetools.org/"&gt;Free Code Tools&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Collection of free SEO and code tools&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dR5em6-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2s1a7nd9auxw74tibrq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dR5em6-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2s1a7nd9auxw74tibrq.jpg" alt="Free Code Tools" width="880" height="629"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Generate or browse beautiful color combinations for your designs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Awesome CSS layout generators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;a href="https://grid.layoutit.com/"&gt;Layout it&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yK6oUMRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmbsnkpeuaor8ltohrt2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yK6oUMRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmbsnkpeuaor8ltohrt2.jpg" alt="Layout it" width="880" height="693"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;b)&lt;a href="https://csslayout.io/"&gt;CSS layout&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZgBXFpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5lyn5y72hg680ed01v6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZgBXFpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5lyn5y72hg680ed01v6.jpg" alt="CSS Layout" width="880" height="879"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;c)&lt;a href="https://griddy.io/"&gt;Griddy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51hcwpbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pl9rbgawe8qbky1sij1g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51hcwpbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pl9rbgawe8qbky1sij1g.jpg" alt="Griddy" width="880" height="1005"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;d)&lt;a href="https://vue-grid-generator.netlify.app/"&gt;CSS Grid Layout&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEDhBZLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr76f77mv01k8lk012j3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEDhBZLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr76f77mv01k8lk012j3.jpg" alt="CSS Grid Layout" width="880" height="799"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.5 websites to become a better developer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;a href="https://geektastic.com/"&gt;Geekstatic&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
It's the go-to to improve your technical skills and get better at solving real life coding problems!.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7TGGC6XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fmnc6hmv4ckjhb6xrum.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TGGC6XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fmnc6hmv4ckjhb6xrum.jpg" alt="Geekstatic" width="880" height="746"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;b)&lt;a href="https://www.datacamp.com/?irclickid=TvF1ZXx-2xyIWCdRlKxBMx0uUkG2DMTddXGswE0&amp;amp;irgwc=1"&gt;DataCamp&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Targeted at Data Science,this will be the best one to master the fundamentals and get certifications!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nEcTSHiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71v4hz7p3mhfhobe2uru.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nEcTSHiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71v4hz7p3mhfhobe2uru.jpg" alt="Data Camp" width="880" height="717"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;c)&lt;a href="https://codesignal.com/"&gt;Code Signal&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Probably the most underrated,this one will have some difficult challenges that will make you use 100% of your braincells!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z37ewKk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12ekr7jncf5348n5ipn2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z37ewKk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12ekr7jncf5348n5ipn2.jpg" alt="Code Signal" width="880" height="917"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;d)&lt;a href="https://github.com/skreimeyer/RosettaCode"&gt;Rosettacode&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
It's a coding challenge website but that's not all ,it has challenges for nearly every coding language that exists!&lt;br&gt;
&lt;strong&gt;e)&lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
In this simple and hard problems are well explained, with a cool UIüî•&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpvWR465--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps1k1p9my8ze6g8zfz7q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpvWR465--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps1k1p9my8ze6g8zfz7q.jpg" alt="Advent of Code" width="880" height="693"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.5 JavaScript Animation Libraries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;a href="https://anijs.github.io/"&gt;Ani JS&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zsDE0xlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lu6ivbyd7fvb7q3rfg1l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zsDE0xlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lu6ivbyd7fvb7q3rfg1l.jpg" alt="Ani Js" width="880" height="901"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;b)&lt;a href="https://scrollrevealjs.org/"&gt;Scroll Reveal JS&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OBDGU-WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tg47eu5vjydl7j3jkih.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OBDGU-WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tg47eu5vjydl7j3jkih.jpg" alt="Scroll Reveal JS" width="880" height="893"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;c)&lt;a href="https://popmotion.io/pure/"&gt;Popmotion Pure&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2Jlq4V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/697ypomgtn0z56olq3we.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2Jlq4V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/697ypomgtn0z56olq3we.jpg" alt="Popmotion Pure" width="880" height="840"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;d)&lt;a href="https://mojs.github.io/"&gt;MoJS&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZA8Aq4Rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk5l5hfqy50x8thhzsz8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZA8Aq4Rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk5l5hfqy50x8thhzsz8.jpg" alt="MoJS" width="880" height="878"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;e)&lt;a href="https://lottiefiles.com/animation/js"&gt;Lottie JS&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDXHICp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixo04lrl8a1i3j131gl8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDXHICp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixo04lrl8a1i3j131gl8.jpg" alt="Lottie JS" width="880" height="998"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.6 JavaScript libraries you might don't know about it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;a href="https://github.com/mattboldt/typed.js"&gt;Typed.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbYvvuNL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju1cw3tfrenvyi3hgw8z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbYvvuNL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju1cw3tfrenvyi3hgw8z.jpg" alt="Typed.js" width="880" height="679"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;b)&lt;a href="http://gijsroge.github.io/tilt.js/"&gt;Tilt.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7GLbMS06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jon9s6ihdp5jfopu3m1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7GLbMS06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jon9s6ihdp5jfopu3m1.jpg" alt="Tilt.js" width="880" height="732"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;c)&lt;a href="https://greensock.com/docs/"&gt;GSAP&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBHvw39r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rn9yowndxs1zfux2rzpk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBHvw39r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rn9yowndxs1zfux2rzpk.jpg" alt="GSAP" width="880" height="718"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;d)&lt;a href="http://scrollmagic.io/docs/"&gt;Scroll Magic&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7n6IXo8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxt1yqljikm8mx5pdpi1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7n6IXo8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxt1yqljikm8mx5pdpi1.jpg" alt="Scroll Magic" width="880" height="662"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;e)&lt;a href="http://rishabhp.github.io/bideo.js/"&gt;Bideo.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDPV2bQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmxs6tqxvj8umaffh2l4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDPV2bQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmxs6tqxvj8umaffh2l4.jpg" alt="Bideo.js" width="880" height="1203"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;f)&lt;a href="http://kenwheeler.github.io/slick/"&gt;Slick&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gO9yVQ91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a2yj0j9zbg66j9kig9n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gO9yVQ91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a2yj0j9zbg66j9kig9n.jpg" alt="Slick" width="880" height="842"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.Best websites to find colors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;a href="https://colorhunt.co/"&gt;Color Hunt&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_ItHf-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y89sm5r4ymk0ammu9aoc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_ItHf-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y89sm5r4ymk0ammu9aoc.jpg" alt="Color Hunt" width="880" height="713"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;b)&lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;c)&lt;a href="https://picular.co/"&gt;Picular&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7U5dlwP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lap0rqvx9wxvc0wu60uj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7U5dlwP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lap0rqvx9wxvc0wu60uj.jpg" alt="Picular" width="880" height="749"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;d)&lt;a href="https://cssgradient.io/"&gt;CSS Gradient&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rj7flA7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrbpv7dhqayfdknn11o1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rj7flA7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrbpv7dhqayfdknn11o1.jpg" alt="CSS Gradient" width="880" height="736"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;e)&lt;a href="https://brandcolors.net/"&gt;BrandColors&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwlnfKTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix3fjvgopyfs5r1csz10.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwlnfKTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix3fjvgopyfs5r1csz10.jpg" alt="Brand Colors" width="880" height="745"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;f)&lt;a href="https://color.adobe.com/create"&gt;Adobe Color&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9VFJaAoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm3eldcty6c4b22bpyir.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VFJaAoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm3eldcty6c4b22bpyir.jpg" alt="Adobe Color" width="880" height="909"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;g)&lt;a href="https://uigradients.com/#DeepSeaSpace"&gt;UI Gradients&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And if I know more I'll be adding in part-1 and also in part-2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link to Part-1‚¨áÔ∏è&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://dev.to/madiha_eram/web-dev-and-designer-tools-part-1-2k1"&gt;Web developer and designer tools Part-1&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>design</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Git in just a few minutes</title>
      <author>EstherWanjiru</author>
      <pubDate>Mon, 13 Dec 2021 15:58:42 +0000</pubDate>
      <link>https://dev.to/estherwanjiru/git-in-just-a-few-minutes-3k69</link>
      <guid>https://dev.to/estherwanjiru/git-in-just-a-few-minutes-3k69</guid>
      <description>&lt;p&gt;Hey, here's a deep dive into Git. &lt;/p&gt;

&lt;p&gt;Incase you missed the Introduction to git and GitHub, &lt;a href="https://dev.to/estherwanjiru/introduction-to-git-and-github-25ei"&gt;start here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whether you are a long time programmer or are just getting started, you know that Git is quite pivotal in your coding journey.&lt;/p&gt;

&lt;p&gt;Git is a distributed version control system that makes tracking changes to your code very easy. It's easy to swap across versions and well who doesn't like the idea that one can undo the changes in your code through Git.&lt;/p&gt;

&lt;p&gt;Lastly, Git is so ideal when incorporated in Teams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git%5B%5D"&gt;Guide to install Git:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installation, Configure it with your GitHub account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: _(Option1)_Initialize Git in your existing project&lt;/strong&gt;&lt;br&gt;
To do this simply run the command in the terminal from the folder that contains all your project files. This will add a .git folder to your project that Git will use to track all the changes you make to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;_(Option2)_Cloning your repository(entire project being managed by Git) by creating a new repo or getting an existing repository  and copying the link to clone the project. Ensure you pick the right url according to how you set up your Git, either ssh or http. Thereafter type the command below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Git clone ssh_url or Git clone http
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in your terminal with the copied url at the end of the command. This copies all the code from the repo on to your computer and sets up Git to track all the changes. It adds a .git folder so that when you are ready to push your changes to GitHub, git will already know where to push them too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git structure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Working Directory&lt;/strong&gt; - All the files in the work repository in their current state. At this point none of the working repositories are being tracked by Git. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Index/ staging&lt;/strong&gt; - To track these changes in the work directory we need to add them to the Index. This can be done by using the command below.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Git we want to track all the changes that have been made in the working directory. This still doesn't make the changes in the official version in your code that you can change in between them. Which is why we commit these changes from the index to the final stage, the Head. Using the command below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "message saved with the commit."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.&lt;strong&gt;Head&lt;/strong&gt; - This tells git that the changes are final and requires a message to be saved with the commit. After committing changes to the head, they are saved as a version on our computer but are not in our remote repository on GitHub. &lt;/p&gt;

&lt;p&gt;In order to get these changes to our remote repository on GitHub, we need to push them to GitHub using the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you set up your project using &lt;code&gt;git clone&lt;/code&gt;, then Git will already know where to push all the files to. But if you used &lt;code&gt;git init&lt;/code&gt; to initialize a new project, then it will need to be told where to push these changes to. This can be done by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating a repository on GitHub&lt;/li&gt;
&lt;li&gt;Copy the ssh_url for cloning.&lt;/li&gt;
&lt;li&gt;Thereafter, you can use the origin command below. This tells Git that we have a remote repository called origin at the copied url.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin ssh_url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the remote repo added, we can use the &lt;code&gt;git push&lt;/code&gt; command to push the changes to the remote repo on GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-far-we-can"&gt;
  &lt;/a&gt;
  So far... we can  ü•∑üèªü¶∏üèª‚Äç‚ôÄÔ∏è
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a repository.&lt;/li&gt;
&lt;li&gt;Make changes to it.&lt;/li&gt;
&lt;li&gt;Save the changes.&lt;/li&gt;
&lt;li&gt;Push the changes to GitHub.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-if"&gt;
  &lt;/a&gt;
  What if  ü§î
&lt;/h1&gt;

&lt;p&gt;One of your team members wants to pull down the changes that we have pushed to GitHub on to their local computer, this is where we use the command below in their terminal and all the changes from GitHub will be pulled onto their local computer and merges with all the changes that they have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#thats-basically-all-you-need-to-know-about-git-to-get-started"&gt;
  &lt;/a&gt;
  That's basically all you need to know about Git to get started!!!
&lt;/h1&gt;

&lt;p&gt;Please make sure you leave a like üëç/loveheart ‚ù§Ô∏è on this one. It encourages one to write more and more üéâ üéä&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>git</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Introducing My New Blogfolio</title>
      <author>Braydon Coyer</author>
      <pubDate>Mon, 13 Dec 2021 15:53:40 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/introducing-my-new-blogfolio-50c9</link>
      <guid>https://dev.to/braydoncoyer/introducing-my-new-blogfolio-50c9</guid>
      <description>&lt;p&gt;If you're reading this, it means that my newly revamped blogfolio has gone live! I'm &lt;em&gt;so&lt;/em&gt; excited that you're here and experiencing the new site that I've been working hard on in my spare time for the last 3 months. It's been a labor of love, and I'm stoked that I finally hit the publish button.&lt;/p&gt;

&lt;p&gt;Check out my &lt;a href="https://braydoncoyer.dev"&gt;new blogfolio here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBuFtOEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639000556/new_blogfolio_igoj09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBuFtOEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639000556/new_blogfolio_igoj09.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1639000556/new_blogfolio_igoj09.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My new website has a fresh coat of paint, improves on many things of the previous iteration, and adds several new features that I'm really excited about!&lt;/p&gt;

&lt;p&gt;Before I dive into that, though, I want to briefly touch on why I decided to rebuild my blogfolio. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-rebuilt-my-blogfolio"&gt;
  &lt;/a&gt;
  Why I Rebuilt my Blogfolio
&lt;/h2&gt;

&lt;p&gt;I've been blogging for a little over a year now. In October of 2020, I decided I wanted to make an investment by documenting my knowledge and learning in public. &lt;/p&gt;

&lt;p&gt;Originally, I hosted my blog over on Hashnode. With its 2-minute setup, custom domain mapping and engaging community, Hashnode was extremely alluring. And it suited me well! However, it wasn't long before I had the desire to dig deeper and build my own blogging platform. I wanted to truly own all of my content, grow my own personal brand, theme my blog however I wanted and add features as I saw fit.&lt;/p&gt;

&lt;p&gt;I chose Gatsby as my framework and utilized MDX as my CMS. I worked hard on the design, learned Gatsby and eventually published my own slice of the internet in early 2021.&lt;/p&gt;

&lt;p&gt;üì£ You can still visit my old portfolio by &lt;a href="https://wizardly-payne-b3707b.netlify.app/blog"&gt;clicking here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Since then I've published 34 articles, written 6 sponsored articles and reached more than 100,000 people online. It's been quite the year! &lt;/p&gt;

&lt;p&gt;So why rebuild?&lt;/p&gt;

&lt;p&gt;There's a few technical reasons, but a big part of my decision stemmed from my continuous desire to learn new things. I treat my domain as an environment for experimentation; an area to promote creativity. My codebase is ever-evolving and changing. Sometimes things stick around, while other times I realize it's best not to push something to the public. Regardless of the end result, I always learn something.&lt;/p&gt;

&lt;p&gt;ü§î You may not think that building a blog is very complicated. But, I disagree. &lt;a href="https://braydoncoyer.dev/blog/why-every-developer-should-build-their-own-blog/"&gt;Here's why I think every developer should build their own blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I do have a few reasons that are a bit more justifiable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatsby was getting slow. Build times were long, and because of how I built my blog, it was getting harder and harder to add new features.&lt;/li&gt;
&lt;li&gt;I had this extremely weird bug where I couldn't commit changes - no idea why. I tried a lot of things to fix this, even deleting the project and cloning it down again. Sometimes I could commit, sometimes I couldn't. I tried different computers, too. Nothing worked. ü§∑&lt;/li&gt;
&lt;li&gt;All of my blog content was sourced from MDX. And while having the ability to inject React components into the markdown allowed for some great interactions, it was a pain to open my IDE, manually create a new article, stage my changes and redeploy my blog. This made me start to seek out a CMS. I know, I know: first-world problems.&lt;/li&gt;
&lt;li&gt;I had been using Next.js at work for an internal project, and I really enjoyed it. Having the option to pre-render pages at build time (SSG), request time (SSR) or incrementally (ISR) opened a lot of possibilities and solved a few pain points I was experiencing (like the point above). More on Next.js and my tech stack later in this article...&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-on-my-blogfolio"&gt;
  &lt;/a&gt;
  What's New on My Blogfolio
&lt;/h2&gt;

&lt;p&gt;Now comes the fun part! I've jam-packed this site with lots of new features, and a handful of improvements!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notion-as-a-cms"&gt;
  &lt;/a&gt;
  Notion as a CMS
&lt;/h3&gt;

&lt;p&gt;My entire life lives in Notion: work projects, notes, contacts, books I'm reading, my daily journal, my weekly calendar, family stuff, finances, blog posts - you name it! When I saw that the Notion API had been released, it only made sense to utilize the API and use Notion as a CMS. &lt;/p&gt;

&lt;p&gt;Now when I want to release a new article, I don‚Äôt have to open VS Code and manually create a new file, push my changes and redeploy my app - now I can simply create a new item in my blog database, write my article as I normally would, and the new post shows up automatically on my site. It‚Äôs like magic! ‚ú®¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#article-reactions"&gt;
  &lt;/a&gt;
  Article Reactions
&lt;/h3&gt;

&lt;p&gt;A new feature debuting with my updated blogfolio is article reactions! &lt;/p&gt;

&lt;p&gt;I'm a big fan of community engagement, a quick way for others to gauge the helpfulness of an article is a quick glance at the reactions. Built with Supabase and Next.js API routes, visitors can react to an article with the following emojis: üëç, ‚ù§Ô∏è, üëè, and üéâ! &lt;/p&gt;

&lt;p&gt;I'm planning on adding some micro-interactions when a reaction is activated, so keep an eye out for that in the near future! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FEILiczs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639000654/article_reactions.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FEILiczs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639000654/article_reactions.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1639000654/article_reactions.png" width="880" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-open-graph-images"&gt;
  &lt;/a&gt;
  Automated Open Graph Images
&lt;/h3&gt;

&lt;p&gt;Another feature I'm excited to release is automated Open Graph images!&lt;/p&gt;

&lt;p&gt;I use to craft social banners by hand for each article. It allowed for flexibility, but was very time-consuming.&lt;/p&gt;

&lt;p&gt;With the help of the powerful Cloudinary API, my portfolio grabs the article banner and title and crafts a dynamic Open Graph image. I'm really proud of this feature, not only because it'll save me lots of time, but because I think it looks super slick, too! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dO4S0sg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639000884/open_graph_preview_rn6qqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dO4S0sg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639000884/open_graph_preview_rn6qqm.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1639000884/open_graph_preview_rn6qqm.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stats-page"&gt;
  &lt;/a&gt;
  Stats page
&lt;/h3&gt;

&lt;p&gt;Stolen almost directly from &lt;a href="https://sld.codes"&gt;SLD&lt;/a&gt;, I've incorporated a &lt;a href="http://braydoncoyer.dev/stats"&gt;Stats page on my site&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;From here visitors can see how many active visitors I have on the site, total page views, the number of articles I've published, an in-depth look into article reactions, and more! &lt;/p&gt;

&lt;p&gt;This was accomplished with a variety of APIs, and the statistics update every 60 seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vb5DuWrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639001056/stats_page_obds27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vb5DuWrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639001056/stats_page_obds27.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1639001056/stats_page_obds27.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#article-read-feature"&gt;
  &lt;/a&gt;
  Article 'READ' feature
&lt;/h3&gt;

&lt;p&gt;A nice quality of life addition I wanted to include was the ability for visitors to quickly scan and identify articles they've already read.&lt;/p&gt;

&lt;p&gt;Sometimes it's hard to remember what has already been seen, especially as time passes and visitors return to my blog. This little nice-to-have has come in handy ‚Äî even for me as I built out the site!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h4ycvIVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639001338/read_feature_mdelsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h4ycvIVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639001338/read_feature_mdelsy.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1639001338/read_feature_mdelsy.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intelligent-article-suggestions-and-article-tags"&gt;
  &lt;/a&gt;
  Intelligent Article Suggestions and Article Tags
&lt;/h3&gt;

&lt;p&gt;I'm grouping these together because they're related, though in reality they should be considered separate features. &lt;/p&gt;

&lt;p&gt;As visitors reach the end of an article, my blog will intelligently suggest three additional articles to read in an attempt to help them find more helpful content. Behind the scenes, this is done through the tags associated with each article. &lt;/p&gt;

&lt;p&gt;And, because articles now have assigned tags, it's possible to now discover articles via tags on the blog list page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copy-code-to-clipboard"&gt;
  &lt;/a&gt;
  Copy Code to Clipboard
&lt;/h3&gt;

&lt;p&gt;A smaller feature that was often requested was the ability to copy a block of code to the clipboard. &lt;/p&gt;

&lt;p&gt;Visitors reading an article on desktop or medium-sized devices can now copy code with a single click! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sharing-an-article-to-social-media"&gt;
  &lt;/a&gt;
  Sharing an Article to Social Media
&lt;/h3&gt;

&lt;p&gt;One area that I improved over my previous blog iteration is where the social sharing options are placed. &lt;/p&gt;

&lt;p&gt;Previously, these options were located at the top of the page and hidden under a three-dot menu. Not the easiest to find; I wasn‚Äôt really considering the user experience here and instead wanted to implement a dropdown because it looked cool! &lt;/p&gt;

&lt;p&gt;This second attempt is a bit more elegant, and I put a bit more thought into the UX. If a visitor is reading an article on their tablet or computer, the sticky sidebar on the right contains easy-to-identify social icons for access at any point. &lt;/p&gt;

&lt;p&gt;If on mobile, the social icons have been relocated and placed at the end of an article, allowing visitors to share the article if they found it helpful. &lt;/p&gt;

&lt;p&gt;Alongside the social icons is a new copy to clipboard icon for those who want to grab the URL directly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lasted-edited-date-for-articles"&gt;
  &lt;/a&gt;
  Lasted Edited Date for Articles
&lt;/h3&gt;

&lt;p&gt;An article on my blog is treated like a living document; it gets better over time as I gain feedback on the content, expand my knowledge on the subject, or update the article due to a change or deprecation.&lt;/p&gt;

&lt;p&gt;From a reader's perspective, it can be helpful to know that the article they're reading is up-to-date, which is why I've included an updated date beneath the published date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3jXm5Cd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639001477/updated_date_hvs5ws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3jXm5Cd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639001477/updated_date_hvs5ws.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1639001477/updated_date_hvs5ws.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animations-and-page-transitions"&gt;
  &lt;/a&gt;
  Animations and Page Transitions
&lt;/h3&gt;

&lt;p&gt;I'm not a huge fan of distracting animations on websites, especially when I'm reading an article. &lt;/p&gt;

&lt;p&gt;It goes without saying, though, that animation can play a role in design and user experience. &lt;/p&gt;

&lt;p&gt;I've included subtle page transitions with my new blogfolio, and even some parallax scrolling on the &lt;a href="http://braydoncoyer.dev/projects"&gt;Projects&lt;/a&gt; page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dedicated-projects-page"&gt;
  &lt;/a&gt;
  Dedicated Projects Page
&lt;/h3&gt;

&lt;p&gt;Piggybacking off of that, my revamped blogfolio contains its own dedicated &lt;a href="http://braydoncoyer.dev/projects"&gt;Projects&lt;/a&gt; page. &lt;/p&gt;

&lt;p&gt;My previous iteration displayed projects on the home page. While the esthetic was nice, it didn't leave much room for additional information, and locating the projects required the visitor to scroll down quite a ways. &lt;/p&gt;

&lt;p&gt;My hope is that the new dedicated Projects page makes it easier to access some of my select works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobile-navigation-menu"&gt;
  &lt;/a&gt;
  Mobile Navigation Menu
&lt;/h3&gt;

&lt;p&gt;Another new addition to this site is the new mobile navigation menu. &lt;/p&gt;

&lt;p&gt;Visitors will now be able to click on a hamburger menu in the top-right of their device and access a navigation menu for easy traversal of my site, and to change the theme on the fly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-new-look-for-the-changelog"&gt;
  &lt;/a&gt;
  A New Look for the Changelog
&lt;/h3&gt;

&lt;p&gt;Although the Changelog page isn't new for this release, I've updated the look and also grabbed the content from Notion.&lt;/p&gt;

&lt;p&gt;I like the idea of documenting the changes I make on this site. It gives visitors a way to see what's new, and gives me a birds-eye view of the noteworthy things I've shipped. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESQFvUmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639001598/changelog_feature_vvdfun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESQFvUmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1639001598/changelog_feature_vvdfun.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1639001598/changelog_feature_vvdfun.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-access-to-the-resume"&gt;
  &lt;/a&gt;
  Easy Access to the Resume
&lt;/h3&gt;

&lt;p&gt;Finally, I added a way to quickly access my most recently updated resume directly from the footer. This should be helpful for potential future employers, or for anyone else who is interested in seeing my work history.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tech-stack"&gt;
  &lt;/a&gt;
  The Tech Stack
&lt;/h2&gt;

&lt;p&gt;I'm sure some of you are interested to know what technologies I used to build my JAMstack blogfolio. I have this information &lt;a href="https://braydoncoyer.dev/toolbox#this-site-&amp;amp;-blog"&gt;listed on my toolbox page&lt;/a&gt;, but let me dive a bit deeper here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs-version-12"&gt;
  &lt;/a&gt;
  Next.js Version 12
&lt;/h3&gt;

&lt;p&gt;I'm using &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt; as my framework of choice for the rebuild. Specifically, the newly released version 12 which comes with a host of new additions! Using middleware, I was able to easily redirect incoming traffic to an updated slug for a select few articles. &lt;/p&gt;

&lt;p&gt;All of the pages on my site are either statically generated at build time, or incrementally regenerate to fetch new data. This means my blogfolio is blazing fast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  Notion
&lt;/h3&gt;

&lt;p&gt;As previously mentioned, I'm using &lt;a href="https://www.notion.so/product?utm_source=google&amp;amp;utm_campaign=2075789710&amp;amp;utm_medium=80211061601&amp;amp;utm_content=500427479647&amp;amp;utm_term=notion&amp;amp;targetid=aud-1188813422817:kwd-312974742&amp;amp;gclid=Cj0KCQiAzMGNBhCyARIsANpUkzMIIZl2Z9mzf48BtyHyqEdNRIJpk6z9majB1vQgp1fXQ4OBMqodeYoaAn8REALw_wcB"&gt;Notion&lt;/a&gt; as my CMS. When I want to publish a new article, I create a new item in my blog database, update the appropriate properties and Next's ISG handle's the distribution for users. &lt;/p&gt;

&lt;p&gt;I'm also using Notion for my Toolbox and Changelog pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwindcss-version-3"&gt;
  &lt;/a&gt;
  TailwindCSS Version 3
&lt;/h3&gt;

&lt;p&gt;Once again, I'm using &lt;a href="https://tailwindcss.com"&gt;Tailwind&lt;/a&gt; to style my blogfolio but this time using the newly released version 3! ‚ú®&lt;/p&gt;

&lt;p&gt;With this new revamp, I'm relying more on the Typography plugin to handle a lot of my content styling. Compared to my previous blog, this means that my markup is drastically cleaner. The only utility classes used in the markup is there for specific stylistic reasons. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supabase"&gt;
  &lt;/a&gt;
  Supabase
&lt;/h3&gt;

&lt;p&gt;I gave &lt;a href="https://supabase.com"&gt;Supabase&lt;/a&gt; a try for a side project a few months ago and immediately fell in love. &lt;/p&gt;

&lt;p&gt;I'm using Supabase to track my article hit count as well as article reactions. Pair the ease of use with Next's API routes and the experience was super smooth. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloudinary"&gt;
  &lt;/a&gt;
  Cloudinary
&lt;/h3&gt;

&lt;p&gt;Notion allows me to embed images directly in my articles, but instead of having Notion serve the images, I decided to shift to &lt;a href="https://cloudinary.com"&gt;Cloudinary&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I'm also using Cloudinary's powerful image transformation API to create dynamic Open Graph banners. It's super cool, and I'm sure I'll be writing up a tutorial soon!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iconic"&gt;
  &lt;/a&gt;
  Iconic
&lt;/h3&gt;

&lt;p&gt;One of the things that give UIs that extra level of polish is consistency, and icons play an important part in that. There are countless icon libraries available, but I chose to go with the premium &lt;a href="https://iconic.app"&gt;Iconic&lt;/a&gt; library. Each icon is crafted to perfection - and I hope you enjoy them as much as I do!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#revue"&gt;
  &lt;/a&gt;
  Revue
&lt;/h3&gt;

&lt;p&gt;When it was announced that newsletters powered by Revue can be embedded in your Twitter profile, I quickly made the switch from Buttondown. &lt;/p&gt;

&lt;p&gt;Revue has a robust API as well, allowing me to perform all sorts of operations here on my blogfolio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acknowledgments"&gt;
  &lt;/a&gt;
  Acknowledgments
&lt;/h2&gt;

&lt;p&gt;Although I was shipping the code, this adventure was hardly a one-man endeavor.  &lt;/p&gt;

&lt;p&gt;I'd like to thank the following individuals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/jonmeyers_io"&gt;Jon Meyers&lt;/a&gt; - for his incredibly helpful Egghead course on using the Notion API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/DBredvick"&gt;Drew Bredvick&lt;/a&gt; - for helping me debug some super weird SEO rendering issues.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/jamesm"&gt;James&lt;/a&gt; - for his brilliantly designed icons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/jlengstorf"&gt;Jason Lengstorf&lt;/a&gt; - for his helpful article on adding text overlays using Cloudinary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I've had a ton of fun revamping this site, and I've learned a lot too! &lt;/p&gt;

&lt;p&gt;Thanks for checking it out, and for reading this far! &lt;/p&gt;

&lt;p&gt;Keep an eye out for future updates - I've got a lot planned!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>What is props and how to use props in react js.</title>
      <author>Adam Alex</author>
      <pubDate>Mon, 13 Dec 2021 15:49:33 +0000</pubDate>
      <link>https://dev.to/bralexsvg/what-is-props-and-how-to-use-props-in-react-js-3kd6</link>
      <guid>https://dev.to/bralexsvg/what-is-props-and-how-to-use-props-in-react-js-3kd6</guid>
      <description>&lt;p&gt;I believe you landed on this article because you have probably started learning React Js or you want to hone your skills in it. Whatever the case, let us get started.  React js has a different approach compared to the other JavaScript frameworks when transferring data from one component to the other.  Props come in handy to provide a gateway to send data from one component to another.  To get a better understanding of how props work in react, you need a good grasp of how components work in general first. I suggest you watch my tutorial on getting with react js on my YouTube channel.  Link below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDK0C9hS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sauoulxm1kml28zrqsut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDK0C9hS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sauoulxm1kml28zrqsut.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
(&lt;a href="https://www.youtube.com/watch?v=8sZGbdE7IZc&amp;amp;t=370s"&gt;https://www.youtube.com/watch?v=8sZGbdE7IZc&amp;amp;t=370s&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-isare-props"&gt;
  &lt;/a&gt;
  What is/are props.
&lt;/h2&gt;

&lt;p&gt;Props stand for properties. They are arguments passed to react components via HTML attributes.&lt;br&gt;
React Props are like function arguments in JavaScript and attributes in HTML.&lt;br&gt;
Let's use a link tag in HTML for instance&lt;br&gt;
&lt;code&gt;&amp;lt;a href = "/home" /&amp;gt;&lt;/code&gt;&lt;br&gt;
href is the attribute, the value is the data wrapped in by the quotation marks. &lt;br&gt;
So basically, a prop is a special keyword in React that is being used to send data from one component to another.&lt;br&gt;
One important thing to note is, data passed via props is uni-directional only. (from parent component to child component)&lt;br&gt;
Also, the data received by the child component from the parent component is read-only. The data should never be changed inside the child component. &lt;br&gt;
How to use props&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Firstly, define an attribute and its value(data)&lt;/li&gt;
&lt;li&gt;Then pass it to child component(s) by using Props&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3 .Finally, render the Props Data&lt;br&gt;
Create two components and name them by ParentComp.js and ChildComp.js&lt;br&gt;
Below is my Parent Component and a nested child component&lt;/p&gt;

&lt;p&gt;`import ChildComp from "./ChildComp"&lt;/p&gt;

&lt;p&gt;function ParentComp( ) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;I am the parent component&amp;lt;/h1&amp;gt;
  &amp;lt;ChildComp /&amp;gt;
    &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;export default ParentComp`&lt;/p&gt;

&lt;p&gt;Below is our child component&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function ChildComp() {&lt;br&gt;
    return (&lt;br&gt;
        &amp;lt;div&amp;gt;&lt;br&gt;
    &amp;lt;h2&amp;gt;I will receive data from my parent soon&amp;lt;/h2&amp;gt;&lt;br&gt;
        &amp;lt;/div&amp;gt;&lt;br&gt;
    )&lt;br&gt;
}&lt;/code&gt;   &lt;/p&gt;

&lt;p&gt;That was a very good affirmation from our child component thoughüòÇ&lt;br&gt;
Now that is rendered. Lets open our browser and see fireworks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8Y_6SOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cqbczvwfc2r1mlsug0r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8Y_6SOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cqbczvwfc2r1mlsug0r.PNG" alt="Image description" width="561" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can render our child component multiple times by just duplicating the codes a couple of times.&lt;br&gt;
`function ParentComp( ) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;I am the parent component&amp;lt;/h1&amp;gt;
  &amp;lt;ChildComp /&amp;gt;
  &amp;lt;ChildComp /&amp;gt;
  &amp;lt;ChildComp /&amp;gt;

    &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}`&lt;/p&gt;

&lt;p&gt;This is what we will see displayed on the screen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ux8TFqew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba9vh4cs3xtas6fsf3wa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ux8TFqew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba9vh4cs3xtas6fsf3wa.PNG" alt="Image description" width="812" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem now is what if we want to have dynamic outputs?&lt;br&gt;
This is because, each of the child components may have different data. This issue can be solved by our good friend &lt;strong&gt;props&lt;/strong&gt;. Lets see howüôå&lt;br&gt;
With regards to the html link example i stated earlier on which is&lt;br&gt;
&lt;code&gt;&amp;lt;a href="www.twitter.com"&amp;gt;Click and start tweeting&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
In the case of React js. We can also do the same by wrapping the values with &lt;strong&gt;interpolation{}&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;ChildComp attribute = {value}  /&amp;gt;&lt;/code&gt;&lt;br&gt;
We can have many attributes and assign them to their respective values in the tag. &lt;br&gt;
So now let us see a typical example. &lt;br&gt;
In our parent component, lets us serve some dynamic data to our child component because remember our child component gave an affirmation that it will be receiving data from the parent component soonü§£üòÇ So lets make that happened.&lt;/p&gt;

&lt;p&gt;`function ParentComp( ) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;I am the parent component&amp;lt;/h1&amp;gt;
  &amp;lt;ChildComp passion =  {'I love Coding to the fullest'} /&amp;gt;

    &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
&lt;code&gt;&lt;br&gt;
Lets see how we can receive such data in our child component&lt;br&gt;
&lt;/code&gt;&lt;code&gt;function ChildComp( props ) {&lt;br&gt;
    return (&lt;br&gt;
        &amp;lt;div&amp;gt;&lt;br&gt;
    &amp;lt;h2&amp;gt;{props.passion}&amp;lt;/h2&amp;gt;&lt;br&gt;
        &amp;lt;/div&amp;gt;&lt;br&gt;
    )&lt;br&gt;
}&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
Make sure you state the &lt;strong&gt;props&lt;/strong&gt; keyward in the function parameter.&lt;br&gt;
.&lt;br&gt;
Alternatively, we could also send the data by wrapping our values in a quotation mark. &lt;br&gt;
`&lt;br&gt;
function ParentComp( ) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;I am the parent component&amp;lt;/h1&amp;gt;
  &amp;lt;ChildComp name = "Alex" proffession = "Software Enginner" /&amp;gt;
    &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;br&gt;
Lets us now see how we can receive the data in our child component&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vr-Xmp2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v864y7n95uzkk692hie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vr-Xmp2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v864y7n95uzkk692hie.png" alt="Image description" width="880" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recap:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Props stand for properties and is a special keyword in React&lt;/li&gt;
&lt;li&gt;Props are being passed to components like function arguments&lt;/li&gt;
&lt;li&gt;Props can only be passed to components in one way (parent to child)&lt;/li&gt;
&lt;li&gt;Props data is immutable (read-only)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting a good grasp on props is a very crucial when using react js to build applications.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this content?üòòüòç&lt;br&gt;
Please kindly leave a comment below and let me know what's on your mind about the content. ü§∑‚Äç‚ôÇÔ∏è Thank you&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>The 1 JavaScript Mistake That Costed Me 2 Days (As A Pretty Experienced Developer)</title>
      <author>Mohmed Ishak</author>
      <pubDate>Mon, 13 Dec 2021 15:36:43 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/the-1-javascript-mistake-that-costed-me-2-days-as-a-pretty-experienced-developer-3ia0</link>
      <guid>https://dev.to/ishakmohmed/the-1-javascript-mistake-that-costed-me-2-days-as-a-pretty-experienced-developer-3ia0</guid>
      <description>&lt;p&gt;Hey, guys! Do you still remember the first time you encountered a serious bug in programming? I'm sure you got stuck like crazy and couldn't move on for days, weeks, or even months. In this article, I'll share with you a particular mistake that costed me 2 days, and my sanity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-from-hell-in-nodejs"&gt;
  &lt;/a&gt;
  Array From Hell in Node.js
&lt;/h3&gt;

&lt;p&gt;Here's the task you wanna accomplish. Look at the code snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endAVotingSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;asyncHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;votingSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;VotingSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arrayThatWillBeModified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;votingSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arrayThatWillBeModified&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Modify the array&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;VotingSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arrayThatWillBeModified&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we're doing is that we're grabbing an array that is returned by MongoDB, and then modifying it, and finally updating it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-question-is-will-it-work"&gt;
  &lt;/a&gt;
  The question is, will it work?
&lt;/h4&gt;

&lt;p&gt;Nope. It will throw an error. Wanna know the error? It took me 1 to 2 days to solve it. The error is, in the line which I wrote...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arrayThatWillBeModified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;votingSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...we as developers might assume that candidates is an array (WHICH IS ABSOLUTELY TRUE), and we would do all sorts of things with it like I did here, where I wrote a loop that presumably modified the array. &lt;/p&gt;

&lt;p&gt;The problem is, that array (&lt;code&gt;votingSession.candidates&lt;/code&gt;) is a Mongoose array, and it seems that you can't just modify it. Instead, you need to convert it to JavaScript array, and then you can modify your array. The solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arrayThatWillBeModified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;votingSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// .toObject() converts Mongoose array to JavaScript array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The not so cool thing is, even if you log that Mongoose array in console, everything would appear fine, and you'll see an array with the right data. That's it for today guys. If you like this article, leave a like. Thank you. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>reactnative</category>
      <category>node</category>
    </item>
    <item>
      <title>Create a custom hook for Show/Hide Password Visibility in React Native</title>
      <author>Aman Mittal</author>
      <pubDate>Mon, 13 Dec 2021 15:25:20 +0000</pubDate>
      <link>https://dev.to/amanhimself/create-a-custom-hook-for-showhide-password-visibility-in-react-native-10oo</link>
      <guid>https://dev.to/amanhimself/create-a-custom-hook-for-showhide-password-visibility-in-react-native-10oo</guid>
      <description>&lt;p&gt;Building login and signup forms in a React Native app comprise input fields and buttons. One field that you will often find yourself adding to these forms is the password field. This password field is composed of using React Native's &lt;code&gt;TextInput&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;The common behavior of this field is to hide a user's password behind obscure characters.&lt;/p&gt;

&lt;p&gt;Take a look at an example of the &lt;code&gt;TextInput&lt;/code&gt; component that is used to create a password field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextInput&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;autoCapitalize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;autoCorrect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;textContentType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;secureTextEntry&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;enablesReturnKeyAutomatically&lt;/span&gt;
          &lt;span class="nx"&gt;onChangeText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#F5EEDC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;paddingHorizontal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#d7d7d7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;90%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It uses the &lt;code&gt;secureTextEntry&lt;/code&gt; prop such that when a text value is entered in the input field, it is unclear what is being entered in that field.&lt;/p&gt;

&lt;p&gt;Here is the output of the above snippet on a device:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcjOgSXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/kn0yv9z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcjOgSXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/kn0yv9z.gif" alt="ss1" width="308" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, giving an option to a user to let them see the current value they enter could lead to a good experience and might be necessary in some cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-or-hide-password-visibility-hook"&gt;
  &lt;/a&gt;
  Show or Hide Password Visibility Hook
&lt;/h2&gt;

&lt;p&gt;To add the ability to show or hide the password field's visibility, let's create a custom hook in a new file called &lt;code&gt;useTogglePasswordVisibility.js.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Start by importing the &lt;code&gt;useState&lt;/code&gt; hook from React library. You will need to create two different state variables to toggle between the field's visibility and change the icon.&lt;/p&gt;

&lt;p&gt;Then define a function called &lt;code&gt;useTogglePasswordVisibility&lt;/code&gt;. Inside this function, create two new state variables. The first one is called &lt;code&gt;passwordVisibility&lt;/code&gt;. Its initial value is set to boolean &lt;code&gt;true&lt;/code&gt;. The reason is that this variable will be the value of the prop &lt;code&gt;secureTextEntry&lt;/code&gt; on the &lt;code&gt;TextInput&lt;/code&gt; component. You would want to hide the password field initially when the user enters the password in the input field.&lt;/p&gt;

&lt;p&gt;The second state variable defined is called &lt;code&gt;rightIcon&lt;/code&gt;. It has a default value of &lt;code&gt;eye&lt;/code&gt;. This value depends on the Icon Library you're using in your React Native app. For this example, I'm using &lt;strong&gt;MaterialCommunityIcons&lt;/strong&gt; from &lt;a href="https://docs.expo.dev/guides/icons/"&gt;Expo Vector Icons&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRightIcon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add a method called &lt;code&gt;handlePasswordVisibility&lt;/code&gt; that will allow the app user to toggle the password field's visibility between shown and hidden state.&lt;/p&gt;

&lt;p&gt;Lastly, do not forget to return all the variables and the handler method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRightIcon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setRightIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye-off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setPasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye-off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setRightIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setPasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-the-password-visibility-hook"&gt;
  &lt;/a&gt;
  Use the Password Visibility Hook
&lt;/h2&gt;

&lt;p&gt;Start by updating import statements in the &lt;code&gt;App.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Pressable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MaterialCommunityIcons&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@expo/vector-icons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hooks/useTogglePasswordVisibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, access the required variables and method from the &lt;code&gt;useTogglePasswordVisibility&lt;/code&gt; hook. Add the following line at the top of the &lt;code&gt;App&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modify the &lt;code&gt;TextInput&lt;/code&gt; component's prop. Make sure to add the &lt;code&gt;passwordVisibility&lt;/code&gt; as the value to the &lt;code&gt;secureTextEntry&lt;/code&gt; prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextInput&lt;/span&gt;
  &lt;span class="nx"&gt;secureTextEntry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// ... rest of the props remain unchanged&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;code&gt;View&lt;/code&gt; component that wraps the &lt;code&gt;TextInput&lt;/code&gt;, add a button using the &lt;code&gt;Pressable&lt;/code&gt; component. This button will allow the user to toggle between the hidden and shown state of the password field.&lt;/p&gt;

&lt;p&gt;This button wraps the icon component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* After TextInput component */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Pressable&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MaterialCommunityIcons&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#232323&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Pressable&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all! Here is the output after this step:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0hcKFd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/rTNH2Ud.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0hcKFd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/rTNH2Ud.gif" alt="ss2" width="308" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the complete code for the &lt;code&gt;App.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Pressable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MaterialCommunityIcons&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@expo/vector-icons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hooks/useTogglePasswordVisibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextInput&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;autoCapitalize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;autoCorrect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;textContentType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newPassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;secureTextEntry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;enablesReturnKeyAutomatically&lt;/span&gt;
          &lt;span class="nx"&gt;onChangeText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Pressable&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MaterialCommunityIcons&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#232323&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Pressable&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#F5EEDC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;paddingHorizontal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#d7d7d7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;90%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://github.com/amandeepmittal/react-native-examples/tree/master/custom-hook-password-toggle"&gt;Source code at this GitHub repo&lt;/a&gt;&lt;/em&gt; üêô&lt;/li&gt;
&lt;li&gt;Check out &lt;a href="https://amanhimself.dev/"&gt;other blog posts&lt;/a&gt; I wrote on React Native and Expo ‚úçÔ∏è&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/amanhimself"&gt;Say hi on Twitter&lt;/a&gt; üëã&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>mobile</category>
      <category>reactnative</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cloud computing quickstart</title>
      <author>Barbara</author>
      <pubDate>Mon, 13 Dec 2021 15:18:56 +0000</pubDate>
      <link>https://dev.to/barbara/cloud-computing-quickstart-3pk4</link>
      <guid>https://dev.to/barbara/cloud-computing-quickstart-3pk4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h2&gt;

&lt;p&gt;Cloud computing is the use of a network of remote servers hosted on the internet to store, manage and process data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no need to invest in hardware upfront&lt;/li&gt;
&lt;li&gt;rapid provisioning of resources&lt;/li&gt;
&lt;li&gt;provides efficient global access through deployments in different regions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud providers are Amazon, Microsoft, Google, Alibaba, Oracle and IBM. As Amazon is the biggest one, we are going to get an overview to get the basics needed for data engineering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-amazon-web-services"&gt;
  &lt;/a&gt;
  AWS - Amazon Web Services
&lt;/h2&gt;

&lt;p&gt;AWS offers more than 140 services for computation, storage, databases, networking and development tools. &lt;br&gt;
The services can be accessed in 3 ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS MGMT console: &lt;a href="https://console.aws.amazon.com/"&gt;https://console.aws.amazon.com/&lt;/a&gt; - The webapp&lt;/li&gt;
&lt;li&gt;AWS CLI: &lt;a href="https://aws.amazon.com/cli/"&gt;https://aws.amazon.com/cli/&lt;/a&gt; - The command line interface&lt;/li&gt;
&lt;li&gt;SDK's: &lt;a href="https://aws.amazon.com/tools/"&gt;https://aws.amazon.com/tools/&lt;/a&gt; - Software development kits. Available in a lot of programming languages. The advantage of using IaC - Infrastructure as code are &lt;em&gt;sharing&lt;/em&gt;, &lt;strong&gt;reproducibility&lt;/strong&gt;, &lt;strong&gt;multiple deployments&lt;/strong&gt; and &lt;strong&gt;maintainability&lt;/strong&gt;. For development with python we can use the famous &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/index.html"&gt;boto3&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As there are over hundred services available, you might be overwhelmed at first sight. In order to make the start a bit easier we create a glossary with the services you will need for data engineering and the according links to their documentation. As there are a lot more services than the ones mentioned below, feel free to dive deeper into the AWS documentation &lt;a href="https://docs.aws.amazon.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iam-identity-and-access-management"&gt;
  &lt;/a&gt;
  IAM - &lt;a href="https://aws.amazon.com/iam/"&gt;Identity and Access Management&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#user"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html"&gt;User&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A user is an entity, person or application that interacts with AWS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#role"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html"&gt;Role&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A role can be assigned to anyone who needs it. It is not uniquely connected to an entity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vpc-virtual-private-cloud"&gt;
  &lt;/a&gt;
  VPC - &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html"&gt;Virtual Private Cloud&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enables to launch AWS resources in a virtual network defined by your needs. It is a data center with the benefits of cloud infrastructure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#s3-simple-storage-service"&gt;
  &lt;/a&gt;
  S3 - &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"&gt;Simple Storage Service&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It can store, retrieve and access any amount of objects at any time in buckets. Depending on the need there are a lot of different &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-class-intro.html"&gt;storage classes&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#s3-buckets"&gt;
  &lt;/a&gt;
  S3 &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-buckets-s3.html"&gt;Buckets&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A bucket is a container for objects. There are a lot of useful properties like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Versioning: keep multiple versions of an object in the same bucket&lt;/li&gt;
&lt;li&gt;Static website hosting: a very cost-effective way to serve static web content&lt;/li&gt;
&lt;li&gt;Requester pays: makes the requester pay for requests and data transfer costs&lt;/li&gt;
&lt;li&gt;Permission management&lt;/li&gt;
&lt;li&gt;Data management: create lifecycle rules, transitioning data,  archive or delete data&lt;/li&gt;
&lt;li&gt;Metrics for usage, request, data transfer, bucket size, number of objects&lt;/li&gt;
&lt;li&gt;Access points: Create access points to share the bucket at scale&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#s3-objects"&gt;
  &lt;/a&gt;
  S3 &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingObjects.html"&gt;Objects&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;An object is a file and any meta that describes that file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ec2-elastic-cloud-compute"&gt;
  &lt;/a&gt;
  EC2 - &lt;a href="https://aws.amazon.com/ec2/?ec2-whats-new.sort-by=item.additionalFields.postDateTime&amp;amp;ec2-whats-new.sort-order=desc"&gt;Elastic Cloud Compute&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A web service that provides secure, resizable compute capacity in the cloud. If we want to use the cloud self-managed we can use EC2 + Postgresql, EC2 +  Unix FS instead of Amazon RDS or Amazon DynamoDB and Amazon S3. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rds-relational-database-service"&gt;
  &lt;/a&gt;
  RDS - &lt;a href="https://aws.amazon.com/rds/"&gt;Relational Database Service&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A relational database service that manages common database administration tasks, resizes automatically, and is cost-friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redshift"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.aws.amazon.com/redshift/latest/mgmt/welcome.html"&gt;Redshift&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;it is a column-oriented storage&lt;/li&gt;
&lt;li&gt;MPP (massive parallel processing) database&lt;/li&gt;
&lt;li&gt;good to store OLAP workloads, summing over a long history&lt;/li&gt;
&lt;li&gt;internally it is a modified postgresql&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#iac-infrastructure-as-code-example-with-boto3"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/BarbaraJoebstl/data-engineering-nd/blob/master/data-warehouse/lesson3-cloud-computing/IaC_Redshift.ipynb"&gt;IaC - Infrastructure as Code Example with boto3&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>python</category>
      <category>infrastructureascode</category>
      <category>redshift</category>
    </item>
    <item>
      <title>Still not finished</title>
      <author>Liz</author>
      <pubDate>Mon, 13 Dec 2021 15:05:32 +0000</pubDate>
      <link>https://dev.to/lizblake/still-not-finished-5b6a</link>
      <guid>https://dev.to/lizblake/still-not-finished-5b6a</guid>
      <description>&lt;p&gt;It's 9:25 am, and I'm usually up at this time because of my workout pods. But guess what, it's finals week. I'm two 5-hour energies and an all nighter in. I'm not sure I can think straight, but I am sure finishing out this semester strong. As strong as turning in three late assignments is.&lt;/p&gt;

&lt;p&gt;Because I've been "having the college experience" the past two weeks (beers, boys, and benched), I really don't know what I have and haven't done with the final project for my IST 402 class. Which is honestly really disappointing cause I always look forward to doing it, but I haven't had the mental space or time. And guess what, I have all night today and tomorrow to make something magical happen besides it looking a third decent. &lt;/p&gt;

&lt;p&gt;I've been working on creating an event badge based off the below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0JsMlIZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1hgitgcumxpz7byce5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0JsMlIZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1hgitgcumxpz7byce5x.png" alt="Image description" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is the interpretation so far:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQXURROz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m5vsz28d7vl6re12ak2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQXURROz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m5vsz28d7vl6re12ak2.png" alt="Image description" width="828" height="1028"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are so many placeholders at the moment because I just haven't been able to work on it. However, it has an annoying beautiful shadow. And frankly, that's the best part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; :hover .holePunch {
        box-shadow: inset 0px 0px 2px hsl(220deg 10% 40% / 0.333),
          inset 0px 0px 4px hsl(220deg 10% 40% / 0.333),
          inset 0px 0px 6px hsl(220deg 10% 40% / 0.333);
      }
      .badgeContainer:hover {
        box-shadow: 0px 0px 2px hsl(220deg 10% 40% / 0.333),
          0px 0px 4px hsl(220deg 10% 40% / 0.333),
          0px 0px 6px hsl(220deg 10% 40% / 0.333);
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Complain if you want, but I feel it just has a modern look.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz-eQnCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9vufybz5of2o3vgyhq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz-eQnCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9vufybz5of2o3vgyhq3.png" alt="Image description" width="806" height="1042"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find it in it's current state at:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/runtimeErrorsMadeEasy"&gt;
        runtimeErrorsMadeEasy
      &lt;/a&gt; / &lt;a href="https://github.com/runtimeErrorsMadeEasy/Project3"&gt;
        Project3
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This project was initially part of the issue queue with HAX, taking reverse engineering and creating open source resources. Eventually it will be published on NPM here: &lt;a href="https://www.npmjs.com/org/runtimeerrorsmadeeasy"&gt;https://www.npmjs.com/org/runtimeerrorsmadeeasy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm honestly starting to fall asleep, so maybe I'll revisit this at a later state to add some updates.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="80px" src="https://open.spotify.com/embed/track/274tSPavv09i163nBnYrCU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
