<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Improve textarea UX using simple CSS trick</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 27 Jul 2021 16:45:45 +0000</pubDate>
      <link>https://dev.to/melnik909/improve-textarea-ux-using-simple-css-trick-862</link>
      <guid>https://dev.to/melnik909/improve-textarea-ux-using-simple-css-trick-862</guid>
      <description>&lt;p&gt;Whenever I see textarea with a fixed height I want to scream: "Give me userfriendly textarea". I want to enter data comfortably. Give me this.&lt;/p&gt;

&lt;p&gt;I understand developers do that because textarea changing breaks the layout. But we can find a more elegant solution. Set a minimal comfortable height and save resizing of it but disable width changes using resize: vertical. And your users will not break the layout by chance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
üñê I'm always open to any opportunities to share knowledge about CSS and HTML with you. If you need help feel free to reach out to me: &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get awesome goods for frontenders: üëï &lt;a href="https://www.redbubble.com/i/t-shirt/Front-End-developer-by-melnik909/79109127.FPE53"&gt;T-Shirt&lt;/a&gt;, üéÅ &lt;a href="https://www.redbubble.com/i/sticker/Front-End-developer-by-melnik909/79109127.EJUG5"&gt;Stickers&lt;/a&gt;, ü•Ω &lt;a href="https://www.redbubble.com/i/mask/Front-End-developer-by-melnik909/79109127.6BSL1"&gt;Masks&lt;/a&gt;, üß© &lt;a href="https://www.redbubble.com/i/magnet/Front-End-developer-by-melnik909/79109127.TBCTK"&gt;Magnets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Developer First Culture &amp; Collectives at Stack Overflow w/ Ben Matthews</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 27 Jul 2021 16:44:33 +0000</pubDate>
      <link>https://dev.to/linearb/developer-first-culture-collectives-at-stack-overflow-w-ben-matthews-haf</link>
      <guid>https://dev.to/linearb/developer-first-culture-collectives-at-stack-overflow-w-ben-matthews-haf</guid>
      <description>&lt;p&gt;If you‚Äôve ever written code you‚Äôve probably heard of Stack Overflow.&lt;/p&gt;

&lt;p&gt;Most of us have learned from them or shared knowledge on their site. They‚Äôve also got one of the most inclusive and positive engineering cultures out there.&lt;/p&gt;

&lt;p&gt;On this week's episode of &lt;a href="https://open.spotify.com/episode/54GeeR80VdGjiXwenLnDzc"&gt;Dev Interrupted&lt;/a&gt; we've brought on Ben Matthews, Director of Engineering at Stack Overflow, to give us the inside scoop on Stack's operations, teams and company culture. Ben also discusses their newest product launch - &lt;strong&gt;Collectives&lt;/strong&gt; - and why he thinks they will be a game changer for dev teams.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/54GeeR80VdGjiXwenLnDzc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Stack Overflow engineering: a developer-first culture&lt;/li&gt;
&lt;li&gt;Leading with empathy and empowering developers&lt;/li&gt;
&lt;li&gt;Hiring the right devs&lt;/li&gt;
&lt;li&gt;Onboarding with purpose&lt;/li&gt;
&lt;li&gt;Team composition and organization&lt;/li&gt;
&lt;li&gt;Enabling work-life balance and maintaining team morale by actually caring: and requiring time off&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#youtube-highlights"&gt;
  &lt;/a&gt;
  &lt;strong&gt;YouTube Highlights:&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O873vxozamw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5rRsbb75Oqg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s1WHPiQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrzc51hhz30s20dxabmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1WHPiQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrzc51hhz30s20dxabmw.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>culture</category>
      <category>management</category>
      <category>stackoverflow</category>
    </item>
    <item>
      <title>How I Think About JavaScript Types (A Mental Model for Beginners)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 27 Jul 2021 16:16:20 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/how-i-think-about-javascript-types-a-mental-model-for-beginners-bg1</link>
      <guid>https://dev.to/michaelmangial1/how-i-think-about-javascript-types-a-mental-model-for-beginners-bg1</guid>
      <description>&lt;p&gt;Recently, I've had several friends who are aspiring to become professional JavaScript developers, resulting in a steady supply of questions. The whole experience has had me thinking about how I can break the curse of knowledge and explain software development (JavaScript in particular) concepts in a way that amuses and sticks with early learners. In an effort to record my experience, I will begin to capture my mental model for comprehending JavaScript types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Logically, to understand types one must first understand &lt;em&gt;variables.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the realm of science, a variable is something that can change in an experiment that needs to be changed, controlled, or observed depending on the goal of the experiment. To put it in simpler terms, it is something that can change that plays a factor in the outcome of an experiment. For example, if you conducted an experiment to determine the optimal amount of water for a plant's growth, the water would be a changeable factor that would impact the outcome of the experiment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8fpqyiJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1475906089153-644d9452ce87%3Fixlib%3Drb-1.2.1%26q%3D85%26fm%3Djpg%26crop%3Dentropy%26cs%3Dsrgb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8fpqyiJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1475906089153-644d9452ce87%3Fixlib%3Drb-1.2.1%26q%3D85%26fm%3Djpg%26crop%3Dentropy%26cs%3Dsrgb" alt="https://images.unsplash.com/photo-1475906089153-644d9452ce87?ixlib=rb-1.2.1&amp;amp;q=85&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=srgb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the realm of computer science, your code is effectively an experiment. Writing code is nothing else but experimenting with various instructions for a computer to reach the desired outcome. In a coding "experiment," there are also factors that can change that impact the outcome of the experiment. That is, there are variables in a coding experiment. As computer science is a narrower discipline of science, and a coding experiment is a narrower kind of experiment, the variables in a coding experiment are more narrow/specific. In code, a variable represents &lt;em&gt;data&lt;/em&gt; that plays a factor in the outcome of your code, the outcome of your instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVOwRL0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1610563166150-b34df4f3bcd6%3Fixlib%3Drb-1.2.1%26q%3D85%26fm%3Djpg%26crop%3Dentropy%26cs%3Dsrgb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVOwRL0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1610563166150-b34df4f3bcd6%3Fixlib%3Drb-1.2.1%26q%3D85%26fm%3Djpg%26crop%3Dentropy%26cs%3Dsrgb" alt="https://images.unsplash.com/photo-1610563166150-b34df4f3bcd6?ixlib=rb-1.2.1&amp;amp;q=85&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=srgb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a word, variables represent/store data in a computer application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h2&gt;

&lt;p&gt;This begs a question. What is data?&lt;/p&gt;

&lt;p&gt;In code, data is simply information that can be interpreted by a programming language.&lt;/p&gt;

&lt;p&gt;Just as a human language is a method of communication accompanied by peculiar rules and styles, a programming language is a method of communicating with a computer to write instructions to achieve a desired outcome. And there are various human languages that are all means to the same end, communication, there are various programming languages which are all means to creating a computer application. Each language may have similarities and differences in the computer world as much as the human world.&lt;/p&gt;

&lt;p&gt;Each programming language is effectively an intermediate layer between the coder and the computer. The programming language has certain rules for how you communicate with the computer to write instructions. The programming language, therefore, interprets your code and knows what to do with it. It's an attempt at making things easier than the nitty-gritty of having to talk directly to the computer yourself. Think of it as a translator that offers a language that you can speak to them in, interprets your words, and speaks to the computer in its unique, complicated language.&lt;/p&gt;

&lt;p&gt;So, each programming language has different rules for how to "speak the language" with code. Now, I won't dive into the entirety of how to speak this language. We're just interested in the rules of JavaScript, a programming language, to interpret different types of information.&lt;/p&gt;

&lt;p&gt;What are the different types of information, or data, that JavaScript knows to interpret?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic-types"&gt;
  &lt;/a&gt;
  Basic Types
&lt;/h3&gt;

&lt;p&gt;Well, there are 5 &lt;em&gt;basic&lt;/em&gt; data (information) types that you will ordinarily come across:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's break down each one.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;string&lt;/em&gt; is for storing &lt;em&gt;text&lt;/em&gt; information. A use of strings is displaying text to a user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am text information that is being represented.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;em&gt;boolean&lt;/em&gt; is for storing whether something is &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt;. It's like a coin. It's either heads, or it's tails. It's either true, or it's false. A use of booleans is for handling &lt;em&gt;conditional&lt;/em&gt; logic in your instructions (i.e. if this is true ‚Äî&amp;gt; do that).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;em&gt;number&lt;/em&gt; is for storing &lt;em&gt;numerical&lt;/em&gt; information. A number can be a whole number (integer) or a number with a decimal place (float or floating-point number). A use of numbers is doing math in your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Undefined&lt;/em&gt; is the default type when the programming language receives a variable that was never assigned a value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variableThatWasNeverAssignedAValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Null&lt;/em&gt; is also used to signify that a variable has no value (is not defined). However, this type is used when a &lt;em&gt;coder&lt;/em&gt;, not the programming language, wants to mark a variable as having no value. In other words, it is used when a coder wants to &lt;em&gt;intentionally&lt;/em&gt; mark a variable as having no value. Technically, a variable of type null is assigned as it has been assigned a value of null. This is useful because if a coder inspects a variable and sees that it is undefined, they will know there must be a mistake in their code. If the coder instead saw that it is null, then they will know that the variable having no value was intentional. This can help find mistakes in your coded instructions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variableThatIsIntentionallyAssignedNoValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#structural-types"&gt;
  &lt;/a&gt;
  Structural Types
&lt;/h2&gt;

&lt;p&gt;In addition to the basic types, there are &lt;em&gt;structural&lt;/em&gt; types that you will ordinarily come across:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both arrays and objects are called &lt;em&gt;structural&lt;/em&gt; types because they &lt;em&gt;structure&lt;/em&gt; data, multiple types of data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Arrays&lt;/em&gt; store data in a sequence. Think of it like a line, or array, of Roman soldiers lined up in a sequence.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mn92si8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/97f90576-46e7-4df1-b7af-ee08975a1874/Untitled.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mn92si8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/97f90576-46e7-4df1-b7af-ee08975a1874/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/97f90576-46e7-4df1-b7af-ee08975a1874/Untitled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of soldiers, the data in the sequence of an array are called &lt;em&gt;elements&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An element can be any type, including the basic types we just discussed and the structural types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arrays are helpful for grouping variables together, establishing an association. Arrays are also &lt;em&gt;iterable.&lt;/em&gt; Meaning, you can write instructions to "loop" through an array, accessing each element, and then doing something with that element. Think of a commander going through the line of Roman soldiers one-by-one and doing something (like checking the soldier's helmet). Each programming language, including JavaScript, have built in ways that you can "iterate," or "loop" through an array, have access to an element, and do something with that element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Objects&lt;/em&gt; are used to associate data, or a &lt;em&gt;value&lt;/em&gt;, with a &lt;em&gt;key&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;someKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;anotherKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Objects also group variables together establishing an association. This can be cleaner, more organized than writing out a bunch of variables. Unlike arrays, they are useful when you want to "lookup" a value by a key. For arrays, you have to "loop" through each element to access value. With objects, you can "lookup" a value by referencing the key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;someKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;anotherKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someKey&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 123&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someKey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 123&lt;/span&gt;

&lt;span class="c1"&gt;// also&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anotherKey&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 456&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anotherKey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key-value pairs on an object are called &lt;em&gt;properties&lt;/em&gt;. The value of a property is accessed by a key, either by &lt;em&gt;dot notation&lt;/em&gt; (&lt;code&gt;obj.anotherKey&lt;/code&gt;) or &lt;em&gt;bracket notation&lt;/em&gt; (&lt;code&gt;obj['anotherKey']&lt;/code&gt;). These are just two different means to the same end according to the rules of JavaScript.&lt;/p&gt;

&lt;p&gt;Objects have sometimes been called "dictionaries," as you can look up a definition (the value) by looking up a phrase (the key).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-types"&gt;
  &lt;/a&gt;
  Action Types
&lt;/h3&gt;

&lt;p&gt;Finally, there are &lt;em&gt;functions&lt;/em&gt; which I like to call an &lt;em&gt;action&lt;/em&gt; type.&lt;/p&gt;

&lt;p&gt;A function is a chunk of code that only runs when it is triggered/called. This is important for not running all your code at once, but to have code run according to a timeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;putMeInCoachImReadyToPlay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Batter Up!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the function has some code ready to be executed. The code will execute when the function is "called." Functions are called by typing out the function name plus &lt;code&gt;()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;putMeInCoachImReadyToPlay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; alerts "Batter Up!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can think of &lt;code&gt;()&lt;/code&gt; as pressing the play button on a remote.&lt;/p&gt;

&lt;p&gt;You can also "supply" data needed for a function to work as you expect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;putMeInCoachImReadyToPlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, Batter Up!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;putMeInCoachImReadyToPlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; alerts "Nick, Batter Up!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;In conclusion, it would be very hard to play a sport without knowing its rules. Similarly, it is very hard to learn a programming language without knowing its rules. In order to understand rules, we need mental models to make it stick.&lt;/p&gt;

&lt;p&gt;Hopefully, this article helps paint a mental model for variables and data types in JavaScript. However, the best mental model is the one that makes most sense to you, and that can vary from person to person. The important thing is to be intentional to form mental models so that the load of learning new information is comprehendible and not overwhelming.&lt;/p&gt;

&lt;p&gt;So, if you are new to JavaScript, write down the mental model you are forming as an aid to your learning. If you are familiar with JavaScript, write down the mental model you have accumulated. As writing this article as proven to me, even a veteran could benefit from thinking through JavaScript mental models.&lt;/p&gt;

&lt;p&gt;If you want some more help on forming a JavaScript mental model, I recommend Dan Abramov's course &lt;em&gt;&lt;a href="https://justjavascript.com/"&gt;Just JavaScript&lt;/a&gt;&lt;/em&gt;. His mental models are different than mine but the intent and usefulness is the same.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Terraform Full Course for Beginners | Hashicorp Terraform Associate Certification Exam Prep course</title>
      <author>Sandip Das</author>
      <pubDate>Tue, 27 Jul 2021 16:10:40 +0000</pubDate>
      <link>https://dev.to/aws-heroes/terraform-full-course-for-beginners-hashicorp-terraform-associate-certification-exam-prep-course-5eg7</link>
      <guid>https://dev.to/aws-heroes/terraform-full-course-for-beginners-hashicorp-terraform-associate-certification-exam-prep-course-5eg7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EJ3N-hhiWv0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform Full Course for Beginners | Hashicorp Terraform Associate &lt;br&gt;
Certification Exam Prep course  | Terraform course With AWS Example | Terraform explained for Beginners&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Infrastructure as Code (IaC)&lt;/li&gt;
&lt;li&gt;What is Infrastructure as Code&lt;/li&gt;
&lt;li&gt;IaC and its benefits&lt;/li&gt;
&lt;li&gt;What is Terraform? &lt;/li&gt;
&lt;li&gt;Terraform Features&lt;/li&gt;
&lt;li&gt;Terraform Basic Commands &lt;/li&gt;
&lt;li&gt;Terraform Main Commands In-depth explanation
(Terraform get, init, validate, plan, apply, state, workspaces, destroy, import, taint, graph)&lt;/li&gt;
&lt;li&gt;Terraform Coding
(Structure, resources, data sources, variable, providers, functions, modules, 
provisioners, Lifecycle Policy, Remote State backend)&lt;/li&gt;
&lt;li&gt;Terraform Cloud &amp;amp; Enterprise&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Terraform is our tool of choice to manage the entire lifecycle of infrastructure using infrastructure as code. That means declaring infrastructure components in configuration files that are then used by Terraform to provision, adjust and tear down infrastructure in various cloud providers&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn in-depth about what is Terraform, the important commands we use daily, how we can code with Terraform, and how to work with teams while coding infra as code with Terraform. &lt;/p&gt;

&lt;p&gt;‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ T I M E S T A M P S ‚è∞ ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ &lt;br&gt;
0:00 - Intro&lt;br&gt;
0:33 - What is Infrastructure as Code (IaC)?&lt;br&gt;
01:48 - IaC benefits&lt;br&gt;
04:40 - What is Terraform?&lt;br&gt;
05:33 - Terraform Features&lt;br&gt;
7:28 - Terraform CLI overview&lt;br&gt;
7:54 - Terraform Installation Instructions &lt;br&gt;
8:26 - Terraform Init&lt;br&gt;
10:26 - Terraform Validate&lt;br&gt;
12:10 - Terraform Plan&lt;br&gt;
14:49 - Terraform Apply&lt;br&gt;
19:42 - Terraform State&lt;br&gt;
22:56 - Terraform Workspaces&lt;br&gt;
26:54 - Terraform Destroy&lt;br&gt;
28:12 - Terraform Import&lt;br&gt;
29:12 - Terraform Taint&lt;br&gt;
31:22 - Terraform Coding Intro&lt;br&gt;
32:38 - Terraform Resource Referencing&lt;br&gt;
35:12 - Terraform Example Code Explanation&lt;br&gt;
42:40 - Supply AWS Credentials to Terraform&lt;br&gt;
43:54 - Terraform Data Sources&lt;br&gt;
45:10 - Terraform Variables Overview&lt;br&gt;
45:56 - Input Variable In-depth explanation&lt;br&gt;
48:12 - Different Ways to Pass Input variables in Terraform&lt;br&gt;
49:56 - Input validation&lt;br&gt;
52:46 - Input Variable Order&lt;br&gt;
52:46 - Output Values&lt;br&gt;
55:12 - Local Values&lt;br&gt;
56:14 - Terraform Providers&lt;br&gt;
58:32 - Terraform Functions&lt;br&gt;
1:00:00 - Terraform Modules&lt;br&gt;
1:01:54 - How to Use Terraform Modules&lt;br&gt;
1:04:45 - Terraform Provisioners&lt;br&gt;
1:07:28 - Lifecycle Management In Terraform&lt;br&gt;
1:09:18 - Remote State Backends in Terraform (Very Important)&lt;br&gt;
1:15:00 - Terraform Cloud&lt;br&gt;
1:22:11 - Terraform Enterprise&lt;br&gt;
1:23:34 -  Closing Notes&lt;/p&gt;

&lt;p&gt;‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Useful Links üîó ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ &lt;br&gt;
Terraform Example AWS Code/Projects: ‚ñ∫ &lt;a href="https://github.com/hashicorp/terraform-provider-aws/tree/master/examples"&gt;https://github.com/hashicorp/terraform-provider-aws/tree/master/examples&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Terraform Providers: ‚ñ∫ &lt;a href="https://registry.terraform.io/browse/providers"&gt;https://registry.terraform.io/browse/providers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terraform Functions:  ‚ñ∫ &lt;a href="https://www.terraform.io/docs/language/functions/index.html"&gt;https://www.terraform.io/docs/language/functions/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terraform Commands: ‚ñ∫ &lt;a href="https://www.terraform.io/docs/cli/commands/index.html"&gt;https://www.terraform.io/docs/cli/commands/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Course Ebook üöÄ      ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ &lt;br&gt;
Terraform Full Course Ebook: ‚ñ∫ &lt;a href="https://drive.google.com/file/d/1lTzVx7LbwB6618MIwnCU_p4maA4m_4Fs/view?usp=sharing"&gt;https://drive.google.com/file/d/1lTzVx7LbwB6618MIwnCU_p4maA4m_4Fs/view?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Connect with me üëã   ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ &lt;br&gt;
My Site   ‚ñ∫  &lt;a href="https://bit.ly/3rz82SQ"&gt;https://bit.ly/3rz82SQ&lt;/a&gt;&lt;br&gt;
INSTAGRAM ‚ñ∫  &lt;a href="https://bit.ly/3iFWfy8"&gt;https://bit.ly/3iFWfy8&lt;/a&gt;&lt;br&gt;
TWITTER   ‚ñ∫  &lt;a href="https://bit.ly/3i6lkDs"&gt;https://bit.ly/3i6lkDs&lt;/a&gt;&lt;br&gt;
LINKEDIN  ‚ñ∫  &lt;a href="https://bit.ly/3rAeCsm"&gt;https://bit.ly/3rAeCsm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>infrastructureascode</category>
      <category>aws</category>
    </item>
    <item>
      <title>Mastering Enums in TypeScript</title>
      <author>Arnaud Leymet</author>
      <pubDate>Tue, 27 Jul 2021 16:06:10 +0000</pubDate>
      <link>https://dev.to/prod/mastering-enums-in-typescript-1c1j</link>
      <guid>https://dev.to/prod/mastering-enums-in-typescript-1c1j</guid>
      <description>&lt;p&gt;Let's assume we have the following enum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Fruit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;APPLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;BANANA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CHERRY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-keys-of-an-enum-dynamically"&gt;
  &lt;/a&gt;
  Get the keys of an enum dynamically
&lt;/h3&gt;

&lt;p&gt;This one needs the use of two type operators: &lt;a href="https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#the-keyof-type-operator"&gt;&lt;code&gt;keyof&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#the-typeof-type-operator"&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FruitValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Fruit&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; type FruitValue = "APPLE" | "BANANA" | "CHERRY"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-keys-of-an-enum-dynamically"&gt;
  &lt;/a&gt;
  Get the keys of an enum dynamically
&lt;/h3&gt;

&lt;p&gt;This snippet leverages the &lt;a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"&gt;Template Literal&lt;/a&gt; type operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FruitValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; type FruitValue = "apple" | "banana" | "cherry"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterate-over-an-enum-keys"&gt;
  &lt;/a&gt;
  Iterate over an enum keys
&lt;/h3&gt;

&lt;p&gt;Looping through the enum keys is as simple as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; APPLE&lt;/span&gt;
&lt;span class="c1"&gt;//    BANANA&lt;/span&gt;
&lt;span class="c1"&gt;//    CHERRY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterate-over-an-enum-values"&gt;
  &lt;/a&gt;
  Iterate over an enum values
&lt;/h3&gt;

&lt;p&gt;In the same spirit, looping through the enum values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; apple&lt;/span&gt;
&lt;span class="c1"&gt;//    banana&lt;/span&gt;
&lt;span class="c1"&gt;//    cherry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a Facebook Chatbot For Beginners</title>
      <author>Tousif</author>
      <pubDate>Tue, 27 Jul 2021 16:03:29 +0000</pubDate>
      <link>https://dev.to/project_beginners/build-a-facebook-chatbot-for-beginners-4chf</link>
      <guid>https://dev.to/project_beginners/build-a-facebook-chatbot-for-beginners-4chf</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;While some digital marketers are still discovering the power of social media, those who are on the cutting edge of technological progress are raising awareness about chatbots and how to build a bot.&lt;/span&gt;&lt;/p&gt;
&lt;p id="f646"&gt;The rapid rise of chatbots has been made possible thanks to the recent advances in artificial intelligence and machine learning. Younger generations of consumers, who have grown up with at least one chat window permanently opened, find it natural to communicate with their favorite brands and companies through interactive messenger chatbots that mimic real conversations with people.&lt;/p&gt;
&lt;p id="28af"&gt;By integrating chatbots with e-commerce platforms, it‚Äôs possible to monetize existing social media accounts by helping consumers find products or offering personalized recommendations based on their instant messaging profiles and personal preferences.&lt;/p&gt;

&lt;p id="28af"&gt;Originally Published: &lt;b&gt;&lt;a href="https://bit.ly/3fl4dvV"&gt;How to make a Facebook Chatbot for beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Kool Way to Run Hugo Static Sites on Docker</title>
      <author>Daniel Polito</author>
      <pubDate>Tue, 27 Jul 2021 16:02:53 +0000</pubDate>
      <link>https://dev.to/kooldev/the-kool-way-to-run-hugo-static-sites-on-docker-3k04</link>
      <guid>https://dev.to/kooldev/the-kool-way-to-run-hugo-static-sites-on-docker-3k04</guid>
      <description>&lt;p&gt;In just 2 simple steps, you can use &lt;a href="https://github.com/kool-dev/kool"&gt;&lt;strong&gt;Kool&lt;/strong&gt;&lt;/a&gt; to start a new &lt;strong&gt;Hugo&lt;/strong&gt; application running in a local Docker development environment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is a free, open source CLI tool that makes local development with Docker super easy. Kool CLI will level up your development workflow, and help you and your team improve the way you develop and deploy cloud native applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;If you haven't done so already, you first need to &lt;a href="https://kool.dev/docs/getting-started/installation"&gt;install Docker and the Kool CLI&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already have &lt;code&gt;kool&lt;/code&gt; installed, make sure you're running the latest version with &lt;code&gt;kool self-update&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-new-hugo-application"&gt;
  &lt;/a&gt;
  Step 1 ‚Äì Create a New Hugo Application
&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href="https://kool.dev/docs/commands/kool-create"&gt;&lt;code&gt;kool create&lt;/code&gt; command&lt;/a&gt; to create your new Hugo project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool create hugo my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;IMPORTANT: if you're on &lt;strong&gt;Windows WSL&lt;/strong&gt; or &lt;strong&gt;Linux&lt;/strong&gt;, you should run &lt;code&gt;sudo kool create hugo my-project&lt;/code&gt; as the superuser (via &lt;code&gt;sudo&lt;/code&gt;) to avoid permissions issues when creating the project directory and files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under the hood, this command will run &lt;code&gt;kool docker klakegg/hugo:ext-alpine new site my-project&lt;/code&gt; using the &lt;a href="https://hub.docker.com/r/klakegg/hugo/"&gt;klakegg/hugo&lt;/a&gt; Docker image.&lt;/p&gt;

&lt;p&gt;Now, move into your new Hugo project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After installing Hugo, &lt;code&gt;kool create&lt;/code&gt; automatically runs the &lt;a href="https://kool.dev/docs/commands/kool-preset"&gt;&lt;code&gt;kool preset hugo&lt;/code&gt; command&lt;/a&gt;, which auto-generates the following configuration files and adds them to your project. As your project evolves, you can easily modify and extend these files to suit your needs.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+docker-compose.yml
+kool.yml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#step-2-start-your-local-environment"&gt;
  &lt;/a&gt;
  Step 2 ‚Äì Start Your Local Environment
&lt;/h2&gt;

&lt;p&gt;As mentioned above, the &lt;a href="https://kool.dev/docs/commands/kool-preset"&gt;&lt;code&gt;kool preset&lt;/code&gt; command&lt;/a&gt; added a &lt;strong&gt;kool.yml&lt;/strong&gt; file to your project. To help get you started, &lt;strong&gt;kool.yml&lt;/strong&gt; comes prebuilt with an initial set of scripts based on your chosen framework and stack. Since Hugo requires a few extra steps to create a Hello World site, &lt;strong&gt;kool.yml&lt;/strong&gt; includes a special &lt;code&gt;quickstart&lt;/code&gt; script to make it super easy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think of &lt;strong&gt;kool.yml&lt;/strong&gt; as an easy-to-use task &lt;em&gt;helper&lt;/em&gt;. Instead of writing custom shell scripts, add your own scripts to &lt;strong&gt;kool.yml&lt;/strong&gt; (under the &lt;code&gt;scripts&lt;/code&gt; key), and run them with &lt;code&gt;kool run SCRIPT&lt;/code&gt; (e.g. &lt;code&gt;kool run hugo&lt;/code&gt;). You can add your own single line commands (see &lt;code&gt;hugo&lt;/code&gt; below), or add a list of commands that will be executed in sequence (see &lt;code&gt;quickstart&lt;/code&gt; below).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;hugo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kool docker -p 1313:1313 klakegg/hugo:ext-alpine&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kool run hugo server -D&lt;/span&gt;

    &lt;span class="c1"&gt;# remove or modify to suit the needs of your project&lt;/span&gt;
    &lt;span class="na"&gt;quickstart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool start&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git init&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;echo theme = \"ananke\" &amp;gt;&amp;gt; config.toml&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run hugo new posts/my-first-post.md&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run dev&lt;/span&gt;

    &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool start&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Go ahead and run &lt;code&gt;kool run quickstart&lt;/code&gt; to start your Docker environment and initialize your Hugo site.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool run quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;As you can see in &lt;strong&gt;kool.yml&lt;/strong&gt;, the &lt;code&gt;quickstart&lt;/code&gt; script does the following in sequence: runs the &lt;code&gt;kool start&lt;/code&gt; command to spin up your Docker environment; calls &lt;code&gt;git init&lt;/code&gt; to create a Git repository; downloads the Ananke theme; uses an &lt;code&gt;echo&lt;/code&gt; command to add the theme to your Hugo config file; adds your first post; and then calls &lt;code&gt;kool run dev&lt;/code&gt; to build your Hugo site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;kool run quickstart&lt;/code&gt; finishes, you should be able to access your new site at &lt;a href="http://localhost/"&gt;http://localhost&lt;/a&gt; and see the "My New Hugo Site" page. Hooray!&lt;/p&gt;



&lt;p&gt;Verify your Docker service containers are running using the &lt;a href="https://dev.to/docs/commands/kool-status"&gt;&lt;code&gt;kool status&lt;/code&gt; command&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool status
+---------+---------+------------------------------+--------------+
| SERVICE | RUNNING | PORTS                        | STATE        |
+---------+---------+------------------------------+--------------+
| app     | Running | 0.0.0.0:80-&amp;gt;80/tcp, 1313/tcp | Up 2 minutes |
| static  | Running | 80/tcp                       | Up 2 minutes |
+---------+---------+------------------------------+--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run &lt;code&gt;kool logs app&lt;/code&gt; to see the logs from your running &lt;code&gt;app&lt;/code&gt; container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use &lt;code&gt;kool logs&lt;/code&gt; to see the logs from all running containers. Add the &lt;code&gt;-f&lt;/code&gt; option after &lt;code&gt;kool logs&lt;/code&gt; to follow the logs (i.e. &lt;code&gt;kool logs -f app&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool logs app
Attaching to my-project_app_1
app_1     |   Non-page files   |  0
app_1     |   Static files     |  0
app_1     |   Processed images |  0
app_1     |   Aliases          |  0
app_1     |   Sitemaps         |  1
app_1     |   Cleaned          |  0
app_1     |
app_1     | Built &lt;span class="k"&gt;in &lt;/span&gt;1 ms
app_1     | Watching &lt;span class="k"&gt;for &lt;/span&gt;changes &lt;span class="k"&gt;in&lt;/span&gt; /app/&lt;span class="o"&gt;{&lt;/span&gt;archetypes,content,data,layouts,static&lt;span class="o"&gt;}&lt;/span&gt;
app_1     | Watching &lt;span class="k"&gt;for &lt;/span&gt;config changes &lt;span class="k"&gt;in&lt;/span&gt; /app/config.toml
app_1     | Environment: &lt;span class="s2"&gt;"DEV"&lt;/span&gt;
app_1     | Serving pages from memory
app_1     | Running &lt;span class="k"&gt;in &lt;/span&gt;Fast Render Mode. For full rebuilds on change: hugo server &lt;span class="nt"&gt;--disableFastRender&lt;/span&gt;
app_1     | Web Server is available at http://localhost:80/ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;address 0.0.0.0&lt;span class="o"&gt;)&lt;/span&gt;
app_1     | Press Ctrl+C to stop
app_1     |
app_1     | Change of config file detected, rebuilding site.
app_1     | 2021-05-01 20:34:06.306 +0000
app_1     | Rebuilt &lt;span class="k"&gt;in &lt;/span&gt;136 ms
app_1     | adding created directory to watchlist /app/content/posts
app_1     |
app_1     | Change detected, rebuilding site.
app_1     | 2021-05-01 20:34:07.305 +0000
app_1     | Source changed &lt;span class="s2"&gt;"/app/content/posts/my-first-post.md"&lt;/span&gt;: CREATE
app_1     | Total &lt;span class="k"&gt;in &lt;/span&gt;26 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When it's time to stop working on the project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you're ready to start coding again:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;If you like what we're doing, show your support for this new open source project by &lt;a href="https://github.com/kool-dev/kool"&gt;&lt;strong&gt;starring us on GitHub&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#level-up-your-development-workflow"&gt;
  &lt;/a&gt;
  Level Up Your Development Workflow
&lt;/h2&gt;

&lt;p&gt;Once you're up and running with your new Hugo project, you can use the &lt;code&gt;kool&lt;/code&gt; CLI to level up your development workflow. &lt;a href="https://kool.dev/docs/getting-started/how-it-works#better-development-workflow"&gt;Learn more in "How It Works"&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#support-the-kool-open-source-project"&gt;
  &lt;/a&gt;
  Support the Kool Open Source Project
&lt;/h2&gt;

&lt;p&gt;Kool is open source and totally free to use. If you're interested in learning more about the project, please check out &lt;a href="https://kool.dev"&gt;kool.dev&lt;/a&gt;. If you have questions, need support, or want to get involved, please &lt;a href="https://kool.dev/slack"&gt;join our Slack channel&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kool-dev"&gt;
        kool-dev
      &lt;/a&gt; / &lt;a href="https://github.com/kool-dev/kool"&gt;
        kool
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      From local development to the cloud: development workflow made easy.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://kool.dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/264349f4dfe091a4e3a224429ff033d9a68031905905816be9a847aac7167904/68747470733a2f2f6b6f6f6c2e6465762f696d672f6c6f676f2e706e67" width="400" alt="kool - cloud native dev tool"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://goreportcard.com/report/github.com/kool-dev/kool" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2838d0fd3358d49e216af5ec0cab74eaaca5565ca82ee3b53637a34a3af64d15/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6b6f6f6c2d6465762f6b6f6f6c" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/kool-dev/kool" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2add92a4e91eebea7bea5f9f2c4af90d7d3da733934d4b6b7560b93b8463ba2/68747470733a2f2f636f6465636f762e696f2f67682f6b6f6f6c2d6465762f6b6f6f6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kool-dev/kool/workflows/docker"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zv88EOKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kool-dev/kool/workflows/docker/badge.svg" alt="Docker Hub"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kool-dev/kool/workflows/golangci-lint"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZY5yv7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kool-dev/kool/workflows/golangci-lint/badge.svg" alt="Golang CI Lint"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/kool-dev/kool/maintainability" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/251105110de0dadd5bd3976a8b5ba78cc0a420c3180456982d420ea25630dc68/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f31353131663832366465393264326162333963632f6d61696e7461696e6162696c697479" alt="Maintainability"&gt;&lt;/a&gt;
&lt;a href="https://kool.dev/slack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1be987074d33367933f31ae02d66b36abbbdf76dc54ee7522670ba4a7f794452/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230536c61636b2d6b6f6f6c2d2d6465762d6f72616e67653f6c6f676f3d736c61636b" alt="Join Slack Kool community"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
About &lt;code&gt;kool&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is a CLI tool that brings the complexities of modern software development environments down to earth - making these environments lightweight, fast and reproducible. It reduces the complexity and learning curve of &lt;em&gt;Docker&lt;/em&gt; and &lt;em&gt;Docker Compose&lt;/em&gt; for local environments, and offers a simplified interface for using &lt;em&gt;Kubernetes&lt;/em&gt; to deploy staging and production environments to the cloud.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; gets your local development environment up and running easily and quickly, so you have more time to build a great application. When the time is right, you can then use Kool Cloud to deploy and share your work with the world!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is suitable for solo developers and teams of all sizes. It provides a hassle-free way to handle the Docker basics and immediately start using containers for development, while simultaneously guaranteeing no loss of control over more specialized Docker environments.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kool.dev" rel="nofollow"&gt;Learn more at kool.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Requirements: Kool is‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kool-dev/kool"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>hugo</category>
      <category>docker</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Pure CSS checkboxes with one element</title>
      <author>Posandu Mapa</author>
      <pubDate>Tue, 27 Jul 2021 15:58:34 +0000</pubDate>
      <link>https://dev.to/posandu/pure-css-checkboxes-with-one-element-1pne</link>
      <guid>https://dev.to/posandu/pure-css-checkboxes-with-one-element-1pne</guid>
      <description>&lt;p&gt;Here is a Pure CSS checkbox with only one element. It‚Äôs also accessibility friendly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Item 3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-css"&gt;
  &lt;/a&gt;
  The CSS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt; &lt;span class="n"&gt;farthest-corner&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;145&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0.1%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;99.8%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Inter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3f3f3f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-0.55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1.55&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e9e9e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cacaca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;-6px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#480f5d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the result on &lt;a href="https://www.tronic247.com/pure-css-checkboxes-with-one-element/"&gt;My Website&lt;/a&gt;. (I do this because I can't embed iframes).&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>css</category>
      <category>checkboxes</category>
    </item>
    <item>
      <title>14 VS Code Shortcuts to Supercharge Your Productivity </title>
      <author>Domagoj Vidovic</author>
      <pubDate>Tue, 27 Jul 2021 15:28:48 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/14-vs-code-shortcuts-to-supercharge-your-productivity-4khn</link>
      <guid>https://dev.to/domagojvidovic/14-vs-code-shortcuts-to-supercharge-your-productivity-4khn</guid>
      <description>&lt;p&gt;We, software engineers, tend to be extremely efficient beings.&lt;/p&gt;

&lt;p&gt;Our goal is to optimize everything, not just the code.&lt;/p&gt;

&lt;p&gt;That's why we don't want to spend 10 seconds looking for something on the GUI. We don't want to spend even 2 seconds.&lt;/p&gt;

&lt;p&gt;Why would we, when we can do it in 0,1s by using the powerful keyboard shortcuts?&lt;/p&gt;

&lt;p&gt;If I repeatedly do the same actions, I always Google for its shortcut. Usually, I find it.&lt;/p&gt;

&lt;p&gt;Let me share with you the shortcuts I use every day. I bet you don't know many of them!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-search-files-by%C2%A0name"&gt;
  &lt;/a&gt;
  1. Search files by¬†name
&lt;/h3&gt;

&lt;p&gt;Ok, we'll start by listing the most common and simples shortcuts.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd + P&lt;/code&gt; (Mac) / &lt;code&gt;crtl + P&lt;/code&gt; (Windows) will open a search field with an incredibly powerful fuzzy search. I probably use this 100+ times a day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-search%C2%A0settings"&gt;
  &lt;/a&gt;
  2. Search¬†settings
&lt;/h3&gt;

&lt;p&gt;This one is similar; after clicking &lt;code&gt;cmd + P&lt;/code&gt; (Mac) / &lt;code&gt;crtl + P&lt;/code&gt; (Windows), just type &lt;code&gt;&amp;gt;&lt;/code&gt;. You can now type in any search term, and only settings will be affected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-multiple%C2%A0cursors"&gt;
  &lt;/a&gt;
  3. Multiple¬†cursors
&lt;/h3&gt;

&lt;p&gt;This feature is so cool, I wish I could use it everywhere else!&lt;/p&gt;

&lt;p&gt;Just press &lt;code&gt;alt&lt;/code&gt; and start clicking around the editor. Multiple cursors will appear!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-multiple-cursors%C2%A0v2"&gt;
  &lt;/a&gt;
  4. Multiple cursors¬†v2
&lt;/h3&gt;

&lt;p&gt;You can do something similar without clicking around. &lt;code&gt;cmd option + arrow down&lt;/code&gt; (Mac) / &lt;code&gt;shift alt + arrow down&lt;/code&gt; (Windows) will insert an extra cursor below.&lt;/p&gt;

&lt;p&gt;Obviously, you can use &lt;code&gt;arrow up&lt;/code&gt; to insert a cursor above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-select-all-occurrences"&gt;
  &lt;/a&gt;
  5. Select all occurrences
&lt;/h3&gt;

&lt;p&gt;This one is quite uncommon, but it's extremely powerful! First, you need to select some text.&lt;/p&gt;

&lt;p&gt;Then,&lt;code&gt;cmd shift + L&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + L&lt;/code&gt; (Windows) select all occurrences of that text. It's so useful for situations like renaming a variable across the file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--621ivIVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1npwkhc4wih2nlfxzosb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--621ivIVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1npwkhc4wih2nlfxzosb.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine manually renaming a variable repeated 30 times in the file. Nightmare.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-delete-a%C2%A0line"&gt;
  &lt;/a&gt;
  6. Delete a¬†line
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cmd shift + K&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + K&lt;/code&gt; (Windows) does the trick here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-duplicate-a%C2%A0line"&gt;
  &lt;/a&gt;
  7. Duplicate a¬†line
&lt;/h3&gt;

&lt;p&gt;Put your cursor in the line you want to duplicate.&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;cmd + C&lt;/code&gt;, then &lt;code&gt;cmd + V&lt;/code&gt; (Mac) / &lt;code&gt;crtl + C&lt;/code&gt;, then &lt;code&gt;crtl + V&lt;/code&gt; (Windows). Voila!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-search-in-a%C2%A0file"&gt;
  &lt;/a&gt;
  8. Search in a¬†file
&lt;/h3&gt;

&lt;p&gt;This one is quite familiar across all the common apps (like browsers): &lt;code&gt;cmd + F&lt;/code&gt; (Mac) / &lt;code&gt;crtl + F&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl + G&lt;/code&gt; (Windows) search for the next occurrence, while cmd &lt;code&gt;shift + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl + shift + G&lt;/code&gt; (Windows) search for the previous one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-replace-in-a%C2%A0file"&gt;
  &lt;/a&gt;
  9. Replace in a¬†file
&lt;/h3&gt;

&lt;p&gt;If you want to replace the term you searched for, fire &lt;code&gt;cmd option + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + G&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;Then, click enter to replace the current occurrence.&lt;/p&gt;

&lt;p&gt;If you want to replace them all, click &lt;code&gt;cmd + enter&lt;/code&gt; (Mac) / &lt;code&gt;crtl + enter&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-search-in-all%C2%A0files"&gt;
  &lt;/a&gt;
  10. Search in all¬†files
&lt;/h3&gt;

&lt;p&gt;Nothing can exist without a good old search in all files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd shift + F&lt;/code&gt; (Mac) / &lt;code&gt;ctrl shift + F&lt;/code&gt; (Windows) does the trick.&lt;/p&gt;

&lt;p&gt;If you want to match text by case, press &lt;code&gt;cmd option + C&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + C&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;You can also match the whole word by pressing &lt;code&gt;cmd option + W&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + W&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-replace-in-all%C2%A0files"&gt;
  &lt;/a&gt;
  11. Replace in all¬†files
&lt;/h3&gt;

&lt;p&gt;Do you want to replace all occurrences in all files across the project, i.e. search/replace?&lt;/p&gt;

&lt;p&gt;Amazing, &lt;code&gt;cmd option + H&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + H&lt;/code&gt; (Windows) does the trick.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd option + enter&lt;/code&gt; (Mac) / &lt;code&gt;crtl alt + enter&lt;/code&gt; (Windows) triggers the replacement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-split%C2%A0editor"&gt;
  &lt;/a&gt;
  12. Split¬†editor
&lt;/h3&gt;

&lt;p&gt;One tab is not enough, you need many of them! Great, just press &lt;code&gt;cmd + \&lt;/code&gt; (Mac) / &lt;code&gt;alt shift + 0&lt;/code&gt; (Windows). Repeat until you're satisfied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-close%C2%A0tab"&gt;
  &lt;/a&gt;
  13. Close¬†tab
&lt;/h3&gt;

&lt;p&gt;This one is the same as in Chrome‚Ää-‚Ää&lt;code&gt;cmd + W&lt;/code&gt; (Mac) / &lt;code&gt;crtl + W&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-switching-between-opened%C2%A0tabs"&gt;
  &lt;/a&gt;
  14. Switching between opened¬†tabs
&lt;/h3&gt;

&lt;p&gt;Do you want to open the previous tab? &lt;code&gt;crtl + tab&lt;/code&gt; does the trick.&lt;/p&gt;

&lt;p&gt;Do you want to go to a tab on a known position? &lt;code&gt;crtl + [index]&lt;/code&gt; does that.&lt;/p&gt;

&lt;p&gt;Finally, you can pick the tab on left/right by pressing &lt;code&gt;cmd option + arrow left/right&lt;/code&gt; (Mac) / &lt;code&gt;crtl page down/up&lt;/code&gt; (Windows).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I wouldn't suggest learning all of them by heart immediately - try with one or two of them, and slowly adapt them to your work.&lt;/p&gt;

&lt;p&gt;Save this article in case you want to revisit it later.&lt;/p&gt;

&lt;p&gt;Using more keyboard shortcuts will increase your productivity.&lt;/p&gt;

&lt;p&gt;And oh, it does feel so good.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>tooling</category>
    </item>
    <item>
      <title>CSS z-index illustrated</title>
      <author>Natalia Venditto</author>
      <pubDate>Tue, 27 Jul 2021 15:21:04 +0000</pubDate>
      <link>https://dev.to/this-is-learning/css-z-index-illustrated-51f7</link>
      <guid>https://dev.to/this-is-learning/css-z-index-illustrated-51f7</guid>
      <description>&lt;p&gt;My followers know that I no longer work as a frontend developer, however, I worked as one for nearly 15 years and I was self-taught. I was lucky to have a background in architecture, CAD and graphic and 3d design, so grasping the more mathematical (or in this case geometrical) aspects of putting together a layout, was not difficult for me. However, I see that for self-taught developers coming from completely unrelated backgrounds, the &lt;code&gt;z-index&lt;/code&gt; is a tough one to grasp.&lt;/p&gt;

&lt;p&gt;This is my attempt at explaining it in an illustrated way.&lt;/p&gt;

&lt;p&gt;Most people will be familiar with the concept of cartesian &lt;a href="https://www.techopedia.com/definition/14290/cartesian-coordinates"&gt;coordinates&lt;/a&gt;. They are used to define the location of a point in either a line (2d) or in space (3d). If you drive and use Google Maps, you are probably familiar with geospatial coordinates, or longitude and latitude; the points we use for locations on maps or Earth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2d-or-two-dimensional"&gt;
  &lt;/a&gt;
  2d or two dimensional
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;2d&lt;/code&gt;, we have the &lt;code&gt;y-axis&lt;/code&gt;, and the &lt;code&gt;x-axis&lt;/code&gt;. From their &lt;a href="https://www.techopedia.com/definition/769/convergence"&gt;convergence&lt;/a&gt;, the point (0,0), we can then specify where another point is located. Typically the &lt;code&gt;y-axis&lt;/code&gt; defines the vertical location, and the &lt;code&gt;x-axis&lt;/code&gt; the horizontal location of a point. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-FxKBoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5las3igefk54ciebz8ff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-FxKBoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5las3igefk54ciebz8ff.jpg" alt="x-y-axis illustrated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we have several points that define a shape, like a box, then we can define its dimensions AND its location, using coordinates.&lt;/p&gt;

&lt;p&gt;This is basically how we do layout with css, defining the dimensions and location of elements with respect to those two imaginary lines that come defined by the edge of the viewport.&lt;/p&gt;

&lt;p&gt;We understand &lt;code&gt;y=0&lt;/code&gt; as the top of the browser viewport, and &lt;code&gt;x=0&lt;/code&gt; as the left edge (when left to right), so (0,0) would be the most top-left point as we load the page (considering it is not programmatically scrolling to another &lt;code&gt;x,y&lt;/code&gt; location).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVuG0STC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4rqzbonscyn29iys07j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVuG0STC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4rqzbonscyn29iys07j.jpg" alt="a shape with respect to the x y axis of the viewports"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layout-and-the-box-model"&gt;
  &lt;/a&gt;
  Layout and the box model
&lt;/h3&gt;

&lt;p&gt;When we are adding new elements to the markup of a page, by default they're added to the default context (I will explain context later in the article). They will follow the document flow and be stacked on top of each other, in the same order they are added to the document.&lt;/p&gt;

&lt;p&gt;So if we had 3 block elements like &lt;code&gt;divs&lt;/code&gt; for example, added to a document like you see in the figure below, if we could see them from the side in terms of an imaginary vertical stack, they would be stacked in this way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aj0GtqLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atqr531eof4fhw352s9w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aj0GtqLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atqr531eof4fhw352s9w.jpg" alt="divs stacked following the document flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what would happen if you added a child to &lt;code&gt;div&lt;/code&gt; number 2, and give it a top margin to move it on top of &lt;code&gt;div&lt;/code&gt; 3 in the y-axis? That "overlapping" bit would be hidden by &lt;code&gt;div&lt;/code&gt; 3, and that's expected, since in terms of markup &lt;code&gt;div&lt;/code&gt; 3 is coming after &lt;code&gt;div&lt;/code&gt; 4 in the document flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWucamsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndn3sn0lyl1vtdq0qjzp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWucamsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndn3sn0lyl1vtdq0qjzp.jpg" alt="divs markup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VX5yIE4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5lc5g3oy0lkuda7laom.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VX5yIE4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5lc5g3oy0lkuda7laom.jpg" alt="divs stacked following the document flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zindex-99999999999-important-will-helpnot"&gt;
  &lt;/a&gt;
  z-index: 99999999999 !important will help...NOT
&lt;/h3&gt;

&lt;p&gt;Many developers new to frontend will try to fix this using the &lt;code&gt;z-index&lt;/code&gt; property, with a very high positive value (or maybe negative, supposign they wanted to completely hide the &lt;code&gt;div 4&lt;/code&gt;). But that on its own, won't work. &lt;/p&gt;

&lt;p&gt;EDIT: Thanks to &lt;a href="https://dev.to/afif"&gt;Temani Afif&lt;/a&gt; Originally I had written -&amp;gt; "If you don't create a new stacking context, z-index won't work, no matter how many 9's and &lt;code&gt;!importants&lt;/code&gt; you add." &lt;strong&gt;He comments below giving a div a position, which I always understood creates a new stacking context as well, doesn't. He points at the painting order which I mention in my article as the order in which elements are placed in the document flow.&lt;/strong&gt;  Please read his comment below. There is a nice respectuful/debate and you're welcome to comment with your view.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-stacking-contexts"&gt;
  &lt;/a&gt;
  Understanding stacking contexts
&lt;/h2&gt;

&lt;p&gt;Let's port that two-dimensional representation of cartesian coordinates, to a three-dimensional or spatial one. As you probably guessed, now we have 3 points that specify the location of a point: (x, y, z)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRJe0eTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62rydnsnjpch3stw6mv2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRJe0eTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62rydnsnjpch3stw6mv2.jpg" alt="3 dimensional representation of a layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A stacking context is each new layer added to that z-axis, that you can now reorder, to bring elements on top or place them below the default context or other contexts. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p6FRRv7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pip0ucwsr1jt1orb8tnx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6FRRv7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pip0ucwsr1jt1orb8tnx.jpg" alt="stacking contexts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The order comes defined by the index, that can be 0, a positive integer or a negative integer or auto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2HQE3y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh3rcr87bg5q8hys8byz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2HQE3y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh3rcr87bg5q8hys8byz.jpg" alt="stack with z-index"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I advise you now head to the official documentation on MDN, and read all you can about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context"&gt;stacking contexts&lt;/a&gt;. But in a nutshell, you create a new stacking context by giving a container div the following properties and values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you give it an &lt;code&gt;opacity&lt;/code&gt; different than 0&lt;/li&gt;
&lt;li&gt;you give it a &lt;code&gt;position&lt;/code&gt; other than &lt;code&gt;static&lt;/code&gt;, and a &lt;code&gt;z-index&lt;/code&gt; other than &lt;code&gt;auto&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;you give it &lt;code&gt;display&lt;/code&gt; either &lt;code&gt;flex&lt;/code&gt; or &lt;code&gt;grid&lt;/code&gt;, and a &lt;code&gt;z-index&lt;/code&gt; other than &lt;code&gt;auto&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;you use &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;clip-path&lt;/code&gt; or &lt;code&gt;mask&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;or you use some of the brand new properties, such as &lt;code&gt;isolate&lt;/code&gt;(with a value of &lt;code&gt;isolate&lt;/code&gt;), &lt;code&gt;will-change&lt;/code&gt;, or &lt;code&gt;contain&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all folks! I hope you find it useful and don't have to struggle with z-index issues anymore! &lt;em&gt;Also if this article has an error or you want to suggest an improvement, do it in the comments!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>layout</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why tabs are better than spaces</title>
      <author>Matt Kenefick</author>
      <pubDate>Tue, 27 Jul 2021 15:20:31 +0000</pubDate>
      <link>https://dev.to/mattkenefick/why-tabs-are-better-than-spaces-3k08</link>
      <guid>https://dev.to/mattkenefick/why-tabs-are-better-than-spaces-3k08</guid>
      <description>&lt;h3&gt;
  &lt;a href="#warning"&gt;
  &lt;/a&gt;
  ‚ö†Ô∏è Warning!
&lt;/h3&gt;

&lt;p&gt;Opinions in this article may differ from your own. Beware of mild generalizations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h4&gt;

&lt;p&gt;I've been writing code for over 20 years in several languages and all types of editors, including: Notepad, Visual Basic, Dreamweaver, TextMate, Coda, Sublime, Xcode, Visual Studio, and others.&lt;/p&gt;

&lt;p&gt;For the majority of that time, I've been pretty adamant about &lt;strong&gt;4 spaces&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-might-be-changing-my-mind"&gt;
  &lt;/a&gt;
  Why I might be changing my mind
&lt;/h3&gt;

&lt;p&gt;In very recent years, the popularity of a few frameworks has spawned a rise of cases in 2-space indentation. In my opinion, this level of indentation is too low and creates confusion. My assumption is that 2-space indentation was adopted to save horizontal real estate, but I'm not entirely sure why that would be required.&lt;/p&gt;

&lt;p&gt;After all, if your code has to be indented to the point it becomes unreadable, you likely have other code-related issues to fix. In fairly broad strokes (‚ö†Ô∏è), you have indentation for the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;namespace
    class
        function
            conditional
                loop
                    logic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's more than enough room to keep code within an 80 character margin with a 4-gap indentation even at 6 levels.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#but-why-tabs"&gt;
  &lt;/a&gt;
  But why tabs?
&lt;/h4&gt;

&lt;p&gt;I'm not on a mission to stop people from writing 2-gap indentation. &lt;strong&gt;If that's what you like, that's what you like.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I write my code, I want to see 4-gap indentation even if I'm sharing the codebase with 2-gappers. This creates a problem because formatting the file will add/remove spaces on every line to meet indentation levels which causes your &lt;code&gt;git diff&lt;/code&gt; to change virtually every line; unreasonable and irresponsible!&lt;/p&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Tabs make more sense&lt;/strong&gt; because each individual tab represents one logical level of indentation.&lt;/p&gt;

&lt;p&gt;You may have noticed I changed my terminology in this article to say "2-gap" rather than "2-space" and that's because it's the visual representation of space that matters; not the actual character. &lt;em&gt;Even though spaces require more disk space.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Within your editor, you can change the visual representation of a tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BB028Rf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb3tfcr86u90szhky2hd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BB028Rf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb3tfcr86u90szhky2hd.png" alt="Sublime Text Tab Representation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can still get your 2-gap, 4-gap, 8-gap indentation level using tabs while working seamlessly with other developers. If Johnny is using 2-gap tabs, I'm using 4-gap tabs, and Maria is using 8-gap tabs... none of the actual characters change in our commits even though we can all feel comfortable with our preferred indentation sizes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each tab (&lt;em&gt;\t / 0x09&lt;/em&gt;) represents one level of logical indentation, rather than having to compute/reduce spaces as a representation of indentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tabs allow multiple developers to use their own indentation preferences without overriding formatting of others.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forcing spaces of your own preference onto the other members of your team is a bit selfish.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>code</category>
      <category>editor</category>
      <category>redpill</category>
    </item>
    <item>
      <title>React application and a team work environment </title>
      <author>Adela Zalewski</author>
      <pubDate>Tue, 27 Jul 2021 15:13:25 +0000</pubDate>
      <link>https://dev.to/adelazalewski/react-application-and-a-team-work-environment-3ij4</link>
      <guid>https://dev.to/adelazalewski/react-application-and-a-team-work-environment-3ij4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hd1yq3ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lpq4cr90ds90vgjej5l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hd1yq3ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lpq4cr90ds90vgjej5l.PNG" alt="Village book builders website picture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#village-book-builders-a-nonprofit-organization"&gt;
  &lt;/a&gt;
  üßê Village Book Builders a NON-PROFIT Organization
&lt;/h2&gt;

&lt;p&gt;VBB is an amazing NPO that is trying to end poverty in countries like: Mexico, Peru, Nepal, Ghana, Kenya, Malawi, Belize, through education. They created a mentoring program based on volunteers to serve as mentors to children in developing countries all over the globe. Through donations and the help of local communities they are capable to purchase building materials and educational equipment, to build library spaces where children can foster deeper relationships with learning. Their travel expeditions focus of &lt;em&gt;building hope through books&lt;/em&gt;.&lt;br&gt;
Checkout their work &lt;a href="https://villagebookbuilders.org/"&gt;here&lt;/a&gt; or &lt;a href="https://villagebookbuilders.org/donate/"&gt;make a donation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-check-in-feature-and-the-problems-we-encountered"&gt;
  &lt;/a&gt;
  üí° A check in feature and the problems we encountered
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FvVzvCE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx093n2vdl8mvxtfrz87.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvVzvCE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx093n2vdl8mvxtfrz87.PNG" alt="react calendar view"&gt;&lt;/a&gt;&lt;strong&gt;VBB react calendar web app - day view&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the last 2 months, I've been one of 8 frontend developers who collaborated remotely and focused on building a check in feature for the students who attend the mentorship sessions. We worked on a react calendar web application, and built a check in modal that will give the headmaster of the school the ability to check in his school's students who are scheduled for mentorship sessions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJdmFBEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh8o7n8i86f0qku5lkn5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJdmFBEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh8o7n8i86f0qku5lkn5.PNG" alt="check in modal"&gt;&lt;/a&gt;&lt;strong&gt;check in modal&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ntk297rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozrkgcz0f5y6mmsx3irx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ntk297rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozrkgcz0f5y6mmsx3irx.PNG" alt="VBB portal landing page"&gt;&lt;/a&gt;&lt;strong&gt;app landing page&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Going into this experience, of course we were kind of fearful and had a lot of questions to ask just so we can understand what the problem we were trying to solve was. None of us has ever worked on an open source project like this, that has a lot of teams pushing changes to the same repo.&lt;/p&gt;

&lt;p&gt;We had a lot of planning to do, wireframing of the modal to design and a user flow to keep in mind(&lt;em&gt;The Headmaster has an option or object in their appointment called (check-in).  This could be a button.  &amp;gt; click to check in for their appointment.  &amp;gt; An in-frame object  or confirmation window generates &amp;gt; mentee will check-in&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qpOghZu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay6wywtwcl3djygm6d7u.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpOghZu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay6wywtwcl3djygm6d7u.PNG" alt="user flow figma chart"&gt;&lt;/a&gt;&lt;strong&gt;user flow&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8X4NIef0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cf84vurbjler3gy1u5g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8X4NIef0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cf84vurbjler3gy1u5g.PNG" alt="check-in feature wireframe"&gt;&lt;/a&gt;&lt;strong&gt;wireframe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the entire process we were in close contact with the VBB stakeholder to make sure we satisfy his vision of the student check in flow. We asked tons of questions and so we had a lot of tasks to accomplish until our feature was complete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üßµ Questions that helped us understand the problem&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you have an example of a website/app that has similar functionality to what you are looking for the check-in feature? Any UI/UX examples you would like the check in feature modelled after?&lt;/li&gt;
&lt;li&gt;How do mentors and headmasters need to be notified when a student checks in?&lt;/li&gt;
&lt;li&gt;Will we be working with dummy data or is there a backend we could connect too?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GG4-_zZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnfaeel5iav3fneplfpe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GG4-_zZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnfaeel5iav3fneplfpe.PNG" alt="tasks list"&gt;&lt;/a&gt;&lt;strong&gt;main tasks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üí™ Challenges we have overcome as a team&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No backend ready, and no endpoints to call. Our work was done using hard coded data, which made it a little more difficult, but we figured it out in the end&lt;/li&gt;
&lt;li&gt;Managing time between our many meetings, sometimes late night meetings, coding on our feature and completing all the other assignments we had during our Lambda Labs experience&lt;/li&gt;
&lt;li&gt;PR #101 created a merge conflict and crushed the app, no data was being read and it was resolved by going back to the old version of the react calendar, and skipping the version with the drag and drop feature, that was previously pushed to main. The drag and drop feature is definitely something that will be fixed in the future&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;üéâ We had some big wins together&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We shipped our feature in record time. The Village Book Builders stakeholder was very pleased with our work&lt;/li&gt;
&lt;li&gt;We completed MVP and also worked on extra tasks
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mPHI3oF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l774ubbonc85gq4bv4vq.PNG" alt="trello extra task list"&gt;&lt;strong&gt;extra tasks&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;We killed at planning and understanding the problem we were trying to solve, which set us up for success. What can I say, planning is my favorite phase when doing a project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;üìö Meet the team&lt;/strong&gt;&lt;br&gt;
And now the people who made all this possible. You can find them on LinkedIn, they are amazing developers:&lt;/p&gt;

&lt;p&gt;Altyn Berdiyeva - Project Team Lead&lt;br&gt;
Danielle Koduru&lt;br&gt;
Carlos Ramos&lt;br&gt;
Peter Van Straaten&lt;br&gt;
Priyanka Sarkar&lt;br&gt;
Patrick Baldwin&lt;br&gt;
Mychael Menges&lt;br&gt;
Adela Zalewski - hi!&lt;br&gt;
Siyuan Gao&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-future-hold-for-this-big-project-you-ask"&gt;
  &lt;/a&gt;
  üîÆ What does the future hold for this big project, you ask?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Shipped features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built a react calendar application, that will brake down the schedule into daily and weekly view&lt;/li&gt;
&lt;li&gt;The calendar is based on location &lt;/li&gt;
&lt;li&gt;Built a way of checking students in for the mentorship session&lt;/li&gt;
&lt;li&gt;Built a way to book mentorship sessions and assign students to available computers at school&lt;/li&gt;
&lt;li&gt;Built a user management system, the admin has the possibility now to admit/onboard new users to the platform and gather their information and they can manage those accounts as well&lt;/li&gt;
&lt;li&gt;Built a search bar that allows headmasters to search for students(displays a lost of the students he signed up on the platform) and/or mentors based on the headmaster's school location &lt;/li&gt;
&lt;li&gt;Headmaster has the ability to sign up new students to the platform, feature found in the search bar as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmtH_AaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r77u4pri2yn6wd1bszt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmtH_AaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r77u4pri2yn6wd1bszt.PNG" alt="react web calendar week view"&gt;&lt;/a&gt;&lt;strong&gt;calendar week view with the red time line showing&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jfpM4C_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvacvg3clqpv5o97vbzn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jfpM4C_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvacvg3clqpv5o97vbzn.PNG" alt="search bar features"&gt;&lt;/a&gt;&lt;strong&gt;all the search bar features&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MAGNdQbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwlintgddzrn9lv3jrv5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MAGNdQbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwlintgddzrn9lv3jrv5.PNG" alt="students list"&gt;&lt;/a&gt;&lt;strong&gt;students list showing in the search bar&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Stakeholder demo video for those curious how that looks&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://youtu.be/SzRWNQttVYQ?t=35"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmPb0z36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/SzRWNQttVYQ/0.jpg" alt="Danielle Koduru presenting demo"&gt;&lt;/a&gt;&lt;strong&gt;check in feature and admin/user management system feature demo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Future Features&lt;/strong&gt;&lt;br&gt;
So what's next?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complete drag and drop feature for the react calendar&lt;/li&gt;
&lt;li&gt;Mentor/Mentee Matching - Headmasters should be able to view mentors' availability for mentorship sessions on a global availability calendar. Headmasters should then be able to assign available mentees to open mentor time slots via a list view&lt;/li&gt;
&lt;li&gt;Student Homepage - Upon logging in, students should see a homepage with a list of resources specified by the stakeholder&lt;/li&gt;
&lt;li&gt;UX Heatmap - Implement a UX heatmap to determine how headmasters are using the platform and determine their pain points&lt;/li&gt;
&lt;li&gt;User Onboarding Tutorials - After logging in for the first time, all user types should get a tutorial with a welcome page and initial tasks to complete before navigating to their dashboard&lt;/li&gt;
&lt;li&gt;Google Product Notifications - Headmasters and teachers should have icons in their dashboard corresponding to Gmail and Google Chat/Hangouts. Each icon should dynamically reflect whether there are unread emails/messages. Clicking the icon should link the user to that service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wish future teams working on this great project, good luck and I can't wait to see the final product!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üìì Tips for a great team project&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plan plan and plan some more. Take the time and design your components, put some thought in that user flow, ask tons of questions. A list will help you stay organized. Write down your questions, and take notes when you those stakeholder meetings. Post your note in a Slack channel you have for you team, so everyone can be on the same page. Never rush through this planning phase. It will count enormously&lt;/li&gt;
&lt;li&gt;Some tools/platforms that will help your team with the planning of it all, and staying organized: &lt;strong&gt;&lt;em&gt;&lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;(good for crating tasks and assigning people to tasks - helps your team to stay organized), &lt;strong&gt;&lt;em&gt;&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;(perfect for team collaboration projects - messaging platform), &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;(UI design tool, project planning platform)&lt;/li&gt;
&lt;li&gt;We designed our user flow and our UI on &lt;strong&gt;&lt;em&gt;&lt;a href="https://whimsical.com/"&gt;Whimsical&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;(UI and project design platform)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;üòÆ‚Äçüí® Final thoughts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
I felt so privileged to be a small part in this great, amazing work that Village Book Builders is putting out into the world.&lt;/p&gt;

&lt;p&gt;This project was part of my Labs experience at Lambda School. It helped me gain real life job knowledge, and better prepared me for a web developer position. &lt;br&gt;
I learned how to write a well descriptive PR and how to get a conversation going about my work, how to review a peer's work, how to use the proper git flow, and how to feel more prepared for my first job as a Web Developer.&lt;/p&gt;

</description>
      <category>teamwork</category>
      <category>frontend</category>
      <category>react</category>
      <category>reactcalendar</category>
    </item>
  </channel>
</rss>
