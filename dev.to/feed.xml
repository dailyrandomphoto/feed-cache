<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Binary Search Trees</title>
      <author>divya08296</author>
      <pubDate>Tue, 04 May 2021 10:48:25 +0000</pubDate>
      <link>https://dev.to/divya08296/binary-search-trees-2n54</link>
      <guid>https://dev.to/divya08296/binary-search-trees-2n54</guid>
      <description>&lt;p&gt;A Binary Search tree is organized in a Binary Tree. Such a tree can be defined by a linked data structure in which a particular node is an object. In addition to a key field, each node contains field left, right, and p that point to the nodes corresponding to its left child, its right child, and its parent, respectively. If a child or parent is missing, the appropriate field contains the value NIL. The root node is the only node in the tree whose parent field is Nil.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In-Order-Tree-Walk (x): Always prints keys in binary search tree in sorted order.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;INORDER-TREE-WALK (x) - Running time is θ(n)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If x ≠ NIL.&lt;/li&gt;
&lt;li&gt;then INORDER-TREE-WALK (left [x])&lt;/li&gt;
&lt;li&gt;print key [x]&lt;/li&gt;
&lt;li&gt;INORDER-TREE-WALK (right [x])

&lt;ol&gt;
&lt;li&gt;PREORDER-TREE-WALK (x): In which we visit the root node before the nodes in either subtree.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PREORDER-TREE-WALK (x): &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If x ≠ NIL.&lt;/li&gt;
&lt;li&gt;then print key [x]&lt;/li&gt;
&lt;li&gt;PREORDER-TREE-WALK (left [x]).&lt;/li&gt;
&lt;li&gt;PREORDER-TREE-WALK (right [x]).&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>design</category>
      <category>analysis</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>15 Years of Amazon S3 with 'Pi Week' Recap |  Amazon S3 Object Lambda </title>
      <author>Adit Modi</author>
      <pubDate>Tue, 04 May 2021 10:44:43 +0000</pubDate>
      <link>https://dev.to/cloudtech/15-years-of-amazon-s3-with-pi-week-recap-amazon-s3-object-lambda-2c64</link>
      <guid>https://dev.to/cloudtech/15-years-of-amazon-s3-with-pi-week-recap-amazon-s3-object-lambda-2c64</guid>
      <description>&lt;p&gt;Amazon S3 was launched 15 years ago on Pi Day, March 14, 2006, and created the first generally available AWS service. Over that time, data storage and usage has exploded, and the world has never been the same.&lt;/p&gt;

&lt;p&gt;Amazon S3 has virtually unlimited scalability, and unmatched availability, durability, security, and performance. Customers of all sizes and industries can use S3 to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, and big data analytics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y3KRnq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi4a4eewnuqctydvn3vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3KRnq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi4a4eewnuqctydvn3vv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Background: I am Cloud , DevOps &amp;amp; Big Data Enthusiast | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified . &lt;/p&gt;

&lt;p&gt;When you store data in Amazon Simple Storage Service (S3), you can easily share it for use by multiple applications. However, each application has its own requirements and may need a different view of the data. For example, a dataset created by an e-commerce application may include personally identifiable information (PII) that is not needed when the same data is processed for analytics and should be redacted. On the other side, if the same dataset is used for a marketing campaign, you may need to enrich the data with additional details, such as information from the customer loyalty database.&lt;/p&gt;

&lt;p&gt;To provide different views of data to multiple applications, there are currently two options. You either create, store, and maintain additional derivative copies of the data, so that each application has its own custom dataset, or you build and manage infrastructure as a proxy layer in front of S3 to intercept and process data as it is requested. Both options add complexity and costs, so the S3 team decided to build a better solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MAjFAr5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v5g9yctrz1uaoong0gp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MAjFAr5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v5g9yctrz1uaoong0gp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Watch the On-Demand AWS Pi Week 4-day , virtual event which was hosted from March 15-18, 2021 hosted on the AWS channel on Twitch as AWS celebrated the 15th birthday of the AWS Cloud. the event included talks from AWS leaders and experts as they took us back in time reviewing the history of AWS and the key decisions involved in the building and evolution of Amazon S3. they also dived into how you can leverage S3 to control costs and continuously optimize your spend, while building modern, scalable applications.&lt;/p&gt;

&lt;p&gt;The event is ideal to watch for anyone ( on-demand ) who is eager to learn more about:&lt;/p&gt;

&lt;p&gt;How S3 and other AWS services are architected for availability and durability inside AWS Regions and Availability Zones&lt;br&gt;
How S3's strong consistency model works to support many different workloads&lt;br&gt;
The history of and best practices for S3 data security&lt;br&gt;
How AWS architects evolvable services that provide new features and greater scalability with no disruption to customers&lt;br&gt;
Detailed ways to move data into and out of the AWS Cloud &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pages.awscloud.com/pi-week-2021.html"&gt;pi-week&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On-demand AWS Pi Week Twitch video streams&lt;/p&gt;

&lt;p&gt;Day 1 - Amazon S3 origins - foundations of cloud infrastructure&lt;br&gt;
&lt;a href="https://www.twitch.tv/videos/950331443"&gt;Video 1&lt;/a&gt; | &lt;a href="https://www.twitch.tv/videos/950384494"&gt;Video 2&lt;/a&gt;&lt;br&gt;
Day 2 - Building data lakes and enabling data movement&lt;br&gt;
&lt;a href="https://www.twitch.tv/videos/951537246?filter=archives&amp;amp;sort=time"&gt;Video 1&lt;/a&gt; | &lt;a href="https://www.twitch.tv/videos/951772985?filter=archives&amp;amp;sort=time"&gt;Video 2&lt;/a&gt;&lt;br&gt;
Day 3 - Amazon S3 security framework and best practices&lt;br&gt;
&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=952756254&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Day 4 - Amazon S3 and the foundations of a serverless infrastructure&lt;br&gt;
&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=953961080&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's New
&lt;/h1&gt;

&lt;p&gt;S3 Object Lambda was announced by AWS, a new capability that allows you to add your own code to process data retrieved from S3 before returning it to an application. S3 Object Lambda works with your existing applications and uses AWS Lambda functions to automatically process and transform your data as it is being retrieved from S3. The Lambda function is invoked inline with a standard S3 GET request, so you don’t need to change your application code.&lt;/p&gt;

&lt;p&gt;In this way, you can easily present multiple views from the same dataset, and you can update the Lambda functions to modify these views at any time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWIU1BDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6fwlcikcl8nfqbsbw9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWIU1BDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6fwlcikcl8nfqbsbw9v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many use cases that can be simplified by this approach, for example:&lt;/p&gt;

&lt;p&gt;Redacting personally identifiable information for analytics or non-production environments.&lt;br&gt;
Converting across data formats, such as converting XML to JSON.&lt;br&gt;
Augmenting data with information from other services or databases.&lt;br&gt;
Compressing or decompressing files as they are being downloaded.&lt;br&gt;
Resizing and watermarking images on the fly using caller-specific details, such as the user who requested the object.&lt;br&gt;
Implementing custom authorization rules to access data.&lt;br&gt;
You can start using S3 Object Lambda with a few simple steps:&lt;/p&gt;

&lt;p&gt;Create a Lambda Function to transform data for your use case.&lt;br&gt;
Create an S3 Object Lambda Access Point from the S3 Management Console.&lt;br&gt;
Select the Lambda function that you created above.&lt;br&gt;
Provide a supporting S3 Access Point to give S3 Object Lambda access to the original object.&lt;br&gt;
Update your application configuration to use the new S3 Object Lambda Access Point to retrieve data from S3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#availability-and-pricing"&gt;
  &lt;/a&gt;
  Availability and Pricing
&lt;/h2&gt;

&lt;p&gt;S3 Object Lambda is available today in all AWS Regions with the exception of the Asia Pacific (Osaka), AWS GovCloud (US-East), AWS GovCloud (US-West), China (Beijing), and China (Ningxia) Regions. You can use S3 Object Lambda with the AWS Management Console, AWS Command Line Interface (CLI), and AWS SDKs. Currently, the AWS CLI high-level S3 commands, such as aws s3 cp, don’t support objects from S3 Object Lambda Access Points, but you can use the low-level S3 API commands, such as aws s3api get-object.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;S3 Object Lambda&lt;/strong&gt;, you pay for the AWS Lambda compute and request charges required to process the data, and for the data S3 Object Lambda returns to your application. You also pay for the S3 requests that are invoked by your Lambda function. For more pricing information, please see the Amazon S3 pricing page.&lt;/p&gt;

&lt;p&gt;This new capability makes it much easier to share and convert data across multiple applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-glacier-announces-a-40-price-reduction-for-put-and-lifecycle-requests"&gt;
  &lt;/a&gt;
  Amazon S3 Glacier announces a 40% price reduction for PUT and Lifecycle requests
&lt;/h2&gt;

&lt;p&gt;Amazon S3 is reducing the cost to move data to Amazon S3 Glacier by lowering PUT and Lifecycle request charges by 40% for all AWS Regions. You can use the S3 PUT API to directly store compliance and backup data in S3 Glacier that does not require immediate access. You can also use S3 Lifecycle policies to move data from S3 Standard, S3 Standard-Infrequent Access, or S3 One Zone-Infrequent Access to S3 Glacier to save on storage costs when data becomes rarely accessed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon S3 Glacier&lt;/strong&gt; is a secure, durable, and extremely low-cost Amazon S3 cloud storage class for data archiving and long-term backup. S3 Glacier provides a low-cost option for archiving data accessed once per quarter that needs to be accessible within minutes to a few hours.&lt;/p&gt;

&lt;p&gt;In addition to being durable and secure, the S3 Glacier storage class is now even more cost-effective than before. Effective March 1, 2021, AWS is lowering the charges for PUT and Lifecycle requests to S3 Glacier by 40% for all AWS Regions. This includes the AWS GovCloud (US) Regions, the AWS China (Beijing) Region, operated by Sinnet, and the AWS China (Ningxia) Region, operated by NWCD. To learn more, see the S3 pricing page, and get started in the S3 console.&lt;/p&gt;

&lt;p&gt;I hope this guide helps you understand all the new aws s3 features that were launched during the pi week, I know it's a little late to give a recap on "pi week" but I had like to do it anyways, feel free to contact me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>beginners</category>
      <category>aws</category>
    </item>
    <item>
      <title>Create Ascii art with Python</title>
      <author>Stokry</author>
      <pubDate>Tue, 04 May 2021 10:44:11 +0000</pubDate>
      <link>https://dev.to/stokry/create-ascii-art-with-python-31nd</link>
      <guid>https://dev.to/stokry/create-ascii-art-with-python-31nd</guid>
      <description>&lt;p&gt;Hello all, in today's quick tutorial I will show you a small Python script that converts image files into beautiful ASCII art. &lt;/p&gt;

&lt;p&gt;This is our test image: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TeMy_bmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/P4P16kN/test1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TeMy_bmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/P4P16kN/test1.jpg" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
Let's jump to the code:&lt;/p&gt;

&lt;p&gt;First we need to import our dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;termcolor&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;colored&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;colorama&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we need to read our image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test1.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we will be converting it into grayscale&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AsciiArt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_path&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after that, we resize the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
        &lt;span class="n"&gt;aspect_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="n"&gt;new_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;
        &lt;span class="n"&gt;new_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aspect_ratio&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;new_width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.55&lt;/span&gt;
        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;new_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_height&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;new size of image, and we convert image to greyscale format&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace each pixel with a character from array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;amp;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"@"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;new_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pixel&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pixel&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;new_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;split string of chars into multiple strings of length equal to new width and create a list&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;new_pixels_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ascii_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;new_width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_pixels_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;ascii_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascii_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascii_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;write to a text file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;      &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ascii_image.txt"&lt;/span&gt;
      &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascii_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"saved art image to file as &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"yellow"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;AsciiArt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our final result -&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHnJvjQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bHDsJ16/final.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHnJvjQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bHDsJ16/final.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you all. &lt;/p&gt;

</description>
      <category>python</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Great blogs from the past week to satisfy your reading needs! 🤓</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Tue, 04 May 2021 10:37:44 +0000</pubDate>
      <link>https://dev.to/technoglot/great-blogs-from-the-past-week-to-satisfy-your-reading-needs-5a1f</link>
      <guid>https://dev.to/technoglot/great-blogs-from-the-past-week-to-satisfy-your-reading-needs-5a1f</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@siora18?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Siora Photography&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/reading?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello DEV fam! 👋🏻 And welcome (back) to another edition of #bestofdev by yours truly, technoglot! 🙇🏻‍♀️&lt;/p&gt;

&lt;p&gt;You know the drill by now, but I'll repeat myself for the newcomers 😉. This blog series is dedicated to great, yet underrated blogs I read over the weekend. I believe they deserve more attention, hence the reason I compile this short list on a weekly basis.&lt;/p&gt;

&lt;p&gt;To celebrate this 3rd edition (and the fact that I read too much last weekend), I figured I'd make the list a little longer. Hope you don't mind! 😊&lt;/p&gt;

&lt;p&gt;Without further delay, let's dive right into this week's picks! 🤿&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Obligatory disclaimer 🚨&lt;/strong&gt;: Do y'all even read this stuff? Anyway... I'm doing this out of my personal motivation. None of these great authors/bloggers asked me for any promo. I still think they deserve a shout out, so here it goes. The order in which I list the posts is totally random, by the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #1️⃣
&lt;/h1&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/juanfrank77"&gt;@juanfrank77&lt;/a&gt;
 absolutely killed it with this one! 👌🏻 If you ever thought you can't learn something from writing, think again! Be sure to pick up some wisdom from this one. 🤓&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/juanfrank77" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgoHXQfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bUNDSqew--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/76104/fc27d428-3e02-44da-8677-6ef7e1e55c00.jpeg" alt="juanfrank77 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/juanfrank77/can-you-learn-something-new-by-writing-5gpm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Can you learn something new by writing?&lt;/h2&gt;
      &lt;h3&gt;Juan F Gonzalez  ・ Apr 26 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#learning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #2️⃣
&lt;/h1&gt;

&lt;p&gt;Working from home can be tough! 😫 No problem, &lt;a class="mentioned-user" href="https://dev.to/sandordargo"&gt;@sandordargo&lt;/a&gt;
 has your back with 5 great productivity tips to get more done while working from home. Must read for anyone struggling with the new normal! &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/sandordargo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6KfStcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PTqNI8Xw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37458/adbc8839-4e49-4a14-bb5d-7a70ff635d1f.jpg" alt="sandordargo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sandordargo/another-5-great-productivity-tips-for-working-from-home-1f5a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Another 5 great productivity tips for working from home!&lt;/h2&gt;
      &lt;h3&gt;Sandor Dargo ・ Apr 28 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #3️⃣
&lt;/h1&gt;

&lt;p&gt;Ah, the newbies! 🐣 How should you prepare to welcome them in your company? Check this blog post out, where &lt;a class="mentioned-user" href="https://dev.to/tiina"&gt;@tiina&lt;/a&gt;
 gives actionable tips on how to better onboard newcomers in your company. Great read, trust me! 💯&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/tiina" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwhzRMPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SfCBLMWh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/622503/8cc52944-6528-4703-8843-deef28be836e.jpg" alt="tiina image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tiina/how-company-should-prepare-for-a-newcomer-30p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How company should prepare for a newcomer&lt;/h2&gt;
      &lt;h3&gt;Tiina ・ Apr 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#onboarding&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#culture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #4️⃣
&lt;/h1&gt;

&lt;p&gt;Now, now. Who doesn't love a little controversy? (It's okay if you don't 😉) &lt;a class="mentioned-user" href="https://dev.to/sonny_ad"&gt;@sonny_ad&lt;/a&gt;
 takes you on an unexpected ride and tells you why you definitely shouldn't be a fullstack dev. Curious? Click that link and binge read!&lt;/p&gt;

&lt;p&gt;P.S.: Oopsie, this one's not from last week, but I'm too lazy to replace it! 😜&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/sonny_ad" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKD7LVgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mjZJEKu8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/612697/a5628e43-f96a-4f80-9ee5-283fa8d30e97.jpeg" alt="sonny_ad image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sonny_ad/why-you-shouldn-t-be-a-full-stack-engineer-faa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why you shouldn't be a full-stack engineer&lt;/h2&gt;
      &lt;h3&gt;Sonny Alves Dias ・ Apr 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#fullstack&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#junior&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #5️⃣
&lt;/h1&gt;

&lt;p&gt;Do you even single-task, bro? To all the multi-taskers out there: this one's for you! 📢 &lt;a class="mentioned-user" href="https://dev.to/kristimke"&gt;@kristimke&lt;/a&gt;
 shares the importance of single tasking with us and provides 3 tips for leaving behind multitasking once and for all (it will take some effort on your end though 🤭).&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kristimke" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U4Bvc8UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--c8wPQmOa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613705/b7c121d6-cae6-4b38-95bd-93375da76f2b.jpeg" alt="kristimke image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kristimke/3-single-tasking-tips-to-improve-your-focus-22k5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 Single-Tasking Tips to Improve Your Focus&lt;/h2&gt;
      &lt;h3&gt;Kristi Anderson ・ Apr 29 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ai&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#culture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#leadership&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #6️⃣
&lt;/h1&gt;

&lt;p&gt;Similarly, I'd like to ask you: do you ask GOOD questions? If you are unsure, you better read &lt;a class="mentioned-user" href="https://dev.to/tkdodo"&gt;@tkdodo&lt;/a&gt;
 's post on how to ask better questions. Tip 💡: don't start with "How can I..."!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/tkdodo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpYx8dD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4QV2Zd80--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/536846/96ff5cb8-c744-41e7-b480-b5bee2cba2b5.jpeg" alt="tkdodo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tkdodo/how-can-i-1pf2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How can I ... ?&lt;/h2&gt;
      &lt;h3&gt;Dominik D ・ Apr 25 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #7️⃣
&lt;/h1&gt;

&lt;p&gt;Ever heard of lateral thinking? Bet you haven't! 😜 Now, here's a little gem by &lt;a class="mentioned-user" href="https://dev.to/krisplatis"&gt;@krisplatis&lt;/a&gt;
 I found grabbing dust around here. In this post you'll be gently introduced to the concept of thinking backwards. Confused? 🥴 Solve that by reading this short yet thought provoking post!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/krisplatis" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QpxGwSbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bhPtcTEz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/277429/ed9283f3-74c5-48f7-aa6b-dd3560c19b5a.jpg" alt="krisplatis image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/krisplatis/seek-ideal-solutions-by-thinking-backwards-from-the-goal-to-the-starting-point-2mhj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Seek ideal solutions by thinking backwards: from the goal to the starting point ⏮&lt;/h2&gt;
      &lt;h3&gt;Krzysztof Platis ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#thinking&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lateralthinking&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#its-a-wrap"&gt;
  &lt;/a&gt;
  It's a wrap! 🌯
&lt;/h1&gt;

&lt;p&gt;That's all for this one fam! Be sure to check these posts out and show the authors some love! 💖 If you enjoyed this blog, be sure to let me know below 👇🏻 and stay put for next week's edition.&lt;/p&gt;

&lt;p&gt;Until then! 👩🏻‍💻&lt;/p&gt;

&lt;p&gt;P.S.: TIL that you cannot tag more than 7 people in a blog post here on DEV 😱&lt;/p&gt;

</description>
      <category>bestofdev</category>
      <category>icymi</category>
      <category>writing</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Handling burnouts as a developer!</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 04 May 2021 10:35:50 +0000</pubDate>
      <link>https://dev.to/ms_yogii/handling-burnouts-as-a-developer-2ng7</link>
      <guid>https://dev.to/ms_yogii/handling-burnouts-as-a-developer-2ng7</guid>
      <description>&lt;p&gt;Hello Folks, &lt;/p&gt;

&lt;p&gt;I mostly prefer talking about technical things in my articles but today’s article is as important as all those technical skills! As a developer, the only thing which remains constant for us is continuous learning and while choosing this path we all have signed-up for this. Though most of the time we enjoy learning, there are times when this feels overwhelming, draining and demotivating. &lt;/p&gt;

&lt;p&gt;We all go through this at some point, but we hardly talk about this!&lt;/p&gt;

&lt;p&gt;It’s been more than a year now that we have shifted to work from home culture. It made a huge shift in our daily routines, lifestyles and habits. But one major change it caused was taking less days off! Not only this, if you are someone like me, who is working on some &lt;a href="http://peerlist.io/"&gt;side-project&lt;/a&gt;, then this day off comes as a more opportunity to work and that is what I did for the past 6 months (not a single day off!😨)&lt;/p&gt;

&lt;p&gt;After this over working, I felt burned out! I posted this on twitter and the people around me taught me some really good tips to handle this in a better way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ms_yogii/status/1384388410769506306"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5PQAKFo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqe4lametmz0aqvlvz2g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will be sharing those tips with you 😇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-lets-understand-why-this-happened"&gt;
  &lt;/a&gt;
  First, let’s understand why this happened?
&lt;/h3&gt;

&lt;p&gt;Burnouts are mostly the outcome of overworking, I know this is a very basic thing, but we tend to avoid digging deep and not understanding the root cause. As a developer, all our work is done sitting at one place solving problems. We start working on one thing to another without switching in-between. This is the exact opposite of doing a physical activity, which looks more rewarding. &lt;/p&gt;

&lt;p&gt;If you are doing some physical activity, like walking, hiking or anything, you can easily measure your progress, as it is clearly visible. But while coding, if you have solved half the logic of your bug spending 4 hours on it, that doesn’t look like progress! &lt;/p&gt;

&lt;p&gt;Here are some solutions to this - &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-breaks-spend-some-time-without-any-screen"&gt;
  &lt;/a&gt;
  Take breaks, spend some time without any screen!
&lt;/h3&gt;

&lt;p&gt;Solution is, rewarding yourself with some free time after a small accomplishment! You may have a huge to-do, a prod deployment ahead or any urgent task, NEVER stop taking a break! This is the reason why pomodoro technique is so efficient. If you want to save draining yourself, you will need to take breaks and enjoy some free time away from the screen. This thing will be very helpful when you have a lot of work to do! &lt;/p&gt;

&lt;p&gt;I used to think, taking a break will waste my time and I will not be able to finish these tasks. But, practically, it calms you down giving you more energy to focus and finish tasks within time. We all know this, but we underestimate it a lot!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-up-your-creative-side"&gt;
  &lt;/a&gt;
  Open up your creative side!
&lt;/h3&gt;

&lt;p&gt;Everyone has some hobby, some creative side of themselves. Give it some room. I was not doing any activity apart from coding and daily chores. That was a mistake. Because of continuous work, I was not giving myself time to reflect on the things happening around or even to understand something is going wrong with me. &lt;/p&gt;

&lt;p&gt;To understand this, to think through the situation, try working on some creative stuff. Draw, paint, knit, do anything, which will keep your mind idle yet feeling comfortable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-mindfulness"&gt;
  &lt;/a&gt;
  Practice mindfulness!
&lt;/h3&gt;

&lt;p&gt;I have this habit of planning things ahead of time. This helps me finish things, but it has a drawback of keeping me worried all the time. I used to take frequent breaks, but during those breaks, I used to plan my next activities. That way you still continue your work and the break doesn't remain a break! To stop this, you need to practice mindfulness. Being in the moment and not planning anything! This sounds little philosophical, but people like me who are obsessive planners will need to understand this! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-and-most-important-limit-social-media"&gt;
  &lt;/a&gt;
  Last and Most Important, Limit social media!
&lt;/h3&gt;

&lt;p&gt;You might think, this has nothing to do with burnout, but trust me it has! Social media is full of success stories, but out of those, very few people talk about the struggles. Social media always shows only the success without giving much focus on many lost attempts. Being on social media, we unknowingly compare our success with someone else and start to feel low! This makes you work more, without enjoying it and end up getting burnout!&lt;/p&gt;

&lt;p&gt;Afterall, the ultimate aim is to enjoy doing what we are doing 🥰&lt;/p&gt;

&lt;p&gt;I hope with these things in your mind, you might handle your burnouts better than me 😅 or at least save yourself from getting burned out! I would love to listen to your stories or ways of handling this, please share them in comments or message me on &lt;a href="https://twitter.com/ms_yogii"&gt;Twitter&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;In case, you are curious to know, I have been working on a side project for creating a single work profile. You can check that &lt;a href="https://peerlist.io/"&gt;here&lt;/a&gt; and share your feedback about it. I would love to understand! &lt;/p&gt;

&lt;p&gt;Thank you so much for reading this article!&lt;br&gt;
Keep growing 🙌&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>watercooler</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How CSS pseudo-elements work a ridiculously simple explanation for beginners

</title>
      <author>Peter</author>
      <pubDate>Tue, 04 May 2021 09:58:25 +0000</pubDate>
      <link>https://dev.to/peterlunch/how-css-pseudo-elements-work-a-ridiculously-simple-explanation-for-beginners-49gk</link>
      <guid>https://dev.to/peterlunch/how-css-pseudo-elements-work-a-ridiculously-simple-explanation-for-beginners-49gk</guid>
      <description>&lt;p&gt;Pseudo-elements especially &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; are so hot right now. Amazing sites like &lt;a href="https://www.cyberpunk.net/us/en/"&gt;Cyberpunk.net&lt;/a&gt; use them to create amazing affects. However, lots of beginners don’t fully grasp their power. So, before you can harness their power you first need to understand how they work.&lt;/p&gt;

&lt;p&gt;When I first started working with pseudo-elements, I had no idea what I was doing or how they actually work. I was just copying and pasting other people's code and not really understanding why it was or wasn’t working.&lt;/p&gt;

&lt;p&gt;If you want to harness the power of CSS and get good at it then understanding pseudo-elements is a must. By the end of this post you will have a strong grasp of what pseudo-elements are and how to use them to create stylish elements yourself.&lt;/p&gt;

&lt;p&gt;But first, let’s explore what they are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-pseudoelements"&gt;
  &lt;/a&gt;
  What are Pseudo-Elements
&lt;/h2&gt;

&lt;p&gt;In CSS pseudo-elements are a keyword that you add to &lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;selectors&lt;/a&gt;. These pseudo elements let you style specific parts of the element you selected. CSS denotes them using two colons &lt;code&gt;::&lt;/code&gt; which helps you tell them apart from CSS pseudo-classes as they have only one colon &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at the general syntax for CSS pseudo-elements before we get into specific pseudo-elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="nd"&gt;::pseudo-element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you put the CSS selector before the double colon. Next, inside the curly braces you write CSS property value pairs, like you would for any other element you are styling.&lt;/p&gt;

&lt;p&gt;As a real example, we could do something like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.second&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;mediumspringgreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example uses the &lt;code&gt;::selection&lt;/code&gt; pseudo-element on the &lt;code&gt;second&lt;/code&gt; CSS class selector. Now, when you highlight the paragraph text it is a different color and background.&lt;/p&gt;

&lt;p&gt;We’ll explore the &lt;code&gt;::selection&lt;/code&gt; pseudo element some more later. For now I want you to focus on the two major pseudo-elements &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-before-and-after-pseudoelements"&gt;
  &lt;/a&gt;
  What are the before and after pseudo-elements?
&lt;/h2&gt;

&lt;p&gt;The before and after pseudo-elements let you insert content onto a web page. They allow you to do this without the need for it to be in the HTML. Essentially you can insert content through CSS.&lt;/p&gt;

&lt;p&gt;One important thing to note when it comes to the before and after pseudo-elements is that when they are created they are not actually on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"&gt;DOM&lt;/a&gt;. In other words, they are fake elements, this is why they are call &lt;em&gt;“pseudo&lt;/em&gt; elements as the word pseudo means fake. So, the name fits because these elements don’t actually change anything in the document. They are hidden elements that are only visible to the user and not the DOM.&lt;/p&gt;

&lt;p&gt;What this looks like in practice is this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result would be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  before
    &lt;span class="c"&gt;&amp;lt;!--actual h1 element --&amp;gt;&lt;/span&gt;
  after
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Knowing that these elements are fake it’s time to look at the first fake element you will use a lot in web development, the before pseudo-element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-before-pseudoelement"&gt;
  &lt;/a&gt;
  The before pseudo-element
&lt;/h3&gt;

&lt;p&gt;In CSS, &lt;code&gt;::before&lt;/code&gt; creates a pseudo-element that is the first child of the selected element. To put it another way, it is a pseudo-element that comes before the content of the CSS selector. So if you have a paragraph element it would look like this &lt;code&gt;p::before&lt;/code&gt; with &lt;code&gt;p&lt;/code&gt; being the selector and &lt;code&gt;::before&lt;/code&gt; being the pseudo-element.&lt;/p&gt;

&lt;p&gt;With this in mind let’s look at some examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Mr. and Mrs. Dursley of number four, Privet Drive, were proud to say that they were perfectly normal, thank you very much.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7f0909&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"the boy who lived"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;130%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5BC8F8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pprhb53f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ilm1imtlvnlryw0qskp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pprhb53f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ilm1imtlvnlryw0qskp.png" alt="::before pseudo-element result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the code above, we have added the content &lt;em&gt;'the boy who lived'&lt;/em&gt; before the CSS selector which in this case is the &lt;code&gt;p&lt;/code&gt; tag and its content.&lt;/p&gt;

&lt;p&gt;We were then able to style the content before the selector however we wanted.&lt;/p&gt;

&lt;p&gt;If we check the developer tools in the &lt;a href="https://codepen.io/pin0s/pen/dyNxvXZ"&gt;codepen&lt;/a&gt;, you will see that there is no element &lt;em&gt;'the boy who lived'&lt;/em&gt; There is just a pseudo-element &lt;code&gt;::before&lt;/code&gt;. As it isn't really on the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ytx2LfGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hghwiq4cytiba8sbh6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ytx2LfGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hghwiq4cytiba8sbh6x.png" alt="pseudo-element before showing in dev tools but not on the dom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's look at another example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;harry potter and the sorcerer's stone&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQ3LpF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9zwqoyqvhj1uxu5kvlz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQ3LpF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9zwqoyqvhj1uxu5kvlz.png" alt="before pseudo-element with block styling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, the before pseudo-element is using the &lt;code&gt;display&lt;/code&gt; property with the value &lt;code&gt;block&lt;/code&gt;. This then moves the background with a width of 5px above and before the &lt;code&gt;h1&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;Now you know what the before pseudo-element does let's look at the after pseudo-element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-after-pseudoelement"&gt;
  &lt;/a&gt;
  The After pseudo-element
&lt;/h3&gt;

&lt;p&gt;In CSS, &lt;code&gt;::after&lt;/code&gt; creates a pseudo-element this is the last child of the selected element. So much like the &lt;code&gt;::before&lt;/code&gt;, it is a pseudo-element that comes after the content of the CSS selector.&lt;/p&gt;

&lt;p&gt;Keeping that in mind let’s use the second example from the before section and add a line underneath with the after pseudo-element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayKP3Iz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi16jjzusd8ju3i6izei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayKP3Iz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi16jjzusd8ju3i6izei.png" alt="before &amp;amp; after pseudo-element with block styling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now have a line under the &lt;code&gt;h1&lt;/code&gt;. How cool is that, we can make our own little styling elements to create great looking elements.&lt;/p&gt;

&lt;p&gt;By now, you should now have a good understanding of how the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements work. To further improve our knowledge we need to understand what the &lt;code&gt;content&lt;/code&gt; property is and what it is doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-property"&gt;
  &lt;/a&gt;
  Content property
&lt;/h2&gt;

&lt;p&gt;Did you notice the use of the &lt;code&gt;content&lt;/code&gt; property, with the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements? Objects that are inserted using the &lt;code&gt;content&lt;/code&gt; property are anonymous replaced &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element"&gt;elements&lt;/a&gt;. Put in simpler terms, it is an element whose content is not affected by the current documents styles.&lt;/p&gt;

&lt;p&gt;Thus, when using the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements, you &lt;b&gt;must&lt;/b&gt; use the &lt;code&gt;content&lt;/code&gt; property to make your styles visible. Did you also notice that the content is inside the element? In spite of the fact that the naming of &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; make it feel like the content should come before or after the element. But, it is definitely before or after the content inside the element.&lt;/p&gt;

&lt;p&gt;Next, to better understand the content property let’s look at what values it takes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-property-accepted-values"&gt;
  &lt;/a&gt;
  Content Property Accepted Values
&lt;/h3&gt;

&lt;p&gt;The content property takes many types of values. The default value is &lt;code&gt;normal&lt;/code&gt;. It means 'normally' nothing will be visible to the user. Thus, you give the content property one of the values below.&lt;/p&gt;

&lt;p&gt;The other values content can be are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;string&lt;/strong&gt; - this sets the content to be the string you specify.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;counter&lt;/strong&gt; - used to style lists.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;image&lt;/strong&gt; - this sets the content to be an image you specify with a &lt;code&gt;url()&lt;/code&gt; or &lt;code&gt;gradient&lt;/code&gt; data type. The image is inserted at its exact dimensions, meaning you cannot resize the image.

&lt;ul&gt;
&lt;li&gt;please note that to insert alt text you use a &lt;code&gt;/&lt;/code&gt; after the &lt;code&gt;url()&lt;/code&gt; and a string description of the image. For example: &lt;code&gt;content: url("https://www.example.com/test.png") / "This is the alt text";&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nothing&lt;/strong&gt; - Useful for inserting images as background-images (set width and height, and can even resize with background-size), or making other cool styling features (link to dev.to post).&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;attr()&lt;/strong&gt; value - Sets the content as the string value of the selected elements attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-awesome-pseudoelements"&gt;
  &lt;/a&gt;
  Other awesome pseudo-elements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#selection"&gt;
  &lt;/a&gt;
  Selection
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::selection&lt;/code&gt; - This, CSS pseudo-element applies styles to the part of a document that has been highlighted by the user. To put it another way, it makes the highlighter on your page look pretty when people highlight text to copy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cyan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#firstletter"&gt;
  &lt;/a&gt;
  First-letter
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::first-letter&lt;/code&gt; - CSS pseudo-element applies styles to the first letter of the first line of a block-level element, but only when not preceded by other content (such as images or inline tables).&lt;/p&gt;

&lt;p&gt;To rephrase the above, this pseudo-element lets you style the first letter of the first line of the element you select. This only happens on elements that are categorized as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements"&gt;block-level elements&lt;/a&gt; check that link out for a list of block level elements.&lt;/p&gt;

&lt;p&gt;As a result, we can use this pseudo-element to make awesome drop caps for our paragraphs, see the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;117&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;212&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;173&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;81&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pin0s/embed/BapXWOg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstline"&gt;
  &lt;/a&gt;
  First-line
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::first-line&lt;/code&gt; - CSS pseudo-element applies styles to the first line of a block-level element.&lt;/p&gt;

&lt;p&gt;In plain English the above means, this pseudo-element lets you style the the first line of the element you select. Again like with first letter this only happens to block level elements.&lt;/p&gt;

&lt;p&gt;Let's add the below code to the &lt;code&gt;first-letter&lt;/code&gt; example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RT2_NA9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvj64lldpoe8kmz176d1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RT2_NA9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvj64lldpoe8kmz176d1.png" alt="first-letter and first-line pseudo-elements effects on p element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;p&lt;/code&gt; now has drop caps and red text for the first line. Play around with width in the pen above to see what happens as you increase and decrease the width.&lt;/p&gt;

&lt;p&gt;Did you notice how if the text moves lines the color changes? You have to be careful taking into consideration things like the width of the element and how it will respond on different screens when styling the first line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marker"&gt;
  &lt;/a&gt;
  Marker
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;::marker&lt;/code&gt; CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number.&lt;/p&gt;

&lt;p&gt;The marker pseudo-element will allow you to replace the counter content value. For an example on how a counter works I encourage you to check out this &lt;a href="https://www.freecodecamp.org/news/css-before-and-after-how-to-use-the-content-property/"&gt;post&lt;/a&gt;. That said, a counter is just the bullet point of number in front of a list item (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) and the &lt;code&gt;::marker&lt;/code&gt;pseudo-element lets you style them.&lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Nintendo Hero's&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Mario&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Link&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Samus&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;::marker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e4000f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pin0s/embed/ExZqWBo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The above example is pretty simple, we have just changed the bullet point color to red. But, you can do lot's of things like change the style or even use emoji's.&lt;/p&gt;

&lt;p&gt;Finally, it is important to note that the ::marker pseudo-element is not fully supported at the time of writing this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPjH5Bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx48djtc2wfdd3ml9dsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPjH5Bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx48djtc2wfdd3ml9dsw.png" alt="browser support for marker pseudo element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Now you should have a good understanding of pseudo-elements. Let’s recap on a few important notes.&lt;/p&gt;

&lt;p&gt;Firstly, pseudo elements let you style specific parts of the element you selected. Pseudo-elements are denoted by double colons.&lt;/p&gt;

&lt;p&gt;Next, remember that pseudo-elements do not appear in the DOM as they are fake elements. The way you make them visible to the user is to utilize the &lt;code&gt;content&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Lastly, if you learnt something from this post then checkout the rest of my posts &lt;a href="https://bit.ly/2Re6Vdf"&gt;here&lt;/a&gt; or &lt;a href="https://mailchi.mp/4fb2a2723574/peter-lunch-link"&gt;sign up to my newsletter&lt;/a&gt; to get ridiculously good and super exclusive newbie content.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>20 Linux System Administrator Interview Questions - Land the Job in 2021</title>
      <author>Course Probe</author>
      <pubDate>Tue, 04 May 2021 09:42:06 +0000</pubDate>
      <link>https://dev.to/courseprobe/20-linux-system-administrator-interview-questions-land-the-job-in-2021-1ak</link>
      <guid>https://dev.to/courseprobe/20-linux-system-administrator-interview-questions-land-the-job-in-2021-1ak</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Find below a collection of Questions &amp;amp; Answers for Linux System Administrator updated in May 2021. Also I’ve included a collection of resources to help you better prepare for your next job interview in 2021. Best of Luck landing your new Job!!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5W51uYrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/340/1%2AqQqS2gMOOtb7AwBVckEYqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5W51uYrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/340/1%2AqQqS2gMOOtb7AwBVckEYqg.png" alt="SysAdmin Interview Questions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/sysadmin-interview-questions"&gt;SysAdmin Interview Questions&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;1 &lt;strong&gt;What is the difference between rm and rm -rf?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The rm command by itself only deletes the named files (and not directories). With -rf you add two additional features: The -r, -R, or --recursive flag recursively deletes the directory’s contents, including hidden files and subdirectories, and the -f, or --force, flag makes rm ignore nonexistent files, and never prompt for confirmation.&lt;/p&gt;

&lt;p&gt;2 &lt;strong&gt;How do you make a process run in the background, and what are the advantages of doing so?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can make a process run in the background by adding the special character &amp;amp; at the end of the command. Generally, applications that take too long to execute, and don’t require user interaction are sent to the background so that we can continue our work in the terminal.&lt;/p&gt;

&lt;p&gt;3 &lt;strong&gt;What are the first five commands you type on a *nix server after login?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lsblk to see information on all block devices&lt;br&gt;
who to see who is logged into the server&lt;br&gt;
top to get a sense of what is running on the server&lt;br&gt;
df -khT to view the amount of disk space available on the server&lt;br&gt;
netstat to see what TCP network connections are active&lt;/p&gt;

&lt;p&gt;4 &lt;strong&gt;Is running these commands as root a good or bad idea?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running (everything) as root is bad due to two major issues. The first is risk. Nothing prevents you from making a careless mistake when you are logged in as root. If you try to change the system in a potentially harmful way, you need to use sudo, which introduces a pause (while you’re entering the password) to ensure that you aren’t about to make a mistake.&lt;/p&gt;

&lt;p&gt;The second reason is security. Systems are harder to hack if you don’t know the admin user’s login information. Having access to root means you already have one half of the working set of admin credentials.&lt;/p&gt;

&lt;p&gt;5 &lt;strong&gt;Compress.tgz has a file size of approximately 15GB. How can you list its contents, and how do you list them only for a specific file?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To list the file’s contents:&lt;/p&gt;

&lt;p&gt;tar tf archive.tgz&lt;/p&gt;

&lt;p&gt;To extract a specific file:&lt;/p&gt;

&lt;p&gt;tar xf archive.tgz filename&lt;/p&gt;

&lt;p&gt;6 &lt;strong&gt;Which port is used for the ping command?&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;The ping command uses ICMP. Specifically, it uses ICMP echo requests and ICMP echo reply packets.&lt;/p&gt;

&lt;p&gt;ICMP does not use either UDP or TCP communication services: Instead, it uses raw IP communication services. This means that the ICMP message is carried directly in an IP datagram data field.&lt;/p&gt;

&lt;p&gt;7 &lt;strong&gt;What is the difference between a router and a gateway? What is the default gateway?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Router describes the general technical function (layer 3 forwarding), or a hardware device intended for that purpose, while gateway describes the function for the local segment (providing connectivity to elsewhere). You could also state that you "set up a router as a gateway." Another term is hop, which describes forwarding between subnets.&lt;/p&gt;

&lt;p&gt;The term default gateway is used to mean the router on your LAN, which has the responsibility of being the first point of contact for traffic to computers outside the LAN.&lt;/p&gt;

&lt;p&gt;8 &lt;strong&gt;Explain the boot process for Linux.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BIOS -&amp;gt; Master Boot Record (MBR) -&amp;gt; GRUB -&amp;gt; the kernel -&amp;gt; init -&amp;gt; runlevel&lt;/p&gt;

&lt;p&gt;9 &lt;strong&gt;How do you check the error messages while the server is booting up?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kernel messages are always stored in the kmsg buffer, visible via the dmesg command.&lt;/p&gt;

&lt;p&gt;Boot issues and errors call for a system administrator to look into certain important files, in conjunction with particular commands, which are each handled differently by different versions of Linux:&lt;/p&gt;

&lt;p&gt;/var/log/boot.log is the system boot log, which contains all that unfolded during the system boot.&lt;br&gt;
/var/log/messages stores global system messages, including the messages logged during system boot.&lt;br&gt;
/var/log/dmesg contains kernel ring buffer information.&lt;/p&gt;

&lt;p&gt;10 &lt;strong&gt;How do you change kernel parameters? What kernel options might you need to tune?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To set the kernel parameters in Unix-like systems, first edit the file /etc/sysctl.conf. After making the changes, save the file and run the sysctl -p command. This command makes the changes permanent without rebooting the machine&lt;/p&gt;

&lt;p&gt;11 &lt;strong&gt;How do you run a script as another user without their password?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, if you were editing the sudoers file (such as /private/etc/sudoers), you might use visudo to add the following:&lt;/p&gt;

&lt;p&gt;user1 ALL=(user2) NOPASSWD: /opt/scripts/bin/generate.sh&lt;/p&gt;

&lt;p&gt;12 &lt;strong&gt;What is the UID 0 toor account? Have you been compromised?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The toor user is an alternative superuser account, where toor is root spelled backward. It is intended to be used with a non-standard shell, so the default shell for root does not need to change.&lt;/p&gt;

&lt;p&gt;This purpose is important. Shells which are not part of the base distribution, but are instead installed from ports or packages, are installed in /usr/local/bin; which, by default, resides on a different file system. If root’s shell is located in /usr/local/bin and the file system containing /usr/local/bin is not mounted, root could not log in to fix a problem, and the sysadmin would have to reboot into single-user mode to enter the shell’s path.&lt;/p&gt;

&lt;p&gt;13 &lt;strong&gt;How does tracert work and what protocol does it use?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The command tracert—or traceroute depending on the operating system—allows you to see exactly what routers you touch as you move through the chain of connections to your final destination. If you end up with a problem where you can’t connect to or ping your final destination, a tracert can help in that you can tell exactly where the chain of connections stops.&lt;/p&gt;

&lt;p&gt;14 &lt;strong&gt;How do you protect your system from getting hacked?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By following the principle of least privileges and these practices:&lt;/p&gt;

&lt;p&gt;Encrypt with public keys, which provides excellent security.&lt;br&gt;
Enforce password complexity.&lt;br&gt;
Understand why you are making exceptions to the rules above.&lt;br&gt;
Review your exceptions regularly.&lt;br&gt;
Hold someone to account for failure.&lt;/p&gt;

&lt;p&gt;15 &lt;strong&gt;What is LVM, and what are the advantages of using it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LVM, or Logical Volume Management, uses a storage device management technology that gives users the power to pool and abstract the physical layout of component storage devices for easier and flexible administration. Using the device mapper Linux kernel framework, the current iteration (LVM2) can be used to gather existing storage devices into groups and allocate logical units from the combined space as needed.&lt;/p&gt;

&lt;p&gt;16 &lt;strong&gt;What are sticky ports?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sticky ports are one of the network administrator’s best friends and worst headaches. They allow you to set up your network so that each port on a switch only permits one (or a number that you specify) computer to connect on that port, by locking it to a particular MAC address.&lt;/p&gt;

&lt;p&gt;17 &lt;strong&gt;What is a false positive and false negative in the case of IDS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the Intrusion Detection System (IDS) device generates an alert for an intrusion which has actually not happened, this is false positive. If the device has not generated any alert and the intrusion has actually happened, this is the case of a false negative.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Comment Below what would be your answers to the following questions ... Help others by commenting additional questions you think are important !!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;18 What is the difference between local and remote port forwarding?&lt;/p&gt;

&lt;p&gt;19 What is the difference between local and remote port forwarding?&lt;/p&gt;

&lt;p&gt;20 How do you catch a Linux signal on a script?&lt;/p&gt;




&lt;p&gt;Additional Resources that might come handy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=NcMZU1aTATA&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flinux-foundation-ceritifed-system-administrator-lfcs%2F"&gt;Linux Foundation Certified System Administrator (LFCS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coursesim.com/course/red-hat-certified-system-administrator-prep-course/"&gt;Red Hat Certified System Administrator Prep Course&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;If you are thinking about starting your career as a Linux System Administrator or Sysadmin and you would like to know more about System Administration then keep reading below:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-linux-system-administrator-do"&gt;
  &lt;/a&gt;
  What does a Linux system administrator do?
&lt;/h2&gt;

&lt;p&gt;As a Linux system Administrator you will have to deal with tasks like making sure all files and systems have the proper backup in place, you will be restoring information, recovering from data corruption and other disasters like security attacks. &lt;/p&gt;

&lt;p&gt;You will also have to deal with maintenance, applications and configurations in the servers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-prepare-for-a-system-administrator-interview"&gt;
  &lt;/a&gt;
  How do I prepare for a system administrator interview?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Learn about Linux and System Administration in general&lt;/li&gt;
&lt;li&gt;Review the different systems and how they are used by different businesses.&lt;/li&gt;
&lt;li&gt;Learn about &lt;a href="https://leanpub.com/devops-engineer"&gt;Role of a DevOps Engineer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get a System administrator certification.&lt;/li&gt;
&lt;li&gt;Be ready to talk about any previous IT experience with examples.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-should-a-linux-administrator-know"&gt;
  &lt;/a&gt;
  What should a Linux administrator know?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;User Management in the system (Linux/Win)&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Hardware setup including routers, vpns and firewalls&lt;/li&gt;
&lt;li&gt;Remote system administration&lt;/li&gt;
&lt;li&gt;Managing Scheduled Data Backups&lt;/li&gt;
&lt;li&gt;Software Installation and Updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-long-does-it-take-to-learn-system-administration"&gt;
  &lt;/a&gt;
  How long does it take to learn system administration?
&lt;/h2&gt;

&lt;p&gt;It takes at least 1 year studying and getting your certifications, it's a good idea during this time to also get an intern position. Then it will take an additional 2 years for you to build good experience and to progress into a senior position within your company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-linux-administration-jobs-in-demand-"&gt;
  &lt;/a&gt;
  Are Linux Administration jobs in demand ?
&lt;/h2&gt;

&lt;p&gt;According to the US Bureau of Labor Statistics, there will be a growth rate of 6% between the years 2016 to 2026, this means more roles will open since technologies will evolve and companies will expand business. Apart from this there's an expected increase in salary for the roles of Linux System Administrator.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
    </item>
    <item>
      <title>VSCode tips: commit characters</title>
      <author>Siddharth</author>
      <pubDate>Tue, 04 May 2021 09:36:41 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/vscode-tips-commit-characters-e2a</link>
      <guid>https://dev.to/siddharthshyniben/vscode-tips-commit-characters-e2a</guid>
      <description>&lt;p&gt;VSCode is a really powerful editor, so powerful that there are a lot of features which we might never use. I want to highlight one of these tips here.&lt;/p&gt;

&lt;p&gt;I'll show you this feature called commit characters. Commit characters are a set of characters, which are different for every language, which trigger autocomplete &lt;em&gt;and&lt;/em&gt; add the character to the end of the autocompleted value. &lt;/p&gt;

&lt;p&gt;In english: Commit characters are a bunch of characters which we use instead of enter when selecting an option from the autocomplete. What is special about these characters are that the commit character chosen will be added to the end of the autocompleted value.&lt;/p&gt;

&lt;p&gt;If that doesn't make too much sense, don't worry, there's a gif coming up.&lt;/p&gt;

&lt;p&gt;In Javascript, the commit characters are "&lt;code&gt;;&lt;/code&gt;", "&lt;code&gt;.&lt;/code&gt;", "&lt;code&gt;(&lt;/code&gt;" etc.&lt;/p&gt;

&lt;p&gt;Here's how commit characters work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJzDBiwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb7n6ezs2l6x6e7hju21.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJzDBiwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb7n6ezs2l6x6e7hju21.gif" alt="vscode-commit-chars"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It saves you that one extra keystroke which I think editors should autofill anyways.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Solution: Non-decreasing Array</title>
      <author>seanpgallivan</author>
      <pubDate>Tue, 04 May 2021 09:31:47 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-non-decreasing-array-1m5c</link>
      <guid>https://dev.to/seanpgallivan/solution-non-decreasing-array-1m5c</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/non-decreasing-array/discuss/1190763"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-665-medium-nondecreasing-array"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/non-decreasing-array/"&gt;Leetcode Problem #665 (&lt;em&gt;Medium&lt;/em&gt;): Non-decreasing Array&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt; integers, your task is to check if it could become non-decreasing by modifying &lt;strong&gt;at most one element&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We define an array is non-decreasing if &lt;code&gt;nums[i] &amp;lt;= nums[i + 1]&lt;/code&gt; holds for every &lt;code&gt;i&lt;/code&gt; (&lt;strong&gt;0-based&lt;/strong&gt;) such that (&lt;code&gt;0 &amp;lt;= i &amp;lt;= n - 2&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [4,2,3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You could modify the first 4 to 1 to get a non-decreasing array.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [4,2,1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You can't get a non-decreasing array by modify at most one element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == nums.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^5 &amp;lt;= nums[i] &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This problem seems easy at first read. If we iterate through the nums array (&lt;strong&gt;N&lt;/strong&gt;), count the number of instances in which an element is lower than the one preceeding (&lt;strong&gt;err&lt;/strong&gt;), and then see that count go above &lt;strong&gt;1&lt;/strong&gt;, then we should be able to &lt;strong&gt;return false&lt;/strong&gt;. The problem becomes more difficult, however, once we realize that we're allowed to modify one element, which will naturally impact its relationship with the surrounding elements.&lt;/p&gt;

&lt;p&gt;With that in mind, we can think of the different possible scenarios faced when we find an incidence of decreasing value. Consider the base scenario, with &lt;strong&gt;N[i-1] = a&lt;/strong&gt; and &lt;strong&gt;N[i] = b&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IzvJ280h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3tVUgNt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IzvJ280h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3tVUgNt.png" alt="Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, we can see that there are three possible scenarios for each of the surrounding elements (&lt;strong&gt;N[i-2]&lt;/strong&gt; and &lt;strong&gt;N[i+1]&lt;/strong&gt;). They can either be larger than &lt;strong&gt;a&lt;/strong&gt; (&lt;strong&gt;x &amp;gt;= a&lt;/strong&gt;), in between &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; (&lt;strong&gt;b &amp;lt; y &amp;lt; a&lt;/strong&gt;) or smaller than &lt;strong&gt;b&lt;/strong&gt; (&lt;strong&gt;z &amp;lt;= b&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wx_5UCtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K99nyd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wx_5UCtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K99nyd7.png" alt="Visual 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scenarios &lt;strong&gt;XAB&lt;/strong&gt; and &lt;strong&gt;ABZ&lt;/strong&gt; can quickly be determined to trigger a &lt;strong&gt;return&lt;/strong&gt; of &lt;strong&gt;false&lt;/strong&gt; because in both cases the &lt;strong&gt;err&lt;/strong&gt; count will increment to &lt;strong&gt;2&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--meqnLOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rR1I59s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--meqnLOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rR1I59s.png" alt="Visual 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Things get more complicated, however, once the values are staggered. In the case of &lt;strong&gt;ZABX&lt;/strong&gt;, we either move &lt;strong&gt;a&lt;/strong&gt; down or &lt;strong&gt;b&lt;/strong&gt; up in order to achieve increasing values, while in &lt;strong&gt;YABX&lt;/strong&gt; we can only move &lt;strong&gt;b&lt;/strong&gt; up and in &lt;strong&gt;ZABY&lt;/strong&gt; we can only move &lt;strong&gt;a&lt;/strong&gt; down:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0eytFpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sEIQIu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0eytFpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sEIQIu4.png" alt="Visual 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the final scenario, &lt;strong&gt;YABY&lt;/strong&gt;, there is no possible way to fix the array, even though there's only one incidence of a descending value:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDT2yfYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ikfi44d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDT2yfYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ikfi44d.png" alt="Visual 5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this all in mind, we can write our function to &lt;strong&gt;return false&lt;/strong&gt; if we see &lt;strong&gt;err &amp;gt; 1&lt;/strong&gt; or if we see the &lt;strong&gt;YABY&lt;/strong&gt; scenario. If we reach the end without triggering either condition, we can &lt;strong&gt;return true&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where N is the length of N&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt; with no modification of inputs&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences in the code of all four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;checkPossibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkPossibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;checkPossibility&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]))&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;checkPossibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Background Toggle with clip path only HTML and CSS</title>
      <author>Nikhil Chandra Roy</author>
      <pubDate>Tue, 04 May 2021 09:22:56 +0000</pubDate>
      <link>https://dev.to/nikhilroy2/background-toggle-with-clip-path-only-html-css-edl</link>
      <guid>https://dev.to/nikhilroy2/background-toggle-with-clip-path-only-html-css-edl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background-toggle-with-clip-path-only-html-css"&gt;
  &lt;/a&gt;
  Background Toggle with clip path only html css
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8Mcbzz2lhxs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this tutorial, I have used only HTML and CSS.&lt;br&gt;
for background transition effect I have used &lt;a href="https://bennettfeely.com/clippy/"&gt; clip-path generator &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.1/css/all.css"&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;input type="checkbox" name="" id="check"&amp;gt;
    &amp;lt;label for="check"&amp;gt;
        &amp;lt;i class="fas fa-sun"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;i class="fas fa-moon"&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;/label&amp;gt;
    &amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for icon I have used font-awesome icons.&lt;br&gt;
when toggling it will show sun and moon with black background.&lt;br&gt;
&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*{
    box-sizing: border-box;
    margin: 0;
}
label{
    position: fixed;
    top: 50%;
    left: 50%;
    width: 80px;
    height: 35px;
    background: #7d68ee;
    transform: translate(-50%, -50%);
    border-radius: 25px;
    cursor: pointer;
}
label .fas{
    position: absolute;
    top: 50%;
    left: 10%;
    transform: translateY(-50%);
    transition: .5s;
    color: white;
}
label .fa-moon{
    opacity: 0;
}
input:checked ~ label .fas{
    left: 70%;
}
input:checked ~ label .fa-sun{
    opacity: 0;
}
input:checked ~ label .fa-moon{
    opacity: 1;
}
input{
    display: none;
}
main{
    background: #000;
    position: relative;
    z-index: -1;
    width: 100%;
    height: 100vh;
    transition: 1s;
    clip-path: polygon(80% 0, 100% 0, 100% 12%, 100% 20%, 98% 3%, 82% 0, 65% 0);

}
input:checked ~ main{
    clip-path: polygon(0 0, 100% 0, 100% 12%, 100% 100%, 0 100%, 0 89%, 0 38%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like my tutorial, don't forget to share your thought.&lt;br&gt;
Thanks.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>background</category>
      <category>animation</category>
    </item>
    <item>
      <title>Music player using python.</title>
      <author>MarianVelani</author>
      <pubDate>Tue, 04 May 2021 09:13:31 +0000</pubDate>
      <link>https://dev.to/marianvelani/music-player-using-python-373d</link>
      <guid>https://dev.to/marianvelani/music-player-using-python-373d</guid>
      <description>&lt;p&gt;In this Project, we will create a Music Player Application in Python.&lt;br&gt;
using Tkinter and Pygame module. where they can play their favorite songs. And we have to install this music player on our computer, based the Operating system &lt;br&gt;
    i.e Windows, Macintosh, Android, Linux, etc. Then we can listen to our favorite songs.&lt;/p&gt;

&lt;p&gt;Screenshot of actual music player python program output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eCC4UOqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9juggpy7951nm3bvfcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eCC4UOqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9juggpy7951nm3bvfcz.png" alt="How to make music player using python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/I5xbxzji7f4"&gt;https://youtu.be/I5xbxzji7f4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="http://compileto.blogspot.com/2021/05/music-player-application-using-tkinter.html"&gt;http://compileto.blogspot.com/2021/05/music-player-application-using-tkinter.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>50 topics and questions for front-end developer (react) interview in 2021
</title>
      <author>Stefan Ionel</author>
      <pubDate>Tue, 04 May 2021 09:09:40 +0000</pubDate>
      <link>https://dev.to/istef94/50-topics-and-questions-for-front-end-developer-react-interview-in-2021-jfl</link>
      <guid>https://dev.to/istef94/50-topics-and-questions-for-front-end-developer-react-interview-in-2021-jfl</guid>
      <description>&lt;p&gt;Hey guys,&lt;br&gt;
Below is a list of questions &amp;amp; topics that any front-end developer should know in 2021 interviews.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Context api vs Redux&lt;/li&gt;
&lt;li&gt;Explain how Redux works.&lt;/li&gt;
&lt;li&gt;What is CORS?&lt;/li&gt;
&lt;li&gt;Long polling vs Standard polling&lt;/li&gt;
&lt;li&gt;Indexed db (storage)&lt;/li&gt;
&lt;li&gt;Full duplex communication, Web sockets, Web socket handshake&lt;/li&gt;
&lt;li&gt;Can I access state in redux action?&lt;/li&gt;
&lt;li&gt;Class based vs functional components&lt;/li&gt;
&lt;li&gt;What are the advantages of functional components?&lt;/li&gt;
&lt;li&gt;Name a couple of hooks and what they are good for.&lt;/li&gt;
&lt;li&gt;Explain useCallback&lt;/li&gt;
&lt;li&gt;Lazy loading - explain and how to implement; name web pages as an example of lazy loading&lt;/li&gt;
&lt;li&gt;What are the tools you use while developing web app.&lt;/li&gt;
&lt;li&gt;Explain pagination, name web pages that uses pagination&lt;/li&gt;
&lt;li&gt;package.log explain (.log vs package..)&lt;/li&gt;
&lt;li&gt;Devdependencies vs dependencies&lt;/li&gt;
&lt;li&gt;Minification uglification, mapping (source maps)&lt;/li&gt;
&lt;li&gt;Monolith vs microservices&lt;/li&gt;
&lt;li&gt;Advantage of micro services and microfrontends&lt;/li&gt;
&lt;li&gt;Orchestration of micro services VS choreography of micro services&lt;/li&gt;
&lt;li&gt;Oauth 2.0&lt;/li&gt;
&lt;li&gt;Oauth (JSON webtoken)&lt;/li&gt;
&lt;li&gt;Distributed tracing (time and correlationId)&lt;/li&gt;
&lt;li&gt;How to customise 3rd party component?&lt;/li&gt;
&lt;li&gt;How to implement component will unmount in a functional component?&lt;/li&gt;
&lt;li&gt;What is an example for using component will unmount?&lt;/li&gt;
&lt;li&gt;How to handle errors in React?&lt;/li&gt;
&lt;li&gt;HOC (higher order component) - explain, how/why to use&lt;/li&gt;
&lt;li&gt;React DOM - explain, how/why to use&lt;/li&gt;
&lt;li&gt;Api interceptor/middleware - example&lt;/li&gt;
&lt;li&gt;How to achieve responsiveness.&lt;/li&gt;
&lt;li&gt;PWA - Progressive Web Application - explain&lt;/li&gt;
&lt;li&gt;What is the library you use for unit testing?&lt;/li&gt;
&lt;li&gt;How to troubleshoot web applications?&lt;/li&gt;
&lt;li&gt;If the story is not clear how do you approach that?&lt;/li&gt;
&lt;li&gt;How do you get familiar with a new code base?&lt;/li&gt;
&lt;li&gt;What is SPA, and why is it important/good?&lt;/li&gt;
&lt;li&gt;Difference between localstorage and cookie.&lt;/li&gt;
&lt;li&gt;Can you create ErrorBoundary as functional component?&lt;/li&gt;
&lt;li&gt;CSS variables&lt;/li&gt;
&lt;li&gt;CSS display style&lt;/li&gt;
&lt;li&gt;Responsive layout vs Adaptive layout (mobile)&lt;/li&gt;
&lt;li&gt;What is PropTypes?&lt;/li&gt;
&lt;li&gt;What is web pack?&lt;/li&gt;
&lt;li&gt;What to test by unit tests on react component&lt;/li&gt;
&lt;li&gt;What is render blocking code?&lt;/li&gt;
&lt;li&gt;How to mock functions calls while testing with jest?&lt;/li&gt;
&lt;li&gt;What is Prototype (in JS)?&lt;/li&gt;
&lt;li&gt;Three different ways to check that the object is undefined.&lt;/li&gt;
&lt;li&gt;How rest/spread operators works internally?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This list of questions was created with help of &lt;a href="https://www.globaltechnology.tech/"&gt;global technology&lt;/a&gt; platform.&lt;/p&gt;

&lt;p&gt;Say in a comment what question should be added for .net developer interviews.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
