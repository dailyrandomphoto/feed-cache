<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Peregrine Rewrite - The python-like language that's as fast as C</title>
      <author>Ethan Olchik</author>
      <pubDate>Sat, 09 Oct 2021 17:31:42 +0000</pubDate>
      <link>https://dev.to/ethanolchik/peregrine-rewrite-the-python-like-language-that-s-as-fast-as-c-1bfp</link>
      <guid>https://dev.to/ethanolchik/peregrine-rewrite-the-python-like-language-that-s-as-fast-as-c-1bfp</guid>
      <description>&lt;p&gt;Hey guys!&lt;br&gt;
My name is Ethan, and I'm one of 12 Peregrine developers. Some of you may already know what Peregrine is, some of you don't, but this article is going to explain the current state at where Peregrine is at.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-peregrine"&gt;
  &lt;/a&gt;
  What is Peregrine
&lt;/h2&gt;

&lt;p&gt;If you know Python, you know how easy it is. However, it also comes with a big downgrade. Python is slow, and I'm pretty sure every python developer knows this by now. This is kind of annoying. That's where Peregrine comes in. Me and 12 other friends have been working on Peregrine for the past few months, starting as a hobby project. Peregine's syntax is very similar to Python's, and it gets trans-compiled to C, thus making it as fast as C.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-on-peregrines-current-status"&gt;
  &lt;/a&gt;
  Update on Peregrine's current status
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#name"&gt;
  &lt;/a&gt;
  Name
&lt;/h3&gt;

&lt;p&gt;Peregrine's name has been getting more popular ever since I posted &lt;a href="https://dev.to/ethanolchik/the-swallow-programming-language-a-python-like-language-that-s-as-fast-as-c-43j7"&gt;my last article&lt;/a&gt;, and a lot of things has been changed. The most noticeable thing that has changed is the name. A lot of people recommended a name change from Swallow, so it is now called Peregrine which we think suits the language more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rewrite"&gt;
  &lt;/a&gt;
  Rewrite
&lt;/h3&gt;

&lt;p&gt;You probably already know this from the title - Peregrine is getting a rewrite. The Lexer is already complete. We are going to rebuild the parser and codegen so it will be more efficient, and hopefully faster. This is all being done on &lt;a href="https://github.com/peregrine-lang/Peregrine/tree/rewrite"&gt;a different branch&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#peregrine-as-a-scripting-language"&gt;
  &lt;/a&gt;
  Peregrine as a scripting language
&lt;/h3&gt;

&lt;p&gt;Peregrine uses &lt;a href="//bellard.org/tcc"&gt;tcc&lt;/a&gt; as a secondary backend to allow it to be used as a scripting language. It uses &lt;a href="https://github.com/peregrine-lang/Peregrine/blob/rewrite/Peregrine/vlibtcc/vlibtcc.v"&gt;vlibtcc&lt;/a&gt; which is a V wrapper for libtcc. It was implemented yesterday and is still at a very early stage. Some features do not work with it, so it is not recommended to use it at this stage, however it will be updated and fixed in the rewrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#q-is-peregrine-a-hobby-project"&gt;
  &lt;/a&gt;
  Q: Is Peregrine a hobby project?
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#a-as-of-9102021-peregrine-is-no-longer-a-hobby-project"&gt;
  &lt;/a&gt;
  A: As of 9/10/2021, Peregrine is no longer a hobby project.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#q-can-i-join-the-developer-team"&gt;
  &lt;/a&gt;
  Q: Can I join the developer team?
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#a-peregrine-is-not-in-need-of-new-developers-at-the-moment-however-you-can-always-contribute-to-the-repository"&gt;
  &lt;/a&gt;
  A: Peregrine is not in need of new Developers at the moment, however you can always contribute to the repository.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#q-is-there-a-discord-server"&gt;
  &lt;/a&gt;
  Q: Is there a discord server?
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#a-yes-you-can-join-it-by-clicking-here"&gt;
  &lt;/a&gt;
  A: Yes, you can join it by &lt;a href="https://discord.gg/J8yvySvCRx"&gt;clicking here&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#q-why-not-contribute-to-nim-or-julia"&gt;
  &lt;/a&gt;
  Q: Why not contribute to Nim or Julia?
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#a-peregrine-has-different-goals-than-nim-and-julia-they-also-achieve-different-things-in-different-ways"&gt;
  &lt;/a&gt;
  A: Peregrine has different goals than Nim and Julia. They also achieve different things in different ways.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#q-will-all-python-modules-be-compatible-with-peregrine"&gt;
  &lt;/a&gt;
  Q: Will all python modules be compatible with Peregrine?
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#a-yes-thats-the-plan-it-will-take-a-long-time-to-implement-as-it-is-a-difficult-task-however-it-will-be-there"&gt;
  &lt;/a&gt;
  A: Yes, that's the plan. It will take a long time to implement as it is a difficult task, however it will be there.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#got-any-more-questions-that-you-would-like-to-be-answered"&gt;
  &lt;/a&gt;
  Got any more questions that you would like to be answered?
&lt;/h2&gt;

&lt;p&gt;You can open a &lt;a href="https://github.com/peregrine-lang/Peregrine/discussions"&gt;new discussion&lt;/a&gt; that discusses your questions. You can also email &lt;a href="mailto:saptakbhoumik@gmail.com"&gt;saptakbhoumik@gmail.com&lt;/a&gt;, or &lt;a href="https://discord.gg/J8yvySvCRx"&gt;join our discord server&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Peregrine is planned to release version 0.0.1 sometime in March, so make sure to show some support by starring the &lt;a href="https://github.com/peregrine-lang/peregrine"&gt;repo&lt;/a&gt; and make sure to press on the "Watch" button so you don't miss any updates.&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any contributions, so if you find something that you can improve, open a pull-request! You can also check out our open issues. Please make sure you contribute to the &lt;a href="https://github.com/peregrine-lang/peregrine/tree/rewrite"&gt;rewrite branch&lt;/a&gt;, as we are going to replace the main branch with the rewrite.&lt;/p&gt;

&lt;p&gt;Thanks so much for reading &amp;lt;3!&lt;/p&gt;

</description>
      <category>c</category>
      <category>programming</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Like im 5:What is JQUERY???????</title>
      <author>Pandademic</author>
      <pubDate>Sat, 09 Oct 2021 16:59:36 +0000</pubDate>
      <link>https://dev.to/pandademic/like-im-5-what-is-jquery-5eji</link>
      <guid>https://dev.to/pandademic/like-im-5-what-is-jquery-5eji</guid>
      <description>&lt;p&gt;What is Jquery?&lt;/p&gt;

</description>
      <category>explainlikeimfive</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Tangled Web of ARIA</title>
      <author>Mark Steadman</author>
      <pubDate>Sat, 09 Oct 2021 16:45:15 +0000</pubDate>
      <link>https://dev.to/steady5063/a-tangled-web-of-aria-50nk</link>
      <guid>https://dev.to/steady5063/a-tangled-web-of-aria-50nk</guid>
      <description>&lt;p&gt;In this day and age of web development being done using mostly JavaScript frameworks, semantic HTML has been left behind. In its place we see more developers using ARIA (Accessible Rich Internet Applications) to fill in the gaps and make their content accessible. &lt;/p&gt;

&lt;p&gt;However, a scary trend that has been seen lately is that development teams have solely relied on ARIA for making content accessible. What is left is a giant mess of ARIA that is either incorrect, difficult to understand, or leaves developers wondering what they have to do to make it accessible again. &lt;/p&gt;

&lt;p&gt;In order to understand the tangled web of ARIA that is being seen in web development, we must first understand the first rule of ARIA. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-rule-of-aria"&gt;
  &lt;/a&gt;
  First Rule Of ARIA
&lt;/h2&gt;

&lt;p&gt;In the accessibility community there is a saying about ARIA. "The first rule of ARIA is don't use ARIA". Although blunt, and most times misunderstood, there is a lot of truth to this. But what does this truly mean?&lt;/p&gt;

&lt;p&gt;If there is a semantic HTML tag to use then you should first and foremost use that. Semantic HTML tags have all the built in accessibility you need, without any of the work of ARIA. It is clean, simple, and easy to use a semantic HTML tag versus having to add a lot of ARIA attributes to HTML tags such as &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But even with the battle cry of the first rule of ARIA, development teams continue to ignore the plea, and end up with a giant mess of ARIA based components. But how do they get to that point? Let's take a look by going through a web development scenario!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aria-first-development-approach"&gt;
  &lt;/a&gt;
  ARIA First Development Approach
&lt;/h2&gt;

&lt;p&gt;Let's say there is a development team that develops in React. The developers on the team house a library of components that the entire company uses every single day. &lt;/p&gt;

&lt;p&gt;The developers have been tasked with creating a simple product description component, that houses the title, photo of the product and add to cart button. The initial code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;imageContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stockImage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saberName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
          &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add to Cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how instead of using a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, the development team decided to use ARIA role of button and tabindex="0". Simple enough first time through. Now the development team has new requirements that require the product name to be a heading and to also add a list of item highlights underneath. They add in the changes like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;imageContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stockImage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listitem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descOne&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listitem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descTwo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listitem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descThree&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCart&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add to Cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start to see the markup get a little murky since a lot of ARIA attributes have been added to our HTML. Now let's add in a curveball to this scenario! &lt;/p&gt;

&lt;p&gt;Let's say two of the developers on the team leave to go to a new team, and two new developers are added. These two new developers have no real experience with accessibility and are tasked with updating this same component again.&lt;/p&gt;

&lt;p&gt;This time the update says we need to add CSS dots to the left of the list items, and then the add to cart button will now be a CSS image as well, instead of "Add to Cart" text. They make the changes like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;imageContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stockImage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listitem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descOne&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listitem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descTwo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listitem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descThree&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
           &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCart&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component has been updated, and is in its final state. Hurray right?! Well, maybe not. Let's take a look at what happened during this story. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#untangling-the-web-of-aria"&gt;
  &lt;/a&gt;
  Untangling The Web Of ARIA
&lt;/h2&gt;

&lt;p&gt;The above story is one seen far too often. Development teams don't know true semantic HTML, and instead search for accessibility solutions to not using proper HTML. What we end up with is a complete mess of a component that actually ends up with more accessibility issues than when we started. &lt;/p&gt;

&lt;p&gt;The new developers who made the final changes were not aware that by adding a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; for a dot actually broke semantics for lists. They also did not realize by removing text from the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and using CSS image instead, removed the semantic text for the button as well. If this component would have used semantic HTML from the beginning, these problems are not as common. &lt;/p&gt;

&lt;p&gt;If that component could have been completed with semantic HTML it would look this this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;imageContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stockImage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageSrc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ol&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descOne&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descTwo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descThree&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ol&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCart&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See how much cleaner and simpler the HTML code looks now! The best part is, all of the accessibility for the list, button and heading are now baked into the semantic HTML tags. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-with-aria-first-development"&gt;
  &lt;/a&gt;
  Problem With ARIA First Development
&lt;/h2&gt;

&lt;p&gt;There are many problems with using an ARIA first mindset in the web development process but these remain the top ones: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML code is murky and can be very difficult to understand&lt;/li&gt;
&lt;li&gt;It is not as maintainable as using semantic HTML&lt;/li&gt;
&lt;li&gt;Run the risk of adding MORE accessibility issues by accident&lt;/li&gt;
&lt;li&gt;It can override native semantics&lt;/li&gt;
&lt;li&gt;Some ARIA attributes are not fully supported by all assistive technologies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h2&gt;

&lt;p&gt;Too often development teams now turn their heads at learning semantic HTML because they believe it is at the bottom of totem pole of knowledge. That could not be farther from the truth. The story told in this article is one seen far too often and simply could be avoided with a semantic HTML first mindset. &lt;/p&gt;

&lt;p&gt;I am a web developer at heart, and I know there are scenarios where ARIA is needed in order to make content accessible. If you choose to use ARIA, just make sure you are following proper ARIA practices. And for those scenarios that don't require ARIA, don't use it and you can avoid a tangled web of ARIA in your daily development. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>a11y</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>How to merge objects in JavaScript?</title>
      <author>Amer Sikira</author>
      <pubDate>Sat, 09 Oct 2021 16:27:43 +0000</pubDate>
      <link>https://dev.to/amersikira/how-to-merge-objects-in-javascript-5704</link>
      <guid>https://dev.to/amersikira/how-to-merge-objects-in-javascript-5704</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://webinuse.com/how-to-merge-objects-in-javascript/"&gt;webinuse.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the third article in the series. We already wrote &lt;a href="https://webinuse.com/object-manipulation-in-javascript/"&gt;Object manipulation in JavaScript&lt;/a&gt; and &lt;a href="https://webinuse.com/how-to-check-if-javascript-object-is-empty/"&gt;How to check if a JavaScript object is empty&lt;/a&gt;? Often, when working with data we need to do some manipulation. Today we are going to learn how to merge objects in JavaScript, using built-in functions.&lt;/p&gt;

&lt;p&gt;We can merge objects in JavaScript by using some of the following methods:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Spread operator (&lt;code&gt;...&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt; Using built-in method &lt;code&gt;Object.assign()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Using some of the JS libraries like &lt;a href="https://www.npmjs.com/package/lodash.merge"&gt;Loadash&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#merge-objects-using-spread-operator"&gt;
  &lt;/a&gt;
  Merge objects using spread operator
&lt;/h3&gt;

&lt;p&gt;ES6 introduced a Spread operator (&lt;code&gt;...&lt;/code&gt;) which is excellent for merging two or more objects into one. Spread operator (&lt;code&gt;...&lt;/code&gt;) creates a new object with properties of the merged objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;vlet&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Baker Street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Result: &lt;/span&gt;
&lt;span class="cm"&gt;/*
{
   name: 'John', 
   surname: 'Doe', 
   age: 30, city: 'London', 
   street: 'Baker Street', 
   number: 225
} */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above we have merged two objects user and address into info. As we can see it is successfully merged.&lt;/p&gt;

&lt;p&gt;But there is a catch. If there are two same properties in different objects then the property from the most right objects rewrites every property that came before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dallas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Baker Street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Result: &lt;/span&gt;

&lt;span class="cm"&gt;/**
 {
        name: "John", 
        surname: "Doe",
        age: 30,
        city: "London",
        street: "Baker Street",
        number: 225
 }

 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see in the example &lt;code&gt;user&lt;/code&gt; object had property &lt;code&gt;city&lt;/code&gt; with the value of “Dallas”. When we merged &lt;code&gt;user&lt;/code&gt; with &lt;code&gt;address&lt;/code&gt;, property &lt;code&gt;city&lt;/code&gt; from &lt;code&gt;address&lt;/code&gt; overwrote previous value of “Dallas” with “London”.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merge-using-objectassign"&gt;
  &lt;/a&gt;
  Merge using Object.assign()
&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;MDN&lt;/a&gt;: &lt;code&gt;The Object.assign()&lt;/code&gt; method copies all enumerable own properties from one or more source objects to a target object. It returns the modified target object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript Tutorial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;category_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;category_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tutorials&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Result: &lt;/span&gt;

&lt;span class="cm"&gt;/*
    {
        id: 123,
        name: "JavaScript Tutorial",
        price: 500,
        author: "John Doe",
        category_id: 1,
        category_name: "Tutorials"
    }

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, Same as with spread operator (&lt;code&gt;...&lt;/code&gt;), &lt;code&gt;Object.assign()&lt;/code&gt; properties are overwritten from left to right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dallas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Baker Street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Result: &lt;/span&gt;

&lt;span class="cm"&gt;/**
 {
        name: "John", 
        surname: "Doe",
        age: 30,
        city: "London",
        street: "Baker Street",
        number: 225
 }

 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#merge-objects-using-loadash"&gt;
  &lt;/a&gt;
  Merge objects using Loadash
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://lodash.com/"&gt;Loadash&lt;/a&gt; is a modern JavaScript utility library delivering modularity, performance &amp;amp; extras. This method recursively merges the own and inherited enumerable string keyed properties of source objects into the destination object. It performs deep merge by recursively merging object properties and arrays. For more information visit &lt;a href="https://lodash.com/docs/4.17.15#merge"&gt;Loadash _.merge documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or anything you can find me on my &lt;a href="https://twitter.com/AmerSikira"&gt;Twitter&lt;/a&gt;, or you can read some of my other articles like &lt;a href="https://webinuse.com/object-manipulation-in-javascript/"&gt;Object manipulation in JavaScript?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Analog Clock using HTML, CSS, and Javascript</title>
      <author>Divyamcm</author>
      <pubDate>Sat, 09 Oct 2021 15:14:55 +0000</pubDate>
      <link>https://dev.to/divyamcm/analog-clock-using-html-css-and-javascript-53j</link>
      <guid>https://dev.to/divyamcm/analog-clock-using-html-css-and-javascript-53j</guid>
      <description>&lt;p&gt;============================================&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJ7wO_58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/img_1_eqzafk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJ7wO_58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/img_1_eqzafk.jpg" alt=""&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@lucian_alexe?utm_source=medium&amp;amp;utm_medium=referral"&gt;Lucian Alexe&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dear Reader,&lt;/p&gt;

&lt;p&gt;Let’s start learning some cool CSS tricks and a bit of Javascript by building an analog clock using HTML, CSS, and Javascript. Trust me! This will be the best exercise for beginners in CSS and javascript.&lt;/p&gt;

&lt;p&gt;First, let me show you a demo before starting the implementation&lt;/p&gt;

&lt;p&gt;Analog clock demo&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=ZTUNW9nnAaQ"&gt;https://www.youtube.com/watch?v=ZTUNW9nnAaQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Folder Structure of the project&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;em&gt;index.html — contains the HTML layout which defines the element structure that would be shown on the page.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;images folder — contains .jpg images used in our project.&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#html-layout"&gt;
  &lt;/a&gt;
  HTML Layout
&lt;/h1&gt;

&lt;p&gt;Open VSCode and create the basic HTML structure in an &lt;strong&gt;index.html&lt;/strong&gt; file by ! and then pressing tab. Give the &lt;strong&gt;title&lt;/strong&gt; as ‘Analog Clock*&lt;em&gt;’&lt;/em&gt;*.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;title&amp;gt;Analog Clock&amp;lt;/title&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Inside the body, add  the &lt;strong&gt;div&lt;/strong&gt; element with the class &lt;strong&gt;clock&lt;/strong&gt; which represents the outline of the clock, and add three &lt;strong&gt;div&lt;/strong&gt; elements that represent the hands of the clock inside the &lt;strong&gt;clock&lt;/strong&gt; class. Oh wow! we are done with HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XaMU6SU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/html_vdyem1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XaMU6SU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/html_vdyem1.png" alt=""&gt;&lt;/a&gt;index.html&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#css-styling"&gt;
  &lt;/a&gt;
  CSS Styling
&lt;/h1&gt;

&lt;p&gt;CSS is used to style the different portions and make them more visually appealing. First of all, give the background color or background image of the page in the CSS code with size and alignment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIVVHZI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/CSS_1_av31nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIVVHZI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/CSS_1_av31nt.png" alt=""&gt;&lt;/a&gt;index.html&lt;/p&gt;

&lt;p&gt;The outline of the clock is circular in shape so let’s set &lt;strong&gt;border-radius&lt;/strong&gt; to 50%. You can experiment on border width and border color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoI4rgwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791814/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/result_1_uy5yh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoI4rgwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791814/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/result_1_uy5yh7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.clock {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;width: 30rem;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;height: 30rem;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border: 20px solid #fec1b8;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-radius: 50%;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;margin: 50px auto;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;position: relative;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;padding: 2rem;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;box-shadow:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0 0 0 4px rgba(0,0,0,0.1),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;inset 0 0 0 3px #f8a09b,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;inset 0 0 10px black,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0 0 10px rgba(0,0,0,0.2);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s implement the clock hands CSS part. The idea is that we’re going to apply a rotation to each of the hands depending on what time it currently is. I am setting the width, height  to place hands in proper positions inside the clock.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;transform-origin: 100%&lt;/code&gt; will help to rotate the clock hand on the very right-hand side, by default it’s 50%. 100% along the x-axis will put that pivot point on the very right-hand side so, that the right edge of the clock hand will be fixed to the center of the clock.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;transform: rotate(90deg);&lt;/code&gt;&lt;strong&gt;divs&lt;/strong&gt; are block and they’re left to right, it’s not actually starting at 12:00. So, we could just rotate the entire thing by 90 degrees.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);&lt;/code&gt; It gives you this tick kind of animation. It goes forward and back, forward and back.&lt;/p&gt;

&lt;p&gt;For individual hands add different widths and heights just to differentiate between them. That’s all with the CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LVxK2zWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/CSS_2_aurvwm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVxK2zWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/CSS_2_aurvwm.png" alt=""&gt;&lt;/a&gt;index.html&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-logic"&gt;
  &lt;/a&gt;
  Javascript logic
&lt;/h1&gt;

&lt;p&gt;The logic of the player is defined inside the &lt;strong&gt;script&lt;/strong&gt; tag.We are going to grab the reference for the following using &lt;code&gt;querySelector().&lt;/code&gt;&lt;br&gt;&lt;br&gt;
.second-hand&lt;br&gt;&lt;br&gt;
.min-hand&lt;br&gt;&lt;br&gt;
.hour-hand&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new Date()&lt;/code&gt; creates an instance of the Date class from which we can get current date, hours, minutes, seconds, etc.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const now = new Date();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have stored in &lt;code&gt;'secondsDegrees'&lt;/code&gt; how the second hand will rotate.Then I use &lt;code&gt;rotate(${secondsDegrees}deg)&lt;/code&gt; to rotate the hand.I divided by 60 because 1 minute is equal to 60 seconds.I multiplied by 360 because a circle is formed by 360 degrees.&lt;/p&gt;

&lt;p&gt;Similarly, I have stored in &lt;code&gt;'minsDegrees'&lt;/code&gt; how to turn the hand of the minute.Then use&lt;code&gt;rotate(${minsDegrees}deg)&lt;/code&gt; to rotate the hand. I divided by 60 because 1 hour is equal to 60 minutes.Added second hand position with minutes. Because the minute's hand is in the right place depending on the second.&lt;/p&gt;

&lt;p&gt;Implemented similar logic on hour hand as well.&lt;/p&gt;

&lt;p&gt;We need to call this &lt;code&gt;rotate()&lt;/code&gt; function every 1 second (&lt;code&gt;1000 milliseconds&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kXvmwJ4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/Javascript_bz1ud0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXvmwJ4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633791813/JavaScript/MEDIUM%2520BLOG%25203_analog%2520clock/Javascript_bz1ud0.png" alt=""&gt;&lt;/a&gt;index.html&lt;/p&gt;

&lt;p&gt;That’s all folks !!&lt;/p&gt;

&lt;p&gt;Find the complete source code &lt;a href="https://github.com/Divyamcm/Projects/tree/main/Analog%20Clock"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for your interest.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Going doorless</title>
      <author>Rosano</author>
      <pubDate>Sat, 09 Oct 2021 15:09:06 +0000</pubDate>
      <link>https://dev.to/rosano/going-doorless-4652</link>
      <guid>https://dev.to/rosano/going-doorless-4652</guid>
      <description>&lt;p&gt;In today's web, we are accustomed to gratuitously sharing articles, videos, podcasts, and other content. By default, most of it is available for free and posted to privately-owned spaces like social media platforms. Most of it is public, for anyone to consume, and some of it is even public domain, for anyone to use. This culture exists because we recognize the value of &lt;a href="https://www.niemanlab.org/2019/01/unlocking-the-commons"&gt;unlocking the commons&lt;/a&gt; by maximizing the number of people who can access and benefit from what we share: the more the merrier.&lt;/p&gt;

&lt;p&gt;Apps proliferate differently. We share a 'link' that someone can use to 'install' and then 'run' the app, assuming it's 'compatible' with their system. Some apps must be purchased in order to be used; one hopes they offer a way to understand what you're buying via a trial or screencasts. Some apps require you to create an account to get started; one hopes they can be trusted with your data. With native apps, sometimes a link points directly to specific content inside the app, but an unlucky recipient might still find themselves figuring out where to go in order to find what was actually shared. What if instead of these complex steps, apps behaved more like the content we already share? What if they were as simple to pass around as articles, videos, or animated GIFs?&lt;/p&gt;

&lt;p&gt;Imagine an app that behaves more like a park: a non-exclusionary public space where you can sit anywhere, have a picnic if you like, hang out with your friends, come and go as you please, see how you feel at your own pace—there is no survey to fill. There aren't really doors or walls, and anyone is welcome. This kind of '&lt;a href="https://ring.0data.app/"&gt;doorless&lt;/a&gt;' app allows you to 'show up and start using it'. It has no 'app store', in the same way there is no 'article store' or 'podcast store'. You can send it in a way that the recipient sees what you shared, and then they can interact directly without other steps—as shareable as the other content we send to one another.&lt;/p&gt;

&lt;p&gt;There are several technical affordances to this at the moment. &lt;a href="https://www.inkandswitch.com/local-first.html"&gt;Local-first&lt;/a&gt; or edge apps enable the whole experience to take place in the security of one's own device and can continue offline without internet connection. &lt;a href="https://0data.app/"&gt;Zero Data&lt;/a&gt; protocols like &lt;a href="https://remotestorage.io/"&gt;remoteStorage&lt;/a&gt;, &lt;a href="https://fission.codes/"&gt;Fission&lt;/a&gt;, and &lt;a href="https://solidproject.org/"&gt;Solid&lt;/a&gt;obviate the need to create accounts (because people bring their own data storage) and also enable apps as swappable lenses—"software is the principles of an experience" (as Steve Jobs might have said) and your data becomes the details. Sharing content via &lt;a href="https://en.wikipedia.org/wiki/URI_fragment"&gt;URI fragment&lt;/a&gt; stores data in the link itself so that no 3rd-party server is necessary to hold the data (for example, &lt;a href="https://go.rosano.ca/joybox-sample-playlist"&gt;a multi-platform music playlist&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;These design decisions go beyond technology to encourage free exploration in new spaces. This approach fosters values like privacy, autonomy, resilience, device-independence, open protocols, owning your data, sovereign identity, data accessible beyond an app's lifetime, multiple apps for any data (i.e. &lt;a href="https://www.geoffreylitt.com/2021/03/05/bring-your-own-client.html"&gt;Bring Your Own Client&lt;/a&gt;), scalability, etc…&lt;/p&gt;

&lt;p&gt;The people who maintain these spaces become stewards of something that resembles a public utility—omnipresent resources available to all—and if it can be thought of as such, how can we ensure its longevity? Direct funding via supporters is one method, popularized by platforms like Kickstarter, Patreon, Open Collective, and others: projects can offer features or perks based on what people contribute. Metering or usage-based pricing can be 'fair' in some scenarios and inclusive of countries whose currency tends to price them out of 'western' economies. Stronger sustainability however, probably requires a culture shift. Can we popularize supporting makers to the extent that it's as common as an electricity bill (perhaps in the direction of the &lt;a href="https://webmonetization.org/"&gt;Web Monetization&lt;/a&gt; standard)? And the financial aspect is only part of the picture. Can we make the production of these spaces more participative? How can we normalize building together, getting more stakeholders involved, cultivating community, making things easier to understand, and documenting as much as possible?&lt;/p&gt;

&lt;p&gt;Considering that the circumstances of our time leave much to be desired from leaders and institutions, it's important to think about the role technology plays in making our world a better place. Technology will not save us, but it's a useful vector to affect societal issues as long as it remains intertwined in all aspects of life. Not only are doorless apps magical to use—who among us likes bureaucracy?—but they serve as an antidote to account-itis (and its resulting data collection overkill), while encouraging a culture of housing everything in the commons. Zero Data empowers publishing from sovereign spaces, enlarges the pie for developers by pooling together userbases, and builds an ecosystem of apps that can work together without needing a trusted entity to coordinate everything. Direct funding or patronage reduces financial intermediaries and creates dialogue between makers and the communities they serve. Releasing projects as open-source enables anyone to inspect, understand, or contribute. All these dimensions might be merely 'technological' but they increase freedom and empowerment for more people.&lt;/p&gt;

&lt;p&gt;Doorless apps and Zero Data are somewhat old ideas, but revitalized by new protocols to promote public spaces where people can move freely. Experiences don't need to be trapped behind 'installation processes' and data does not need to be held hostage by an app or its developer: bring your client, bring your data, and have it your way. Apps can become part of the commons where we find most Internet content, especially if we fund it as a public resource and provide opportunities for more people to participate. All this is possible today and you can help realize this vision of the world: just share.&lt;/p&gt;




&lt;p&gt;Image attribution: &lt;a href="https://unsplash.com/photos/SBiVq9eWEtQ"&gt;photo of empty park during daytime&lt;/a&gt; by Mike Benna.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>mobile</category>
      <category>pwa</category>
      <category>webdev</category>
    </item>
    <item>
      <title>YouTube Music API</title>
      <author>Sijey</author>
      <pubDate>Sat, 09 Oct 2021 15:01:15 +0000</pubDate>
      <link>https://dev.to/sijeypraveen/youtube-music-api-ecj</link>
      <guid>https://dev.to/sijeypraveen/youtube-music-api-ecj</guid>
      <description>&lt;p&gt;An unofficial YouTube Music API For Python Programming Language.&lt;br&gt;
A Python library which Quickly gather the metadata of a Song, Playlist, Artist existing on YouTube or YouTube Music.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pip install YouTubeMusicAPI&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This library can be installed by the pip command, open your command prompt and type in the following command...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;No Credential details required.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-get-usage"&gt;
  &lt;/a&gt;
  Basic GET usage:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;YouTubeMusicAPI&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTubeMusicAPI&lt;/span&gt;

&lt;span class="n"&gt;artist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTubeMusicAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"marshmello"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# output of this program
&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'artist'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Marshmello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'artist_url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://music.youtube.com/channel/6yIPyTp...'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'artist_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'UCEdvpU2pFRCVqU6yIPyTpMQ'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'artist_image'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://yt3.ggpht.com/3kmvsf3NN...'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;YouTubeMusicAPI&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTubeMusicAPI&lt;/span&gt;

&lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTubeMusicAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"marshmello"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# output of this program
&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'track_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Marshmello Live at Lollapalooza 2021 ...'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'datePublished'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'2021-08-04'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'track_Id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'8eXFvzMEldk'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'track_url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://music.youtube.com/watch?v=8eXFvzMEldk'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'track_image'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://i.ytimg.com/vi/8eXFvzMEldk/hqdef...'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;YouTubeMusicAPI&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTubeMusicAPI&lt;/span&gt;

&lt;span class="n"&gt;playlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTubeMusicAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"marshmello"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# output of this program
&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'playlist_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Marshmallow Playlist'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'playlist_url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://music.youtube.com/playlist...'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'playlist_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'PL4FB1JvhTLrGNSL4odYt72EqjDPJfjSdp'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like this Package you can support me by giving a star ⭐ on &lt;br&gt;
the GitHub Repository. 👍&lt;/p&gt;

&lt;p&gt;Source Code : &lt;a href="https://github.com/Sijey-Praveen/YouTube-Music-API"&gt;https://github.com/Sijey-Praveen/YouTube-Music-API&lt;/a&gt;&lt;br&gt;
PyPi : &lt;a href="https://pypi.org/project/YouTubeMusicAPI/"&gt;https://pypi.org/project/YouTubeMusicAPI/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Science, Strategy and War: The Strategic Theory of John Boyd by Frans Osinga</title>
      <author>Sandor Dargo</author>
      <pubDate>Sat, 09 Oct 2021 14:56:09 +0000</pubDate>
      <link>https://dev.to/sandordargo/science-strategy-and-war-the-strategic-theory-of-john-boyd-by-frans-osinga-4m68</link>
      <guid>https://dev.to/sandordargo/science-strategy-and-war-the-strategic-theory-of-john-boyd-by-frans-osinga-4m68</guid>
      <description>&lt;p&gt;If you are a regular reader of my blog, you probably remember that I started to study Boyd's thoughts a couple of months ago. It all started with a book recommendation from Ryan Holiday about &lt;a href="https://devreads.sandordargo.com/boyd-by-robert-coram/"&gt;Boyd: The Fighter Pilot Who Changed the Art of War&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since then I posted about &lt;a href="https://www.sandordargo.com/blog/2021/08/25/ooda_loop_decision_making"&gt;the OODA loop&lt;/a&gt;, &lt;a href="https://www.sandordargo.com/blog/2021/08/11/the-four-german-words"&gt;the main concepts behind the blitzkrieg&lt;/a&gt;, and now I continue this series with a book review.&lt;/p&gt;

&lt;p&gt;While &lt;a href="https://devreads.sandordargo.com/boyd-by-robert-coram/"&gt;Boyd: The Fighter Pilot Who Changed the Art of War&lt;/a&gt; is a biography, a book that you can read simply to enjoy yourself, &lt;a href="https://www.amazon.com/gp/product/0415459524/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0415459524&amp;amp;linkId=30e5dcfca6ec8a448118123be8ea4705"&gt;this one&lt;/a&gt; is different. Read this book, if you found Boyd's ideas interesting; if you are interested in history and war. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/gp/product/0415459524/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0415459524&amp;amp;linkId=30e5dcfca6ec8a448118123be8ea4705"&gt;Science, Strategy and War&lt;/a&gt; was started at the School of Advanced Airpower Studies and not surprisingly it discusses mostly the military aspects of Boyd's thoughts through his presentations, his &lt;em&gt;discourse&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#four-reasons-to-study-boyd"&gt;
  &lt;/a&gt;
  Four reasons to study Boyd
&lt;/h2&gt;

&lt;p&gt;Osinga shares four sound reasons to study the ideas of Boyd.&lt;/p&gt;

&lt;p&gt;First, his ideas are important. He's one of the most important strategists of the 20th century. The OODA loop not only gave help for fighters, but it also impacted Scrum as &lt;a href="https://devreads.sandordargo.com/scrum-by-jeff-sutherland/"&gt;Jeff Sutherland explained&lt;/a&gt;. His ideas also changed how fighters are designed, how the Desert Storm was fought.&lt;/p&gt;

&lt;p&gt;Second, his ideas are influential. Beyond the previously mentioned areas, Boyd's ideas defined Marine doctrines, had effects on the US Army, on the UK military, even if his name was often left out as he was not the most agreeable person.&lt;/p&gt;

&lt;p&gt;Third, they are not properly and widely understood. Many people - out of those who know him - identifies him with a simplistic version of the OODA loop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6aUX-bP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7g4hl5tmfwcmzwyws9xu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6aUX-bP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7g4hl5tmfwcmzwyws9xu.png" alt="Simplistic OODA Loop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not even this more elaborate one. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ck33aDc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8byxj35ozddxu9ow3kf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ck33aDc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8byxj35ozddxu9ow3kf.png" alt="OODA loop by John Boyd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But as we already saw, his ideas go deeper than the OODA loop. He dealt a lot with the general theories behind conflicts, but even about how humans think and come up with new creative thoughts.&lt;/p&gt;

&lt;p&gt;Fourth, there are not so many publications dealing with ideas yet. It's not a big surprise. Boyd didn't publish anything apart from &lt;a href="https://www.johnljerz.com/superduper/tlxdownloadsiteMAIN/id354.html"&gt;Destruction and Creation&lt;/a&gt;. As his presentations were delivered within the different military institutions, there are not many high-quality recordings available. Unlike other strategists, he didn't leave behind coherent manuscripts, books. Studying Boyd is not easy, but can be rewarding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;"novelty"&lt;/em&gt; Boyd brought to the Pentagon was military history. It was Boyd who introduced &lt;a href="https://en.wikipedia.org/wiki/Sun_Tzu"&gt;Sun Tzu&lt;/a&gt; the author of &lt;a href="http://classics.mit.edu/Tzu/artwar.html"&gt;The Art of War&lt;/a&gt; to many generals in the Pentagon.&lt;/p&gt;

&lt;p&gt;Many officers knew more about how a business works, about project management than military strategy and the works of the greatest strategists.&lt;/p&gt;

&lt;p&gt;It's both surprising and frightening at the same time. When Boyd started to study why the Blitzkrieg was so successful - until a certain point - he started with examing the work of the strategists who defined the doctrines of the Blitzkrieg and then he moved further and further back in time. He understood that strategies are not standing on their own, but they are the results of earlier ideas combined with experience. &lt;/p&gt;

&lt;p&gt;They are, in fact, counterstrategies. So he studied Clausewitz, Napoleon, and continued with ever earlier thinkers until he ended up with Sun Tzu.&lt;/p&gt;

&lt;p&gt;He studied an enormous number of books. While he was in Vietnam he either worked or studied. He incorporated all that he learnt into his briefings. His lists of references were huge.&lt;/p&gt;

&lt;p&gt;This has an important message also for us, software engineers. Though our history is much shorter - still longer than many would think -, it's important to know it.&lt;/p&gt;

&lt;p&gt;It becomes easier to understand how certain things work and why they were designed like that. If you want to learn about the history of computer sciences, I recommend you to read &lt;a href="https://devreads.sandordargo.com/code-the-hidden-language/"&gt;Code: The Hidden Language of Computer Hardware and Software by Charles Petzold&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strategy-as-a-mode-of-behaviour"&gt;
  &lt;/a&gt;
  Strategy as a mode of behaviour
&lt;/h2&gt;

&lt;p&gt;At the beginning of his fighter pilot career, Boyd dealt with fighter tactics. Later he became a strategist thinking about the highest levels.&lt;/p&gt;

&lt;p&gt;For him the highest level was the &lt;em&gt;national goal&lt;/em&gt;, which is relatively simple with clear intentions: &lt;em&gt;"Improve fitness, as an organic whole, to shape and cope with an ever changing environment."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A bit more refined level is the &lt;em&gt;grand strategy&lt;/em&gt; which is the pursuit of the national goal. It's not only about amplifying a nation's spirit and strength but also about undermining and isolating the adversaries and influence uncommitted actors and potential adversaries so that they are drawn towards one's philosophy and empathetic towards one's success.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;strategic aim&lt;/em&gt; is twofold. On the one hand, one has to improve its capacity and adapt to the environment and on the other hand, one has to diminish its adversary's capacities.&lt;/p&gt;

&lt;p&gt;Then the &lt;em&gt;strategy&lt;/em&gt; is about how to bring down the adversaries' moral-mental-physical wellbeing. How to demoralize them, how to disrupt their operations and overload their systems.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Grand tactics&lt;/em&gt; is about operating inside the adversary's OODA loops, in order to make their world full of uncertainty, confusion and chaos. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tactics&lt;/em&gt; is also about OODA loops, we have to be quicker and more inconspicuous than the adversary to keep and gain the initiative and explore and exploit the vulnerabilities and weaknesses of the adversary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chance-matters"&gt;
  &lt;/a&gt;
  Chance matters
&lt;/h2&gt;

&lt;p&gt;The self-help movement often talks about how things are mainly not about chance. Chance finds people who are actively looking for it.&lt;/p&gt;

&lt;p&gt;While it is true, we shall not forget that chance has also a random element. Maybe only pseudo-random, but it's still random.&lt;/p&gt;

&lt;p&gt;When &lt;a href="https://www.sandordargo.com/blog/2021/08/25/ooda_loop_decision_making"&gt;we discussed the OODA loop&lt;/a&gt;, we mentioned Boyd's claim that we should not worry too much about a decision as it cannot be perfect anyway.&lt;/p&gt;

&lt;p&gt;We cannot know all the details, we are not aware of everything, therefore there is some uncertainty, unpredictability in war, in business, in everything. Chance is not negligible and in fact, it's a problem that has to be managed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you are looking for a deeper understanding of Boyd, if you are interested in war, strategy read &lt;a href="https://www.amazon.com/gp/product/0415459524/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0415459524&amp;amp;linkId=30e5dcfca6ec8a448118123be8ea4705"&gt;Science, Strategy and War&lt;/a&gt;! You'll not regret it! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>books</category>
      <category>watercooler</category>
      <category>history</category>
      <category>management</category>
    </item>
    <item>
      <title>I got my first freelance job to build a site and I don’t know how to write up a proposal/contract</title>
      <author>Sonam Shukla</author>
      <pubDate>Sat, 09 Oct 2021 14:54:42 +0000</pubDate>
      <link>https://dev.to/sonam_shukla_707cc1e27f23/i-got-my-first-freelance-job-to-build-a-site-and-i-don-t-know-how-to-write-up-a-proposal-contract-1m1j</link>
      <guid>https://dev.to/sonam_shukla_707cc1e27f23/i-got-my-first-freelance-job-to-build-a-site-and-i-don-t-know-how-to-write-up-a-proposal-contract-1m1j</guid>
      <description>&lt;p&gt;This will be my first worthwhile freelance job as opposed to sites I’ve built for friends and family for basically free. I was recommended by a family member to this person and they want me to start building a site for them. I had a brief conversation/discovery with them and I estimate it’ll take me a total of 20-30 hours to build the site. He’s already agreed to pay me $2500 for 20 hours of work, but I want to make sure that I handle this as professionally as I can, set expectations for both of us, and not get burned in the end.&lt;/p&gt;

&lt;p&gt;I have a few questions on how I should go about this. No single person has to answer all the questions, but please feel free to share how you go about this.&lt;/p&gt;

&lt;p&gt;What do you do if you go over the estimated hours, and how do you have that conversation with your clients before hand? Basically, how would I write this in my proposal/contract?&lt;/p&gt;

&lt;p&gt;So for 20 hours of work for $2500, that is $125/hr. Should I charge a flat rate, or charge hourly, incase I do end up going over?&lt;/p&gt;

&lt;p&gt;To prevent endless revisions, and a complete rebuild based on a clients changes&lt;a href="https://developer.apple.com/forums/thread/691948"&gt;,&lt;/a&gt; do you limit the amount of major revisions in your contract?&lt;/p&gt;

&lt;p&gt;This job may include editing numerous photos in Photoshop, which would eat away at the estimated time. Does anyone charge for development and photo editing separately?&lt;/p&gt;

&lt;p&gt;Also, if anyone is comfortable with sharing a contract of their own, I would be very grateful.&lt;/p&gt;

&lt;p&gt;Thank you everyone for any help!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Difference between Dialogflow CX vs Dialogflow ES</title>
      <author>Dhruv Rajkotia</author>
      <pubDate>Sat, 09 Oct 2021 14:37:16 +0000</pubDate>
      <link>https://dev.to/dhruv_rajkotia/difference-between-dialogflow-cx-vs-dialogflow-es-3n1k</link>
      <guid>https://dev.to/dhruv_rajkotia/difference-between-dialogflow-cx-vs-dialogflow-es-3n1k</guid>
      <description>&lt;p&gt;Google Dialogflow has introduced Dialogflow CX in December 2020. It is a powerful tool to build virtual agents. So Now Dialogflow has 2 versions one is Dialogflow ES(Older Version) and New is Dialogflow CX. So Now we have basic question arises what is a difference between Dialogflow versions(CX vs ES).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dialogflow ES&lt;/strong&gt; supported a flat structure of intents and implicit controls for conversation flows, mainly using contexts. This approach didn't scale well for building, understanding, and maintaining large agents with complex conversation flows. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dialogflow CX&lt;/strong&gt; addresses these issues by providing conversation flow controls in a more explicit and structured way. CX follows graphical structure which allows designing of complex conversation flows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notable-features-of-dialogflow-cx"&gt;
  &lt;/a&gt;
  Notable Features of Dialogflow CX
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#visual-flow-builder"&gt;
  &lt;/a&gt;
  Visual Flow Builder
&lt;/h4&gt;

&lt;p&gt;A new visual builder makes building and maintaining agents easier. Conversation paths are graphed as a state machine model, which makes conversations easier to design, enhance, and maintain. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WNaQJVPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdm62ylw4zd5we4ee2ot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WNaQJVPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdm62ylw4zd5we4ee2ot.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Console overview: &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/console"&gt;https://cloud.google.com/dialogflow/cx/docs/concept/console&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reusable-intents"&gt;
  &lt;/a&gt;
  Reusable Intents
&lt;/h4&gt;

&lt;p&gt;One of the main features of the CX is the Reusable Intents. Fulfillment is decoupled from intents, making intents a truly reusable component for multiple different conversational flows.&lt;/p&gt;

&lt;p&gt;In Dialogflow ES intent is tightly coupled with the fulfillment so it's too difficult to reuse it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#separate-flows-for-easier-collaboration-on-agents"&gt;
  &lt;/a&gt;
  Separate Flows for Easier Collaboration On Agents
&lt;/h4&gt;

&lt;p&gt;Separate flows let multiple teams work simultaneously. With Flows, you can partition your agent into smaller conversation topics. Different team members can work on different flows, which make Virtual Agent development very easy for the more complex conversation flow. Also It has versioning support at the flow level so you can run multiple versions based on your environments. In short, It allows modularization of bot for ease of management.&lt;/p&gt;

&lt;p&gt;For example, If you are creating an Agent for the Restaurants booking then it may create flows like order confirmation, order booking, Get Customer Details etc. So Here you can give the individual flows to different teams and speed up the development of the virtual agent. &lt;/p&gt;

&lt;p&gt;For more information regarding Flows: &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/console"&gt;https://cloud.google.com/dialogflow/cx/docs/concept/console&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#state-based-data-model"&gt;
  &lt;/a&gt;
  State Based Data Model:
&lt;/h4&gt;

&lt;p&gt;A state-based data model allows us to reuse intents, intuitively define transitions and data conditions, and handle supplemental questions.&lt;/p&gt;

&lt;p&gt;You can set conditions for each flow. A conditional trigger determines how the route will occur. For example, if a parameter equals a specific value, or if all parameters have been filled then route to the specific page or flow. I'll cover this topics in details for upcoming blog with some examples. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parameters-feature-enhancement"&gt;
  &lt;/a&gt;
  Parameters feature enhancement
&lt;/h4&gt;

&lt;p&gt;In Dialogflow CX thwy have come up with mainly 3 types of parameters. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Session Parameters&lt;br&gt;
Dialogflow Stores all the captured parameter through out the session so you can use the specific parameters in further flow. This feature in not available in the Dialogflow ES but you can do it via setting the long output context in Welcome intent. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intent Parameters&lt;br&gt;
Intents use parameters to extract data provided by end-users when intents are matched. The following data is used to define an intent parameter. Due to the short-lived life span of intent parameters, Dialogflow recommended to use the session parameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Form Parameters&lt;br&gt;
For each page, you can define a form, which is a list of parameters that should be collected from the end-user for the page. It's kind of similar to the ES Slot fillings. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information regarding parameters: &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter"&gt;https://cloud.google.com/dialogflow/cx/docs/concept/parameter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: I'll create a separate blog to explain the dialogflow parameters with examples.&lt;/p&gt;

&lt;p&gt;Now that we have explored the newest features of Dialogflow CX, let’s look into the comparison between Dialogflow CX vs ES.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;ES Agent&lt;/th&gt;
&lt;th&gt;CX Agent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Editions&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dialogflow Essentials Edition&lt;/td&gt;
&lt;td&gt;Dialogflow CX Edition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This is the standard agent type that is suitable for small to medium and simple to moderately complex agents. &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter"&gt;Intents&lt;/a&gt; are the building blocks of conversation design, and &lt;a href="https://cloud.google.com/dialogflow/es/docs/contexts-overview"&gt;contexts&lt;/a&gt; are used to control conversation paths. The ES agent type is summarized in &lt;a href="https://cloud.google.com/dialogflow/es/docs/basics"&gt;Dialogflow ES basics&lt;/a&gt;.&lt;/td&gt;
&lt;td&gt;This is an advanced agent type that is suitable for large or very complex agents. &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/flow"&gt;Flows&lt;/a&gt; and &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/page"&gt;pages&lt;/a&gt; are the building blocks of conversation design, and &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/handler"&gt;state handlers&lt;/a&gt; are used to control conversation paths. The CX agent type is summarized in &lt;a href="https://cloud.google.com/dialogflow/cx/docs/basics"&gt;Dialogflow CX basics&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Agents per project&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Recommended agent size&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Up to medium size agents&lt;/td&gt;
&lt;td&gt;Up to very large&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Recommended agent complexity&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Up to moderately complex agents&lt;/td&gt;
&lt;td&gt;Up to highly complex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Integrations&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Many different telephony as well as text based integrations are available. Dialogflow ES supports telephony &lt;a href="https://cloud.google.com/dialogflow/es/docs/integrations"&gt;integrations&lt;/a&gt; with Genesys, Avaya, etc. Also possible to integrate with many popular conversation platforms like Google Assistant, Slack, Facebook Messenger, Kommunicate, and Google-contributed open-source integrations.&lt;/td&gt;
&lt;td&gt;Telephony &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/integration"&gt;integrations&lt;/a&gt; are available only for Avaya, Voximplant, Audio Codes and text based integrations are available for Dialogflow Messenger, Facebook Messenger and Line. The support for the rest of the platforms is not available yet.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Language Support&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://cloud.google.com/dialogflow/es/docs/reference/language"&gt;Language support&lt;/a&gt; available for multiple languages.&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://cloud.google.com/dialogflow/cx/docs/reference/language"&gt;Language support&lt;/a&gt; available for fewer languages than DF ES.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;History feature&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The History page shows a simplified version of the conversations your agent has engaged in. These logs are chronological and intended to be an overview of how users interact with your agent.&lt;/td&gt;
&lt;td&gt;Not available in DF-CX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Agent building blocks&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Flat structure of intents&lt;/td&gt;
&lt;td&gt;Graph structure of flows and pages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Conversation control&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Linear conversation paths that simulate nonlinear paths using intents as nodes and contexts to control paths&lt;/td&gt;
&lt;td&gt;State machine model with explicit conversation control using pages as nodes and state handlers to control paths&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Console user experience&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mostly text forms&lt;/td&gt;
&lt;td&gt;Visual graphs showing conversation paths and text forms for configurations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Intent reusability&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Intents are coupled with fulfillment, events, and responses; specific to a conversation state, so difficult to reuse&lt;/td&gt;
&lt;td&gt;Intents are simplified to remove this coupling and made highly reusable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Webhook Error handling&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Errors quietly ignored by agent, passed to API caller if present&lt;/td&gt;
&lt;td&gt;Explicit &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/handler#event-built-in"&gt;error event handling&lt;/a&gt; built-in to your agent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Parameter scope&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Can be scoped to &lt;a href="https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters"&gt;intent&lt;/a&gt;, &lt;a href="https://cloud.google.com/dialogflow/es/docs/contexts-input-output#param"&gt;context&lt;/a&gt;, or &lt;a href="https://cloud.google.com/dialogflow/es/docs/events-overview#param"&gt;event&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;Can be scoped to &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter#intent"&gt;intent&lt;/a&gt;, &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter#form"&gt;form&lt;/a&gt;, or &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter#session"&gt;session&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Pricing is more granular More economical. For  &lt;strong&gt;Text:&lt;/strong&gt; Production-ready quota $0.002 per request, For &lt;strong&gt;Audio input:&lt;/strong&gt; Production-ready quota $0.0065 per 15 seconds of audio, For &lt;strong&gt;Audio output:&lt;/strong&gt; Production-ready quota $4 to $16 per million characters&lt;/td&gt;
&lt;td&gt;Pricing is simplified 2.5 - 3 times higher than DF-ES For &lt;strong&gt;Text:&lt;/strong&gt; 1200 requests per minute $20 per 100 chat sessions, For &lt;strong&gt;Audio input/output:&lt;/strong&gt; 600 requests per minute $45 per 100 voice sessions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;In conclusion, DialogFlow CX is an improved version of the Dialgoflow ES. CX has resolved all major drawbacks of the Dialogflow ES like improvement in slot filling, event handlers, parameters etc. But still it come up with the very high pricing rate as compare to ES. Based on my opinion both version has it's prons and cons. If you have very complex conversation flow then I suggest to go with the Dialogflow CX otherwise for simple flows Dialogflow ES is good enough. &lt;/p&gt;

&lt;p&gt;Thanks for reading this blog and Hope🤞 you liked it. I'm planning to create a series of blogs for Dialogflow CX concepts(Deeper Dive into Dialogflow CX). &lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://twitter.com/dhruv_rajkotia"&gt;FOLLOW&lt;/a&gt; me on twitter to get notify for my upcoming blogs regarding &lt;strong&gt;Deeper Dive into Dialogflow CX&lt;/strong&gt;.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/dialogflow#section-9"&gt;https://cloud.google.com/dialogflow#section-9&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloud.google.com/dialogflow/cx/docs"&gt;https://cloud.google.com/dialogflow/cx/docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloud.google.com/dialogflow/es/docs"&gt;https://cloud.google.com/dialogflow/es/docs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dialogflow</category>
      <category>nlp</category>
      <category>ai</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS Units Guide, everything you need to know</title>
      <author>Amer Sikira</author>
      <pubDate>Sat, 09 Oct 2021 14:18:50 +0000</pubDate>
      <link>https://dev.to/amersikira/css-units-guide-everything-you-need-to-know-2kh4</link>
      <guid>https://dev.to/amersikira/css-units-guide-everything-you-need-to-know-2kh4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://webinuse.com/css-units-guide-everything-you-need-to-know/"&gt;webinuse.com&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
In CSS every property must have some value. Sometimes it’s a path, sometimes it’s color, sometimes it’s a string, but sometimes it’s a measurement unit. Today we are talking about the CSS units for measuring the length, width, and height of an element.&lt;/p&gt;

&lt;p&gt;There are a lot of CSS units that can be used for measurement, like: &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vw&lt;/code&gt;, etc. We can divide all these units into two groups:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Absolute units&lt;/li&gt;
&lt;li&gt; Relative units&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#1-absolute-css-units"&gt;
  &lt;/a&gt;
  1. Absolute CSS units
&lt;/h3&gt;

&lt;p&gt;Absolute units are the same on any device, regardless of size and settings. Depending on the purpose of our design we may use different units. Since they are not scaling with device size, absolute CSS units are not good for responsive design, while they are excellent for print.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#px"&gt;
  &lt;/a&gt;
  px
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;px&lt;/code&gt; stands for pixel and the visual size of a pixel varies depending on the screen resolution and quality. So &lt;code&gt;16px&lt;/code&gt; is not, visually, the same size on every screen. E.g. take bigger screens like 27″ or larger with 2560x1440px or even higher resolutions. If our text is 16px it will seem much smaller than it really is, and as a result, our UI might seem broken, which, then, affects UX.&lt;/p&gt;

&lt;p&gt;Regardless of this fact, a lot of developers still use px as their standard unit of measurement.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mmcmin"&gt;
  &lt;/a&gt;
  mm/cm/in
&lt;/h4&gt;

&lt;p&gt;We know these units from the real world, and it is not often that we see them used in the web world. But, these units are excellent for preparing our page for print. Because &lt;code&gt;mm&lt;/code&gt;, &lt;code&gt;cm&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt; are always the same, we can use &lt;code&gt;@media print&lt;/code&gt; query to implement those CSS units only when printing.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#ptpc"&gt;
  &lt;/a&gt;
  pt/pc
&lt;/h4&gt;

&lt;p&gt;There are also &lt;code&gt;pt&lt;/code&gt; (point), &lt;code&gt;pc&lt;/code&gt; (pica) units, which are rarely used. &lt;code&gt;1pt&lt;/code&gt; is 1/72 of an inch and &lt;code&gt;1pc&lt;/code&gt; 12 points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Even though mm, cm, in, pt, pc are physical units there is no real guarantee that 1cm in CSS will be equal to 1cm on paper. Regardless, those units are better for printing than others we are going to talk about.&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/amersikira/pen/PoKoZoR"&gt;
  Absolute CSS units&lt;/a&gt; by Amer Sikira (&lt;a href="https://codepen.io/amersikira"&gt;@amersikira&lt;/a&gt;)
  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-relative-css-units"&gt;
  &lt;/a&gt;
  2. Relative CSS Units
&lt;/h3&gt;

&lt;p&gt;Unlike Absolute units, Relative units change depending on screen size and/or settings. Relative units are excellent for creating responsive design and they are excellent for screens, bad for printing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#percentage-"&gt;
  &lt;/a&gt;
  Percentage (%)
&lt;/h4&gt;

&lt;p&gt;What px is to absolute units, % is to relative units. We can call this a “legacy” unit. They are pretty easy to use. &lt;code&gt;1%&lt;/code&gt; refers to 1% of parent’s size.&lt;/p&gt;

&lt;p&gt;In the example below, we have &lt;code&gt;div#parent&lt;/code&gt; that is &lt;code&gt;400px&lt;/code&gt; wide and &lt;code&gt;200px&lt;/code&gt; tall. We also have &lt;code&gt;div#child&lt;/code&gt; that is &lt;code&gt;25%&lt;/code&gt; wide, which equals to &lt;code&gt;125px&lt;/code&gt; and &lt;code&gt;30%&lt;/code&gt; tall, which equals to &lt;code&gt;60px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/amersikira/pen/XWaWXjm"&gt;
  % example&lt;/a&gt; by Amer Sikira (&lt;a href="https://codepen.io/amersikira"&gt;@amersikira&lt;/a&gt;)
  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#emrem"&gt;
  &lt;/a&gt;
  em/rem
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt; units and &lt;code&gt;rem&lt;/code&gt; units are almost the same. Difference is that &lt;code&gt;em&lt;/code&gt; is relative to element’s &lt;code&gt;font-size&lt;/code&gt;, while &lt;code&gt;rem&lt;/code&gt; are relative to the root element’s &lt;code&gt;font-size&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#em"&gt;
  &lt;/a&gt;
  em
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;1em&lt;/code&gt; is equal to 100% of element’s &lt;code&gt;font-size&lt;/code&gt;. So, if element’s &lt;code&gt;font-size&lt;/code&gt; is &lt;code&gt;30px&lt;/code&gt; than &lt;code&gt;1em&lt;/code&gt; is same. &lt;code&gt;2em&lt;/code&gt; inside same element means &lt;code&gt;60px&lt;/code&gt;. Using &lt;code&gt;em&lt;/code&gt; for font-size property may not be the best idea, but using &lt;code&gt;em&lt;/code&gt; for margins, paddings and widths is good.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#rem"&gt;
  &lt;/a&gt;
  rem
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;1rem&lt;/code&gt; is equal to &lt;code&gt;100%&lt;/code&gt; of root element’s &lt;code&gt;font-size&lt;/code&gt;. Standard &lt;code&gt;font-size&lt;/code&gt; built-in browser is &lt;code&gt;16px&lt;/code&gt; if you do not change it, and we will see in a moment why it is not smart to change it.&lt;/p&gt;

&lt;p&gt;Rem unit is excellent for responsive design and it is excellent for accessibility (this is why we should not change root font-size). Let’s say we have a user who changed (in browser) root’s font-size from 16px to 25px. If we used rem, our design will scale accordingly, and our UI will be intact, hence our UX will be the same for every user.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#exch"&gt;
  &lt;/a&gt;
  ex/ch
&lt;/h4&gt;

&lt;p&gt;Similar to &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;ex&lt;/code&gt; and &lt;code&gt;ch&lt;/code&gt; CSS units are base on the &lt;code&gt;font-size&lt;/code&gt;. However, these units are also relative to &lt;code&gt;font-family&lt;/code&gt;. &lt;code&gt;ch&lt;/code&gt; stands for character unit and it is defined by the width of character “0”. The &lt;code&gt;ex&lt;/code&gt; unit is defined as “the current x-height of the current font or the half of 1em”, as per &lt;a href="https://www.freecodecamp.org/news/css-unit-guide/"&gt;this freeCodeCamp’s article&lt;/a&gt;. The height-x of a given font is the height of the lowercase “x” of that font. It is often the middle mark of the font.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lhrlh"&gt;
  &lt;/a&gt;
  lh/rlh
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;lh&lt;/code&gt; stands for line-height, and &lt;code&gt;rlh&lt;/code&gt; stands for root line-height. Same as &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;lh&lt;/code&gt; is “equal to the computed value of line-height” of the element, while &lt;code&gt;rlh&lt;/code&gt; is “equal to the computed value of line-height” of the root element. If &lt;code&gt;line-height: 20px&lt;/code&gt; then &lt;code&gt;1lh&lt;/code&gt; or &lt;code&gt;1rlh&lt;/code&gt; is equal to 20px, depends if we are talking of the element’s line height or the root element’s line height. These units are useful for aligning icons with text, according to the &lt;a href="https://css-tricks.com/lh-and-rlh-units/"&gt;css-tricks.com&lt;/a&gt; article.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vwvh"&gt;
  &lt;/a&gt;
  vw/vh
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;vw&lt;/code&gt; stands for viewport width and &lt;code&gt;vh&lt;/code&gt; stands for viewport height. This means that these units depend on the screen size. Element of &lt;code&gt;50vw&lt;/code&gt; will take 50% of the screen’s width, regardless of screen size and resolution. The same goes for &lt;code&gt;vh&lt;/code&gt;. Element of &lt;code&gt;50vh&lt;/code&gt; will take 50% of the screen’s height, regardless of screen size and resolution. We can use this for the width of the sections, which can prove like an excellent choice for responsive design.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vminvmax"&gt;
  &lt;/a&gt;
  vmin/vmax
&lt;/h4&gt;

&lt;p&gt;Unlike &lt;code&gt;vw&lt;/code&gt; and &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vmin&lt;/code&gt; and &lt;code&gt;vmax&lt;/code&gt; rely on the maximum width and a minimum height of the screen, or vice versa. For example, if screen size is &lt;code&gt;1920px&lt;/code&gt; by &lt;code&gt;1080px&lt;/code&gt;, then &lt;code&gt;1vmax&lt;/code&gt; is 19.2px and &lt;code&gt;1vmin&lt;/code&gt; is 10.8px.While, if the screen is &lt;code&gt;720px&lt;/code&gt; by &lt;code&gt;1080px&lt;/code&gt;, then &lt;code&gt;1vmin&lt;/code&gt; is 7.2px and &lt;code&gt;1vmax&lt;/code&gt; is 10.8px.&lt;/p&gt;

&lt;p&gt;To calculate vmin and vmax we take screen size and then divide both width and height by 100. Whichever is smaller that is &lt;code&gt;1vmin&lt;/code&gt; and whichever is larger it is &lt;code&gt;1vmax&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There are more units that we have not discussed here. We chose these units because they are, either, common or useful. Almost any of these units will “do the job”. But there are some units that are better for some things than others. For additional information on CSS units, we can use &lt;a href="https://www.w3.org/TR/css-values-4/#font-relative-lengths"&gt;Level 4 spec for CSS values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or anything you can find me on my &lt;a href="https://twitter.com/AmerSikira"&gt;Twitter&lt;/a&gt;, or you can read some of my other articles like &lt;a href="https://webinuse.com/how-to-merge-objects-in-javascript/"&gt;How to merge objects in JavaScript?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>A Basic Guide to Cascading Style Sheets</title>
      <author>Dolamu Asipa</author>
      <pubDate>Sat, 09 Oct 2021 14:11:01 +0000</pubDate>
      <link>https://dev.to/dolamu/a-basic-guide-to-cascading-style-sheets-54fd</link>
      <guid>https://dev.to/dolamu/a-basic-guide-to-cascading-style-sheets-54fd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#brief-background"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Brief Background&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Like HTML, &lt;a href="https://en.wikipedia.org/wiki/CSS"&gt;CSS&lt;/a&gt; (which means Cascading Style Sheets) is not a programming language, it is the code you use to selectively style the &lt;a href="https://en.wikipedia.org/wiki/World_Wide_Web"&gt;web&lt;/a&gt;. CSS is a &lt;a href="https://en.wikipedia.org/wiki/Style_sheet_language"&gt;style sheet language&lt;/a&gt; for describing the presentation of a document written in a markup language like &lt;a href="https://en.wikipedia.org/wiki/HTML"&gt;HTML&lt;/a&gt;. It is designed to help improve a site's content &lt;a href="https://en.wikipedia.org/wiki/Accessibility"&gt;acessibility&lt;/a&gt;; provide more flexibility and control in the specification of presentation characteristics; and enable multiples web pages to share formatting which reduces complexity and repetition.&lt;/p&gt;

&lt;p&gt;Before CSS, nearly all presentational attributes of HTML documents were contained within the HTML &lt;a href="https://en.wikipedia.org/wiki/Markup_language"&gt;markup&lt;/a&gt;. All font colors, background styles, element alignments, borders and sizes had to be explicitly described, often repeatedly, within the HTML. CSS lets authors move much of that information to another file; the style sheet, resulting in considerably more simpler HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anatomy-of-css-ruleset"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Anatomy of CSS Ruleset&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;All CSS rulesets are wrapped in curly braces &lt;code&gt;{ }&lt;/code&gt;. They can be specified inside a &lt;code&gt;style&lt;/code&gt; element or inside an external CSS file. CSS layout is based on the "box" model, with each &lt;em&gt;box&lt;/em&gt; taking up space on the webpage having various properties like: padding (which is the space around the content e.g., the space around your paragraph), border (this is the solid line that encircles the padding), and margin (which is the around the outside of the border). Here's what the syntax of a typical CSS code looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  font-style: italic
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A CSS ruleset consists of: the selector, declaration, property and the property value. When the above CSS code is applied to a HTML document, the content of the &lt;code&gt;body&lt;/code&gt; element will be &lt;em&gt;italic&lt;/em&gt; in style and blue in color. In CSS, anything specified within the &lt;code&gt;/*&lt;/code&gt; and &lt;code&gt;*/&lt;/code&gt; tags is a &lt;strong&gt;comment&lt;/strong&gt;. Comments are a helpful way to write notes about your code and browsers do ignore them as they render the CSS code. Below are the detailed analysis of a CSS ruleset 👇&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Selector&lt;/strong&gt;: This indicates or &lt;em&gt;selects&lt;/em&gt; the HTML element(s) or contents [e.g attributes, ids, and classes] to which a set of styling rules apply. It is usually at the beginning of the ruleset. For instance, in the illustration above, the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element is the selector. To style a different element you simply have to change the selector. Other forms of selectors in CSS include;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a universal selector - denoted by the symbol * and which affects all elements (e.g heading, paragraph, list etc.) on a document tree or all values of a particular element.&lt;/li&gt;
&lt;li&gt;an element selector - also known as a tag or type selector, is a commonly-used selector in CSS that involves all HTML elements of an identified type when that type is specified. Multiple elements can also be selected with the use of a comma, and a single ruleset applied to them all as follows 👉 h1, p, li, {color: blue;}.&lt;/li&gt;
&lt;li&gt;pseudo-class - is a keyword added to a selector that specifies a special state of the selected element, for instance  in this ruleset 👉 a:hover {color: blue;}, the color of the selector (a) changes to blue when the mouse pointer hovers over the link.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Declaration&lt;/strong&gt;: This &lt;em&gt;declares&lt;/em&gt; the property of an HTML element to be styled. It determines how elements are formatted on a webpage. Each declaration is made up of a property and a property value which are separated by a colon. Declarations within a block are separated by a semicolon. For example &lt;code&gt;font-style: italic; color: blue;&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Property&lt;/strong&gt;: This is the attribute to be styled in an HTML document. Different HTML selectors and elements have different properties, properties specify &lt;em&gt;what to style&lt;/em&gt; on a CSS selector. This could be the background of the HTML elements or its color or font. Just like the CSS selector, some properties are uiniversal and can be used on any element while others apply only to specific groups of elements and under particular conditions. In the example above, the property of the &lt;code&gt;body&lt;/code&gt; element chosen to be styled is its "color". Frequently used properties in CSS documents include: list properties; font properties; border properties; and text properties.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt;: are written after the colon that separates them from the properties in CSS. The word "values" can be quite misleading though because CSS values are not just text; they are often in different forms like integers, units, strings, URLs, etc. See below for more details 👇 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;text values - are quite common in CSS and are usually written without quotes. `italic` and `blue` are the text values of `font-style` and `color` in the CSS ruleset above.&lt;/li&gt;
&lt;li&gt;integers - are numbers from zero to nine. Some CSS properties allow their values to be described as negative integers. An example of an integer is 👉 "6" as a value for the property 'column-count'. It isn't uncommon to see some properties like 'margin' take on two values (e.g. 3 auto;). When this occurs, the first value (3 in this case) affects the element's top and bottom side while the second value affects the left and right side [note that 'auto' is a special value that divides the available horizontal space evenly between left and right].&lt;/li&gt;
&lt;li&gt;units/measurements - many properties in CSS take this as their value to effectively position general layout and media queries on a webpage. Examples of property-specific units for CSS values include; pc - the unit for picas; em - for the calculated size of a font; cm - the unit for centimeters; pt - for points (as measurement in printed media); and % - the unit for percentages.&lt;/li&gt;
&lt;li&gt;URLs - properties like 'background-image' often take an actual URL as their value. A URL could be absolute or relative meaning that the address of an image could either be copied online and used as a background image or an image could be uploaded directly from the user's computer. For example: div{background-image: url("./images/picture.jpg");}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h3&gt;

&lt;p&gt;As a codenewbie, it is quite easy to get overwhelmed by the sheer size of properties, properties values and CSS selectors to remember, which is why I've compiled the following list of resources for future reference 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://meiert.com/en/indices/css-properties/"&gt;CSS index&lt;/a&gt;; for a list of all properties, their initial values and CSS versions.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A comprehensive guide on CSS ruleset &lt;a href="https://www.w3schools.com/cssref/"&gt;can also be found here at w3schools&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, check out 👉 &lt;a href="https://css-tricks.com/"&gt;this site&lt;/a&gt; for CSS tips and tricks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;As always, thanks for reading&lt;/em&gt;  👋 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
