<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Flask Command-Line - Open-Source Sample</title>
      <author>Sm0ke</author>
      <pubDate>Thu, 08 Apr 2021 15:04:08 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-command-line-open-source-sample-34m9</link>
      <guid>https://dev.to/sm0ke/flask-command-line-open-source-sample-34m9</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a Flask sample project that implements custom commands on top of &lt;strong&gt;Flask Command-Line&lt;/strong&gt; interface. Custom commands might be useful to implement maintenance tasks, inspect the application state in production, or simply to load new records into the database using a JSON file as input. The code, available on Github, can be extended with ease to cover more useful use-cases.&lt;/p&gt;

&lt;p&gt;Thank you! &lt;strong&gt;Content provided by &lt;a href="https://appseed.us"&gt;AppSeed - App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-command-line-blueprints"&gt;Flask Command-Line&lt;/a&gt; - sample project&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-black"&gt;Flask Black Dashboard&lt;/a&gt; - the original starter&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7cyNgCOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8tl0p341t6tucsz8izm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7cyNgCOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8tl0p341t6tucsz8izm.png" alt="Flask Command-Line - Sample Project provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;How to use the code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The sample code can be compiled with a few commands typed in the terminal if a Python3 environment is up &amp;amp; running on our workspace.  The first step is to clone the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Get the code&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-command-line.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-command-line
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install modules and set up the environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the app is ready to be executed and we can list the registered (new) commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# List the new commands &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands
Usage: flask commands &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS] COMMAND &lt;span class="o"&gt;[&lt;/span&gt;ARGS]...

Options:
  &lt;span class="nt"&gt;--help&lt;/span&gt;  Show this message and exit.

Commands:
  cfg    List all Config Variables   &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; NEW Command
  hello  Simple Hello                &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; NEW Command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "Commands" node shows two commands that we can invoke and check the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands hello
Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Hello               &amp;lt;- The Output 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first command is fairly simple: prints a "Hello" message. The code can be found in the "&lt;a href="https://github.com/app-generator/flask-command-line-blueprints/blob/master/app/commands.py"&gt;commands&lt;/a&gt;" Blueprint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;""" Simple Hello """&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Custom command - Hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the second custom command we are getting closer to something useful: list the configuration variables and optionally filter the output using an input string.&lt;/p&gt;

&lt;p&gt;Here is the code - defined in the same file (&lt;strong&gt;commands.py&lt;/strong&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cfg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'filter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" List all Config Variables """&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Custom command - Cfg(Filter="&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Filtered config
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;'  |- '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' -&amp;gt; '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Unfiltered config
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;'  |- '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' -&amp;gt; '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The above code read an optional parameter "filter" and iterate over the application config variables. If the "filter" parameter is defined, only the keys that match the filter are listed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Unfiltered output (list all keys)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None&lt;span class="o"&gt;)&lt;/span&gt;
  |- ENV -&amp;gt; production
  |- DEBUG -&amp;gt; False
  |- TESTING -&amp;gt; False
  |- PROPAGATE_EXCEPTIONS -&amp;gt; None
  |- PRESERVE_CONTEXT_ON_EXCEPTION -&amp;gt; None
  |- SECRET_KEY -&amp;gt; S3cr3t_K#Key
  |- PERMANENT_SESSION_LIFETIME -&amp;gt; 31 days, 0:00:00
  |- USE_X_SENDFILE -&amp;gt; False
  |- SERVER_NAME -&amp;gt; None
  |- APPLICATION_ROOT -&amp;gt; /
  |- SESSION_COOKIE_NAME -&amp;gt; session
  |- SESSION_COOKIE_DOMAIN -&amp;gt; None
  |- SESSION_COOKIE_PATH -&amp;gt; None
  |- SESSION_COOKIE_HTTPONLY -&amp;gt; True
  |- SESSION_COOKIE_SECURE -&amp;gt; False
  |- SESSION_COOKIE_SAMESITE -&amp;gt; None
...
&lt;span class="o"&gt;(&lt;/span&gt;truncated output&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;To see the filtered configuration keys, we should provide an extra input parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Filter ouput that matches `database`  &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg database
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;database&lt;span class="o"&gt;)&lt;/span&gt;
  |- SQLALCHEMY_DATABASE_URI -&amp;gt; sqlite:///...&lt;span class="se"&gt;\f&lt;/span&gt;lask-command-line-blueprints&lt;span class="se"&gt;\d&lt;/span&gt;b.sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Let's highlight all configuration parameters with "JSON" in their names:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Filter ouput that matches `JSON`&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg JSON
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;JSON&lt;span class="o"&gt;)&lt;/span&gt;
  |- JSON_AS_ASCII -&amp;gt; True
  |- JSON_SORT_KEYS -&amp;gt; True
  |- JSONIFY_PRETTYPRINT_REGULAR -&amp;gt; False
  |- JSONIFY_MIMETYPE -&amp;gt; application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this point, the code can be extended with ease to execute other useful tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;delete inactive user accounts&lt;/li&gt;
&lt;li&gt;extract sales information and other useful statistics&lt;/li&gt;
&lt;li&gt;notify users regarding new products and updates&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resource please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/cli/"&gt;Flask CLI&lt;/a&gt; (command-line interface)   - the official docs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://itnext.io/use-flask-cli-to-create-commands-for-your-postgresql-on-heroku-in-6-simple-steps-e8166c024c8d"&gt;Use Flask CLI to create commands for your PostgreSQL&lt;/a&gt; - blog article&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Flask Starters&lt;/a&gt; - a curated index provided by &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QPr4seB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w9kc5ctl8ht1vrrp8k0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QPr4seB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w9kc5ctl8ht1vrrp8k0.png" alt="Flask Starter - Open-Source project provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>python</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Learn how to add a simple dark/light mode switcher!</title>
      <author>CristoferK</author>
      <pubDate>Thu, 08 Apr 2021 15:03:56 +0000</pubDate>
      <link>https://dev.to/cristoferk/learn-how-to-add-a-simple-dark-light-mode-switcher-29nh</link>
      <guid>https://dev.to/cristoferk/learn-how-to-add-a-simple-dark-light-mode-switcher-29nh</guid>
      <description>&lt;p&gt;Don't forget to subscribe to my YouTube channel! &lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured&lt;/a&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
HTML

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Light/Dark mode&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;header&amp;gt;
    &amp;lt;label id="dark-change"&amp;gt;&amp;lt;/label&amp;gt;

&amp;lt;style&amp;gt;
body {
    margin: 0;
    padding: 0;
    font-family: sans-serif;
}
main {
    margin: Svh 15%;
        align-content: center;
    align-items: center;
}
h1 {
    font-size: 40px;
    font-weight: 400;
    text-align: center;
}
img {
    width: 50%;
    height: auto;
}
p {
    text-align: justify;
    font-size: 18px;
}
label {
    position: absolute;
    width: 45px;
    height: 22px;
    right: 20px;
    top: 20px;
    border: 2px solid;
    border-radius: 20px;
}
label:before {
    position: absolute;
    content: "";
    width: 20px;
    height: 20px;
    left: 1px;
    top: 1px;
    border-radius: 50%;
    cursor: pointer;
    background: #000;
    transition: 0.4s;
}
label.active:before {
    left: 24px;
    background: #fff;
}
body.night {
    background: #000;
    color: #fff;
    transition: 0.5s;
}
&amp;lt;/style&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
    &amp;lt;h1&amp;gt;Easy Light/Dark mode&amp;lt;/h1&amp;gt;
    &amp;lt;div id="respon"&amp;gt;
        &amp;lt;img src="https://www.universityofcalifornia.edu/sites/default/files/night-sky-purple.jpg"&amp;gt;
        &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec malesuada tortor. Ut pharetra, velit ut facilisis scelerisque, tortor ligula imperdiet metus, et ultrices nisi erat at enim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vestibulum et erat in ultricies. Vivamus id nulla elementum, sagittis felis id, aliquet ligula.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/main&amp;gt;
&amp;lt;script&amp;gt;
var content = document.getElementsByTagName('body')[0];
var darkMode = document.getElementById('dark-change');
darkMode.addEventListener('click', function() {
        darkMode.classList.toggle('active');
        content.classList.toggle('night');
})
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
      <category>youtube</category>
    </item>
    <item>
      <title>How to Create a React.JS Application</title>
      <author>Rithik Samanthula</author>
      <pubDate>Thu, 08 Apr 2021 14:59:16 +0000</pubDate>
      <link>https://dev.to/code2rithik/how-to-create-a-react-js-application-2h8k</link>
      <guid>https://dev.to/code2rithik/how-to-create-a-react-js-application-2h8k</guid>
      <description>&lt;p&gt;Want to set up a local development environment for React.JS? Then this is the blog for you.&lt;/p&gt;

&lt;p&gt;This blog is for MAC and WINDOWS users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#here-are-the-steps"&gt;
  &lt;/a&gt;
  Here are the steps:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgEg4zJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cku8mc2kevvdlm7pharx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgEg4zJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cku8mc2kevvdlm7pharx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-checking-whether-nodejs-is-uptodate"&gt;
  &lt;/a&gt;
  1. Checking whether Node.JS is up-to-date
&lt;/h1&gt;

&lt;p&gt;First, open your terminal and type &lt;code&gt;node --version&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyPnSJGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suyuenaz2tskq3lzteqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyPnSJGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suyuenaz2tskq3lzteqm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check if it Matches with the Node.JS &lt;a href="https://nodejs.org"&gt;website&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPD-TxA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsi8b58bx368wqu8gibe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPD-TxA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsi8b58bx368wqu8gibe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-install-visual-studio-code"&gt;
  &lt;/a&gt;
  2. Install Visual Studio Code
&lt;/h1&gt;

&lt;p&gt;For this tutorial, I will be downloading Visual Studio Code because it is much easier to develop React Applications. If you would like to use another text editor, feel free to do so.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://code.visualstudio.com"&gt; Visual Studio Code's &lt;/a&gt; website and choose the operating system that you use&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Bno92fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8l59q51lgodnr897slx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Bno92fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8l59q51lgodnr897slx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, wait for some time for the ZIP file to download.&lt;/p&gt;

&lt;p&gt;After the ZIP file is completed downloading, double click on it.&lt;/p&gt;

&lt;p&gt;It will take a couple of seconds to do so.&lt;/p&gt;

&lt;p&gt;After that, Drag VSCode to your Applications Folder.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-using-createreactapp"&gt;
  &lt;/a&gt;
  3. Using &lt;code&gt;create-react-app&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Open a terminal and type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-react-app my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take a few minutes, so grab a cup of tea or coffee :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OwkVrfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i6bw6wqlnhmme7amphi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OwkVrfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i6bw6wqlnhmme7amphi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it is successful, you should get an image like this. If not, comment down in this blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4usUWFmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jtp5d6eemtgbvz7u8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4usUWFmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jtp5d6eemtgbvz7u8f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, &lt;code&gt;cd&lt;/code&gt; into the directory by using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open it in VSCode by using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ code .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQF3SOOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op6tt3kywjlkjpavsews.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQF3SOOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op6tt3kywjlkjpavsews.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, use the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vnYIkVzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gjd9om8idwz4qkxf5qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vnYIkVzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gjd9om8idwz4qkxf5qo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, Open &lt;code&gt;localhost:3000&lt;/code&gt; in your browser and VOILA, it opens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xk6vYpx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idfkmsn7ylow2bnsdif2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xk6vYpx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idfkmsn7ylow2bnsdif2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the page says, if you want to write your own react code, edit the &lt;code&gt;src/App.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Thanks for reading the blog.&lt;/p&gt;

&lt;p&gt;And remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>react</category>
      <category>createreactapp</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Protect your .NET and .NET Core applications without leaving visual studio.</title>
      <author>Dotnetsafer</author>
      <pubDate>Thu, 08 Apr 2021 14:56:22 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/protege-tus-aplicaciones-net-y-net-core-sin-salir-de-visual-studio-54eh</link>
      <guid>https://dev.to/dotnetsafer/protege-tus-aplicaciones-net-y-net-core-sin-salir-de-visual-studio-54eh</guid>
      <description>&lt;p&gt;Hello developers 👋, I'm Juan.&lt;/p&gt;

&lt;p&gt;As we have shown in some articles, we helped you protect the source code of .NET applications, and we had detected a problem.&lt;/p&gt;

&lt;p&gt;Honestly, &lt;strong&gt;it was a pain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Like you, we are all developers and distractions when programming are everywhere, we always have to go looking for information, reading articles and using different platforms and programs.&lt;/p&gt;

&lt;p&gt;This makes us less effective and productive.&lt;/p&gt;

&lt;p&gt;So, we came up with creating an extension for Visual Studio that with almost no effort or maintenance allows you to protect your applications simply by clicking the "compile" button that you always use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uVEwA6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05wnf4e49qqr4e3eukr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uVEwA6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05wnf4e49qqr4e3eukr2.png" alt="Protect net core apps in visual studio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I am sure that you are restless, curious and you like all this, we have created a BETA program.&lt;/p&gt;

&lt;p&gt;We are looking for people who want to try it before anyone else, and even if you like it you can help us develop more advanced functions or improve the current ones.&lt;/p&gt;

&lt;p&gt;Would you like to be part of it? &lt;a href="https://mailchi.mp/05c7df4c5902/dotnetsafer-beta"&gt;Join beta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our mission is&lt;/strong&gt;, that in an increasingly digitized world where security is a growing problem, developers can focus on creating incredible solutions without security being a headache or the focus of your developing.&lt;/p&gt;

&lt;p&gt;We want to offer security with few clicks so that developers take care of developing without worry.&lt;/p&gt;

&lt;p&gt;We are looking for people to help us along the way ❤.&lt;/p&gt;

&lt;p&gt;This is the idea we have in the short-term beta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual studio extension.

&lt;ul&gt;
&lt;li&gt;It allows to protect several projects of the solution.&lt;/li&gt;
&lt;li&gt;You can configure each one from visual studio.&lt;/li&gt;
&lt;li&gt;You can make the compilation output protected directly.&lt;/li&gt;
&lt;li&gt;It allows you to protect before doing a deployment with visual studio.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;CLI to protect applications.

&lt;ul&gt;
&lt;li&gt;It allows you to protect .net applications from any platform through a console.&lt;/li&gt;
&lt;li&gt;Configure everything from the directory itself or CLI.&lt;/li&gt;
&lt;li&gt;Manage your protected apps and projects.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integration with github.

&lt;ul&gt;
&lt;li&gt;It allows you to integrate a github actions so that in the deployment process your application is protected.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integration with Azure.

&lt;ul&gt;
&lt;li&gt;Allows you to add a task in your pipeline to protect your application in Azure Devops.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New add-ons, we will announce later some add-ons that we will make public so that you can better manage security in your developments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mailchi.mp/05c7df4c5902/dotnetsafer-beta"&gt;Join us, let's make security more accessible for our developments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading, we will send news next week ❤&lt;/p&gt;

&lt;p&gt;(Ah, obviously we do not spam or provide your email to any third party.)&lt;br&gt;
&lt;a href="https://i.giphy.com/media/e7yNPQmGUozyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/e7yNPQmGUozyU/giphy.gif" alt="privacy"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>security</category>
      <category>csharp</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Learn Front End Easy And Fast By Watching This!</title>
      <author>CristoferK</author>
      <pubDate>Thu, 08 Apr 2021 14:44:43 +0000</pubDate>
      <link>https://dev.to/cristoferk/learn-front-end-easy-and-fast-by-watching-this-3dic</link>
      <guid>https://dev.to/cristoferk/learn-front-end-easy-and-fast-by-watching-this-3dic</guid>
      <description>&lt;p&gt;Hello! If you want to learn Front End you can watch this YouTube channel:&lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured&lt;/a&gt;&lt;br&gt;
Don't forget to subscribe! A new video every week!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>youtube</category>
    </item>
    <item>
      <title>Stop making these mistakes if you want to succeed</title>
      <author>Andrew Behery</author>
      <pubDate>Thu, 08 Apr 2021 14:34:11 +0000</pubDate>
      <link>https://dev.to/andrew_behery/stop-making-these-mistakes-if-you-want-to-succeed-3d2d</link>
      <guid>https://dev.to/andrew_behery/stop-making-these-mistakes-if-you-want-to-succeed-3d2d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;What programming languages should I learn?&lt;/p&gt;

&lt;p&gt;Which frameworks are the best?&lt;/p&gt;

&lt;p&gt;Udemy is having a sale, which courses should I get?&lt;/p&gt;

&lt;p&gt;There's so many blogs and articles about programming that I feel like I'm drowning in things to read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stop it. Stop that right now.&lt;/p&gt;

&lt;p&gt;Adam Smith had it right hundreds of years ago when he wrote in his &lt;em&gt;Wealth of Nations&lt;/em&gt; that wealthy nations will tend to have a labor force that specializes. When people specialize, they can get really good at that one thing, which will make them in very high demand for the thing that they've spent their lives mastering. &lt;/p&gt;

&lt;p&gt;This is why the specialized surgeon tends to earn more than the general practitioner physician. This is why top athletes focus their efforts on one sport. Even Michael Jordan, when he attempted to switch to baseball, went right back to basketball.&lt;/p&gt;

&lt;p&gt;Have goals, turn goals into plans, and then put on your blinders.&lt;/p&gt;

&lt;p&gt;There's a time to brainstorm, to think, and to compare options to one another.&lt;/p&gt;

&lt;p&gt;Sure, decide if you want to learn python or Javascript. Figure out if you'll run Windows, Mac OS, or Linux. Check out that blog for a moment to see if it's worth subscribing to.&lt;/p&gt;

&lt;p&gt;But once you've decided what you want to learn, or what you want to accomplish, you need to focus, and that means shutting out all the rest. Have a plan, or a curriculum of courses, books, whatever, and stick to it until it's done. Be slow when deciding to change your plans, don't just do it on a whim, don't just get swept up by marketing (sales on courses, or catchy headlines).&lt;/p&gt;

&lt;p&gt;You don't need to read every article post, don't worry, you're not missing anything, and they're not going anywhere. Getting good at your craft and practicing the fundamentals is more important then the shiny new whatever-it-is that the blog is writing about. &lt;/p&gt;

&lt;p&gt;You don't need to constantly be on x or y forum just to "check in", "see how others are doing", or "report your status/progress". You can if it's intentional for your own personal online social media presence, but intentional is the important bit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;TL;DR: This is a reminder to stop getting distracted, stop having FOMO for things that won't make you a better dev, and to get to it, and do the work you need to do.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Useful resource for generating SVG images</title>
      <author>ManuTheCoder</author>
      <pubDate>Thu, 08 Apr 2021 14:15:02 +0000</pubDate>
      <link>https://dev.to/manuthecoder/useful-resource-for-generating-svg-images-9gj</link>
      <guid>https://dev.to/manuthecoder/useful-resource-for-generating-svg-images-9gj</guid>
      <description>&lt;p&gt;Want to generate layered waves, waves, blobs, blob scenes, and more?&lt;/p&gt;

&lt;p&gt;Check this out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.haikei.app"&gt;https://app.haikei.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recommended thing once you download a generated SVG:&lt;/p&gt;

&lt;p&gt;URL encode it for CSS: &lt;a href="https://yoksel.github.io/url-encoder"&gt;https://yoksel.github.io/url-encoder&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Next.js: Multilanguage support with internationalized routing</title>
      <author>velan</author>
      <pubDate>Thu, 08 Apr 2021 13:57:03 +0000</pubDate>
      <link>https://dev.to/singaravelan/next-js-multilanguage-support-with-internationalized-routing-486e</link>
      <guid>https://dev.to/singaravelan/next-js-multilanguage-support-with-internationalized-routing-486e</guid>
      <description>&lt;p&gt;Let's create a simple Next.js starter project with multiple languages - English &lt;em&gt;(en-US)&lt;/em&gt;, Tamil &lt;em&gt;(ta-IN)&lt;/em&gt;, Hindi &lt;em&gt;(hi-IN)&lt;/em&gt;, Kannada &lt;em&gt;(kn-IN)&lt;/em&gt; support using Next.js native &lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;i18n&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 Source code of this article available at &lt;a href="https://github.com/singara-velan/Nextjs-Multilanguage"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-are-we-going-to-do"&gt;
  &lt;/a&gt;
  What are we going to do
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Creating a Next js app (v10.x.x) with boostrap.css&lt;/li&gt;
&lt;li&gt;Configuring i18n in next.config.js&lt;/li&gt;
&lt;li&gt;Create locale JSON&lt;/li&gt;
&lt;li&gt;Read locale from the route and display in the HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#set-up"&gt;
  &lt;/a&gt;
  Set up
&lt;/h3&gt;

&lt;p&gt;Create a Next js app and add bootstrap, swr as dependency&lt;br&gt;
&lt;code&gt;npx create-next-app&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm i -s bootstrap&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm i -s swr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run the app&lt;br&gt;
&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new page called home under pages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Home = () =&amp;gt; {
    return (
        &amp;lt;h1&amp;gt;Hey! I am home - English&amp;lt;/h1&amp;gt;
    )
}

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to &lt;code&gt;http://localhost:3000/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2CZk9JA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342pb2yn0i9yk0tbepbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2CZk9JA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342pb2yn0i9yk0tbepbw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuring-i18n-route"&gt;
  &lt;/a&gt;
  Configuring i18n route
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;There are two ways to handle locale: Sub-path and domain routing. Here we explore Sub-path routing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sub-path routing is basically prefixing locale code in front of existing routes without any impact on actual routing. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;eg: /home,&lt;br&gt;
     /en-US/home,&lt;br&gt;
     /ta-IN/home,&lt;br&gt;
     /hi-IN/home&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now if you try to access one of the routes eg: &lt;code&gt;/en-us/home&lt;/code&gt;, you will see 404 message. Because locale-based routing not enabled yet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oy4SNYyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhzgvgeabm74twl4xdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oy4SNYyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhzgvgeabm74twl4xdj.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p923Cahe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bc1465poepp1jllqdjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p923Cahe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bc1465poepp1jllqdjv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable locale-based routing, Create a next.config.js file in the project root as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
    i18n: {
        locales: ['en-us', 'ta-in', 'hi-in', 'kn-in'],
        defaultLocale: 'en-us'
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 checkout i18n locale code reference for different languages &lt;a href="https://gist.github.com/singara-velan/aedb97495f4e430fc34e88daef6716e5"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 Do remember to stop and start the app, whenever modifying next.config.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now try again to access locale-based route &lt;code&gt;/en-us/home&lt;/code&gt;&lt;br&gt;
Boom, it works!! 😍&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55ZvdvR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fov47yv1scapniddnuwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55ZvdvR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fov47yv1scapniddnuwe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try with another locale code &lt;code&gt;/ta-in/home&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4gDBoAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7q4g2jf5o6vaykvk58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4gDBoAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7q4g2jf5o6vaykvk58.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The page didn't break, but the language doesn't change 😦 Because we didn't create any language-specific content. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-languagespecific-files"&gt;
  &lt;/a&gt;
  Create language-specific files
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Create a new folder called &lt;code&gt;locales&lt;/code&gt; under the public folder and create JSON files with exact names as locale codes&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2bO-a5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6nq8m9s08xy5zl82l5h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2bO-a5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6nq8m9s08xy5zl82l5h.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Inside of each JSON create one key-value language as a data property&lt;/p&gt;

&lt;p&gt;eg: &lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/en-US.json"&gt;en-US&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "English"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/ta-IN.json"&gt;ta-IN&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "தமிழ்"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/hi-IN.json"&gt;hi-IN&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "हिन्दी"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loading-the-language-file-based-on-route-locale-code"&gt;
  &lt;/a&gt;
  Loading the language file based on route locale code
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;When navigating to a specific locale route, the page should show content from the respective locale JSON file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will be achieving that by&lt;br&gt;
1 Get the locale code from the route&lt;br&gt;
2 Fetch the locale JSON&lt;br&gt;
3 Bind in HTML&lt;/p&gt;

&lt;p&gt;1: Get the locale code from the route&lt;br&gt;
&lt;code&gt;next/router&lt;/code&gt; will provide us the locale code. Update the home.js file with &lt;code&gt;useRouter&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = useRouter();
const locale = router.locale;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2: Fetch locale JSON file&lt;br&gt;
Make Rest call using &lt;a href="https://swr.vercel.app/"&gt;useSWR&lt;/a&gt; hook with the locale code from the previous step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { data, error } = useSWR(`/locales/${locale}.json`, fetcher)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3: Bind in HTML&lt;br&gt;
Replace the &lt;code&gt;English&lt;/code&gt; with the data fetched from the previous step. Final home.js will looks as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useRouter } from 'next/router'
import useSWR from 'swr'

const Home = () =&amp;gt; {
    const router = useRouter();
    const locale = router.locale;

    const { data, error } = useSWR(`/locales/${locale}.json`, fetcher)

    return (
        &amp;lt;h1&amp;gt;Hey! I am home - {data?.language}&amp;lt;/h1&amp;gt;
    )
}

const fetcher = (...args) =&amp;gt; fetch(...args).then(res =&amp;gt; res.json());

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#time-for-testing-smiley-smiley"&gt;
  &lt;/a&gt;
  Time for Testing! 😃 😃
&lt;/h3&gt;

&lt;p&gt;Try access different route based on route code&lt;br&gt;
&lt;code&gt;http://localhost:3000/ta-IN/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsLsxv0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdkfumx0hothga3lexp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsLsxv0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdkfumx0hothga3lexp5.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;http://localhost:3000/hi-IN/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiMo4jUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/495mynxb6dll3dr7quyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiMo4jUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/495mynxb6dll3dr7quyg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its working !! Have a great day 😊 😇&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>i18n</category>
      <category>indianlanguages</category>
      <category>multilingual</category>
    </item>
    <item>
      <title>Build a Netflix Landing Page Clone with HTML, CSS &amp; JS</title>
      <author>ali-dev-hash</author>
      <pubDate>Thu, 08 Apr 2021 13:48:30 +0000</pubDate>
      <link>https://dev.to/alidevhash/build-a-netflix-landing-page-clone-with-html-css-js-4c67</link>
      <guid>https://dev.to/alidevhash/build-a-netflix-landing-page-clone-with-html-css-js-4c67</guid>
      <description>&lt;p&gt;Build a Netflix Landing Page Clone with HTML, CSS &amp;amp; JS.&lt;/p&gt;

&lt;p&gt;This will sharpen your HTML , CSS Grids, and JavaScript skills.&lt;/p&gt;

&lt;p&gt;All the images files are taken from real netflix website.&lt;/p&gt;


&lt;p&gt;Source Code  &lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://codepen.io/Bilal1909/pen/zYNBWoa"&gt;&lt;/a&gt;&lt;a href="https://codepen.io/Bilal1909/pen/zYNBWoa"&gt;https://codepen.io/Bilal1909/pen/zYNBWoa&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How the terms AI, Machine Learning and Operations Research differs from each other and relates to each other</title>
      <author>kiransamsam</author>
      <pubDate>Thu, 08 Apr 2021 13:47:00 +0000</pubDate>
      <link>https://dev.to/kiransamsam/how-the-terms-ai-machine-learning-and-operations-research-differs-from-each-other-and-relates-to-each-other-2hh3</link>
      <guid>https://dev.to/kiransamsam/how-the-terms-ai-machine-learning-and-operations-research-differs-from-each-other-and-relates-to-each-other-2hh3</guid>
      <description>&lt;p&gt;AI is a section or subset of Artificial Intelligence, as you may be knowing. Be that as it may, Operations Research is completely totally different from the two advances. It is the way toward improving the activities of an actual organization, group, or association. What essentially Operations Research does is that it relates every one of the factors that go into making tasks smooth and thinks about them to make the conditions of different factors, which when controlled, will create the ideal outcomes. &lt;/p&gt;

&lt;p&gt;Though AI is tied in with emulating the human mind, its neuro associations, and the practices and dynamic capacities, to perform human-situated undertakings, effectively with no type of human mediation. AI is a sub-area of AI, that centers around preparing a PC or machine from a particular arrangement of datasets, that at that point prepares the model to play out the errands appointed to them effectively and figure out how to improve them en route. &lt;/p&gt;

&lt;p&gt;The connection between them could be the subjects engaged with it, Operations Research should be possible just with insights, then again, AI, and Machine Learning both require Probability and Statistics. In the event that you wish to dominate AI, or Machine Learning look at the &lt;a href="https://intellipaat.com/artificial-intelligence-deep-learning-course-with-tensorflow/"&gt;Artificial Intelligence course&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>operations</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>What no one told you about CSS Variables</title>
      <author>Temani Afif</author>
      <pubDate>Thu, 08 Apr 2021 13:33:09 +0000</pubDate>
      <link>https://dev.to/afif/what-no-one-told-you-about-css-variables-553o</link>
      <guid>https://dev.to/afif/what-no-one-told-you-about-css-variables-553o</guid>
      <description>&lt;p&gt;CSS Variables are great but do you know everything about them? &lt;/p&gt;

&lt;p&gt;In this post, I will highlight few quirks around CSS variables that no one talk about. After that, you won't look at them the same way anymore.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-be-careful-with-raw-important-endraw-"&gt;Be careful with &lt;code&gt;!important&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-they-cannot-store-urls"&gt;They cannot store urls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-they-can-make-an-invalid-value-valid"&gt;They can make an invalid value valid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-they-can-be-used-uniteless"&gt;They can be used uniteless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-they-can-be-animated"&gt;They can be animated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-they-cannot-store-the-raw-inherit-endraw-value"&gt;They cannot store the &lt;code&gt;inherit&lt;/code&gt; value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-they-can-be-empty"&gt;They can be empty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-css-variables-are-not-c-variables"&gt;CSS variables are not C++ variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-they-only-work-from-parent-to-child"&gt;They only work from parent to child&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-they-can-have-strange-syntaxes"&gt;They can have strange syntaxes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#1-be-careful-with-raw-important-endraw-"&gt;
  &lt;/a&gt;
  1) Be careful with &lt;code&gt;!important&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;!important&lt;/code&gt; with CSS variables is a bit tricky so let's start with a basic example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What will be the color of &lt;code&gt;p&lt;/code&gt;? you think it's &lt;code&gt;red&lt;/code&gt; because we will have the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But it's not! the color of &lt;code&gt;p&lt;/code&gt; will be blue because we will have the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;!important&lt;/code&gt; in this case isn't part of the value of color but is used to increase the specificity of &lt;code&gt;--color&lt;/code&gt;. From &lt;a href="https://www.w3.org/TR/css-variables-1/#syntax"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Custom properties can contain a trailing !important, but this is automatically removed from the property’s value by the CSS parser, &lt;strong&gt;and makes the custom property "important" in the CSS cascade&lt;/strong&gt;. In other words, the prohibition on top-level "!" characters does not prevent !important from being used, as the !important is removed before syntax checking happens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is another example to better understand:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above will give us a &lt;code&gt;red&lt;/code&gt; color:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We have two declarations of the same property called &lt;code&gt;--color&lt;/code&gt; so we need to resolve the cascade. The first one is having &lt;code&gt;!important&lt;/code&gt; so it wins&lt;/li&gt;
&lt;li&gt;We have our winner (&lt;code&gt;--color:red!important&lt;/code&gt;) so &lt;code&gt;!important&lt;/code&gt; is removed then the value is applied to &lt;code&gt;color&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We have &lt;code&gt;color:red&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's make our code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Following the same logic, we resolve the cascade for &lt;code&gt;--color&lt;/code&gt; and for &lt;code&gt;color&lt;/code&gt;. &lt;code&gt;--color:red!important&lt;/code&gt; is the winner and the same for &lt;code&gt;color:blue&lt;/code&gt; so at the end we have &lt;code&gt;blue&lt;/code&gt; because we no more care about &lt;code&gt;color:var(--color)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;important&lt;/em&gt; rule is to always consider CSS variables (custom properties) as ordinary properties and not only variables that store values.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Custom properties are &lt;strong&gt;ordinary properties&lt;/strong&gt;, so they can be declared on any element, are resolved with the normal inheritance and &lt;strong&gt;cascade rules&lt;/strong&gt;, can be made conditional with @media and other conditional rules, can be used in HTML’s style attribute, can be read or set using the CSSOM, etc. &lt;sup&gt;&lt;a href="https://www.w3.org/TR/css-variables-1/#syntax"&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#2-they-cannot-store-urls"&gt;
  &lt;/a&gt;
  2) They cannot store urls
&lt;/h3&gt;

&lt;p&gt;This is a common limitation you will stumble upon one day.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-you-cannot-do"&gt;
  &lt;/a&gt;
  What you cannot do ❌
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;"https://picsum.photos/id/1/200/300"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sx"&gt;url(var(--url)&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#what-you-should-do"&gt;
  &lt;/a&gt;
  What you should do ✔️
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sx"&gt;url("https://picsum.photos/id/1/200/300")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This limitation is related to how &lt;code&gt;url()&lt;/code&gt; is parsed. A bit tricky to explain but as we can see the fix is pretty easy. Always add the &lt;code&gt;url()&lt;/code&gt; part within the CSS variable.&lt;/p&gt;

&lt;p&gt;If you want more accurate detail, I advise reading this &lt;a href="https://stackoverflow.com/a/42331003/8620333"&gt;Stack Overflow answer&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#3-they-can-make-an-invalid-value-valid"&gt;
  &lt;/a&gt;
  3) They can make an invalid value valid!
&lt;/h3&gt;

&lt;p&gt;This one is my favorite quirk and it's the one that will give you a lot of headaches.&lt;/p&gt;

&lt;p&gt;Let's start with a basic example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linaer-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;.box&lt;/code&gt; will have a gradient coloration ... wait, no it has a &lt;code&gt;red&lt;/code&gt; background. Ah! I made a typo in &lt;code&gt;linear-*&lt;/code&gt;. I can easily notice my mistake because the browser crossed the declaration and used the previous one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t0OkbXhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eldcxl1boyhs2343058s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0OkbXhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eldcxl1boyhs2343058s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's introduce a variable:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linaer-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Test the code and you will see that the background is now transparent and our second declaration is no more crossed because it's now a valid one. You will even notice that the first declaration is the one crossed because the second one override it.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-the-hell-is-happening-here-"&gt;
  &lt;/a&gt;
  What the hell is happening here ??!!
&lt;/h4&gt;

&lt;p&gt;When using a variable within a property the browser will only evaluate the value of such property at "computed-value time" because we need to first know the content of the variable. In such case, the browser will consider the value as &lt;em&gt;valid&lt;/em&gt; when doing the cascade and only later it will become &lt;em&gt;invalid&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In our case, the browser is considering the last declaration after resolving the cascade. Then when doing the evaluation, it seems to be invalid so it will be ignored. We won't get back to the previous declaration since we already resolved the cascade and we end with no background so a transparent one.&lt;/p&gt;

&lt;p&gt;You may think such behavior is illogical but it's indeed logical because a value can be &lt;em&gt;valid&lt;/em&gt; or &lt;em&gt;invalid&lt;/em&gt; based on the CSS variable so the browser cannot really know from the beginning.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* a "valid" variable */&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* a "valid" declaration */&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* a "valid" declaration that will override the first one  */&lt;/span&gt;
  &lt;span class="c"&gt;/* The result is an "invalid" value ... */&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A declaration can be invalid at computed-value time if it contains a var() that references a custom property with its initial value, as explained above, or if it uses a valid custom property, but the property value, after substituting its var() functions, is invalid. &lt;strong&gt;When this happens, the computed value of the property is either the property’s inherited value or its initial value&lt;/strong&gt; depending on whether the property is inherited or not, respectively, as if the property’s value had been specified as the unset keyword. &lt;sup&gt;&lt;a href="https://www.w3.org/TR/css-variables-1/#invalid-variables"&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use easy words: a CSS variable will make the status of a propery in a standby mode until we do the evaluation. Only after the evaluation we can say if it's valid or invalid. If it's invalid then it's too late, we cannot get back to use another one.&lt;/p&gt;

&lt;p&gt;A related &lt;a href="https://stackoverflow.com/q/66127664/8620333"&gt;Stack Overflow question&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#4-they-can-be-used-uniteless"&gt;
  &lt;/a&gt;
  4) They can be used uniteless
&lt;/h3&gt;

&lt;p&gt;Almost all the tutorials/courses will show you such example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="py"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But you can also do the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="py"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Having the unit in the variable isn't mandatory and in some case it's even better to use a uniteless value because adding a unit is fairly easy and we may need to use the same value with different unit.&lt;/p&gt;

&lt;p&gt;Here is one example among many (taken from &lt;a href="https://stackoverflow.com/a/60243510/8620333"&gt;this answer&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abpyrmq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Never forget this important feature. It will save you one day.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#5-they-can-be-animated"&gt;
  &lt;/a&gt;
  5) They can be animated
&lt;/h3&gt;

&lt;p&gt;Initially, CSS variables are defined to be non-animatable properties as per &lt;a href="https://www.w3.org/TR/css-variables-1/#defining-variables"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Animatable:    no&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But things have changed and thanks to the new &lt;a href="https://drafts.css-houdini.org/css-properties-values-api-1/#at-property-rule"&gt;&lt;code&gt;@property&lt;/code&gt;&lt;/a&gt; we can do animation/transition with CSS variables.&lt;/p&gt;

&lt;p&gt;The support is still low (especially on Firefox) but it's time to get to know this.&lt;/p&gt;

&lt;p&gt;Find below some use cases where I am relying on such feature:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/we-can-finally-animate-css-gradient-kdk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;We can finally animate CSS gradient&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Feb 26 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/css-only-fragmentation-effect-using-one-element-18kg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS only fragmentation effect using one element&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Mar 23 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I will be writing more articles to show the magic we can do with this. Stay tuned!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-they-cannot-store-the-raw-inherit-endraw-value"&gt;
  &lt;/a&gt;
  6) They cannot store the &lt;code&gt;inherit&lt;/code&gt; value
&lt;/h3&gt;

&lt;p&gt;Let's consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Intuitively, we may think that &lt;code&gt;.item&lt;/code&gt; will inherit the same border of its parent element because &lt;code&gt;--b&lt;/code&gt; contain &lt;code&gt;inherit&lt;/code&gt; but it won't (you can try and see).&lt;/p&gt;

&lt;p&gt;As I explained in the (1), the common mistake is to think that CSS variables will simply store value that we can use later but no. CSS variables (custom properties) are &lt;strong&gt;ordinary properties&lt;/strong&gt; so &lt;code&gt;inherit&lt;/code&gt; &lt;em&gt;apply&lt;/em&gt; to them and is not store inside them.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* we define the variable on the parent */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* the child will inherit the same value so "5px solid blue"*/&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* we will have "5px solid blue" */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, the logic of inheritance apply to them the same way as with common properties.&lt;/p&gt;

&lt;p&gt;Worth to note that doing the above is useless because CSS variables are by default inherited. It's like setting &lt;code&gt;inherit&lt;/code&gt; to a property that is by default inherited (&lt;code&gt;color&lt;/code&gt; for example).&lt;/p&gt;

&lt;p&gt;This said, I have elaborated a technique to be able to use CSS variables with &lt;code&gt;inherit&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/53239880/how-to-store-inherit-value-inside-a-css-variable-aka-custom-property" rel="noopener noreferrer"&gt;
               How to store inherit value inside a CSS variable (aka custom property)?
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Nov 10 '18&lt;/span&gt;
            &lt;span&gt;Comments: &lt;/span&gt;
            &lt;span&gt;Answers: 1&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/53239880/how-to-store-inherit-value-inside-a-css-variable-aka-custom-property" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          2
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;Let's consider this simplified example in order to illustrate the issue:&lt;/p&gt;
&lt;div class="snippet" data-lang="js"&gt;
&lt;div class="snippet-code snippet-currently-hidden"&gt;
&lt;pre class="snippet-code-css lang-css prettyprint-override"&gt;&lt;code&gt;:root {
  --color:rgba(20,20,20,0.5); /*defined as the default value*/
}

.box {
  width:50px;
  height:50px;
  display:inline-block;
  margin-right:30px;
  border-radius:50%;
  position:relative;
}
.red {background:rgba(255,0,0,0.5);}
.blue {background:rgba(0,255,0,0.5);}

.box:before{
  content:"";
  position:absolute;
  top:0;left:0;right:0;bottom:0;
  border-radius:50%;
  transform:translateX(30px);
  background:var(--color);
  filter:invert(1);
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="snippet-code-html lang-html prettyprint-override"&gt;&lt;code&gt;&amp;lt;!-- we can&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;br&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
&lt;br&gt;
    &lt;br&gt;
      &lt;a href="https://stackoverflow.com/questions/53239880/how-to-store-inherit-value-inside-a-css-variable-aka-custom-property" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;&lt;br&gt;
    &lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;The same logic apply to other keywords like &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;revert&lt;/code&gt;: &lt;a href="https://stackoverflow.com/q/61797468/8620333"&gt;How to set CSS variable to the value unset, “--unset-it: unset”?&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-they-can-be-empty"&gt;
  &lt;/a&gt;
  7) They can be empty
&lt;/h3&gt;

&lt;p&gt;Yes you can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above is valid as per &lt;a href="https://www.w3.org/TR/css-variables-1/#syntax"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: While &lt;code&gt;&amp;lt;declaration-value&amp;gt;&lt;/code&gt; must represent at least one token, that one token may be &lt;strong&gt;whitespace&lt;/strong&gt;. This implies that &lt;code&gt;--foo: ;&lt;/code&gt; is valid, and the corresponding &lt;code&gt;var(--foo)&lt;/code&gt; call would have a single space as its substitution value, but &lt;code&gt;--foo:;&lt;/code&gt; is invalid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pay attention to the last sentence because we need to have at least one space. The below is invalid:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBR3POxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/botya61f4c5j6dwrjxd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBR3POxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/botya61f4c5j6dwrjxd8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This quirk is mainly used with the fallback feature to do some magic.&lt;/p&gt;

&lt;p&gt;A basic example to understand the trick:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I will have `background:linear-gradient(blue,transparent) red;`
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--color:green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I will have `background:linear-gradient(blue,transparent) green;`
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--color: ;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I will have `background:linear-gradient(blue,transparent)  ;`
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;The first box has no variable defined so the fallback will get used.&lt;/li&gt;
&lt;li&gt;The second one has a variable defined so it will get used&lt;/li&gt;
&lt;li&gt;The last one defined an empty variable so that &lt;em&gt;emptyness&lt;/em&gt; will be used. It's like we no more have the &lt;code&gt;var(--color,red)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The empty value allow us to &lt;em&gt;remove&lt;/em&gt; the &lt;code&gt;var()&lt;/code&gt; declaration from a property! This can be useful when using &lt;code&gt;var()&lt;/code&gt; within a complex value.&lt;/p&gt;

&lt;p&gt;In case &lt;code&gt;var()&lt;/code&gt; is used alone, the same logic apply but we will end having an empty value which is invalid for most of the properties.&lt;/p&gt;

&lt;p&gt;If we took our first example we will have &lt;code&gt;background: ;&lt;/code&gt; which will lead to an invalid value at "computed-value time" (remember the (3)) so a transparent background.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#8-css-variables-are-not-c-variables"&gt;
  &lt;/a&gt;
  8) CSS variables are not C++ variables
&lt;/h3&gt;

&lt;p&gt;Unfortunately, many developers tend to compare CSS variables to variables of other languages and end having a lot of issues in their logic. For this specific reason, I don't want to call them variables but Custom properties because they are &lt;em&gt;properties&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What everyone want to do&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* let's increment by 1px */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* let's do a variable switch */&lt;/span&gt;
  &lt;span class="py"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* I want 10px of margin */&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c"&gt;/* then 20px of padding */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All the above will never work. The first two are simply invalid because we have a &lt;a href="https://www.w3.org/TR/css-variables-1/#cycles"&gt;&lt;em&gt;cyclic dependencies&lt;/em&gt;&lt;/a&gt; since a variable is refering to itself (first example) or a group of variables are creating a cycle (the second example). &lt;/p&gt;

&lt;p&gt;In The last example, both &lt;code&gt;padding&lt;/code&gt; and &lt;code&gt;margin&lt;/code&gt; will have &lt;code&gt;20px&lt;/code&gt; because the cascade will give priority to the last declaration &lt;code&gt;--s: 20px&lt;/code&gt; that will get applied to both &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This said, you should stop thinking C++, Javascript, Java, etc when working with CSS variables because they are &lt;em&gt;custom properties&lt;/em&gt; having their own logic.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#9-they-only-work-from-parent-to-child"&gt;
  &lt;/a&gt;
  9) They only work from parent to child.
&lt;/h3&gt;

&lt;p&gt;Remember this gold rule: CSS variables always &lt;em&gt;travel&lt;/em&gt; from a parent element (or an ancestor) to child elements. They never &lt;em&gt;travel&lt;/em&gt; from child to parent or between sibling elements.&lt;/p&gt;

&lt;p&gt;This will lead us to the following mistake:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--grad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--grad&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You think the background of &lt;code&gt;.box&lt;/code&gt; will be &lt;code&gt;linear-gradient(green, blue)&lt;/code&gt;? No, it will be &lt;code&gt;linear-gradient(red, blue)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The root element is the uppermost element in the DOM so its an ancestor of our &lt;code&gt;box&lt;/code&gt; element and our gold rule says that we can only do &lt;em&gt;parent --&amp;gt; child&lt;/em&gt; so &lt;code&gt;--c1&lt;/code&gt; cannot go in the opposite direction to reach the root element, change &lt;code&gt;--grad&lt;/code&gt; and then we get back in the other direction to re-send the changed value of &lt;code&gt;--grad&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In such example, the &lt;code&gt;.box&lt;/code&gt; will inherit the value of &lt;code&gt;--grad&lt;/code&gt;  defined with the values of &lt;code&gt;--c1&lt;/code&gt; and &lt;code&gt;--c2&lt;/code&gt; inside root. Changing &lt;code&gt;--c1&lt;/code&gt; will simply change the value of &lt;code&gt;--c1&lt;/code&gt; inside &lt;code&gt;.box&lt;/code&gt;, nothing more.&lt;/p&gt;

&lt;p&gt;Find below a more detailed answer I wrote around this subject:&lt;/p&gt;


&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/52015737/css-scoped-custom-property-ignored-when-used-to-calculate-variable-in-outer-scop" rel="noopener noreferrer"&gt;
               CSS scoped custom property ignored when used to calculate variable in outer scope
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Aug 25 '18&lt;/span&gt;
            &lt;span&gt;Comments: 2&lt;/span&gt;
            &lt;span&gt;Answers: 1&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/52015737/css-scoped-custom-property-ignored-when-used-to-calculate-variable-in-outer-scop" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          15
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;I'm attempting to scale size via a &lt;code&gt;var&lt;/code&gt; custom property in a way that the classes would compose without being coupled. The desired effect is that the 3 lists would be at 3 different scales but as &lt;a href="https://codepen.io/ryanve/pen/WgrjxL" rel="noreferrer"&gt;demonstrated on CodePen&lt;/a&gt; all 3 lists are the same scale. I'm looking for…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/52015737/css-scoped-custom-property-ignored-when-used-to-calculate-variable-in-outer-scop" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Even the &lt;a href="https://stackoverflow.com/q/58206867/8620333"&gt;Stack Overflow team&lt;/a&gt; stumbled upon this quirk!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-they-can-have-strange-syntaxes"&gt;
  &lt;/a&gt;
  10) They can have strange syntaxes
&lt;/h3&gt;

&lt;p&gt;A last and funny quirk. &lt;/p&gt;

&lt;p&gt;Did you know that you can do the following?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Amazing, right? Yes, a CSS variable can be defined using only the two dashes. &lt;/p&gt;

&lt;p&gt;You think the above is crazy, take a look at the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="err"&gt;--📕:red;&lt;/span&gt;
 &lt;span class="err"&gt;--📗:green;&lt;/span&gt; 
 &lt;span class="err"&gt;--📘:blue;&lt;/span&gt;
 &lt;span class="err"&gt;--📙:orange;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, emojis! you can define your variables using emojis and it works.&lt;/p&gt;

&lt;p&gt;The syntax of CSS variables allow almost everything the only requirement is to start with &lt;code&gt;--&lt;/code&gt;. You can also start with a number (ex: &lt;code&gt;--1:&lt;/code&gt;). Related: &lt;a href="https://stackoverflow.com/q/66941906/8620333"&gt;Can a css variable name start with a number?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why not only dashes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;---------&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;---------&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or the same variable storing two different values&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--‎​&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--‎&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--‎​&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--‎&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try the above and you will get a gradient coloration!&lt;/p&gt;

&lt;p&gt;To achieve such magic I am relying on a hidden character that make both of the variables different but &lt;em&gt;visually&lt;/em&gt; we see them the same. If you try the code on &lt;a href="https://jsfiddle.net"&gt;jsfiddle.net&lt;/a&gt; You will see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5offe6Aa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3mxu4h4dnzqvn5t0wry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5offe6Aa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3mxu4h4dnzqvn5t0wry.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, you should never use such thing in a real project unless you want to make your boss and coworkers crazy 😜&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;I know it's a lot information at once but you don't have to remember everything. I tried to group the most unknown and non-intuitive behaviors around CSS variables. If one day something is not working as expected, get back here. You will probably find your answer in the above.&lt;/p&gt;

&lt;p&gt;I will end with some Stack Overflow questions I have answered that can be useful:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/48639882/8620333"&gt;How can I get a negative value of a CSS variables in a calc() expression?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/55329996/8620333"&gt;How to create color shades using CSS variables similar to darken() of SASS?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/51063555/8620333"&gt;How to Use calc() to switch between color values?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/49973885/8620333"&gt;Can a recursive variable be expressed in css?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/56229772/8620333"&gt;Get computed value of CSS variable that uses an expression like calc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/55931363/8620333"&gt;Are CSS Variable changes possible upon a radio button's checked selector being triggered?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How hexadecimal notation works for CSS colors</title>
      <author>Kilian Valkhof</author>
      <pubDate>Thu, 08 Apr 2021 13:30:01 +0000</pubDate>
      <link>https://dev.to/kilianvalkhof/how-hexadecimal-notation-works-for-css-colors-2693</link>
      <guid>https://dev.to/kilianvalkhof/how-hexadecimal-notation-works-for-css-colors-2693</guid>
      <description>&lt;p&gt;Hexadecimal notation are colors that start with a "#". For example, &lt;code&gt;#ff0000&lt;/code&gt; is red and &lt;code&gt;#ff00ff&lt;/code&gt; is pink. But how do I know which colors they are? Read on to find out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-hecadecimal-works"&gt;
  &lt;/a&gt;
  How hecadecimal works
&lt;/h2&gt;

&lt;p&gt;Each color starts with a &lt;code&gt;#&lt;/code&gt;. Then there are three pairs of numbers, where each pair is the red, green and blue component of a color. &lt;/p&gt;

&lt;p&gt;Visually, that looks like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;red&lt;/th&gt;
&lt;th&gt;green&lt;/th&gt;
&lt;th&gt;blue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;00&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;00&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;00&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;These numbers are in hexadecimal (16 steps), so they don't count from 0 to 9 like we do, but from 0 to F. To make up for the missing numbers after 9, they go to "A", "B" all the way to "F". It doesn't matter if you use lower case or uppercase.&lt;/p&gt;

&lt;p&gt;Because there's a pair of numbers it means there are 255 steps, from &lt;code&gt;00&lt;/code&gt;, to &lt;code&gt;02&lt;/code&gt;, &lt;code&gt;03&lt;/code&gt;, all the way to &lt;code&gt;FF&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-that-make-colors"&gt;
  &lt;/a&gt;
  How does that make colors?
&lt;/h2&gt;

&lt;p&gt;The color &lt;code&gt;#ff0000&lt;/code&gt; has as much red as possible (&lt;code&gt;ff&lt;/code&gt;), no green (&lt;code&gt;00&lt;/code&gt;) and no blue (also &lt;code&gt;00&lt;/code&gt;). In other words, it's fully red. &lt;/p&gt;

&lt;p&gt;The color &lt;code&gt;#ffff00&lt;/code&gt; is likewise as much red as possible, as much green as possible and no blue. Red and green together make yellow. &lt;/p&gt;

&lt;p&gt;Lastly, &lt;code&gt;#ffffff&lt;/code&gt; is all red, all green and all blue or in other words, full white (and &lt;code&gt;#000000&lt;/code&gt; is full black).&lt;/p&gt;

&lt;p&gt;When all the colors are the same it means not one color is more visible than the other, making the result grey. &lt;code&gt;#111111&lt;/code&gt;, &lt;code&gt;#666666&lt;/code&gt; and &lt;code&gt;#9a9a9a&lt;/code&gt; are all shades of grey. Likewise, when the numbers are close together, they are desaturated (closer to gray)&lt;/p&gt;

&lt;p&gt;In hexadecimal notation, &lt;code&gt;88&lt;/code&gt; is the middle point . Anything above that is light, anything below it is dark.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#color-notation-variations"&gt;
  &lt;/a&gt;
  Color notation variations
&lt;/h2&gt;

&lt;p&gt;In CSS there are three variations on the hexadecimal notation. &lt;/p&gt;

&lt;p&gt;You can add a fourth pair of numbers, which correspond to the Alpha of a color, the transparency. So &lt;code&gt;#ff000088&lt;/code&gt; would be fully red at half transparency. &lt;/p&gt;

&lt;p&gt;There is also the short notation, which has just three numbers. In it &lt;code&gt;#f00&lt;/code&gt; is the same as &lt;code&gt;#ff0000&lt;/code&gt;. The single numbers are automatically expanded by browsers. &lt;/p&gt;

&lt;p&gt;Likewise this three number notation can also get a fourth number that encodes the transparency. &lt;code&gt;#f008&lt;/code&gt; is fully red at half transparency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-a-color"&gt;
  &lt;/a&gt;
  "Reading" a color
&lt;/h2&gt;

&lt;p&gt;When I read a color, I find it most useful to ignore each second number in a pair since it doesn't have a drastic effect. &lt;/p&gt;

&lt;p&gt;So for example the color&lt;code&gt;#e5e7b1&lt;/code&gt; would be: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;E&lt;/code&gt; for red, which is not fully red (that would be &lt;code&gt;F&lt;/code&gt;) but very close to it. &lt;/li&gt;
&lt;li&gt;Same for green which also has an &lt;code&gt;E&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The blue component is a &lt;code&gt;B&lt;/code&gt;, so it has a bit less blue. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result of this is then a light yellow.&lt;/p&gt;

&lt;p&gt;And fo another color, &lt;code&gt;#123456&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;12&lt;/code&gt; for red, so basically no red &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;34&lt;/code&gt; for green, so a little bit of green&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;45&lt;/code&gt; for blue, so a bit more of blue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All are way below 88 though, so this would be a dark, somewhat desaturated (since the colors are close to each other) blue. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This was adapted from an explanation I gave to someone not able to see colors but that still wanted to understand how they worked. I hope this is useful to other people as well!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
