<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Impressions of Polywork</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Wed, 18 Aug 2021 19:58:35 +0000</pubDate>
      <link>https://dev.to/nickytonline/impressions-of-polywork-3pbp</link>
      <guid>https://dev.to/nickytonline/impressions-of-polywork-3pbp</guid>
      <description>&lt;p&gt;Polywork is a new professional platform that has been getting a lot of attention lately. I can't remember exactly where I came across it initially on Twitter. I think &lt;a class="mentioned-user" href="https://dev.to/aspittel"&gt;@aspittel&lt;/a&gt;
 (Ali Spittel) may have Tweeted about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-access-to-polywork"&gt;
  &lt;/a&gt;
  Getting Access to Polywork
&lt;/h2&gt;

&lt;p&gt;I &lt;a href="https://www.polywork.com/users/sign_up"&gt;signed up for the waiting list&lt;/a&gt;, gave their &lt;a href="https://twitter.com/PolyworkHQ"&gt;Twitter account&lt;/a&gt; a follow, and one Sunday afternoon, the Twitter account tweeted out an invite code to bypass the waitlist. I was in! 😎&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: They give out invite codes pretty frequently or retweet folks who have invite codes to give, so I highly recommend following their Twitter account.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onboarding"&gt;
  &lt;/a&gt;
  Onboarding
&lt;/h2&gt;

&lt;p&gt;I secured my handle, &lt;em&gt;nickytonline&lt;/em&gt;, because &lt;a href="https://www.iamdeveloper.com/pages/social/"&gt;that's me everywhere on the Internet&lt;/a&gt;. It's been a couple of months, so I don't remember most of the onboarding process, but I remember choosing your assistant as part of the onboarding—a fun touch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OjZ4MEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoaz3ladpk05d9endst0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OjZ4MEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoaz3ladpk05d9endst0.png" alt="Polywork assitant"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you've onboarded recently, let me know what aspects I've missed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first thing I enjoyed about Polywork was the minimal design (like Zen mode in your editor for all the devs out there).&lt;/p&gt;

&lt;p&gt;I completed the intro section and added some initial badges to my profile. Badges in the context of Polywork are interests and skills you have. I work in open source, and I snowboard, so I added two badges to my profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N52zyS4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwyf96wnsevx9juwoe7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N52zyS4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwyf96wnsevx9juwoe7a.png" alt="Polywork badges section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#positions"&gt;
  &lt;/a&gt;
  Positions
&lt;/h2&gt;

&lt;p&gt;Like other professional networks, you can add the positions you've held.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4O__IbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmqggolywg2d1sm3ubu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4O__IbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmqggolywg2d1sm3ubu5.png" alt="Polywork positions section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One exciting feature that rolled out after I had signed up was Highlights for starting and leaving positions generated automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcCjBs5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3994nynfjawd5cwl5iw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcCjBs5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3994nynfjawd5cwl5iw.png" alt="Polywork ended and started a new role highlights"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeline"&gt;
  &lt;/a&gt;
  Timeline
&lt;/h3&gt;

&lt;p&gt;The main area of prominence on your profile page is the timeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVPTzXNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p27njvml14ijk8zkmcmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVPTzXNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p27njvml14ijk8zkmcmz.png" alt="Polywork timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's where you'll spend most of your time filling out your profile. It took me a while to add my work here, but mainly because I was backfilling many things I've done. Filling out the timeline was nostalgic, and I realized how much I've accomplished once I saw it all in chronological order.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-highlight"&gt;
  &lt;/a&gt;
  Creating a Highlight
&lt;/h3&gt;

&lt;p&gt;To add to the timeline, click on the &lt;em&gt;Highlight&lt;/em&gt; button at the top of your Polywork profile. It will open a modal where you can fill in the work or activity you want to record.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ORchN2LM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uebhi56s43za5xv5vegw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ORchN2LM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uebhi56s43za5xv5vegw.png" alt="Creating a Polywork highlight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h4&gt;

&lt;p&gt;Aside from the content of the highlight, you can add one or more tags like &lt;em&gt;Contributed to Open Source&lt;/em&gt;. Tags you've recently used are available to you right in the initial highlight editor view. If you want to add a new one, click on the &lt;strong&gt;Add Activity Tags&lt;/strong&gt; button to search for tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JefgEdvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdbbeyyzc4csct3re9db.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JefgEdvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdbbeyyzc4csct3re9db.png" alt="Polywork add a tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If a tag does not exist, you can create it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UJujKfPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo8bormdpemvme4ctchx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UJujKfPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo8bormdpemvme4ctchx.png" alt="Polywork create new tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-collaborators"&gt;
  &lt;/a&gt;
  Adding Collaborators
&lt;/h4&gt;

&lt;p&gt;If you've collaborated on something, you can add collaborators to a highlight by clicking on the two-person icon at the bottom of the highlight editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qGrSwZOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dd0mrd7z9bjh352ptdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qGrSwZOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dd0mrd7z9bjh352ptdr.png" alt="Polywork adding a collaborator button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add as many collaborators as you want. I'm sure there is a limit; I just haven't reached it yet. 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Lxf56ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5oeoq25fgta8b70qo49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Lxf56ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5oeoq25fgta8b70qo49.png" alt="Polywork add collaborators"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing to note about collaborators is they have to confirm they collaborated with you. It prevents people from being needlessly tagged on highlights and adds more authenticity to a piece of collaborative work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reposting-a-someones-highlight"&gt;
  &lt;/a&gt;
  Reposting a Someone's Highlight
&lt;/h3&gt;

&lt;p&gt;At first glance, this looks like retweeting on Twitter, but it's a bit different. For one thing, you cannot repost anyone's highlight. As far as I’m aware, the only way you can repost is if someone collaborated with you. Once you confirm that you collaborated with someone, you will be able to repost their highlight.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FRSk1lEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17rxhti3wp0zp2l2915e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRSk1lEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17rxhti3wp0zp2l2915e.png" alt="A Polywork reposted highlight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering"&gt;
  &lt;/a&gt;
  Filtering
&lt;/h3&gt;

&lt;p&gt;A newer feature that dropped recently is anyone, including yourself, can filter your timeline based on one or more badges you have associated with your profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15BZPWNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3odk7f4cmxm45bcq2np7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15BZPWNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3odk7f4cmxm45bcq2np7.png" alt="Polywork, filtering your timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is an excellent way for folks to surface certain kinds of work you've done. For example, here's my timeline filtered on the &lt;em&gt;Twitch Streamer&lt;/em&gt; badge.&lt;/p&gt;

&lt;p&gt;Note that it also filters reposts on your timeline associated with the badge you filtered on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oKkvX5Yw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weeqa2jg82w1mha7jxe2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKkvX5Yw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weeqa2jg82w1mha7jxe2.png" alt="Polywork, filtering timeline with badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-custom-domain"&gt;
  &lt;/a&gt;
  Setting up a Custom Domain
&lt;/h2&gt;

&lt;p&gt;Another great feature about your profile is you can use a custom domain. Setting a custom domain is available from your profile settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymxVgmVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cttxmz8boembroh3ypb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymxVgmVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cttxmz8boembroh3ypb.png" alt="Polywork, set up a custom domain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps are pretty straightforward. When I initially set things up, I ran into some issues, but improvements to using a custom domain rolled out the following week and then it was smooth sailing setting things up &lt;a href="https://timeline.iamdeveloper.com"&gt;timeline.iamdeveloper.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact-preferences"&gt;
  &lt;/a&gt;
  Contact Preferences
&lt;/h2&gt;

&lt;p&gt;Like other professional and social media applications, you can also contact someone on Polywork. To contact them, you need to specify a reason from the available options they’ve provided.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPWZtHQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhltgezs5akylwspnvyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPWZtHQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhltgezs5akylwspnvyi.png" alt="Polywork contact preferences modal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, my coworker &lt;a href="https://www.polywork.com/cgorton"&gt;Christina&lt;/a&gt; is open to being contacted about speaking at events. Will this stop useless messages like "hi"? Perhaps. If anything, it will give someone pause before contacting an individual on Polywork.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiverse"&gt;
  &lt;/a&gt;
  Multiverse
&lt;/h2&gt;

&lt;p&gt;Think of the Mulitiverse (MV) as a one-stop shop for searching for members of Polywork and work-related highlights associated with badges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41Eiqhxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmvsd3klg67x8ty5rj3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41Eiqhxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmvsd3klg67x8ty5rj3w.png" alt="Polywork multiverse page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are several sections in the MV: featured members, trending badges, folks who have recently joined, what's everyone doing, and possibilities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s unclear to me what the Possibilities section is. Maybe it’s for like-minded folks or folks that you may find interesting based on some algorithm?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-station"&gt;
  &lt;/a&gt;
  Space Station
&lt;/h2&gt;

&lt;p&gt;As mentioned in the Contact Preferences section above, folks can be open to collaborating on specific topics, e.g. People available for live streaming. BTW, I am available for &lt;a href="https://www.iamdeveloper.com/pages/live-coding/"&gt;live streaming&lt;/a&gt;. 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ml23sFcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prvxn4um6ka0pfs3owmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ml23sFcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prvxn4um6ka0pfs3owmg.png" alt="Polywork space station page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of searching for someone then contacting them to see what they're available to collaborate on, Space Station groups folks by the topics they're open to collaborating on to make it easier for you to contact someone for a specific topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  Improvements
&lt;/h2&gt;

&lt;p&gt;The Polywork team is constantly rolling out improvements. If you find a bug or have a suggestion for a feature or improvement, submit an issue. It is available from your profile menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFM3unxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj7r7de2xg0s4z7eesf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFM3unxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj7r7de2xg0s4z7eesf4.png" alt="Submit an issue to Polywork"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I've already submitted some suggestions and improvements myself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Polywork makes so much sense to me&lt;/strong&gt; for exhibiting my work. I &lt;a href="https://www.polywork.com/nickytonline?badges%5B%5D=Open+Source"&gt;work in and contribute to open source&lt;/a&gt;, I &lt;a href="https://www.polywork.com/nickytonline/highlights/af1934a2-8130-457c-9734-3cc6c5e446b3"&gt;stream on Twitch&lt;/a&gt;, have &lt;a href="https://www.polywork.com/nickytonline/highlights/2c5da615-0aef-4494-bc63-f76da0ac3402"&gt;given talks&lt;/a&gt;, been on podcasts, &lt;a href="https://www.polywork.com/nickytonline/highlights/a6be8320-1f80-4184-a38f-3dc9cba1eca0"&gt;built a skating rink&lt;/a&gt;, all the things! &lt;/p&gt;

&lt;p&gt;It's early days for Polywork, but the future is bright. &lt;strong&gt;If you're looking to showcase your work, consider Polywork.&lt;/strong&gt; ✨  Once you get access, give me a follow at &lt;a href="https://timeline.iamdeveloper.com"&gt;timeline.iamdeveloper.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I don't have an infinite supply, but if you need an invite code, &lt;a href="https://twitter.com/nickytonline"&gt;drop me a DM on Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>review</category>
      <category>career</category>
      <category>polywork</category>
    </item>
    <item>
      <title>Gotchas when converting strings to arrays in JS</title>
      <author>lionel-rowe</author>
      <pubDate>Wed, 18 Aug 2021 19:44:47 +0000</pubDate>
      <link>https://dev.to/lionelrowe/gotchas-when-converting-strings-to-arrays-in-js-1n31</link>
      <guid>https://dev.to/lionelrowe/gotchas-when-converting-strings-to-arrays-in-js-1n31</guid>
      <description>&lt;p&gt;This is a response to &lt;a class="mentioned-user" href="https://dev.to/antoomartini"&gt;@antoomartini&lt;/a&gt;
 's great article here, where she describes 4 ways to turn a string into an array:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/antoomartini" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhYfMRpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6o4nJsbe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581836/90503238-0843-4393-bc4e-fb2e0cbca6d1.jpg" alt="antoomartini"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/antoomartini/4-ways-to-convert-a-string-to-an-array-in-javascript-i97" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;4 ways to convert a string to an array in Javascript &lt;/h2&gt;
      &lt;h3&gt;Maria Antonella 🦋 ・ Aug 18 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;However, not all of the 4 ways are equivalent. We can see this when we try to use a string such as &lt;code&gt;'💩'&lt;/code&gt;, rather than a Latin-alphabet string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["\ud83d", "\udca9"]&lt;/span&gt;

&lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ["💩"]&lt;/span&gt;

&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["💩"]&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["\ud83d", "\udca9"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-the-difference"&gt;
  &lt;/a&gt;
  Why the difference?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-stringsplit-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;String#split&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;String#split&lt;/code&gt; matches and splits on &lt;em&gt;16-bit units&lt;/em&gt; as encoded in UTF-16, the internal string representation JavaScript uses.&lt;/p&gt;

&lt;p&gt;You can find what these units are by using index notation, and you can count them using &lt;code&gt;String#length&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "a"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "b"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "\ud83d"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "\udca9"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, something weird is going here. That's because emojis, and various other characters, take up &lt;em&gt;two&lt;/em&gt; 16-bit units (for a total of 32 bits) instead of just one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-objectassign-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Object.assign&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Object.assign(target, source)&lt;/code&gt; assigns the properties of &lt;code&gt;source&lt;/code&gt; to the &lt;code&gt;target&lt;/code&gt;. In this case, &lt;code&gt;source&lt;/code&gt; is &lt;code&gt;'💩'&lt;/code&gt;, and &lt;code&gt;target&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.assign([], '💩')&lt;/code&gt; therefore assigns &lt;code&gt;'💩'&lt;/code&gt;'s property &lt;code&gt;0&lt;/code&gt; to the array's property &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;'💩'&lt;/code&gt;'s property &lt;code&gt;1&lt;/code&gt; to the array's property &lt;code&gt;1&lt;/code&gt;. So we get the same result as with &lt;code&gt;String#split&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-rest-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;[...rest]&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Rest syntax was introduced in ES6. With the introduction of ES6 features, JavaScript started getting a bit smarter with its Unicode handling. Instead of assigning properties, it instead &lt;em&gt;iterates&lt;/em&gt; over the string. String iteration is done based on &lt;em&gt;Unicode codepoints&lt;/em&gt;, rather than 16-bit units. Our friendly poop emoji is only a single Unicode codepoint, so we get the result we want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-arrayfrom-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.from&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As with rest notation, &lt;code&gt;Array.from&lt;/code&gt; came in with ES6. It iterates over the argument passed to it, so again, we get the expected result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Array.from&lt;/code&gt; and rest notation work great for Unicode codepoints, but they still won't cover every situation. Sometimes what &lt;em&gt;looks&lt;/em&gt; like a single glyph is actually multiple Unicode codepoints. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lǜ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NFD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// "lǜ", looks exactly the same, but the ǜ is now composed with combining diacritics&lt;/span&gt;

&lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ["l", "ǜ"]&lt;/span&gt;
&lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nx"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ["l", "u", "̈", "̀"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, for another emoji-based example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emoji&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👩🏿‍💻&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ["👩", "🏿", "‍", "💻"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, it's because the emoji is actually composed of 4 Unicode codepoints, representing &lt;code&gt;woman&lt;/code&gt;, &lt;code&gt;skin tone 6&lt;/code&gt;, &lt;code&gt;zero-width joiner&lt;/code&gt;, and &lt;code&gt;computer&lt;/code&gt; respectively.&lt;/p&gt;




&lt;p&gt;Hope you enjoyed! What are your favorite Unicode tips and tricks or JavaScript Unicode gotchas?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>unicode</category>
    </item>
    <item>
      <title>What tools do you guys use for managing your tasks/goals</title>
      <author>Nishant Mittal</author>
      <pubDate>Wed, 18 Aug 2021 19:25:09 +0000</pubDate>
      <link>https://dev.to/nishantwrp/what-tools-do-you-guys-use-for-managing-your-tasks-1kf8</link>
      <guid>https://dev.to/nishantwrp/what-tools-do-you-guys-use-for-managing-your-tasks-1kf8</guid>
      <description>&lt;p&gt;As the title says, i am intersted in knowing what all tools do you guys use for managing everything like daily tasks, project specs, plans, professional goals, long-term (yearly) goals, kanban baords maybe, etc. &lt;/p&gt;

&lt;p&gt;Currently, I use two tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; - To manage a list of long-term goals, what I want to do focus on for the next couple of months etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.joplinapp.org/"&gt;Joplin&lt;/a&gt; - For managing daily tasks. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>help</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to handle your JWT in your applications ?</title>
      <author>Chandelier Axel</author>
      <pubDate>Wed, 18 Aug 2021 19:19:25 +0000</pubDate>
      <link>https://dev.to/chandelieraxel/how-to-handle-your-jwt-in-your-applications-23d9</link>
      <guid>https://dev.to/chandelieraxel/how-to-handle-your-jwt-in-your-applications-23d9</guid>
      <description>&lt;p&gt;This question is a sensitive subject all over the internet. Wherever you'll look at, peoples tend to be really dogmatic. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Don't store it in Local Storage !!! Don't you know about XSS attacks ?!&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Please stop believing that storing your JWT in an HttpOnly cookie is secure........ You're still exposed to XSRF attacks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You get the idea.&lt;/p&gt;

&lt;p&gt;Long story short, I was looking for informations to build a robust authentication system myself. I did know nothing about the attacks quoted above, and of course, how to protect my application.&lt;/p&gt;

&lt;p&gt;I'll do my best to summarize what I learnt, what are the different techniques and their fallbacks. This article will also try to be as opinion free as possible.&lt;/p&gt;

&lt;p&gt;Without further ado, let's dive in.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-problem-"&gt;
  &lt;/a&gt;
  What is the problem ?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I'll purposely fly through what a JWT is, to focus on the security part. You may find information on their dedicated &lt;a href="https://jwt.io/"&gt;website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Because there's one.&lt;/p&gt;

&lt;p&gt;Let's assume that you're building a new website, and you're on the authentication part. After some research, you find out that the go-to (as time of writing this) is using a JWT, a &lt;strong&gt;J&lt;/strong&gt;son &lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;T&lt;/strong&gt;oken.&lt;/p&gt;

&lt;p&gt;A JWT is basically an encoded string that will contain some basic informations (anything you want). Your server will send it back to you when you'll do your login process, and your client will need to supply it on any further requests where authentication is needed in order to be accepted by the server.&lt;br&gt;
In short, a JWT is a way to identify your user as a legitimate and authenticated one towards your server.&lt;/p&gt;

&lt;p&gt;So .. If we need to supply the JWT on any further request that need authentication, where do we tore it ?&lt;/p&gt;

&lt;p&gt;This is where things get interesting.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#local-storage"&gt;
  &lt;/a&gt;
  Local Storage
&lt;/h2&gt;

&lt;p&gt;My first idea, like a lot of people I believe, was to store my newly obtained JWT in the browser Local Storage. Things would be as simple as :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jwt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jwtYouReceive&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And whenever we need it back :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jwt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Despite beign the easiest way to store our JWT, it turns out that this is, by far, the most insecure way.&lt;br&gt;
By nature, everything stored within the localStorage is accessible through Javascript code. It means that, if &lt;em&gt;somehow&lt;/em&gt; a hacker could execute some JS code in our website, he could steal the JWT, and any of his requests would be accepted as an authenticated user. A way to do so is through an &lt;strong&gt;XSS&lt;/strong&gt; attack.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#xss-attack"&gt;
  &lt;/a&gt;
  XSS Attack
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Cross Site Scripting&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically, an XSS attack happen when some undesirable code is being executed within your website. This can be as gentle as a console.log, but could go as far as stealing informations, our JWT for example.&lt;/p&gt;

&lt;p&gt;Let's just take a very contrived example to understand it better.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20LbWVYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bxztxnq37fg6m9uhhvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20LbWVYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bxztxnq37fg6m9uhhvp.png" alt="Unsecure app schema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty simple, right ? Now here's the catch, what is sent through the form is not being &lt;strong&gt;sanitized&lt;/strong&gt; (meaning any unsecured or unrelated part of the data is removed or escaped), and so an hacker could insert a harmful script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    I juste created an amazing blog post !! 
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;functionToReadYourJWTandSendItToMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
    Please, accept it !
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This get inserted into the database, and when the admin open is page to see the preview of the blog post, the script will be hidden and being executed, succesfully stealing the admin JWT !&lt;/p&gt;

&lt;p&gt;And if the admin accept the blog post, and it get displayed on the website homepage, the script will execute for every visitor that will open the page .. Stealing everyone JWT !&lt;/p&gt;

&lt;p&gt;Here's a recap :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sNai6W5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3mi3tdgh95joq15393b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNai6W5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3mi3tdgh95joq15393b.png" alt="Unsecured app with hacker"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Storing the JWT in localStorage &lt;strong&gt;without&lt;/strong&gt; the proper defences against XSS can be dramatic, this left the hacker with a potential large area of actions all over your website to try to find a breach.&lt;br&gt;
The developpers now have the responsability to check for every possible breach and be mindful when developing new features.&lt;/p&gt;

&lt;p&gt;There are ways to secure our app to XSS, such as sanitizing everything that would go into the database.&lt;/p&gt;

&lt;p&gt;An easy to implement, but somewhat risky solution.&lt;/p&gt;

&lt;p&gt;Second solution.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#httponly-cookie"&gt;
  &lt;/a&gt;
  HttpOnly Cookie
&lt;/h2&gt;

&lt;p&gt;While digging further in order to find informations about localStorage, I've seen a lot of peoples recommending to store the JWT into an &lt;strong&gt;HttpOnly&lt;/strong&gt; Cookie. If you're not confident what a cookie is, feel free to go to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;MDN&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;Be mindful that the &lt;strong&gt;HttpOnly&lt;/strong&gt; part is the most important one. A cookie without the HttpOnly attribute could be read by some JS code, sending us back to the XSS problem.&lt;/p&gt;

&lt;p&gt;By applying the attribute, we restrict the use of this cookie for HTTP requests only, securing us completely from XSS.&lt;/p&gt;

&lt;p&gt;But .. We're now prone to XSRF attacks.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#xsrf-attack"&gt;
  &lt;/a&gt;
  XSRF Attack
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Cross Site Request Forgery&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As the name &lt;em&gt;may&lt;/em&gt; imply, the goal of this attack is to create a request on a malicious website to be executed on the targeted website. Let's take a real world example to understand it better.&lt;/p&gt;

&lt;p&gt;You have your website open and you're logged in. Your JWT is securely stored into an HttpOnly cookie, meaning that every request you send to your server will automatically include the cookie, and so your JWT.&lt;/p&gt;

&lt;p&gt;As every application with a user account, you have the possibility to change some informations by filling a form. This will send to your server a request, it'll verify your JWT, and allow the changes.&lt;/p&gt;

&lt;p&gt;As you navigate to it, you received an email. You open a new tab, open the email and click on the link.&lt;/p&gt;

&lt;p&gt;☠️ The website you lend on have a script that execute as soon as you open the page. Prepared in advance, it execute a request on &lt;strong&gt;your&lt;/strong&gt; website. ☠️&lt;br&gt;
How ? Well, the hacker could have created an account, open the dev tools and saw what was the endpoint to your server.&lt;/p&gt;

&lt;p&gt;Basically the hacker send the same request as you would done, but he control the informations. Your username has been changed, your profile picture aswell .. Maybe even your password.&lt;/p&gt;

&lt;p&gt;The most amazing part about this attack is that the hacker doesn't have to recover the JWT, it's &lt;strong&gt;automatically&lt;/strong&gt; included within the HTTP request.&lt;/p&gt;



&lt;p&gt;There are ways to secure your website from such attacks, which we won't cover here, but most of them tend to be prone to .. XSS.&lt;/p&gt;

&lt;p&gt;Third solution.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#storing-it-into-memory"&gt;
  &lt;/a&gt;
  Storing it into memory
&lt;/h2&gt;

&lt;p&gt;Maybe even a simplier solution than localStorage, the goal is fairly simple. You attribute the JWT to a variable, and make it available for your needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This variable is impossible to reach for a hacker, neither from an XSS or XSRF attacks.&lt;/p&gt;

&lt;p&gt;Such a simple solution as one serious downside : whenever your user will close your website, the next time he'll come back, he'll need to login again, creating a very poor user experience.&lt;/p&gt;

&lt;p&gt;Just like the other solutions, there are ways to mitigate the downsides.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#having-a-refreshtoken"&gt;
  &lt;/a&gt;
  Having a refresh_token
&lt;/h3&gt;

&lt;p&gt;When you request your initial JWT, the plan is to get an extra token, a &lt;strong&gt;refresh_token&lt;/strong&gt; token (which is basically a JWT that will live longer). This token will be saved in the browser within an HttpOnly cookie, aswell as on the server within a database. His goal is to keep the user login without him having to go through the login process everytime your JWT expire, such a process is called a &lt;strong&gt;silent refresh&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can actually use this behavior to &lt;em&gt;pretend&lt;/em&gt; the user session is being persisted. As the refresh_token is stored within the cookies, we can use it across sessions. When our website boot-up, we will trigger a call to a particular endpoint, this endpoint will return a JWT only if the refresh_token is still valid.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- How is this secure if the refresh_token is a JWT too ?&lt;/em&gt;&lt;br&gt;
The refresh_token will &lt;strong&gt;only&lt;/strong&gt; be used and &lt;strong&gt;accepted&lt;/strong&gt; in the particular endpoint that is dedicated to him. Trying to access the rest of the API with it will fail.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- But a hacker could use a XSRF, right ?&lt;/em&gt;&lt;br&gt;
Yes but he won't be able to see the JWT that is returned.&lt;/p&gt;

&lt;p&gt;This method leads to a lot of boilerplate and overhead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;None of the solutions above are bullet-proof, there's always a way for a brilliant attacker to get in. Some solutions are easier to implement, some require more setup but offer an arguably better overall "protection".&lt;/p&gt;

&lt;p&gt;Pick what suit you the best.&lt;/p&gt;

&lt;p&gt;I hope it helped you to understand this incredibly dense topic as much as I did writing this.&lt;/p&gt;

&lt;p&gt;You can find the original article on the &lt;a href="https://othrys.dev/author/axel/"&gt;Othrys website&lt;/a&gt; and you can follow my &lt;a href="https://twitter.com/ChandelierAxel"&gt;Twitter&lt;/a&gt; or tag me here to discuss about this article. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>security</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Best VS Code setup</title>
      <author>Anatolii</author>
      <pubDate>Wed, 18 Aug 2021 19:18:44 +0000</pubDate>
      <link>https://dev.to/pas8/best-vs-code-setup-20fe</link>
      <guid>https://dev.to/pas8/best-vs-code-setup-20fe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;So I have been spending a lot ( so much ) time creating the best coding setup, this story is intended for Javascript or Typescript dev.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extensions-as-separate%C2%A0parts"&gt;
  &lt;/a&gt;
  Extensions as separate parts
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-color%C2%A0theme"&gt;
  &lt;/a&gt;
  1. Color Theme
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9i880gux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g98fumokpyenjguj9rcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9i880gux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g98fumokpyenjguj9rcf.png" alt="Alt Text"&gt;&lt;/a&gt; So this color theme is free to use(something u will need to click to close button ), but you will have the best opportunity to make your coding process so lovely &lt;a href="https://monokai.pro/vscode"&gt;Monokai Pro&lt;/a&gt; (spectrum palette is my choice)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-font"&gt;
  &lt;/a&gt;
  2. Font
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_a7FDJ8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdo0exa2o126ie8x82kd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_a7FDJ8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdo0exa2o126ie8x82kd.png" alt="Alt Text"&gt;&lt;/a&gt; This part is so important, but I need to warn you when you will start using this font, after that, you will not able to use another one because this font is almost perfect ( this font don't have ligatures), but don't worry I added to this font ligatures, and in the near future will write a story about it so you can buy in &lt;a href="https://www.typography.com/fonts/operator/styles"&gt;this site&lt;/a&gt; or download for free from some repo in github &lt;a href="https://github.com/keyding/Operator-Mono/tree/master/Fonts"&gt;Operator mono&lt;/a&gt; (medium is my choice)&lt;br&gt;
 &lt;strong&gt;✳important&lt;/strong&gt; to better coding effect additionally install italic variant, because Monokai Pro color theme supports multi types of fonts&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-icon%C2%A0theme"&gt;
  &lt;/a&gt;
  3. Icon theme
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLdKmVq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuauveo1ine95rq6a14s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLdKmVq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuauveo1ine95rq6a14s.png" alt="Alt Text"&gt;&lt;/a&gt; The most beautiful icon theme (at this moment, which I found) is &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt;. I think 34 million downloads something matter)&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4product-icon%C2%A0theme"&gt;
  &lt;/a&gt;
  4.Product icon theme
&lt;/h4&gt;

&lt;p&gt;At least default icons are not bad, but personally, I more prefer Carbon Product Icons or you can try Fluent Icons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final view of these four setups&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eS-E2jcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hamcd0rdrcekogpeuxft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eS-E2jcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hamcd0rdrcekogpeuxft.png" alt="Alt Text"&gt;&lt;/a&gt; (random project as example)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#main-extensions"&gt;
  &lt;/a&gt;
  Main Extensions
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;At first, extensions which I use everywhere&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager"&gt;Project Manager&lt;/a&gt;,&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkbAC9WP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5mwamtpgxucrtflyaj9.png" alt="Alt Text"&gt; this extension gives u the opportunity to easily open your projects with paths which you will set up, it will be useful when you need some part of code in some project, and with this extension, you can easily navigate.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;Indent Rainbow&lt;/a&gt;,&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb_Dbm17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rremve6ruuj02mi64ec.png" alt="Alt Text"&gt; in this img, not the best ilustration, but I totaly recommend use this extension, this effect I setuped in &lt;code&gt;setting.json&lt;/code&gt;  with this config &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dIR1T-2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rf0dd48lna1ckufjsip.png" alt="Alt Text"&gt; just changing alpha of black color, can be custom, for sure.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ParthR2031.colorful-comments"&gt;Colorful Comments&lt;/a&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLYo_V_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecc1d7tp7djn14sxewc0.png" alt="Alt Text"&gt;this extension will help you create more human-friendly comments in your code.
With this Extension, you will be able to categorize your code by a special color. Also, you can manually change colors in settings, and if you want u can add a background color.
And here u can see integration with italic font type of Operator mono font.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case"&gt;Change case&lt;/a&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqaylgIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zu9sqf2bvcrsaggb1q7.png" alt="Alt Text"&gt; give you the opportunity to quickly change the case (camelCase, CONSTANT_CASE, snake_case, etc) of the current selection or current word. So useful with a custom keyboard shortcut or Shift + Ctrl + P.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=BriteSnow.vscode-toggle-quotes"&gt;Save all&lt;/a&gt;,  if you working on a big project as always if u running a server with nextjs for example, everyone knows that saving the file by open, will at any time re-build it, so this extension partially resolves this problem.&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3WaJus5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ge5yjaomi7f9xr1sobf.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=BriteSnow.vscode-toggle-quotes"&gt;Toggle Quotes&lt;/a&gt;, with &lt;code&gt;Ctrl&lt;/code&gt; and some selection you can&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;easily change quotes type from '' to "" or  ``
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt;, with this config&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bracket-pair-colorizer-2.colors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Gold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LightSkyBlue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bracket-pair-colorizer-2.colorMode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Independent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bracket-pair-colorizer-2.highlightActiveScope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bracket-pair-colorizer-2.showBracketsInGutter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview"&gt;Image preview&lt;/a&gt;, the name says everything for itself, &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ykC9Mves--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ykcdumsshjdv1e54uvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykC9Mves--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ykcdumsshjdv1e54uvp.png" alt="Alt Text"&gt;&lt;/a&gt; near a number of lines you will see a small preview of the image.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag"&gt;Highlight Matching Tag&lt;/a&gt;, &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8DQSoLnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd7g99bgpmw32pse558w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8DQSoLnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd7g99bgpmw32pse558w.png" alt="PzVAkYdU_o"&gt;&lt;/a&gt; small but useful tag highlighting extensions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;Path Intellisense&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QXlCAys_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd77zjnwgswlxh68pn7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXlCAys_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd77zjnwgswlxh68pn7j.png" alt="Alt Text"&gt;&lt;/a&gt;the must-have extensions that autocomplete filenames.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#for-database%C2%A0control"&gt;
  &lt;/a&gt;
  For database control
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jsayol.firebase-explorer"&gt;Firebase Explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mongodb.mongodb-vscode"&gt;MongoDB for VS code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#for-rest%C2%A0process"&gt;
  &lt;/a&gt;
  For REST process
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"&gt;REST Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;Thunder Client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#other-extensions"&gt;
  &lt;/a&gt;
  Other extensions
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Ho-Wan.vscode-trello-viewer"&gt;Trello Viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log"&gt;Turbo Console Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;Todo Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=OfHumanBondage.react-proptypes-intellisense"&gt;React PropTypes Intellisense&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wk-j.vscode-rainbow-string"&gt;Rainbow String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode"&gt;Polacode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Import cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils"&gt;File Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jzmstrjp.color-the-tag-name"&gt;Color the tag name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks"&gt;Bookmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=bibhasdn.random-string-password-generator"&gt;Random String Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#also-additional-extensions-which-everybody-knowns"&gt;
  &lt;/a&gt;
  Also, additional extensions which everybody knowns
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"&gt;Auto Close Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode"&gt;Visual Studio IntelliCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier Formatter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For sure you can use all extensions which I describe, but most likely it will so laggy, so better practice (if you use this extension not often) is to use the extension only when you need it. And yeah, I know that everybody knows that, but probably this story will useful for somebody.&lt;/p&gt;

&lt;p&gt;Thanks for reading, I so appreciate this ♥.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
    </item>
    <item>
      <title>What is the performance impact of using array configuration in webpack</title>
      <author>Marcin Wosinek</author>
      <pubDate>Wed, 18 Aug 2021 18:36:23 +0000</pubDate>
      <link>https://dev.to/marcinwosinek/what-is-the-performance-impact-of-using-array-configuration-in-webpack-4idg</link>
      <guid>https://dev.to/marcinwosinek/what-is-the-performance-impact-of-using-array-configuration-in-webpack-4idg</guid>
      <description>&lt;p&gt;Webpack has the feature of accepting an array of configuration objects instead of one object. Unfortunately, it comes with a performance penalty - in this article, I'll look at how serious the slow-down can get.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;

&lt;p&gt;I'll have 10 files in the benchmark, &lt;code&gt;src/a.js&lt;/code&gt;, &lt;code&gt;src/b.js&lt;/code&gt;, etc. Each of the failed contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jquery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the letter makes sure there is no weird optimization used thanks to all files having the same content&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;jquery&lt;/code&gt; makes the build size non-trivial&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#simple-configuration"&gt;
  &lt;/a&gt;
  Simple configuration
&lt;/h1&gt;

&lt;p&gt;There are 2 configuration approaches to be compared. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-configuration"&gt;
  &lt;/a&gt;
  Object configuration
&lt;/h2&gt;

&lt;p&gt;Here there is 1 object, which defines multiple entry points:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;time&lt;/code&gt; output for the build is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;real    0m9,507s
user    0m29,622s
sys     0m0,438s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It tasks about &lt;strong&gt;9.5s&lt;/strong&gt; to run the build.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h2&gt;

&lt;p&gt;In an array configuration, we have multiple configuration objects returned together. It allows for greater flexibility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;time&lt;/code&gt; output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;real    0m14,622s
user    0m48,990s
sys     0m0,877s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It took &lt;strong&gt;14.5s&lt;/strong&gt; to build the same files, about &lt;strong&gt;50% longer&lt;/strong&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-with-splitting"&gt;
  &lt;/a&gt;
  Build with splitting
&lt;/h1&gt;

&lt;p&gt;The difference becomes even starker when we introduce splitting. Splitting allows webpack to optimize &amp;amp; build only once parts that are used in many places. This optimization is done in the context of each configuration object - so if we use a configuration array, we won't see improvements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object"&gt;
  &lt;/a&gt;
  Object
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;b/webpack.object.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     i: "./src/i",
     j: "./src/j",
   },
+  optimization: {
+    splitChunks: {
+      // include all types of chunks
+      chunks: "all",
+    },
+  },
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build &lt;code&gt;times&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;real    0m3,074s
user    0m5,724s
sys     0m0,161s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;About &lt;em&gt;3s&lt;/em&gt; build time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h2&gt;

&lt;p&gt;If we had more complex cases for each entry point, we could see some speed improvements, but there is no chance for this simplified example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.array.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@@ -3,50 +3,110 @@ module.exports = [  
     entry: {                        
       a: "./src/a",                   
     },                
+    optimization: {                   
+      splitChunks: {  
+        // include all types of chunks                                                                                                                                                
+        chunks: "all",
+      },
+    },
   },
   {
     entry: {
       b: "./src/b",
     },
+    optimization: {
+      splitChunks: {
+        // include all types of chunks
+        chunks: "all",
+      },
+    },
   },
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;time&lt;/code&gt; output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;real    0m14,904s
user    0m48,754s
sys     0m1,154s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The build took almost &lt;strong&gt;15s&lt;/strong&gt;, five times slower than with the object configuration. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://webpack.js.org/configuration/configuration-types/#exporting-multiple-configurations"&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/how-to-js/webpack-array-vs-object"&gt;test repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;In this article, we have seen a build time benchmark for 2 formats of webpack configuration. One can understand the array configuration as a shortcut to run multiple, unrelated builds - there will not be many optimizations done by wepback.&lt;/p&gt;

&lt;p&gt;ps. I'm building &lt;a href="https://www.udemy.com/course/beginners-course-for-webpack-5/?referralCode=CF61F1A7C095ED2A63B8"&gt;webpack course&lt;/a&gt;. It's work-in-progress &amp;amp; currently for free. You can register now: you will get updates as I'll adding new sections and you keep access even when the course will become paid. &lt;/p&gt;

</description>
      <category>webpack</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How immutable data can benefit your data-driven application.</title>
      <author>Cassidy Mountjoy</author>
      <pubDate>Wed, 18 Aug 2021 18:32:35 +0000</pubDate>
      <link>https://dev.to/cassidymountjoy/how-immutable-data-can-benefit-your-data-driven-application-28pm</link>
      <guid>https://dev.to/cassidymountjoy/how-immutable-data-can-benefit-your-data-driven-application-28pm</guid>
      <description>&lt;p&gt;The promise of blockchain technology set out to change data systems and revolutionize networks. Blockchain advocates pledged to decentralize voting, registration, commerce, and currency. Although various changes have been made to many of these fields, there is still a lot more work to be done. Don’t get me wrong, CryptoKitties is pretty cool and the cats are so darn cute, but I think blockchain technology is far from reaching its full potential.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eW0q6JU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyq3zif5l1zhqv98j3pi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eW0q6JU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyq3zif5l1zhqv98j3pi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the fundamental ideas behind blockchain systems is that data is &lt;strong&gt;immutable&lt;/strong&gt;. Immutable data prevents adversaries from changing existing values within the database. This establishes trust and greatly enhances the security of the overall system, preventing data discrepancies that have potentially catastrophic results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZIOYXEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxtwpx220zkjmyoej2sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZIOYXEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxtwpx220zkjmyoej2sg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cabinet-dilemma"&gt;
  &lt;/a&gt;
  The Cabinet Dilemma
&lt;/h2&gt;

&lt;p&gt;Traditional industries are becoming digitized, moving their pen and paper operations to applications and electronic storage. This entails trading locked file cabinets for database management systems. While the lock on the cabinet provides the primary layer of security, the documents inside have an additional layer of security, their wet signatures.&lt;/p&gt;

&lt;p&gt;Immutable data is the equivalent of a wet signature. The paper has been signed, there is no going back or “modifying” the signature. On the contrary mutable systems are equivalent to signing the document in pencil and attempting to hide the eraser. If the cabinet is opened, the freedom to re-write data is granted to the adversary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With over 80,000 cyber attacks per day, our virtual file cabinets need to be as secure as possible. You wouldn’t sign your documents in pencil would you?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Data breaches are dangerous to your customers, a headache for your engineers, and embarrassing. We should be doing as much as possible to stop such violations of privacy. Blockchain fundamentals, such as immutability, must be applied to traditional systems to add much needed security and create an overall safer environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-additional-value-to-immutable-data"&gt;
  &lt;/a&gt;
  Providing Additional Value to Immutable Data
&lt;/h2&gt;

&lt;p&gt;On face value, immutable data deepens insight and enhances the security of your system. When applied to relational databases, immutable data provides other solutions to application demands, here’s why.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speed"&gt;
  &lt;/a&gt;
  Speed
&lt;/h3&gt;

&lt;p&gt;While developing an immutable relational database, we learned that storage techniques associated with write-only system are greatly simplified. When adding data to the system becomes a simple procedure, database resources are made more accessible to users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auditing-and-analytics"&gt;
  &lt;/a&gt;
  Auditing and Analytics
&lt;/h3&gt;

&lt;p&gt;Immutable data can be used as a trusted resource for auditing. Additionally, analytics teams have access to the complete history, allowing them to run more in-depth queries for analyzing changes over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When we explore blockchain fundamentals a bit deeper, its apparent that immutable data provides many needed benefits to our applications. As traditional industries move their services online, sensitive data should be secured at the lowest level possible. With that being said, immutable systems are a necessity for us to protect our businesses, sensitive information, and quality of life.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blockpoint"&gt;
  &lt;/a&gt;
  Blockpoint
&lt;/h2&gt;

&lt;p&gt;At &lt;a href="https://blockpointdb.com/"&gt;blockpoint Systems&lt;/a&gt; we value immutability and think you should too. We developed a multi-version database that brings together blockchain immutability with traditional relational database infrastructure. Check out our website or feel free to reach out to us at &lt;a href="mailto:contact@blockpoint.systems"&gt;contact@blockpoint.systems&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>blockchain</category>
      <category>security</category>
    </item>
    <item>
      <title>Is it time to let go of Bootstrap?</title>
      <author>Vishwa.R</author>
      <pubDate>Wed, 18 Aug 2021 18:29:31 +0000</pubDate>
      <link>https://dev.to/codereaper08/is-it-time-to-let-go-of-bootstrap-347i</link>
      <guid>https://dev.to/codereaper08/is-it-time-to-let-go-of-bootstrap-347i</guid>
      <description>&lt;p&gt;Hello again!, After a short break, I am back again with a non-technical post. As Web-Dev's, we use and search all possible ways, to get our job done in the easy way. The most vital visual part of Web-Dev, the &lt;strong&gt;FRONT-END&lt;/strong&gt;, is very important to catch the eyes and to give a nice user-friendly experience for the user. To make this job easy, we use CSS frameworks like Bootstrap. So, after these many good years with many technical competitors, is Bootstrap still good to hang on with? &lt;br&gt;
Let's see about this in today's blog.&lt;/p&gt;

&lt;p&gt;So, we'll start with&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-bootstrap"&gt;
  &lt;/a&gt;
  What is Bootstrap?
&lt;/h2&gt;

&lt;p&gt;Bootstrap is a CSS framework (Most popular), which uses class based Web-design. The official site of Bootstrap describes itself as,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And that's completely true, Bootstrap is fast and provide responsive mobile-first build classes to achieve what we Web-Dev's dream of as “RESPONSIVE DESIGN”. It provides an awesome grid system(Which I love) and JavaScript plugins(I hate them using jQuery, we'll get into it).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#competitors"&gt;
  &lt;/a&gt;
  Competitors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6I60PL3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tekkiwebsolutions.com/wp-content/uploads/Top-CSS-Frameworks.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6I60PL3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tekkiwebsolutions.com/wp-content/uploads/Top-CSS-Frameworks.jpg" alt="CSS frameworks"&gt;&lt;/a&gt;&lt;/p&gt;
Image source: www.tekkiwebsolutions.com



&lt;p&gt;Bootstrap now faces a reasonable competition from similar UI kit based CSS frameworks like &lt;strong&gt;&lt;em&gt;Foundation&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Bulma&lt;/em&gt;&lt;/strong&gt;. Apart from these, It also faces a severe blow from &lt;strong&gt;&lt;em&gt;TailwindCSS&lt;/em&gt;&lt;/strong&gt;. Bootstrap is always criticized for its inflexibility. I would say, it's not inflexibility, but the huge amount of time taken for customizing the defaults provided by Bootstrap(It provides default UI components, because it's a UI Kit based CSS framework). Whereas in frameworks like &lt;strong&gt;&lt;em&gt;TailwindCSS&lt;/em&gt;&lt;/strong&gt;, Utility classes, which provide low-level flexibility, are provided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-bootstrap-worry-about-competition"&gt;
  &lt;/a&gt;
  Should Bootstrap worry about competition?
&lt;/h2&gt;

&lt;p&gt;I would say Bootstrap was not made to work like &lt;strong&gt;TailwindCSS&lt;/strong&gt;. Bootstrap was made to provide developers of all levels, from beginners to advanced, the ability to quickly spin up a nice looking UI without worrying about responsiveness. Bootstrap's users are mostly beginners, who start their journey of using class based CSS utilities from pure CSS. It also has a good learning curve, so people get it better soon, as frameworks like &lt;strong&gt;TailwindCSS&lt;/strong&gt;, &lt;strong&gt;Foundation&lt;/strong&gt; and &lt;strong&gt;Bulma&lt;/strong&gt; comparatively has a steeper learning curve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-we-use-bootstrap-still-in-2021"&gt;
  &lt;/a&gt;
  Should we use Bootstrap still in 2021?
&lt;/h2&gt;

&lt;p&gt;Of course, It is best in class for rapid web-deign, where you want a useful and nice looking site, without any brand colour pallets or pixel specific needs. Even today, more than 19% of websites use &lt;strong&gt;Bootstrap&lt;/strong&gt; as their CSS framework. I would say, it's the most probable gateway for learners, who get into class based CSS frameworks from pure CSS and HTML. If you want a quick site for a Boot camp you arrange next week, go for Bootstrap, It's faster to build, gives responsiveness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap-is-gearing-back-again"&gt;
  &lt;/a&gt;
  Bootstrap is gearing back again!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuuhVTxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://getbootstrap.com/docs/5.0/assets/brand/bootstrap-social.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuuhVTxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://getbootstrap.com/docs/5.0/assets/brand/bootstrap-social.png" alt="Bootstrap 5"&gt;&lt;/a&gt;&lt;/p&gt;
Image source: getbootstrap.com



&lt;p&gt;As you all know, Bootstrap 5 came with a nice update from 4. It let go of jQuery and switched to Vanilla JavaScript. So, now how good is that!&lt;br&gt;
Bootstrap also managed to bring back the Bootstrap icon support.&lt;br&gt;
It also came up with some low level utility classes for added flexibility. Overall, Bootstrap is not going to be dead, but getting back on track.&lt;/p&gt;

&lt;p&gt;Thanks for Reading and following me!&lt;br&gt;
If you didn't, make sure to follow me, so we can learn and discuss tech-stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attributions"&gt;
  &lt;/a&gt;
  Attributions:
&lt;/h3&gt;

&lt;p&gt;cover-image : &lt;a href="http://www.drupal.org"&gt;www.drupal.org&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>todayisearched</category>
      <category>html</category>
    </item>
    <item>
      <title>Spotting a toxic workplace</title>
      <author>Simon Barker</author>
      <pubDate>Wed, 18 Aug 2021 18:21:49 +0000</pubDate>
      <link>https://dev.to/allthecode/spotting-a-toxic-workplace-4g72</link>
      <guid>https://dev.to/allthecode/spotting-a-toxic-workplace-4g72</guid>
      <description>&lt;h2&gt;
  &lt;a href="#spotting-a-toxic-work-place-is-easy-right"&gt;
  &lt;/a&gt;
  Spotting a toxic work place is easy right?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Crumby offices ✅&lt;/li&gt;
&lt;li&gt;Beige walls ✅&lt;/li&gt;
&lt;li&gt;Boring industry ✅&lt;/li&gt;
&lt;li&gt;PHP ✅&lt;/li&gt;
&lt;li&gt;No MacBooks ✅&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wrong, wrong, wrong, wrong and wrong. &lt;/p&gt;

&lt;p&gt;Some of the most interesting work you can do as a developer is at "non-tech" companies, in established industries on an older tech stack, perhaps in PHP on industrial estate somewhere. Why? Because those businesses have enough legacy and foundation to generate interesting problems.&lt;/p&gt;

&lt;p&gt;So, if the above aren't the signs of a toxic workplace, then what are?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toxic-workplace-sign-immovable-deadlines"&gt;
  &lt;/a&gt;
  Toxic workplace sign 1️⃣ Immovable deadlines
&lt;/h2&gt;

&lt;p&gt;This shows that the company don't realise how hard it is to estimate technical work and has no appreciation of the ways that unforeseen complexity can delay a well run project no matter the quality of the dev team. This doesn't mean that there should be no deadlines, that would be absurd as well, but a business that can't be flexible and accommodate the unforeseen and either move the deadline or descope the work is not a healthy place to be. Often they will move deadlines for finance and marketing but not for technical work, if you see this - run! 🏃‍♀️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toxic-workplace-sign-feature-lists-decided-without-technical-input"&gt;
  &lt;/a&gt;
  Toxic workplace sign 2️⃣ Feature lists decided without technical input
&lt;/h2&gt;

&lt;p&gt;Product people are amazing, and good ones know that dev work is like an iceberg, the bit above the water that you can see (the UI) is likely less than 30% of the work. A bad product person will set features without this in mind and massively over burden a project, or block of work because "it's just clicking a button". Never mind that that button might kick off several parallel jobs, run deployments and spin up scalable infrastructure. If your product people aren't working hand in hand with your technical management and team then when it comes to crunch time it's going to hurt ... you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toxic-workplace-sign-pressure-to-complete-all-work-every-sprint"&gt;
  &lt;/a&gt;
  Toxic workplace sign 3️⃣ Pressure to complete all work every sprint
&lt;/h2&gt;

&lt;p&gt;Agile is about fast feedback, short blocks of work and getting a rough idea of a teams rate of delivery. Product managers who expect the sprint velocity (delivery rate) to go up each sprint "because you are getting more accustomed to the code base" are really just forcing you to work harder and faster so that they can look good. Some sprints your team might deliver 80 points and other 65, the second sprint isn't a failure, its a reflection that no matter how much Agile coaches try to make dev work like a factory production line, it isn't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toxic-workplace-sign-pair-programming-is-banned"&gt;
  &lt;/a&gt;
  Toxic workplace sign 4️⃣ Pair programming is banned
&lt;/h2&gt;

&lt;p&gt;True pair programming, where two devs work on the same feature and deliver it together is great for onboarding, up-skilling and increasing organisational knowhow. It can be slower in the short term but, occasional to regular pairing is a good example of "go slow to go fast" because in the long run the overall level of the team is higher and they can operate quicker. Banning this for short term gain is a sign of misaligned priorities in the company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toxic-workplace-sign-pressure-to-skip-tests-and-qa-processes"&gt;
  &lt;/a&gt;
  Toxic workplace sign 5️⃣ Pressure to skip tests and QA processes
&lt;/h2&gt;

&lt;p&gt;This is the ultimate symptom of a broken system and team, I've been here and it’s horrible. Pressure to deliver is so hight that things that sound like they're "not adding customer value" get pushed to the wayside. This is another example of short term gain for masses of long term loss and eventually drowning in tech debt. As a developer it is your responsibility to test what you wrote and know it works, the work isn't done until it's tested.&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>#100daysofcode [Day - 08]
</title>
      <author>Al Siam</author>
      <pubDate>Wed, 18 Aug 2021 17:54:49 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-08-4pe4</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-08-4pe4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-08"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 08]
&lt;/h1&gt;

&lt;p&gt;Today I've gained some more knowledge about nested functions and tried to handle some errors. also, updated the previous (day-06 my bank) by fixing some error and adding function.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Goodbye Adobe! Or: why we are leaving the Adobe product family!</title>
      <author>masdot</author>
      <pubDate>Wed, 18 Aug 2021 17:52:17 +0000</pubDate>
      <link>https://dev.to/masdot/goodbye-adobe-or-why-we-are-leaving-the-adobe-product-family-35cg</link>
      <guid>https://dev.to/masdot/goodbye-adobe-or-why-we-are-leaving-the-adobe-product-family-35cg</guid>
      <description>&lt;p&gt;My team and I have been using Adobe Creative Cloud for several years now. Despite the relatively high price, we were mainly convinced by the familiarity of the software as well as the good interoperability of the individual software solutions and the same or at least very similar user interface in the various programs. Likewise, the common cloud connection of the programs has accelerated our workflow quite a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-are-now-leaving-adobe"&gt;
  &lt;/a&gt;
  Why we are now leaving Adobe?
&lt;/h2&gt;

&lt;p&gt;So, why do we want to leave the Adobe Family now?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adobe has long relied on their good name&lt;/strong&gt;&lt;br&gt;
The user experience has been ignored for a long time in the ongoing development of many Adobe products. For example, the speed and flow of working in many Adobe programs is very slow. The loading times when importing files are also very long.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Adobe Support&lt;/strong&gt;&lt;br&gt;
Adobe technical support is one of the worst I have ever had the pleasure of using. It is usually quicker to ask colleagues or search engines about problems than to contact technical support.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;br&gt;
Even high-performance laptops and desktop PCs work up a good sweat when using Adobe products. The high load on the device despite the slow loading times and the poor performance of many programs is not really clear to me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;br&gt;
The Adobe programs are all quite cost-intensive. Besides, the Adobe products have been switched to a subscription model which causes relatively high monthly costs.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have not yet decided which programs we will switch to in detail. We will probably replace Photoshop, InDesign and Illustrator with Affinity Photo, Affinity Publisher and Affinity Designer. We are still looking for alternatives for the other programs we use.&lt;/p&gt;

</description>
      <category>adobe</category>
      <category>design</category>
      <category>develop</category>
      <category>affinity</category>
    </item>
    <item>
      <title>Listen to S6E2 of DevDiscuss: "An AWS Service Deep Dive" with Ken Collins &amp; Vlad Ionescu</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 18 Aug 2021 17:12:08 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-s6e2-of-devdiscuss-solving-problems-via-aws-with-ken-collins-vlad-ionescu-4lj2</link>
      <guid>https://dev.to/devteam/listen-to-s6e2-of-devdiscuss-solving-problems-via-aws-with-ken-collins-vlad-ionescu-4lj2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#listen-to-devdiscuss-s6e2-right-here-on-dev"&gt;
  &lt;/a&gt;
  Listen to DevDiscuss S6E2 right here on DEV:
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E2 - Lambda, Fargate, EC2, Oh My! An AWS Service Deep Dive&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive"&gt;
      &lt;img id="episode-profile-image" alt="S6:E2 - Lambda, Fargate, EC2, Oh My! An AWS Service Deep Dive" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This week, we talk about solving problems via Amazon Web Services with two AWS "Heroes".&lt;/strong&gt; ⚡️ &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 — Developer Advocate @ Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@metaskills"&gt;Ken Collins&lt;/a&gt; — Principal Engineer @ Custom Ink &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@iamvlaaaaaaad."&gt;Vlad Ionescu&lt;/a&gt; — Independent Consultant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy our show this week, folks!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dW15ZwOHekcRyFpH70/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dW15ZwOHekcRyFpH70/giphy.gif" alt="Animation of microphone with an atom overlaid on it"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive/id1513053883?i=1000532363288"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/4lF0IQurXyhiI8ImqnAcla"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzQz?sa=X&amp;amp;ved=0CAQQkfYCahcKEwigj7u9jbvyAhUAAAAAHQAAAAAQEA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s6e2-lambda-fargate-ec2-oh-mcs7r9-uTnX/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=165202003"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/180"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season six sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt; &amp;amp; &lt;a href="https://www.scoutapm.com/devdiscuss"&gt;Scout APM&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
  </channel>
</rss>
