<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create a dynamic `scrollToTop` button in React! No library necessary! EVER </title>
      <author>Chris Hansen </author>
      <pubDate>Wed, 20 Oct 2021 20:12:35 +0000</pubDate>
      <link>https://dev.to/hyggedev/how-to-create-a-dynamic-scrolltotop-button-in-react-no-library-necessary-ever-54ai</link>
      <guid>https://dev.to/hyggedev/how-to-create-a-dynamic-scrolltotop-button-in-react-no-library-necessary-ever-54ai</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey-devs"&gt;
  &lt;/a&gt;
  Hey devs üëã
&lt;/h2&gt;

&lt;p&gt;Have you always wanted to know how to get that buttery smooth scroll back to top button? Stop using another npm library. &lt;/p&gt;

&lt;p&gt;Get the job done in just a few minutes with some basic logic and javascript! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  PREFACE
&lt;/h2&gt;

&lt;p&gt;This is a speedcode tutorial, and I'll assume you have some working knowledge of: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML, CSS, JS&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Good concept of CSS or SASS &lt;/li&gt;
&lt;li&gt;Not necessary, but I'll be using Styled-components ( CSS in JS library )&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-icons.github.io/react-icons/"&gt;React Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://styled-components.com/"&gt;Styled-Components&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#speedcode-tutorial"&gt;
  &lt;/a&gt;
  Speedcode tutorial ‚§µÔ∏è
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cS8BFgyvzGs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thats it for "&lt;strong&gt;How to create a dynamic &lt;code&gt;scrollToTop&lt;/code&gt; button in React! No library necessary! EVER&lt;/strong&gt;" I hope you enjoyed the video, and hope you never have to use another scroll button library again! Once you get the hang of the code, you'll be able to add this to your website in just a couple minutes, no doubt about it! #happycoding! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#additional-resources-you-may-enjoy"&gt;
  &lt;/a&gt;
  Additional resources you may enjoy!
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/master-frontend-development-by-cloning-these-websites-1m08" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Master Frontend Development üíª By Cloning These Websites üíØ&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  „Éª Sep 14 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/easiest-way-to-add-icons-to-your-react-apps-5cgd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Easiest Way To Add Icons To Your React Apps üòé&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  „Éª Aug 10 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/responsive-social-media-card-built-with-react-part-one-ckj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Blog Highlight Section Built with React and `CSS-in-JS`&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  „Éª Sep 1 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/no-fuss-dark-mode-toggle-with-react-styled-components-3nd4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;No Fuss Dark-Mode Toggle with React &amp;amp; Styled-Components! üåû‚ÜîÔ∏èüåñ&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  „Éª Aug 18 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/how-to-build-a-responsive-react-navigation-menu-with-styled-components-3682" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to build a Responsive üì± React Navigation Menu with Styled-Components üíª&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  „Éª Aug 3 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Holy Grail of UIKit: Delegate Pattern</title>
      <author>Tarik Dahic</author>
      <pubDate>Wed, 20 Oct 2021 19:15:00 +0000</pubDate>
      <link>https://dev.to/daholino/the-holy-grail-of-uikit-delegate-pattern-1den</link>
      <guid>https://dev.to/daholino/the-holy-grail-of-uikit-delegate-pattern-1den</guid>
      <description>&lt;p&gt;When I started learning to develop apps for iOS I stumbled upon the delegate pattern for the first time. Adopting &lt;em&gt;UITableViewDataSource&lt;/em&gt; and &lt;em&gt;UITableViewDelegate&lt;/em&gt; protocols felt very strange and confusing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why am I doing this? Is this really how to do these things? I asked myself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a couple of weeks of learning and reading materials, I clicked and really started to enjoy using this pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;According to Apple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Delegation is a simple and powerful pattern in which one object in a program acts on behalf of, or in coordination with, another object. The delegating object keeps a reference to the other object‚Äîthe delegate‚Äîand at the appropriate time sends a message to it. The message informs the delegate of an event that the delegating object is about to handle or has just handled. The delegate may respond to the message by updating the appearance or state of itself or other objects in the application, and in some cases, it can return a value that affects how an impending event is handled. The main value of delegation is that it allows you to easily customize the behavior of several objects in one central object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a very good definition. But let‚Äôs take it step by step by following the illustration below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XUJ1eMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/delegate-illustration.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XUJ1eMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/delegate-illustration.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Someone creates a &lt;strong&gt;Worker&lt;/strong&gt;. A Worker is someone who does the work and then notifies us when the work is &lt;em&gt;completed&lt;/em&gt; or when something is &lt;em&gt;needed&lt;/em&gt; to continue the work.&lt;/li&gt;
&lt;li&gt;We tell the worker: ‚Äú&lt;em&gt;This is your delegate. Ask it for something or notify it when you are done.&lt;/em&gt;‚Äù. That depends on the language that is known between the worker and its delegate. This is always known upfront.&lt;/li&gt;
&lt;li&gt;The Worker starts to work.&lt;/li&gt;
&lt;li&gt;While the Worker is working it needs some data to continue its work. The worker asks its delegate ‚Äú&lt;em&gt;How should I do this or that?&lt;/em&gt;‚Äù and the delegate knowing what the worker needs provides it. When the Worker finishes the work it can tell its delegate ‚Äú&lt;em&gt;I finished the work and here are the results!&lt;/em&gt;‚Äù.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how the delegate pattern works. The communication flow is always 1-to-1 between the delegate and the worker.&lt;/p&gt;

&lt;p&gt;The worker is always doing the same job, but by providing different data and reacting differently on work completions we can reuse the worker in a lot of places where we need to handle the different cases.&lt;/p&gt;

&lt;p&gt;Delegation works great when there is a clear relationship between the owner and the ‚Äú&lt;em&gt;Worker&lt;/em&gt;‚Äù. For other cases, you will want to resort to other patterns.&lt;/p&gt;

&lt;p&gt;I would also like to repeat that the worker knows what to send or request from the delegate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translating-this-into-code"&gt;
  &lt;/a&gt;
  Translating this into code
&lt;/h2&gt;

&lt;p&gt;After we‚Äôve covered the basics with the theory we will try to translate this into code. I will be using Swift to implement this pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-protocol"&gt;
  &lt;/a&gt;
  Define the protocol
&lt;/h3&gt;

&lt;p&gt;We should always start with the delegate protocol, the interface or the language that will the delegate adopt and that the worker will know in advance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;WorkerDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didFinishWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I declared &lt;em&gt;WorkerDelegate&lt;/em&gt; protocol that has one method for this example and that is &lt;em&gt;didFinishWork()&lt;/em&gt;. When the worker completes the work it will use the delegate that has conformance to &lt;em&gt;WorkerDelegate&lt;/em&gt; protocol and will call the &lt;em&gt;didFinishWork()&lt;/em&gt; method on it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#anyobject"&gt;
  &lt;/a&gt;
  AnyObject
&lt;/h4&gt;

&lt;p&gt;You can notice that the &lt;em&gt;WorkerDelegate&lt;/em&gt; protocol conforms to another one and that is &lt;strong&gt;AnyObject&lt;/strong&gt;. We use AnyObject to limit that only class types can inherit our delegate protocol. Only class objects can be weak because they are passed by reference and we want weak delegates so that we don‚Äôt create &lt;strong&gt;retain cycles&lt;/strong&gt; while using delegates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-worker"&gt;
  &lt;/a&gt;
  Define the worker
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Worker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;WorkerDelegate&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;startWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Start some work..&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="c1"&gt;// .. and when it is completed, notify the delegate:&lt;/span&gt;
        &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;didFinishWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Worker class has a property &lt;strong&gt;delegate&lt;/strong&gt; that is of type &lt;em&gt;WorkerDelegate&lt;/em&gt;. It has a weak reference to something that will be stored in this variable and that is, as I mentioned above to avoid creating potential retain cycles. The delegate is also optional so by default it is &lt;strong&gt;nil&lt;/strong&gt;. This is useful in some cases where setting the delegate is not mandatory.&lt;/p&gt;

&lt;p&gt;The Worker has a &lt;em&gt;startWork()&lt;/em&gt; method that will start some work and when the work is completed it will notify its delegate by invoking the &lt;em&gt;didFinishWork()&lt;/em&gt; method if the delegate is set.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-worker-and-adopt-the-workerdelegate"&gt;
  &lt;/a&gt;
  Create the worker and adopt the WorkerDelegate
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;// It is always important to set the delegate before we invoke the worker to start doing something.&lt;/span&gt;
        &lt;span class="c1"&gt;// Better alternative could be to pass the delegate in the initializer of the Worker.&lt;/span&gt;
        &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

        &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;startWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;WorkerDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didFinishWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Worker finished the work. Now we can react to it by fetching some data or updating the UI.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;ViewController&lt;/em&gt; has a &lt;strong&gt;worker&lt;/strong&gt; property. In the &lt;em&gt;viewDidLoad()&lt;/em&gt; lifecycle method of the &lt;em&gt;ViewController&lt;/em&gt;, we set the delegate of the worker to &lt;em&gt;self&lt;/em&gt;, so that when the worker is done it will notify the &lt;em&gt;ViewController&lt;/em&gt; instance. After setting the delegate, we invoke the &lt;em&gt;startWork&lt;/em&gt;() method of the worker and we wait for it to complete to notify us via the &lt;em&gt;didFinishWork()&lt;/em&gt; method that we conformed to via &lt;em&gt;WorkerDelegate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I always like to conform to different protocols in the extensions of the classes because it improves the organisation and the readability of the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples-from-uikit"&gt;
  &lt;/a&gt;
  Examples from UIKit
&lt;/h2&gt;

&lt;p&gt;While working with UIKit we use delegates on daily basis so this is why it is very important to understand this pattern. A good tip for you is when you need to conform to some delegate protocol is to open the protocol definition and see what it has to offer.&lt;/p&gt;

&lt;p&gt;Here are a couple of examples:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uitableviewdatasource"&gt;
  &lt;/a&gt;
  UITableViewDataSource
&lt;/h4&gt;

&lt;p&gt;We use &lt;em&gt;UITableViewDataSource&lt;/em&gt; to provide the &lt;em&gt;UITableView&lt;/em&gt; with data. A data source object responds to data-related requests from the table. The minimum for every &lt;em&gt;UITableView&lt;/em&gt; that we need to do is to provide it with the numbers of rows per section and to provide &lt;em&gt;UITableViewCell&lt;/em&gt; for every row. We do that by implementing methods from the &lt;em&gt;UITableViewDataSource&lt;/em&gt; protocol:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return the number of rows for the table. We'll assume that the table has only one section.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class="nv"&gt;section&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Provide a cell object for each row&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cellForRowAt&lt;/span&gt; &lt;span class="nv"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IndexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;UITableViewCell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Fetch a cell of the appropriate type&lt;/span&gt;
   &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;cell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dequeueReusableCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;withIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"cellTypeIdentifier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="c1"&gt;// Configure the cell using items[indexPath.row]&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we can see how the &lt;em&gt;UITableView&lt;/em&gt; asks us (the data source delegate) for data that it will display.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uitableviewdelegate"&gt;
  &lt;/a&gt;
  UITableViewDelegate
&lt;/h4&gt;

&lt;p&gt;With &lt;em&gt;UITableViewDelegate&lt;/em&gt; we can react to some interactions with the &lt;em&gt;UITableView&lt;/em&gt;. In the example below we can override the &lt;em&gt;didSelectRowAt&lt;/em&gt; delegate method so that we get notified when user presses the &lt;em&gt;UITableView&lt;/em&gt; row.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didSelectRowAt&lt;/span&gt; &lt;span class="nv"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IndexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// React to the selection of the cell at the indexPath&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;UITableViewDelegate&lt;/em&gt; can also be used for more advanced &lt;em&gt;UITableView&lt;/em&gt; customization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mfmailcomposeviewcontrollerdelegate"&gt;
  &lt;/a&gt;
  MFMailComposeViewControllerDelegate
&lt;/h4&gt;

&lt;p&gt;If we want to use native system UI and configuration to send an email we can use &lt;em&gt;MFMailComposeViewController&lt;/em&gt;. We will create the instance of &lt;em&gt;MFMailComposeViewController&lt;/em&gt;, configure it, adopts its delegate and send the email. The email completion will be delegated to us in the delegate method below that we implemented by overriding &lt;em&gt;MFMailComposeViewControllerDelegate&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;mailComposeController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;MFMailComposeViewController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didFinishWith&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;MFMailComposeResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// React to mail sending completion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here we can see if the email sending was successful or not and react according to that information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uiimagepickercontrollerdelegate"&gt;
  &lt;/a&gt;
  UIImagePickerControllerDelegate
&lt;/h4&gt;

&lt;p&gt;If you want to use some images or videos from the Photos app you possibly implemented &lt;em&gt;UIImagePickerController&lt;/em&gt; and conformed to its protocol so that you know when the user picked the media files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;imagePickerController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIImagePickerController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didFinishPickingMediaWithInfo&lt;/span&gt; &lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;UIImagePickerController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;InfoKey&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use picked images or videos&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The delegate pattern is very popular in the iOS world and it is very present in UIKit. I like this pattern and I use it in my work but it has some limitations. The communication is always 1-to-1 and that is not practical in some cases so we need to resort to something like an Observer pattern. The amount of code that needs to be added is not small if we are developing something trivial and the testing is harder.&lt;/p&gt;

&lt;p&gt;Alternative to using delegates can be passing functions to ‚Äú&lt;em&gt;Workers&lt;/em&gt;‚Äù and invoking them when we need something or when we want to notify someone. This can result in fewer lines of code but can complicate things if we overuse it. We would also need to be careful not to create retain cycles with this approach.&lt;/p&gt;

&lt;p&gt;I hope that this article helped you to understand or to strengthen your knowledge with this pattern.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to Mine Shiba Inu SHIB with Your Computer in Under 5 Minutes in 2021</title>
      <author>Course Probe</author>
      <pubDate>Wed, 20 Oct 2021 18:35:44 +0000</pubDate>
      <link>https://dev.to/courseprobe/how-to-mine-shiba-inu-shib-with-your-computer-in-under-5-minutes-in-2021-4e13</link>
      <guid>https://dev.to/courseprobe/how-to-mine-shiba-inu-shib-with-your-computer-in-under-5-minutes-in-2021-4e13</guid>
      <description>&lt;p&gt;A Step by Step Guide to Pool Mining Shiba Inu SHIB Coin in 2021 with a CPU!&lt;/p&gt;

&lt;p&gt;Sometimes mining can seem to be too complex for the average computer user, so I thought about putting together a quick guide to get you excited about mining cryptocurrency and Shiba SHIB in particular.&lt;/p&gt;

&lt;p&gt;Anyone can start mining Shiba Inu with any computer in under 5 minutes with this guide, regardless of your technical skill level you will be able to increase your crypto knowledge and start mining SHIB with your CPU today!!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;STEP 1:&lt;/strong&gt; Get yourself a Wallet.&lt;/p&gt;

&lt;p&gt;I recommend you installing Metamask as a Chrome extension, you can get it at metamask.io&lt;/p&gt;

&lt;p&gt;Make sure you connect the Binance Smart Chain network to metamask (Google the instructions...) or get them from this link: &lt;a href="https://academy.binance.com/en/articles/connecting-metamask-to-binance-smart-chain"&gt;Binance Academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could also get Exodus or Atomic Wallet for you to get some other coin addresses without any hassle.&lt;/p&gt;

&lt;p&gt;Select the Binance Smart Chain in Metamask and copy your address. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2:&lt;/strong&gt; Download XMRIg from Github&lt;/p&gt;

&lt;p&gt;You could go to the xmrig site to download the latest version or from the oficial github repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xmrig/xmrig/releases"&gt;https://github.com/xmrig/xmrig/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you download the latest version you would have to edit a file named "pool_mine_example.bat" Inside this file you need to modify 2 lines.&lt;/p&gt;

&lt;p&gt;It could look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd %~dp0
xmrig.exe -o rx.unmineable.com:3333 -u SHIB:0xe1b2456a2Ad227b93D7a7421f1E9Cc57908cC37c.wini3#e4xd-wmzl -p x
pause
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second line after the -o you can see the Pool URL, in this case all you have to do depending on your location is to use one of the following URLs (select the one closer to your location).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USA:&lt;/strong&gt; rx-us.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Europe:&lt;/strong&gt; rx-eu.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Asia:&lt;/strong&gt; rx-asia.unmineable.com:3333&lt;/p&gt;

&lt;p&gt;Then, the third line is where you will enter your wallet's public address (copied in STEP 1), place it after the SHIB: and before the first dot "." .&lt;/p&gt;

&lt;p&gt;The general structure of the address needs to be:&lt;/p&gt;

&lt;p&gt;[COIN]:[Wallet address].[workerID]#[Code to lower mining fee]&lt;/p&gt;

&lt;p&gt;The workerID is any name you want to give to each computer where you are running the miner so it can easily be identified later on under the pool stats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The code after the # is important&lt;/strong&gt; because mining with that code will drop the Mining Fee from 1% to 0.75% (it makes a difference). You can start mining using that code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Run the file as an administrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" alt="XMRig Mining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, you are now running XMRig and are mining. Congrats !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Log into Unmineable to check your stats&lt;/p&gt;

&lt;p&gt;Unmineable.com is a mining Pool which allows you to mine with your CPU using RandomX and pay you in any coin you select. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" alt="Unmineable Site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you set up the address inside the XMRig config file ? &lt;/p&gt;

&lt;p&gt;Well, there you just let Unmineable know the coin you want to be paid in, in this example SHIB and then the address where they will transfer the mined coins.&lt;/p&gt;

&lt;p&gt;In order to check your balance, log into &lt;a href="https://unmineable.com"&gt;Unmineable&lt;/a&gt; and then select the coin you want to mine. In this example, SHIB.&lt;/p&gt;

&lt;p&gt;Then you can select the Tab that reads RandomX and enter your address in the box that reads "Enter your address to check your stats:". &lt;/p&gt;

&lt;p&gt;After doing this you will see the balance on your account and you will even be able to request a payment.&lt;/p&gt;




&lt;p&gt;Congrats, you are a miner now! &lt;/p&gt;

&lt;p&gt;I recommend downloading some software to monitor the running temperature of your CPU, a good and free one is Hardware Monitor.&lt;/p&gt;

&lt;p&gt;Try not to exceed the temperature more than 90 degrees celsius. In case you are mining with a laptop, change the thermal paste of your CPU, get it cleaned inside, and get some heat extractors for laptops.&lt;/p&gt;

&lt;p&gt;If you take care of the temperature your computer should work very well, the amount of coins you can mine will depend on the hashrate of your CPU. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to use a valid address for each coin, for example if you want to be paid in ADA then you need a valid Cardano blockchain address. In this example Binance Smart Chain is used and you would receive a SHiba Inu token on the BSC blockchain.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;If you are looking for more information, there's a good guide in a PDF ebook and is Free, get it at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" alt="Mining with CPU"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/how-to-start-mining-crypto-with-cpu"&gt;Start Mining with CPU&lt;/a&gt;&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>blockchain</category>
      <category>shiba</category>
    </item>
    <item>
      <title>Cool minecraft plugin! ITEMSADDER</title>
      <author>Dima Gashuk</author>
      <pubDate>Wed, 20 Oct 2021 18:26:27 +0000</pubDate>
      <link>https://dev.to/damfler/cool-minecraft-plugin-itemsadder-2cji</link>
      <guid>https://dev.to/damfler/cool-minecraft-plugin-itemsadder-2cji</guid>
      <description>&lt;h3&gt;
  &lt;a href="#this-is-all-serious"&gt;
  &lt;/a&gt;
  This is all serious!
&lt;/h3&gt;

&lt;p&gt;I got acquainted with the wonderful ItemsAdders plugin, this plugin allows you to make new items, blocks, weapons, potions on yml markup, in general, anything you want, even planes and cars!!!&lt;/p&gt;

&lt;p&gt;This plugin is like a framework that helps us do wonderful things. Everything we want can be done effortlessly, without any problems, just by prescribing the type of object, its properties, if desired, enchantment and texture (taken from your texture pack, about this separately).&lt;/p&gt;

&lt;p&gt;To begin with, I will show you screenshots of images from the plugin page and a link to this plugin:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pGK0iy8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m874pxuchv32r0f1modk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pGK0iy8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m874pxuchv32r0f1modk.png" alt="Preview"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3x_4kKo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k2omm8fldfu3jlxvmxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3x_4kKo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k2omm8fldfu3jlxvmxt.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-cost-of-the-plugin"&gt;
  &lt;/a&gt;
  The cost of the plugin
&lt;/h3&gt;

&lt;p&gt;The main problem of the plugin is its cost, it costs h 16.95 EUR, although I can say it's not very expensive for such a cool plugin, and I can say from hearsay that it's like 1-2 times to go to McDonald's :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opportunities"&gt;
  &lt;/a&gt;
  Opportunities
&lt;/h3&gt;

&lt;p&gt;I repeat, everything is possible here, from the usual sword texture, to cars, planes and new workbenches with their own mechanics.&lt;br&gt;
This plugin is well optimized, it can even compete with a huge number of mods, and the big plus is that it works without mods, and the server does not load from the word at all (for all the time of my game I have never experienced discomfort).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#texture-pack"&gt;
  &lt;/a&gt;
  Texture pack
&lt;/h3&gt;

&lt;p&gt;I mentioned that you use your own texture pack, this is not a joke, you will need to make ready-made textures or models, but do not rush to form them into a ready-made pack, because the texture pack structure of the ItemsAdder is different.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lessons-on-youtube"&gt;
  &lt;/a&gt;
  Lessons on YouTube
&lt;/h3&gt;

&lt;p&gt;I will teach lessons on this wonderful plugin on my YouTube channel, unfortunately they will be in Russian, for many it will be a minus:(&lt;br&gt;
But I also created a repository on github, where I will post ready-made templates of all types of items, I will attach the link later, as soon as everything is ready and I will be able to make sure that I put only allowed materials on display!&lt;/p&gt;

</description>
      <category>minecraft</category>
      <category>yml</category>
      <category>news</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deep Dive into CodeCast's Studio</title>
      <author>CodeCast</author>
      <pubDate>Wed, 20 Oct 2021 18:22:54 +0000</pubDate>
      <link>https://dev.to/codecast/deep-dive-into-codecasts-studio-3f68</link>
      <guid>https://dev.to/codecast/deep-dive-into-codecasts-studio-3f68</guid>
      <description>&lt;p&gt;We previously wrote about our Player in an earlier blog post, speaking about how it is the heart and soul of CodeCast. Following that analogy, our Studio is every other system in the body that keeps the heart pumping and alive.¬†&lt;/p&gt;

&lt;p&gt;Without the Studio, there would be no Casts to watch. The Studio,¬†&lt;a href="https://info.codecast.io/download"&gt;available to download&lt;/a&gt;¬†on Mac, Windows &amp;amp; Linux, is how the users create Casts. The goal of this blog post is to take a deep dive into the Studio to show you exactly how it works, and exactly why you should be using it to teach code.&lt;/p&gt;

&lt;p&gt;Firstly,¬†it‚Äôs free.¬†That may sound like a gimmick or a catch, but currently, our entire community and software are entirely free to use. The goal of CodeCast is to allow people to teach code in a way that is intuitive, simple, and using software that does all the work for them. So let‚Äôs see how that works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-account"&gt;
  &lt;/a&gt;
  Creating An Account
&lt;/h3&gt;

&lt;p&gt;Before you can get started with making¬†your &lt;a href="https://info.codecast.io/blog/how-to-make-your-first-cast"&gt;first ever Cast&lt;/a&gt;, you need to create an account. You can either use your email to sign up or you can authorize an account using your preexisting GitHub account.&lt;/p&gt;

&lt;p&gt;You can do this either by signing up directly on the Studio or signing up on¬†&lt;a href="http://codecast.io/signup"&gt;our website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2lGU0Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/029i0a598qojw90lvqxo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2lGU0Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/029i0a598qojw90lvqxo.png" alt="Studio Sign Up View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note, you will be required to log in to the Studio and the website separately, as logging into one doesn‚Äôt automatically log you into the other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-studio-view"&gt;
  &lt;/a&gt;
  The Studio View
&lt;/h3&gt;

&lt;p&gt;Now that you‚Äôve made an account (and logged in), we will begin to go over the Studio. This is the view you see now that you‚Äôre logged in:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iI-QTOFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh5prdjohk47yahytt39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iI-QTOFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh5prdjohk47yahytt39.png" alt="Studio View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-folder"&gt;
  &lt;/a&gt;
  Project Folder
&lt;/h3&gt;

&lt;p&gt;Clicking on Add another Project Folder allows you to add directories to your Cast. Anything inside the directory (with some limitations like node_modules) will be available to anyone watching your Cast.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InbxQ9E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98ek7nnaqh5t2jj4f2mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InbxQ9E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98ek7nnaqh5t2jj4f2mb.png" alt="Add Project Folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are able to add multiple directories and you can add directories once a Cast is live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRUPo3fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vrinmteojx783r58sf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRUPo3fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vrinmteojx783r58sf1.png" alt="Add folders while live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the Cast is live, any edits you make within that directory will reflect live on the Player. This means that you can write new lines of code in any existing files on your local machine (in the code editor of your choice), or you can create new files, folders, etc. all within the directory you uploaded, and it will be available to your audience.&lt;/p&gt;

&lt;p&gt;You‚Äôre also able to change the name of your directories within the studio by clicking on the pencil next to the uploaded directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgGpRYj3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yq8gwd77k00pck3qeqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgGpRYj3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yq8gwd77k00pck3qeqm.png" alt="Change folder name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding in any directories is encouraged, but completely optional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screen-sharing"&gt;
  &lt;/a&gt;
  Screen Sharing
&lt;/h3&gt;

&lt;p&gt;You‚Äôre able to add media to your videos via screen sharing, or with your webcam. You can also choose individual windows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XiDoHcNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4gkv10r7hal5nn8onhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XiDoHcNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4gkv10r7hal5nn8onhd.png" alt="Screen sharing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just click Select a Screen Sharing to select which screen or window you want to share.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhT39UO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcxne9bojx9f6aete33j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhT39UO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcxne9bojx9f6aete33j.png" alt="Select A Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can deactivate a screen during a live Cast by hitting the green window button to the left of the screen name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1WrgCYu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8l8jzdy02fek1tcjcw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WrgCYu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8l8jzdy02fek1tcjcw5.png" alt="Deactivate a screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also select which audio input you wish to include alongside your screen share.¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#casting-details"&gt;
  &lt;/a&gt;
  Casting Details
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TpTOpv-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ang45ou44nsq6sg3ou3d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpTOpv-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ang45ou44nsq6sg3ou3d.png" alt="Casting Details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can enter casting details here before starting the Cast, or after the Cast is finished. Casting details, including the cover, can be edited at any point after the Cast has ended by going to the Cast on the website and hitting edit, or editing it on the Player directly after the Cast has ended.&lt;/p&gt;

&lt;p&gt;If you‚Äôre going to be sharing your Cast with people while it‚Äôs live, it‚Äôs highly recommended that you fill this out before casting. It can also be altered in the middle of a live Cast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permissions"&gt;
  &lt;/a&gt;
  Permissions
&lt;/h3&gt;

&lt;p&gt;Permissions by default will publish the Cast to your personal account with private access. Remember to change this to public if you‚Äôre doing a live Cast that you want others to view.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7YA_nd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0mfxiqo3zl4hsoz4wnz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7YA_nd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0mfxiqo3zl4hsoz4wnz.png" alt="Permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Permissions can be changed in the middle of a live Cast, or anytime after the Cast is published.&lt;/p&gt;

&lt;p&gt;If you belong to an organization, making the Cast private will still make it accessible to anyone else that is part of the organization, but not the general public. This is a great way for people to communicate with Casts across workplaces!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-view"&gt;
  &lt;/a&gt;
  Live View
&lt;/h3&gt;

&lt;p&gt;When you‚Äôre reading to start a Cast, hit the big green ‚ÄòStart Streaming‚Äù button and a countdown will appear like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iy9ySOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adjwuyope4wel55d2vo3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iy9ySOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adjwuyope4wel55d2vo3.gif" alt="Live view gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the countdown is finished, it will then look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Obc7bZTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxt7vr1zegbv1ykwbz3y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Obc7bZTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxt7vr1zegbv1ykwbz3y.png" alt="Live Studio View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It shows you that it‚Äôs live, gives you a live view count of people currently watching, as well as showcases the length that the Cast has been on for.¬†&lt;/p&gt;

&lt;p&gt;Below that you can access the Cast URL by clicking the copy button directly to the right of the URL, or clicking on the new window button to open the Player. If you‚Äôre doing a live Cast, it is recommended that you keep the Player open to keep up with the chat!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKeNMENO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpdcj1103x41wyniqv8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKeNMENO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpdcj1103x41wyniqv8q.png" alt="Cast Url"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cast-ended"&gt;
  &lt;/a&gt;
  Cast Ended
&lt;/h3&gt;

&lt;p&gt;Once you‚Äôre done with the Cast, hit ‚ÄúEnd Streaming‚Äù. You‚Äôll then see a summary of the Cast, including length. You‚Äôre also given the URL to access the recorded version of the Cast.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hC_ETeP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omp2rk4z82q2rvbmgedx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hC_ETeP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omp2rk4z82q2rvbmgedx.png" alt="Cast Ended Studio View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs important to note that it does take some time for any media to upload, so you‚Äôll see a ‚Äúpreparing media‚Äù banner on the Player when opening the Cast right away after ending it. This will go away once the media has finished being uploaded.&lt;/p&gt;

&lt;p&gt;All in all, the Studio is an incredibly useful tool that combines both live streaming media and code, making it a stand-out product in the development world.&lt;/p&gt;

&lt;p&gt;Prefer a video tutorial? Watch the video below for a follow-along tutorial!‚Äç&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dzlKc6rr0LU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>startup</category>
    </item>
    <item>
      <title>React/Webpack: From MB to KB. How we solved our bundling problem</title>
      <author>Georgios Kampitakis</author>
      <pubDate>Wed, 20 Oct 2021 17:50:54 +0000</pubDate>
      <link>https://dev.to/gkampitakis/reactwebpack-from-mb-to-kb-how-we-solved-our-bundling-problem-156e</link>
      <guid>https://dev.to/gkampitakis/reactwebpack-from-mb-to-kb-how-we-solved-our-bundling-problem-156e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was first posted on &lt;a href="https://tech.sovrn.com/2021/02/22/react-webpack-bundling.html"&gt;Sovrn Tech Blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article I am going to describe the mistakes we made in bundling our UI application written in React.&lt;/p&gt;

&lt;p&gt;The reasons we reached serving a bundle &amp;gt; &lt;code&gt;11.0mb&lt;/code&gt; for a relative small application and the steps we took in order to minimize and split that bundle for better loading performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-context"&gt;
  &lt;/a&gt;
  Some Context
&lt;/h2&gt;

&lt;p&gt;Our UI is a React application where we use &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; for bundling our application, &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; as a design system for our components and an internal library which is a wrapper of &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; that we use across the company for creating a cohesive and consistent brand identity in the UI. Finally we have split our application to smaller independent npm modules which we pull into our main UI like ‚Äúplugins‚Äù.&lt;/p&gt;

&lt;p&gt;Bundling never has been an issue or at least noticeable enough that we had to take action. But after a extensive updates in all of our dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Webpack v4&lt;/code&gt; to &lt;code&gt;Webpack v5&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;React 16.8.x&lt;/code&gt; to &lt;code&gt;React 16.14.x&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Material-UI v3&lt;/code&gt; to &lt;code&gt;Material-UI v4&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;‚Ä¶ and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;we started noticing our application was taking more time to load and was slower in a ‚Äúcold start‚Äù.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With the term ‚Äúcold start‚Äù I mean we haven‚Äôt used the application for a long time and when we visit our browser doesn‚Äôt have any resources cached.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Our first action was to visit Chrome Devtools and inspect what was slowing us down&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lG2Il5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c88np4fu6q2x51t1r45o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lG2Il5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c88np4fu6q2x51t1r45o.png" alt="Chrome Devtools Network Tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Time here is not representative as the screenshot is from local served instance&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we noticed the bundle was much bigger but we couldn‚Äôt understand what was different as our implementation remained the same so we should not be pulling more dependencies into our bundle.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solutions"&gt;
  &lt;/a&gt;
  The solution(s)
&lt;/h2&gt;

&lt;p&gt;We started by analyzing our bundle and understanding what exactly was delivered to the user. We found a webpack plugin that helped us to do this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;Webpack Bundle Analyzer&lt;/a&gt; - ‚ÄúVisualize size of webpack output files with an interactive zoomable treemap.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDkONQyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7pcblcxnzprq6x1ezj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDkONQyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7pcblcxnzprq6x1ezj4.png" alt="Webpack Bundle Analyzer TreeMap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;From this image we could right away understand that multiple things were wrong&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As you can see we were having multiples instances of the same library being pulled from different dependencies. For example &lt;code&gt;underground-ui-whitespace-sovrn-content&lt;/code&gt;, &lt;code&gt;underground-ui-sync-skys-services-content&lt;/code&gt;, etc, all those modules are the ‚Äúplugins‚Äù I mentioned above, and they all have a copy of the &lt;code&gt;Material-UI&lt;/code&gt; even if &lt;code&gt;Material-UI&lt;/code&gt; is present in the main application. The same thing happened with React as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another issue was some ‚Äúheavy‚Äù libraries we were not really utilizing to excuse relying on them, e.g. &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt;, &lt;a href="http://bluebirdjs.com/docs/getting-started.html"&gt;Bluebird&lt;/a&gt;, &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last mistake that was noticeable just from this view was that we were not tree shaking. It‚Äôs evident from &lt;code&gt;Material-UI&lt;/code&gt; icons section we were importing &lt;strong&gt;all&lt;/strong&gt; the icons. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we had a plan.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#peer-dependencies-and-versioning"&gt;
  &lt;/a&gt;
  Peer dependencies and versioning
&lt;/h3&gt;

&lt;p&gt;For the first issue we reviewed all of our internal UI ‚Äúplugins‚Äù and we found that in our dependencies most of the duplicated libraries were locked in specific versions. By doing so, mistakenly were declaring that our ‚Äúplugin‚Äù could only work with this specific version so we ended with different versions of the same library.&lt;/p&gt;

&lt;p&gt;The solution was using &lt;code&gt;peerDependencies&lt;/code&gt; and using ^ syntax in our versions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;^ in semantic versioning means we accept all minor releases ( e.g 1.x ) and not a specific one.&lt;/p&gt;

&lt;p&gt;Peer dependency means that your package needs a dependency that is the same exact dependency as the person installing your package.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now the main application was responsible for providing the dependencies to the ‚Äúplugins‚Äù for running.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heavy-libraries"&gt;
  &lt;/a&gt;
  "Heavy" libraries
&lt;/h3&gt;

&lt;p&gt;Second step was removing the ‚Äúheavy‚Äù libraries, it was easy removing &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt;, &lt;a href="http://bluebirdjs.com/docs/getting-started.html"&gt;Bluebird&lt;/a&gt;. We replaced the first with &lt;a href="https://date-fns.org/"&gt;date-fns&lt;/a&gt; and &lt;a href="http://bluebirdjs.com/docs/getting-started.html"&gt;Bluebird&lt;/a&gt; with native promises. &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt; unfortunately because of time constraints we could not refactor into moving out from some ‚Äúhandy‚Äù utilities it provides but we are planning to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tree-shaking"&gt;
  &lt;/a&gt;
  Tree shaking
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tree shaking is a term commonly used in the JavaScript context for dead-code elimination.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Third step was tree shaking and needed more investigation. So we started by reading for &lt;a href="https://mui.com/guides/minimizing-bundle-size/"&gt;Material-UI Minimizing Bundle Size&lt;/a&gt; and how to &lt;code&gt;import&lt;/code&gt; for shaking &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; components and icons but we could not find something wrong there. So our next option was &lt;a href="https://webpack.js.org/guides/tree-shaking/"&gt;Webpack Tree Shaking&lt;/a&gt;. Lot‚Äôs of interesting points there but the one we needed was this&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It relies on the static structure of ES2015 module syntax, i.e. import and export.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;but we were compiling our own modules and the main UI to &lt;code&gt;module: commonjs&lt;/code&gt; and &lt;code&gt;target: es5&lt;/code&gt; so Webpack was not able to understand what was ‚Äúdead code‚Äù and should be tree shaken. So we changed to compile into &lt;code&gt;module: esnext&lt;/code&gt; and &lt;code&gt;target: es2017&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RYGBZKnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjtxt8c10pug7felw36f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYGBZKnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjtxt8c10pug7felw36f.png" alt="TreeMap after changes"&gt;&lt;/a&gt;&lt;em&gt;The results were &lt;strong&gt;amazing&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;We dropped from the &lt;code&gt;11.0mb&lt;/code&gt; to &lt;code&gt;4.67mb&lt;/code&gt; without losing any functionality but still something was not right. The module in the screenshot &lt;code&gt;@sovrn/platform-ui-core&lt;/code&gt; is the wrapper we use around &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; and we could see some components that we were clearly not using. We went back did some reading and found the &lt;code&gt;sideEffects&lt;/code&gt; property in &lt;code&gt;package.json&lt;/code&gt; that &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; has adopted for - &lt;em&gt;denoting which files in a project are ‚Äúpure‚Äù and therefore safe to prune if unused&lt;/em&gt;. &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; uses it but we didn‚Äôt so we were not able to tree shake our internal &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; wrapper.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more information about &lt;code&gt;sideEffects&lt;/code&gt; &lt;a href="https://webpack.js.org/guides/tree-shaking/#clarifying-tree-shaking-and-sideeffects"&gt;Clarifying tree shaking and sideEffects&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKPdJhnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxxua8vhuezxyyu5n171.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKPdJhnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxxua8vhuezxyyu5n171.png" alt="Final TreeMap"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;So the bundle after this change was &lt;code&gt;3.34mb&lt;/code&gt; and &lt;code&gt;269kb&lt;/code&gt; Gzipped&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonuses"&gt;
  &lt;/a&gt;
  Bonuses
&lt;/h2&gt;

&lt;p&gt;Of course after so much investigation we identified other places were we could improve our application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-splitting"&gt;
  &lt;/a&gt;
  Code Splitting
&lt;/h3&gt;

&lt;p&gt;Our application is structured in a way that can be code split ( ‚Äúplugin‚Äù components ). So we leveraged &lt;a href="https://webpack.js.org/guides/code-splitting/"&gt;Webpack Code Splitting&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/code-splitting.html"&gt;React Code Splitting&lt;/a&gt; with &lt;code&gt;lazy loading&lt;/code&gt; so we load the bundles for the plugins only when we need them.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFPT1rQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqiks0ki8pxrpzbc1dnf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFPT1rQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqiks0ki8pxrpzbc1dnf.png" alt="TreeMap with codesplitting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;the final bundle looks like this&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now on our initial load we only pull dependencies and bundles used for the initial scene meaning we are pulling a bundle of &lt;code&gt;~1.9mb&lt;/code&gt; or &lt;code&gt;~173kb&lt;/code&gt; Gzipped.&lt;/p&gt;

&lt;p&gt;All the colorful modules are our ‚Äúplugins‚Äù that can be dynamically loaded on request.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-keep-track"&gt;
  &lt;/a&gt;
  How to keep track
&lt;/h3&gt;

&lt;p&gt;Last but not least, we wanted to make sure we could keep track of our bundle and make sure that every time we introduce a new change we can see how it affects our bundle.&lt;/p&gt;

&lt;p&gt;There are many tools you can use and integrate to your CI/CD pipeline. We use &lt;a href="https://www.npmjs.com/package/bundlesize"&gt;Bundlesize&lt;/a&gt;, which you can configure it and set limits for your bundlesize and if the build isn‚Äôt below those limits it will fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
 PASS  dist/static/js/140.39a3af3a.js: 171.73KB &amp;lt; maxSize 244KB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

 PASS  dist/static/js/201.e6df94bb.chunk.js: 3.33KB &amp;lt; maxSize 244KB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

 PASS  dist/static/js/218.9e0f9972.chunk.js: 2.47KB &amp;lt; maxSize 244KB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

 PASS  dist/static/js/246.1c66cc41.chunk.js: 3.49KB &amp;lt; maxSize 244KB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in conjunction with &lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;Webpack Bundle Analyzer&lt;/a&gt; we can know what‚Äôs wrong in our bundle or not.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;




&lt;p&gt;If you liked or found the post useful leave a ‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>react</category>
      <category>webpack</category>
      <category>javascript</category>
      <category>c</category>
    </item>
    <item>
      <title>Introduction to Database Schemas</title>
      <author>Dubymar Tollinchi</author>
      <pubDate>Wed, 20 Oct 2021 17:18:55 +0000</pubDate>
      <link>https://dev.to/dubymarjtr/introduction-to-database-schemas-9dk</link>
      <guid>https://dev.to/dubymarjtr/introduction-to-database-schemas-9dk</guid>
      <description>&lt;p&gt;About I year ago I took &lt;em&gt;Introduction to Databases&lt;/em&gt; at my college, where I first learned &lt;strong&gt;SQL&lt;/strong&gt;. I consider it to be quite a simple language to understand and write, considering my basic experience in that class. I knew database is an important concept for web developers to understand, so I made sure I understood the foundations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-database-schemas-and-how-to-implement-one"&gt;
  &lt;/a&gt;
  What are database schemas and how to implement one?
&lt;/h2&gt;

&lt;p&gt;When learning about &lt;strong&gt;databases schemas&lt;/strong&gt;, the best way to describe them would be as a "blueprint". This blueprint will contain the shape and format of the data, as well as the necessary patterns to retrieve the information when requested. This is called &lt;em&gt;logical schema&lt;/em&gt; and it is the first step to developing a database. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-schemas-for-relational-databases"&gt;
  &lt;/a&gt;
  Designing schemas for relational databases
&lt;/h3&gt;

&lt;p&gt;As I learned with relational (or static) databases, we do this applying Entity-Relationship (ER) models, which are diagrams that &lt;em&gt;describe entities, their attributes, and how they relate to one another&lt;/em&gt;. Using ER models in the early stage of designing the database is very convenient since it gives you a clear idea of how your data will be stored, connected, and retrieved.  &lt;/p&gt;

&lt;p&gt;In class, the first thing I used to do was determine the &lt;strong&gt;entities&lt;/strong&gt; that I had, and by an entity I mean a real-life "object" or "thing" that exists, something that we can identify. These entities have &lt;strong&gt;attributes&lt;/strong&gt;, which describe the characteristics of these objects. One (or a combination) of these attributes should be unique, which would be used as the identifier. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kGGweGTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bo26zuwqnggy7mkjpej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kGGweGTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bo26zuwqnggy7mkjpej.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, the &lt;em&gt;fun&lt;/em&gt; part: figuring out how the entities are going to relate to one another. This is done using minimum and maximum cardinality, which will determine one-to-one, one-to-many, or many-to-many relationships. For example, &lt;strong&gt;students and classes&lt;/strong&gt;: students can take many classes, and classes can be taken by many students. This easy example represents a many-to-many relationship, but in real life, even if you know how your data will be, figuring this out can be a headache.&lt;/p&gt;

&lt;p&gt;Once everything is looking good we start developing the &lt;strong&gt;physical schema&lt;/strong&gt;. The first step is to declare the tables, one per entity, and declare its attributes as columns. A very important step is to identify the primary key, which sometimes can be unique or composite. These keys will be used as foreign keys in other tables to relate to one another.&lt;/p&gt;

&lt;p&gt;In my basic experience, relating tables can get complicated. Basic relationships between tables might just include a primary key of one table as the foreign key in another table, but also might include several tables with primary keys from different tables as foreign keys in one or more tables. So, it can get pretty messy.&lt;/p&gt;

&lt;p&gt;During this stage, we use &lt;strong&gt;normalization&lt;/strong&gt; to minimize data redundancy and inconsistencies. Normalization is a process where we split tables depending if we encounter certain elements that can be treated in their separate table. Another thing to have in mind is predicted query patterns and what tables will be accessed more than others. By doing this we can identify database indexes, so we can &lt;em&gt;speed up the retrieval process&lt;/em&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#designing-schemas-for-nonrelational-and-nosql-databases"&gt;
  &lt;/a&gt;
  Designing schemas for non-relational and NoSQL databases
&lt;/h3&gt;

&lt;p&gt;This process is often quite different. Non-relational databases are used for &lt;em&gt;high performance using a limited number of predefined queries&lt;/em&gt;. These database schemas are designed depending on the application that will use them. &lt;/p&gt;

&lt;p&gt;The first step is to determine the primary queries (pseudo queries, since the database, does not exist yet) the database needs to run. Knowing this will help us understand how we can structure our data in a way that is optimized to retrieve.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1294730&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john.doe@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123 Main St&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;orderID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Laptop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;599.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;orderID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bed sheets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;35.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
            &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working with JavaScript, we can use an object as an example. This object will track information for a &lt;strong&gt;customer&lt;/strong&gt; and its &lt;strong&gt;orders&lt;/strong&gt;, so here we can have an idea of how the information can be accessed. First access the customer object, which in this case is one simple object, but realistically it will be an array of objects. Once there, we use the customer id to locate the record that we want. Then we can access its properties, such as email or address. We can also access a nested array of objects (or records in this case) such as &lt;strong&gt;orders&lt;/strong&gt;. Doing this we can know all the orders placed by costumers.&lt;/p&gt;

&lt;p&gt;This is very convenient and easier to work with by the fact that all the information related to an entity can be stored in one single record, unlike relational databases. But non-relational databases are not great at combining data from multiple entities in a single query, so we have to decide the best way to represent our data. Avoiding duplicated data will reduce the number of items to maintain. &lt;/p&gt;

&lt;p&gt;In my JavaScript project for this semester, I am planning to create an e-Commerce, where I can implement a non-relational database using MongoDB to get started with back-end development. &lt;/p&gt;

</description>
      <category>database</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Welcome Thread - v147</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 20 Oct 2021 17:14:55 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v147-4mkj</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v147-4mkj</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/10LKovKon8DENq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/10LKovKon8DENq/giphy.gif" alt="Pok√©mon friends"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Which Domain is Best: BlogSpot Domain Vs Custom Domain</title>
      <author>Bhavyashah</author>
      <pubDate>Wed, 20 Oct 2021 16:18:05 +0000</pubDate>
      <link>https://dev.to/bhavyashah/which-domain-is-best-blogspot-domain-vs-custom-domain-19l0</link>
      <guid>https://dev.to/bhavyashah/which-domain-is-best-blogspot-domain-vs-custom-domain-19l0</guid>
      <description>&lt;p&gt;Have you ever thought of buying a domain name for your blog? Many bloggers are stuck between purchasing a free blogspot domain vs purchasing a custom domain. Though there are many different things to consider, at the end of the day, choosing an appropriate domain will help your blog convert better. So should you buy a domain or stick to BlogSpot?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See My Answer is if your content is unique and different from other people then you have to purchase a Custom Domain Because If you are starting a blog then you have to invest something then you can concentrate on that particular blogging because you are thinking about how we manage domain money from blogging.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;See I also Started my blog named as a custom domain blogtriggers.com I think If you are doing blogging then you have to use custom domain name for branding your blogging about particular niche.  &lt;/p&gt;

&lt;p&gt;For More Details about &lt;a href="https://www.blogtriggers.com/2021/08/blogspot-vs-custom-domain.html"&gt;blogspot domain vs custom domain&lt;/a&gt; then read this posts for details information&lt;/p&gt;

</description>
      <category>blogger</category>
      <category>difference</category>
      <category>domain</category>
    </item>
    <item>
      <title>Go .. C of 21st century</title>
      <author>Bek Brace</author>
      <pubDate>Wed, 20 Oct 2021 16:16:00 +0000</pubDate>
      <link>https://dev.to/bekbrace/go-c-of-21st-century-4ibd</link>
      <guid>https://dev.to/bekbrace/go-c-of-21st-century-4ibd</guid>
      <description>&lt;p&gt;Go language, it is a statically typed compiled language and it is often described as c for the 21st century!&lt;/p&gt;

&lt;p&gt;It was created at google in 2007 by legends who really know their stuff like Ken Thompson the inventor of the (b) and (c) programming languages; and then version 1.0 was released as open source software in 2012; and the was design was meant to be simple and efficient and that's why we call it go.&lt;/p&gt;

&lt;p&gt;The source code is compiled down to machine code which means it generally outperforms interpreted languages but it's famous for its extremely fast compile times made possible by innovations to dependency analysis and even though it's a statically typed language it performs type inference to deliver a syntax that is very concise and practical.&lt;/p&gt;

&lt;p&gt;It also has a package and module system making it easy to import and export code between projects to get started install go and then open an empty directory on your system.&lt;/p&gt;

&lt;p&gt;Create a file ending in go then add package main at the top to create a standalone executable then&lt;br&gt;
declare a main function which is where your program will start executing &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGeFUsmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jel4d44r081ryqa97pci.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGeFUsmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jel4d44r081ryqa97pci.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go has a standard library of core packages to handle common requirements like math networking or formatted io by importing "fmt" we can print a line to the standard output then run the go build command and it quickly compiles the source code and dependencies into an executable binary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k4vYIrz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw8sfahwq7bkg0p6tuu2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k4vYIrz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw8sfahwq7bkg0p6tuu2.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJWXfHK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fa41fm8v5prm3wxdjud.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJWXfHK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fa41fm8v5prm3wxdjud.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it comes to dependencies we can also link to remote packages on github.&lt;/p&gt;

&lt;p&gt;Run go mod init from the command line and that creates a go module file that enables dependency tracking.&lt;/p&gt;

&lt;p&gt;Go is like a concise version of c or c plus plus if you know any of those languages, you declare a&lt;br&gt;
variable with the var keyword followed by its name and type and initialize it with a value or you might use the short assignment syntax to replace var and let go automatically infer the type and you can define multiple variables from a single line go has all the other features you would expect in a programming language like arrays maps loops and control flow but also allows you to store the memory address of a value using pointers while disallowing pointer arithmetic which often leads to dangerous and unpredictable behavior in&lt;br&gt;
addition it supports concurrency with go routines which are functions that can run at the same time as other functions by utilizing multiple threads on a cpu.&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Sam Lessin: co-Founder and co-CEO of Fin</title>
      <author>Taylor Veino</author>
      <pubDate>Wed, 20 Oct 2021 16:12:16 +0000</pubDate>
      <link>https://dev.to/gunio/sam-lessin-co-founder-and-co-ceo-of-fin-23o4</link>
      <guid>https://dev.to/gunio/sam-lessin-co-founder-and-co-ceo-of-fin-23o4</guid>
      <description>&lt;p&gt;Sam Lessin is the co-founder and co-CEO of Fin. He also invests in tech startups through Slow Ventures, where he is a partner and early investor in companies like Venmo and Masterclass. Previously, he was a Vice President of Product Management at Facebook until 2014, where he managed several product groups.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://bit.ly/3DW9ILf"&gt;this episode&lt;/a&gt;, Teja Yenamandra, CEO of Gun.io talks to Sam about his journey from the VP of Product Management at Facebook to coding boot camp, his "human in the loop" approach at Fin, and the dirty secret about all CEOs.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/thefrontierpod/sam-lessin"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;Sam Lessin&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/thefrontierpod"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        The Frontier Podcast
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-sam-lessin" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-sam-lessin" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-sam-lessin" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-sam-lessin" alt="The Frontier Podcast" src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEkq_lJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4bxuWncX--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/588/3bc4eaf4-f28f-426d-aeb2-3776ef9ab535.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-sam-lessin"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/thefrontierpod/sam-lessin"&gt;
      &lt;img id="episode-profile-image" alt="Sam Lessin" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnF4DTeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xDjgyg6L--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/588/3bc4eaf4-f28f-426d-aeb2-3776ef9ab535.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


</description>
      <category>career</category>
      <category>podcast</category>
      <category>ai</category>
    </item>
    <item>
      <title>Create Mad Libs game in Python</title>
      <author>pythonscholar</author>
      <pubDate>Wed, 20 Oct 2021 16:03:02 +0000</pubDate>
      <link>https://dev.to/pythonscholar/create-mad-libs-game-in-python-hc8</link>
      <guid>https://dev.to/pythonscholar/create-mad-libs-game-in-python-hc8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-mad-libs-game"&gt;
  &lt;/a&gt;
  What is Mad Libs Game?
&lt;/h2&gt;

&lt;p&gt;Mad Libs is the quintessential game of make-believe. You provide a list of words, and everyone else adds in their own silly, outrageous, or even absurd ideas for what they might be. Everyone laughs uproariously while using the best words, puns, and turns of phrase they can think up. There are tons of variations that you can take your Mad Libs adventures with at any time to suit your mood or theme.&lt;/p&gt;

&lt;p&gt;Mad Libs Generator will give you a variety of prompts that you can use to start your story, or you can use them as the basis for your own stories. You then get to add in your funny word-puns, slogans, quotes, poetry beats, and even sound effects.&lt;/p&gt;

&lt;p&gt;You can check our &lt;a href="https://pythonscholar.com/python-projects/mad-libs-game-in-python/"&gt;How to Create Mad Libs game in Python&lt;/a&gt; guide to learn more about mad libs games using Python.&lt;/p&gt;

&lt;p&gt;Now let's see a simple tutorial on how to create a mad libs game using only basic python skills; mostly, we will use python string and python &lt;a href="https://pythonscholar.com/python-programming/python-input-and-output/"&gt;input-output function&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; In the first step, we will take the required input from the user and store it in the python variable to use in the future in our mad lib story. Copy the below code in your python compiler or Python IDE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;verb_1 = input("Enter a verb of choice, and press enter:")
adj_1 = input("Enter a adjective of choice, and press enter:")
verb_2 = input("Enter second verb of choice, and press enter:")
body_part = input("Enter a body part name of choice, and press enter:")
adverb = input("Enter an adverb of choice, and press enter:")
body_part_2 = input("Enter any body name of your choice,and press enter:")
noun = input("Enter a noun of choice, and press enter:")
verb_3 = input("Enter the third verb of choice, and press enter:")
animal = input("Enter name of any animal of choice, and press enter:")
noub_2 = input("Enter an noun of choice , and press enter:")
verb_4 = input("Enter the fourth verb of choice, and press enter:")
adj_2 = input("Enter an adjective of choice, and press enter:")
color = input("Enter any color name, and press enter:")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Now, let‚Äôs add the user inputs into a story and make it a fun game, here; we will use python string to print our story.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;story = "Most doctors agree that bicycle of" + verb_1 + " is a/an " + adj_1 + " form of exercise." + verb_2 +" a bicycle enables you to develop your " + body_part + " muscles as well as " + adverb + " increase the rate of a " + body_part_2 + " beat. More " + noun + " around the world "+ verb_3 +" bicycles than drive "+ animal +". No matter what kind of "+ noun_2 +"you "+ verb_4 + ", always be sure to wear a/an " +adj_2+ " helmet.Make sure to have " + color + " reflectors too! "
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; In the last step, we will print the story to get the final output of our name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(story)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, just using basic python skills, we have created a small game. &lt;/p&gt;

&lt;p&gt;We hope you have enjoyed this tutorial and learned something new.&lt;/p&gt;

&lt;p&gt;Happy learning.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>programming</category>
      <category>github</category>
    </item>
  </channel>
</rss>
