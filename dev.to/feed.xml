<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Where is the end of a software engineer‚Äôs career?</title>
      <author>Vadim Kalinin</author>
      <pubDate>Fri, 18 Jun 2021 09:45:35 +0000</pubDate>
      <link>https://dev.to/s2engineers/where-is-the-end-of-a-software-engineer-s-career-3ahd</link>
      <guid>https://dev.to/s2engineers/where-is-the-end-of-a-software-engineer-s-career-3ahd</guid>
      <description>&lt;p&gt;In various ways, we‚Äôre all striving for a better future as engineers, and one of the instruments we own to get that future is a &lt;strong&gt;ladder&lt;/strong&gt;, which leads us to various career opportunities of our dreams.&lt;/p&gt;

&lt;p&gt;There are many opportunities to pick from. &lt;/p&gt;

&lt;p&gt;For many newcomers, it‚Äôs a hard choice to make. &lt;/p&gt;

&lt;p&gt;Frontend, Backend, Mobile, etc.? &lt;br&gt;
Which programming language to start with? &lt;br&gt;
Consulting or a product company? &lt;br&gt;
Enterprise or startup? &lt;/p&gt;

&lt;p&gt;Mostly, the decision should be based on what makes us feel right, though wage (for obvious reasons) also plays an important role in it.&lt;/p&gt;

&lt;p&gt;To better describe the case, I take my personal example. &lt;/p&gt;

&lt;p&gt;More than 7 years ago, when I was just starting my career as a web software engineer, I picked Frontend because it was an attractive and emerging field in web development. At that moment, I was dreaming of becoming a Senior and having all the knowledge my higher-ranked colleagues had.&lt;/p&gt;

&lt;p&gt;A few years later, when I became an expert in one already obsolete MVC framework (trends in front-end development used to change faster than we could keep up with), React and UX/UI principles, I realized catching up on backend would come in handy. The reason was that I could eventually make smarter decisions and not move everything to the browser-side just because I knew it better. This and many other decisions, together with reflections, then led me to the current position ‚Äì Senior Software Engineer. &lt;/p&gt;

&lt;p&gt;Your way is apparently different from mine, maybe more straightforward or more crooked, but ultimately it makes each of us unique on each stage we reach.&lt;/p&gt;

&lt;p&gt;Senior position is a sweet spot in my opinion. The requirements to senior position might differ from company to company, but generally speaking, a senior engineer is capable of: solving most of the imminent technical challenges in many types of projects, can clearly and reasonably explain their thoughts, guide their junior colleagues, and (what‚Äôs also very important!) learn together with them. Senior is equated with a Swiss-knife, fitting almost into any project (very convenient for talent acquisition). &lt;/p&gt;

&lt;p&gt;In my experience, the job title doesn‚Äôt usually change that often for a hardcore techie after reaching a Senior position unless they start managing or leading. Nonetheless, it doesn‚Äôt mean the wage stays steel, acquiring new tech skills also brings you further up the ladder, and there are really lots (Blockchain, IoT, AI, etc.) to choose from nowadays.&lt;/p&gt;

&lt;p&gt;Although there is still lots to learn in this position, this is not the end, right?&lt;/p&gt;

&lt;p&gt;I noticed people start being very creative about their next opportunity at the senior level, maybe because thanks to their experience they can act almost standalone. Some people turn to freelance to get better payment and/or personalized work conditions, some decide to go for their own business, some switch more into management and leading, others get inspired by tutoring, public speaking, or technical writing and seek their fame there. I can list many more examples where the journey might continue but will let your inner force decide this on its own.&lt;/p&gt;

&lt;p&gt;And even though the seniority system might slowly disappear, for me it was never about the caste system, but about the &lt;em&gt;mindset&lt;/em&gt;, &lt;em&gt;experience&lt;/em&gt;, and &lt;em&gt;common skills&lt;/em&gt; valid for various technologies and industries. Reaching these qualities as I discovered is far from being a peak (or an ‚Äúend‚Äù) but rather opens new horizons.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No matter your position or role, at this point, I encourage you to admire yourself for the goals already reached.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What were your goals when you started (if not a secret üòâ)? Was it a tough journey to reach them? And where does your ladder lead you next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm excited to hear your stories in the thread.&lt;/p&gt;

&lt;p&gt;Yours truly&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>codeiscolorful</category>
    </item>
    <item>
      <title>Metrics to evaluate your Machine Learning algorithm</title>
      <author>Apoorv Tyagi</author>
      <pubDate>Fri, 18 Jun 2021 09:30:06 +0000</pubDate>
      <link>https://dev.to/apoorvtyagi/metrics-to-evaluate-your-machine-learning-algorithm-5bd6</link>
      <guid>https://dev.to/apoorvtyagi/metrics-to-evaluate-your-machine-learning-algorithm-5bd6</guid>
      <description>&lt;p&gt;You made a machine learning or deep learning model. Amazing! ü•≥&lt;/p&gt;

&lt;p&gt;But how do you check its performance and robustness? Simply building a predictive model is not enough. You have to create a model which gives high accuracy on &lt;strong&gt;out-of-sample data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That's where evaluation metrics come into the picture. They are used to measure the quality of the statistical or machine learning model, and this article will introduce you to the most common and yet important metrics to evaluate your machine learning algorithms.&lt;/p&gt;

&lt;p&gt;If you're someone who just started out in the field of Data Science and Machine Learning, this is for you. We will discuss the following terms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Confusion matrix&lt;/li&gt;
&lt;li&gt;  Accuracy&lt;/li&gt;
&lt;li&gt;  Precision&lt;/li&gt;
&lt;li&gt;  Recall&lt;/li&gt;
&lt;li&gt;  F1 score&lt;/li&gt;
&lt;li&gt;  Mean Absolute Error&lt;/li&gt;
&lt;li&gt;  R Squared Score&lt;/li&gt;
&lt;li&gt;  Root Mean Squared Error&lt;/li&gt;
&lt;li&gt;  ROC (Receiver Operating Characteristics) curve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let‚Äôs dive into it to learn about them :&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#confusion-matrix"&gt;
  &lt;/a&gt;
  Confusion Matrix
&lt;/h1&gt;

&lt;p&gt;A confusion matrix is one of the simplest concepts in the field of machine learning, and yet so important when it comes to statistical classification problems.&lt;/p&gt;

&lt;p&gt;A confusion matrix is a N X N matrix, where N is the number of classes being predicted. It is usually used to &lt;strong&gt;describe the performance of a classification model based on the true values known for a data set&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In simple words, it is a summary of the prediction result made by the classification model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#terms-associated-with-confusion-matrix"&gt;
  &lt;/a&gt;
  Terms Associated with Confusion Matrix
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;True Positive (TP):&lt;/strong&gt; True positive means their actual class value is 1 and the predicted value is also 1.&lt;/p&gt;

&lt;p&gt;For example, The case where the woman is actually pregnant and the model also classifies that she is pregnant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;False Positive (FP):&lt;/strong&gt; False positive means their actual class value is 0 and the predicted value is 1.&lt;/p&gt;

&lt;p&gt;For example, The case where the woman is not pregnant and the model classifies that she is pregnant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;True Negative (TN):&lt;/strong&gt; True negative means their actual class value is 0 and the predicted value is also 0.&lt;/p&gt;

&lt;p&gt;For example, The case where the woman is actually not pregnant and the model also classifies that she is not pregnant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;False Negative (FN):&lt;/strong&gt; False-negative means their actual class value is 1 and the predicted value is 0.&lt;/p&gt;

&lt;p&gt;For example, The case where the woman is actually pregnant and the model also classifies that she is not pregnant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zIhj8nIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623853513229/trs6eb65N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIhj8nIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623853513229/trs6eb65N.png" alt="confusion matrix.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The confusion matrix in itself is not a performance measure but all the performance metrics are dependent on the confusion matrix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#accuracy"&gt;
  &lt;/a&gt;
  Accuracy
&lt;/h1&gt;

&lt;p&gt;Accuracy is the most common metric that you can see everywhere when you're evaluating your model. It is simply defined as the number of correct predictions made by your model.&lt;/p&gt;

&lt;p&gt;In simple terms, &lt;strong&gt;accuracy is the ratio of all the correct predictions to the total number of predictions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It can be calculated using a confusion matrix.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ez903HgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997989964/x6JODZUuU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ez903HgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997989964/x6JODZUuU.png" alt="accuracy.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#precision"&gt;
  &lt;/a&gt;
  Precision
&lt;/h1&gt;

&lt;p&gt;Precision is defined as &lt;strong&gt;the total number of correctly classified positive examples by the total number of predicted positive examples&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In some cases, your classification model might classify based on the most frequent classes. Which in turn will bring a low accuracy because your model didn‚Äôt learn anything and just classified based on the top class.&lt;/p&gt;

&lt;p&gt;Therefore, we need class-specific performance metrics to analyze. Precision is one of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3l-D_t-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997831139/q5VbMq6zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3l-D_t-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997831139/q5VbMq6zx.png" alt="precision.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It depicts how much the model is right when it says it is right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#recall"&gt;
  &lt;/a&gt;
  Recall
&lt;/h1&gt;

&lt;p&gt;A recall (also known as &lt;em&gt;sensitivity&lt;/em&gt;) refers to the percentage of total relevant results correctly classified by the classification model.&lt;/p&gt;

&lt;p&gt;It is the &lt;strong&gt;the number of positive samples returned by the custom-trained model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gtg3OpTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997843703/IhiNTM2Cn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gtg3OpTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997843703/IhiNTM2Cn.png" alt="Recall.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The relation between recall and precision -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tLFKmpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623900342363/t6_00UhjI.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tLFKmpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623900342363/t6_00UhjI.jpeg" alt="RecalVsPrecision.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#high-recall-low-precision"&gt;
  &lt;/a&gt;
  High recall, low precision:
&lt;/h3&gt;

&lt;p&gt;This means, most of the positive examples are correctly recognized but there are a lot of false positives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-recall-high-precision"&gt;
  &lt;/a&gt;
  Low recall, high precision:
&lt;/h3&gt;

&lt;p&gt;This means that we missed a lot of positive examples but those we predicted as positive are indeed positive.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#f1-score"&gt;
  &lt;/a&gt;
  F1 Score
&lt;/h1&gt;

&lt;p&gt;Based on the use case of the classification model, the priority is given either to precision or recall, but in some classification models, we need both of these metrics to be combined as a single one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;F1-Score is a metric that combines both precision and recall&lt;/strong&gt; and has an equal and relative contribution of both precision and recall.&lt;/p&gt;

&lt;p&gt;It is the harmonic mean of precision and recall.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbvcmngN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997858830/MVeG1-Ktb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbvcmngN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997858830/MVeG1-Ktb.png" alt="F1 score.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember that if your use case needs either recall or precision, one higher than the other then F1-score may not be the good metric for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#mean-absolute-error"&gt;
  &lt;/a&gt;
  Mean Absolute Error
&lt;/h1&gt;

&lt;p&gt;Mean absolute error(MAE) is defined as &lt;strong&gt;the average of all errors that are calculated based on values predicted by your model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jex4QBXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997877447/xhAb091-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jex4QBXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997877447/xhAb091-l.png" alt="MAE-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is intended to measure average model bias in a set of predictions, without considering their direction&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0cf1FgZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623856647925/sJPrbnngB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cf1FgZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623856647925/sJPrbnngB.jpeg" alt="MAE-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#r-squared-score"&gt;
  &lt;/a&gt;
  R Squared Score
&lt;/h1&gt;

&lt;p&gt;R squared is a measure of how close the data are to the fitted regression line. It is also known as the coefficient of determination.&lt;/p&gt;

&lt;p&gt;It defines the degree to which the variance in the dependent variable (or target) can be explained by the independent variable (features).&lt;/p&gt;

&lt;p&gt;Fo example if the R-squared value for our predictive model is 0.8. This means that 80% of the variation in the dependent variable is explained by the independent variables.&lt;/p&gt;

&lt;p&gt;Therefore we can say that the &lt;strong&gt;higher the r-squared value is, the better is the model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwofsczD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623986479517/HVNZgosBn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwofsczD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623986479517/HVNZgosBn.png" alt="rsqared.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSRES: the Residual sum of squared errors&lt;/p&gt;

&lt;p&gt;SSTOT: the total sum of squared errors&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#root-mean-squared-error"&gt;
  &lt;/a&gt;
  Root Mean Squared Error
&lt;/h1&gt;

&lt;p&gt;RMSE is one of the most popular metrics used today for evaluating regression-based models. This is an important evaluation metric since it‚Äôs essential to find the average squared error between the predicted values.&lt;/p&gt;

&lt;p&gt;RMSE &lt;strong&gt;measures the average magnitude of the error&lt;/strong&gt;. It‚Äôs the square root of the average of squared differences between prediction and actual observation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RMSE is highly affected by outlier values. Hence, make sure you‚Äôve removed outliers from your data set prior to using this metric.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As compared to mean absolute error, RMSE gives higher weightage and punishes large errors&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvj39RI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623856974370/Mh1npqTAA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvj39RI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623856974370/Mh1npqTAA.png" alt="rmse.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;here 'N' is total observations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#correlation-between-mae-and-rmse"&gt;
  &lt;/a&gt;
  Correlation between MAE and RMSE
&lt;/h3&gt;

&lt;p&gt;Both of these metrics express the average error of the machine learning models.&lt;br&gt;
These two metrics can range from 0 to infinity and both of these metrics are negatively oriented scores, which means that a lower score defines better results.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#roc-curve"&gt;
  &lt;/a&gt;
  ROC Curve
&lt;/h1&gt;

&lt;p&gt;ROC curve stands for ‚ÄúReceiver Operating Characteristic" Curve.&lt;/p&gt;

&lt;p&gt;ROC curve is a graph showing the performance of a classification model at all its cut-off threshold.&lt;/p&gt;

&lt;p&gt;In simple words, ROC Curve is the one that &lt;strong&gt;tells how much your model is capable of differentiating among the different classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;ROC is a probability curve. It is a representation of the performance of your model in a graphical manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69enRlQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997941907/LeLyOIDtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69enRlQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997941907/LeLyOIDtr.png" alt="ROC.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This curve represents:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; True positive rate (recall/sensitivity)&lt;/li&gt;
&lt;li&gt; False-positive rate (1- specificity) : FPR = FP/ FP+TN&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The curve separates the space into two areas, one for good and the other for poor performance levels.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, you have seen some important metrics that are helpful for model evaluation and are needed to be understood by a data scientist or a machine learning engineer.&lt;/p&gt;

&lt;p&gt;I hope you have found it useful. Also please feel free to suggest corrections and improvements.&lt;/p&gt;

&lt;p&gt;Thanks for reading :))&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"Enjoyed what you read??"&lt;/em&gt; You can show some support by &lt;strong&gt;Buying me some coffee‚òï&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/apoorvtyagi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PD28--a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Git(Hub) Flow, Trunk Based Development, And Code Reviews</title>
      <author>Adriano Martins</author>
      <pubDate>Fri, 18 Jun 2021 09:07:01 +0000</pubDate>
      <link>https://dev.to/reviewpad/git-hub-flow-trunk-based-development-and-code-reviews-58ng</link>
      <guid>https://dev.to/reviewpad/git-hub-flow-trunk-based-development-and-code-reviews-58ng</guid>
      <description>&lt;p&gt;&lt;em&gt;The right branching model will improve any team‚Äôs collaboration, quality, and speed. The wrong model will do exactly the opposite. These are the 3 most used branching models.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Name a company that develops software, there‚Äôs a very high chance they‚Äôre are using Git to source control their codebase. Actually, there‚Äôs a 77% chance, according to &lt;a href="https://smartbear.com/resources/ebooks/the-state-of-code-review-2020-report"&gt;Smartbear‚Äôs State of Code Review 2020 Report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There‚Äôs also a very high chance this company has a code review process in place. An 84% chance according to &lt;a href="https://www.codegrip.tech/code-review-trends-2020/"&gt;Codegrip‚Äôs Code Review Trends in 2020 report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, there isn‚Äôt a single standardized methodology to develop software using Git and Code Reviews because it‚Äôs highly dependent on the team and the project characteristics. It‚Äôs entirely up to the team to choose which methodology better suits their software development needs and goals.&lt;/p&gt;

&lt;p&gt;We‚Äôll go over the 3 main methodologies (also called branching models or branching strategies):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Git Flow&lt;/li&gt;
&lt;li&gt;  GitHub Flow&lt;/li&gt;
&lt;li&gt;  Trunk Based Development&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-original-git-flow"&gt;
  &lt;/a&gt;
  The original: Git Flow
&lt;/h3&gt;

&lt;p&gt;Rarely a blog post has such an impact in the industry as the one Vincent Driessen published on January 05, 2010, named &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In his post, Driessen laid out Git Flow, a robust and strict branching model that became the industry standard for software development for years.&lt;/p&gt;

&lt;p&gt;It brought parallel development to the masses, created the perfect conditions for collaborative programming, and it scaled easily.&lt;/p&gt;

&lt;p&gt;With it, many companies managed to grow large and efficient teams and to deploy very complex software.&lt;/p&gt;

&lt;p&gt;With Git Flow, the repository is centered on the &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches, and it is supported by &lt;code&gt;feature-n&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, and &lt;code&gt;hotfix&lt;/code&gt; branches, as described in this diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LoUyfWu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs3q763bq555zh9u7faq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LoUyfWu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs3q763bq555zh9u7faq.png" alt="Git Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code Reviews play an essential part in ensuring the code is up to standard and bug-free when merging &lt;code&gt;feature&lt;/code&gt; branches to the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;Git Flow allows for a very methodic and orchestrated software development but comes at a very high cost:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  the sheer volume of branches and its overhead is a nightmare to maintain&lt;/li&gt;
&lt;li&gt;  teams have to be extremely disciplined otherwise they will end up with long-lived branches impossible to merge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-successor-github-flow"&gt;
  &lt;/a&gt;
  The successor: GitHub Flow
&lt;/h3&gt;

&lt;p&gt;With the advent of web apps and continuous delivery, a lighter and faster branching model gained traction: &lt;a href="https://guides.github.com/introduction/flow/"&gt;GitHub Flow&lt;/a&gt;. As you might‚Äôve guessed, it was created and popularized by the very own GitHub.&lt;/p&gt;

&lt;p&gt;It‚Äôs centered on the &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt; branches. &lt;code&gt;Main&lt;/code&gt; is always releasable. Developers create a new &lt;code&gt;feature&lt;/code&gt; branch to make changes. After reviewing these changes for bugs and code quality they will be deployed to production. If they cause problems, a rollback from &lt;code&gt;main&lt;/code&gt; will take place, otherwise, the &lt;code&gt;feature&lt;/code&gt; branch is merged to the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWs0QOW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhq3wdkpups6brmuq2ub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWs0QOW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhq3wdkpups6brmuq2ub.png" alt="GitHub Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compared to Git Flow, GitHub Flow is much lighter. Maintenance is very low because the only long-lived branch is &lt;code&gt;Main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, GitHub Flow inherits other drawbacks from Git Flow. Undisciplined teams that keep &lt;code&gt;feature&lt;/code&gt; branches open for weeks risk serious problems when trying to merge. Ultimately, a failed merge can leave &lt;code&gt;main&lt;/code&gt; undeployable, and that‚Äôs a big red flag for continuous delivery.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-shift-trunkbased-development"&gt;
  &lt;/a&gt;
  The shift: Trunk-Based Development
&lt;/h3&gt;

&lt;p&gt;Also going by TBD, Trunk-Based Development is somewhat famously documented at &lt;a href="https://trunkbaseddevelopment.com/"&gt;trunkbaseddevelopment.com&lt;/a&gt;. In this branching model, developers make changes directly in a single branch called &lt;code&gt;trunk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Trunk&lt;/code&gt; is deployable at all times. Changes should be summited daily. Unfinished features should be unexposed with the help of &lt;a href="https://martinfowler.com/articles/feature-toggles.html"&gt;feature flags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1R24IbnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7dn60kv59ne02oddsya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1R24IbnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7dn60kv59ne02oddsya.png" alt="Trunk-Based Development For Smaller Teams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, you read it right. It sounds like Yolo Software Development. There are is no code review in TBD, either.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---39CXBVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdvs83gr5f96nd6559cy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---39CXBVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdvs83gr5f96nd6559cy.png" alt="YOLO merge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The catch is that this method can only work in small teams, with seasoned developers, and pair-programming is highly recommended. The pace is very fast because there is very little, if any, overhead. The team must be very skilled and cautious because everything goes directly to the &lt;code&gt;trunk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This TBD model is actually officially called &lt;strong&gt;Trunk-Based Development For Smaller Teams&lt;/strong&gt;. Despite its shortcomings, TBD for Smaller Teams is highly regarded by the software development community for its extremely lightweight workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-seasoned-scaled-trunkbased-development"&gt;
  &lt;/a&gt;
  The seasoned: Scaled Trunk-Based Development
&lt;/h3&gt;

&lt;p&gt;Luckily TBD has another trick up its sleeve: Scaled Trunk-Based Development. In order to operate at scale, this branching model uses short-lived &lt;code&gt;feature&lt;/code&gt; branches with a life span of a few days (maximum) before merging to the &lt;code&gt;trunk&lt;/code&gt;, which is deployable at all times.&lt;/p&gt;

&lt;p&gt;Work in progress should be kept to a minimum, not only to avoid merging problems with long-lived &lt;code&gt;feature&lt;/code&gt; branches, but also to make up for easier and faster code reviews.&lt;/p&gt;

&lt;p&gt;Code reviews will guarantee only quality code is merged to the &lt;code&gt;trunk&lt;/code&gt; and will allow for very early defect detection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LgGLfite--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/se4d7qaizitd1xs3pn6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LgGLfite--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/se4d7qaizitd1xs3pn6x.png" alt="Scaled Trunk-Based Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Scale TBD, continuous integration is guaranteed, parallel development is supported, and quality is ensured with simple code reviews. It allows for quicker iterations with fewer errors, and it‚Äôs always deployable with very little branch management.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#own-it"&gt;
  &lt;/a&gt;
  Own it!
&lt;/h3&gt;

&lt;p&gt;It goes without saying that each team and/or product might warrant different needs in a branching model. Teams should take extra care choosing one.&lt;/p&gt;

&lt;p&gt;Whichever branching model is chosen, it is very (!) important that it‚Äôs crystal clear to every team member what are the rules and steps in the workflow. Without it, any model will fail to bring out the best of the team and the product.&lt;/p&gt;

</description>
      <category>git</category>
      <category>branching</category>
      <category>trunkbaseddevelopment</category>
      <category>codereview</category>
    </item>
    <item>
      <title>How to use Go Modules with Private Git repository</title>
      <author>Javad Rajabzade</author>
      <pubDate>Fri, 18 Jun 2021 08:32:12 +0000</pubDate>
      <link>https://dev.to/gopher/how-to-use-go-modules-with-private-git-repository-53b4</link>
      <guid>https://dev.to/gopher/how-to-use-go-modules-with-private-git-repository-53b4</guid>
      <description>&lt;p&gt;The Go module system has greatly improved the way dependencies are managed. If you are new to Go Modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#public-repositories"&gt;
  &lt;/a&gt;
  Public Repositories
&lt;/h2&gt;

&lt;p&gt;After configuring everything correctly, it is relatively straightforward to include Go packages from public repositories. Typical starting points for me are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;module github.com/Ja7ad/project

go 1.16

require &lt;span class="o"&gt;(&lt;/span&gt;
    github.com/pkg/errors
    github.com/spf13/cobra
    github.com/spf13/viper
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#private-repositories"&gt;
  &lt;/a&gt;
  Private Repositories
&lt;/h2&gt;

&lt;p&gt;Go uses Git to pull the versions of the dependencies you specify. To access any private repositories, the git configuration for wherever Go is running (e.g. a Docker container or your laptop) needs to be configured with the appropriate credentials.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;git config --global url."https://$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;user&lt;span class="o"&gt;}&lt;/span&gt;:&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;personal_access_token&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;@github.com&lt;span class="s2"&gt;".insteadOf "&lt;/span&gt;https://github.com&lt;span class="s2"&gt;"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#gitlab"&gt;
  &lt;/a&gt;
  GitLab
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;git config --global url."https://oauth2:$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;personal_access_token&lt;span class="o"&gt;}&lt;/span&gt;@privategitlab.com&lt;span class="s2"&gt;".insteadOf "&lt;/span&gt;https://privategitlab.com&lt;span class="s2"&gt;"
&lt;/span&gt;&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;or 
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;git config --global url."https://$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;user&lt;span class="o"&gt;}&lt;/span&gt;:&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;personal_access_token&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;@privategitlab.com&lt;span class="s2"&gt;".insteadOf "&lt;/span&gt;https://privategitlab.com&lt;span class="s2"&gt;"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bitbucket"&gt;
  &lt;/a&gt;
  BitBucket
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;git config --global url."https://$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;bitbucket_id&lt;span class="o"&gt;}&lt;/span&gt;:&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;bitbucket_token&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;@privatebitbucket.com&lt;span class="s2"&gt;".insteadOf "&lt;/span&gt;https://privatebitbucket.com&lt;span class="s2"&gt;"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cicd-pipeline"&gt;
  &lt;/a&gt;
  CI/CD Pipeline
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; can be added via this method and add private repository to the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;
&lt;span class="c"&gt;# ---------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;#  The first stage container, for building the application&lt;/span&gt;
&lt;span class="c"&gt;# ---------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16-stretch as builder&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /app&lt;/span&gt;

&lt;span class="c"&gt;# Add the keys&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; github_user&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; github_user=$github_user&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; github_personal_token&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; github_personal_token=$github_personal_token&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app/cmd/webapp&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;git config &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nt"&gt;--global&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    url.&lt;span class="s2"&gt;"https://&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;github_user&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;github_personal_token&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@@github.com"&lt;/span&gt;.insteadOf &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="s2"&gt;"https://github.com"&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;GIT_TERMINAL_PROMPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;CGO_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="se"&gt;\
&lt;/span&gt;    go build &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nt"&gt;--installsuffix&lt;/span&gt; cgo &lt;span class="nt"&gt;--ldflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-s"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; myapp

&lt;span class="c"&gt;# ---------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;#  The second stage container, for running the application&lt;/span&gt;
&lt;span class="c"&gt;# ---------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.8&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder /app/cmd/webapp/myapp /app/myapp&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/myapp"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the following method for &lt;strong&gt;docker-compose.yml&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.6'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my_go_app_container&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# context can/may/will be different per-project setup&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;../&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GitDockerfile&lt;/span&gt;
      &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;github_user=private_user&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;github_personal_token=private_token&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my_go_app_image&lt;/span&gt;
    &lt;span class="c1"&gt;# other configs...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ssh"&gt;
  &lt;/a&gt;
  SSH
&lt;/h2&gt;

&lt;p&gt;Another way to do this would be to use your SSH key every time you connect, and to set &lt;strong&gt;.gitconfig&lt;/strong&gt; like the following to ensure SSH is used each time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;git config --global url."git@github.com".insteadOf "https://github.com"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>go</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Complete Guide To Decorators In Typescript</title>
      <author>Akash Shyam</author>
      <pubDate>Fri, 18 Jun 2021 08:31:41 +0000</pubDate>
      <link>https://dev.to/akashshyam/a-complete-guide-to-decorators-in-typescript-g0l</link>
      <guid>https://dev.to/akashshyam/a-complete-guide-to-decorators-in-typescript-g0l</guid>
      <description>&lt;p&gt;Javascript is great but typescript, is (controversially) even better. It adds type safety to a dynamically typed language and provides some cool features like decorators.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-decorators"&gt;
  &lt;/a&gt;
  What Are Decorators?
&lt;/h3&gt;

&lt;p&gt;Decorators vary for different programming challenges but the basic point is to wrap something in it and change it's behaviour.&lt;/p&gt;

&lt;p&gt;Although this feature is currently at &lt;a href="https://github.com/tc39/proposal-decorators"&gt;stage 2&lt;/a&gt; in javascript, the &lt;a href="https://github.com/tc39"&gt;tc39&lt;/a&gt; committee have been working on it since quite some time and they probably won't drop it any time soon.&lt;/p&gt;

&lt;p&gt;It‚Äôs not yet available in browsers or Node.js, but you can test it out by using compilers like Babel. Having said that, it‚Äôs not exactly a brand new thing; several programming languages, such as Python, Java, and C#, adopted this pattern before JavaScript. &lt;/p&gt;

&lt;p&gt;Even though JavaScript already has this feature proposed, Typescript‚Äôs decorators are different in a few significant ways. Since TypeScript is strongly typed, you can access some additional information associated with your data types to do some cool stuff, such as runtime type-assertion and dependency injection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;Start by creating a new nodejs and typescript project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir ts-decorators
cd ts-decorators
npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's setup our typescript compiler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D typescript @types/node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@types/node&lt;/code&gt; has the type definitions for the node.js standard libraries like &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;fs&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;Add an npm script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Decorators in typescript are experimental but are stable enough to be used in production. In fact, the open source community has been using it for quite some time. &lt;/p&gt;

&lt;p&gt;To activate the feature, we'll need to make some adjustments to your &lt;code&gt;tsconfig.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ES5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"experimentalDecorators"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also install a development server to compile and restart our server automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i ts-node -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add a &lt;code&gt;dev&lt;/code&gt; script to the &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ts-node ./src/index.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#types-of-decorators"&gt;
  &lt;/a&gt;
  Types of Decorators
&lt;/h3&gt;

&lt;p&gt;There are various types of decorators which can be attached to classes, methods or instance fields. Let's look at them one by one and learn their use.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#1-class-decorator"&gt;
  &lt;/a&gt;
  1. Class Decorator
&lt;/h5&gt;

&lt;p&gt;When you attach a function to a class as a decorator, we‚Äôll receive the class constructor as the first parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something with your class&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;classDecorator&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to override properties/methods within the class, we can return a new class by extending the constructor and set the new properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addAgeToMan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// "target" is the constructor of the previous class&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;addAgeToMan&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, our class &lt;code&gt;Man&lt;/code&gt; has an &lt;code&gt;age&lt;/code&gt; property of &lt;code&gt;24&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;man&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#2-method-decorator"&gt;
  &lt;/a&gt;
  2. Method Decorator
&lt;/h5&gt;

&lt;p&gt;We can also attach decorators to a class method. Our decorator receives 3 arguments i.e. &lt;code&gt;target&lt;/code&gt;, &lt;code&gt;propertyKey&lt;/code&gt; and &lt;code&gt;descriptor&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Walking in 3... 2... 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first parameter contains the class which contains the method(&lt;code&gt;Man&lt;/code&gt;). The second(&lt;code&gt;propertyKey&lt;/code&gt;)  param contains the name of the method in string format. The last parameter is the property descriptor, a set of information that defines a property behavior. This can be used to observe, modify, or replace a method definition. We'll circle back to this later.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3property-decorators"&gt;
  &lt;/a&gt;
  3.Property Decorators
&lt;/h5&gt;

&lt;p&gt;Just like the method decorator, you'll receive the &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;propertyKey&lt;/code&gt; parameter. The only difference is that you don‚Äôt get the &lt;code&gt;property descriptor&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1-code-execution-time"&gt;
  &lt;/a&gt;
  1. Code Execution Time
&lt;/h5&gt;

&lt;p&gt;Let‚Äôs say you want to estimate how long it takes to run a function. You can create a decorator to calculate the execution time of a method and print it on the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;measure&lt;/span&gt;
  &lt;span class="nx"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Walking in 3... 2... 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Man&lt;/code&gt; class has a &lt;code&gt;walk()&lt;/code&gt; method, to measure it's execution time, we can use the &lt;code&gt;@measure&lt;/code&gt; decorator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;perf_hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;measure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originalMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;originalMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Execution time: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; milliseconds`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the measure decorator replaces the original method with a new one that enables it to calculate the execution time of the original method and log it to the console.&lt;/p&gt;

&lt;p&gt;To calculate the execution time, we‚Äôll use the Performance Hooks API from the Node.js standard library.&lt;/p&gt;

&lt;p&gt;The result will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Launching in 3... 2... 1... üöÄ
Execution time: 1.2983244 milliseconds
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#2-decorator-factory"&gt;
  &lt;/a&gt;
  2. Decorator Factory
&lt;/h5&gt;

&lt;p&gt;Often times we need to use the same decorators, so, we can use a concept called decorator factories&lt;/p&gt;

&lt;p&gt;Decorators factories work using closures. They are functions that return decorators based on params we pass into them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;changeValue&lt;/code&gt; function returns a decorator that change the value of the property based on the value passed from your factory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;changeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;man&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you bind your decorator factory to the age property, the value will be 100.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3-error-handling"&gt;
  &lt;/a&gt;
  3. Error Handling
&lt;/h5&gt;

&lt;p&gt;Let's implement a method called &lt;code&gt;drink&lt;/code&gt; which requires the age to be at least 21.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;drink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Drinking!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll create a decorator to test if the age is at least 21.&lt;/p&gt;

&lt;p&gt;const minimumAge = (age: number) =&amp;gt; (&lt;br&gt;
  target: Object,&lt;br&gt;
  propertyKey: string,&lt;br&gt;
  descriptor: PropertyDescriptor&lt;br&gt;
) =&amp;gt; {&lt;br&gt;
  const originalMethod = descriptor.value;&lt;/p&gt;

&lt;p&gt;descriptor.value = function (...args) {&lt;br&gt;
    if (this.age &amp;gt; age) {&lt;br&gt;
      originalMethod.apply(this, args);&lt;br&gt;
    } else {&lt;br&gt;
      console.log("Not enough age!");&lt;br&gt;
    }&lt;br&gt;
  };&lt;/p&gt;

&lt;p&gt;return descriptor;&lt;br&gt;
}; &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;minimumAge&lt;/code&gt; is a factory decorator. It takes the age parameter, which indicates how much age is needed to drink.&lt;/p&gt;

&lt;p&gt;Now, we can plug the two together and set the minimum age level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;minimumAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;drink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Drinking!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we use this, we'll get something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;man&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Man&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Console shows:&lt;/span&gt;
&lt;span class="nx"&gt;Not&lt;/span&gt; &lt;span class="nx"&gt;enough&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Decorators can be hard to comprehend and I struggled with it too. The best way is to experiment by logging the params of various types of decorators, trying out the sample code in this post etc. That's it for now, Don't forget to like this post and follow me if you learned something new. Bye ü§ü&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top Courses To Learn JAVASCRIPT</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Fri, 18 Jun 2021 08:27:55 +0000</pubDate>
      <link>https://dev.to/amritanshu/top-courses-to-learn-javascript-43ah</link>
      <guid>https://dev.to/amritanshu/top-courses-to-learn-javascript-43ah</guid>
      <description>&lt;p&gt;Free And Best Resource:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg"&gt;https://www.youtube.com/watch?v=PkZNo7MFNFg&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bllrJHSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyykxwp366pimn58s57g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bllrJHSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyykxwp366pimn58s57g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4"&gt;https://www.youtube.com/watch?v=3PHXvlpOkf4&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUPDf1rU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4du2eukncfm4q4zblwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUPDf1rU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4du2eukncfm4q4zblwu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qqx_wzMmFeA"&gt;https://www.youtube.com/watch?v=Qqx_wzMmFeA&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gkHsdaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5twy85ce7bofvorkn4s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gkHsdaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5twy85ce7bofvorkn4s5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk"&gt;https://www.youtube.com/watch?v=W6NZfCO5SIk&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBS09dxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u167n42vrk5zl0jpouy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBS09dxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u167n42vrk5zl0jpouy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2qDywOS7VAc"&gt;https://www.youtube.com/watch?v=2qDywOS7VAc&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UhAY7Moc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npb8u7fhdqmsfq74ayrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UhAY7Moc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npb8u7fhdqmsfq74ayrp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://javascript30.com/"&gt;https://javascript30.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GrNRa9qQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqoy0eyiwsjl55u32j4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GrNRa9qQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqoy0eyiwsjl55u32j4g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhfUM_ZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j014v09qko8b21lwtas4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhfUM_ZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j014v09qko8b21lwtas4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.codecademy.com/learn/introduction-to-javascript"&gt;https://www.codecademy.com/learn/introduction-to-javascript&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkvB--V3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zra78krki784trm59f2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkvB--V3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zra78krki784trm59f2k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://eloquentjavascript.net/"&gt;https://eloquentjavascript.net/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPrKAXCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4zr528hh6kdea4nurqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPrKAXCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4zr528hh6kdea4nurqf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Udemy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/the-complete-javascript-course/"&gt;https://www.udemy.com/course/the-complete-javascript-course/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RxvD8Zfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0qrtzvgi9u86yt53k0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxvD8Zfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0qrtzvgi9u86yt53k0k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-the-complete-guide-2020-beginner-advanced/"&gt;https://www.udemy.com/course/javascript-the-complete-guide-2020-beginner-advanced/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUTWGqr7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1kdctq7r5xfnm536qxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUTWGqr7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1kdctq7r5xfnm536qxn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/modern-javascript-from-the-beginning/"&gt;https://www.udemy.com/course/modern-javascript-from-the-beginning/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qknkqsVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dlih5t64tfh4omitspi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qknkqsVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dlih5t64tfh4omitspi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other Blogs:&lt;/p&gt;

&lt;p&gt;Top course to learn REACT:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/amritanshu/top-courses-to-learn-react-56d2"&gt;https://dev.to/amritanshu/top-courses-to-learn-react-56d2&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XlXWLLkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q8fejcezshtvlgn6y3r.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Top course to learn MERN:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/amritanshu/top-courses-to-learn-mern-2i2g"&gt;https://dev.to/amritanshu/top-courses-to-learn-mern-2i2g&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQ5rbGrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oukfz9xa8h9suubhaac.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Twitter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/NewGenDeveloper"&gt;https://twitter.com/NewGenDeveloper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you know some other best one out there üëá Comment :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why staying calm can help game dev's or prgrammers solve bugs more faster</title>
      <author>tirth-uhiha-dev</author>
      <pubDate>Fri, 18 Jun 2021 08:25:04 +0000</pubDate>
      <link>https://dev.to/tirthuhihadev/why-staying-calm-can-help-game-dev-s-or-prgrammers-solve-bugs-more-faster-3499</link>
      <guid>https://dev.to/tirthuhihadev/why-staying-calm-can-help-game-dev-s-or-prgrammers-solve-bugs-more-faster-3499</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hey-there"&gt;
  &lt;/a&gt;
  Hey There,
&lt;/h1&gt;

&lt;p&gt;Tired and exhausted Dev's. I am Tirth here your one and only game blogger here.Trust me guys sometimes while coding you mind just scatter's in small peices, this happens with me too it feels like i am a loser in this world and cannot achive anything in my life.That is why staying calm can help in the following ways:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s27JCE8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqsqmxhcyf2wwf3ixnzh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s27JCE8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqsqmxhcyf2wwf3ixnzh.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-turns-out-that-coding-anxiety-is-real"&gt;
  &lt;/a&gt;
  It Turns Out, That Coding Anxiety Is Real:
&lt;/h3&gt;

&lt;p&gt;Imposter syndrome. Since a programmer‚Äôs median salary is quite high ($86k/year, according to Payscale), it‚Äôs common for developers to think that their skills aren‚Äôt worth the paycheck. Working in teams adds to the pile of pressure as well ‚Äî you are always in touch with your peers who seem sharper, more well-versed in tech, big-picture-driven, or attentive to details.&lt;/p&gt;

&lt;p&gt;Not being the &lt;strong&gt;‚Äúreal programmer‚Äù&lt;/strong&gt;. If you‚Äôve been interested in tech long enough, you are no stranger to the ‚Äúreal programmer‚Äù archetype. You can often see these coders in Facebook groups, on Reddit, or Stack Overflow, telling how much they work and how little they care about weekends or off-time. Seeing coders as no-lifers became so common that beginning programming learners started wondering: ‚ÄúI can‚Äôt code for 8 hours straight ‚Äî maybe software development isn‚Äôt it for me?‚Äù. The truth is, working 16-hour long days is highly counterproductive ‚Äî according to a Stanford study, 40-hour week employees work three times more productively than those who pull off 60-hour sprees.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting too late&lt;/strong&gt;. Although, in my opinion, coding has no age limit as long as you are eager to learn and absorb new technologies, some of my students don‚Äôt seem to think so. Indeed, stories about 14-year-old AI engineers can intimidate and discourage whoever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-to-all-of-the-above"&gt;
  &lt;/a&gt;
  Solution To All Of The Above:
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#1-choose-a-primary-programming-language"&gt;
  &lt;/a&gt;
  1. Choose a primary programming language
&lt;/h1&gt;

&lt;p&gt;Try all the languages you are intrested in if ya want to and then try to learn and master that one language you are the most intrested in, after that once you have completly done with that chose yout second most intrested language, and remember never ever stop learning cause in programming feild everyday something new comes up in the market.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-plan-your-education"&gt;
  &lt;/a&gt;
  2. Plan your education:
&lt;/h1&gt;

&lt;p&gt;It‚Äôs common for beginning programmers to dive right into learning a programming language without doing much research on its fundamental concepts. They rely too much on all learning content they find online ‚Äî more often than not, this is a straight road to a mess. Most beginners start meddling in advanced concepts too soon and get discouraged by the complexity of the language and the lack of progress.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-collect-the-right-resources"&gt;
  &lt;/a&gt;
  3. Collect the right resources:
&lt;/h1&gt;

&lt;p&gt;Having to apply the knowledge obtained when learning in real-world conditions is a major freakout cause among development students. A Freecodecamp forum user summarized this anxiety perfectly:&lt;br&gt;
If you, too, are scared that you don‚Äôt have what it takes to ace job interviews, the resources you use for learning might be to blame. While books and video courses are important for absorbing the essence of the language, I‚Äôm confident that programmers should make a huge emphasis on practice while learning.&lt;/p&gt;

&lt;p&gt;See ya in the next blog if y'all still there pls follow me and like this bold and do make sure to comment your thoughts and suggestions:[my youtube channel link if you like gaming]{&lt;a href="https://www.youtube.com/channel/UC1sE6NRQT5zbgzq9tRhQRlQ"&gt;https://www.youtube.com/channel/UC1sE6NRQT5zbgzq9tRhQRlQ&lt;/a&gt;}&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>devmeme</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build an Email Application using Node JS Express JS with Gmail and Nodemailer - (All in one Article)</title>
      <author>Unclebigbay</author>
      <pubDate>Fri, 18 Jun 2021 07:37:05 +0000</pubDate>
      <link>https://dev.to/unclebigbay/build-an-email-application-using-node-js-express-js-with-gmail-and-nodemailer-all-in-one-article-1c84</link>
      <guid>https://dev.to/unclebigbay/build-an-email-application-using-node-js-express-js-with-gmail-and-nodemailer-all-in-one-article-1c84</guid>
      <description>&lt;p&gt;Hello üòä, my gorgeous friend on the internet üëã, how are you doing today?.&lt;/p&gt;

&lt;p&gt;Sometimes we want to send out a welcome email to our new registered users or send them a link to reset their forgotten password.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is an extracted feature from my HarperDB Hackerthon open source project, I found it difficult to implement, because of resources, so I am saving you from the stress I passed through.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below you will learn how to send out emails directly from your Node JS Application using your registered Gmail account and Nodemailer, with an interface built with HTML and CSS that is powered by Express JS.&lt;/p&gt;

&lt;p&gt;Don't worry about the complexity of what is listed above, I am going to explain all of them in this article (in a bit).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check out the final project sample of what you will be building along with me in this article   &lt;a href="https://mailing-application-project.herokuapp.com/"&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you would prefer a series of this article (broken into multiple parts), you can check it out  &lt;a href="https://unclebigbay.com/build-an-email-application-using-node-js-express-js-with-gmail-and-nodemailer-series-15"&gt;HERE&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Note: Some of the block code on dev.to doesn't work well, you can check the canonical url, if you didn't get to copy the code from this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  PREREQUISITES
&lt;/h2&gt;

&lt;p&gt;Before following along in this tutorial, I assume you already have a basic understanding of JavaScript  and that you already have the following setup:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Gmail account&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node installed on your PC&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do not have a Gmail account setup, click &lt;a href="http://gmail.com"&gt;Here&lt;/a&gt; to register your account and you can also download the Node application by clicking &lt;a href="https://nodejs.org/en/"&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before we proceed, kindly note that this is a very long article, because I ensure to explain every concept that is been used in building the application, and this will help you grasp useful concepts in Node JS. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the end of this article, you will learn the following concepts and technologies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to kick-start a Node JS application&lt;/li&gt;
&lt;li&gt;Writing your first route (beginners)&lt;/li&gt;
&lt;li&gt;Rendering HTML with Node JS &lt;code&gt;package.json&lt;/code&gt; and explanation of what is inside&lt;/li&gt;
&lt;li&gt;Implementation of Nodemailer&lt;/li&gt;
&lt;li&gt;How to add Multer to your Node JS project&lt;/li&gt;
&lt;li&gt;How to retrieve form data from the HTML form to our Node js Server&lt;/li&gt;
&lt;/ol&gt;



&lt;h3&gt;
  &lt;a href="#what-is-node-js"&gt;
  &lt;/a&gt;
  What is Node JS?
&lt;/h3&gt;

&lt;p&gt;Node JS is a JavaScript framework that allows us to use JavaScript outside of the browser and on the server-side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Server-side is the system that runs on the server (Node JS runs here), and the client-side is the software that runs on a user's web browser (Vanilla JavaScript or React JS runs here).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about Node JS check out the official documentation  &lt;a href="https://nodejs.org/en/docs/"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let us verify that Node JS is successfully installed on your system, run the command below on your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node --version

&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;If there is no error, the command will return the current version of the installed Node on your system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss6187xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623272030024/Fq-6EaBvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss6187xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623272030024/Fq-6EaBvk.png" alt="frame_generic_light (2).png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-express-js"&gt;
  &lt;/a&gt;
  What is Express JS?
&lt;/h3&gt;

&lt;p&gt;Express JS is a popular framework of Node JS that makes it easier to manage web applications, Express JS is the &lt;strong&gt;E&lt;/strong&gt; in both M*&lt;em&gt;E&lt;/em&gt;&lt;em&gt;RN and M&lt;/em&gt;&lt;em&gt;E&lt;/em&gt;*AN stack.&lt;/p&gt;

&lt;p&gt;To learn more about Express JS check out the official documentation  &lt;a href="https://expressjs.com/"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-gmail"&gt;
  &lt;/a&gt;
  What is Gmail?
&lt;/h3&gt;

&lt;p&gt;Gmail is a free mail service provided by Google, they enable us to send and receive information (electronic-mail) on their platform.&lt;/p&gt;

&lt;p&gt;To learn more about Gmail and its services you can check it out  &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-nodemailer"&gt;
  &lt;/a&gt;
  What is Nodemailer?
&lt;/h3&gt;

&lt;p&gt;Nodemailer is a Node JS module (function) that allows us to send emails from our Node JS (Server) Application.&lt;/p&gt;

&lt;p&gt;To learn more about Nodemailer check out the official documentation  &lt;a href="https://nodemailer.com/about/"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-our-node-js-application"&gt;
  &lt;/a&gt;
  Setting up our Node JS Application
&lt;/h2&gt;
&lt;h5&gt;
  &lt;a href="#1-to-begin-our-project-create-a-new-folder-and-name-it-raw-projectmailsender-endraw-"&gt;
  &lt;/a&gt;
  1. To begin our project create a new folder and name it &lt;code&gt;projectMailSender&lt;/code&gt;
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#2-rightclick-on-the-raw-projectmailsender-endraw-and-select-the-raw-git-bash-here-endraw-option"&gt;
  &lt;/a&gt;
  2. Right-click on the &lt;code&gt;projectMailSender&lt;/code&gt; and select the &lt;code&gt;Git bash here&lt;/code&gt; option
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVJeQy8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623268952635/DeubjsRqV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVJeQy8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623268952635/DeubjsRqV.png" alt="Screenshot of the Gitbash option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your current directory should be displayed on the bash terminal like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qvUgOQuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623271780524/_jKNxHlRu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qvUgOQuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623271780524/_jKNxHlRu.png" alt="frame_generic_light (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are not using Gitbash, ensure to navigate inside the &lt;code&gt;projectMailSender&lt;/code&gt; folder on your &lt;code&gt;cmd&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#3-lets-proceed-to-generate-our-project-raw-packagejson-endraw-file-by-running-the-code-below"&gt;
  &lt;/a&gt;
  3. Let's proceed to generate our project &lt;code&gt;package.json&lt;/code&gt; file by running the code below  üëá
&lt;/h5&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
yarn init -y

&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;yarn init&lt;/code&gt; command is used to create or update a &lt;code&gt;package.json&lt;/code&gt; file interactively. This command will walk you through a question and answer process to create a package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T33mt4LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623271595332/i-0oVCURz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T33mt4LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623271595332/i-0oVCURz.png" alt="frame_generic_light.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We skipped some questions about the new package.json that we are creating with the &lt;code&gt;-y&lt;/code&gt; flag, you can check out the questions in your next Node project by running &lt;code&gt;yarn init&lt;/code&gt; without the &lt;code&gt;-y&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;-y&lt;/code&gt; is a shorthand for &lt;code&gt;-yes&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about the &lt;code&gt;yarn init&lt;/code&gt; command check out the official documentation &lt;a href="https://classic.yarnpkg.com/en/docs/cli/init/"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#whats-inside-packagejson"&gt;
  &lt;/a&gt;
  What's inside package.json?
&lt;/h3&gt;

&lt;p&gt;If the &lt;code&gt;yarn init&lt;/code&gt; command is successful a new file named &lt;code&gt;package.json will be created in our&lt;/code&gt;projectMailSender` folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tuU5ELKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623358667258/u8yT15-ty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tuU5ELKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623358667258/u8yT15-ty.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at what is inside our &lt;code&gt;package.json&lt;/code&gt; file below üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43byAZFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623359018912/0qCcJsTj0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43byAZFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623359018912/0qCcJsTj0d.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#1-name-the-name-of-our-project-folder"&gt;
  &lt;/a&gt;
  1. &lt;strong&gt;name&lt;/strong&gt;: the name of our project folder.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#2-version-you-can-set-and-update-your-project-version-here"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;version&lt;/strong&gt;: you can set and update your project version here
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;1 stands for a major update (version 1), second 0 stands for a minor update for the major update (version 1, with zero updates (the number of updates on version 1)), and finally the last 0 means patch, a very minor update that is not a big deal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;
  &lt;a href="#3-main-every-project-must-have-an-endraw-indexjs-raw-which-serves-as-an-entry-point-for-your-project-you-can-change-this"&gt;
  &lt;/a&gt;
  3. &lt;strong&gt;main&lt;/strong&gt;: every project must have an &lt;code&gt;index.js&lt;/code&gt; which serves as an entry point for your project (you can change this).
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#4-license-your-project-license-goes-here"&gt;
  &lt;/a&gt;
  4. &lt;strong&gt;License&lt;/strong&gt;: your project license goes here.
&lt;/h5&gt;

&lt;p&gt;More information about your project will be stored in the &lt;code&gt;package.json&lt;/code&gt; file if you do not skip the &lt;code&gt;yarn init&lt;/code&gt; command with the &lt;code&gt;-y&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;We will be using a file name &lt;code&gt;index.js&lt;/code&gt; as our project entry point, so let's proceed to create it in our project root üëá.&lt;/p&gt;

&lt;p&gt;You can either run the command below to create the file from your terminal or create it manually.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
touch index.js&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your project folder should look like this üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WW28Ply2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623359863967/ogOChlPQh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WW28Ply2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623359863967/ogOChlPQh.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#installing-express-js"&gt;
  &lt;/a&gt;
  Installing Express JS
&lt;/h2&gt;

&lt;p&gt;Now that we have our project setup, let us proceed to install the Express JS into our project.&lt;br&gt;
Use the command below üëá to install &lt;code&gt;Express JS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;yarn add express&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if you initialized your &lt;code&gt;package.json&lt;/code&gt; file with &lt;code&gt;npm&lt;/code&gt;, kindly stick to it to avoid conflict, let me know in the comment section if you made this mistake.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;Express JS&lt;/code&gt; package should be successfully installed by now let's take a look at our project folder structure again below üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXPFm5Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623360414787/wRh0VvG9P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXPFm5Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623360414787/wRh0VvG9P.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also notice from your end that a folder named &lt;code&gt;node_modules&lt;/code&gt; and a file named &lt;code&gt;yarn.lock&lt;/code&gt; has been created automatically in our project folder.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;### &lt;code&gt;node_modules&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is where &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt; will keep the folders of our installed packages for us to make use of them later.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;To learn more about &lt;code&gt;node_modules&lt;/code&gt; you can check out the official documentation  &lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/folders"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;### &lt;code&gt;yarn.lock&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because we are using &lt;code&gt;yarn&lt;/code&gt; as our package manager, &lt;code&gt;yarn&lt;/code&gt; auto-generate this file to keep track of our project dependencies(packages).&lt;br&gt;&lt;/p&gt;

&lt;p&gt;To learn more about &lt;code&gt;yarn.lock&lt;/code&gt; you can check out the official documentation  &lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/folders"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning:&lt;br&gt;
Do not alter the &lt;code&gt;node_modules&lt;/code&gt; folder and the &lt;code&gt;yarn.lock&lt;/code&gt; file manually.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#creating-our-project-server-with-express-js"&gt;
  &lt;/a&gt;
  Creating our Project Server with Express JS
&lt;/h3&gt;

&lt;p&gt;Copy and paste the code below into your project entry file (&lt;code&gt;index.js&lt;/code&gt; in this tutorial)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Import express into our project&lt;br&gt;
const express = require("express");&lt;/p&gt;

&lt;p&gt;// Creating an instance of express function&lt;br&gt;
const app = express();&lt;/p&gt;

&lt;p&gt;// The port we want our project to run on&lt;br&gt;
const PORT = 3000;&lt;/p&gt;

&lt;p&gt;// Express allows us to listen to the PORT and trigger a console.log() when you visit the port&lt;br&gt;
app.listen(PORT, () =&amp;gt; {&lt;br&gt;
  console.log(&lt;code&gt;Server is üèÉ‚Äç‚ôÇÔ∏è on port ${PORT}&lt;/code&gt;);&lt;br&gt;
});&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the minimum way of setting up a server with the Express Node JS framework, I have included comments that are straightforward in the code snippet üëÜ, so it will be present in your own project for reference.&lt;/p&gt;

&lt;p&gt;Let's proceed to test our server by running the code below in our terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
node index.js&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output üëá
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUywjhJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623363322308/FeClCz8lc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUywjhJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623363322308/FeClCz8lc.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-nodemon"&gt;
  &lt;/a&gt;
  Setting up Nodemon
&lt;/h2&gt;

&lt;p&gt;Now that our server is running on our terminal, let's try to change something in our &lt;code&gt;console.log()&lt;/code&gt;, let's say we update the console message below üëá&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;app.listen(PORT, () =&amp;gt; {&lt;br&gt;
  console.log(&lt;code&gt;Server is currently üèÉ‚Äç‚ôÇÔ∏è on port ${PORT}&lt;/code&gt;);&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save your file and check your terminal, you should notice that the previous message is still displayed, this implies that the server will not restart whenever there is a change in our project directory, we need to do this manually each time we make a change in the project by stopping the server with &lt;code&gt;ctrl + c&lt;/code&gt; and starting it again with &lt;code&gt;node index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you restart your server, you should get a new message like below üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiHjYCJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623400668115/5XgXIc-DV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiHjYCJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623400668115/5XgXIc-DV.png" alt="frame_generic_light.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this automatically, we can install a package called &lt;code&gt;nodemon&lt;/code&gt;, &lt;code&gt;nodemon&lt;/code&gt; will help us listen to changes in our project files and automatically restart the server within seconds.&lt;/p&gt;

&lt;p&gt;Run the following command to install &lt;code&gt;nodemon&lt;/code&gt; to your project&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
yarn add --dev nodemon&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are installing the &lt;code&gt;nodemon&lt;/code&gt; package as a development dependency because it is not needed when we finally host our Node JS project to production.&lt;/p&gt;

&lt;p&gt;To learn more about dependencies and devDependencies in &lt;code&gt;package.json&lt;/code&gt; you can check it out  &lt;a href="https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now that we've installed &lt;code&gt;nodemon&lt;/code&gt; package in our project, let us set it up to do its job.&lt;/p&gt;

&lt;p&gt;Open your &lt;code&gt;package.json&lt;/code&gt; file üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sFQSvTFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623401648758/dSMsW1zhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sFQSvTFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623401648758/dSMsW1zhs.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your project &lt;code&gt;express&lt;/code&gt; package should be inside the dependencies object while the &lt;code&gt;nodemon&lt;/code&gt; should be inside the devDependencies, this is because we need the &lt;code&gt;express&lt;/code&gt; package in our production but we only need the &lt;code&gt;nodemon&lt;/code&gt; for our project development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if your &lt;code&gt;package.json&lt;/code&gt; is not structured like the above, kindly check back how we installed the two packages previously.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the following code to your &lt;code&gt;package.json&lt;/code&gt; file üëá&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Before the dependencies&lt;/p&gt;

&lt;p&gt;"scripts": {&lt;br&gt;
    "start": "nodemon index.js"&lt;br&gt;
  },&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Your &lt;code&gt;package.json&lt;/code&gt; file should look something like below üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FekRRZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452026035/9bx1_Ndp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FekRRZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452026035/9bx1_Ndp9.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we are basically adding a command to our project which can be accessed through &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt;, in this case, we are saying when we run the &lt;code&gt;yarn start&lt;/code&gt; command, &lt;code&gt;yarn&lt;/code&gt; should start our project with &lt;code&gt;nodemon index.js&lt;/code&gt;, so that &lt;code&gt;nodemon&lt;/code&gt; will start listening to our file changes.&lt;/p&gt;

&lt;p&gt;Start the server again with the code below üëá&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;yarn start&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should get a response, that &lt;code&gt;nodemon&lt;/code&gt; is ready for any file change and will restart the server immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLHJssph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623402989909/t0wi6JQsA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLHJssph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623402989909/t0wi6JQsA.png" alt="frame_generic_light (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can proceed to change your &lt;code&gt;console.log()&lt;/code&gt; message and see if the server will restart automatically.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kindly note that &lt;code&gt;nodemon&lt;/code&gt; will only listen to changes to files with &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt;,  and &lt;code&gt;.json&lt;/code&gt; extensions, we will have to handle the refresh of the HTML and CSS files on our browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you wish to handle this automatically you can click  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;HERE &lt;/a&gt; to install a live server on your &lt;strong&gt;VScode&lt;/strong&gt; to listen for the HTML and CSS file changes.&lt;/p&gt;

&lt;p&gt;Click the go-live to turn on the server for your HTML file (ensure you are currently on your HTML file)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aIU9giut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623599939895/MOwuIO-3_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aIU9giut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623599939895/MOwuIO-3_.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;br&gt;
Now that we have our server up and running with &lt;code&gt;nodemon&lt;/code&gt; listening to our file changes, let design our application interface.

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a new folder and name it &lt;code&gt;public&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the &lt;code&gt;public&lt;/code&gt; folder create the following files  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h4&gt;
  &lt;a href="#-endraw-indexhtml-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.html&lt;/code&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;
  &lt;a href="#-endraw-indexcss-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.css&lt;/code&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;
  &lt;a href="#-endraw-successhtml-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;success.html&lt;/code&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;
  &lt;a href="#-endraw-successcss-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;success.css&lt;/code&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Copy the code below üëá into the stated files respectively&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
&amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;
&lt;br&gt;
  &lt;/p&gt;
&lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &amp;lt;!-- Css styles --&amp;gt;&lt;br&gt;
    &lt;br&gt;
    &amp;lt;!-- Fontawesome icon library --&amp;gt;&lt;br&gt;
    
      rel="stylesheet"&lt;br&gt;
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"&lt;br&gt;
    /&amp;gt;&lt;br&gt;
    e-Mail Sender Application&lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
    &lt;br&gt;
      &lt;h2&gt;e-Mail Sender Application&lt;/h2&gt;
&lt;br&gt;
      &lt;br&gt;
        
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;input
      class="input-field"
      type="text"
      placeholder="To: i.e unclebigbay@gmail.com"
      name="email"
      autocomplete="off"
      required
    /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class="input-wrapper"&amp;gt;
    &amp;lt;i class="fa fa-envelope icon"&amp;gt;&amp;lt;/i&amp;gt;

    &amp;lt;input
      class="input-field"
      type="text"
      placeholder="Subject"
      name="subject"
      required
    /&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="input-wrapper"&amp;gt;
    &amp;lt;textarea
      id="message"
      name="message"
      placeholder="Message body.."
      style="height: 200px; width: 100%"
      required
    &amp;gt;&amp;lt;/textarea&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="attachment-wrapper"&amp;gt;
    &amp;lt;label for="attachment"&amp;gt;Attachment&amp;lt;/label&amp;gt;
    &amp;lt;input id="attachment" name="attachment" type="file" required/&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;button type="submit" class="send-btn"&amp;gt;Send Mail&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;### &lt;code&gt;index.css&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;@import url("&lt;a href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap%22"&gt;https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap"&lt;/a&gt;);&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{
box-sizing: border-box;
font-family: "Poppins";
}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;h2 {&lt;br&gt;
  font-size: 2rem;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-wrapper {&lt;br&gt;
  display: -ms-flexbox; /* IE10 */&lt;br&gt;
  display: flex;&lt;br&gt;
  width: 100%;&lt;br&gt;
  margin-bottom: 15px;&lt;br&gt;
  font-family: "Poppins";&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.icon {&lt;br&gt;
  padding: 10px;&lt;br&gt;
  background: #333333;&lt;br&gt;
  color: white;&lt;br&gt;
  min-width: 50px;&lt;br&gt;
  text-align: center;&lt;br&gt;
  font-family: "Poppins";&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-field {&lt;br&gt;
  width: 100%;&lt;br&gt;
  padding: 10px;&lt;br&gt;
  outline: none;&lt;br&gt;
  font-family: "Poppins";&lt;br&gt;
  border: 2px solid #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-field:focus {&lt;br&gt;
  box-shadow: 0 0 10px #333333;&lt;br&gt;
  border: 2px solid #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-wrapper textarea {&lt;br&gt;
  padding: 1rem;&lt;br&gt;
  border: 2px solid #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-wrapper textarea:focus {&lt;br&gt;
  outline: none;&lt;br&gt;
  box-shadow: 0 0 10px #333333;&lt;br&gt;
  border: 2px solid #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.attachment-wrapper {&lt;br&gt;
  margin: 15px 0;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.attachment-wrapper label {&lt;br&gt;
  font-weight: 600;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.send-btn {&lt;br&gt;
  background-color: #333333;&lt;br&gt;
  color: white;&lt;br&gt;
  padding: 15px 20px;&lt;br&gt;
  border: none;&lt;br&gt;
  cursor: pointer;&lt;br&gt;
  width: 100%;&lt;br&gt;
  opacity: 0.9;&lt;br&gt;
  font-size: 16px;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.send-btn:hover {&lt;br&gt;
  opacity: 1;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;### &lt;code&gt;success.html&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;
&lt;br&gt;
  &lt;/p&gt;
&lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="./success.css" /&amp;gt;
&amp;lt;!-- Fontawesome icon library --&amp;gt;
&amp;lt;link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
/&amp;gt;
&amp;lt;title&amp;gt;Mail Sent&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;br&gt;
    
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Message Delivered!!!&amp;lt;/h1&amp;gt;
&amp;lt;a href="./index.html"&amp;gt;New message&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#-endraw-successcss-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;success.css&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;@import url("&lt;a href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap%22"&gt;https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap"&lt;/a&gt;);&lt;/p&gt;

&lt;p&gt;body {&lt;br&gt;
  font-family: "Poppins";&lt;br&gt;
  display: flex;&lt;br&gt;
  flex-direction: column;&lt;br&gt;
  justify-content: center;&lt;br&gt;
  align-items: center;&lt;br&gt;
  height: 70vh;&lt;br&gt;
  color: #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;a {&lt;br&gt;
  color: blue;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;a:hover {&lt;br&gt;
  opacity: 0.8;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;body .icon {&lt;br&gt;
  font-size: 3rem;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#rendering-static-files-to-the-browser-with-express-js"&gt;
  &lt;/a&gt;
  Rendering Static Files to the Browser with Express JS
&lt;/h3&gt;

&lt;p&gt;Yes, we cannot just access our HTML file directly from our browser, express must handle that for us and to this point, we can only access our application port &lt;code&gt;3000&lt;/code&gt; on our terminal, let's see how we can display our HTML files on our browser using Express JS.&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;index.js&lt;/code&gt; with the following code&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
....&lt;br&gt;
// After PORT = 3000;&lt;/p&gt;

&lt;p&gt;// Express should add our path&lt;br&gt;
app.use(express.static("public"));&lt;/p&gt;

&lt;p&gt;// Render the index.html when the user visit our project port&lt;br&gt;
app.get("/", (req, res) =&amp;gt; {&lt;br&gt;
  res.sendFile("/index.html");&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1-endraw-appuseexpressstaticpublic-raw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;app.use(express.static("public"));&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
We are using the express js method called &lt;code&gt;use&lt;/code&gt; to chain a middleware called &lt;code&gt;static&lt;/code&gt;, which allows us to serve static files like &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;js&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;public&lt;/code&gt; folder is defined inside the &lt;code&gt;static&lt;/code&gt; middleware as our project root directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#2-endraw-appget-raw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;app.get&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;span id="get"&gt;&lt;code&gt;app.get()&lt;/code&gt;&lt;/span&gt; is a function that tells the server what to do when a get request at the given route is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#3-endraw-req-res-raw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;("/", (req, res)&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The forward slash signifies the root directory of our route, just like &lt;code&gt;www.hashnode.com&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;req&lt;/code&gt; argument stands for &lt;strong&gt;request&lt;/strong&gt; from that particular route, while the &lt;code&gt;res&lt;/code&gt; represents &lt;strong&gt;response&lt;/strong&gt;, which is a means to send back a response to the route caller.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#4-endraw-ressendfileindexhtml-raw-"&gt;
  &lt;/a&gt;
  4. &lt;code&gt; res.sendFile("/index.html");&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
Remember the &lt;code&gt;res&lt;/code&gt; above üëÜ us used to send back a response? the &lt;code&gt;res&lt;/code&gt; has a method to send back a file to the route been called, and that is what we are doing here, we are returning the &lt;code&gt;index.html&lt;/code&gt; file when the root route of the project is been hit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#project-ui-routing-on-a-browser-with-express-js"&gt;
  &lt;/a&gt;
  Project UI Routing on a Browser with Express JS
&lt;/h3&gt;

&lt;p&gt;Routing refers to how our application's endpoints (URLs) respond to the client (browser) request through the &lt;code&gt;req&lt;/code&gt; parameter, this is unique for a particular endpoint (URL).  &lt;/p&gt;

&lt;p&gt;&lt;a href="//www.hashnode.com/onboard"&gt;www.hashnode.com&lt;/a&gt; will respond with the landing page while a request to &lt;a href="//www.hashnode.com/onboard"&gt;www.hashnode.com/onboard&lt;/a&gt; will respond with a login page üòâ.&lt;/p&gt;

&lt;p&gt;Since we have our route and static files setup, it's time to visit our project port in our browser üíÉ&lt;/p&gt;

&lt;p&gt;You can either copy-paste this route üëâ &lt;strong&gt;localhost:3000&lt;/strong&gt; to your browser address bar and hit enter or click this link &lt;a href="http://localhost:3000/"&gt;localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If all goes well, you should have this üëá displayed on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ytywwY9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623438401772/ZS1obK64P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ytywwY9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623438401772/ZS1obK64P.png" alt="frame_generic_light (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can as well visit the &lt;strong&gt;success page&lt;/strong&gt; using this link &lt;a href="http://localhost:3000/success.html"&gt;localhost:3000/success.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Our success page should look something like below üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJrJ9dXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623438866078/r3NoVbSbG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJrJ9dXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623438866078/r3NoVbSbG.png" alt="frame_generic_light (4).png"&gt;&lt;/a&gt;&lt;/p&gt;




If you made it this far let's take a break, and celebrate üòç

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwwsyJ3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623439898942/K-fo4ZjR5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwwsyJ3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623439898942/K-fo4ZjR5.gif" alt="fb7596eafc1adf186d0e6ed139b458d8.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's drink up üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NIhOxeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623439914103/Fp2zTwupt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NIhOxeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623439914103/Fp2zTwupt.gif" alt="giphy (4).gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;** &lt;/p&gt; Welcome Back ü§© **



&lt;h2&gt;
  &lt;a href="#handling-data-from-our-html-forms"&gt;
  &lt;/a&gt;
  Handling Data from our HTML forms
&lt;/h2&gt;

&lt;p&gt;Now that we have our project UI setup, let's look into handling the data submitted by the sender.&lt;/p&gt;

&lt;p&gt;Note that, our HTML form has the following form input types&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;email - text&lt;/li&gt;
&lt;li&gt;subject -  text&lt;/li&gt;
&lt;li&gt;message - text&lt;/li&gt;
&lt;li&gt;attachment - file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Generally, to have access to a request body through the &lt;a href="#get"&gt;&lt;code&gt;req&lt;/code&gt;&lt;/a&gt; parameter in the &lt;code&gt;get()&lt;/code&gt; function, we need a middleware package called &lt;code&gt;bodyparser&lt;/code&gt;, but this is also provided by the express JS function, so we do not need to install any package for this.&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;index.js&lt;/code&gt; with the code below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// After the express static middleware&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;// Body parser&lt;br&gt;
app.use(express.json());&lt;br&gt;
app.use(express.urlencoded({ extended: false }));&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our &lt;code&gt;body-parser&lt;/code&gt; setup, let's see it in action by creating a &lt;code&gt;POST&lt;/code&gt; route in our application, which we will use to &lt;code&gt;post&lt;/code&gt; the entries of the sender to our server.&lt;/p&gt;

&lt;p&gt;Add the following code below the &lt;code&gt;get&lt;/code&gt; route function&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Post route to handle retrieving data from HTML form to server&lt;br&gt;
app.post("/send_email", (req, res) =&amp;gt; {&lt;br&gt;
  console.log(req.body);&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
We also need to update our HTML form to have a &lt;code&gt;POST&lt;/code&gt; method and also set the path to post the data to like below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
    &amp;lt;form&lt;br&gt;
      action="/send_email"&lt;br&gt;
      method="POST"&lt;br&gt;
      style="max-width: 500px; margin: auto"&lt;br&gt;
    &amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1-endraw-actionsendemail-raw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;action="/send_email"&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The action attribute is used to specify where we want to send the form data when the form is submitted, we are sending the data to the &lt;strong&gt;/send_email&lt;/strong&gt; route in our application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#2-endraw-methodpost-raw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;method="POST"&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The post method is good when sending sensitive information from the client (browser) to the server (backend), it hides the form values from the browser address bar unlike the &lt;code&gt;GET&lt;/code&gt; method which displays it, the post method also appends form data inside the body of the HTTP request, this body is what express js is parsing and is also been retrieved using through the &lt;code&gt;req&lt;/code&gt; parameter in our route functions. &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#3-endraw-reqbody-raw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;req.body&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Here we are accessing the form body object from the &lt;code&gt;req&lt;/code&gt; parameter which contains all the data from our HTML inputs (example ahead).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have all this setup, let us proceed to send a sample mail that will be displayed in our terminal.&lt;/p&gt;

&lt;p&gt;Fill in the form inputs and also select an attachment then click the &lt;strong&gt;send mail&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6X9x2Qhd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623451260493/BXc1XCxm_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6X9x2Qhd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623451260493/BXc1XCxm_.png" alt="frame_generic_light (6).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have all your project set up correctly you, should have the form values displayed below in your terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SErkcBjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623451499503/tsc87IKM_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SErkcBjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623451499503/tsc87IKM_.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That üëÜ is the example of the &lt;code&gt;req.body&lt;/code&gt;, this picks up the attribute name of the HTML input tags&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#the-post-method"&gt;
  &lt;/a&gt;
  The &lt;u&gt;POST&lt;/u&gt; Method
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IA0vCOxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452802484/EhPiX5yC3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IA0vCOxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452802484/EhPiX5yC3.png" alt="frame_generic_light (9).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you noticed that your browser address bar didn't change üíÅ‚Äç‚ôÇÔ∏è, now set your form method to &lt;code&gt;GET&lt;/code&gt; and try sending a mail again, what did you notice?&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#the-get-method"&gt;
  &lt;/a&gt;
  The &lt;u&gt;GET&lt;/u&gt; Method
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yRPCxqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452831541/SFbncJzcP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yRPCxqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452831541/SFbncJzcP.png" alt="frame_generic_light (8).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The submitted data are been displayed on the address bar, imagine you are submitting your password üò±. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Which method will you use for credit cards ?.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#handling-files-over-a-node-js-server"&gt;
  &lt;/a&gt;
  Handling Files over a Node JS server
&lt;/h2&gt;

&lt;p&gt;In this section, we will look into handling files coming from the client-side to our project Node JS backend application. &lt;/p&gt;

&lt;p&gt;In other to handle files  coming from the frontend, we need to install a package called &lt;code&gt;multer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Multer is a node.js middleware for handling &lt;strong&gt;multipart/form-data&lt;/strong&gt;, which is primarily used for uploading files.&lt;/p&gt;

&lt;p&gt;Multer also has a rule, which is that &lt;strong&gt;multer will not process any form which is not multipart (multipart/form-data).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In other to make &lt;code&gt;multer&lt;/code&gt; work in our project we need to add an encryption attribute to our form tag like below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
    &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  action="/send_email"&amp;lt;br&amp;gt;
  method="POST"&amp;lt;br&amp;gt;
  enctype="multipart/form-data"&amp;lt;br&amp;gt;
  style="max-width: 500px; margin: auto"&amp;lt;br&amp;gt;
&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ensure to update your form tag with the new attribute, after that, we need to create a new folder called &lt;code&gt;attachments&lt;/code&gt; in our project root directory&lt;/p&gt;

&lt;p&gt;Your project structure and &lt;code&gt;index.js&lt;/code&gt; should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aknsBDZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623454927337/3GxIb_cx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aknsBDZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623454927337/3GxIb_cx5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#configuring-multer"&gt;
  &lt;/a&gt;
  Configuring Multer
&lt;/h3&gt;

&lt;p&gt;To configure our project to use multer, we need to first install it using the command below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
yarn add multer&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once it is installed, we need to configure it in our &lt;code&gt;index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-multer-endraw-diskstorage-raw-"&gt;
  &lt;/a&gt;
  Setting up multer &lt;code&gt;diskStorage&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Multer allows us to specify where we want to store the attachments coming from the frontend and also define their unique names through its method called &lt;strong&gt;diskStorage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;require &lt;code&gt;multer&lt;/code&gt; below where we required the &lt;code&gt;express&lt;/code&gt; js&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Import express into our project&lt;br&gt;
const express = require("express");&lt;/p&gt;

&lt;p&gt;// Import multer&lt;br&gt;
const multer = require("multer");&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Copy-paste the following code, below the body-parser.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
// Multer file storage&lt;br&gt;
const Storage = multer.diskStorage({&lt;br&gt;
  destination: function (req, file, callback) {&lt;br&gt;
    callback(null, "./attachments");&lt;br&gt;
  },&lt;br&gt;
  filename: function (req, file, callback) {&lt;br&gt;
    callback(null,&lt;/code&gt;${file.fieldname}&lt;em&gt;${Date.now()}&lt;/em&gt;${file.originalname}`);&lt;br&gt;
  },&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#-endraw-multerdiskstorage-raw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;&lt;code&gt;multer.diskStorage&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#1-endraw-destination-raw-"&gt;
  &lt;/a&gt;
  1.  &lt;strong&gt;&lt;em&gt;&lt;code&gt;destination&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This multer method allows us to set the destination of our attachment through a callback function, and as you can see we passed our &lt;code&gt;attachment&lt;/code&gt; folder as the second argument of the callback function, this is where the attachment of a mail will be store (example coming up).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-endraw-filename-raw-"&gt;
  &lt;/a&gt;
  2.  &lt;strong&gt;&lt;em&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The second property we can set using the &lt;code&gt;diskStorage&lt;/code&gt; is the file name of the incoming attachment, we do this so that every attachment will have a unique file name, we concatenate the field name (from, input name=" attachment") with underscore &lt;code&gt;_&lt;/code&gt; and current date that the file is been attached in milliseconds with another underscore &lt;code&gt;_&lt;/code&gt; and finally the attachment original name. &lt;/p&gt;

&lt;p&gt;That is super unique üòç&lt;/p&gt;




&lt;p&gt;Let's proceed to write middleware to actually get the attachment from the request body.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Middleware to get a single attachment&lt;br&gt;
const attachmentUpload = multer({&lt;br&gt;
  storage: Storage,&lt;br&gt;
}).single("attachment");&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
What we are doing here is that we are passing the attachment storage logic we created into the &lt;strong&gt;multer&lt;/strong&gt; object and also telling &lt;strong&gt;multer&lt;/strong&gt; that we are only targeting a single attachment with the &lt;code&gt;.single("attachment")&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applying-multer-middleware-to-our-post-route"&gt;
  &lt;/a&gt;
  Applying Multer Middleware to our Post Route
&lt;/h3&gt;

&lt;p&gt;Now that we have set up a middleware with &lt;code&gt;multer&lt;/code&gt;, which will help us retrieve attachments from the frontend form, let's proceed to apply it within our Post route.&lt;/p&gt;

&lt;p&gt;Update the application post route with the following code&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Post route to handle retrieving data from HTML form to server&lt;br&gt;
app.post("/send_email", (req, res) =&amp;gt; {&lt;br&gt;
  if (error) {&lt;br&gt;
      console.log(err);&lt;br&gt;
      return res.send("Error uploading file");&lt;br&gt;
    } else {&lt;br&gt;
      const recipient = req.body.email;&lt;br&gt;
      const subject = req.body.subject;&lt;br&gt;
      const message = req.body.message;&lt;br&gt;
      const attachmentPath = req.file.path;&lt;br&gt;
      console.log("recipient:", recipient);&lt;br&gt;
      console.log("subject:", subject);&lt;br&gt;
      console.log("message:", message);&lt;br&gt;
      console.log("attachmentPath:", attachmentPath);&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1-we-invoked-callexecute-the-endraw-attachmentupload-raw-middleware-function-and-extend-pass-the-endraw-req-raw-and-endraw-res-raw-parameter-from-the-post-route-function-to-it-this-will-allow-the-middleware-to-have-access-to-any-file-in-the-request-body"&gt;
  &lt;/a&gt;
  1. We invoked (call/execute) the &lt;code&gt;attachmentUpload&lt;/code&gt; middleware function and extend (pass) the &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; parameter from the post route function to it. This will allow the middleware to have access to any file in the request body.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#2-the-endraw-attachmentupload-raw-also-takes-in-a-callback-function-which-will-check-for-any-error-while-endraw-attachmentupload-raw-processes-the-files-from-the-request-body"&gt;
  &lt;/a&gt;
  2. The &lt;code&gt;attachmentUpload&lt;/code&gt; also takes in a callback function which will check for any error while &lt;code&gt;attachmentUpload&lt;/code&gt; processes the files from the request body.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#3-in-the-callback-function-we-are-checking-whether-there-is-an-error-in-the-process-endraw-if-raw-any-error-occurs-we-want-to-display-the-error-in-the-terminal-and-send-back-a-message-which-says-endraw-error-uploading-file-raw-as-a-response-endraw-res-raw-"&gt;
  &lt;/a&gt;
  3. In the callback function, we are checking whether there is an error in the process, &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; any error occurs, we want to display the error in the terminal and send back a message which says &lt;code&gt;Error uploading file&lt;/code&gt; as a response (&lt;code&gt;res&lt;/code&gt;).
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;A call-back function is any function that is been passed as an argument to another function, which will be executed (call-back) later in time (any point in time).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#4-finally-we-included-an-alternative-statement-with-the-endraw-else-raw-block-which-is-executed-if-the-previous-statement-is-not-satisfied-this-implies-that-the-endraw-else-raw-statement-block-will-only-run-if-there-is-no-error-when-the-middleware-is-trying-to-upload-any-attachments-from-the-html-form-to-the-attachment-folder"&gt;
  &lt;/a&gt;
  4. Finally, we included an alternative statement with the &lt;strong&gt;&lt;code&gt; else&lt;/code&gt;&lt;/strong&gt; block which is executed if the previous statement is not satisfied. This implies that the &lt;code&gt;else&lt;/code&gt; statement block will only run if there is no error when the middleware is trying to upload any attachments from the HTML form to the "attachment" folder.
&lt;/h5&gt;



&lt;h3&gt;
  &lt;a href="#storing-files-from-html-form-to-our-storage-folder"&gt;
  &lt;/a&gt;
  Storing Files from HTML Form to our Storage Folder
&lt;/h3&gt;

&lt;p&gt;Let's proceed to test our implementation so far.&lt;/p&gt;

&lt;p&gt;Save your script and refresh your browser (if you're not using a live server) to get updated with our node script.&lt;/p&gt;

&lt;p&gt;Fill the form inputs and attach any file of your choice as shown below üëá and hit the send button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_UySl3qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591706488/Jpjk8_Ha0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UySl3qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591706488/Jpjk8_Ha0.png" alt="frame_generic_light (13).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output-1"&gt;
  &lt;/a&gt;
  Output 1 üëá
&lt;/h3&gt;

&lt;p&gt;If all goes well, your terminal should have the following output üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-v8mHPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591541760/9hkxSymQe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-v8mHPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591541760/9hkxSymQe.png" alt="frame_generic_light (12).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also notice that the attachment name has changed to the naming convention logic we created earlier üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkhJJp_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623593206815/6YLCpLHmQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkhJJp_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623593206815/6YLCpLHmQ.png" alt="frame_generic_light (14).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output-2"&gt;
  &lt;/a&gt;
  Output 2 üëá
&lt;/h3&gt;

&lt;p&gt;The fun part is, if you expand the &lt;em&gt;attachment&lt;/em&gt; folder, you will see your attached file there üíÉ, thanks to &lt;strong&gt;multer&lt;/strong&gt;, you can also check the folder directory in the file explorer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hELOl8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591792981/jiAKUiu0U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hELOl8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591792981/jiAKUiu0U.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-your-file-explorer"&gt;
  &lt;/a&gt;
  Check your File Explorer üëá
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8kDbJOYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623595804065/xI-oIaa-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kDbJOYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623595804065/xI-oIaa-8.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check the complete code to this point from my GitHub gist &lt;a href="https://gist.github.com/unclebay143/afd096589fc868b86fd9edd1eb291f27"&gt;Here ‚úã&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-nodemailer-package"&gt;
  &lt;/a&gt;
  Setting up Nodemailer Package
&lt;/h2&gt;

&lt;p&gt;Now that we can get data submitted from our HTML form to our Node JS server, let us proceed to set up the logic that will actually send out the mail üíÉ to our recipient.&lt;/p&gt;

&lt;p&gt;In other to achieve this, we need to install and setup the awaited &lt;code&gt;Nodemailer&lt;/code&gt; package, just as the name implies, this package allows us to send mail from our Node js application without stress, to begin with, let us install the &lt;code&gt;Nodemailer&lt;/code&gt; package using the code below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;yarn add nodemailer&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodemailer-requirements"&gt;
  &lt;/a&gt;
  Nodemailer Requirements
&lt;/h3&gt;

&lt;p&gt;Now that the &lt;code&gt;nodemailer&lt;/code&gt; package has been successfully installed, let us break down the requirements for using the &lt;code&gt;nodemailer&lt;/code&gt; package.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-nodemailer-requires-a-transporter-object"&gt;
  &lt;/a&gt;
  1. Nodemailer requires a *&lt;em&gt;transporter *&lt;/em&gt; object
&lt;/h4&gt;

&lt;p&gt;This is where we configure the means of sending out the mail, we are going to be using the Gmail service in this article.&lt;/p&gt;

&lt;p&gt;Below üëá is the format of  a &lt;code&gt;nodemailer&lt;/code&gt; transport.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
let transporter = nodemailer.createTransport({&lt;br&gt;
   service: 'gmail',&lt;br&gt;
   auth: {&lt;br&gt;
      type: 'OAuth2',&lt;br&gt;
      user: "your gmail address",&lt;br&gt;
      pass: "your gmail password",&lt;br&gt;
      clientId: "your gmail client id",&lt;br&gt;
      clientSecret: "your gmail client secret token",&lt;br&gt;
      refreshToken: "gmail refresh token",&lt;br&gt;
   }&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-nodemailer-requires-a-mailoption"&gt;
  &lt;/a&gt;
  2. Nodemailer requires a &lt;strong&gt;mailOption&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This is an object where we specify the following&lt;/p&gt;

&lt;p&gt;a. The sender's email address (required)  &lt;/p&gt;

&lt;p&gt;b. The recipient's email address (required)  &lt;/p&gt;

&lt;p&gt;c. The mail subject (optional)  &lt;/p&gt;

&lt;p&gt;d. The email text body (optional) and  &lt;/p&gt;

&lt;p&gt;e. The attachments  (optional)&lt;/p&gt;

&lt;p&gt;Below üëá is the format for a mailOption&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
let mailOptions = {&lt;br&gt;
  from: "your gmail address",&lt;br&gt;
  to: "your recipient email address",&lt;br&gt;
  subject: "e-mail subject",&lt;br&gt;
  text: "e-mail body",&lt;br&gt;
};&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-node-mailer-requires-a-endraw-sendmail-raw-method"&gt;
  &lt;/a&gt;
  3. Node mailer requires a &lt;code&gt;sendMail&lt;/code&gt; method
&lt;/h4&gt;

&lt;p&gt;Nodemailer &lt;code&gt;sendMail&lt;/code&gt; method is actually the one responsible for the sending of email to the recipient, this method takes in the &lt;code&gt;mailOption&lt;/code&gt; we've discussed above and also a callback function to handle the status of the mail transportation.&lt;/p&gt;

&lt;p&gt;Below üëá is the format for &lt;code&gt;sendMail&lt;/code&gt; method&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
transporter.sendMail(mailOptions, function(err, data) {&lt;br&gt;
   if (err) {&lt;br&gt;
      console.log("Error: " + err);&lt;br&gt;
   } else {&lt;br&gt;
      console.log("Email sent successfully");&lt;br&gt;
   }&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The complete code of the &lt;code&gt;nodemailer&lt;/code&gt; should be like this üëá&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;// After the last console.log(attachmentPath) in the else statement&lt;/p&gt;

&lt;p&gt;// Connecting to gmail service&lt;br&gt;
let transporter = nodemailer.createTransport({&lt;br&gt;
    service: "gmail",&lt;br&gt;
    auth: {&lt;br&gt;
        type: "OAuth2",&lt;br&gt;
        user: "your gmail address",&lt;br&gt;
        pass: "your gmail password",&lt;br&gt;
        clientId: "your gmail client id",&lt;br&gt;
        clientSecret: "your gmail client secret token",&lt;br&gt;
        refreshToken: "gmail refresh token",&lt;br&gt;
    },&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;// e-mail option&lt;br&gt;
let mailOptions = {&lt;br&gt;
   from: "your gmail address",&lt;br&gt;
   to: "your recipient email address",&lt;br&gt;
   subject: "e-mail subject",&lt;br&gt;
   text: "e-mail body",&lt;br&gt;
};&lt;/p&gt;

&lt;p&gt;// Method to send e-mail out&lt;br&gt;
transporter.sendMail(mailOptions, function (err, data) {&lt;br&gt;
    if (err) {&lt;br&gt;
        console.log("Error: " + err);&lt;br&gt;
    } else {&lt;br&gt;
        console.log("Email sent successfully");&lt;br&gt;
    }&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above code will serve as our &lt;strong&gt;nodemailer ** template, which we need to find the credentials to, but before we do that, we need to set up a secure way to protect the transporter credentials such as the **user&lt;/strong&gt;, &lt;strong&gt;pass&lt;/strong&gt;, &lt;strong&gt;clientId&lt;/strong&gt;, &lt;strong&gt;clientSecret&lt;/strong&gt; and the &lt;strong&gt;refresh token&lt;/strong&gt; that we be provided by google, so that everyone will not be able to see our application secret details from Github repository when we finally push to production.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-dotenv"&gt;
  &lt;/a&gt;
  Setting up dotenv
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;dotenv&lt;/code&gt; allows us to keep secret credentials or tokens in our project environment (.env file), which will not be visible to either the browser, git version control, or people viewing our project on Github, these are called the &lt;code&gt;Environment Variables&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure to add the .env file to your .gitignore file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run the code below üëá to install the &lt;code&gt;dotenv&lt;/code&gt; to your project&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
yarn add dotenv&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After the &lt;code&gt;dotenv&lt;/code&gt; installation, proceed to create a &lt;code&gt;.env&lt;/code&gt; file in your project root directory like this üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gl5Mwsbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656689509/MuEabNjvJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gl5Mwsbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656689509/MuEabNjvJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is where we are going to store our &lt;strong&gt;Environment-Specific&lt;/strong&gt; variables in a &lt;code&gt;NAME=value&lt;/code&gt; format like below üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_4BkQfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657156443/eg1P6ECPJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_4BkQfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657156443/eg1P6ECPJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access this *&lt;em&gt;enviroment-variable *&lt;/em&gt; from our JavaScript application we need to require (import) the &lt;code&gt;dotenv&lt;/code&gt; package in our &lt;code&gt;index.js&lt;/code&gt; and configure it like below üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGhFDHcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657621117/fV89203dW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGhFDHcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657621117/fV89203dW.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or like this üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8dmcBIPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657755775/tng7mIc7W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8dmcBIPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657755775/tng7mIc7W.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use this method of import when you need to use other &lt;code&gt;dotenv&lt;/code&gt; function like &lt;code&gt;parse&lt;/code&gt;, but in this article, we are going to make use of the first method üëÜ because we only need the &lt;code&gt;config()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;To learn more about the &lt;code&gt;dotenv&lt;/code&gt; package, you can visit the official documentation  &lt;a href="https://www.npmjs.com/package/dotenv"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#accessing-our-environmentvariables-from-endraw-dotenv-raw-file"&gt;
  &lt;/a&gt;
  Accessing our environment-variables from &lt;code&gt;dotenv&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;Now that we know how to use the &lt;code&gt;dotenv&lt;/code&gt; package to store our &lt;strong&gt;enviroment-variable&lt;/strong&gt; in our JavaScript application let us see how we can then access this variables in our scripts.&lt;/p&gt;

&lt;p&gt;Add this line of code below the &lt;code&gt;dotenv&lt;/code&gt; configuration üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ClkD3Vql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623659537468/Gd6Od83Qn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClkD3Vql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623659537468/Gd6Od83Qn.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output üëá
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HA0s0iWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623660497030/ID5U7drLc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HA0s0iWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623660497030/ID5U7drLc.png" alt="frame_generic_light (15).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is totally how to set up and &lt;strong&gt;use environment-variables&lt;/strong&gt; with &lt;code&gt;dotenv&lt;/code&gt; package in a JavaScript project (Not only in Node JS) üòâ.&lt;/p&gt;




&lt;p&gt;If you made it this far, you deserve this üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NbUauREi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623662987273/cP421AUWt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NbUauREi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623662987273/cP421AUWt.gif" alt="standing clapping ovation"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#final-lap"&gt;
  &lt;/a&gt;
   FINAL LAP 


&lt;/h3&gt;





&lt;h2&gt;
  &lt;a href="#gmail-oauth2-configuration"&gt;
  &lt;/a&gt;
  Gmail OAuth2 Configuration
&lt;/h2&gt;

&lt;p&gt;Now that we have everything setup in our Node JS application, let's proceed to get the following credentials from Google.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;clientId&lt;/code&gt; : "your gmail client id",&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clientSecret&lt;/code&gt; : "your gmail client secret token",&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;refreshToken&lt;/code&gt; : "gmail refresh token",&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Follow the guide below to setup you Gmail OAuth 2 Configurations&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-google-cloud-platform-account-setup"&gt;
  &lt;/a&gt;
  1. Google Cloud Platform Account Setup
&lt;/h3&gt;

&lt;p&gt;Firstly we need to register our Gmail address on the ** &lt;a href="https://console.cloud.google.com/"&gt;Google Cloud Platform&lt;/a&gt; **, if you have not done that before you can register  &lt;a href="https://console.cloud.google.com/"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If your gmail account is logged in on your browser you should have a screen display like this üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKIZhub9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623668291610/KhrcyBpBt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKIZhub9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623668291610/KhrcyBpBt.png" alt="google cloud platform login to dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accept the &lt;em&gt;Terms and Condition&lt;/em&gt; by checking the box, the &lt;em&gt;Email Updates&lt;/em&gt; is optional, and then click on &lt;strong&gt;Accept and Continue&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-setting-up-a-new-project"&gt;
  &lt;/a&gt;
  2. Setting up a New Project
&lt;/h3&gt;

&lt;p&gt;Next, we need to create a new project, to do this click on the &lt;em&gt;CREATE PROJECT&lt;/em&gt; link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWKqz9RO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623701916901/ZolLeSQsD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWKqz9RO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623701916901/ZolLeSQsD.png" alt="CREATE PROJECT link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Setup Project Name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fill in a name for your project, I am using &lt;code&gt;projectmailSender&lt;/code&gt; in this tutorial, note that this project name will be used to generate an &lt;code&gt;id&lt;/code&gt; for your project and this cannot be changed later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
After you have decided on a project name, click on the &lt;span&gt;Create&lt;/span&gt;button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VywVlvKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623669488191/JnBBhB_4W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VywVlvKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623669488191/JnBBhB_4W.png" alt="Fill in a name for your project input box circled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
After a few seconds delay your dashboard should look like this üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6M8MZrr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623681938996/JjpHTBFqC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6M8MZrr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623681938996/JjpHTBFqC.png" alt="frame_generic_light (20).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
After loading click on &lt;strong&gt;Go to APIs review&lt;/strong&gt; üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgEXxe75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682116582/1BSEXeqTO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgEXxe75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682116582/1BSEXeqTO.png" alt="frame_generic_light (21).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
On the APIs review page, click on the &lt;strong&gt;OAuth consent screen&lt;/strong&gt; option on the sidebar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwOVovbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682450130/GmmJO3-rgT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwOVovbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682450130/GmmJO3-rgT.png" alt="frame_generic_light (22).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-the-oauth-consent-screen"&gt;
  &lt;/a&gt;
  On the OAuth consent Screen
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
Select external üëá and click on the &lt;span&gt;create&lt;/span&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iHPep6w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623684072803/Fwmry9wxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iHPep6w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623684072803/Fwmry9wxp.png" alt="the OAuth consent Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
The next step is to provide basic information about our app (nodemailSender) üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only three inputs are compulsory, your app name and 2 emails, one for support and the other for contacting the developer.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;save and continue&lt;/strong&gt; when you are done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juZhhP5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682987008/nplkzkbd_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juZhhP5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682987008/nplkzkbd_.png" alt="basic information section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
The &lt;strong&gt;scope&lt;/strong&gt; section is optional, but if you want to fill it, you can.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am going to skip it in this tutorial by clicking the &lt;strong&gt;Save and continue&lt;/strong&gt; üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YPtpz7-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683339013/j_slmeEWQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPtpz7-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683339013/j_slmeEWQ.png" alt="the scope section is option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Add your email address as the test user and save üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8zdFSo4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683837342/IrTd544wv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8zdFSo4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683837342/IrTd544wv.png" alt="add test user section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
And finally in the &lt;strong&gt;Summary&lt;/strong&gt; section, review your application data and click on 
&lt;strong&gt;Back to dashboard&lt;/strong&gt; when you are satisfied.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SagfDm9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683757586/MAR6IZiaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SagfDm9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683757586/MAR6IZiaz.png" alt="frame_generic_light (26).png"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;p&gt;Now that we have setup our new application, let us proceed to generate the credentials we are going to use in our &lt;strong&gt;Nodemailer&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
From the page we stopped earlier üëÜ, click on the &lt;strong&gt;Credentials&lt;/strong&gt; option at the sidebar üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjRwKDFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685109518/Ne0Hcol-F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjRwKDFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685109518/Ne0Hcol-F.png" alt="frame_generic_light (29).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;br&gt;
On the new page, click on &lt;strong&gt;Create Credentials&lt;/strong&gt; and select the &lt;strong&gt;OAuth Client ID&lt;/strong&gt; option from the dropdown üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqjjqTjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685435247/y7XhLC1ws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqjjqTjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685435247/y7XhLC1ws.png" alt="frame_generic_light (30).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
On the next page, select &lt;strong&gt;Web application&lt;/strong&gt; option from the dropdown, since we are building our application for the web üëá.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evt27vAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685708276/_y7_6_qZp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evt27vAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685708276/_y7_6_qZp.png" alt="frame_generic_light (31).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Choose a client name üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr7H8K7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685886068/3ek7xYu7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr7H8K7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685886068/3ek7xYu7g.png" alt="frame_generic_light (32).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Scroll to the bottom of the page and add  &lt;a href="https://developers.google.com/oauthplayground"&gt;https://developers.google.com/oauthplayground&lt;/a&gt; to the &lt;strong&gt;Authorized redirect urls&lt;/strong&gt; section üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XI--ynL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623687329834/Qs16-lf66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XI--ynL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623687329834/Qs16-lf66.png" alt="frame_generic_light (34).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding the URL, click on the &lt;span&gt;Create&lt;/span&gt; button and if everything goes well, you should receive an alert that your OAuth credentials have been created,  followed by this üëá popup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EoOQ8vGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623686342650/ULxkLmLyO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EoOQ8vGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623686342650/ULxkLmLyO.png" alt="frame_generic_light (33).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy your &lt;strong&gt;Client ID&lt;/strong&gt; and your &lt;strong&gt;Client Secret&lt;/strong&gt; key and keep them safe, because we will use it very soon.&lt;/p&gt;

&lt;p&gt;At this point we have gotten 2 out of 3 credentials that we need to configure out &lt;strong&gt;nodemailer&lt;/strong&gt;, the last credential we are looking for is the &lt;strong&gt;refreshToken&lt;/strong&gt;, let's go it em üé£.&lt;/p&gt;






&lt;h3&gt;
  &lt;a href="#generating-oauth-refresh-token"&gt;
  &lt;/a&gt;
  Generating OAuth Refresh Token
&lt;/h3&gt;

&lt;p&gt;We will be using the &lt;strong&gt;Client ID&lt;/strong&gt; and the &lt;strong&gt;Client Secret&lt;/strong&gt; to generate our refresh token.&lt;/p&gt;

&lt;p&gt;(I hope you saved it earlier?)&lt;/p&gt;

&lt;p&gt;If you, you can retrieve it from the &lt;strong&gt;credential&lt;/strong&gt; tab üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MABhBP7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623687913604/Kz_-LddDH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MABhBP7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623687913604/Kz_-LddDH.png" alt="frame_generic_light (35).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
### OAuth Playground&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember that we set the &lt;strong&gt;Authorized redirect urls&lt;/strong&gt; to  &lt;a href="https://developers.google.com/oauthplayground"&gt;https://developers.google.com/oauthplayground&lt;/a&gt; ?&lt;/p&gt;

&lt;p&gt;Now let's head to the playground to grab our refresh token üíÉ&lt;/p&gt;

&lt;p&gt;click here üëâ  &lt;a href="https://developers.google.com/oauthplayground"&gt;https://developers.google.com/oauthplayground&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#on-the-oauth-playground"&gt;
  &lt;/a&gt;
  On the OAuth Playground
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Click on the settings (gear icon)&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Use your own OAuth credentials&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Fill in your &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client Secret&lt;/strong&gt; keys appropriately&lt;/li&gt;
&lt;li&gt;Find and click &lt;strong&gt;Gmail API v1&lt;/strong&gt; then select &lt;em&gt;&lt;a href="https://mail.googl.com/"&gt;https://mail.googl.com/&lt;/a&gt;&lt;/em&gt; from the dropdown&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n63qpt6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623689079977/6nfrXGZeE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n63qpt6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623689079977/6nfrXGZeE.png" alt="frame_generic_light (37).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Authorize APIs&lt;/strong&gt; button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
You should be redirected to the page below, ensure to select the email address you added as a &lt;strong&gt;Test user&lt;/strong&gt; üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4OR5As--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623689427949/lJP0J37pr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4OR5As--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623689427949/lJP0J37pr.png" alt="frame_generic_light (38).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are denied access, then you should check your test user in the Google Cloud Platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
Click on continue üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4l4xZVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690097696/pCCJjXwED.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4l4xZVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690097696/pCCJjXwED.png" alt="frame_generic_light (39).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Grand the application access to your Gmail account üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJwVQBlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690200520/g0JX3eQwP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJwVQBlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690200520/g0JX3eQwP.png" alt="frame_generic_light (40).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IOdp3p3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690320461/L8aytCc9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOdp3p3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690320461/L8aytCc9i.png" alt="frame_generic_light (41).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
You will be redirected back to the OAuth Playground, click on &lt;strong&gt;Exchange authorization code for tokens&lt;/strong&gt; üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qXwLEj6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690557359/Tr6S0O9sQn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qXwLEj6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690557359/Tr6S0O9sQn.png" alt="frame_generic_light (42).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Copy the refresh token and keep it safe üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsfBmCh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690779063/YCtHkM6Kn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsfBmCh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690779063/YCtHkM6Kn.png" alt="frame_generic_light (43).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-google-transporter"&gt;
  &lt;/a&gt;
  Setting up Google Transporter
&lt;/h3&gt;

&lt;p&gt;Now that we have gotten our required credentials, let's update our nodemailer logic with the &lt;code&gt;googleapis&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;install the google API using the code below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
yarn add googleapis&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What we want to achieve below is to connect to our &lt;strong&gt;Google Playground&lt;/strong&gt; and create a new token each time we need to send a mail and to achieve this, we need to dedicate a function named &lt;strong&gt;createTransport&lt;/strong&gt; to &lt;strong&gt;connect to the playground&lt;/strong&gt; and always create a new access token when we try to send a new email, with this we will never encounter expired token error.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;createTransport&lt;/code&gt; function üëá&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;// Googleapis&lt;br&gt;
const { google } = require("googleapis");&lt;/p&gt;

&lt;p&gt;// Pull out OAuth2 from googleapis&lt;br&gt;
const OAuth2 = google.auth.OAuth2;&lt;/p&gt;

&lt;p&gt;const createTransporter = async () =&amp;gt; {&lt;br&gt;
// 1&lt;br&gt;
  const oauth2Client = new OAuth2(&lt;br&gt;
    process.env.OAUTH_CLIENT_ID,&lt;br&gt;
    process.env.OAUTH_CLIENT_SECRET,&lt;br&gt;
    "&lt;a href="https://developers.google.com/oauthplayground"&gt;https://developers.google.com/oauthplayground&lt;/a&gt;"&lt;br&gt;
  );&lt;/p&gt;

&lt;p&gt;// 2&lt;br&gt;
  oauth2Client.setCredentials({&lt;br&gt;
    refresh_token: process.env.OAUTH_REFRESH_TOKEN,&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;const accessToken = await new Promise((resolve, reject) =&amp;gt; {&lt;br&gt;
    oauth2Client.getAccessToken((err, token) =&amp;gt; {&lt;br&gt;
      if (err) {&lt;br&gt;
        reject("Failed to create access token :( " + err);&lt;br&gt;
      }&lt;br&gt;
      resolve(token);&lt;br&gt;
    });&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;// 3&lt;br&gt;
  const transporter = nodemailer.createTransport({&lt;br&gt;
    service: "gmail",&lt;br&gt;
    auth: {&lt;br&gt;
      type: "OAuth2",&lt;br&gt;
      user: process.env.SENDER_EMAIL,&lt;br&gt;
      accessToken,&lt;br&gt;
      clientId: process.env.OAUTH_CLIENT_ID,&lt;br&gt;
      clientSecret: process.env.OAUTH_CLIENT_SECRET,&lt;br&gt;
      refreshToken: process.env.OAUTH_REFRESH_TOKEN,&lt;br&gt;
    },&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;// 4&lt;br&gt;
  return transporter;&lt;br&gt;
};&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;After importing the &lt;code&gt;googleapis&lt;/code&gt; and pulling out &lt;code&gt;OAuth2&lt;/code&gt;, let's see what we have in the &lt;code&gt;createTransporter&lt;/code&gt; function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-remember-this-"&gt;
  &lt;/a&gt;
  1. Remember this üëá?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gofOQ3Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698150196/aR-egfuaV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gofOQ3Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698150196/aR-egfuaV.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can't always go to connect our application to the &lt;strong&gt;Google playground&lt;/strong&gt; manually, this method here üëá is automatically doing that for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K99yBPwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623697073219/237oAgSvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K99yBPwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623697073219/237oAgSvg.png" alt="Connect to Google playground"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-remember-the-refresh-access-token-also"&gt;
  &lt;/a&gt;
  2. Remember the refresh access token üëá also?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jEy_s5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698422273/0aGBNAeRE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jEy_s5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698422273/0aGBNAeRE.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The method below will automatically do that for us in other to keep the access token active, it requires the refresh token to generate a new access token, that is why we are passing the token from our &lt;strong&gt;environment-variable&lt;/strong&gt; along with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YtjXfqhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698595295/89j-zdurX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YtjXfqhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698595295/89j-zdurX.png" alt="Refresh Access Token.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3-we-are-authenticating-ourselves-as-the-owner-of-the-gmail-account-we-want-to-use-as-the-transport"&gt;
  &lt;/a&gt;
  3. We are authenticating ourselves as the owner of the Gmail account we want to use as the transport.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#4-we-are-returning-the-response-from-the-transport-authentication-approved-or-declined"&gt;
  &lt;/a&gt;
  4. we are returning the response from the transport authentication (approved or declined)
&lt;/h5&gt;






&lt;p&gt;Now that we have an understanding of what is going on, let us update our &lt;strong&gt;mailOptions&lt;/strong&gt; and our &lt;strong&gt;sendMail&lt;/strong&gt; method üëá&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
 // Route to handle sending mails&lt;br&gt;
app.post("/send_email", (req, res) =&amp;gt; {&lt;br&gt;
  attachmentUpload(req, res, async function (error) {&lt;br&gt;
    if (error) {&lt;br&gt;
      return res.send("Error uploading file");&lt;br&gt;
    } else {&lt;br&gt;
      // Pulling out the form data from the request body&lt;br&gt;
      const recipient = req.body.email;&lt;br&gt;
      const mailSubject = req.body.subject;&lt;br&gt;
      const mailBody = req.body.message;&lt;br&gt;
      const attachmentPath = req.file?.path;&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  // Mail options
  let mailOptions = {
    from: process.env.SENDER_EMAIL,
    to: recipient,
    subject: mailSubject,
    text: mailBody,
    attachments: [
      {
        path: attachmentPath,
      },
    ],
  };

  try {
    // Get response from the createTransport
    let emailTransporter = await createTransporter();

    // Send email
    emailTransporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        // failed block
        console.log(error);
      } else {
        // Success block
        console.log("Email sent: " + info.response);
        return res.redirect("/success.html");
      }
    });
  } catch (error) {
    return console.log(error);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;});&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What we are doing above is to create an asynchronous function without our post route, because we are going to be waiting for a response from the &lt;code&gt;createTransportorer&lt;/code&gt; function, we also created a new attachment key in our &lt;strong&gt;mailOpitons&lt;/strong&gt; which will hold our attachment.&lt;/p&gt;

&lt;p&gt;The try block is to catch any error that is going to occur during the process of connecting to the &lt;strong&gt;Google playground&lt;/strong&gt; and sending out emails.&lt;/p&gt;

&lt;p&gt;The if statement which serves as a conditional statement will check if there is an error and log it out, but if there is no error during the process, it will redirect to the success page.&lt;/p&gt;

&lt;p&gt;Now let us test our code üíÉ&lt;/p&gt;

&lt;p&gt;Because this article is long already, I have created a  &lt;a href="https://gist.github.com/unclebay143/643675b5d9112f7b16dac7af60e81af9"&gt;&lt;strong&gt;Github Gist Here&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Update your &lt;code&gt;index.js&lt;/code&gt; file with the code from the &lt;strong&gt;Git&lt;/strong&gt; üëÜ and fill the form in your browser with an attachment, like below  üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDopQWqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623700700290/RI11jhu1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDopQWqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623700700290/RI11jhu1a.png" alt="frame_generic_light (48).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the send mail button, and if all goes well, you should be redirected to the &lt;strong&gt;Success Page&lt;/strong&gt; üëá.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3tQgOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702207642/WI8plCd78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3tQgOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702207642/WI8plCd78.png" alt="frame_generic_light (52).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Proceed to check your recipient mailbox, your sent e-mail should be received üíÉ.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3Uml5Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702169184/h32XS0PZs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3Uml5Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702169184/h32XS0PZs.png" alt="frame_generic_light (51).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full mail body with attachment displayed üëá&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl5qoyc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702355866/CQ8mGUQQnO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl5qoyc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702355866/CQ8mGUQQnO.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;h3&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning Up
&lt;/h3&gt;

&lt;p&gt;Now that our project is complete, there is one important thing to do, which is deleting the attachments from our server document, everytime a mail has been sent, we don't want to keep the user's files, and these files can also take up huge space.&lt;/p&gt;

&lt;p&gt;To achieve this, we need to install a package called &lt;code&gt;fs&lt;/code&gt; üëá&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
yarn add fs&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fs package allows us to perform actions with our computer files through Node JS more info  &lt;a href="https://nodejs.org/api/fs.html"&gt;HERE&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, let us update our &lt;code&gt;sendMail&lt;/code&gt; method within the &lt;strong&gt;else&lt;/strong&gt; success block with the code below üëá&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Send email&lt;br&gt;
emailTransporter.sendMail(mailOptions, function (error, info) {&lt;br&gt;
  if (error) {&lt;br&gt;
    // failed block&lt;br&gt;
    console.log(error);&lt;br&gt;
  } else {&lt;br&gt;
    // Success block&lt;br&gt;
    console.log("Email sent: " + info.response);&lt;br&gt;
    fs.unlink(attachmentPath, function (err) {&lt;br&gt;
      if (err) {&lt;br&gt;
        return res.end(err);&lt;br&gt;
      } else {&lt;br&gt;
        console.log(attachmentPath + " has been deleted");&lt;br&gt;
        return res.redirect("/success.html");&lt;br&gt;
      }&lt;br&gt;
    });&lt;br&gt;
  }&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;






&lt;p&gt;You can get the completed Github Gist for the &lt;code&gt;index.js&lt;/code&gt; file &lt;a href="https://gist.github.com/unclebay143/d21748097ab04cbad551508f79d538d4"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now try to send another mail with an attachment to test if the sent files still remain in the folder, remember to manually remove the existing ones.&lt;/p&gt;

&lt;p&gt;And that is how to implement a mailing application into your NODE JS project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfrZvpT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623766288820/jpCRyVgkZ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfrZvpT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623766288820/jpCRyVgkZ.gif" alt="giphy (6).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, you just learned the basics of Node JS which includes Routing, rendering HTML files, integrating packages, working with Google APIs, and file handling to mention a few. This should get you started in using these technologies to build more stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links üëá
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Final Project Link: &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hosted Version Link: &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0SkZ0k2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623766314820/wfaXUoHmq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0SkZ0k2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623766314820/wfaXUoHmq.gif" alt="giphy (5).gif"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;p&gt;Wow, what a journey, I am glad you made it to the end of this article, if you enjoyed and learned from this article, I will like to connect with you, so you won't miss any of my upcoming articles.&lt;/p&gt;

&lt;p&gt;Let's connect on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=unclebigbay143"&gt;Twitter @unclebigbay143&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.linkedin.com/in/unclebigbay/"&gt;LinkedIn @unclebigbay&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;






&lt;p&gt;%%[reaction-id]&lt;/p&gt;






&lt;p&gt;See you in the next article. Bye Bye üôã‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---96uVdrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622627809083/3i7ThmW-M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---96uVdrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622627809083/3i7ThmW-M.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you found this helpful and want to support my blog, you can also &lt;a href="//www.buymeacoffee.com/unclebigbay"&gt;buy me a coffee&lt;/a&gt;.&lt;/p&gt;



</description>
    </item>
    <item>
      <title>AI vs ML vs DL vs DS</title>
      <author>thatIITgirl</author>
      <pubDate>Fri, 18 Jun 2021 07:14:07 +0000</pubDate>
      <link>https://dev.to/thatiitgirl/ai-vs-ml-vs-dl-vs-ds-12fa</link>
      <guid>https://dev.to/thatiitgirl/ai-vs-ml-vs-dl-vs-ds-12fa</guid>
      <description>&lt;p&gt;Ever felt awkward while discussing in the team,... when you say- Yes! we should put some Machine Learning into that, and someone else says ummm, I guess Deep Learning is what it needs. and you node silently?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6kvBXN1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media3.giphy.com/media/jbwsLn6OvdO80/200w.webp%3Fcid%3Decf05e47rp3v9f039g8og1ruiqpuswn3iwp1vtb95enpjpzq%26rid%3D200w.webp%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kvBXN1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media3.giphy.com/media/jbwsLn6OvdO80/200w.webp%3Fcid%3Decf05e47rp3v9f039g8og1ruiqpuswn3iwp1vtb95enpjpzq%26rid%3D200w.webp%26ct%3Dg" alt="smirk"&gt;&lt;/a&gt;&lt;br&gt;
So what is it? what is the difference among all in the simplest words? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;first AI ie Artificial Intelligence&lt;/strong&gt;&lt;br&gt;
It's not just a way of doing things, it is the umbrella. Remember, Venn diagram? This is the whole universe, your ultimate aim to make your app smart; ie AI enabled. Any machine that could use intelligence and make its own decision similar to our brain is AI enabled.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUII_-Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media4.giphy.com/media/idqIceJ08pjyIS5rRP/200w.webp%3Fcid%3Decf05e47d44g3y5lfl8lq0wca77w6ctqlynlhk1eqdbismib%26rid%3D200w.webp%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUII_-Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media4.giphy.com/media/idqIceJ08pjyIS5rRP/200w.webp%3Fcid%3Decf05e47d44g3y5lfl8lq0wca77w6ctqlynlhk1eqdbismib%26rid%3D200w.webp%26ct%3Dg" alt="aIml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; is a subset of AI like rest of them, it's more of a tool which gives us way to deal with the data, train it through supervised and unsupervised methods. After your machine learns from this data, it can take decision. The data accuracy is the key to the best decision making in your app. for the for example, we can train our machine to spot the difference between 2 species of a bird. Next time, You'll feed a bird's image to the app, based on what it learned, it'll produce the result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7NlTQdmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122507964-0633fd00-cfb6-11eb-96b2-8b10e35d9b90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7NlTQdmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122507964-0633fd00-cfb6-11eb-96b2-8b10e35d9b90.png" alt="aIml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DL ie Deep Learning&lt;/strong&gt; is again a subset of both and more complex. Its main aim is to mimic brain. It doesn't use labeled or data training but replicate the data processing and patterns creations like we do. It uses various multi neural network architecture.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5_2sJlCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122508557-02ed4100-cfb7-11eb-9563-04b5b073bfbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5_2sJlCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122508557-02ed4100-cfb7-11eb-9563-04b5b073bfbd.png" alt="DL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So What is &lt;strong&gt;Data science?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data Science is an approach/discipline/field of study that deals with manipulation and transforming of data. Like an equal size umbrella. whenever you are crunching, putting mathematics, trying to make a sense out of the data using probability/algebra anything, you are using data science. Its not new like AI/ML, it's been here since forever.Tada!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUXEjivf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122508831-7bec9880-cfb7-11eb-91a1-bd981cf0223c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUXEjivf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122508831-7bec9880-cfb7-11eb-91a1-bd981cf0223c.png" alt="DS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This might not be the most accurate and technical explanation. But it'll give a little sense of permanent understanding.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmP6FoAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media1.giphy.com/media/2ALDrK4ckHNLNCw45v/200w.webp%3Fcid%3Decf05e47mf1o0bvc1fi7j4dpz7u75wvi46gwupplkuzjzng3%26rid%3D200w.webp%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmP6FoAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media1.giphy.com/media/2ALDrK4ckHNLNCw45v/200w.webp%3Fcid%3Decf05e47mf1o0bvc1fi7j4dpz7u75wvi46gwupplkuzjzng3%26rid%3D200w.webp%26ct%3Dg" alt="btr"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>deeplearning</category>
      <category>ai</category>
    </item>
    <item>
      <title>What is latency? Let‚Äôs deep dive &amp; understand possible ways to optimise it.</title>
      <author>Pankaj Tanwar</author>
      <pubDate>Fri, 18 Jun 2021 07:00:49 +0000</pubDate>
      <link>https://dev.to/pankajtanwarbanna/what-is-latency-let-s-deep-dive-understand-possible-ways-to-optimise-it-4bh3</link>
      <guid>https://dev.to/pankajtanwarbanna/what-is-latency-let-s-deep-dive-understand-possible-ways-to-optimise-it-4bh3</guid>
      <description>&lt;p&gt;Hi üëã,&lt;/p&gt;

&lt;p&gt;Latency is yet another, a very important topic when we talk about backend engineering or networking. In this article, we will be discussing latency, it's importance and ways to optimise it in order to improve application performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-what-is-latency"&gt;What is latency?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-why-is-it-important"&gt;Why is it important?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-what-causes-latency"&gt;What causes latency?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-how-to-measure-latency"&gt;How to measure latency?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-how-to-optimize-the-latency"&gt;How to optimise the latency?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-latency"&gt;
  &lt;/a&gt;
  1. What is latency?
&lt;/h2&gt;

&lt;p&gt;Latency is the total time between a client‚Äôs action and the server‚Äôs response to that action. It‚Äôs simply a round trip time between browser &amp;amp; server. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rhL-cVv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623948399459/ZyY_dleHx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhL-cVv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623948399459/ZyY_dleHx.png" alt="Latency Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Network latency is measured in milliseconds (ms).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-why-is-it-important"&gt;
  &lt;/a&gt;
  2. Why is it important?
&lt;/h2&gt;

&lt;p&gt;Latency is directly related to the performance of the application. High latency means a slow network and no one likes to be on a slow website. At a large scale, latency plays a very critical role.&lt;/p&gt;

&lt;p&gt;Let‚Äôs understand with a simple example by emulating a GET request in a browser. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UywiF131--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623936262250/vj3kFHHB-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UywiF131--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623936262250/vj3kFHHB-.png" alt="Browser Network Timing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Blocking&lt;/strong&gt; : The time for which request was in queue. (A chrome browser can only make at max 6 HTTP request at a time to the server) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DNS Resolution&lt;/strong&gt; : Time taken in DNS lookup&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Connecting&lt;/strong&gt; : Time taken in a TCP handshake &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TLS Setup&lt;/strong&gt; : Time taken in establishing a secure TLS connection&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sending&lt;/strong&gt; : Time taken to send the HTTP request to the server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Waiting&lt;/strong&gt; : Time taken by the server to prepare the response&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Receiving&lt;/strong&gt; : Time taken to receive the response from server&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For the very first request, for the first 14KB data, latency is longer due to DNS lookup, a TCP handshake and the secure TLS negotiation. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-what-causes-latency"&gt;
  &lt;/a&gt;
  3. What causes latency?
&lt;/h2&gt;

&lt;p&gt;Latency plays a vital role in system performance. It depends on various factors -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Distance&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the principal causes of network latency is distance between client (who is making request) and the server (responding to the request). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;For example&lt;/em&gt; - Suppose, my website (&lt;a href="https://pankajtanwar.in/"&gt;https://pankajtanwar.in/&lt;/a&gt;) is hosted in a data center in Delhi. So, for a user accessing from Jaipur (~200KM from Delhi), it is likely to respond within 20-30ms but for a user accessing from New York (~11000 KM from Delhi), it might face a latency close to 70ms. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transmission Medium&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The type of transmission medium being used for data packet transmission also impacts the latency. Modern optic fiber is ~200 times faster than old copper cable-based networks.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multiple Routers&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We should not ignore the fact that routers play a very important role in latency. Routers take some time and analyse the headers of each data package passing thought, which adds to network latency. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Poorly optimized server&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Several factors on the backend server, such as slow database queries, low memory space, slow data processing and un-optimized code also impacts the latency. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-how-to-measure-latency"&gt;
  &lt;/a&gt;
  4. How to measure latency?
&lt;/h2&gt;

&lt;p&gt;There are several standard metrics to measure latency. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Time to First Byte (TTFB)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is one of the widely accepted matrices to measure latency. As the name itself explains, TTFB is the time (in milliseconds) for a browser to receive the first byte of response from the server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ping&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ping is the most common utility to measure latency. It sends a 32 bytes packet to the server &amp;amp; measures the time it took to reach the destination and come back with response to the client.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Round Trip Time (RTT)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It‚Äôs a pretty common and simple matrix. It is the total time taken by the data packet, travelling from source to the destination and back. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-how-to-optimize-the-latency"&gt;
  &lt;/a&gt;
  5. How to optimize the latency?
&lt;/h2&gt;

&lt;p&gt;In terms of application performance optimization, It is very important to reduce the causes of high latency. Here are major methods, which can help us reduce the latency.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CDN&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using CDN (Content Delivery Network) is a major step towards reducing the latency. CDN, caches content, serves it from the nearest data centre &amp;amp; provides an efficient path for data packets to travel on, which drastically reduces the round trip time and so latency. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP/2 is a highly efficient protocol which reduces the latency by enabling parallelised data transfers, response multiplexing, requests prioritisation, minimised protocol overhead by efficient compression of HTTP headers, reduced round trips and many more.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Client Side Caching&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Browsers can cache some of the resources which reduces the calls to the server and improves the latency. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server Side Optimisations&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Server side optimisations such as less disk I/O, caching, efficient algorithms, smart database layer &amp;amp; asynchronous programming can help in optimising the latency.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#6-conclusion"&gt;
  &lt;/a&gt;
  6. Conclusion
&lt;/h2&gt;

&lt;p&gt;Latency might seem a very simple concept but it plays a very crucial role when we build high scale systems like trading or gaming software. For such systems, even a double digit millisecond latency affects the performance.  &lt;/p&gt;

&lt;p&gt;In the next article, we will discuss how to system design a real time multiplayer game &lt;strong&gt;counter-strike&lt;/strong&gt; (CS-Go) which is highly sensitive to latency (or ‚Äòlag‚Äô).  &lt;/p&gt;

&lt;p&gt;Let‚Äôs connect &lt;a href="https://twitter.com/the2ndfloorguy"&gt;https://twitter.com/the2ndfloorguy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Originally published at&lt;/strong&gt; : &lt;a href="https://blog.pankajtanwar.in/what-is-latency-lets-deep-dive-and-understand-possible-ways-to-optimise-it"&gt;https://blog.pankajtanwar.in/what-is-latency-lets-deep-dive-and-understand-possible-ways-to-optimise-it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Understanding_latency"&gt;https://developer.mozilla.org/en-US/docs/Web/Performance/Understanding_latency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/en-gb/learning/performance/glossary/what-is-latency/"&gt;https://www.cloudflare.com/en-gb/learning/performance/glossary/what-is-latency/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Latency_(engineering)"&gt;https://en.wikipedia.org/wiki/Latency_(engineering)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>systems</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Need  Suggestion How to create This Types of FullCalendar</title>
      <author>pratikdungarani</author>
      <pubDate>Fri, 18 Jun 2021 06:50:00 +0000</pubDate>
      <link>https://dev.to/pratikdungarani/need-suggestion-how-to-create-this-types-of-fullcalendar-4699</link>
      <guid>https://dev.to/pratikdungarani/need-suggestion-how-to-create-this-types-of-fullcalendar-4699</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOk2RvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkvofsy280ko91ywqgaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOk2RvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkvofsy280ko91ywqgaz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d57H2DNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6zx74abnuui7g1ao7gk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d57H2DNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6zx74abnuui7g1ao7gk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if any one have suggest how to create this types of Fullclendar in ReactJs   &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Dark mode toggle animation using CSS !</title>
      <author>murtuza</author>
      <pubDate>Fri, 18 Jun 2021 06:36:03 +0000</pubDate>
      <link>https://dev.to/murtuzaalisurti/dark-mode-toggle-animation-using-css-27il</link>
      <guid>https://dev.to/murtuzaalisurti/dark-mode-toggle-animation-using-css-27il</guid>
      <description>&lt;p&gt;This tutorial will mainly focus on how to use transitions in CSS and make a toggle button for light as well as dark mode using little JavaScript. Let's dive into the world of transitions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;HTML Markup is pretty simple to understand. All you have to do is to make a container for the icons that we are going to use from &lt;a href="https://fontawesome.com/v5.15/icons/sun?style=solid"&gt;fontawesome&lt;/a&gt; and nest the respective &lt;code&gt;div&lt;/code&gt;s containing the icons inside the conatiner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
   &amp;lt;div class="sun sun-logo"&amp;gt;
      &amp;lt;i class="fas fa-sun"&amp;gt;&amp;lt;/i&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;div class="moon moon-logo"&amp;gt;
      &amp;lt;i class="fas fa-moon"&amp;gt;&amp;lt;/i&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
    position: relative;
}

.sun, .moon{
    font-size: 10rem;
    width: fit-content;
    height: fit-content;
}

.moon{
    position: absolute;
    inset: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set the container position to be &lt;code&gt;relative&lt;/code&gt; and the moon container position to be &lt;code&gt;absolute&lt;/code&gt; because we will position the moon icon in the same position as that of the sun icon.&lt;/p&gt;

&lt;p&gt;Here's the interesting part. Instead of using &lt;code&gt;top: 0;&lt;/code&gt; &lt;code&gt;bottom: 0;&lt;/code&gt; &lt;code&gt;left: 0;&lt;/code&gt; and &lt;code&gt;right: 0;&lt;/code&gt; you can use &lt;code&gt;inset: 0;&lt;/code&gt; to get the same result. It works!&lt;/p&gt;

&lt;p&gt;Also, set the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of the sun and the moon container to &lt;code&gt;fit-content&lt;/code&gt;. What this will do is, it will set the height and width of the container to match the height and width of the content inside it.&lt;/p&gt;

&lt;p&gt;And, in order to change the size of the fontawesome icon, just change the &lt;code&gt;font-size&lt;/code&gt; of the icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.moon-logo{
    opacity: 0;
    transform: translateY(20%) rotateZ(50deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will set up the initial position of the moon icon and its initial opacity when the webpage is rendered for the first time. Here, as the opacity of the moon icon is zero, only the sun icon will be visible to us.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;translateY(20%)&lt;/code&gt; declaration will offset the moon icon down along the Y-axis by 20% of the height of it's parent element.&lt;/p&gt;

&lt;p&gt;Similarly, the &lt;code&gt;rotateZ(50deg)&lt;/code&gt; declaration will rotate the moon icon along the Z-axis by 50 degrees.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.sun-logo{
    opacity: 1;
    transform: translateY(0) rotateZ(0deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the same way, we will set the initial properties for the sun icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.animate-sun{
    opacity: 0;
    transform: translateY(20%) rotateZ(100deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will set the final properties of the sun icon to which it will transition into.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.animate-moon{
    opacity: 1;
    transform: translateY(0%) rotateZ(0deg);
    color: aliceblue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we will set the final properties of the moon icon to which it will transition into. One thing to note here is the default color of the icons is &lt;code&gt;black&lt;/code&gt;, so if you want to change the color of the icon, then define its &lt;code&gt;color&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;But wait, we haven't used the &lt;code&gt;transition&lt;/code&gt; property yet, so how will it transition from one state to another? Yeah, that's the only thing left to do in CSS part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.moon-logo{
    opacity: 0;
    transform: translateY(20%) rotateZ(50deg);
    transition: all 1s ease-out;
}
.sun-logo{
    opacity: 1;
    transform: translateY(0) rotateZ(0deg);
    transition: all 1s ease-out;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.dark{
    background-color: black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use the above class to change the &lt;code&gt;background-color&lt;/code&gt; of the &lt;code&gt;body&lt;/code&gt; when the transition of the icons will happen.&lt;/p&gt;

&lt;p&gt;That's it. Your CSS part is ready.&lt;/p&gt;

&lt;p&gt;Now, let's move on to the JavaScript part. We will use JavaScript to &lt;code&gt;toggle&lt;/code&gt; the classes on &lt;code&gt;click&lt;/code&gt; event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector(".container").addEventListener("click", () =&amp;gt; {
    document.querySelector(".sun-logo").classList.toggle("animate-sun");
    document.querySelector(".moon-logo").classList.toggle("animate-moon");
    document.querySelector("body").classList.toggle("dark");
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have added an &lt;code&gt;eventListener&lt;/code&gt; to the container element so that when we click on the container, it will toggle the CSS classes for respective elements.&lt;br&gt;
Which means that, if the CSS class is not present in the &lt;code&gt;classList&lt;/code&gt; of an element, &lt;code&gt;toggle&lt;/code&gt; function will add the CSS class to the &lt;code&gt;classList&lt;/code&gt; of the respective element.&lt;/p&gt;

&lt;p&gt;And, if the CSS class is already present in the &lt;code&gt;classList&lt;/code&gt; of the element, it will remove it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;classList&lt;/code&gt; is actually a &lt;code&gt;DOMTokenList&lt;/code&gt; but we will not go into the specifics of it.&lt;/p&gt;

&lt;p&gt;This is it. Here's the final output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5WXA1I---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kku7sh96z4srbgbkynz3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5WXA1I---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kku7sh96z4srbgbkynz3.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
