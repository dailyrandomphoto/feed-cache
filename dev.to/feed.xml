<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to make a simple Brainf**k interpreter using ParseJS. [CW: Light 'profanity'.]</title>
      <author>Calin Baenen</author>
      <pubDate>Thu, 23 Dec 2021 14:19:26 +0000</pubDate>
      <link>https://dev.to/baenencalin/how-to-make-a-simple-brainfk-interpreter-using-parsejs-cw-light-profanity-45ea</link>
      <guid>https://dev.to/baenencalin/how-to-make-a-simple-brainfk-interpreter-using-parsejs-cw-light-profanity-45ea</guid>
      <description>&lt;p&gt;Hello. I'm Calin Baenen, and I'm going to teach you how to use the library I made, ParseJS, effectively for the reason it was made.&lt;/p&gt;

&lt;p&gt;To follow along, I expect you already have basic knowledge of general programming, and at the very least; entry-level knowledge about JavaScript.&lt;br&gt;
Knowing HTML (outside of the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;) tag isn't required, though, that knowledge could help your interpreter look prettier.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-brainfuck"&gt;
  &lt;/a&gt;
  What is Brainfuck?
&lt;/h2&gt;

&lt;p&gt;[If you know what BF is, you can skip this section.]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Brainfuck"&gt;Brainfuck&lt;/a&gt; is an esoteric programming language (esolang*) created by Urban MÃ¼ller designed to be minimalistic.&lt;/p&gt;

&lt;p&gt;Here's a brief summary by &lt;a href="https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA"&gt;Fireship&lt;/a&gt; to get you up to speed:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hdHjjBS4cs8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started.
&lt;/h2&gt;

&lt;p&gt;Okay. Now that we know what Brainfuck is, we can actually get to implementing it.&lt;/p&gt;

&lt;p&gt;But, before we do any actual work on the BF interpreter, we must first set up a simple HTML page, so we actually have a way to interface with our project.&lt;br&gt;
So, create an HTML file (&lt;code&gt;.html&lt;/code&gt;) and call it whatever, and write the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Input Brainfuck Code:&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width:35vw; height:25vh;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;RUN!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Output:&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;disabled=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
    &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width:35vw; height:25vh;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-parsejs"&gt;
  &lt;/a&gt;
  Adding ParseJS.
&lt;/h2&gt;

&lt;p&gt;So, up to this point we've just created two boxes, one for input and another for output.&lt;br&gt;
Now we actually need ParseJS. - There's two main recommended ways of integrating PJS into your project: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Downloading the &lt;code&gt;src&lt;/code&gt; folder from &lt;a href="https://github.com/CalinZBaenen/ParseJS"&gt;ParseJS' GitHub repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Using the Content Delivery Network (CDN) URL to be served the file, without keeping ParseJS on your drive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(The CDN URL is: &lt;a href="https://cdn.jsdelivr.net/gh/CalinZBaenen/ParseJS@main/src/parse_string.js"&gt;https://cdn.jsdelivr.net/gh/CalinZBaenen/ParseJS@main/src/parse_string.js&lt;/a&gt;.)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-the-interpreter"&gt;
  &lt;/a&gt;
  Making the interpreter.
&lt;/h2&gt;

&lt;p&gt;Now, if you've visited the repo &lt;strong&gt;and&lt;/strong&gt; looked at the ReadMe, you'll have a rough idea of how to use this library.&lt;br&gt;
If you haven't, you can make rough assumptions about how ParseJS works using context clues. - But to be nice, I'll leave in some helpful comments.&lt;/p&gt;

&lt;p&gt;So, now that we have (know how to install*) PJS, we can now include it by prepending the following (adding the following to the beginning of the HTML*):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./path_to/parsejs_install/parse_string.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-the-interpreter"&gt;
  &lt;/a&gt;
  Making the interpreter.
&lt;/h2&gt;

&lt;p&gt;Now it's time to make the actual interpreter.&lt;br&gt;
Make a new JavaScript file (&lt;code&gt;.js&lt;/code&gt;) called &lt;code&gt;bf_interpreter.js&lt;/code&gt; in the same directory as your &lt;code&gt;project_name.html&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now, here's the code.&lt;br&gt;
Things will be explained in comments within the code, so my "DEV voice" will be silent until the code ends:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a list of keywords for `parse_string`&lt;/span&gt;
&lt;span class="c1"&gt;// to look for.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;// `Symbol.for(desc)` is similar to&lt;/span&gt;
    &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;// `Symbol(desc)`, except symbols&lt;/span&gt;
    &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;// generated by the `for` method&lt;/span&gt;
    &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;// aren't unique.&lt;/span&gt;
    &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;// I.e. Symbol('x') != Symbol('x'), but&lt;/span&gt;
    &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;// Symbol.for('y') == Symbol.for('y').&lt;/span&gt;
    &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Gets the input and output `textarea`s, and the run button.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;r&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;interpret_bf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Clear the output textarea.&lt;/span&gt;
    &lt;span class="c1"&gt;// Extracts the keywords we defined above.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  &lt;span class="c1"&gt;// The array of bytes.&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// Pointer.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tok&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Ensure the pointer is always at a valid position.&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;   &lt;span class="c1"&gt;// Print.&lt;/span&gt;
                &lt;span class="c1"&gt;// Converts byte to character.&lt;/span&gt;
                &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;   &lt;span class="c1"&gt;// Get char input.&lt;/span&gt;
                &lt;span class="c1"&gt;// Gets a string from `prompt`,&lt;/span&gt;
                &lt;span class="c1"&gt;// and makes sure the data is a valid&lt;/span&gt;
                &lt;span class="c1"&gt;// string.&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;
                    &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a character.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;   &lt;span class="c1"&gt;// Increment current byte.&lt;/span&gt;
                &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Byte overflow.&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;   &lt;span class="c1"&gt;// Decrement current byte.&lt;/span&gt;
                &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Byte underflow.&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;   &lt;span class="c1"&gt;// Move pointer right.&lt;/span&gt;
                &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;   &lt;span class="c1"&gt;// Move pointer left.&lt;/span&gt;
                &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interpret_bf&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-final-step-"&gt;
  &lt;/a&gt;
  The final step. . .
&lt;/h2&gt;

&lt;p&gt;Now. - All we have to do is get this JS file into our HTML page and the job is (mostly) finished!&lt;/p&gt;

&lt;p&gt;So, all we have to do is append the following to the end of our HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./bf_interpreter.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And over-all, that should leave you with an HTML document that looks roughly like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- The `src` here could be the CDN URL. --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./parse_string.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Input Brainfuck Code:&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width:35vw; height:25vh;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Output:&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;disabled=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
    &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width:35vw; height:25vh;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./bf_interpreter.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you load the page in your web-browser of choice, the page should look similar to the following screenshot:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9C-iP1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o4v3g3s9i97ra0lamam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9C-iP1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o4v3g3s9i97ra0lamam.png" alt="Screenshot of the HTML project." width="760" height="1080"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a test program, try doing &lt;code&gt;,.&lt;/code&gt;. - It takes a character from the user then immediately prints it.&lt;br&gt;
So if the interpreter was made correctly, running this and entering &lt;code&gt;E&lt;/code&gt; should make &lt;code&gt;E&lt;/code&gt; display in the output.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-wait-arent-you-forgetting-something"&gt;
  &lt;/a&gt;
  But wait... aren't you forgetting something?
&lt;/h2&gt;

&lt;p&gt;Yes. - Yes I am.&lt;br&gt;
I purposefully didn't add &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; (loop operators) because: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I was too lazy.&lt;/li&gt;
&lt;li&gt;It's a challenge to implement loops without making the code way less beginner friendly.&lt;/li&gt;
&lt;li&gt;It gives you a challenge that you can try for yourself!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion.
&lt;/h2&gt;

&lt;p&gt;Well, this wraps up this tutorial.&lt;br&gt;
Hopefully this taught you about, and inspired you to use ParseJS!&lt;/p&gt;

&lt;p&gt;As always...&lt;br&gt;
&lt;b&gt;&lt;h1&gt;&lt;center&gt;Thanks for reading!&lt;br&gt;Cheers!&lt;/center&gt;&lt;/h1&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>What is Amazon Integration and How to Develop It?</title>
      <author>Natalia API2Cart</author>
      <pubDate>Thu, 23 Dec 2021 14:17:21 +0000</pubDate>
      <link>https://dev.to/natalia27070051/what-is-amazon-integration-and-how-to-develop-it-2153</link>
      <guid>https://dev.to/natalia27070051/what-is-amazon-integration-and-how-to-develop-it-2153</guid>
      <description>&lt;p&gt;Today, any SaaS provider in the eCommerce industry that wants to get ahead of the competition and make the most out of the opportunities available on the market should consider developing a strong Amazon integration. Having such an integration enables you to provide your service to Amazon sellers, so they can ultimately automate their processes and boost their sales with its help.&lt;/p&gt;

&lt;p&gt;Since e-store business owners on Amazon are always searching for new ways to optimize and improve their operations, the ability to work with Amazon data can be highly beneficial for your software. As a result, working with &lt;a href="https://www.amazon.com/"&gt;Amazon&lt;/a&gt; sellers is a huge opportunity you shouldn't miss in 2022.&lt;/p&gt;

&lt;p&gt;Below, weâll dive deeper into this concept of Amazon integration, weâll highlight the challenges associated with this process, and weâll show you the easiest way to connect your software to this huge marketplace and gain an unfair advantage over your competitors by reaching more clients, faster than ever before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-amazon-integration-mean"&gt;
  &lt;/a&gt;
  What Does Amazon Integration Mean?
&lt;/h2&gt;

&lt;p&gt;Amazon integration means that youâre developing a connection between your system and &lt;a href="https://api2cart.com/api-technology/amazon-api-get-orders/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonintegrationn.kov"&gt;Amazon API&lt;/a&gt;. The goal of this is to gain access to Amazon data so that youâll be able to work with products, orders, descriptions, categories, shipping info, taxes, and numerous other data.&lt;/p&gt;

&lt;p&gt;Basically, an integration gives you unrestricted access to your clientsâ data, which you can use to provide better services to them. In turn, they can use your services to grow their businesses and offer their buyers a higher level of satisfaction. As you can notice, this is a win-win-win situation for your business, e-store sellers, and Amazon shoppers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-integration-with-amazon"&gt;
  &lt;/a&gt;
  What are the Benefits of Integration with Amazon?
&lt;/h2&gt;

&lt;p&gt;Amazon is undoubtedly the largest eCommerce marketplace on the globe. It has done a marvelous job connecting sellers with buyers, transforming its platform into the most important digital marketplace today. According to the &lt;a href="https://www.businessofapps.com/data/amazon-statistics/"&gt;latest stats&lt;/a&gt;, Amazon has over 200 million Prime subscribers. They generated a whopping $386 billion back in 2020, which is simply outstanding.&lt;/p&gt;

&lt;p&gt;Integrating your software with Amazon can offer you some incredible benefits. First off, such an integration, once completed, will give you unrestricted access to the data related to Amazon categories, products, customers, orders, shipments, stocks, and baskets. You can certainly leverage this data belonging to over 16 million sellers on Amazon to expand your functionality and provide better services to your target audience.&lt;/p&gt;

&lt;p&gt;Another benefit you should expect by integrating your solution with Amazon is connected to your growth potential. By offering your service to such a significant market share, youâll be able to expand in numerous markets and reach millions of potential customers from over 250 countries worldwide. &lt;/p&gt;

&lt;p&gt;By offering better services, youâll be able to stay ahead of the market and overtake your competition with ease. This means a higher profit margin for your business, more customers in the long run, and a better position in your niche.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-integration-difficulties-should-you-expect"&gt;
  &lt;/a&gt;
  What Integration Difficulties Should You Expect?
&lt;/h2&gt;

&lt;p&gt;Developing Amazon integration is definitely not an easy process. Trying to integrate your solution with Amazon without a third-party tool is a tedious task. Youâll have to face a lot of challenges during this process. Some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The time consumption is exceptionally high: this process takes time and requires first to find a developer or team of developers highly skilled in integrating with Amazon.&lt;/li&gt;
&lt;li&gt;Amazon API is quite old and requires specific knowledge. Basically, you need to find people who know how to get around all the pitfalls of using Amazon API and create a stable integration.&lt;/li&gt;
&lt;li&gt;The API Docs are pretty complex and have a lot of bugs or mistakes. Your developer might have to overcome unexpected obstacles that Amazon likes to put in their way.&lt;/li&gt;
&lt;li&gt;Amazon support team is not as responsive as one might like, so you might have to wait up to 48 hours until you get a response to your queries. This means additional time lost and a more stressful integration process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To develop a flawless Amazon integration, you might need to think about the costs in the long run. The average developer salary a year is $100k, and you might need one to update the connection and fix bugs constantly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-easily-set-up-amazon-integration-in-2022"&gt;
  &lt;/a&gt;
  How to Easily Set Up Amazon Integration in 2022?
&lt;/h2&gt;

&lt;p&gt;Fortunately, you donât have to go through all of these integration pitfalls and waste your precious time and money. An alternative to a manual integration is the usage of &lt;a href="https://api2cart.com/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonintegrationn.kov"&gt;API2Cart&lt;/a&gt;, a modern third-party integration service that allows you to &lt;a href="https://api2cart.com/supported-platforms/amazon-api-integration/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonintegrationn.kov"&gt;connect to Amazon&lt;/a&gt; and 40+ other platforms seamlessly.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OLWqydiYciA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;By simply connecting to API2Cart, youâll gain access to its unified API already connected to Amazon, Magento, Shopify, X-Cart, eBay, and dozens of other marketplaces and shopping platforms. API2Cart also offers 100+ API methods of managing data, so you can efficiently work with Amazon data connected with products, orders, prices, etc.&lt;/p&gt;

&lt;p&gt;API2Cart has flexible pricing options and a full 30-day free trial, so you can test this service and see how it fits your needs. &lt;a href="https://app.api2cart.com/#register?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonintegrationn.kov"&gt;Register for free&lt;/a&gt; and start leveraging an Amazon integration for your business in 2022.&lt;/p&gt;

</description>
      <category>saas</category>
      <category>webdev</category>
      <category>programming</category>
      <category>amazon</category>
    </item>
    <item>
      <title>Can we make Pong in less than a 100 lines of Javascript?</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 23 Dec 2021 14:15:21 +0000</pubDate>
      <link>https://dev.to/codesphere/can-we-make-pong-in-less-than-a-100-lines-of-javascript-3ah1</link>
      <guid>https://dev.to/codesphere/can-we-make-pong-in-less-than-a-100-lines-of-javascript-3ah1</guid>
      <description>&lt;p&gt;The original Pong took Atari over 3 months to complete back in 1972. The classic arcade game was one of the first commercially successful games that paved the way for the game development industry.&lt;/p&gt;

&lt;p&gt;Additionally, itâs simplicity makes it one of the first projects that any programmer takes on.&lt;/p&gt;

&lt;p&gt;As a showcase of how much easier programming has become in the past 50 years, weâre going to be attempting to make Pong in less than 100 lines of Javascript!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OF0gOaTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dledj85t23ung5sjrb2z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OF0gOaTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dledj85t23ung5sjrb2z.gif" alt="Image description" width="502" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can play the finished project deployed on Codesphere &lt;a href="https://25773-3000.codesphere.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Letâs get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#our-different-components"&gt;
  &lt;/a&gt;
  Our Different Components
&lt;/h3&gt;

&lt;p&gt;Thereâs going to be four parts that we need to build for our pong game:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Graphics&lt;/li&gt;
&lt;li&gt;Paddle Movement&lt;/li&gt;
&lt;li&gt;Bouncing Ball&lt;/li&gt;
&lt;li&gt;Score Keeping&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#graphics"&gt;
  &lt;/a&gt;
  Graphics
&lt;/h3&gt;

&lt;p&gt;Iâm going to cheat a little bit and use a &lt;a href="https://p5js.org/"&gt;graphics library&lt;/a&gt; to save us some menial work so we can strictly focus on the game logic.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#paddle-movement"&gt;
  &lt;/a&gt;
  Paddle Movement
&lt;/h3&gt;

&lt;p&gt;Next up, letâs create two paddles and draw them onto the screen. Additionally, letâs allow the player to move them(Iâll use the built in keyDown function from P5.JS)&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#bouncing-ball"&gt;
  &lt;/a&gt;
  Bouncing Ball
&lt;/h3&gt;

&lt;p&gt;Now letâs add in a ball. When the ball hits the top or bottom border, we want itâs y velocity to switch directions.&lt;/p&gt;

&lt;p&gt;When the ball hits one of the paddles, we want itâs x velocity to switch direction and increase slightly(To hit harder). Additionally, to make the game more fun weâll randomize the y velocity so it is harder to anticipate the ball.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#score-keeping"&gt;
  &lt;/a&gt;
  Score Keeping
&lt;/h3&gt;

&lt;p&gt;Finally, letâs start tracking the score. When the ball hits the left or right border weâll change the score and reset the position of the ball. Weâll then display the score at the top of the screen!&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And there you have it! Weâve created Pong in less than 100 lines of code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--17Bi58Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pv1mqqruoa9q983u9dwq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--17Bi58Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pv1mqqruoa9q983u9dwq.gif" alt="Image description" width="502" height="510"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If youâre looking to show off a game you make, the easiest place to deploy it is &lt;a href="https://link.codesphere.com/HE"&gt;Codesphere&lt;/a&gt;. Codesphere is the only cloud provider that makes cloud deployment as easy as local deployment!&lt;/p&gt;

&lt;p&gt;Happy Coding and Merry Christmas!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>When did you know you wanted to be a software developer?</title>
      <author>Sherry</author>
      <pubDate>Thu, 23 Dec 2021 14:07:02 +0000</pubDate>
      <link>https://dev.to/sherrydays/when-did-you-know-you-wanted-to-be-a-software-developer-i87</link>
      <guid>https://dev.to/sherrydays/when-did-you-know-you-wanted-to-be-a-software-developer-i87</guid>
      <description></description>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>How AI Has Changed Over the Years: Hear from Denis Rothman, AI Expert</title>
      <author>Bala Priya C</author>
      <pubDate>Thu, 23 Dec 2021 14:03:37 +0000</pubDate>
      <link>https://dev.to/balapriya/how-ai-has-changed-over-the-years-hear-from-denis-rothman-ai-expert-2eke</link>
      <guid>https://dev.to/balapriya/how-ai-has-changed-over-the-years-hear-from-denis-rothman-ai-expert-2eke</guid>
      <description>&lt;p&gt;Earlier this year, I had the opportunity to interview &lt;a href="https://fr.linkedin.com/in/denis-rothman-0b034043/fr"&gt;Denis Rothman&lt;/a&gt;, an AI expert and a best-selling author at the AI Time Journal.&lt;/p&gt;

&lt;p&gt;Denis Rothman is the author of several popular books such as Transformers in Natural Language Processing, and Hands-On Explainable AI. &lt;/p&gt;

&lt;p&gt;In this interview, Denis Rothman shares his academic background and research interests. He also shares valuable insights stemming from his decades of experience in the field of AI, including: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#academic-background-and-specialization"&gt;Academic Background and Specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changes-in-the-ai-landscape-over-the-years"&gt;Changes in the AI Landscape over the years&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advances-in-ai-research"&gt;Advances in AI Research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#journey-to-becoming-a-bestselling-author"&gt;Journey to Becoming a Best-Selling Author&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#importance-of-writing-in-the-learning-process"&gt;Importance of Writing in the Learning Process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#academic-background-and-specialization"&gt;
  &lt;/a&gt;
  Academic Background and Specialization
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: Could you tell us about your academic background and specialization?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: In the 1970s and 1980s, I studied Linguistics, Civilizations, and Computer Science at Sorbonne University and Paris-Diderot University. When I graduated, I taught Computer Science at PathÃ©on Sorbonne. I started my freelance Linguistics and AI activity while I was a student. During that period, I registered a âword2vectorâ patent that gained university (post-graduate degree), media, and corporate recognition. I obtained public funding to continue my research. In 1986, I registered what is now a âchatbotâ patent that led me directly to LVMH (MoÃ«t et Chandon division) and Airbus (formerly Aerospatiale division). &lt;/p&gt;

&lt;p&gt;My professors were cross-disciplinary and encouraged exploration. I traveled to many countries to understand how civilizations were built, how languages were structured.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I became familiar with Supply Chain Management (SCM) which 
led directly to AI SCM projects. I rapidly specialized 
in Artificial Intelligence through a passion for algorithms.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#changes-in-the-ai-landscape-over-the-years"&gt;
  &lt;/a&gt;
  Changes in the AI Landscape over the years
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: As an expert in the field of AI, could you share your insights on how the AI landscape has changed over the years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: In the 1980s, we worked on personal computers or small mainframes (servers). We did not have the Internet, so we had to physically go around the world to meet people and pick up new ideas. This explains why I traveled so much during my college and early freelance years.&lt;/p&gt;

&lt;p&gt;In the 1980s and 1990s, you had to have a solid reputation for the word to go around to deliver AI optimizing algorithms for Supply Chain Management successfully. I focused on optimizing, so I made it fine during those years.&lt;/p&gt;

&lt;p&gt;Starting in 2006, cloud servers became available, and the Internet reached a good level of maturity. It changed everything! No more traveling so much, no more installations. We could sell SaaS (Software as a Service). The users would have to connect with their browsers, test for free then pay a monthly license! On top of that, we could access good papers and documentation from around the world. We could also share our ideas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;When artificial intelligence became a mainstream trend 
around 2015, we were ready, had the solution and the 
experience. So, a fantastic journey began and is still continuing! 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#advances-in-ai-research"&gt;
  &lt;/a&gt;
  Advances in AI Research
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: What, according to you, are the most significant advances in AI research in the recent years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: The following three trends are mind-blowing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The arrival of powerful Artificial Intelligence models trained with supercomputers such as OpenAIâs GPT-3 engines. These models are industrialized using structured transformer models, for example. The texts they generate cannot be distinguished from human expression.&lt;/li&gt;
&lt;li&gt;The embedding of Artificial Intelligence everywhere, from our smartphones to our social media activity. Google Search has improved tremendously provided snippets of the search answer without clicking on a link, for example. Google Translate is progressing daily. Everything in AI is evolving very fast!&lt;/li&gt;
&lt;li&gt;Industry 4.0 Artificial Intelligence, which is used to connect everything to everything, everywhere. So from China to the US, from Europe to Africa, the world is being connected physically and digitally from the Americas to everywhere!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: What do you think are the challenges in adopting AI at scale in the industry?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: There are two key factors beyond the classical project management constraints encountered during any project:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-mindset"&gt;
  &lt;/a&gt;
  1. Mindset
&lt;/h3&gt;

&lt;p&gt;It is challenging to explain that Artificial Intelligence is only a tool. Itâs not organic. It is not a living organism.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AI is only math. 
You can either be the tool of AI 
or use it as a tool. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also tough to explain that Industry 4.0 is generated millions of micro-decisions in the supply chain flows around the world. Without AI, there would not be enough humans to face these challenges without slowing the world down slower food delivery, vaccine production, clothing, and everything we need daily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-crossdisciplinary-knowledge"&gt;
  &lt;/a&gt;
  2. Cross-disciplinary knowledge
&lt;/h3&gt;

&lt;p&gt;To be able to fully understand the requirements of a project, cross-disciplinary knowledge is mandatory. For example, Linguistics for NLP or notions of law for applications of AI in governance and other legal applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: According to you, what are the areas in AI that offer some of the most exciting research opportunities?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: I love Artificial Intelligence because I love algorithms. The most interesting aspect of any AI project is creating algorithms. Programming is another exercise. Programming is translating an algorithm into code. Programming comes with constraints, bugs, machine power, and criticism from others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;But when you are designing an algorithm in the middle of a quiet
night, itâs like communicating with the structure of the universe. 

It is like writing a music score, drawing, or painting. 

You are creating something out of nothing but yourself!

Computer Vision, Natural Language Processing(NLP), and all 
of the AI-ML-DL algorithms are fascinating to design! 
Itâs like playing different music scores.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#journey-to-becoming-a-bestselling-author"&gt;
  &lt;/a&gt;
  Journey to Becoming a Best-Selling Author
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: As an author of several books on popular topics in AI, such as Transformers, Explainable AI, could you please tell us about your journey as a technical author?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: I love Artificial Intelligence, people, and sharing. I began writing about ideas, logic, and reasoning when I was in high school. Sharing has always been exhilarating for me. When I share an idea, the person will react and ask difficult questions. In turn, this forces me to think harder and explain better. After my ideas are structured, we both see the light together!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sharing is enjoying togetherness in the society. 
You do something, you analyze the reaction, and you adapt.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If you do not share, you do not learn. &lt;/li&gt;
&lt;li&gt;If you do not share, you cannot understand what you are doing because you need a third party to tell you what they see in your ideas beyond your confined ecosphere.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wrote a lot of documentation for corporations and some studies. However, in 2017, Tushar Gupta, a visionary working at Packt Publishing, encouraged me to share my ideas, knowledge, and experience through books. Packt has a unique ability to create publishing teams. You are never alone. So you can share your work and get a lot of feedback before anything is published. That is fantastic!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-writing-in-the-learning-process"&gt;
  &lt;/a&gt;
  Importance of Writing in the Learning Process
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: What is the importance of writing in the process of learning AI? I strongly believe that writing reinforces understanding and the learning process. Whatâs your opinion on writing tech tutorials when learning a particular concept?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: There are basically  4 approaches to language:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-understanding-through-sound"&gt;
  &lt;/a&gt;
  1. Understanding through sound
&lt;/h3&gt;

&lt;p&gt;The words cross your mind at full speed. Itâs difficult not to miss a lot of content. You can get information through prosody (intonations and tone of voice, for example). However, in the world of technology, content matters more than intonation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-speaking-through-sound"&gt;
  &lt;/a&gt;
  2. Speaking through sound
&lt;/h3&gt;

&lt;p&gt;When you speak, you are compelled to be clear, or nobody will understand you. However, you donât have to worry about punctuation, the length of sentences. Also, unless you are reading a text, you are going at full speed without controlling the content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-reading"&gt;
  &lt;/a&gt;
  3. Reading
&lt;/h3&gt;

&lt;p&gt;Reading is no doubt deeper than listening. You can capture quite a lot of information and think about it for as long as you wish. You are picking up a lot of ideas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-writing"&gt;
  &lt;/a&gt;
  4. Writing
&lt;/h3&gt;

&lt;p&gt;Writing is the ultimate form of communication. If you did your research correctly, itâs the sum of the three previous dimensions! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, you have listened to others. &lt;/li&gt;
&lt;li&gt;Second, you have made an effort to explain yourself through speech. &lt;/li&gt;
&lt;li&gt;Third, you have picked up a lot of information by reading others. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, you can compile everything you feel and know into the content you can share! You have prepared quite a work of art for your readers. You are now eager to know what they think and start a communication process at another level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: What are some of the challenges associated with using AI in Healthcare?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: Privacy in Healthcare worries me. We are not machines, robots, or things. We are human beings! We deserve respect and the ability to keep our dignity. We are not lab rats.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;That being said, medical progress relies on statistics! 
Using AI to find patterns is undoubtedly necessary. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think that government-led ethical committees should decide what is good or bad for us, not private sector investors. That is about all I can say as a citizen because Iâm not a Healthcare expert! ð&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ðï¸Bala: If you were to suggest a few books that can help AI enthusiasts to gain strong foundational skills, what would they be?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denis Rothman&lt;/strong&gt;: The tempting answer is âmineâ. ð&lt;/p&gt;

&lt;p&gt;Iâm going to disappoint you because I do not believe in flashy knowledge. Artificial Intelligence is there to help machines make decisions for us about our culture.  To design effective AI, we need to be educated.&lt;/p&gt;

&lt;p&gt;First, I would recommend learning to review Mathematics in detail: Arithmetic, General Algebra, Calculus, Geometry, Trigonometry. I would then go in this order among many others: Plato, Aristotle, Descartes, Pascal, Kant, Nietsche, Levi-Strauss, Boltzmann, PoincarÃ©, Markov, Lyapunov, Einstein, Shannon, and Turing. Then, the army of AI authors, yours truly included!&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>ai</category>
      <category>career</category>
    </item>
    <item>
      <title>How many programming languages do you know?</title>
      <author>Ben Halpern</author>
      <pubDate>Thu, 23 Dec 2021 14:00:41 +0000</pubDate>
      <link>https://dev.to/ben/how-many-programming-languages-do-you-know-1in1</link>
      <guid>https://dev.to/ben/how-many-programming-languages-do-you-know-1in1</guid>
      <description>&lt;p&gt;Feel free to offer a personal definition of "know" ð&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>languages</category>
      <category>career</category>
    </item>
    <item>
      <title>How I have made an online game in production in less than 1 year</title>
      <author>Ayrton</author>
      <pubDate>Thu, 23 Dec 2021 13:44:34 +0000</pubDate>
      <link>https://dev.to/simerca/how-i-have-made-an-online-game-in-production-in-less-than-1-year-3ga6</link>
      <guid>https://dev.to/simerca/how-i-have-made-an-online-game-in-production-in-less-than-1-year-3ga6</guid>
      <description>&lt;p&gt;Hi ! My name is Ayrton, Iâm french developper from Bordeaux.&lt;/p&gt;

&lt;p&gt;I made games since I have 6 years old, and after lot of try of making game, this year I will wanted to make an online game.&lt;/p&gt;

&lt;p&gt;Today I want to show at all person who said me, âItâs impossible to make online game alone, blablablablaâ¦.)â Itâs possible and I show you how.&lt;/p&gt;

&lt;p&gt;My first challenge Itâs find an easy  concept to develop, I will take a look on other success projects. After this, I have choose an online Arena game like Brawl Star but 1 vs 1 and with another camera view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2qF2jJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AmWclEYN0sjjqAhZ0IQYI5A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2qF2jJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AmWclEYN0sjjqAhZ0IQYI5A.png" alt="" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mvp-concept"&gt;
  &lt;/a&gt;
  MVP Concept
&lt;/h1&gt;

&lt;p&gt;To my job, I always use this concept, the Minimum Viable Product, to determine a plan to complete the game, and I etablish a list of functionality essential for the gameplay, but just the minimum.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---iSOx590--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AlLhmCq1j2wBMxC3uBLCx8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---iSOx590--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AlLhmCq1j2wBMxC3uBLCx8g.png" alt="" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Engine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have use Unity for made the game with C# language, for simple reason;&lt;/p&gt;

&lt;p&gt;Fast, easy to learn, Documented, Cross-Plateform, Gameplay requirement satisfied (3D, Online, Controller Support, Mobile etcâ¦).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unity.com/"&gt;Link for Unity&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3D Tool&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Blender is a free and open source 3D modeling tool. Iâm not an 3D artist, and he have lotâs of tutorial for beginner.&lt;/p&gt;

&lt;p&gt;At start, Itâs very hard to do your first item (a table for me :) ) And after lotâs of hour to try, I have made my first character.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.blender.org/"&gt;Link for Blender&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UI Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XD + Photoshop&lt;/p&gt;

&lt;p&gt;Why Adobe XD? I think itâs more simple for made rapid graphics interfaces than Photoshop. Easy for use and easy export.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.adobe.com/fr/products/xd.html"&gt;Link for Adobe XD&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-talk-about-talents"&gt;
  &lt;/a&gt;
  Letâs talk about talents.
&lt;/h1&gt;

&lt;p&gt;I have lotâs of talents (no !) but I cant draw, painting, or make music. Iâm not an artist, Iâm a worker, give me task and I do it.&lt;/p&gt;

&lt;p&gt;So when I start to need graphics and sound design, my look take direction to Aurore and Domi, my wife and a friend. Aurore itâs a great artist, she made paint, and Domi has a talent on sound design and itâs a great composer. I demand to they, to make 3 characters and 3 musics . I have proposed to payed they, but they refused and 3 weeks after, all are shipped. Very great person. Love you.&lt;/p&gt;

&lt;p&gt;At same time, I have started to code the netcode, I have use an Unity Package who help me to integrate online system inside our game. Itâs called &lt;a href="https://mirror-networking.com/"&gt;Mirror&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;1 month later, the netcode works.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#network-infrastructure"&gt;
  &lt;/a&gt;
  Network Infrastructure
&lt;/h1&gt;

&lt;p&gt;At my job, Iâm french developper full stack, so, I know how a server work, and how to manage it and monitoring it for the production. But, habitualy itâs web service like API, not Game server engine.&lt;/p&gt;

&lt;p&gt;Docker save me. I have use Docker for his capability to duplicate instances. 1 Docker instance = 1 party for 2 player in our game . So if I have 10 users want to play simultanously. I will mount 5 instances, 1 instances take ~1cpu and ~250mb memory when a game is playing. So the duplication itâs essential inside our deployment plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvM2xY5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ABtbVf47T3dvyNF99avxlxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvM2xY5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ABtbVf47T3dvyNF99avxlxw.png" alt="" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have use Digital Ocean and Scaleway to test our server in development mode on 3 countrys. And itâs look great.&lt;/p&gt;

&lt;p&gt;I have made 2 scripts for easy launch new servers and attach they IP automaticly in my APi system who attribute to server an unique ID and know who itâs started or no.&lt;/p&gt;

&lt;p&gt;I have use Grafana and Prometheus to monitoring and set alert when problem appear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://prometheus.io/docs/visualization/grafana/"&gt;Link to Grafana/Prometheus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gnZ2GwdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Ad3_BsCB3eEdh3JPnEHCXSA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gnZ2GwdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Ad3_BsCB3eEdh3JPnEHCXSA.png" alt="" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#integration"&gt;
  &lt;/a&gt;
  Integration
&lt;/h1&gt;

&lt;p&gt;Itâs the most difficult thing I think, because when you test your game with Cube and Ball you donât need some animations and game design.&lt;/p&gt;

&lt;p&gt;But when I started to integrate character, the difficult for me was to animate it and take it live.&lt;/p&gt;

&lt;p&gt;I have started by 4 animations / characters, Idle, Walk, Attack, Dead.&lt;/p&gt;

&lt;p&gt;All of character has nearly the same animations, Itâs more easy for the script controllers.&lt;/p&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;p&gt;I have started to integrate environnement and design of arenas too. It take me about 3 month to achieve all of this ! &lt;strong&gt;Very difficult â¦&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And like itâs not hard enough, I was do the trick for Online System, so other player can see, other animations. Hell.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zj-thFuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AQlJoTwOqGGAAfY-T1WGO2A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zj-thFuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AQlJoTwOqGGAAfY-T1WGO2A.png" alt="" width="880" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From / To&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#write-blogs-posts"&gt;
  &lt;/a&gt;
  Write blogs posts
&lt;/h1&gt;

&lt;p&gt;Write blogs posts, help me to achieve my work, Itâs a good thing for stay motivated and share my experience. See the progress itâs a great thing for considerate the work accomplish;&lt;/p&gt;

&lt;p&gt;you can see all the blog posts here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://simercastudio.com"&gt;Simerca Studio&lt;br&gt;--------------&lt;br&gt;### Editeur de jeux vidÃ©os&lt;br&gt;simercastudio.com&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lots-of-tests-after"&gt;
  &lt;/a&gt;
  Lotâs of testâs after.
&lt;/h1&gt;

&lt;p&gt;After I have tested the game with friend, family, discord members, I start to publish It to App Store and Play Store.&lt;/p&gt;

&lt;p&gt;Because in my job I have already post project to App Store and Play Store, I know the requirement to do this.&lt;/p&gt;

&lt;p&gt;And after 2 try, It will be posted .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUWAmQok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AFQWT3icGSUE6OJ95EciNKg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUWAmQok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AFQWT3icGSUE6OJ95EciNKg.png" alt="" width="880" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fantasy Arena itâs available on iOS and Android on production in less than 1 year.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More informations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://simercastudio.com"&gt;Simerca Studio&lt;br&gt;--------------&lt;br&gt;### Editeur de jeux vidÃ©os&lt;br&gt;simercastudio.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>unity3d</category>
      <category>csharp</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is Bcrypt and Why?</title>
      <author>jyeett</author>
      <pubDate>Thu, 23 Dec 2021 13:35:48 +0000</pubDate>
      <link>https://dev.to/jyeett/what-is-bcrypt-and-why-2dd1</link>
      <guid>https://dev.to/jyeett/what-is-bcrypt-and-why-2dd1</guid>
      <description>&lt;p&gt;In a large majority of the apps we use today, there will be a sign-in feature that requires you to have an account associated with a username or email, and a password. But how can we ensure that our password will be safe from malicious attacks targeting our data? To do this, our app will need a way to encrypt our user's password and store it in a place where it can only be accessed on the backend. While there are many algorithms out there that can do this, we will talk a bit about why bcrypt is one of the leading choices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-bcrypt"&gt;
  &lt;/a&gt;
  What is Bcrypt?
&lt;/h3&gt;

&lt;p&gt;Bcrypt is an algorithm that will allow your application to take the user inputted password and convert it into a hash, which can be thought of as a "digital fingerprint." This hash cannot be reversed back into the original password, so upon login, the application must compare hashes to determine if the correct password was given. Creating just this hash may sound pretty good, but bcrypt can make it better still. Bcrypt will add a random chunk of data called a &lt;em&gt;salt&lt;/em&gt; to the password before it is hashed to make it even more unique. To top that off, there is an adaptable &lt;em&gt;cost&lt;/em&gt; parameter that can be used to control the number of iterations the algorithm will go through. We will talk about the importance of the cost in the next section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-bcrypt"&gt;
  &lt;/a&gt;
  Why Bcrypt?
&lt;/h3&gt;

&lt;p&gt;What makes bcrypt a bit more special than some other encryption algorithms is that it is considered a slow algorithm. Many algorithms you may be familiar with are looking for the fastest possible runtime in order to maximize optimal response time and space complexity. However in the case of bcrypt, we want the slowest runtime within reason of our user experience. Slowing down this algorithm reduces the possible number of 'guesses' an attacker could make to access your password. For example, we could have users wait for our algorithm to run for 1 or 2 seconds before logging them in, but this amount of time would drastically slow an attacker who would want to try thousands of passwords a second. The &lt;em&gt;cost&lt;/em&gt; is what controls how optimized our bcrypt algorithm will be. When deciding on a cost, you want to find a balance between security and usability. The higher the cost, the more secure it will be, but the longer it will take to run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparing-to-other-encryption-algorithms"&gt;
  &lt;/a&gt;
  Comparing to Other Encryption Algorithms
&lt;/h3&gt;

&lt;p&gt;Bcrypt has been compared largely to md5 and SHA algorithms when considering cryptography. The main difference as previously mentioned is that bcrypt is a slow algorithm, while both md5 and SHA are built to be fast. Md5 has been found to be severely compromised due to the fact that its hashes can easily be read through a &lt;em&gt;collision attack&lt;/em&gt;, where modern computers can find matching hashes in a matter of seconds. SHA1 in particular is comparable to md5, while the SHA-2 series of algorithms has been built to be more robust, but still has the vulnerabilities of being a fast algorithm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bcrypt-compatibility"&gt;
  &lt;/a&gt;
  Bcrypt Compatibility
&lt;/h3&gt;

&lt;p&gt;Being one of the leading encryption tools, bcrypt naturally has implementations in many languages such as C based languages, Golang, Java, Python, PHP, Ruby, and others. In Ruby on Rails for example, by adding the bcrypt gemfile to your application, you will have access to the method "has_secure_password" which includes all of bcrypt's necessary functionality, making implementation much easier on developers. Likewise in other languages, there will be many built in methods to the respective libraries.&lt;/p&gt;

&lt;p&gt;If you would like to learn more about bcrypt here are some great resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bcrypt-ruby/bcrypt-ruby"&gt;Github Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password"&gt;Bcrypt with Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/blog/hashing-in-action-understanding-bcrypt/"&gt;Hashing in Action: Understanding bcrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>security</category>
      <category>rails</category>
    </item>
    <item>
      <title>TypeScript Monorepos with Yarn</title>
      <author>Tomas Fernandez</author>
      <pubDate>Thu, 23 Dec 2021 13:35:14 +0000</pubDate>
      <link>https://dev.to/semaphore/typescript-monorepos-with-yarn-30m9</link>
      <guid>https://dev.to/semaphore/typescript-monorepos-with-yarn-30m9</guid>
      <description>&lt;p&gt;In a past article in this &lt;a href="https://semaphoreci.com/blog/what-is-monorepo"&gt;monorepo&lt;/a&gt; series, weâve discussed setting up CI/CD for JavaScript packages using &lt;a href="https://semaphoreci.com/blog/javascript-monorepos-lerna"&gt;Yarn Workspaces&lt;/a&gt;. This time, we will figure out the same for TypeScript. Weâll learn how to build and test TypeScript projects at scale with Yarn and Semaphore.&lt;/p&gt;

&lt;p&gt;At the end of the tutorial, weâre going to have a &lt;a href="https://semaphoreci.com/continuous-integration"&gt;continuous integration&lt;/a&gt; pipeline that builds only the code that changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--paLXwdmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b0ki32gj12tu2brqaac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paLXwdmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b0ki32gj12tu2brqaac.png" alt="Image description" width="876" height="800"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uniting-yarn-and-typescript"&gt;
  &lt;/a&gt;
  Uniting Yarn and TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript extends JavaScript by adding everything it was missing: types, stricter checks, and a deeper IDE integration. TypeScript code is easier to read and debug, helping us write more robust code.&lt;/p&gt;

&lt;p&gt;Compared to JavaScript, however, TypeScript saddles us with one more layer of complexity: code must be compiled first before it can be executed or used as a dependency. For instance, say we have two packages, âchildâ and âparentâ. The child is easy to compile since it has no other dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; typescript
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;child
&lt;span class="nv"&gt;$ &lt;/span&gt;tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Yet, when we try to do the same with the parent that depends on it, we get an error since the local dependency is not found.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;parent
&lt;span class="nv"&gt;$ &lt;/span&gt;tsc

src/index.ts:1:20 - error TS2307: Cannot find module &lt;span class="s1"&gt;'child'&lt;/span&gt; or its corresponding &lt;span class="nb"&gt;type &lt;/span&gt;declarations.

1 import &lt;span class="o"&gt;{&lt;/span&gt; moduleName &lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'child'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

Found 1 error.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Without specialized tooling, we have to build and link packages by hand while preserving the correct build order. &lt;a href="https://classic.yarnpkg.com/en/docs/workspaces/"&gt;Yarn Workspaces&lt;/a&gt; already solves problems like these in JavaScript. Fortunately, with a bit of tweaking, we can extend it to TypeScript.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-workspaces-in-yarn"&gt;
  &lt;/a&gt;
  Setting up Workspaces in Yarn
&lt;/h2&gt;

&lt;p&gt;Fork and clone the following GitHub repository, which has a couple of packages to experiment with.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/TomFern"&gt;
        TomFern
      &lt;/a&gt; / &lt;a href="https://github.com/TomFern/semaphore-demo-monorepo-typescript"&gt;
        semaphore-demo-monorepo-typescript
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Yarn Workspaces + TypeScript monorepo
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Monorepo TypeScript Demo&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://semaphore-demos.semaphoreci.com/projects/semaphore-demo-monorepo-typescript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d61be7b165e4ac5448a2381e82eea389d7b028e3810711d100dab983ebdf37dd/68747470733a2f2f73656d6170686f72652d64656d6f732e73656d6170686f726563692e636f6d2f6261646765732f73656d6170686f72652d64656d6f2d6d6f6e6f7265706f2d747970657363726970742f6272616e636865732f66696e616c2e737667" alt="Build Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A hello world type monorepo demo for TypeScript and Yarn Workspaces.&lt;/p&gt;
&lt;h2&gt;
Before Yarn Workspaces&lt;/h2&gt;
&lt;p&gt;Withouth workspaces, you have to build and link each project separately. For instance:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ npm install -g typescript
$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; shared
$ tsc&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This builds the &lt;code&gt;shared&lt;/code&gt; package. But when we try to do the same with &lt;code&gt;sayhi&lt;/code&gt;, we get an error since the local dependency is not found:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; ..
$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; sayhi
$ tsc

src/sayhi.ts:1:20 - error TS2307: Cannot find module &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;shared&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; or its corresponding &lt;span class="pl-c1"&gt;type&lt;/span&gt; declarations.

1 import { hi } from &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;shared&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt;
                     &lt;span class="pl-k"&gt;~&lt;/span&gt;~~~~~~~
Found 1 error.&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Yarn workspaces help us link projects while keeping each in its own separate folder.&lt;/p&gt;
&lt;h2&gt;
Configure Yarn Workspaces and TypeScript&lt;/h2&gt;
&lt;p&gt;To configure workspaces, first install the latest Yarn version:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ yarn &lt;span class="pl-c1"&gt;set&lt;/span&gt; version berry&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This creates &lt;code&gt;.yarn&lt;/code&gt; and &lt;code&gt;.yarnrc.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Initialize workspaces, this creates the &lt;code&gt;packages&lt;/code&gt; folderâ¦&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/TomFern/semaphore-demo-monorepo-typescript"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Weâre going to build a TypeScript monorepo made of two small packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;shared&lt;/strong&gt;: contains a few utility functions.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;sayhi&lt;/strong&gt;: the main package provides a âhello, worldâ program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Letâs get going. To configure workspaces, switch to the latest Yarn version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn &lt;span class="nb"&gt;set &lt;/span&gt;version berry
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yarn installs on &lt;code&gt;.yarn/releases&lt;/code&gt; and can be safely checked in the repo.&lt;/p&gt;

&lt;p&gt;Then, initialize workspaces. This creates the &lt;code&gt;packages&lt;/code&gt; folder, a &lt;code&gt;.gitignore&lt;/code&gt;, and the &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;yarn.lock&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn init &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add root-level dependencies to build all projects at once with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Optionally, you may want to install the &lt;a href="https://yarnpkg.com/package/typescript"&gt;TypeScript plugin&lt;/a&gt;, which handles types for you. The &lt;a href="https://yarnpkg.com/cli/workspaces/foreach"&gt;foreach plugin&lt;/a&gt; is also convenient for running commands in many packages at the same time.&lt;/p&gt;

&lt;p&gt;Next, move the code into &lt;code&gt;packages&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git &lt;span class="nb"&gt;mv &lt;/span&gt;sayhi shared packages/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To confirm that workspaces have been detected, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn workspaces list &lt;span class="nt"&gt;--json&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"location"&lt;/span&gt;:&lt;span class="s2"&gt;"."&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"semaphore-demo-monorepo-typescript"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"location"&lt;/span&gt;:&lt;span class="s2"&gt;"packages/sayhi"&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"sayhi"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"location"&lt;/span&gt;:&lt;span class="s2"&gt;"packages/shared"&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"shared"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this were a JavaScript monorepo, we would be finished. The following section introduces TypeScript builds into the mix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-workspaces"&gt;
  &lt;/a&gt;
  TypeScript Workspaces
&lt;/h2&gt;

&lt;p&gt;Our demo packages already come with a working &lt;code&gt;tsconfig.json&lt;/code&gt;, albeit a straightforward one. Yet, we havenât done anything to link them up â thus far, they have been completely isolated and donât reference each other.&lt;/p&gt;

&lt;p&gt;We can link TypeScript packages using &lt;a href="https://www.typescriptlang.org/docs/handbook/project-references.html#what-is-a-project-reference"&gt;project references&lt;/a&gt;. This feature, which was introduced on TypeScript 3.0, allows us to break an application into small pieces and build them piecemeal.&lt;/p&gt;

&lt;p&gt;First, we need a root-level &lt;code&gt;tsconfig.json&lt;/code&gt; with the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"exclude"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"packages/**/tests/**"&lt;/span&gt;,
    &lt;span class="s2"&gt;"packages/**/dist/**"&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;"references"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"path"&lt;/span&gt;: &lt;span class="s2"&gt;"./packages/shared"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"path"&lt;/span&gt;: &lt;span class="s2"&gt;"./packages/sayhi"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have one &lt;code&gt;path&lt;/code&gt; item per package in the repo. The paths must point to folders containing package-specific &lt;code&gt;tsconfig.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The referenced packages also need to have the &lt;a href="https://www.typescriptlang.org/tsconfig#composite"&gt;composite&lt;/a&gt; option enabled. Add this line into &lt;code&gt;packages/shared/tsconfig.json&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;packages/sayhi/tsconfig.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"compilerOptions"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="s2"&gt;"composite"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;

     &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Packages that depend on other ones within the monorepo will need an extra reference. Add a &lt;code&gt;references&lt;/code&gt; instruction in &lt;code&gt;packages/sayhi/tsconfig.json&lt;/code&gt; (the parent package). The lines go at the top level of the file, outside &lt;code&gt;compilerOptions&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"references"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"path"&lt;/span&gt;: &lt;span class="s2"&gt;"../shared"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;

  &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install and build the combined dependencies with &lt;code&gt;yarn install&lt;/code&gt;. Since weâre using the latest release of Yarn, it will generate a &lt;a href="https://yarnpkg.com/getting-started/recipes/#typescript--pnp-quick-start"&gt;zero install&lt;/a&gt; file that can be checked into the repository.&lt;/p&gt;

&lt;p&gt;Now that the configuration is ready, we need to run &lt;code&gt;tsc&lt;/code&gt; to build everything for the first time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn tsc &lt;span class="nt"&gt;--build&lt;/span&gt; &lt;span class="nt"&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also can build each project separately with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn workspace shared build
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn workspace sayhi build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you can try running the main program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn workspace sayhi node dist/src/sayhi.js
Hi, World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the end of this section, the monorepo structure should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;âââ package.json
âââ packages
â   âââ sayhi
â   â   âââ dist/
â   â   âââ src/
â   â   âââ package.json
â   â   âââ tsconfig.json
â   âââ shared
â       âââ dist/
â       âââ src/
â       âââ package.json
â       âââ tsconfig.json
âââ tsconfig.json
âââ yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thatâs it, Yarn and TypeScript work together. Commit everything into the repository, so weâre ready to begin the next phase: automating testing with CI/CD.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nt"&gt;-A&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Set up TS and Yarn"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-and-testing-with-semaphore"&gt;
  &lt;/a&gt;
  Building and testing with Semaphore
&lt;/h2&gt;

&lt;p&gt;The demo includes a ready-to-work, change-based pipeline in the &lt;code&gt;final&lt;/code&gt; branch. But weâll learn faster by creating it from zero.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0AI1Yrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00x9tp0exazm8paaoh5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0AI1Yrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00x9tp0exazm8paaoh5a.png" alt="Image description" width="756" height="740"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If youâve never used Semaphore before, check out the &lt;a href="https://docs.semaphoreci.com/guided-tour/getting-started/"&gt;getting started guide&lt;/a&gt;. Once you have added the forked demo repository into Semaphore, come back, and weâll finish the setup.&lt;/p&gt;

&lt;p&gt;Weâll start from scratch and use the starter single job template. Select âSingle Jobâ and click on &lt;u&gt;Customize&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4W6gx9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g26jreee9dlqf7xlbnkb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4W6gx9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g26jreee9dlqf7xlbnkb.png" alt="Image description" width="880" height="570"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Workflow Builder opens to let you configure the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vVtI-wpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu12sfx8bqbjvp95vqk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVtI-wpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu12sfx8bqbjvp95vqk9.png" alt="Image description" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-stage"&gt;
  &lt;/a&gt;
  Build Stage
&lt;/h2&gt;

&lt;p&gt;Weâll set up a TypeScript &lt;a href="https://semaphoreci.com/blog/build-stage"&gt;build stage&lt;/a&gt;. The build stage compiles the code into JavaScript and runs tests such as linting and unit testing.&lt;/p&gt;

&lt;p&gt;The first block will build the &lt;code&gt;shared&lt;/code&gt; package. Add the following commands to the job.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sem-version node 14.17.3
checkout
yarn workspace shared build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJ-1JZQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqzaghc1pc1lbxdn3vhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJ-1JZQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqzaghc1pc1lbxdn3vhf.png" alt="Image description" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The details are covered in-depth in the &lt;a href="https://docs.semaphoreci.com/guided-tour/getting-started/"&gt;starter guide&lt;/a&gt;. But in a few words, &lt;a href="https://docs.semaphoreci.com/ci-cd-environment/sem-version-managing-language-versions-on-linux/"&gt;sem-version&lt;/a&gt; switches the active version of Node (so we have version consistency), while &lt;a href="https://docs.semaphoreci.com/reference/toolbox-reference/#checkout"&gt;checkout&lt;/a&gt; clones the repository into the CI machine.&lt;/p&gt;

&lt;p&gt;Scroll down the right pane until you find &lt;strong&gt;Skip/Run conditions&lt;/strong&gt;. Select âRun this block when conditions are metâ. In the &lt;strong&gt;When?&lt;/strong&gt; field type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;change_in('/packages/shared/')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://docs.semaphoreci.com/reference/conditions-reference/#change_in"&gt;change_in&lt;/a&gt; function is an integral part of &lt;a href="https://docs.semaphoreci.com/essentials/building-monorepo-projects/"&gt;monorepo workflows&lt;/a&gt;. It scans the Git history to find which files have recently changed. In this case, weâre essentially asking Semaphore to skip the block if no files in the &lt;code&gt;/packages/shared&lt;/code&gt; folders have changed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CF9fv8eF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1wgs7fb30bho1mg3fd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CF9fv8eF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1wgs7fb30bho1mg3fd8.png" alt="Image description" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new block for testing. Weâll use it to run &lt;a href="https://eslint.org/docs/user-guide/getting-started"&gt;ESLint&lt;/a&gt; and unit tests with &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the prologue, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sem-version node 14.17.3
checkout
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create two jobs in the block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Lint with the command: &lt;code&gt;yarn workspace shared lint&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Unit testing: &lt;code&gt;yarn workspace shared test&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YWmASlSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/./public/typescript-monorepos-with-yarn/b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWmASlSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/./public/typescript-monorepos-with-yarn/b2.png" alt="" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, set the &lt;strong&gt;Skip/Run conditions&lt;/strong&gt; and put the same condition as before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrh8Pq0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tht1nj9blqas2js2m6hb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrh8Pq0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tht1nj9blqas2js2m6hb.png" alt="Image description" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-dependencies"&gt;
  &lt;/a&gt;
  Managing dependencies
&lt;/h2&gt;

&lt;p&gt;Weâll repeat the steps for the &lt;code&gt;sayhi&lt;/code&gt; package. Here, we only need to replace any instance of &lt;code&gt;yarn workspace shared &amp;lt;command&amp;gt;&lt;/code&gt; with &lt;code&gt;yarn workspace sayhi &amp;lt;command&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, create a building block and uncheck the &lt;strong&gt;Dependencies&lt;/strong&gt; section. Removing block dependencies in the pipeline makes blocks run in parallel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ud23gSem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5kt05j99gmdxujfvmyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ud23gSem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5kt05j99gmdxujfvmyd.png" alt="Image description" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, set the &lt;strong&gt;Skip/Run Condition&lt;/strong&gt; on the new block to: &lt;code&gt;change_in('/packages/sayhi/')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To finish, add a test block with a lint job and a unit test job. Since this package depends on &lt;code&gt;shared&lt;/code&gt;, we can add a block-level dependency at this point. When done, you should have a total of four blocks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBZvyhTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjxja1et8ol89cstfcqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBZvyhTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjxja1et8ol89cstfcqx.png" alt="Image description" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Skip/Run Condition&lt;/strong&gt;, in this case, is different because the test block should run if either &lt;code&gt;sayhi&lt;/code&gt; or &lt;code&gt;shared&lt;/code&gt; change. Thus, we must supply an array instead of a single path in order to let &lt;code&gt;change_in&lt;/code&gt; handle all cases correctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;change_in(['/packages/sayhi', '/packages/shared'])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-the-workflow"&gt;
  &lt;/a&gt;
  Running the Workflow
&lt;/h2&gt;

&lt;p&gt;Click on &lt;strong&gt;Run the Workflow&lt;/strong&gt; and then &lt;strong&gt;Start&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--af1NwJaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lzepmdn5eeaxvokscpl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--af1NwJaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lzepmdn5eeaxvokscpl.png" alt="Image description" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first time the pipeline runs, all blocks will be executed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrS-rhuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hugnkm4smv9hemg9rj0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrS-rhuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hugnkm4smv9hemg9rj0q.png" alt="Image description" width="756" height="740"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On successive runs, only relevant blocks will start; the rest will be skipped, speeding up the pipeline considerably, especially if weâre dealing with tens or hundreds of packages in the repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXujC7_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yetiwlyiyj03icd8sp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXujC7_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yetiwlyiyj03icd8sp4.png" alt="Image description" width="876" height="800"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-next"&gt;
  &lt;/a&gt;
  Read Next
&lt;/h2&gt;

&lt;p&gt;Adding TypeScript into the mix doesnât complicate things too much. Itâs a small effort that returns gains manifold with higher code readability and fewer errors.&lt;/p&gt;

&lt;p&gt;Want to keep learning about monorepos? Check these excellent posts and tutorials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/continuous-integration-monorepos"&gt;Continuous Integration for Monorepos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/monorepo-micro-frontends-jonathan-creamer"&gt;Monorepo and Micro-Frontends with Jonathan Creamer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/monorepo-building-at-scale"&gt;Monorepo and Building at Scale with Benjy Weinberger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/javascript-monorepos-lerna"&gt;JavaScript Monorepos with Lerna&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>yarn</category>
      <category>javascript</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Privacy and confidentiality in security testing</title>
      <author>taniazhydkova</author>
      <pubDate>Thu, 23 Dec 2021 13:25:35 +0000</pubDate>
      <link>https://dev.to/taniazhydkova/privacy-and-confidentiality-in-security-testing-5c2</link>
      <guid>https://dev.to/taniazhydkova/privacy-and-confidentiality-in-security-testing-5c2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Privacy and Confidentiality&lt;/strong&gt; are two commonly used terms that appear together when we talk about personal information, its security, and how to protect it from compromise. But there is often confusion about the differences between the two.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-healthcare-data-security-and-what-does-qa-testing-have-to-do-with-privacy-and-confidentiality"&gt;
  &lt;/a&gt;
  What is healthcare data security and what does QA testing have to do with privacy and confidentiality?
&lt;/h2&gt;

&lt;p&gt;Letâs look at it from a real-life perspective where the privacy of a person is crucial as well as confidentiality. &lt;/p&gt;

&lt;p&gt;We will use an average patient in a healthcare organization, government, or private medical entity to describe our scenario. This person is an individual who has to give the health organization his\her consent to process their personal information. Any information that the patient voluntarily gives to this medical company, goes under the criteria âprivacy.â &lt;/p&gt;

&lt;p&gt;In the same context, as a professional institution, the health organization has to guarantee confidentiality and protect personal information from unsanctioned access by others. That guarantee goes under the criteria âconfidentiality.â &lt;/p&gt;

&lt;p&gt;The next participant of this chain is the doctor, who is the link between the individual and the health organization. The doctor is also a part of this health organization and agrees to adhere to patient privacy policies. This agreement binds medical offices, doctors, nurses, as well as all persons employed under the umbrella of the medical institution. &lt;/p&gt;

&lt;p&gt;In addition to discussing these private matters in either a Hospital or Clinic, said individuals are also obliged to refrain from discussing a patientâs information in their personal lives.    Otherwise, they will break the confidentiality agreement and a personâs privacy can be subject to legal repercussions.  &lt;/p&gt;

&lt;p&gt;This situation with privacy and confidentiality in the medical sphere has parallels with the QA testing process. Whenever an individual user (patient) signs up for a service or software, the software company (health organization) requires that the user divulges personal information and access to this. After this information is processed in their system, the QA tester (The doctor) is given access to this personal information and must follow privacy and confidentiality agreements.   &lt;/p&gt;

&lt;p&gt;To sum things up, we can highlight a few main differences between Privacy and Confidentiality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Privacy&lt;/strong&gt; â applies to an individual or a person; its nature is a personal choice to keep your life matters and information away from public interruptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples of Personal (Private) information that can be attributed to an individual:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name and details such as Date and Place of Birth&lt;/li&gt;
&lt;li&gt;Physical characteristics, Medical or health condition records&lt;/li&gt;
&lt;li&gt;Any contact information such  as phone numbers, emails, addresses&lt;/li&gt;
&lt;li&gt;Your Identification Number (Passport or Driver License)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt; â applies to information, and it transforms into a professional obligation not to share details of individuals with any third party without their consent. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are a few examples of confidential information:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transaction details and Banking information&lt;/li&gt;
&lt;li&gt;Technical or Legal documents&lt;/li&gt;
&lt;li&gt;Logins, Passwords, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are several laws and privacy and confidentiality regulatory compliances in Europe and the US like Sarbanes-Oxley Act, Federal Information Security Management Act, EU General Data Protection Regulation, etc. &lt;/p&gt;

&lt;p&gt;Their primary goal is to create and implement security programs, to prevent Privacy and Confidentiality risks and protect individuals and businesses from fraud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-security-testing-with-your-qa-team"&gt;
  &lt;/a&gt;
  How to Implement Security testing with your QA team
&lt;/h2&gt;

&lt;p&gt;Now when we understand the difference between privacy and confidentiality and how it can affect a person, we can talk about keeping these privacy and confidentiality safe while testing. The increasing number of malware bots makes business owners concerned about keeping data confidential. It also makes implementing security testing vital for any software development, and especially for web applications.  &lt;/p&gt;

&lt;p&gt;Knowing how to test software to prevent any personal data from being compromised from their site is essential. For this, letâs go through the steps QA testers can take to implement security testing:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#doublecheck-your-business-demands"&gt;
  &lt;/a&gt;
  Double-check your Business Demands
&lt;/h3&gt;

&lt;p&gt;Before any basic testing, the first step we must take is to determine the businessâs particular security goals. Additionally, understanding business processes will help find vulnerabilities of the product and define the actual and hidden security needs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#system-requirements"&gt;
  &lt;/a&gt;
  System Requirements
&lt;/h3&gt;

&lt;p&gt;The system setup is the key to accurate tests, and this step is usually pretty straightforward. Gather all system specifications, including the network operating system, information about hardware, and what technology they used to build their system. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#threats-profile-and-traceability-matrix"&gt;
  &lt;/a&gt;
  Threats Profile and Traceability Matrix
&lt;/h3&gt;

&lt;p&gt;The main goal of security testing is to prevent applications from malware penetrations and others access and also protect the confidentiality and privacy of a person.  &lt;/p&gt;

&lt;p&gt;But as we mentioned above, to do this, we need to collect information about potential risks and possible privacy vulnerabilities, create a list of these threats, and then a threat profile based on this list. This list is also suitable for creating a Traceability Matrix which helps to track how each entity affects the other.&lt;/p&gt;

&lt;p&gt;Having a threats profile can help us evaluate the critical nature of tests we will run and what risks need to be assessed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UuQbwkZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aqua-cloud.io/wp-content/uploads/2021/11/MicrosoftTeams-image-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UuQbwkZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aqua-cloud.io/wp-content/uploads/2021/11/MicrosoftTeams-image-2.jpg" alt="Requirement coverage from aqua ALM is an efficient substitute for Traceability Matrix" width="880" height="613"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Requirement coverage from &lt;a href="https://aqua-cloud.io/"&gt;aqua ALM&lt;/a&gt; is an efficient substitute for Traceability Matrix&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preparing-tools-and-documentation"&gt;
  &lt;/a&gt;
  Preparing Tools and Documentation
&lt;/h3&gt;

&lt;p&gt;The combination of automatic and manual tests can be the most efficient decision for security testing. But before starting or executing tests, we should finalize our software security document to address all privacy and confidentiality vulnerabilities.&lt;/p&gt;

&lt;p&gt;![You can systematize all requirements in a Details tab of aqua ALM (&lt;a href="https://miro.medium.com/max/1400/0*o5tCvsdOnLh5yVoQ.jpg"&gt;https://miro.medium.com/max/1400/0*o5tCvsdOnLh5yVoQ.jpg&lt;/a&gt;)&lt;br&gt;
&lt;em&gt;You can systematize all requirements in a Details tab of &lt;a href="https://aqua-cloud.io/"&gt;aqua ALM&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-and-regression-test-case-execution"&gt;
  &lt;/a&gt;
  Security and Regression Test Case Execution
&lt;/h3&gt;

&lt;p&gt;By the time we get to this step, we will have to run all planned tests to identify vulnerabilities. After these tests are carried out, we will need to fix these tests and, if required, rerun the tests. We should also remember the regression test to ensure that the new changes didnât produce new bugs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_rDJBnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aqua-cloud.io/wp-content/uploads/2021/11/MicrosoftTeams-image-4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_rDJBnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aqua-cloud.io/wp-content/uploads/2021/11/MicrosoftTeams-image-4.jpg" alt="With a test scenarios function of aqua ALM, it becomes possible for QA testers to plan and also execute different test cases at once" width="880" height="431"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;With a test scenarios function of &lt;a href="https://aqua-cloud.io/"&gt;aqua ALM&lt;/a&gt;, it becomes possible for QA testers to plan and also execute different test cases at once&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collecting-tests-details-into-report"&gt;
  &lt;/a&gt;
  Collecting Tests Details into Report
&lt;/h3&gt;

&lt;p&gt;Based on the results of every test, we must make a detailed report. Highlight weaknesses and problems of the software you managed to fix, and donât forget to describe potential vulnerabilities that can still persist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_rDJBnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aqua-cloud.io/wp-content/uploads/2021/11/MicrosoftTeams-image-4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_rDJBnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aqua-cloud.io/wp-content/uploads/2021/11/MicrosoftTeams-image-4.jpg" alt="Use aqua ALM dashboard for better visualization and a quick overview of different elements and test executions in real-time" width="880" height="431"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Use &lt;a href="https://aqua-cloud.io/"&gt;aqua ALM&lt;/a&gt; dashboard for better visualization and a quick overview of different elements and test executions in real-time&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;There are many more privacy and confidentiality risks that we canât omit, including surveillance breaches, lack of control from authorities, etc. The QA team is the one that must take action and work in sync with developers to avoid these risks.&lt;/p&gt;

&lt;p&gt;However, It might be challenging to implement security testing if your QA team doesnât have any application security background. But it is pretty easy to grasp security testing methods and processes from other QA testing solutions or integrate them with your software.&lt;/p&gt;

</description>
      <category>security</category>
      <category>testing</category>
      <category>privacy</category>
      <category>confidentiality</category>
    </item>
    <item>
      <title>Counter in JS || 50 JS Project Challenge #2</title>
      <author>VECTOR3Studio</author>
      <pubDate>Thu, 23 Dec 2021 13:01:31 +0000</pubDate>
      <link>https://dev.to/vector3studio/counter-in-js-50-js-project-challenge-2-2cej</link>
      <guid>https://dev.to/vector3studio/counter-in-js-50-js-project-challenge-2-2cej</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello"&gt;
  &lt;/a&gt;
  Hello ð
&lt;/h2&gt;

&lt;p&gt;In this post I will show you how to make Random Background, when you click a button in JavaScript.&lt;/p&gt;

&lt;p&gt;This is Part 1 of the 50 JS Project Challenge.&lt;/p&gt;

&lt;p&gt;So let's get into it.&lt;/p&gt;

&lt;p&gt;First, here is the video tutorial:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EFRKtivo7zw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-lets-start-coding"&gt;
  &lt;/a&gt;
  So let's start coding.
&lt;/h3&gt;

&lt;p&gt;First, we need to create three files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;index.html&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;style.css&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;home.js&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have those files created, we can start coding.&lt;/p&gt;

&lt;p&gt;Here is the code for index.html:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="wrapper"&amp;gt;
        &amp;lt;h1 class="number"&amp;gt;0&amp;lt;/h1&amp;gt;
        &amp;lt;div class="buttons"&amp;gt;
            &amp;lt;button class="upper" onclick="add()"&amp;gt;Add Count&amp;lt;/button&amp;gt;
            &amp;lt;button class="lower" onclick="Lower()"&amp;gt;Lower Count&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="home.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So basically we are creating one Text for the counter and two buttons. Nothing crazy so far.&lt;/p&gt;

&lt;p&gt;Now it's time for styling!. Open our style.css and write this code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap');

*{
    margin: 0;
    padding: 0;
    font-family: 'Poppins', sans-serif;
}
.wrapper{
    display: flex;
    justify-content: center;
    align-items: center;
    padding-top: 35vh;
}
h1{
    font-size: 4rem;
}
.buttons{
    padding-left: 1.5rem;
}
button{
    margin-left: 0.5rem;
    background-color: #4287f5;
    color: white;
    padding: 12px 7.5px;
    border-radius: 20px;
    border: none;
    outline: none;
    cursor: pointer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a font here declared, the font is Poopins.&lt;br&gt;
We are rewriting the default padding and margin and changing the font to Poopins. The other is just styling elements.&lt;/p&gt;

&lt;p&gt;Now let's move to the JavaScript part. Here is the code for JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const upper = document.querySelector(".upper");
const lower = document.querySelector(".lower");
const numberElement = document.querySelector(".number")
let number = 0;


function add(){
    number += 1;
    numberElement.innerHTML = number;
}

function Lower(){
    number -= 1;
    numberElement.innerHTML = number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So first we are creating variables for each element in HTML. The we are creating a variable for Number Integer so we can count how many users press the button. So we are creating two functions, one for increasing our counter, and one for decreasing.&lt;br&gt;
Function obtains a Number + or -, and then we are passing the value to the actual text. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JiaAYoEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44hf1uc7yro94huebkhn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JiaAYoEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44hf1uc7yro94huebkhn.png" alt="Image description" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it. You can see the Actual value of the number on the screen, depending which button you are pressing.&lt;/p&gt;

&lt;p&gt;Thanks for reading my post, and I hope I will see you next time.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating Your First Application On Python Using Tkinter</title>
      <author>dhakshinesh</author>
      <pubDate>Thu, 23 Dec 2021 12:23:09 +0000</pubDate>
      <link>https://dev.to/dhakshinesh/creating-your-first-application-on-python-using-tkinter-131g</link>
      <guid>https://dev.to/dhakshinesh/creating-your-first-application-on-python-using-tkinter-131g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-tkinter"&gt;
  &lt;/a&gt;
  What is Tkinter
&lt;/h2&gt;

&lt;p&gt;For those who don't know what tkinter is, It is basically a python module for making GUI(Graphical User Interface), in which we can do all the beautiful things on the frontend and hide your messy backend codeð..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;First off to get started, we need to Install Tkinter using pip&lt;br&gt;
On your terminal type,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install tk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: You will need the latest version of python(3.9.0) or higher.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-to-the-fun-stuff-"&gt;
  &lt;/a&gt;
  Now to the fun stuff ð¾ð¾..
&lt;/h3&gt;

&lt;p&gt;After installing tkinter, you are ready to make your first python application. &lt;br&gt;
On your text-editor, create a python file(.py) and then you'll be needing the following code to set up tkinter on your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#importing the tkinter module
from tkinter import *
import tkinter

#assigning a "root" as the main window for our application
root = tkinter.Tk()

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run the following code, you can see a window as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rARZCG6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpn2kq5xpmpvtnilxz6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rARZCG6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpn2kq5xpmpvtnilxz6a.png" alt="Tkinter Application window" width="246" height="287"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the place all of our widgets which are the elements are going to be shown.&lt;/p&gt;

&lt;p&gt;Before we go ahead, We need to make a fixed size for our application.&lt;br&gt;
Just after assigning the root = tkinter.Tk() add,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root.geometry('500x500')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-better-than-making-a-hello-world-program"&gt;
  &lt;/a&gt;
  What is better than making a "Hello World!" program?
&lt;/h3&gt;

&lt;p&gt;Now we're going to a widget by tkinter which lets us make some cool text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Just a basic text.
Label(root, text="Hello World!").pack()

#Just a basic text but bigger.
Label(root, text="Hello World!", font=20).pack()

#A bold text with a different font
Label(root, text="Hello World!", font=('Jokerman',25,'bold')).pack()

#A text with red background
Label(root, text="Hello World!",bg='red', font=10 ).pack()

#A text with red color
Label(root, text="Hello World!",fg='red', font=10 ).pack()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the complete code of the program that we just made,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#importing the tkinter module
from tkinter import *
import tkinter

root = tkinter.Tk()
root.geometry('500x500')
#Main
#Just a basic text.
Label(root, text="Hello World!").pack()
#Just a basic text but bigger.
Label(root, text="Hello World!", font=20).pack()
#A bold text with a different font
Label(root, text="Hello World!", font=('Jokerman',25,'bold')).pack()
#A text with red background
Label(root, text="Hello World!",bg='red', font=10 ).pack()
#A text with red color
Label(root, text="Hello World!",fg='red', font=10 ).pack()
root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the output of the following code,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NuqAtM_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmbat77n7jrfvqoi96op.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NuqAtM_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmbat77n7jrfvqoi96op.png" alt="Hello World!" width="353" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#congrats-youve-successfully-made-your-first-python-application"&gt;
  &lt;/a&gt;
  Congratsðð you've successfully made your first python application!
&lt;/h3&gt;

&lt;p&gt;That's it for this tutorial on making your first application, If you want to see more widgets by tkinter you can check &lt;a href="https://www.dummies.com/article/technology/programming-web-design/python/using-tkinter-widgets-in-python-141443"&gt;this link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And by the way this is my first dev-post, I would really like to see what you think about it.ð&lt;/p&gt;

</description>
      <category>firstyearincode</category>
      <category>python</category>
      <category>tutorial</category>
      <category>tkinter</category>
    </item>
  </channel>
</rss>
