<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Decode Adapter Pattern</title>
      <author>Gaurav</author>
      <pubDate>Fri, 26 Nov 2021 18:37:59 +0000</pubDate>
      <link>https://dev.to/gauravratnawat/decode-adapter-pattern-2i4p</link>
      <guid>https://dev.to/gauravratnawat/decode-adapter-pattern-2i4p</guid>
      <description>&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To wrap an existing class with a new interface.&lt;/li&gt;
&lt;li&gt;To perform impedance matching&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#intent"&gt;
  &lt;/a&gt;
  Intent
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Target - defines the domain-specific interface that Client uses.&lt;/li&gt;
&lt;li&gt;Adapter - adapts the interface Adaptee to the Target interface.&lt;/li&gt;
&lt;li&gt;Adaptee - defines an existing interface that needs adapting.&lt;/li&gt;
&lt;li&gt;Client - collaborates with objects conforming to the Target interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Before&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---J74H924--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5h0wlv3jkbquq00esps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---J74H924--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5h0wlv3jkbquq00esps.png" alt="Adaptor before"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OkBjoMAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/166t6g4bytmx1mfwoqy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OkBjoMAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/166t6g4bytmx1mfwoqy9.png" alt="Adaptor after"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;Assume that you have an e-commerce application which is serving your customers for a long time. This e-commerce application is using a Legacy Order Management System (OMS). Due to the high maintenance cost and degraded performance of the legacy OMS software, you have decided to use a cheap and efficient OMS software which is readily available in the market. However, you realize that the interfaces are different in the new software and it requires a lot of code change in the existing e-commerce application.&lt;/p&gt;

&lt;p&gt;Adapter design pattern can be very useful in these situations. Instead of modifying your e-commerce application to use the new interfaces, you can write a 'wrapper' class that acts as a bridge between your e-commerce application and the new OMS software. With this approach, the e-commerce application can still use the old interface.&lt;/p&gt;

&lt;p&gt;Adapter design pattern can be implemented in two ways. One using the inheritance method (Class Adapter) and second using the composition (Object Adapter). The following example depicts the implementation of Object adapter.&lt;/p&gt;

&lt;p&gt;1 Below is the code that uses the LegacyOMS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

public class Item {
  private String name;
  private double price;

  public Item(String name, double price) {
    this.name = name;
    this.price = price;
  }

  public String getName() {
    return name;
  }

  public double getPrice() {
    return price;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

public class Payment {

  public String type;
  public double amount;

  public Payment(String type, double amount) {
    super();
    this.type = type;
    this.amount = amount;
  }

  public void pay() {
    System.out.println(type + " " + amount + "$");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

import java.util.ArrayList;
import java.util.List;

public class LegacyOMS {

  /* The Legacy OMS accepts input in XML format */

  List cart = new ArrayList();
  List payments = new ArrayList();

  public void addItem(Item itemXml) {
    cart.add(itemXml);
    System.out.println(itemXml.getName() + " " + itemXml.getPrice());
  }

  public void makePayment(Payment paymentXml) {
    payments.add(paymentXml);
    paymentXml.pay();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 The client code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.client;

import com.gaurav.adapter.Item;
import com.gaurav.adapter.OMSAdapter;
import com.gaurav.adapter.Payment;

public class AdapterClient {

  public static void main(String[] args) {

    /* Create an order and add items */

    LegacyOMS oms = new LegacyOMS();

    oms.addItem(new Item("Italian Pizza", 6.99));
    oms.addItem(new Item("Wine", 9.99));
    oms.addItem(new Item("Beer", 5.99));
    oms.addItem(new Item("Red Apple", 1.49));
    oms.addItem(new Item("Almonds", 11.99));

    System.out.println("---------------------------------");
    /* Create payment and make payment */
    oms.makePayment(new Payment("CASH", 20.00));
    oms.makePayment(new Payment("CREDIT", 10.00));
    oms.makePayment(new Payment("DEBIT", 10.00));
    System.out.println("---------------------------------");

  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 When the OMS needs to be swapped, you can simply create an Adapter class with same interface that the client uses. This adapter/wrapper class "maps" the client interface to the adaptee (New OMS) interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

import java.util.ArrayList;
import java.util.List;

public class NewOMS {

  /* The new OMS accepts input in JSON format */

  List cart = new ArrayList();
  List payments = new ArrayList();

  public void addToBasket(Item itemJson) {
    cart.add(itemJson);
    System.out.println(itemJson.getName() + " " + itemJson.getPrice());
  }

  public void pay(Payment paymentJson) {
    payments.add(paymentJson);
    paymentJson.pay();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

public class OMSAdapter {

  /* Object Adapter uses composition */
  private NewOMS newOMS;

  public OMSAdapter() {
    newOMS = new NewOMS();
  }

  public void addItem(Item item) {
    convertXmlToJson(item);
    newOMS.addToBasket(item);
  }

  public void makePayment(Payment p) {
    convertXmlToJson(p);
    newOMS.pay(p);
  }

  /* The new OMS accepts only Json input.
   * Convert the client requests from XML to Json*/
  private void convertXmlToJson(Object o) {
    System.out.println("Converted from XML to JSON");
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4 The new client code. The client interacts in the same way as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.client;

import com.gaurav.adapter.Item;
import com.gaurav.adapter.OMSAdapter;
import com.gaurav.adapter.Payment;

public class AdapterClient {

  public static void main(String[] args) {

    /* Create an order and add items */

    //LegacyOMS oms = new LegacyOMS();
    /* Use Adapter class with the same interface */
    OMSAdapter oms = new OMSAdapter();

    oms.addItem(new Item("Italian Pizza", 6.99));
    oms.addItem(new Item("Wine", 9.99));
    oms.addItem(new Item("Beer", 5.99));
    oms.addItem(new Item("Red Apple", 1.49));
    oms.addItem(new Item("Almonds", 11.99));

    System.out.println("---------------------------------");
    /* Create payment and make payment */
    oms.makePayment(new Payment("CASH", 20.00));
    oms.makePayment(new Payment("CREDIT", 10.00));
    oms.makePayment(new Payment("DEBIT", 10.00));
    System.out.println("---------------------------------");

  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[output]
Italian Pizza   6.99
Wine            9.99
Beer            5.99
Red Apple       1.49
Almonds        11.99
---------------------------------
CASH    20.0$
CREDIT  10.0$
DEBIT   10.0$
---------------------------------

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Class adapter can override adaptee's behavior.&lt;/li&gt;
&lt;li&gt;Objects adapter allows a single adapter to work with many adaptees.&lt;/li&gt;
&lt;li&gt;Helps achieve reusability and flexibility.&lt;/li&gt;
&lt;li&gt;Client class is not complicated by having to use a different interface and can use polymorphism to swap between different implementations of adapters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Object adapter involves an extra level of indirection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real World Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Power adapters&lt;/li&gt;
&lt;li&gt;Memory card adapters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#software-examples"&gt;
  &lt;/a&gt;
  Software Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wrappers used to adopt 3rd parties libraries and frameworks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#java-sdk-examples"&gt;
  &lt;/a&gt;
  Java SDK Examples
&lt;/h4&gt;

&lt;p&gt;java.util.Arrays asList()&lt;br&gt;
java.util.Collections list()&lt;br&gt;
java.util.Collections enumeration()&lt;br&gt;
java.io.InputStreamReader(InputStream) (returns a Reader)&lt;br&gt;
java.io.OutputStreamWriter(OutputStream) (returns a Writer)&lt;/p&gt;

&lt;p&gt;Want to discuss more &lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/gauravratnawat"&gt;Lets have a Coffee&lt;/a&gt;&lt;/p&gt;

</description>
      <category>pattern</category>
      <category>java</category>
      <category>design</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Interview questions for JS With Answer</title>
      <author>coderhax</author>
      <pubDate>Fri, 26 Nov 2021 17:49:36 +0000</pubDate>
      <link>https://dev.to/coderhax/interview-questions-for-js-with-answer-cbl</link>
      <guid>https://dev.to/coderhax/interview-questions-for-js-with-answer-cbl</guid>
      <description>&lt;p&gt;JavaScript, commonly known as JS, is a server-side programming language with a high level. Because JavaScript is widely utilized to create diverse online apps around the world, there are several possibilities for JavaScript development.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;Candidates must pass the interview in order to get a job in JavaScript programming. Various JavaScript interview questions and responses are posed to them.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;The list of JavaScript interview questions and answers that are most likely to be asked during the interview follows. Depending on their experience and other circumstances, candidates may be asked anything from simple JavaScript interview questions to advanced JS interview questions.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Let's Begin&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;1. What is JavaScript?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;JavaScript is a client-side and server-side scripting language inserted into HTML pages and is understood by web browsers. JavaScript is also an Object-based Programming language.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;2&lt;/b&gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;&lt;b&gt;What are JavaScript Data Types?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Following are the JavaScript Data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="comparison-operators"&gt;3. Difference between “ == “ and “ === “ operators.&lt;/h3&gt;Both are comparison operators. The difference between both the operators is that,“==” is used to compare values whereas, “ === “ is used to compare both value and types. &lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;span&gt;4. &lt;/span&gt;&lt;span&gt;&lt;b&gt;Which is faster between JavaScript and an ASP script&lt;/b&gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;JavaScript is faster. JavaScript is a client-side language,, and thus it does not need the assistance of the webserver to execute. On the other hand, ASP is a server-side language and hence is always slower than JavaScript. Javascript now is also a server-side language (nodejs).&lt;/p&gt;

&lt;h3 id="nan-property"&gt;5. What is NaN property in JavaScript?&lt;/h3&gt;NaN property represents &lt;b&gt;“Not-a-Number” &lt;/b&gt;value. It indicates a value which is not a legal number.&lt;br&gt;&lt;br&gt;&lt;b&gt;typeof &lt;/b&gt;of a NaN will return a &lt;b&gt;Number &lt;/b&gt;.&lt;br&gt;&lt;br&gt;To check if a value is NaN, we use the &lt;b&gt;isNaN() &lt;/b&gt;function,&lt;br&gt;&lt;br&gt;&lt;h4&gt;**Note- isNaN() function converts the given value to a Number type, and then equates to NaN.&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;6. Is it possible to break JavaScript Code into several lines?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Breaking within a string statement can be done by using a backslash, ‘\,’ at the end of the first line.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;7. Which company developed JavaScript?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Netscape is the software company that developed JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;8. What are undeclared and undefined variables?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Undeclared variables are those that do not exist in a program and are not declared. If the program tries to read the value of an undeclared variable, then a runtime error is encountered.&lt;/p&gt;
&lt;p&gt;Undefined variables are those that are declared in the program but have not been given any value. If the program tries to read the value of an undefined variable, an undefined value is returned.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;9. What is === operator?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;=== is called a strict equality operator, which returns true when the two operands have the same value without conversion. &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;10. Can an anonymous function be assigned to a variable?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Yes, you can assign an anonymous function to a variable.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;11. What do you mean by NULL in Javascript&lt;/b&gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The NULL value is used to represent no value or no object. It implies no object or null string, no valid boolean value, no number, and no array object.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;12. What is the function of the delete operator?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The delete keyword is used to delete the property as well as its value.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;13. What are escape characters?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Escape characters (Backslash) is used when working with special characters like single quotes, double quotes, apostrophes, and ampersands. Place backslash before the characters to make it display.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;14. What are JavaScript Cookies?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Cookies are the small test files stored in a computer, and they get created when the user visits the websites to store information that they need. Examples could be User Name details and shopping cart information from previous visits.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;15. What is the ‘Strict Mode in JavaScript, and how can it be enabled?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Strict Mode adds certain compulsions to JavaScript. Under the strict Mode, JavaScript shows errors for a piece of code, which did not show an error before, but might be problematic and potentially unsafe. Strict Mode also solves some mistakes that hamper the JavaScript engines from working efficiently.&lt;/p&gt;
&lt;p&gt;Strict mode can be enabled by adding the string literal “use strict” above the file. &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;16. What is for-in loop in Javascript?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The for-in loop is used to loop through the properties of an object.&lt;/p&gt;
&lt;p&gt;The syntax for the for-in loop is –&lt;/p&gt;
&lt;pre&gt;for (variable name in object){
    statement or block to execute
}&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;17. Is JavaScript case sensitive? Give its example.&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Yes, JavaScript is case-sensitive. For example, a function parseInt is not the same as the function Parseint. &lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;b&gt;18. What boolean operators can be used in JavaScript?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The ‘And’ Operator (&amp;amp;&amp;amp;), ‘Or’ Operator (||), and the ‘Not’ Operator (!) can be used in JavaScript.&lt;/p&gt;
&lt;p&gt;*Operators are without the parenthesis.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Support my work&lt;/b&gt;: &lt;/p&gt;

&lt;a href="https://www.buymeacoffee.com/codelivly"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJqR521s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEhW_7Pu9lj6_eV5BWA7VZk80-pyRpCMXv8YwnRj5Yeb_5VNtj-KNDVIZPz1KKdOPrcYvqOlQOZoHqvMHBZKweJ9B_miCOrfyPUGSDuodfkos06UeMzVWIqSssR36AGpnDOw_jFqQ_WM1IGn7wRdAe8WLC0BAdoaYAiHARPTt5a2HuNPvwET-hgH6ZA%3Ds320" width="320" height="77"&gt;&lt;/a&gt;&lt;br&gt;








</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Become a Full-Stack Web Developer in 2021: A Guide to Success</title>
      <author>Shaheer</author>
      <pubDate>Fri, 26 Nov 2021 16:56:43 +0000</pubDate>
      <link>https://dev.to/shaheer912/become-a-full-stack-web-developer-in-2021-a-guide-to-success-34jf</link>
      <guid>https://dev.to/shaheer912/become-a-full-stack-web-developer-in-2021-a-guide-to-success-34jf</guid>
      <description>&lt;p&gt;If you want to be a successful full-stack web developer, there are some things you need to know. From HTML and CSS to JavaScript and React, it can be hard to keep up with the latest development trends. In this article, we'll go over what a full-stack web developer does and how they do it. We'll also talk about which languages you'll need to learn from beginner to advanced levels. You'll even get a glimpse into what employers are looking for in their candidates! So if you're interested in becoming a full-stack web developer, read on for a guide of success!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-fullstack-web-developer"&gt;
  &lt;/a&gt;
  What is a Full-Stack Web Developer?
&lt;/h2&gt;

&lt;p&gt;A full-stack web developer is someone who is knowledgeable in all aspects of web development, including design and the back-end. Full-stack developers usually specialize in a specific language, but can learn any language in order to be a full-stack developer.&lt;/p&gt;

&lt;p&gt;A full-stack developer will typically be a jack-of-all-trades, but master of at least one. This means that they have a full understanding of front-end technologies and their impact on user experience. They will also have a deep understanding of back-end technologies and how they interact with the front-end.&lt;/p&gt;

&lt;p&gt;In fact, many developers have an idea of what they want to specialize in from when they first start learning to code. For example, some developers might enjoy the design aspect of web development more than the coding aspect, which is why they might choose to specialize in front-end technologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-skills-do-i-need-to-become-a-fullstack-web-developer"&gt;
  &lt;/a&gt;
  What skills do I need to become a Full-Stack Web Developer?
&lt;/h2&gt;

&lt;p&gt;You'll need to learn HTML, CSS, and JavaScript to become a full-stack web developer. HTML and CSS are the backbone of the internet, and JavaScript is what builds functionality. So if you're serious about becoming a full-stack web developer, these three languages are a must!&lt;/p&gt;

&lt;p&gt;But that's not all. You'll also need to learn languages like React and Ruby on Rails. These languages will help you build more advanced websites and complex projects.&lt;br&gt;
HTML: HTML is the code for structuring and styling webpages. It's what you use to set up your website and how it looks. HTML is the backbone of the internet.&lt;/p&gt;

&lt;p&gt;CSS: CSS stands for Cascading Style Sheets. It's what you use to style your HTML, which includes colors, fonts, spacing, and more.&lt;/p&gt;

&lt;p&gt;JavaScript: JavaScript is a programming language used to build interactive websites and other online features. It's what makes your website dynamic!&lt;/p&gt;

&lt;p&gt;React: React is a JavaScript library that helps your website run efficiently and respond quickly to users. The idea behind React is that it creates one single page instead of separating each page as a new "view."&lt;/p&gt;

&lt;p&gt;Ruby on Rails: Ruby on Rails is a programming language used for building complex web applications&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-much-time-will-it-take-me-to-learn-everything-i-need-to-know"&gt;
  &lt;/a&gt;
  How much time will it take me to learn everything I need to know?
&lt;/h2&gt;

&lt;p&gt;There's no one answer to this question, but it's important to know what you're getting into. Full-stack web development is a difficult and time-consuming endeavor. It will require long hours of studying and practice to learn the languages and frameworks that are required to get the job done.&lt;/p&gt;

&lt;p&gt;If you're just getting started, then it might be best to work on your fundamentals. Learning HTML and CSS will help you grasp how pages are structured and how to style content. Scripting languages, like JavaScript, will teach you how to add more complex functionality to web pages. Finally, React.js will give you the power to create interactive web applications.&lt;/p&gt;

&lt;p&gt;It's important to remember that HTML, CSS, JavaScript, and React are just the basics. If you want to be competitive for an entry-level full-stack developer position, then you'll need more than just these languages. Knowing frameworks like Angular and Node.js will be crucial for getting a leg up on your competition!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-will-this-career-change-my-life-down-the-road"&gt;
  &lt;/a&gt;
  How will this career change my life down the road?
&lt;/h2&gt;

&lt;p&gt;What does it take to become a full-stack web developer?&lt;/p&gt;

&lt;p&gt;Becoming a full-stack web developer requires many different skills. You'll need to be comfortable working on the front end (HTML, CSS, JavaScript) and on the back end (SQL, Ruby, Rails). You'll also need to be good with software design and know how to code.&lt;/p&gt;

&lt;p&gt;One of the most important things for employers is being able to code in multiple languages. That's why many full-stack developers learn how to code in languages like Python, PHP, and C++.&lt;/p&gt;

&lt;p&gt;You may be wondering what career path this will lead you down in the future. As a full-stack developer, you'll have the flexibility to work in many different environments. You could be working on websites, apps, e-commerce stores, or whatever else your company needs you to do.&lt;/p&gt;

&lt;p&gt;There are many career opportunities for full-stack web developers that are available in the workforce today. It all depends on what you want!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-should-i-prepare-to-become-a-full-stack-developer"&gt;
  &lt;/a&gt;
  How should I prepare to become a full stack developer?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#practice-technical-interview-questions"&gt;
  &lt;/a&gt;
  Practice Technical Interview Questions
&lt;/h3&gt;

&lt;p&gt;There’s no easy way to say this: you need to practice if you want to get really good at answering technical interview questions. Most people don’t know how to address these questions, and feel like they aren’t prepared for them. You can get yourself ready by preparing with sample solutions and practicing out loud.&lt;/p&gt;

&lt;p&gt;The best way to prepare is by taking the time to answer real examples of these question types, and then pair that with practice mock interviews. Have a friend or family member ask you the questions while you practice reading your responses out loud.&lt;/p&gt;

&lt;p&gt;Here are some questions for you to practice: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How is a bubble sort algorithm implemented?&lt;/li&gt;
&lt;li&gt;How to print the first non-repeated character from a string?&lt;/li&gt;
&lt;li&gt;How to find the first non repeated character of a given String?&lt;/li&gt;
&lt;li&gt;How do you find duplicate numbers in an array if it contains multiple duplicates?&lt;/li&gt;
&lt;li&gt;How do you remove duplicates from an array in place?&lt;/li&gt;
&lt;li&gt;How are duplicates removed from an array without using any library?&lt;/li&gt;
&lt;li&gt;How do you find the middle element of a singly linked list in one pass?&lt;/li&gt;
&lt;li&gt;How do you check if a given linked list contains a cycle? How will you find the initial node of the cycle?&lt;/li&gt;
&lt;li&gt;How do you reverse a singly linked list without recursion?&lt;/li&gt;
&lt;li&gt;How is a binary search tree implemented?&lt;/li&gt;
&lt;li&gt;How do you traverse a given binary tree in preorder without recursion?&lt;/li&gt;
&lt;li&gt;How do you print all nodes of a given binary tree using inorder traversal without recursion?&lt;/li&gt;
&lt;li&gt;How is a merge sort algorithm implemented?&lt;/li&gt;
&lt;li&gt;How is a radix sort algorithm implemented?&lt;/li&gt;
&lt;li&gt;How do you swap two numbers without using the third variable?&lt;/li&gt;
&lt;li&gt;How do you design a vending machine?&lt;/li&gt;
&lt;li&gt;Write a program to find prime factors of an integer?&lt;/li&gt;
&lt;li&gt;What is depth First Search Algorithm for a binary tree?&lt;/li&gt;
&lt;li&gt;Difference between a stable and unstable sorting algorithm?&lt;/li&gt;
&lt;li&gt;What is the difference between Comparison and Non-Comparison Sorting Algorithms?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#know-your-data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  Know Your Data Structures and Algorithms
&lt;/h3&gt;

&lt;p&gt;Data structures and algorithms are the foundation of computer science. They are also what will make or break your career as a software engineer. As an engineer, you should know how to implement data structures, how they work, what are the trade-offs of each one, and how to use them correctly.&lt;/p&gt;

&lt;p&gt;You may not think that knowing data structures and algorithms will make a difference to the high-level responsibilities you’ll be taking on in your career, but you’d be surprised. Many companies are looking for candidates who know their stuff when it comes to data structures and algorithms. If you’re interviewing for a position at Salesforce, for example, it would be smart to brush up on your knowledge of sorting algorithms.&lt;/p&gt;

&lt;p&gt;For example, if you're given a question like: "What is the longest increasing subsequence in a given unsorted array?" You need to be able to answer it and know the algorithm needed to solve the problem.&lt;/p&gt;

&lt;p&gt;Asking questions about how data is organized and what algorithms can be used to solve problems will help you prepare for a technical programming interview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#judocodercom-the-best-coding-interview-preparation-website-you-can-trust"&gt;
  &lt;/a&gt;
  &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; – The Best Coding Interview Preparation Website you can trust
&lt;/h3&gt;

&lt;p&gt;Among many other platforms, JudoCoder is the most reliable and efficient coding interview preparation site. Here, many coding problem-solving programs, challenges, and question-answer challenges prepare you well for your upcoming interview.&lt;/p&gt;

&lt;p&gt;JudoCoder has a lot of coding challenge questions for your practice and knowledge. They will strengthen your programming concepts and skills. The challenges, and questions focus on various coding aspects such as algorithms, arrays, data structures, BST, Anagrams, recursion, backtracking, Hashmaps, dictionaries, string manipulation, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you're ready to take the next step in your career, then this guide is for you. You'll learn what it takes to become a successful full-stack web developer with the languages and skills necessary to get you there.&lt;/p&gt;

&lt;p&gt;There are many free resources available online, but if you want the best education possible, then it may be time to invest in a computer programming degree.&lt;/p&gt;

&lt;p&gt;The good news is, &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; provides handpicked selection of all sorts of &lt;a href="https://judocoder.com"&gt;data structures and algorithm questions&lt;/a&gt;, most of these questions have been asked in a real interview!.&lt;/p&gt;

&lt;p&gt;I would suggest you create a free account at judocoder.com and start practicing your skills. You will be prepared in no time!..&lt;/p&gt;

&lt;p&gt;No matter what path you choose, now is the time to prepare for the future—by becoming a full-stack web developer.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>If you use React, DO THIS!</title>
      <author>Tuomo Kankaanpää</author>
      <pubDate>Fri, 26 Nov 2021 16:41:14 +0000</pubDate>
      <link>https://dev.to/tumee/if-you-use-react-do-this-gh8</link>
      <guid>https://dev.to/tumee/if-you-use-react-do-this-gh8</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;my newsletter&lt;/a&gt; last week. I publish previous week's newsletter here on the blog. If you want to read these as soon as they are published, &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;sign up&lt;/a&gt; for the newsletter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ahoy,&lt;/p&gt;

&lt;p&gt;Are you using React? If your answer is YES then you need to keep reading!&lt;/p&gt;

&lt;p&gt;When using React, browsing the React docs is something that at least I do frequently. So I was super excited when I learned that the React team is rewriting the documentation and we can actually already access the new docs!&lt;/p&gt;

&lt;p&gt;The new React.js docs are still in beta and a work in progress but by going to &lt;a href="https://beta.reactjs.org"&gt;beta.reactjs.org&lt;/a&gt; you can already take them for a spin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-new-in-the-docs"&gt;
  &lt;/a&gt;
  So what's new in the docs?
&lt;/h2&gt;

&lt;p&gt;One of the things that I really like in the new docs is the fact that all the explanations are written using Hooks and functional components rather than classes and class based components.&lt;/p&gt;

&lt;p&gt;For me I'm nowadays always using hooks + functional components and the only time I use class based components is when I'm working with an older codebase and modify existing components.&lt;/p&gt;

&lt;p&gt;I uploaded a video this week talking about all my thoughts on the new docs and I also go more in depth on what's new in them. You can watch the video on the &lt;a href="https://www.youtube.com/tuomokankaanpaa"&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LyrZEho45yw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's all for this week!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Tuomo&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Building a real-time web application with Materialize and AdonisJS</title>
      <author>Bobby Iliev</author>
      <pubDate>Fri, 26 Nov 2021 16:22:17 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/building-a-real-time-web-application-with-materialize-and-adonisjs-2ief</link>
      <guid>https://dev.to/bobbyiliev/building-a-real-time-web-application-with-materialize-and-adonisjs-2ief</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this tutorial, we are going to build a web application using &lt;a href="https://adonisjs.com/"&gt;AdonisJS&lt;/a&gt; and integrate it with &lt;a href="https://materialize.com"&gt;Materialize&lt;/a&gt; to create a real-time dashboard based on streaming data using standard SQL.&lt;/p&gt;

&lt;p&gt;Materialize lets you define views you want to maintain on your data, just as you would with any SQL table, and then get the results in real-time, unlike traditional databases which frequently act as if they've never been asked that question before.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;You need to have the following things installed before getting started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/get-docker/"&gt;Install Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Install Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/download/package-manager"&gt;Install Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-materialize"&gt;
  &lt;/a&gt;
  What is Materialize
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://materialize.com"&gt;Materialize&lt;/a&gt; is a streaming database&lt;/strong&gt; that takes data coming from sources like Kafka, PostgreSQL, S3 buckets, and more and allows you to effectively transform it in real-time using SQL.&lt;/p&gt;

&lt;p&gt;Unlike a traditional database, Materialize is able to incrementally maintain views on top of streaming data, providing fresh and correct results as new data arrives. This means that, instead of recomputing the view from scratch every time it needs to be updated, it only does work proportional to the changes in its inputs, so it is fast and efficient.&lt;/p&gt;

&lt;p&gt;In the context of web development, Materialize can be used as a backend to power real-time applications (as we'll see in this demo)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-a-materialize-demo"&gt;
  &lt;/a&gt;
  Running a Materialize Demo
&lt;/h2&gt;

&lt;p&gt;For the sake of this tutorial we are going to run the following Materialize Demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/mz-http-logs"&gt;Materialize - Log Parsing Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The setup of the demo is the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vyhmx_PL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/141309644-d80cffe4-39f9-4afa-a211-907f9de7d74e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vyhmx_PL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/141309644-d80cffe4-39f9-4afa-a211-907f9de7d74e.png" alt="Materialize log parsing demo diagram" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would not get into too much details here, but if you have not gone through this demo before, make sure to read it!&lt;/p&gt;

&lt;p&gt;To run the demo, follow these steps:&lt;/p&gt;

&lt;p&gt;First things first, before you could run the demo, you need to clone the repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bobbyiliev/mz-http-logs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Once that is done, switch to the repository directory:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd mz-http-logs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then start all services:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, you would have your Materialize instance up and running. Next we will prepare our AdonisJS installation and use AdonisJS to create our Materialize sources and views!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-adonisjs"&gt;
  &lt;/a&gt;
  What is AdonisJS
&lt;/h1&gt;

&lt;p&gt;AdonisJS is a web framework for Node.js. It includes everything that you would need to create a fully functional web application or an API.&lt;/p&gt;

&lt;p&gt;AdonisJS has been inspired by Laravel and it has its own ORM, Auth support, and a CLI tool called Ace which is very similar to Artisan.&lt;/p&gt;

&lt;p&gt;At the end we would extend the Log parsing Materialize demo and have the following setup:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M_vc5dnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142433682-36085296-0292-416d-811a-3d25be08fa24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M_vc5dnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142433682-36085296-0292-416d-811a-3d25be08fa24.png" alt="Streaming Data with AdonisJS and Materialize " width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-adonisjs"&gt;
  &lt;/a&gt;
  Install AdonisJS
&lt;/h1&gt;

&lt;p&gt;Let's start by installing AdonisJS. To do so, you would need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init adonis-ts-app@latest hello-materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you run that, you will be asked to select a project structure. You will be able to choose between an API, Web App, and a minimal possible AdonisJS app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CUSTOMIZE PROJECT
❯ Select the project structure …  Press &amp;lt;ENTER&amp;gt; to select
  api   (Tailored for creating a REST API server)
❯ web   (Traditional web application with server-rendered templates)
  slim  (A smallest possible AdonisJS application)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this tutorial let's go with the &lt;code&gt;web&lt;/code&gt; app! Using your arrow keys select &lt;code&gt;web&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;After that you will be asked to choose a name for the project, I will leave this as &lt;code&gt;hello-materialize&lt;/code&gt; but feel free to choose a different name.&lt;/p&gt;

&lt;p&gt;I will then press enter and say yes to the rest of the settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;❯ Enter the project name · hello-materialize
❯ Setup eslint? (y/N) · y
❯ Configure webpack encore for compiling frontend assets? (y/N) › y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will instantiate the project and might take up to a minute to complete:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmkJCJzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142430318-49200f63-394e-4698-aed0-7461d8a8a060.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmkJCJzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142430318-49200f63-394e-4698-aed0-7461d8a8a060.png" alt="AdonisJS initialization" width="880" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once ready, you can &lt;code&gt;cd&lt;/code&gt; into the new project directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd hello-materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then start the webserver:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace serve --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are coming from the Laravel world, this would be just like running &lt;code&gt;php artisan serve&lt;/code&gt;. The &lt;code&gt;ace&lt;/code&gt; CLI tool is just like &lt;code&gt;artisan&lt;/code&gt; and comes with a lot of the same functionalities.&lt;/p&gt;

&lt;p&gt;To check all of the &lt;code&gt;ace&lt;/code&gt; commands, you can run: &lt;code&gt;node ace&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-lucid"&gt;
  &lt;/a&gt;
  Installing Lucid
&lt;/h1&gt;

&lt;p&gt;Lucid is the AdonisJS ORM. It is quite similar to Laravel Eloquent.&lt;/p&gt;

&lt;p&gt;Lucid comes with an Active Record ORM, Query Builder, Migrations, Seeds, and Factories.&lt;/p&gt;

&lt;p&gt;Let's go ahead and install it! To do so, just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @adonisjs/lucid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, you would need to do a quick configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-lucid"&gt;
  &lt;/a&gt;
  Configuring Lucid
&lt;/h2&gt;

&lt;p&gt;In order to configure Lucid, you need to run the following &lt;code&gt;ace&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace configure @adonisjs/lucid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be asked to select the database driver that you want to use. As Materialize is wire-compatible with PostgreSQL, you can connect to it using any &lt;code&gt;pg&lt;/code&gt; driver; here, make sure to select PostgreSQL!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![AdonisJS lucid configuration](https://user-images.githubusercontent.com/21223421/142431728-ac88085b-34cb-4ebb-83c7-b0cae9fb455d.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you will be asked to select where you want to display the configuration instructions. I chose &lt;code&gt;In the terminal&lt;/code&gt;, which prints out the necessary environment variables that you have to add to your &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-materialize-env-variables"&gt;
  &lt;/a&gt;
  Configure the Materialize env variables
&lt;/h2&gt;

&lt;p&gt;In order to let our AdonisJS application connect to Materialize, we need to change the &lt;code&gt;PG_*&lt;/code&gt; details in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;With your favorite text editor, open the &lt;code&gt;.env&lt;/code&gt; file and update the &lt;code&gt;PG_&lt;/code&gt; environment variables to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_CONNECTION=pg
PG_HOST=localhost
PG_PORT=6875
PG_USER=materialize
PG_PASSWORD=
PG_DB_NAME=materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will allow AdonisJS to connect to Materialize just as it would when connecting to PostgreSQL.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that Materialize doesn’t yet support the full system catalog of PostgreSQL (we're working on it!), which means that ORMs like Lucid, Prisma, Sequelize, or TypeORM might fail during some attempts to interact with Materialize. As we work to broaden &lt;a href="https://github.com/MaterializeInc/materialize/issues/2157"&gt;&lt;code&gt;pg_catalog&lt;/code&gt; coverage&lt;/a&gt;, the integration with these tools will gradually improve!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-controller"&gt;
  &lt;/a&gt;
  Creating a Controller
&lt;/h1&gt;

&lt;p&gt;Let's create a controller where we will add the functionality that would allow us to connect to Materialize!&lt;/p&gt;

&lt;p&gt;As the Materialize demo is simulating an application log with a lot of visitors, let's call our AdonisJS controller &lt;code&gt;VisitorsController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace make:controller VisitorsController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a controller file at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app/Controllers/Http/VisitorsController.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's create the routes that we would need!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-adonisjs-routes"&gt;
  &lt;/a&gt;
  Creating the AdonisJS routes
&lt;/h2&gt;

&lt;p&gt;Your routes file is stored at &lt;code&gt;start/routes.ts&lt;/code&gt;. In there we can specify our application URLs and map them to different controllers and methods!&lt;/p&gt;

&lt;p&gt;We do not yet have the methods ready, but we know that we would need the following routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/source&lt;/code&gt;: When visited, this route would create a Materialize &lt;a href="https://materialize.com/docs/sql/create-source/"&gt;source&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/view&lt;/code&gt;: When visited, this route would create a &lt;a href="https://materialize.com/docs/sql/create-source/"&gt;materialized view&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/visitors&lt;/code&gt;: This route would return an event stream with all of the latest changes to our materialized view&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt;: This will be the landing page where we will display the streaming data that we are getting from the &lt;code&gt;/visitors&lt;/code&gt; endpoint and Materialize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open your routes file at &lt;code&gt;start/routes.ts&lt;/code&gt; and update it so that it has the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Route from '@ioc:Adonis/Core/Route'

Route.get('/', 'VisitorsController.index')
Route.get('/visitors', 'VisitorsController.visitors')
Route.get('/source', 'VisitorsController.source')
Route.get('/view', 'VisitorsController.view')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's add a method that would allow us to create a Materialize source as described in the &lt;a href="https://github.com/bobbyiliev/mz-http-logs"&gt;Materialize Log Parsing Demo&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-materialize-source-from-logs"&gt;
  &lt;/a&gt;
  Creating a Materialize Source from logs
&lt;/h2&gt;

&lt;p&gt;If you were accessing Materialize directly via a SQL client (like &lt;code&gt;psql&lt;/code&gt;), in order to access data from a continuously produced log file, you would execute the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;FILE&lt;/span&gt; &lt;span class="s1"&gt;'/log/requests'&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;REGEX&lt;/span&gt; &lt;span class="s1"&gt;'(?P&amp;lt;ip&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="s1"&gt;{1,3}&lt;/span&gt;&lt;span class="se"&gt;\.\d&lt;/span&gt;&lt;span class="s1"&gt;{1,3}&lt;/span&gt;&lt;span class="se"&gt;\.\d&lt;/span&gt;&lt;span class="s1"&gt;{1,3}&lt;/span&gt;&lt;span class="se"&gt;\.\d&lt;/span&gt;&lt;span class="s1"&gt;{1,3}) - - &lt;/span&gt;&lt;span class="se"&gt;\[&lt;/span&gt;&lt;span class="s1"&gt;(?P&amp;lt;ts&amp;gt;[^]]+)&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;&lt;span class="s1"&gt; "(?P&amp;lt;path&amp;gt;(?:GET /search/&lt;/span&gt;&lt;span class="se"&gt;\?&lt;/span&gt;&lt;span class="s1"&gt;kw=(?P&amp;lt;search_kw&amp;gt;[^ ]*) HTTP/&lt;/span&gt;&lt;span class="se"&gt;\d\.\d&lt;/span&gt;&lt;span class="s1"&gt;)|(?:GET /detail/(?P&amp;lt;product_detail_id&amp;gt;[a-zA-Z0-9]+) HTTP/&lt;/span&gt;&lt;span class="se"&gt;\d\.\d&lt;/span&gt;&lt;span class="s1"&gt;)|(?:[^"]+))" (?P&amp;lt;code&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="s1"&gt;{3}) -'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how we could do that via AdonisJS!&lt;/p&gt;

&lt;p&gt;First, open the &lt;code&gt;app/Controllers/Http/VisitorsController.ts&lt;/code&gt; file with your favorite text editor.&lt;/p&gt;

&lt;p&gt;The file would have the following content initially:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'

export default class VisitorsController {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few things that we would want to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import Lucid:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Database from '@ioc:Adonis/Lucid/Database'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then inside the VisitorsController class, let's create a method called &lt;code&gt;source&lt;/code&gt; and
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Lucid/Database&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;VisitorsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//Using Ludic to connect to Materialize, we are executing a CREATE SOURCE statement&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`CREATE SOURCE requests
                FROM FILE '/log/requests' WITH (tail = true)
                FORMAT REGEX '(\\?P&amp;lt;ip&amp;gt;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) - - \[(\\?P&amp;lt;ts&amp;gt;[^]]+)\] "(\\?P&amp;lt;path&amp;gt;(\\?:GET /search/\\\?kw=(\\?P&amp;lt;search_kw&amp;gt;[^ ]*) HTTP/\d\.\d)|(\\?:GET /detail/(\\?P&amp;lt;product_detail_id&amp;gt;[a-zA-Z0-9]+) HTTP/\d\.\d)|(\\?:[^"]+))" (\\?P&amp;lt;code&amp;gt;\d{3}) -';`&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you were to visit the &lt;code&gt;/source&lt;/code&gt; URL via your browser (&lt;code&gt;http://127.0.0.1:3333/source&lt;/code&gt;) it would create your Materialize source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FWItRtrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142441564-24faddfb-5b3d-4ef8-8653-5156bcbea747.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FWItRtrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142441564-24faddfb-5b3d-4ef8-8653-5156bcbea747.png" alt="Source created" width="514" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-materialize-view"&gt;
  &lt;/a&gt;
  Creating a Materialize View
&lt;/h2&gt;

&lt;p&gt;You may be familiar with materialized views from the world of traditional databases like PostgreSQL, which are essentially cached queries. The unique feature here is the materialized view we are about to create is automatically kept up-to-date.&lt;/p&gt;

&lt;p&gt;Let's do the same thing as before, but to create a materialized view based on our file source! To do that, let's create a method called &lt;code&gt;view&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Add this right after the end of the &lt;code&gt;source&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//Using Ludic to connect to Materialize, we are executing a CREATE VIEW statement&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`CREATE OR REPLACE MATERIALIZED VIEW unique_visitors AS
             SELECT count(DISTINCT ip) FROM requests;`&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our materialized view would show the count of the unique visitors flowing through our demo application.&lt;/p&gt;

&lt;p&gt;To create the view, visit the &lt;code&gt;/view&lt;/code&gt; URL via your browser (eg. &lt;code&gt;http://127.0.0.1:3333/view&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;With that, our view will be created and we can move on to the next step!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-event-stream"&gt;
  &lt;/a&gt;
  Creating an event stream
&lt;/h2&gt;

&lt;p&gt;You can query the new materialized view, that we've just created, as usual with a standard &lt;code&gt;SELECT&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;unique_visitors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, in order to take full advantage of the incrementally updated materialized view right from our AdonisJS app, rather than querying Materialize with a standard &lt;code&gt;SELECT&lt;/code&gt; to get the state of the view at a point in time, we will use a &lt;code&gt;TAIL&lt;/code&gt; statement to request a stream of updates as the view changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;visitors&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// First we set a header to identify that this would be an event stream&lt;/span&gt;
        &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/event-stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Then we declare a TAIL cursor&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BEGIN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECLARE visitors_c CURSOR FOR TAIL unique_visitors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Finally we use FETCH in a loop to retrieve each batch of results as soon as it is ready&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FETCH ALL visitors_c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`data: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;\n\n`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about &lt;code&gt;TAIL&lt;/code&gt;, make sure to check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/tail/"&gt;Materialize &lt;code&gt;TAIL&lt;/code&gt; statement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you were to now visit the &lt;code&gt;/visitors&lt;/code&gt; URL via your browser, you would see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1zQ-3kC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/142487272-4ae77597-b871-453d-9b79-efbc5a534d5a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1zQ-3kC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/142487272-4ae77597-b871-453d-9b79-efbc5a534d5a.gif" alt="adonisjs Materialize streaming data" width="880" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let's create a view where we would use the &lt;code&gt;/visitors&lt;/code&gt; endpoint as an event source and continuously update our web page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#displaying-the-number-of-unique-visitors-on-the-frontend"&gt;
  &lt;/a&gt;
  Displaying the number of unique visitors on the frontend
&lt;/h3&gt;

&lt;p&gt;First, before we get started, make sure that you've executed the following command to configure Encore which is used to compile and serve the frontend assets for your AdonisJS app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace configure encore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a new file at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resources/views/visitors.edge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Materialize and AdonisJS&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  @entryPointStyles('app')
  @entryPointScripts('app')
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Hi there! &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"subtitle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        The number of unique visitors is: &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;eventSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://127.0.0.1:3333/visitors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;eventSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;//const count = omit(data, 'mz_timestamp', 'mz_diff', 'mz_progressed')&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mz_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mz_progressed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mz_diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Old count: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New count: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;countDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick rundown of the main things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;new EventSource&lt;/code&gt;: First we define a new &lt;code&gt;EventSource&lt;/code&gt; and specify our &lt;code&gt;/visitors&lt;/code&gt; endpoint.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;eventSource.onmessage&lt;/code&gt;: Then we listen for new messages to show in the EventStream.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JSON.parse(e.data)&lt;/code&gt;: After that we parse our data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;data.forEach&lt;/code&gt;: Finally we run a loop and update the total unique visitors counter on the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if you were to visit your AdonisJS application you would see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRyts195--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/142488313-234fe614-c9f8-4e9a-bf88-e116444167fc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRyts195--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/142488313-234fe614-c9f8-4e9a-bf88-e116444167fc.gif" alt="adonisjs Materialize event source" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, rather than making a huge amount of AJAX requests, we just tap into the stream and keep our web page up to date with the latest changes from Materialize!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is pretty much it! You've now built a web application using AdonisJS that connects to Materialize and pulls the number of unique visitors from your application as new data is logged.&lt;/p&gt;

&lt;p&gt;As a next step, make sure to head over to the Materialize Docs and try out some of the available demos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/demos/"&gt;Materialize Demos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about AdonisJS, you can also find the documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.adonisjs.com/guides/context"&gt;AdonisJS documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find a link to the AdonisJS source code from this demo here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/mz-adonisjs-demo"&gt;Streaming Data wiht Materialize and AdonisJS Demo files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about Streaming SQL, make sure to check out this post here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/streaming-sql-intro/"&gt;Streaming SQL: What is it, why is it useful?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope that this was helpful!&lt;/p&gt;

</description>
      <category>node</category>
      <category>database</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Best Ultimate Guide To Build A Random Quote Generator 2022</title>
      <author>Jai Krishna</author>
      <pubDate>Fri, 26 Nov 2021 16:08:16 +0000</pubDate>
      <link>https://dev.to/jaikt/best-ultimate-guide-to-build-a-random-quote-generator-2022-8m4</link>
      <guid>https://dev.to/jaikt/best-ultimate-guide-to-build-a-random-quote-generator-2022-8m4</guid>
      <description>&lt;p&gt;Hey Everyone 👋, today’s article is aimed at beginners trying to build a random quote generator using JavaScript. This will definitely make you understand the interaction between the frontend and backend and how they work on a web browser.&lt;/p&gt;

&lt;p&gt;In my previous post, I had shared about Amazing Text To Speech Converter With HTML, CSS &amp;amp; JavaScript (2021) – RoyalityFree Blog. I received a great response to that, so I thought why not share more of my projects for free 🎉.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I've worked very hard on this project and the output, was making it free 🤗. You can too support me in return for free by stargazing the official repository &lt;a href="https://github.com/RoyalityFreeWebHosting/RandomQuoteGenerator/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for this project, we’ll build a random quote generator that will display a quote fetched from an API on a button click or a default set. To get started, like always you’ll need three essential things that are forever useful for any sort of project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A web browser&lt;/li&gt;
&lt;li&gt;A code editor&lt;/li&gt;
&lt;li&gt;A desire boost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this tutorial, I will use the Microsoft Edge browser, Visual Studio Code as my code editor, and most importantly a boost in my desire to build something till the end! If you don’t seem familiar with my suggestions, feel free to use any other alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-quote-generator-understanding"&gt;
  &lt;/a&gt;
  Random Quote Generator (Understanding)
&lt;/h2&gt;

&lt;p&gt;A Random Quote Generator is proficient in pulling quotes randomly from an API, any database, or plainly from an array. We will be designing a Random Quote Generator from scratch using HTML, CSS, JavaScript, and free-quotes API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxEMRFWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orhykfs2p4t7usi6k13h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxEMRFWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orhykfs2p4t7usi6k13h.png" alt="Image description" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-quote-generator-building"&gt;
  &lt;/a&gt;
  Random Quote Generator (Building)
&lt;/h2&gt;

&lt;p&gt;For every project, we need some basic core files. In this case, we’ll need three files with alike extensions, i.e &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;. Once you’ve organized them in a folder (e.g &lt;code&gt;random-quote-generator&lt;/code&gt;), you are good to paste the source code from the following sections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdLJxx-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w7mnw23ae81egwii7uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdLJxx-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w7mnw23ae81egwii7uj.png" alt="Image description" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can optionally download the whole source code of this Random Quote Generator from the available mirrors, at the end of the article.&lt;/p&gt;

&lt;p&gt;Firstly, create an HTML file with a filename &lt;code&gt;index.html&lt;/code&gt; and paste the following code into your HTML file. &lt;strong&gt;Save It&lt;/strong&gt;, you’ve to create a file with an &lt;code&gt;.html&lt;/code&gt; extension at the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;!-- Meta Tags Start, For Reference https://www.w3schools.com/tags/tag_meta.asp --&amp;gt;
&amp;lt;meta charset="utf-8"&amp;gt;
&amp;lt;meta name="description" content="Free random quotes generator, either inspirational or motivational."&amp;gt;
&amp;lt;meta name="keywords" content="quotes, random quotes, random quote generator"&amp;gt;
&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
&amp;lt;meta name="msapplication-TileColor" content="#ffffff"&amp;gt;
&amp;lt;meta name="msapplication-TileImage" content="/ms-icon-144x144.png"&amp;gt;
&amp;lt;meta name="theme-color" content="#ffffff"&amp;gt;
&amp;lt;!-- Meta Tags End--&amp;gt;
&amp;lt;!-- Title (Change This If Publlic)--&amp;gt;
&amp;lt;title&amp;gt;Random Quotes | RoyalityFree&amp;lt;/title&amp;gt;
&amp;lt;!-- Link Custom Stylesheet And Fonts Start --&amp;gt;
&amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
&amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0v4LLanw2qksYuRlEzO+tcaEPQogQ0KaoGN26/zrn20ImR1DfuLWnOo7aBA==" crossorigin="anonymous" referrerpolicy="no-referrer" /&amp;gt;
&amp;lt;link rel="preconnect" href="https://fonts.googleapis.com"&amp;gt;
&amp;lt;link rel="preconnect" href="https://fonts.gstatic.com" crossorigin&amp;gt;
&amp;lt;link href="https://fonts.googleapis.com/css2?family=Poppins&amp;amp;display=swap" rel="stylesheet"&amp;gt;
&amp;lt;!-- Link Custom Stylesheet And Fonts End--&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;!-- Start Container --&amp;gt;
&amp;lt;div class="wrapper"&amp;gt;
&amp;lt;!-- Start Header --&amp;gt;
&amp;lt;header&amp;gt;
    Quote For &amp;lt;span id="getday"&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;!-- End Header --&amp;gt;
&amp;lt;!-- Start Content --&amp;gt;
&amp;lt;div class="content"&amp;gt;
&amp;lt;div class="quote-area"&amp;gt;
&amp;lt;i class="fas fa-quote-left"&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;p class="quote"&amp;gt;Protecting your mind, body and spirit from negativity is a sign of self-love.&amp;lt;/p&amp;gt;
&amp;lt;i class="fas fa-quote-right"&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="author"&amp;gt;
&amp;lt;span&amp;gt;__&amp;lt;/span&amp;gt;
&amp;lt;span class="name"&amp;gt;Nitin Namdeo&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="buttons"&amp;gt;
&amp;lt;div class="features"&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li class="speech"&amp;gt;&amp;lt;i class="fas fa-volume-up"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li class="copy" onclick="onCopy()"&amp;gt;&amp;lt;i class="fas fa-copy"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li class="twitter"&amp;gt;&amp;lt;i class="fab fa-twitter"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;button&amp;gt;Another&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!-- End Content --&amp;gt;
&amp;lt;!-- Get Script--&amp;gt;
&amp;lt;script src="script.js"&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Secondly, create a CSS file with the filename &lt;code&gt;style.css&lt;/code&gt; and paste the following code into the file. &lt;strong&gt;Save It&lt;/strong&gt;, you have to create a file with &lt;code&gt;.css&lt;/code&gt; an extension at the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Built By RoyalityFree | Codes Initiative */
*{
    margin:0;
    padding:0;
    box-sizing:border-box;
    font-family:poppins,sans-serif
}
body{
    display:flex;
    align-items:center;
    justify-content:center;
    min-height:100vh;
    padding:0 10px;
    background-image: radial-gradient(#31e9cb,#a3f5e8,#31e9cb);
    user-select: none;
}
::selection{
    color:#fff;
    background:#1AE78D
}
.wrapper{
    width:605px;
    background:#fff;
    border-radius:15px;
    padding:30px 30px 25px;
    box-shadow:0 12px 35px rgba(0,0,0,.1)
}
header,.content :where(i,p,span){
    color:#102137
}
.wrapper header{
    font-size:35px;
    font-weight:600;
    text-align:center
}
.wrapper .content{
    margin:35px 0
}
.content .quote-area{
    display:flex;
}
.quote-area i{
    font-size:15px
}
.quote-area i:first-child{
    margin:3px 0 0 0
}
.quote-area i:last-child{
    display:flex;
    margin:0 0 3px 10px;
    align-items:flex-end;
}
.quote-area .quote{
    font-size:22px;
    text-align:center;
}
.content .author{
    display:flex;
    font-size:18px;
    margin-top:20px;
    font-style:italic;
    justify-content:flex-end
}
.author span:first-child{
    margin:-6px 5px 0 0;
    font-family:monospace;
}
.buttons .features{
    display:flex;
    margin-top:20px;
    align-items:center;
    justify-content:space-between;
}
.features ul{
    display:flex
}
.features ul li{
    margin:0 5px;
    height:47px;
    width:47px;
    display:flex;
    cursor:pointer;
    color:#1AE78D;
    list-style:none;
    border-radius:50%;
    align-items:center;
    justify-content:center;
    border:2px solid #1AE78D;
    transition:all .3s ease
}
.features ul li:first-child{
    margin-left:0
}
ul li:is(:hover,.active){
    color:#fff;
    background:#1AE78D
}
ul .speech.active{
    pointer-events:none
}
.buttons button{
    border:none;
    color:#fff;
    outline:none;
    font-size:16px;
    cursor:pointer;
    padding:13px 22px;
    border-radius:15px;
    background:#1AE78D
}
.buttons button:hover{
    background: #4DD99C;
}
.buttons button.loading{
    opacity:.7;
    pointer-events:none
}
@media(max-width:728px){
    .wrapper{
        padding:25px 25px 20px;
        margin: 15px 15px 15px 15px;    
    }
    .wrapper header{
        font-size:29px
    }
    .quote-area .quote{
        font-size:20px;
        word-break:keep-all
    }
    .content .author{
        font-size:16px
    }
    .quote-area i{
        font-size:12px
    }
    .features ul li{
        margin:0 3px;
        height:45px;
        width:45px
    }
    .buttons button{
        font-size:15px;
        padding:12px 20px
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, create a JavaScript file with a filename &lt;code&gt;script.js&lt;/code&gt; and paste the following code into your JavaScript file. &lt;strong&gt;Save It&lt;/strong&gt;, you have to create a file with &lt;code&gt;.js&lt;/code&gt; an extension at last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Built By RoyalityFree | Codes Initiative

const quoteText = document.querySelector(".quote"),
    quoteBtn = document.querySelector("button"),
    authorName = document.querySelector(".name"),
    speechBtn = document.querySelector(".speech"),
    copyBtn = document.querySelector(".copy"),
    pingTwitter = document.querySelector(".twitter"),
    synth = speechSynthesis;

function randomQuote() {
    quoteBtn.classList.add("loading");
    quoteBtn.innerText = "Loading 🎉";
    fetch("https://free-quotes-api.herokuapp.com/").then(response =&amp;gt; response.json()).then(result =&amp;gt; {
        quoteText.innerText = result.quote;
        authorName.innerText = result.author || "No Author";
        quoteBtn.classList.remove("loading");
        quoteBtn.innerText = "Another";
    });
}
speechBtn.addEventListener("click", () =&amp;gt; {
    if (!quoteBtn.classList.contains("loading")) {
        let utterance = new SpeechSynthesisUtterance(`${quoteText.innerText} by ${authorName.innerText}`);
        synth.speak(utterance);
        setInterval(() =&amp;gt; {
            !synth.speaking ? speechBtn.classList.remove("active") : speechBtn.classList.add("active");
        }, 10);
    }
});
copyBtn.addEventListener("click", () =&amp;gt; {
    navigator.clipboard.writeText(quoteText.innerText);
});
pingTwitter.addEventListener("click", () =&amp;gt; {
    let twitterUrl = `https://twitter.com/intent/tweet?url=${quoteText.innerText}`;
    window.open(twitterUrl, "_blank");
});
quoteBtn.addEventListener("click", randomQuote);

pingTwitter.addEventListener("click", () =&amp;gt; {
    let twitterUrl = `https://twitter.com/intent/tweet?url=${quoteText.innerText}`;
    window.open(twitterUrl, "_blank");
});
const d = new Date();
const weekday = new Array(7);
weekday[0] = "Sunday";
weekday[1] = "Monday";
weekday[2] = "Tuesday";
weekday[3] = "Wednesday";
weekday[4] = "Thursday";
weekday[5] = "Friday";
weekday[6] = "Saturday";
let day = weekday[d.getDay()];
document.getElementById("getday").innerHTML = day;
function onCopy() {
    alert("Copied Quote Successfully To 📋!");
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all that set in place, we’re ready to check the output of all three files combined to build a powerful webpage. It should do something like this by now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3LxnVKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r42vxqoamzyrcap8w8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3LxnVKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r42vxqoamzyrcap8w8v.png" alt="Image description" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-quote-generator-last-words"&gt;
  &lt;/a&gt;
  Random Quote Generator (Last Words)
&lt;/h2&gt;

&lt;p&gt;That’s it, you’ve now successfully built a Random Quote Generator Webpage in native HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;If your code does not work or you have faced any problem/issue, try downloading the source files from the provided download button below.&lt;/p&gt;

&lt;p&gt;It’s priceless and a &lt;code&gt;.zip&lt;/code&gt; file that will be downloaded and then just extract it to your file manager, server, etc.&lt;/p&gt;



&lt;center&gt;&lt;a href="https://gplinks.co/random-quote-generator" rel="noopener"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vepkagn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6MyzmJa.png" width="200" height="64"&gt;&lt;/a&gt;&lt;/center&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to easily get started with ThreeJS - Part 2</title>
      <author>Davide Mandelli</author>
      <pubDate>Fri, 26 Nov 2021 15:54:52 +0000</pubDate>
      <link>https://dev.to/th3wall/how-to-easily-get-started-with-threejs-part-2-387f</link>
      <guid>https://dev.to/th3wall/how-to-easily-get-started-with-threejs-part-2-387f</guid>
      <description>&lt;p&gt;Hi guys, hope you are fine! :)&lt;/p&gt;

&lt;p&gt;I'm back after posting the first part of this series about how to get started on Three.js without pain.&lt;br&gt;
If you haven't done it yet, you can read the first part here 👇🏼&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/th3wall" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---_MOyEa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RSswW12f--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/140728/2b1da2e6-75eb-48cd-96ac-09ab855b54be.jpeg" alt="th3wall"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/th3wall/how-to-easily-get-started-with-threejs-part-1-go7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to easily get started with ThreeJS - Part 1&lt;/h2&gt;
      &lt;h3&gt;Davide Mandelli ・ Nov 23 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#threejs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webgl&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#small-recap"&gt;
  &lt;/a&gt;
  Small recap
&lt;/h2&gt;

&lt;p&gt;Last time we finished with our canvas containing a red 3D cube rotated by a little bit in order to be able to see some angles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAPXosqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q6z9kvnk577rfd39tuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAPXosqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q6z9kvnk577rfd39tuv.png" alt="Cube at last step of part one" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the full &lt;em&gt;script.js&lt;/em&gt; file that you should have if you have followed the steps in the &lt;a href="https://dev.to/th3wall/how-to-easily-get-started-with-threejs-part-1-go7"&gt;part one&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// script.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xff0000&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Today we will see how to animate our cube, how to change its geometry and its material (with a special technique).&lt;br&gt;
At the end of the series you will have a demo that should look just like this: &lt;a href="https://th3wall-threejs.netlify.app"&gt;https://th3wall-threejs.netlify.app&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#animating-the-cube"&gt;
  &lt;/a&gt;
  Animating the cube
&lt;/h2&gt;

&lt;p&gt;In order to animate stuff, what we need to do is &lt;strong&gt;take a picture of each frame&lt;/strong&gt;. But, how can we do that? 🤔&lt;/p&gt;

&lt;p&gt;We will use the &lt;strong&gt;requestAnimationFrame&lt;/strong&gt; (also called &lt;em&gt;RAF&lt;/em&gt;), which lets you trigger a function on each frame.&lt;br&gt;
This has to do with plain JS and it's not specific to ThreeJS.&lt;/p&gt;

&lt;p&gt;First of all, inside the same &lt;em&gt;script.js&lt;/em&gt; file, we need to create a function and call it once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// empty function&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second step is to &lt;em&gt;move the render&lt;/em&gt; inside this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to insert the &lt;em&gt;requestAnimationFrame&lt;/em&gt; inside the &lt;em&gt;animate&lt;/em&gt; function, passing the same &lt;em&gt;animate&lt;/em&gt; function to it as a parameter.&lt;/p&gt;

&lt;p&gt;RAF method takes a callback function as a parameter, that will be called on the next frame (once the screen is ready to accept the next screen repaint), and on the next, and on the next.....&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;⚠️ You may be wondering why not use a setTimeout/setInterval called repeatedly: when we call requestAnimationFrame() to create an animation, we are assured that our animation code is called when the user's computer is actually ready to make changes to the screen each time, resulting in a &lt;strong&gt;smoother&lt;/strong&gt;, &lt;strong&gt;more efficient&lt;/strong&gt; animation than if we used a setTimeout or a setInterval repeatedly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;How can we make sure that everything is working? &lt;strong&gt;Let's rotate our object!&lt;/strong&gt;&lt;br&gt;
To do that, we will increment the rotation of the mesh by a very small amount, let's try with 0.01:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

  &lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here we go: our cube is now rotating!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ImjZQtAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86cm57hi9ixzslmopj6x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImjZQtAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86cm57hi9ixzslmopj6x.gif" alt="Cube rotating for the first time" width="880" height="365"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#change-the-geometry"&gt;
  &lt;/a&gt;
  Change the geometry
&lt;/h2&gt;

&lt;p&gt;Now that our object is animated, we can change its geometry.&lt;br&gt;
On the &lt;a href="https://threejs.org/docs"&gt;ThreeJS documentation&lt;/a&gt;, you can find a lot of available geometries with which you can play and experiment with a lot of different things.&lt;br&gt;
One of my favorites (same as Bruno 😁) is the &lt;strong&gt;TorusKnowGeometry&lt;/strong&gt;, which consists of a sort of "infinite" knot with a lot of rounded surfaces.&lt;/p&gt;

&lt;p&gt;We can create a torus knot by replacing the geometry declaration line from &lt;em&gt;BoxGeometry&lt;/em&gt; to &lt;em&gt;TorusKnotGeometry&lt;/em&gt;. Obviously, by changing the shape of our object, we need to adjust its parameters accordingly.&lt;/p&gt;

&lt;p&gt;For the Torus Knot, the parameters we will need to remember for our purposes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;radius&lt;/em&gt; - Defines the radius of the torus [default is 1];&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;tube&lt;/em&gt; — Defines the radius of the tube [default is 0.4];&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;tubularSegments&lt;/em&gt; — Defines the number of tubular vertices [default is 64];&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;radialSegments&lt;/em&gt; — Defines the number of radial vertices [default is 8]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some values we throw in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// replace this line&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// with this one&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TorusKnotGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the result will be this one:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VeNyAcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15cxpm83r6x0yqnut1ej.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VeNyAcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15cxpm83r6x0yqnut1ej.gif" alt="First TorusKnot" width="880" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much better than the cube I would say, isn't it? I personally love this geometry!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#change-the-material"&gt;
  &lt;/a&gt;
  Change the material
&lt;/h2&gt;

&lt;p&gt;The geometry looks much better and evolved than before, but honestly, with this flat red color it's a little messy and the curves of the geometry aren't really clear to see. So we need to change the material now.&lt;/p&gt;

&lt;p&gt;There are so many materials included in ThreeJS and you can also create your own material with something called &lt;strong&gt;shaders&lt;/strong&gt;.&lt;br&gt;Shaders are a BIG and quite hard topic to learn so we are not gonna use them for our purpose, but Bruno has hours of lessons also on this topic with his &lt;a href="https://threejs-journey.com/"&gt;ThreeJS Course&lt;/a&gt;, a must for every creative developer.&lt;/p&gt;

&lt;p&gt;What we are gonna use is a special technique called &lt;strong&gt;matcaps&lt;/strong&gt;. Matcaps are a kind of material that is used to simulate the appearance of a material on a surface.&lt;/p&gt;

&lt;p&gt;Firstly, we need to access to a matcap, and Bruno provided a link to one of yours in the video tutorial. I will use this one:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uLTvcl-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bruno-simon.com/prismic/matcaps/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLTvcl-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bruno-simon.com/prismic/matcaps/3.png" alt="Bruno's Matcap #3" width="256" height="256"&gt;&lt;/a&gt;&lt;br&gt;
Link: &lt;a href="https://bruno-simon.com/prismic/matcaps/3.png"&gt;https://bruno-simon.com/prismic/matcaps/3.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's basically a picture of a sphere (you can create one yourself with programs like Photoshop) and you will use this picture as a texture for the geometry. Every pixel of this image will be applied to the geometry and will take the colors from every pixel of the image. &lt;/p&gt;

&lt;p&gt;To use a matcap, we need to load what I've called &lt;em&gt;texture&lt;/em&gt; and in order to do this, in ThreeJS we will use something called &lt;strong&gt;TextureLoader&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textureLoader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TextureLoader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we load our matcap image inside the loader providing it the URL and we assign it to a variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matcapTexture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;textureLoader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://bruno-simon.com/prismic/matcaps/3.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that our texture is loaded, we need to apply it to the material as last step.&lt;br&gt;
The MeshBasicMaterial method is unable to use a matcap as a texture, so we need to use a different method called &lt;strong&gt;MeshMatcapMaterial&lt;/strong&gt; (ref: &lt;a href="https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial"&gt;MeshMatcapMaterial Docs&lt;/a&gt;) and then we can provide it our texture contained in the variable &lt;em&gt;matcapTexture&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Replace this line&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xff0000&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// With this one&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshMatcapMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;matcap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;matcapTexture&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, if you now preview the scene you will see this beauty&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--611NLVd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js1ovd8nseoeoby70jli.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--611NLVd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js1ovd8nseoeoby70jli.gif" alt="MeshMatcapMaterial applied" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to add a little bit of movement?&lt;br&gt;Let's add also a vertical rotation to our torus knot. Inside the &lt;em&gt;animate&lt;/em&gt; function, together with the horizontal movement, we add this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can enjoy this beautiful 3D animation along with this stunning matcap!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2zkQ3yj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prrughxs2yvw56iainoa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2zkQ3yj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prrughxs2yvw56iainoa.gif" alt="Final Torus Knot effect" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#final-recap"&gt;
  &lt;/a&gt;
  Final recap
&lt;/h2&gt;

&lt;p&gt;In this part we have seen how to animate our object, how to change its geometry and how to change its material by using a special technique.&lt;/p&gt;

&lt;p&gt;In the third and last part, we will apply some little smooth animations to our scene, we will make it responsive and we will style the page to look like this: &lt;a href="https://th3wall-threejs.netlify.app"&gt;https://th3wall-threejs.netlify.app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I did for the first part, I leave down here the full &lt;em&gt;script.js&lt;/em&gt; code block so you can have the updated one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// script.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textureLoader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TextureLoader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matcapTexture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;textureLoader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://bruno-simon.com/prismic/matcaps/3.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TorusKnotGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshMatcapMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;matcap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;matcapTexture&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

  &lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you are learning something and I also hope that you find this article interesting.&lt;/p&gt;

&lt;p&gt;Please follow me on &lt;a href="https://twitter.com/Th3Wall25"&gt;Twitter&lt;/a&gt;, &lt;a href="https://github.com/Th3Wall"&gt;GitHub&lt;/a&gt; &amp;amp; &lt;a href="https://hashnode.com/@Th3Wall"&gt;Hashnode&lt;/a&gt; and let me know if you liked it!&lt;/p&gt;

&lt;p&gt;Thanks.&lt;br&gt;
Th3Wall&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Adding Gitmark to lazygit</title>
      <author>Melvin Carvalho</author>
      <pubDate>Fri, 26 Nov 2021 15:52:03 +0000</pubDate>
      <link>https://dev.to/melvincarvalho/adding-gitmark-to-lazygit-dmc</link>
      <guid>https://dev.to/melvincarvalho/adding-gitmark-to-lazygit-dmc</guid>
      <description>&lt;p&gt;&lt;a href="https://git-mark.com/"&gt;Gitmark&lt;/a&gt; is a way to mark your git commits to achieve finalization&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jesseduffield/lazygit"&gt;Lazygit&lt;/a&gt; is a useful tool for those running git on the command line&lt;/p&gt;

&lt;p&gt;Lazygit has an interesting feature which lets you add commands to key bindings.  Here's how I added a gitmark workflow to lazygit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;customCommands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;m'&lt;/span&gt;
    &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;global'&lt;/span&gt;
    &lt;span class="na"&gt;subprocess&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;prompts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;menu'&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Git&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Mark?'&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;trial'&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;trial&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;commit'&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;commit'&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--tag&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--send&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--commit'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;init'&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;init'&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;init'&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;git&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;mark&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{index&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;.PromptResponses&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>gitmark</category>
      <category>git</category>
      <category>lazygit</category>
      <category>config</category>
    </item>
    <item>
      <title>How to make a simple HTML Code Editor using HTML, CSS, and Javascript ?</title>
      <author>keshavs759</author>
      <pubDate>Fri, 26 Nov 2021 15:44:15 +0000</pubDate>
      <link>https://dev.to/keshavs759/how-to-make-a-simple-html-code-editor-using-html-css-and-javascript--41dl</link>
      <guid>https://dev.to/keshavs759/how-to-make-a-simple-html-code-editor-using-html-css-and-javascript--41dl</guid>
      <description>&lt;br&gt;
&lt;br&gt;


&lt;p&gt;In this article, we will learn how to make a simple HTML code editor using HTML, CSS, and Javascript from scratch.&lt;/p&gt;

&lt;p&gt;You can see its demo &lt;a href="https://vidyasheela.com/web-contents/website-components/Javascript-Projects/html-code-editor/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The logic behind this code editor is simple. we have created a &lt;strong&gt;div&lt;/strong&gt; with &lt;strong&gt;id&lt;/strong&gt; as "&lt;strong&gt; editor"&lt;/strong&gt; and having &lt;strong&gt;contenteditable&lt;/strong&gt; attribute set &lt;strong&gt;true&lt;/strong&gt;. By setting a &lt;strong&gt;contenteditable&lt;/strong&gt; &lt;strong&gt;true&lt;/strong&gt; in a &lt;strong&gt;div&lt;/strong&gt; we can edit the content in the &lt;strong&gt;div&lt;/strong&gt; similar to what we can do in &lt;strong&gt;textarea&lt;/strong&gt;. Inside this div we place our HTML code. To display the output we have used an &lt;strong&gt;iframe&lt;/strong&gt;. we have passed the &lt;strong&gt;textContent&lt;/strong&gt; of editable &lt;strong&gt;div&lt;/strong&gt; as the &lt;strong&gt;srcdoc&lt;/strong&gt; of the iframe, by doing this when we type any HTML statements in the editor the output is seen in the iframe immediately.&lt;/p&gt;

&lt;p&gt;To make the editor more interesting three buttons are added to Execute, Save as HTML, and Copy the HTML respectively.&lt;/p&gt;

&lt;p&gt;The styling is basic. you can understand it by looking at the code given below. We recommend you to watch the video along with the code for better understanding.&lt;/p&gt;





&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OO-784O7pJ4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The code to make a HTML code Editor is&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/_vidyasheela/embed/eYEbKjP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Download the HTML files from here. &lt;a href="https://vidyasheela.com/component/html-code-editor"&gt;DOWNLOAD LINK&lt;/a&gt;&lt;/p&gt;





</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top Code Learning Websites</title>
      <author>MD Taseen Khan</author>
      <pubDate>Fri, 26 Nov 2021 15:35:30 +0000</pubDate>
      <link>https://dev.to/mohammadtaseenkhan/top-code-learning-websites-355h</link>
      <guid>https://dev.to/mohammadtaseenkhan/top-code-learning-websites-355h</guid>
      <description>&lt;p&gt;🔰Top Code Learning Websites🔰&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.codecademy.com"&gt;www.codecademy.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.lynda.com"&gt;www.lynda.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.udemy.com"&gt;www.udemy.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.udacity.com"&gt;www.udacity.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.coursera.org"&gt;www.coursera.org&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.w3schools.com"&gt;www.w3schools.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.thenewboston.org"&gt;www.thenewboston.org&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.programmr.com"&gt;www.programmr.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.codeavengers.com"&gt;www.codeavengers.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.codeschool.com"&gt;www.codeschool.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.learnstreet.com"&gt;www.learnstreet.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.teamtreehouse.com"&gt;www.teamtreehouse.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.sqlzoo.net"&gt;www.sqlzoo.net&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.codehs.com"&gt;www.codehs.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.teamtreehouse.com"&gt;www.teamtreehouse.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.html5rocks.com"&gt;www.html5rocks.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.codepen.io"&gt;www.codepen.io&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.tutorialspoint.com"&gt;www.tutorialspoint.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.javatpoint.com"&gt;www.javatpoint.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.cplusplus.com"&gt;www.cplusplus.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.learncpp.com"&gt;www.learncpp.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.tutorialspoint.com"&gt;www.tutorialspoint.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.cprogramming.com"&gt;www.cprogramming.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.stackoverflow.com"&gt;www.stackoverflow.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.learncodethehardway.org"&gt;www.learncodethehardway.org&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.bloc.io"&gt;www.bloc.io&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.howtocode.io"&gt;www.howtocode.io&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.edx.org"&gt;www.edx.org&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.instructables.com"&gt;www.instructables.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.developer.apple.com"&gt;www.developer.apple.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.developer.android.com"&gt;www.developer.android.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.developers.google.com"&gt;www.developers.google.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.developer.mozilla.org"&gt;www.developer.mozilla.org&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.msdn.microsoft.com"&gt;www.msdn.microsoft.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.dev.opera.com"&gt;www.dev.opera.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.developphp.com"&gt;www.developphp.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.quackit.com"&gt;www.quackit.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.htmlite.com"&gt;www.htmlite.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.siteduzero.com"&gt;www.siteduzero.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.dreamincode.net"&gt;www.dreamincode.net&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.phpbuddy.com"&gt;www.phpbuddy.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.php.net"&gt;www.php.net&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.microsoftvirtualacademy.com"&gt;www.microsoftvirtualacademy.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.professormesser.com"&gt;www.professormesser.com&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.freecodecamp.org"&gt;www.freecodecamp.org&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Stay safe and secured

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>code</category>
      <category>learning</category>
    </item>
    <item>
      <title>Symfony Station Communique - 26 November 2021. A Look at Symfony and PHP News.
</title>
      <author>Reuben Walker, Jr.</author>
      <pubDate>Fri, 26 Nov 2021 15:32:40 +0000</pubDate>
      <link>https://dev.to/reubenwalker64/symfony-station-communique-26-november-2021-a-look-at-symfony-and-php-news-188e</link>
      <guid>https://dev.to/reubenwalker64/symfony-station-communique-26-november-2021-a-look-at-symfony-and-php-news-188e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1WFBHAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi8sl8w1l355d3hh9vxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1WFBHAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi8sl8w1l355d3hh9vxj.png" alt="Symfony Station logo" width="880" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post originally appeared on &lt;a href="https://symfonystation.com/Communiques"&gt;Symfony Station&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Welcome to this week's Symfony Station Communique. It’s your weekly review of the most valuable and essential news in the Symfony and PHP development communities. This week it’s extensive again, so take your time and enjoy its most valuable items.&lt;/p&gt;

&lt;p&gt;Thanks to Javier Eguiluz and Symfony for sharing our &lt;a href="https://symfonystation.com/Symfony-Station-Communique-19-November-2021"&gt;last communique&lt;/a&gt; in their &lt;a href="https://symfony.com/blog/a-week-of-symfony-777-15-21-november-2021"&gt;Week of Symfony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*Please note all links will open in a new browser window. My opinions, if I present any, will be in bold.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPerR4m3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx3xgt3kmm7vn53zewjy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPerR4m3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx3xgt3kmm7vn53zewjy.png" alt="Symfony logo" width="209" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#symfony"&gt;
  &lt;/a&gt;
  Symfony
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#this-week"&gt;
  &lt;/a&gt;
  This week
&lt;/h3&gt;

&lt;p&gt;As always, we will start with the official news from Symfony.&lt;/p&gt;

&lt;p&gt;Highlight -&amp;gt; “This week, Symfony 5.4.0 BETA3 and 6.0.0 BETA3 versions were published so you can test them on your applications before their final release at the end of the month. In addition, the Symfony Core Team added four new members to help grow the Symfony project in the next few years.”&lt;/p&gt;

&lt;p&gt;A Week of Symfony #777 (15-21 November 2021)&lt;br&gt;
&lt;a href="https://symfony.com/blog/a-week-of-symfony-777-15-21-november-2021"&gt;https://symfony.com/blog/a-week-of-symfony-777-15-21-november-2021&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Javier continues a series of posts on what’s new in Symfony 5.4.&lt;/p&gt;

&lt;p&gt;New in Symfony 5.4: Dependency Injection Improvements &lt;a href="https://symfony.com/blog/new-in-symfony-5-4-dependencyinjection-improvements"&gt;https://symfony.com/blog/new-in-symfony-5-4-dependencyinjection-improvements&lt;/a&gt;&lt;br&gt;
New in Symfony 5.4: Messenger Improvements &lt;a href="https://symfony.com/blog/new-in-symfony-5-4-messenger-improvements"&gt;https://symfony.com/blog/new-in-symfony-5-4-messenger-improvements&lt;/a&gt;&lt;br&gt;
New in Symfony 5.4: Profiler improvements &lt;a href="https://symfony.com/blog/new-in-symfony-5-4-profiler-improvements"&gt;https://symfony.com/blog/new-in-symfony-5-4-profiler-improvements&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great deals are still available if you are looking for official certification. November 29th is the last day though!&lt;/p&gt;

&lt;p&gt;Black Friday 2021 Offers from the Symfony Ecosystem&lt;br&gt;
&lt;a href="https://symfony.com/blog/black-friday-2021-offers-from-the-symfony-ecosystem"&gt;https://symfony.com/blog/black-friday-2021-offers-from-the-symfony-ecosystem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Symfony added to the official docs with information on Flex Private Recipe Repositories.&lt;/p&gt;

&lt;p&gt;How To Configure and Use Flex Private Recipe Repositories&lt;br&gt;
&lt;a href="https://symfony.com/doc/current/setup/flex_private_recipes.html"&gt;https://symfony.com/doc/current/setup/flex_private_recipes.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this one is self-explanatory.&lt;/p&gt;

&lt;p&gt;Symfony 6.0.0-RC1 released&lt;br&gt;
&lt;a href="https://symfony.com/blog/symfony-6-0-0-rc1-released"&gt;https://symfony.com/blog/symfony-6-0-0-rc1-released&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fcV3ofGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Featured-Item_0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fcV3ofGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Featured-Item_0.png" alt="Featured Item graphic" width="660" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-item"&gt;
  &lt;/a&gt;
  Featured Item
&lt;/h2&gt;

&lt;p&gt;We continue to highlight a post of the week.&lt;/p&gt;

&lt;p&gt;Please let us know what you think about this one.&lt;/p&gt;

&lt;p&gt;It’s not the most important article of the week considering the news about PHP 8.1 and The PHP Foundation. However, it is the first original content created by Symfony Station so it gets the nod for our Featured Item. ;)&lt;/p&gt;

&lt;p&gt;Twig - The Ultimate Guide to the Premier PHP Templating Language&lt;br&gt;
&lt;a href="https://symfonystation.com/Twig-Ultimate-Guide-PHP-Templating-Language"&gt;https://symfonystation.com/Twig-Ultimate-Guide-PHP-Templating-Language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of Twig, Prince Sinha shows us how to:&lt;br&gt;
3 Ways to Reuse Twig Templates in Symfony&lt;br&gt;
&lt;a href="https://scoutapm.com/blog/3-ways-to-reuse-twig-templates-in-symfony"&gt;https://scoutapm.com/blog/3-ways-to-reuse-twig-templates-in-symfony&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Via SymfonyCasts: “We've got some logged in users but we don't want them going anywhere they please around our app. The most precise way to protect your site is by denying access from each Symfony controller and we'll cover about 5 good ways to do that!” &lt;br&gt;
This week on SymfonyCasts&lt;br&gt;
&lt;a href="https://5hy9x.r.ag.d.sendibm3.com/mk/mr/Q5iMMEWQyDhPFyQTXqCh4IZEG9ZzTXdXk0vUI75ZRpMLJaktJ-FWV0YUXqpJF0Phj9uJBdZ56E3nkM32bohWqsbK8wRJKREYMf-eeAHYU88bC5jVrFkhY4WG_spnaW9_fr1XV2a_5g"&gt;https://5hy9x.r.ag.d.sendibm3.com/mk/mr/Q5iMMEWQyDhPFyQTXqCh4IZEG9ZzTXdXk0vUI75ZRpMLJaktJ-FWV0YUXqpJF0Phj9uJBdZ56E3nkM32bohWqsbK8wRJKREYMf-eeAHYU88bC5jVrFkhY4WG_spnaW9_fr1XV2a_5g&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s an interesting case study involving updating both PHP and Symfony.&lt;br&gt;
Why did Alice's Garden need to set up a Business Intelligence tool?&lt;br&gt;
&lt;a href="https://welovedevs.com/fr/articles/pourquoi-alices-garden-a-eu-besoin-de-mettre-en-place-un-outil-de-bi/"&gt;https://welovedevs.com/fr/articles/pourquoi-alices-garden-a-eu-besoin-de-mettre-en-place-un-outil-de-bi/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Smaine Millani writes: “In this article, I’ll show how you can add validation on a Request content. (It’s more about a way to learn more about Request and event listener than a best practice.)”&lt;br&gt;
What if we define validations rules in the routing configuration&lt;br&gt;
&lt;a href="https://smaine-milianni.medium.com/what-if-we-define-validations-rules-in-the-routing-configuration-a15b182e847d"&gt;https://smaine-milianni.medium.com/what-if-we-define-validations-rules-in-the-routing-configuration-a15b182e847d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahmed Khaled Mohamed shows us how to:&lt;/p&gt;

&lt;p&gt;Deploy Sylius to Heroku&lt;br&gt;
&lt;a href="https://dev.to/aaahmedaa/deploy-sylius-to-heroku-55p1"&gt;https://dev.to/aaahmedaa/deploy-sylius-to-heroku-55p1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alexandre Daubois tells you to “Brace yourself: autocompletion on options and arguments is finally here!”&lt;br&gt;
Symfony 6 brings its CLI to the next level&lt;br&gt;
&lt;a href="https://alex-daubois.medium.com/symfony-6-brings-its-cli-to-the-next-level-9a2531db08cb"&gt;https://alex-daubois.medium.com/symfony-6-brings-its-cli-to-the-next-level-9a2531db08cb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our friends at Jolicode show us how to:&lt;/p&gt;

&lt;p&gt;Rate limit your Symfony APIs!&lt;br&gt;
&lt;a href="https://jolicode.com/blog/rate-limit-your-symfony-apis"&gt;https://jolicode.com/blog/rate-limit-your-symfony-apis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maks Rafalko demonstrates how to:&lt;/p&gt;

&lt;p&gt;Improve Symfony Tests Performance&lt;br&gt;
&lt;a href="https://maks-rafalko.github.io/blog/2021-11-21/symfony-tests-performance/"&gt;https://maks-rafalko.github.io/blog/2021-11-21/symfony-tests-performance/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems like there is one of these every week. But, I find something useful in each one so we’re sharing.&lt;/p&gt;

&lt;p&gt;Laravel vs Symfony – a comparison of the two most popular PHP frameworks&lt;br&gt;
&lt;a href="https://davidicke.com/2021/11/23/laravel-vs-symfony-a-comparison-of-the-two-most-popular-php-frameworks/"&gt;https://davidicke.com/2021/11/23/laravel-vs-symfony-a-comparison-of-the-two-most-popular-php-frameworks/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you discovered this communique and are new to Symfony, this article is a good introduction.&lt;/p&gt;

&lt;p&gt;What is PHP Framework Symfony? Explained for executives&lt;br&gt;
&lt;a href="https://medium.com/accesto/what-is-php-framework-symfony-explained-for-executives-accesto-blogwelcome-to-our-72a89abafe71"&gt;https://medium.com/accesto/what-is-php-framework-symfony-explained-for-executives-accesto-blogwelcome-to-our-72a89abafe71&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In French UrbanLinker writes: “In order to help developers and CTOs in their migration to Symfony, SensioLabs has made available a comprehensive migration guide on this subject. From the PHP environment, to the advantages of Symfony via the legacy code, everything is explained to migrate smoothly.”&lt;/p&gt;

&lt;p&gt;Migrating your legacy project to Symfony? SensioLabs explains everything.&lt;br&gt;
&lt;a href="https://urbanlinker.com/fr/blog/articles-tech-1620983703/migration-de-son-legacy-vers-symfony-sensiolabs-vous-explique-tout"&gt;https://urbanlinker.com/fr/blog/articles-tech-1620983703/migration-de-son-legacy-vers-symfony-sensiolabs-vous-explique-tout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurray. An article on YAML was published and it’s a comparison with JSON and XML.&lt;/p&gt;

&lt;p&gt;YAML Tutorial: Everything You Need to Know in 5 Mins&lt;br&gt;
&lt;a href="https://levelup.gitconnected.com/yaml-tutorial-everything-you-need-to-know-in-5-mins-14f333a23ed1"&gt;https://levelup.gitconnected.com/yaml-tutorial-everything-you-need-to-know-in-5-mins-14f333a23ed1&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timeless"&gt;
  &lt;/a&gt;
  Timeless
&lt;/h2&gt;

&lt;p&gt;I ran across Akashic Seer’s blog earlier this month, which is loaded with Symfony-related posts. Here are a few more from his archive.&lt;/p&gt;

&lt;p&gt;Symfony 5+ how to create a Maker&lt;br&gt;
&lt;a href="https://akashicseer.com/web-development/symfony-5-how-to-create-a-maker/"&gt;https://akashicseer.com/web-development/symfony-5-how-to-create-a-maker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to quickly create a complete Symfony 5+ app with login and password reset&lt;br&gt;
&lt;a href="https://akashicseer.com/web-development/how-to-quickly-create-a-complete-symfony-5-app-with-login-and-password-reset/"&gt;https://akashicseer.com/web-development/how-to-quickly-create-a-complete-symfony-5-app-with-login-and-password-reset/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kpzVTWT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/php-logo_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpzVTWT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/php-logo_4.png" alt="PHP logo" width="880" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#this-week"&gt;
  &lt;/a&gt;
  This week
&lt;/h3&gt;

&lt;p&gt;The PhpStorm blog made a big announcement you may have seen elsewhere. I made a contribution for #GivingTuesday and encourage you to do likewise.&lt;/p&gt;

&lt;p&gt;The New Life of PHP – The PHP Foundation&lt;br&gt;
&lt;a href="https://blog.jetbrains.com/phpstorm/2021/11/the-php-foundation/"&gt;https://blog.jetbrains.com/phpstorm/2021/11/the-php-foundation/&lt;/a&gt;&lt;br&gt;
Joe Watkins provides some very interesting details of how the foundation came about and what it requires.&lt;br&gt;
Musings, ninja ones&lt;br&gt;
&lt;a href="https://blog.krakjoe.ninja/2021/11/2-1.html"&gt;https://blog.krakjoe.ninja/2021/11/2-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In other big PHP news!&lt;br&gt;
PHP 8.1 is released&lt;br&gt;
&lt;a href="https://php.watch/articles/php81-thanks"&gt;https://php.watch/articles/php81-thanks&lt;/a&gt;&lt;br&gt;
And here’s the official announcement.&lt;br&gt;
&lt;a href="https://www.php.net/releases/8.1/en.php"&gt;https://www.php.net/releases/8.1/en.php&lt;/a&gt;&lt;br&gt;
Finally, if you want to check it out via video, here’s one from JetBrainsTV.&lt;/p&gt;

&lt;p&gt;What’s New in PHP 8.1: Enums, First-Class Callables, Fibers, Readonly Properties, and More&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rgrQSmUiFJQ"&gt;https://www.youtube.com/watch?v=rgrQSmUiFJQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mark Baker notes: “One of the many new features of PHP 8.1 is the ability to declare class constants as final, so that they can no longer be overridden in child classes. The same applies when constants are defined as final in an abstract classes, or interface; they can’t be overridden by classes extending that abstract or implementing that interface. So class and interface constants can now truly become constant.”&lt;/p&gt;

&lt;p&gt;Constant Constants. Finally! (On the inconstancy of constants)&lt;br&gt;
&lt;a href="https://markbakeruk.net/2021/11/24/constant-constants-finally/"&gt;https://markbakeruk.net/2021/11/24/constant-constants-finally/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DerEuroMark wonders “if you use open-source software, you might wonder, why all those changes and why you should migrate up to the next major versions.”&lt;/p&gt;

&lt;p&gt;Keeping up with framework upgrades&lt;br&gt;
&lt;a href="https://www.dereuromark.de/2021/11/22/keeping-up-with-framework-upgrades/"&gt;https://www.dereuromark.de/2021/11/22/keeping-up-with-framework-upgrades/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wouter de Jong writes: “Every now and then, there seems to be a lot of fuss in the PHP community about deprecations. In these discussions, deprecations are often discussed as if they are fatal errors. I think that is very wrong. Let’s reduce our expectations of deprecations. It’ll make everyone’s lives much less stressful.”&lt;/p&gt;

&lt;p&gt;Deprecations are not like E_ERROR, E_WARNING, and E_NOTICE&lt;br&gt;
&lt;a href="https://wouterj.nl/2021/11/deprecations-are-not-errors"&gt;https://wouterj.nl/2021/11/deprecations-are-not-errors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ran across an impressive looking new book on PHP. If you have seen it before, this edition is updated for version 8.1.&lt;/p&gt;

&lt;p&gt;Front Line PHP: Building modern applications with PHP 8.1.&lt;br&gt;
&lt;a href="https://front-line-php.com/"&gt;https://front-line-php.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Front Line PHP also has a PHP Cheat Sheet.&lt;/p&gt;

&lt;p&gt;Modern PHP Cheat Sheet: A to-the-point summary of all awesome PHP features&lt;br&gt;
&lt;a href="https://front-line-php.com/cheat-sheet"&gt;https://front-line-php.com/cheat-sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We shared several posts from Samuel Fontebasso in the last communique. His series on PHP, Nginx, and Docker continues with this one.&lt;br&gt;
PHP+Nginx with Docker in production - Part 3: Docker Compose for your local environment&lt;br&gt;
&lt;a href="https://blog.fontebasso.com.br/php-nginx-with-docker-in-production-part-3-d8935b910ba9"&gt;https://blog.fontebasso.com.br/php-nginx-with-docker-in-production-part-3-d8935b910ba9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bulletproof PHP writes: “Rather than yet another generic overview of the language or a point-by-point refutation of the things people say is wrong with it, what I want this post to be more than anything else is kind of a comprehensive list of ✨good things about PHP.✨ “&lt;/p&gt;

&lt;p&gt;Yes, PHP is Worth Learning/Using in $CURRENT_YEAR&lt;br&gt;
&lt;a href="https://bulletproofphp.dev/yes-php-is-worth-using"&gt;https://bulletproofphp.dev/yes-php-is-worth-using&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along those lines this article from Raft Labs has some great resources for learning PHP.&lt;/p&gt;

&lt;p&gt;PHP in 2021? A Big Yes!&lt;br&gt;
&lt;a href="https://raftlabs.medium.com/php-in-2021-a-big-yes-a3a6d0be4c01"&gt;https://raftlabs.medium.com/php-in-2021-a-big-yes-a3a6d0be4c01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Behzad Fazelasl says: ”Writing tests is inseparable from programming. If you want to be sure about deploying your code without unexpected failure, writing tests is going to be of assistance. The more tests you write, the more test coverage you get on your code which leads to more confidence.&lt;/p&gt;

&lt;p&gt;But there is a big problem. There should be a sort of measurement to make sure enough tests have been written.”&lt;br&gt;
PHPUnit Test Coverage Report&lt;br&gt;
&lt;a href="https://engineering.teknasyon.com/phpunit-test-coverage-report-8863563f34bd"&gt;https://engineering.teknasyon.com/phpunit-test-coverage-report-8863563f34bd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Matthew Setter asks why deploy with Docker, especially when there are so many other deployment options?&lt;/p&gt;

&lt;p&gt;Deploy PHP Apps with Docker - The Essentials&lt;br&gt;
&lt;a href="https://speakerdeck.com/webdevwithmatt/deploy-php-apps-with-docker-the-essentials"&gt;https://speakerdeck.com/webdevwithmatt/deploy-php-apps-with-docker-the-essentials&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Peter Packet didn’t pick any peppers but he did author this interesting post.&lt;/p&gt;

&lt;p&gt;Effectively using Facades and Hexagonal Architecture to separate bounded contexts&lt;br&gt;
&lt;a href="https://madewithlove.com/blog/software-engineering/effectively-using-facades-and-hexagonal-architecture-to-separate-bounded-contexts/"&gt;https://madewithlove.com/blog/software-engineering/effectively-using-facades-and-hexagonal-architecture-to-separate-bounded-contexts/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an article about another PHP Templating language.&lt;/p&gt;

&lt;p&gt;EasyTpl — Simple and fastly template engine for PHP&lt;br&gt;
&lt;a href="https://medium.com/@inhereat/easytpl-simple-and-fastly-template-engine-for-php-6df123bfc0f8"&gt;https://medium.com/@inhereat/easytpl-simple-and-fastly-template-engine-for-php-6df123bfc0f8&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-week"&gt;
  &lt;/a&gt;
  Last Week
&lt;/h3&gt;

&lt;p&gt;The Voices of the Elephant podcast spoke with Ben Ramsey, the Release Manager for PHP 8.1.&lt;br&gt;
Interview with Ben Ramsey&lt;br&gt;
&lt;a href="https://voicesoftheelephpant.com/2021/11/18/ep365-interview-benramsey/"&gt;https://voicesoftheelephpant.com/2021/11/18/ep365-interview-benramsey/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9RQn0MV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/code-logo_3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9RQn0MV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/code-logo_3.jpeg" alt="Code logo" width="626" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  Other
&lt;/h2&gt;

&lt;p&gt;The Guardian asks a simple but extremely important question.&lt;/p&gt;

&lt;p&gt;Can big tech ever be reined in?&lt;br&gt;
&lt;a href="https://www.theguardian.com/technology/2021/nov/21/can-big-tech-ever-be-reined-in"&gt;https://www.theguardian.com/technology/2021/nov/21/can-big-tech-ever-be-reined-in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Toptal also has a question. One I’ve asked myself.&lt;/p&gt;

&lt;p&gt;Agile, Scrum, and Kanban: What the Heck Do These Words Really Mean?&lt;br&gt;
&lt;a href="https://www.toptal.com/project-managers/technical/agile-scrum-kanban-what-do-they-mean"&gt;https://www.toptal.com/project-managers/technical/agile-scrum-kanban-what-do-they-mean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have shared several posts from Mateusz Cholewka. He continues his series on Docker here.&lt;br&gt;
Read this before you start using the multistage builds for your docker images&lt;br&gt;
&lt;a href="https://medium.com/@kontaktmtk3d/read-this-before-you-start-using-the-multistage-builds-for-your-docker-images-a005772b9e61"&gt;https://medium.com/@kontaktmtk3d/read-this-before-you-start-using-the-multistage-builds-for-your-docker-images-a005772b9e61&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a useful tool for anyone who’s making code tutorials.&lt;br&gt;
How to create long screen recordings using OBS Studio&lt;br&gt;
&lt;a href="https://www.techrepublic.com/article/how-to-create-long-screen-recordings-using-obs-studio/#ftag=RSS56d97e7"&gt;https://www.techrepublic.com/article/how-to-create-long-screen-recordings-using-obs-studio/#ftag=RSS56d97e7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Torque Mag has a post on helpful tools as well. Mobile Atom Code and Symfony Station use a variety of these and the list is legit.&lt;br&gt;
28 Best Tools for Freelancers (2021): Keep Your Business on Track&lt;br&gt;
&lt;a href="https://torquemag.io/2021/11/best-tools-for-freelancers/"&gt;https://torquemag.io/2021/11/best-tools-for-freelancers/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ran across this on freeCodeCamp and although it’s from February it’s a good resource for working with APIs.&lt;/p&gt;

&lt;p&gt;API Cheat Sheet – What is an API, How it Works, and How to Choose the Right API Testing Tools&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/news/what-is-an-api-and-how-to-test-it/"&gt;https://www.freecodecamp.org/news/what-is-an-api-and-how-to-test-it/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have been sharing Wouter Carabain’s series on using Symfony and React together. Here’s the latest article.&lt;/p&gt;

&lt;p&gt;Setting up React Native (Part 5)&lt;br&gt;
&lt;a href="https://woutercarabain.com/webdevelopment/setting-up-react-native-part-5/"&gt;https://woutercarabain.com/webdevelopment/setting-up-react-native-part-5/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ReadWrite wants to predict: &lt;/p&gt;

&lt;p&gt;What the Future of Programming Languages Looks Like&lt;br&gt;
&lt;a href="https://readwrite.com/2021/11/22/what-the-future-of-programming-languages-looks-like/"&gt;https://readwrite.com/2021/11/22/what-the-future-of-programming-languages-looks-like/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DeliciousBrains tells us how to:&lt;/p&gt;

&lt;p&gt;Create Your Own SSL Certificate Authority for Local HTTPS Development&lt;br&gt;
&lt;a href="https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/"&gt;https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And CSS-Tricks shows us how to:&lt;/p&gt;

&lt;p&gt;Create the perfect commit in git&lt;br&gt;
&lt;a href="https://css-tricks.com/creating-the-perfect-commit-in-git/"&gt;https://css-tricks.com/creating-the-perfect-commit-in-git/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you published or seen something related to Symfony or PHP that we missed? If so, please contact us.&lt;br&gt;
That's it for this week. Thanks for making it to the end of another extended edition. I look forward to sharing next week's Symfony and PHP news with you on Friday. &lt;/p&gt;

&lt;p&gt;Please share this post. :) Be sure to join our newsletter list, so you get each week's communique directly in your inbox (a day early). And follow us on Twitter at @symfonfystation.&lt;/p&gt;

&lt;p&gt;Happy coding Symfonistas!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sHynFiuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Reuben_5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sHynFiuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Reuben_5.png" alt="Reuben Walker photo" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reuben Walker&lt;br&gt;
Founder &lt;a href="https://symfonystation.com/"&gt;Symfony Station&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reuben is also Ringmaster of &lt;a href="https://media.mobileatom.net/about-us/"&gt;Mobile Atom Media&lt;/a&gt; and its division &lt;a href="https://www.mobileatom.net/"&gt;Mobile Atom Code&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>symfony</category>
      <category>php</category>
      <category>docker</category>
      <category>twig</category>
    </item>
    <item>
      <title>DevTips Daily Update 26/11/21</title>
      <author>James Bubb</author>
      <pubDate>Fri, 26 Nov 2021 15:28:08 +0000</pubDate>
      <link>https://dev.to/codebubb/devtips-daily-update-261121-24ab</link>
      <guid>https://dev.to/codebubb/devtips-daily-update-261121-24ab</guid>
      <description>&lt;p&gt;So in this week's videos on DevTips Daily, we were carrying on with our full end to end project and we got setup with our server on Digital ocean, starting creating some endpoints in the Express app for generating short urls and also got setup with a MongoDB database inside a Docker container.&lt;/p&gt;

&lt;p&gt;Here's a link to each individual tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TqniZz0ZyWE"&gt;Setup hosting server&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TqniZz0ZyWE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/zZpiGCXQcZg"&gt;Connecting to server via SSH&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zZpiGCXQcZg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/Xldt2wT-v90"&gt;Creating short URLs&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Xldt2wT-v90"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/nag8DMmG0D0"&gt;Setup MongoDB with Docker&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nag8DMmG0D0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;[Testing MongoDB connection](&lt;a href="https://youtu.be/Pm2PWfKG1y0"&gt;https://youtu.be/Pm2PWfKG1y0&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Pm2PWfKG1y0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/g9l3JSmsxdQ"&gt;Connecting to MongoDB in the API&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/g9l3JSmsxdQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/https://youtu.be/NWQJatD432E"&gt;Adding URLs to database&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NWQJatD432E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Next week we're going to be carrying on with the project again, we'll be setting up our redirect endpoint and starting to build our delivery pipeline with GitHub Actions!&lt;/p&gt;

&lt;p&gt;Thanks for watching 👍&lt;/p&gt;

</description>
      <category>devtipsdaily</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
