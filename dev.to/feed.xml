<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>C++ Learning Materials - Books</title>
      <author>Elvis Oric</author>
      <pubDate>Mon, 12 Jul 2021 09:28:06 +0000</pubDate>
      <link>https://dev.to/elvisoric/c-learning-materials-books-fpd</link>
      <guid>https://dev.to/elvisoric/c-learning-materials-books-fpd</guid>
      <description>&lt;p&gt;The books on the list are the ones I have read and would recommend to others. For some books, reviews from goodreads are included because I completely agree with them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-if-you-do-not-know-c-start-with-c-primer-5th-edition"&gt;
  &lt;/a&gt;
  1. If you do not know C++, start with &lt;a href="https://www.amazon.com/Primer-5th-Stanley-B-Lippman/dp/0321714113"&gt;C++ Primer&lt;/a&gt; (5th edition)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InZ7Zv6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41Gd9xIXrUL._SX381_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InZ7Zv6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41Gd9xIXrUL._SX381_BO1%2C204%2C203%2C200_.jpg" alt="C++ Primer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From one &lt;a href="https://www.goodreads.com/review/show/147787300?book_show_action=true&amp;amp;from_review_page=1"&gt;goodreads review&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“A really good C++ book for beginners. I mean, it probably won't work as the very first book on programming, but if you have some programming background and just want to learn C++, this should work really well. The whole thing is structured very nicely, and in the rare case when you have some questions, they are typically answered on the next page.“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-if-you-are-familiar-with-c-but-want-to-refresh-your-knowledge-use-a-tour-of-c-written-by-bjarne-stroustrup-the-creator-of-c"&gt;
  &lt;/a&gt;
  2. If you are familiar with C++ but want to refresh your knowledge, use &lt;a href="https://www.amazon.com/Tour-2nd-Depth-Bjarne-Stroustrup/dp/0134997832"&gt;A Tour of C++&lt;/a&gt; written by Bjarne Stroustrup, the creator of C++.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLUoCuTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41k5ZZRFnPL._SX392_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLUoCuTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41k5ZZRFnPL._SX392_BO1%2C204%2C203%2C200_.jpg" alt="A Tour Of C++"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From one &lt;a href="https://www.goodreads.com/review/show/897905076?book_show_action=true&amp;amp;from_review_page=1"&gt;goodreads review&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;”Given that I've programmed in C++ before this book was perfect for me as a re-introduction.&lt;br&gt;
It doesn't really explain things in depths, but it is rather just a very quick tour of the features. Perfect for someone who's an experienced programmer and has done some low level programming, but not very useful for beginners I'm afraid. Still I'd recommend reading this, if nothing it servers as a good motivational text to keep learning more.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-if-you-want-to-learn-about-every-detail-of-c-with-c11-support-use-the-c-programming-language-book"&gt;
  &lt;/a&gt;
  3. If you want to learn about every detail of C++ with C++11 support, use &lt;a href="https://www.amazon.com/C-Programming-Language-4th/dp/0321563840"&gt;The C++ Programming Language&lt;/a&gt; book
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WslBctGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/51Z-XJXiQnL._SX396_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WslBctGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/51Z-XJXiQnL._SX396_BO1%2C204%2C203%2C200_.jpg" alt="C++ Programming Language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-if-you-want-to-start-practicing-test-driven-development-tdd-with-c-start-with-modern-c-programming-with-testdriven-development-code-better-sleep-better"&gt;
  &lt;/a&gt;
  4. If you want to start practicing Test Driven Development (TDD) with C++, start with &lt;a href="https://www.amazon.com/Modern-Programming-Test-Driven-Development-Better/dp/1937785483/ref=sr_1_1?dchild=1&amp;amp;keywords=c%2B%2B+tdd&amp;amp;qid=1626029147&amp;amp;s=books&amp;amp;sr=1-1"&gt;Modern C++ Programming with Test-Driven Development: Code Better, Sleep Better&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SyZ029-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41ciWNq4jPL._SX415_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SyZ029-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41ciWNq4jPL._SX415_BO1%2C204%2C203%2C200_.jpg" alt="Modern C++ Programming With TDD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-if-you-want-to-use-c11-and-c14-features-and-to-understand-them-start-with-effective-modern-c-42-specific-ways-to-improve-your-use-of-c11-and-c14"&gt;
  &lt;/a&gt;
  5. If you want to use C++11 and C++14 features and to understand them, start with &lt;a href="https://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996/ref=sr_1_5?dchild=1&amp;amp;keywords=c%2B%2B+11+c%2B%2B14&amp;amp;qid=1626029291&amp;amp;s=books&amp;amp;sr=1-5"&gt;Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqqBpBY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/51qUGMia07L._SX379_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqqBpBY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/51qUGMia07L._SX379_BO1%2C204%2C203%2C200_.jpg" alt="Effective Modern C++"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-if-you-want-to-write-multithreaded-code-using-c-use-c-concurrency-in-action-practical-multithreading"&gt;
  &lt;/a&gt;
  6. If you want to write multithreaded code using C++, use &lt;a href="https://www.amazon.com/C-Concurrency-Action-Anthony-Williams/dp/1617294691/ref=sr_1_1?crid=3L4QJRR8X7N0K&amp;amp;dchild=1&amp;amp;keywords=c%2B%2B+concurrency+in+action&amp;amp;qid=1626029456&amp;amp;sprefix=c%2B%2B+concur%2Caps%2C285&amp;amp;sr=8-1"&gt;C++ Concurrency in Action: Practical Multithreading&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6cdn_MlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41kA1avGCYL._SX397_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6cdn_MlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41kA1avGCYL._SX397_BO1%2C204%2C203%2C200_.jpg" alt="C++ Concurrency in Action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-for-math-theory-and-generic-programming-use-elements-of-programming-and-from-mathematics-to-generic-programming"&gt;
  &lt;/a&gt;
  7. For Math theory and generic programming use &lt;a href="https://www.amazon.com/Elements-Programming-Alexander-Stepanov/dp/032163537X"&gt;Elements of programming&lt;/a&gt; and &lt;a href="https://www.amazon.com/Mathematics-Generic-Programming-Alexander-Stepanov/dp/0321942043/ref=sr_1_1?crid=3O1ALVEBYUTFB&amp;amp;dchild=1&amp;amp;keywords=from+mathematics+to+generic+programming&amp;amp;qid=1626029728&amp;amp;s=books&amp;amp;sprefix=from+mathe%2Cstripbooks-intl-ship%2C255&amp;amp;sr=1-1"&gt;From Mathematics to Generic Programming&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5i2NvHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1w7fb2mkkr3kw.cloudfront.net/assets/images/book/lrg/9780/3219/9780321942043.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5i2NvHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1w7fb2mkkr3kw.cloudfront.net/assets/images/book/lrg/9780/3219/9780321942043.jpg" alt="From Mathematics To Generic Programming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o97OtD2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41L34398I2L._SX373_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o97OtD2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41L34398I2L._SX373_BO1%2C204%2C203%2C200_.jpg" alt="Elements Of Programming"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>books</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>TypeScript Interfaces: A Quick Guide to Help You Get Started</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 12 Jul 2021 08:22:24 +0000</pubDate>
      <link>https://dev.to/alexdevero/typescript-interfaces-a-quick-guide-to-help-you-get-started-55p6</link>
      <guid>https://dev.to/alexdevero/typescript-interfaces-a-quick-guide-to-help-you-get-started-55p6</guid>
      <description>&lt;p&gt;TypeScript brings many useful improvements to JavaScript language. One of them is static typing system that can help you write type safe code. Interfaces are part of this typing system. This tutorial will help you understand what TypeScript interfaces are and how to use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-objects-and-black-swans"&gt;
  &lt;/a&gt;
  JavaScript, objects and black swans
&lt;/h2&gt;

&lt;p&gt;In JavaScript, and elsewhere as well, objects are one of the most popular ways to group related data together and pass them around. The problem is, there is no way in JavaScript to specify how certain object should look like. There is no way to say what properties should object have or what their values should be.&lt;/p&gt;

&lt;p&gt;This makes it easy to create code that is prone to errors. For example, to create an object and forget to add some property. Then, when it comes the time to finally use that object, you code will fail and program will crash. Reason? Your program expected specific property that is that is missing.&lt;/p&gt;

&lt;p&gt;The problem might not be a missing property. It might be that the type of a value of some property is different from what your program expected. The result is often the same. Code fails and program crashes. One may argue that this is not likely to happen. Well, earthquakes and floods are also not likely to happen.&lt;/p&gt;

&lt;p&gt;The thing is, nobody cares about probability when these events, these &lt;a href="https://en.wikipedia.org/wiki/Black_Swan_theory"&gt;black swans&lt;/a&gt;, occur. Your users will not care that wrong type or missing property is not likely to happen when the app they are using crashes. If only there was a way to avoid this. Maybe, TypeScript can help you here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-interfaces-made-simple"&gt;
  &lt;/a&gt;
  TypeScript interfaces made simple
&lt;/h2&gt;

&lt;p&gt;The main feature of TypeScript is its powerful type system. This type system allows you to quickly specify &lt;a href="https://blog.alexdevero.com/javascript-basics-data-types-pt1/"&gt;primitive data types&lt;/a&gt; for variables. These simple types are only one part of this type systems. TypeScript also allows you to do this with objects. With the help of TypeScript, you can define shape of any objects.&lt;/p&gt;

&lt;p&gt;Shape of an object specifies what properties a given object contains. This also includes their types, what types should values of these properties be. In TypeScript, you can specify this shape via interface. TypeScript interfaces are abstract types. Interfaces tell the compiler two important things.&lt;/p&gt;

&lt;p&gt;First, interfaces tell what properties a given object could have or must have. This means that when some property is optional, TypeScript will know that these properties are not required and will not require you to define them. Second, interfaces specify the types of these properties, types of their values.&lt;/p&gt;

&lt;p&gt;With this information, TypeScript can warn you when you accidentally define some object property and use a wrong type. TypeScript will know what type is expected to be used for each object property. If you use different type, TypeScript will tell you about the mismatch, where it happened and also how to fix it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-interface"&gt;
  &lt;/a&gt;
  Creating an interface
&lt;/h2&gt;

&lt;p&gt;When you want to create a new interface, you do it by using the &lt;code&gt;interface&lt;/code&gt; keyword. This keyword is followed by the name of the interface add curly brackets. These brackets contain the shape of an object, its properties and types. You specify these properties and types as key:value pairs.&lt;/p&gt;

&lt;p&gt;This is very similar to creating new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer"&gt;object literal&lt;/a&gt;. However, there are some differences. First, there is no equal sign between the name of the interface and curly brackets. Second, those key:value pairs are separated by semicolons. Below are examples of simple TypeScript interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an empty interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;EmptyObject&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface Cat:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;hairColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface Car:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;manufacturer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;numberOfWheels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Cat&lt;/code&gt; interface defines an object that has five properties: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;hairColor&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. All these properties are required. Values of &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;hairColor&lt;/code&gt; must be strings. The rest must be numbers. The &lt;code&gt;Car&lt;/code&gt; interface defines an object that has four properties: &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;manufacturer&lt;/code&gt;, &lt;code&gt;numberOfWheels&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These properties are also all required. Value of &lt;code&gt;numberOfWheels&lt;/code&gt; must be a number. The rest must be strings. Lastly, the &lt;code&gt;User&lt;/code&gt; interface defines an object that has again five properties: &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;isActive&lt;/code&gt; and &lt;code&gt;role&lt;/code&gt;. Values of the first three must be strings.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;isActive&lt;/code&gt; property must be a boolean, either true or false. The value of &lt;code&gt;role&lt;/code&gt; is more concrete. It says that the value must be one of these three strings: &lt;code&gt;'admin'&lt;/code&gt;, &lt;code&gt;'user'&lt;/code&gt; or &lt;code&gt;'guest'&lt;/code&gt;. If you use any other string, TypeScript will warn you that the value you use is wrong, even though the type is the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-interfaces"&gt;
  &lt;/a&gt;
  Implicit interfaces
&lt;/h3&gt;

&lt;p&gt;TypeScript interfaces don't have to be created only by you, explicitly. TypeScript will also create interfaces on its own when you define an object. TypeScript will look at the properties of that object and values of these properties. Then, it will infer specific types using type inference.&lt;/p&gt;

&lt;p&gt;The result will be implicit interface that matches the object you've just created. This also applies if you create empty object, without any properties. TypeScript will simply create an empty interface. This can later cause troubles when you try to add properties because TypeScript will expect the object to be, and remain, empty.&lt;/p&gt;

&lt;p&gt;A simple way to avoid this is by defining interfaces by yourself, explicitly. If you create an empty object also create an interface for it. This interface will not specify the current shape of the object, but the shape of it in the future. This will tell TypeScript which properties and types to expect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-interfaces"&gt;
  &lt;/a&gt;
  Using interfaces
&lt;/h2&gt;

&lt;p&gt;When you create an interface you also have to tell TypeScript for which object you intend to use it. Doing so is easy. When you assign an object to a variable you can specify its interface by adding colons and the name of the interface between the variable name and equal sign.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use interface to annotate an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userJoe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some_secret_password123645&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joe@user.co&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also applies elsewhere. If you want to use an interface for an object used as a function parameter you use the same approach. You specify the parameter, then add colons, and then you specify the interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a function with "user" parameter&lt;/span&gt;
&lt;span class="c1"&gt;// and annotate the "user" parameter with "User" interface.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementing-interfaces-with-classes"&gt;
  &lt;/a&gt;
  Implementing interfaces with classes
&lt;/h2&gt;

&lt;p&gt;TypeScript also allows you to use interface with &lt;a href="https://blog.alexdevero.com/get-started-with-javascript-classes/"&gt;JavaScript classes&lt;/a&gt;. With classes, though, the implementation is slightly different. You still specify the interface after the name, class name in this case. However, you don't put colons between the name of the class and the interface.&lt;/p&gt;

&lt;p&gt;What you do instead is basically replacing those colons with &lt;code&gt;implements&lt;/code&gt; keyword. This will tell TypeScript that a given class should use an interface that follows after this keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface Person:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define some class properties&lt;/span&gt;
  &lt;span class="c1"&gt;// of type string and number:&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Define class method that returns a string:&lt;/span&gt;
  &lt;span class="nl"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate class "Female" with "Person" interface:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define required public properties:&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="c1"&gt;// Create constructor and assign existing properties:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Define required class method:&lt;/span&gt;
  &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specifying-optional-properties"&gt;
  &lt;/a&gt;
  Specifying optional properties
&lt;/h2&gt;

&lt;p&gt;Until now, all examples we were using used only required properties. This will work for many cases. However, it can happen that you may not need some properties in a given object every time. One thing you can do is to create a new interface, without optional properties. Then, you can switch between these interfaces as you need.&lt;/p&gt;

&lt;p&gt;This will work, but it will also lead to duplicates and more code to maintain. There is another thing you can do. You can take the original interface and mark the optional properties as optional. You achieve this by placing a question mark (&lt;code&gt;?&lt;/code&gt;) between the property name and the colons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface with optional properties:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= This property will be optional&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doherty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stevens&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work because "middleName"&lt;/span&gt;
&lt;span class="c1"&gt;// property is not required:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;William&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work because "lastName"&lt;/span&gt;
&lt;span class="c1"&gt;// property is required but missing:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;O&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;Conor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Property 'lastName' is missing in type '{ firstName: string; middleName: string; }' but required in type 'Person'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specifying-readonly-properties"&gt;
  &lt;/a&gt;
  Specifying read-only properties
&lt;/h2&gt;

&lt;p&gt;When you create an object you may want to prevent some properties from being changed. You can specify this intent also via TypeScript interfaces. You achieve this by placing the &lt;code&gt;readonly&lt;/code&gt; keyword before the property name. This will tell TypeScript that the property that follows is a read-only property.&lt;/p&gt;

&lt;p&gt;If you use the interface to annotate some object, you will be able to set the value for the read-only property only during initialization. If you try to change the property value later, TypeScript compiler will throw an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface with read-only property:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= This property will be read-only&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate object "userFrank" with "User" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123456782&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankie@frank.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change value of "username" property:&lt;/span&gt;
&lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change value of "email" property:&lt;/span&gt;
&lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankman@frank.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Cannot assign to 'email' because it is a read-only property.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#interfaces-for-functions"&gt;
  &lt;/a&gt;
  Interfaces for functions
&lt;/h2&gt;

&lt;p&gt;Objects, including classes, are not the only things that can use interfaces. You can also use TypeScript interfaces to annotate functions. You can do this by giving the interface a call signature. This means that you will specify only the parameter list and return type of the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface for multiply function:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MultiplyFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Specify only parameters and return type:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate the "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// with "MultiplyFunc" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MultiplyFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Note:&lt;/span&gt;
&lt;span class="c1"&gt;// Thanks to MultiplyFunc interface TypeScript&lt;/span&gt;
&lt;span class="c1"&gt;// will know that "a" and "b" in "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// are numbers so you don't have to type them explicitly.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing about interfaces and functions. Name of parameters in an interface doesn't have to match the name of parameters in the actual function. You can use one name for interface parameter and another for the function declaration. TypeScript will connect parameters with their types correctly using their order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MyFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Specify only parameters and return type:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate the "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// with "MultiplyFunc" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`a is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, b is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, c is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TypeScript will correctly infer "a" to be number,&lt;/span&gt;
&lt;span class="c1"&gt;// "b" to be string and "c" to be boolean.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extending-interfaces"&gt;
  &lt;/a&gt;
  Extending interfaces
&lt;/h2&gt;

&lt;p&gt;One useful thing is that interfaces allow extending, just like JavaScript classes. Let's say you have an existing interface. You also have an object, but this object contains more properties than the interface specifies. One thing you can do is to change the interface to fit this object.&lt;/p&gt;

&lt;p&gt;The problem is that this will influence all objects using that interface. Another thing is creating new interface, duplicating the old one and adding new properties. This will bloat your code with duplicates. Luckily, there is the third option. You can create new interface and extend it with the original.&lt;/p&gt;

&lt;p&gt;This way, the new interface will inherit all properties defined in the original interface. Best part? You will not have to copy a single line of code. You can extend interface by using the &lt;code&gt;extends&lt;/code&gt; keyword. This keyword allows you to extend one interface with just one interface as well as with multiple.&lt;/p&gt;

&lt;p&gt;When you want to extend interface with multiple interfaces you separate them with commas. The &lt;code&gt;extends&lt;/code&gt; keyword goes between the first interface, the one you are extending, and the second, the one you are extending with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Male" interface that extends "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Male {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Male';&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Female" interface that also extends "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Female {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Female';&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Boy" interface that extends "Person" and "Male" interfaces:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Boy&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Boy {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Male';&lt;/span&gt;
&lt;span class="c1"&gt;//   age: number;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Girl" interface that extends "Person" and "Female" interfaces:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Girl&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Girl {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Female';&lt;/span&gt;
&lt;span class="c1"&gt;//   age: number;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stanley&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stanley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;david&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;andreas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Boy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Andreas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;victoria&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Girl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Victoria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-generic-interfaces"&gt;
  &lt;/a&gt;
  Creating generic interfaces
&lt;/h2&gt;

&lt;p&gt;One more thing. TypeScript also allows to create something called "generic interfaces". These interfaces allow you to specify type of a property based on one or more parameters you provide the interface with when you use it. You can specify these parameters using angle brackets (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) like in the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface for UserData:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UserData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a generic interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ApiResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create function to fetch API&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use ApiResponse "interface" and pass&lt;/span&gt;
  &lt;span class="c1"&gt;// the "UserData" interface as argument (for T argument):&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApiResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/some_api_endpoint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// The "ApiResponse&amp;lt;UserData&amp;gt;" basically translates to:&lt;/span&gt;
  &lt;span class="c1"&gt;// interface ApiResponse&amp;lt;T&amp;gt; {&lt;/span&gt;
  &lt;span class="c1"&gt;//   date: Date;&lt;/span&gt;
  &lt;span class="c1"&gt;//   code: number;&lt;/span&gt;
  &lt;span class="c1"&gt;//   payload: UserData[];&lt;/span&gt;

  &lt;span class="c1"&gt;//   Or:&lt;/span&gt;
  &lt;span class="c1"&gt;//   payload: [name: string; email: string;]&lt;/span&gt;
  &lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-typescript-interfaces"&gt;
  &lt;/a&gt;
  Conclusion: TypeScript interfaces
&lt;/h2&gt;

&lt;p&gt;TypeScript interfaces provide an easy way to annotate your objects, including classes, and also functions. This can help you write safer and more maintainable code. I hope that this tutorial helped you understand and learn about what interfaces are and how to use them in your code.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A quick introduction to Next.js</title>
      <author>Menard Maranan</author>
      <pubDate>Mon, 12 Jul 2021 08:22:20 +0000</pubDate>
      <link>https://dev.to/menard_codes/a-quick-introduction-to-next-js-k9c</link>
      <guid>https://dev.to/menard_codes/a-quick-introduction-to-next-js-k9c</guid>
      <description>&lt;p&gt;Next.js, a React framework that leveled up the game of React from just front-end to &lt;strong&gt;Fullstack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you haven't developed with Next.js yet, lemme tell you that you should be. Why? Because you can do hella lot things here more than a plain 'ol React App (you'll later see why).&lt;/p&gt;

&lt;p&gt;But to give you a hint, Next.js allows you to build a website or webapp in different ways. You can: serve statically generated files like HTML in a CDN, in-demand or per-request server-side rendering of HTML, and heck, you can even build an API with Next.js! Can you imagine building an API within React?&lt;/p&gt;

&lt;p&gt;But anyways, let's take a quick look on Next.js as a Fullstack framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-as-a-fullstack-solution"&gt;
  &lt;/a&gt;
  Next.js as a FullStack solution
&lt;/h2&gt;

&lt;p&gt;Unlike React.js, which is pure front end, Next.js is fullstack.&lt;/p&gt;

&lt;p&gt;Just like what I said on the introduction, you can build websites using 3 different approaches in web development: serve static files, send server generated sites, or even build an API.&lt;/p&gt;

&lt;p&gt;But how do you know which approach to use at what scenario?&lt;/p&gt;

&lt;p&gt;My tip (and Next.js documentation tip):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Site&lt;/strong&gt; - If a page on your site is not always changing. Meaning, it's the same regardless of who requested it or at what time (i.e. about page, or log in page, or sign up page, etc.). That also means the page can be generated on build time and cached on a CDN, which is the fastest way for our website to be served and the cheapest to host (you can even host it for free, like in GitHub pages).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server Side Rendering&lt;/strong&gt; - If a page often change, or always change, or if it depends the user requesting it, (i.e. user account, news feed, etc.), then that is when you use Server Side rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; - This is not actually specified by Next.js Documentation as alternative approach, but if you're client side app needs to query the database, then do that in the backend and expose this endpoint for the client. This might be used by client side rendered page. But you can also do other backend services like send POST request to save a data on the database and again, expose this endpoint. You can define your API with a syntax almost similar to an express API.&lt;/p&gt;

&lt;p&gt;Among the choices, Next.js Documentation stressed out to choose static site whenever possible, given it's speed and being low-cost. SSR is slower than static ones because it runs on a server and can be expensive.&lt;/p&gt;

&lt;p&gt;But whatever approach you want or need in your app, Next.js have a support for that.&lt;/p&gt;

&lt;p&gt;Before we move to the next part, let me point out that Next.js is not an 'end all be all' solution, because for example, Next.js have no native support to things like Real Time Video Chat. But no worries, Next.js is a JAMstack solution. The 'A' in JAMstack is API, and we can use a third-party API as a solution for such needs (an example would be Agora).&lt;/p&gt;

&lt;p&gt;Ok, but how do we compare Next.js with React besides Next being fullstack?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-vs-react"&gt;
  &lt;/a&gt;
  Next.js vs React
&lt;/h2&gt;

&lt;p&gt;A question I have when I started learning Next.js is "Is Next.js another wild javascript module released in the JavacSript Jungle?"&lt;/p&gt;

&lt;p&gt;Turns out the answer is both yes and no.&lt;/p&gt;

&lt;p&gt;In fact, Next.js is not actually different from React, because Next.js is a &lt;strong&gt;React framework&lt;/strong&gt; and yeah, it's like coming from the lineage of React.&lt;/p&gt;

&lt;p&gt;The additional features of Next.js to React are what makes it cool and popular among JavaScript folks.&lt;/p&gt;

&lt;p&gt;First off, Next.js deals with the common problems in a React App, like SEO and optimization. Additional to that are the in-built support for things like routing and css (including Sass).&lt;/p&gt;

&lt;p&gt;So yeah, those are just some things to mention about the pros of Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-next-app"&gt;
  &lt;/a&gt;
  Create Next App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpOhq06e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv76gtwsyaevk0zc4snu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpOhq06e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv76gtwsyaevk0zc4snu.png" alt="Next js folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before I forget to mention, starting a brand new Next.js app is quite similar to React which can be done by firing an &lt;code&gt;npx create-next-app &amp;lt;app-name&amp;gt;&lt;/code&gt; on your terminal, just like the good 'ol React. Again, instead of &lt;code&gt;create-react-app&lt;/code&gt;, you see it's &lt;code&gt;create-next-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So yeah, this will create a folder named after the one you specified and build the Next.js folder structure, install it's dependencies, and add some boilerplate code (again, just like React, but tailored in the needs of a Next App).&lt;/p&gt;

&lt;p&gt;You can try that out yourself and check the &lt;a href="https://nextjs.org/docs"&gt;Documentation&lt;/a&gt; if you're feeling lost.&lt;/p&gt;

&lt;p&gt;Next.js seems quite good right? But...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-ditch-react-for-nextjs"&gt;
  &lt;/a&gt;
  Should you ditch React for Next.js?
&lt;/h2&gt;

&lt;p&gt;Woah, that's a strong question!&lt;/p&gt;

&lt;p&gt;My takes on this would be bias, but I think, not completely (because hey, you're still using react). Before thinking about fully adopting Next.js, you have to consider that it's still a growing market, and if you're a typical dev, you hold a job (or wants to, like me, I'm available for a position if you want to reach out...😏), the job market is again on the side of React. The reasons are up to you, but Next.js is still a pretty darn choice for new and future projects.&lt;/p&gt;

&lt;p&gt;But personally, I believe Next.js is the future of React and Web Development itself. We're on the advent of yet another revolution in tech, the JAMstack, and Next.js is in perfect position for this event. And if you have an upcoming project, consider Next.js, and discover the advantages it will present you. Or maybe you're just starting out, take my word for it, try Next.js.&lt;/p&gt;

&lt;p&gt;To be honest, I myself adopted Next.js and I haven't used &lt;code&gt;create-react-app&lt;/code&gt; for a while now, and so far, I have no doubt with my choice.&lt;/p&gt;

&lt;p&gt;But whatever your condition was, your choice depends on you (but I still recommend Next.js, because come on! Why should I write this if that's not the point right? Just kidding...... Try Next.js)&lt;/p&gt;

&lt;p&gt;Hopefully this article helped you to get up to speed with 'What the heck is Next.js'.&lt;/p&gt;

&lt;p&gt;If you want further readings, you can check out their &lt;a href="https://nextjs.org/docs"&gt;Documentation&lt;/a&gt; or follow me up here where I'll be posting more Next.js blogs.&lt;/p&gt;

&lt;p&gt;Btw, Follow me on &lt;a href="https://twitter.com/menard_codes"&gt;Twitter!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Audio File Transcription, for Super-Efficient Recording</title>
      <author>ViviJiang-clevercoder</author>
      <pubDate>Mon, 12 Jul 2021 08:20:10 +0000</pubDate>
      <link>https://dev.to/vivijiangclevercoder/audio-file-transcription-for-super-efficient-recording-33f5</link>
      <guid>https://dev.to/vivijiangclevercoder/audio-file-transcription-for-super-efficient-recording-33f5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Converting audio into text has a wide range of applications: generating video subtitles, taking meeting minutes, and writing interview transcripts. HUAWEI ML Kit's service makes doing so easier than ever before, converting audio files into meticulously accurate text, with correct punctuation as well!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actual Effects&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Build and run an app with audio file transcription integrated. Then, select a local audio file and convert it into text.&lt;/p&gt;

&lt;p&gt;![Alt text of image]&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xQw9J1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6s0ep7ao1axd08c80gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xQw9J1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6s0ep7ao1axd08c80gm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Development Preparations&lt;/strong&gt; &lt;br&gt;
For details about configuring the Huawei Maven repository and integrating the audio file transcription SDK, please refer to the &lt;a href="https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides-V5/audio-sdk-0000001050038090-V5"&gt;Development Guide&lt;/a&gt; of ML Kit on HUAWEI Developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Declaring Permissions in the AndroidManifest.xml File&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Open the AndroidManifest.xml in the main folder. Add the network connection, network status access, and storage read permissions before 
Please note that these permissions need to be dynamically applied for. Otherwise, Permission Denied will be reported.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Development Procedure&lt;/strong&gt;&lt;br&gt;
Creating and Initializing an Audio File Transcription Engine**&lt;br&gt;
Override onCreate in MainActivity to create an audio transcription engine.&lt;br&gt;
private MLRemoteAftEngine mAnalyzer;&lt;/p&gt;

&lt;p&gt;mAnalyzer = MLRemoteAftEngine.getInstance();&lt;br&gt;
mAnalyzer.init(getApplicationContext());&lt;br&gt;
mAnalyzer.setAftListener(mAsrListener);&lt;/p&gt;

&lt;p&gt;Use MLRemoteAftSetting to configure the engine. The service currently supports Mandarin Chinese and English, that is, the options of mLanguage are zh and en.&lt;br&gt;
MLRemoteAftSetting setting = new MLRemoteAftSetting.Factory()&lt;br&gt;
        .setLanguageCode(mLanguage)&lt;br&gt;
        .enablePunctuation(true)&lt;br&gt;
        .enableWordTimeOffset(true)&lt;br&gt;
        .enableSentenceTimeOffset(true)&lt;br&gt;
        .create();&lt;/p&gt;

&lt;p&gt;enablePunctuation indicates whether to automatically punctuate the converted text, with a default value of false.&lt;br&gt;
If this parameter is set to true, the converted text is automatically punctuated; false otherwise.&lt;/p&gt;

&lt;p&gt;enableWordTimeOffset indicates whether to generate the text transcription result of each audio segment with the corresponding offset. The default value is false. You need to set this parameter only when the audio duration is less than 1 minute.&lt;br&gt;
If this parameter is set to true, the offset information is returned along with the text transcription result. This applies to the transcription of short audio files with a duration of 1 minute or shorter.&lt;br&gt;
If this parameter is set to false, only the text transcription result of the audio file will be returned.&lt;/p&gt;

&lt;p&gt;enableSentenceTimeOffset indicates whether to output the offset of each sentence in the audio file. The default value is false.&lt;br&gt;
If this parameter is set to true, the offset information is returned along with the text transcription result.&lt;br&gt;
If this parameter is set to false, only the text transcription result of the audio file will be returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a Listener Callback to Process the Transcription Result&lt;/strong&gt;&lt;br&gt;
private MLRemoteAftListener mAsrListener = new MLRemoteAftListener() &lt;/p&gt;

&lt;p&gt;After the listener is initialized, call startTask in AftListener to start the transcription.&lt;/p&gt;

&lt;p&gt;(&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Override
public void onInitComplete(String taskId, Object ext) {
    Log.i(TAG, "MLRemoteAftListener onInitComplete" + taskId);
    mAnalyzer.startTask(taskId);
}

Override onUploadProgress, onEvent, and onResult in MLRemoteAftListener.

@Override
public void onUploadProgress(String taskId, double progress, Object ext) {
    Log.i(TAG, " MLRemoteAftListener onUploadProgress is " + taskId + " " + progress);
}

@Override
public void onEvent(String taskId, int eventId, Object ext) {
    Log.e(TAG, "MLAsrCallBack onEvent" + eventId);
    if (MLAftEvents.UPLOADED_EVENT == eventId) { // The file is uploaded successfully.
        showConvertingDialog();
        startQueryResult(); // Obtain the transcription result.
    }
}

@Override
public void onResult(String taskId, MLRemoteAftResult result, Object ext) {
    Log.i(TAG, "onResult get " + taskId);
    if (result != null) {
        Log.i(TAG, "onResult isComplete " + result.isComplete());
        if (!result.isComplete()) {
            return;
        }
        if (null != mTimerTask) {
            mTimerTask.cancel();
        }
        if (result.getText() != null) {
            Log.e(TAG, result.getText());
            dismissTransferringDialog();
            showCovertResult(result.getText());
        }

        List&amp;lt;MLRemoteAftResult.Segment&amp;gt; segmentList = result.getSegments();
        if (segmentList != null &amp;amp;&amp;amp; segmentList.size() != 0) {
            for (MLRemoteAftResult.Segment segment : segmentList) {
                Log.e(TAG, "MLAsrCallBack segment  text is : " + segment.getText() + ", startTime is : " + segment.getStartTime() + ". endTime is : " + segment.getEndTime());
            }
        }

        List&amp;lt;MLRemoteAftResult.Segment&amp;gt; words = result.getWords();
        if (words != null &amp;amp;&amp;amp; words.size() != 0) {
            for (MLRemoteAftResult.Segment word : words) {
                Log.e(TAG, "MLAsrCallBack word  text is : " + word.getText() + ", startTime is : " + word.getStartTime() + ". endTime is : " + word.getEndTime());
            }
        }

        List&amp;lt;MLRemoteAftResult.Segment&amp;gt; sentences = result.getSentences();
        if (sentences != null &amp;amp;&amp;amp; sentences.size() != 0) {
            for (MLRemoteAftResult.Segment sentence : sentences) {
                Log.e(TAG, "MLAsrCallBack sentence  text is : " + sentence.getText() + ", startTime is : " + sentence.getStartTime() + ". endTime is : " + sentence.getEndTime());
            }
        }
    }

}
(```

)


Processing the Transcription Result in Polling Mode
After the transcription is completed, call getLongAftResult to obtain the transcription result. Process the obtained result every 10 seconds.


(

```)
private void startQueryResult() {
    Timer mTimer = new Timer();
    mTimerTask = new TimerTask() {
        @Override
        public void run() {
            getResult();
        }
    };
    mTimer.schedule(mTimerTask, 5000, 10000); // Process the obtained long speech transcription result every 10s.
}

private void getResult() {
    Log.e(TAG, "getResult");
    mAnalyzer.setAftListener(mAsrListener);
    mAnalyzer.getLongAftResult(mLongTaskId);
}

(```

)


(https://stackoverflow.com/questions/tagged/huawei-mobile-services)

Follow our official account for the latest HMS Core-related news and updates.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
    </item>
    <item>
      <title>Load, Store, and Protect LinuxBased NFS Workloads in AWS</title>
      <author>med_karim_amimi</author>
      <pubDate>Mon, 12 Jul 2021 08:05:40 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/load-store-and-protect-linuxbased-nfs-workloads-in-aws-1636</link>
      <guid>https://dev.to/awsmenacommunity/load-store-and-protect-linuxbased-nfs-workloads-in-aws-1636</guid>
      <description>&lt;p&gt;This article outlines the Linux-Based Network File Systems migration strategy from on-premise to AWS cloud.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h1&gt;

&lt;p&gt;Network File Systems (NFS) are widely used in on-premise applications in order to synchronously share the same content over multiple servers. This document describes the best practices for migrating Linux file-based applications to the cloud smoothly, efficiently and securely.&lt;br&gt;
AWS is offering the most suitable way for its customers to see their data transferred to the cloud taking advantage of managed services that were designed to jointly provide a smooth migration process. This process would leverage the capabilities offered by AWS DataSync, Amazon EFS &amp;amp; AWS Backup.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#service-overview"&gt;
  &lt;/a&gt;
  Service Overview:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#aws-datasync"&gt;
  &lt;/a&gt;
  AWS DataSync:
&lt;/h3&gt;

&lt;p&gt;It is used mainly to move large amount of data from on-premise to AWS. It can synchronize to: Amazon S3,Amazon EFS, Amazon FSx for Windows and it moves data from your NAS or file system via NFS or SMB. The data transfer via AWS Datasync can be secure, fast and cost-effective comparing to similar open source tools.&lt;br&gt;
In this document, we will be focusing on using Datasync in conjunction with on-premise NFS and Amazon EFS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amazon-elastic-file-system"&gt;
  &lt;/a&gt;
  Amazon Elastic File System:
&lt;/h3&gt;

&lt;p&gt;EFS is Managed NFS that can be mounted on many EC2 in multi-AZ and provides highly available, scalable and and shareable storage. EFS is POSIX file system that scales automatically without capacity planning needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-backup"&gt;
  &lt;/a&gt;
  AWS Backup:
&lt;/h3&gt;

&lt;p&gt;AWS Backup is fully AWS managed service that enables you to centralize and automate data protection. In this document, It will be used at to backup the EFS file system that we are moving data to.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#migration-guide"&gt;
  &lt;/a&gt;
  Migration Guide:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An active AWS account.&lt;/li&gt;
&lt;li&gt;Required permissions to create new resources for each of the mentioned services. &lt;/li&gt;
&lt;li&gt;A virtualization system that is capable of running the DataSync agent: VMware ESXi, Microsoft Hyper-V Hypervisor or Linux Kernel-based Virtual Machine (KVM). &lt;/li&gt;
&lt;li&gt;Web browser to activate the DataSync agent.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#setup-and-configuration"&gt;
  &lt;/a&gt;
  Setup and Configuration:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Elastic File System:&lt;/strong&gt; &lt;br&gt;
EFS could be created either using AWS Console, CLI or SDK. As discussed earlier, No setup, provisioning or capacity management are needed. The high availability level that customer may require depends on different storage classes offered by AWS (Based on redundancy options and Access frequency). It is up to the customer to define the application needs and criticality. The clients (Usually EC2) are allowed to access the EFS via mount targets that should be separately created. Each set of EC2 instances tied to an AZ needs its new target mount to be created in that particular AZ. Like EC2 instances, the EFS security is managed by Security Groups. It could be accessed by its DNS name. The DNS resolution of cross AZ target mounts is automatically managed.&lt;br&gt;
High availability ,Durability, File system Life cycle among many other options could be set while creating the EFS. Encryption at rest is a recommended option for data protection purposes but can only be set during the file system creation while encryption in transit can be set later. &lt;br&gt;
EFS offers two performance related modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performance modes: The default option ,General Purpose, and the Max I/O Mode. The latter option offers an unlimited number of file system operation per second has a slightly higher latency per each file system operation.&lt;/li&gt;
&lt;li&gt;Throughput modes:  In the Bursting mode, The throughput scales linearly with the file system size with a base of 2.1TB of burst credit when creating a new EFS. The throughput burst can go up to 100 MB/s of writing-only operation which will be the main activity during the migration while the provisioned mode offers a fixed throughput that can be set while creating the EFS and adjusted later based on customer needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the purposes of this document, we recommend selecting the General Purpose performance mode and to use provisioned throughput mode if your transfer rate should exceed 100MB/s.&lt;br&gt;
AWS provides four EFS storage classes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EFS Standard and EFS One Zone: Default setting used for frequently accessed files.&lt;/li&gt;
&lt;li&gt;EFS standard-Infrequent access(Standard-IA) and EFS One Zone-Infrequent access (One Zone- IA): Used for files that are not used in a daily basis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choosing IA storage can reduce costs but increasing latency. The EFS lifecycle can automatically manage the file move based on already set custom policy. From operational point of view, EFS serves its clients transparently regardless the EFS storage class.&lt;br&gt;
In this article, we recommend enabling lifecycle management for cost effectiveness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DataSync:&lt;/strong&gt; &lt;br&gt;
AWS Datasync is a AWS fully managed service useful for data migration and data synchronization between the on-premise and cloud environments. This document assumes that a Direct Connect is set for a better transfer rate(up to 10Gbps per Datasync Agent). AWS Datasync offers encryption in transit and data integrity checks. It performs some data processing for a more efficient bandwidth utilization.&lt;br&gt;
The needed steps to perform this operation are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download and activate the DataSync agent as a virtual machine in your on-premises environment. &lt;/li&gt;
&lt;li&gt;Create a ‘task’, which is the complete definition of a data transfer that will handle the transfer between two locations: an on-premises Network File System (NFS) server and Amazon EFS.&lt;/li&gt;
&lt;li&gt;Set the appropriate DataSync configuration options:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Enable NFS traffic (port 2049) in your on-premises firewall and AWS VPC.&lt;/li&gt;
&lt;li&gt;Set DataSync configuration to share at least one Security Group with the EFS mount targets.&lt;/li&gt;
&lt;li&gt;Configure VPC endpoints and enable additional on-premises firewall ports in case you want to avoid sending data over public internet.&lt;/li&gt;
&lt;li&gt;Make sure that default metadata settings are turned on to preserve files ownership, permissions and timestamp.&lt;/li&gt;
&lt;li&gt;Disable the automatic data verification step if you are sure that stop any activity against your on-premise file system before and during data transfer. The customer can turn off this option to reduce the transfer time.&lt;/li&gt;
&lt;li&gt;Set a bandwidth limit for the task to prevent DataSync process to consume too many network resources.&lt;/li&gt;
&lt;li&gt;Deploy and allocate as many as four DataSync agents to you task. This options allow to speed up the data transfer by overcoming the network limits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally,you need to run the DataSync task either on-demand or periodically via the DataSync API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Backup:&lt;/strong&gt;&lt;br&gt;
AWS backup offers an extra data protection layer. Automatic AWS backup feature could be turned on/off during the creation of the EFS or later depending on the EFS storage class.&lt;/p&gt;

&lt;p&gt;AWS Backup provides automated backup schedules, retention management, and lifecycle management,. It protects the data from any unintended events. AWS Backup is incremental which means that only the changes applied on the file system are recorded.&lt;br&gt;
The backup plan is the policy expression that defines when and how you want to back up your AWS resources. Predefined backup plan are already provided by AWS but customer can add it own plans.&lt;br&gt;&lt;br&gt;
You can optionally add rules handling the data migration conditions and the purge timeline. Moving data to ‘cold’ storage may cost you few extra hours during the restore process. After you create your backup plan, you can choose which of your EFS file systems are governed by it. Two options are available to select the target file systems: The tag-based mechanism which allow the AWS backup process to consider each file system with a particular tag or by simply selecting the files systems IDs.&lt;br&gt;&lt;br&gt;
Backups are encrypted with a KMS key for security purposes. This process is managed by backup vaults created with AWS backup service.&lt;br&gt;
The restore process can be triggered with the AWS console and the backup can be restored to an existing file system or to a newly created one. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#operations-and-monitoring"&gt;
  &lt;/a&gt;
  Operations and Monitoring:
&lt;/h1&gt;

&lt;p&gt;After setting all needed services for data migration to the cloud, we need to monitor the performance of each one of the services based on metrics provided by the service itself or the centralized monitoring service AWS CloudWatch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DataSync:&lt;/strong&gt;&lt;br&gt;
Basically, what we need is to make sure that the AWS DataSync is able to reach the data source and the data target all the time and to get status information about each task which helps to troubleshoot any issue that may occur. The information about every task phase is available as well to provide progress status.&lt;br&gt;
The DataSync API can provide operational health information to external monitoring systems . You can also leverage AWS CloudWatch log group to centralize logs in AWS.&lt;br&gt;
DataSync is well integrated also with Amazon CloudWatch to send events and metrics useful to set alarms for state change in an agent,location,task,or task execution. You can also get the real-time statistics about the transferred volume of data as a function of time.    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon EFS:&lt;/strong&gt;&lt;br&gt;
The metrics provided by Amazon CloudWatch could be useful to decide which EFS performance mode to be used. You can set initially the EFS performance to be at General purpose mode and permanently monitor the PercentIOLimit metric. If the metrics consistently stands around 100%, you may want to set your EFS file system at the Max I/O mode. Alternatively, you can split the workload across multiple General Purpose mode EFS.&lt;br&gt;
AWS proposes two techniques to drive additional throughput while not reaching the I/O limit:&lt;br&gt;
    1. EFS recommends leveraging parallel I/O as much as possible taking advantage of the distributed design of EFS. A GitHub tutorial is available for more details regarding this technique.&lt;br&gt;&lt;br&gt;
    2. You can also determine if your throughput is being rate-limited based on your storage. The CloudWatch Throughput utilization metric can be useful for this purpose. The MeteredIOBytes metric (ratio of metered throughput you driving on your EFS to PermittedThroughput) could be useful as well. If the ratio is equal to one, the file system is consuming all available throughput. You can see the same behavior if your EFS is on Bursting Throughput mode with a small file system with no burst credit. If this is the case and you have deterministic application throughput requirements, you can consider the Provisioned Throughput mode.&lt;br&gt;
All discussed metrics are available on Amazon CloudWatch dashboards.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pricing-and-cost-considerations"&gt;
  &lt;/a&gt;
  Pricing and Cost Considerations:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#aws-datasync"&gt;
  &lt;/a&gt;
  AWS DataSync:
&lt;/h3&gt;

&lt;p&gt;The service pricing is $0.0125/GB or $12.80/TB transferred. This price is globally applicable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amazon-efs"&gt;
  &lt;/a&gt;
  Amazon EFS:
&lt;/h3&gt;

&lt;p&gt;EFS pricing depends on the file system storage class, infrequent access IO request and the provisioned throughput. This document focuses on US-EAST-1 prices:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Storage Class&lt;/th&gt;
&lt;th&gt;Price (per GB-month)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EFS Standard storage&lt;/td&gt;
&lt;td&gt;$0.30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Standard IA storage&lt;/td&gt;
&lt;td&gt;$0.025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EFS One Zone Storage&lt;/td&gt;
&lt;td&gt;$0.16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EFS One Zone IA&lt;/td&gt;
&lt;td&gt;$0.0133&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you choose the Infrequent Access storage classes, an extra fee is applied for retrieving data or moving data to the IA storage class. The fee is $0.01/GB transferred.&lt;br&gt;
You pay also for the provisioned throughput at the rate of $6/MB/s. You only pay if you provision more throughput than the what your EFS class storage/Size provides initially.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-backup"&gt;
  &lt;/a&gt;
  AWS Backup:
&lt;/h3&gt;

&lt;p&gt;The backup service costs you $0.05/GB-month for warm storage and $0.01/GBmonth for cold storage.&lt;br&gt;
Restores cost $0.02/GB from warm storage and $0.03/GB from cold storage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migration-cost-example"&gt;
  &lt;/a&gt;
  Migration Cost Example:
&lt;/h3&gt;

&lt;p&gt;The following example is made based on simplifying assumptions satisfying the industry estimates:&lt;br&gt;
&lt;strong&gt;Assumptions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Migrated Data: 100TB&lt;/li&gt;
&lt;li&gt;Storage period: 1 year&lt;/li&gt;
&lt;li&gt;IA stored data: 80% of overall data (never read after being moved to IA EFS)&lt;/li&gt;
&lt;li&gt;Backup policy: Daily&lt;/li&gt;
&lt;li&gt;Availability: Multi-AZ&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Cost&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AWS DataSync&lt;/td&gt;
&lt;td&gt;$0.0125/GB * 1000 GB/TB * 100 TB = $1,250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard Storage&lt;/td&gt;
&lt;td&gt;$0.30/GB-month * 1000 GB/TB * 100 TB * 20% frequently accessed * 12 months/year = $72,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard IA I/O&lt;/td&gt;
&lt;td&gt;$0.01/GB * 1000 GB / TB * 100 TB * 80% infrequently accessed = $800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard IA Storage&lt;/td&gt;
&lt;td&gt;$0.025/GB-month * 1000 GB/TB * 100 TB * 80% infrequently accessed * 12 months/year = $24,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS Backup&lt;/td&gt;
&lt;td&gt;$0.05/GB-month * 1000 GB/TB * 100 TB * 12 months/year = $60,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total Cost&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;$157,250&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Assumptions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Migrated Data: 100TB&lt;/li&gt;
&lt;li&gt;Storage period: 1 year&lt;/li&gt;
&lt;li&gt;IA stored data: 80% of overall data (never read after being moved to IA EFS)&lt;/li&gt;
&lt;li&gt;Backup policy: Daily&lt;/li&gt;
&lt;li&gt;Availability: One AZ&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Cost&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AWS DataSync&lt;/td&gt;
&lt;td&gt;$0.0125/GB * 1000 GB/TB * 100 TB = $1,250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard Storage&lt;/td&gt;
&lt;td&gt;$0.16/GB-month * 1000 GB/TB * 100 TB * 20% frequently accessed * 12 months/year = $38,400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard IA I/O&lt;/td&gt;
&lt;td&gt;$0.01/GB * 1000 GB / TB * 100 TB * 80% infrequently accessed = $800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard IA Storage&lt;/td&gt;
&lt;td&gt;$0.0133/GB-month * 1000 GB/TB * 100 TB * 80% infrequently accessed * 12 months/year = $12,768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS Backup&lt;/td&gt;
&lt;td&gt;$0.05/GB-month * 1000 GB/TB * 100 TB * 12 months/year = $60,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total Cost&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;$112,418&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h1&gt;

&lt;p&gt;This document explains how to set up,tune and monitor your migrating applications to the AWS cloud. The provided solution is based on AWS DataSync for migrating data, Elastic File System for storing the data and AWS Backup for data protection. The above detailed examples show how much it will cost you approximately to migrate 100TB of data from your on-premise data center to AWS Cloud.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>migration</category>
      <category>linux</category>
      <category>storage</category>
    </item>
    <item>
      <title>Lớp học làm nhân bánh mì mở quán kinh doanh mùa dịch

</title>
      <author>TuyensinhDongdo24h</author>
      <pubDate>Mon, 12 Jul 2021 07:48:31 +0000</pubDate>
      <link>https://dev.to/tuyensinhdongdo24h/l-p-h-c-lam-nhan-banh-mi-m-quan-kinh-doanh-mua-d-ch-4kgh</link>
      <guid>https://dev.to/tuyensinhdongdo24h/l-p-h-c-lam-nhan-banh-mi-m-quan-kinh-doanh-mua-d-ch-4kgh</guid>
      <description>&lt;p&gt;Lớp học mở cửa hàng bánh mì bí quyết kinh doanh, học làm nhân bánh mì kinh doanh ở Hà Nội. Mở quán bánh mì kinh doanh với khóa học làm các loại nhân bánh mì và nước sốt như nhân Pate, xá xíu, chả nướng, bò sốt tiêu đen….. Bán hàng online trong mùa dịch siêu lợi nhuận Tư vấn mở quán  học viên được lựa chọn đăng ký học 1 thầy 1 trò hoặc lớp ghép lớp khóa học làm nhân bánh mì và nước sốt =&amp;gt; Bạn xem ngay Khóa học làm nhân bánh mì mở cửa hàng của trung tâm Học Món việt. Liên hệ/Zalo: 0989 434 130. lớp học làm nhân bánh mì, học làm nhân bánh mì, khóa học làm nhân bánh mì, &lt;br&gt;
Mở tiệm bánh mì bí quyết kinh doanh thành công&lt;br&gt;
=&amp;gt; Xem ngay &lt;a href="http://tuyensinhdongdo24h.edu.vn/lop-hoc-lam-nhan-banh-mi-de-mo-tiem-banh-mi-kinh-doanh/"&gt;http://tuyensinhdongdo24h.edu.vn/lop-hoc-lam-nhan-banh-mi-de-mo-tiem-banh-mi-kinh-doanh/&lt;/a&gt;&lt;br&gt;
Bạn Hà Huy Thắng (Bắc giang) và bạn Nguyễn Ngọc Thịnh (Đông anh) tìm đến trung tâm Học Món Việt để học làm các loại nhân và nước sốt bánh mì. Do cửa hàng của 2 bạn đều gần chỗ đông học sinh, sinh viên, sẵn kinh doanh cafe và trà sữa nên 2 bạn định mở rộng mô hình kinh doanh của mình.&lt;br&gt;
“Tôi rất hài lòng về chương trình học làm nhân bánh mì và các loại nước sốt tại trường. Ở đây, thầy Tuyên đã hướng dẫn cho tôi tận tình và chu đáo. Cũng biết được thêm các loại nhân bánh để kinh doanh hiệu quả” Đó là chia sẻ của Bạn Thắng và bạn Thịnh.&lt;br&gt;
Việc kinh doanh mô hình trà sữa, café kết hợp với bánh mỳ đang rất thịnh hành và hút khách hiện nay. Bởi nhu cầu thưởng thức bánh mì với nước sốt đa dạng, đậm đà các loại nhân bánh mì có hương vị đặc trưng đang được thực khách rất ưa chuộng.&lt;br&gt;
Với khóa học nhân bánh mỳ học viên sẽ được hướng dẫn đầy đủ từ khâu chọn nguyên vật liệu, sơ chế nguyên vật liệu đến cách tẩm ướp điều chỉnh sao cho miếng thịt thơm ngon mang hương vị đặc trưng riêng.&lt;br&gt;
=&amp;gt; Xem thêm Khóa học nhân bánh mì để biết thông tin lớp học, học phí, thời gian học&lt;br&gt;
Lớp học làm nhân bánh mì ở Hà Nội&lt;br&gt;&lt;br&gt;
Với chương trình học theo hình thức kinh doanh truyền nghề  các bạn sẽ được chọn các loại nhân đăng ký học bao gồm: &lt;br&gt;
• Trứng ốp la&lt;br&gt;
• Patê&lt;br&gt;
• Heo nướng&lt;br&gt;
• Bò nướng&lt;br&gt;
• Heo quay&lt;br&gt;
• Bò nướng phômai&lt;br&gt;
• Thịt nướng • Gà xé&lt;br&gt;
• Xíu mại&lt;br&gt;
• Xá xíu&lt;br&gt;
• Chả cá&lt;br&gt;
• Thịt viên&lt;br&gt;
• Bò Kho&lt;br&gt;
• Bò bít tết&lt;/p&gt;

&lt;p&gt;Để học hết tất cả các loại nhân này phải mất 5-7 buổi học. Nhưng đối với các lớp kinh doanh mở quán thì sẽ hướng dẫn các bạn chọn các loại nhân phù hợp với từng bạn. Thường 1 khóa học 3 buổi các bạn sẽ học được 4-5 loại nhân kèm với các loại sốt tương ứng, và không thể thiếu được là các loại dưa góp làm cho món bành mì kẹp thêm phần hấp dẫn.&lt;br&gt;
Ngoài ra, bạn cũng có thể chọn thêm các món mà các bạn trẻ hiện nay hay ăn như bánh mì chảo, Burger Bò, gà, heo, hải sản… Nếu bạn lựa chọn kinh doanh các món này cũng là những món thu lợi nhuận cao nhưng phải đầu tư nhiều hơn từ dụng cụ, đến bàn ghế…&lt;br&gt;
Nắm bắt được điều đó Trung tâm Học Món việt đã mở lớp học làm nhân bánh mì dành cho:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mọi đối tượng có nhu cầu học để biết làm các loại nước sốt cũng như nhân bánh mì&lt;/li&gt;
&lt;li&gt;Mọi đối tượng muốn học để kinh doanh hay để mở quán bánh mì.&lt;/li&gt;
&lt;li&gt;Mọi đối tượng muốn nâng cao tay nghề.
=&amp;gt; Xem thêm Học trung cấp nấu ăn tại Hà Nội để biết thêm chương trình trung cấp của trường.
Trung tâm Học Món Việt với khóa học nhân bánh mì và các loại sốt
Trung tâm Học Món Việt mở khóa học nhân bánh mì ở Hà Nội cho mọi đối tượng từ mở quán kinh doanh , đến nâng cao tay nghề trong kinh doanh.&lt;/li&gt;
&lt;li&gt;Giảng viên đứng lớp là những người đã có nhiều năm kinh nghiệm trong việc giảng dạy cũng như am hiểu về bánh mì, các loại nhân bánh mì, các loại nước sốt bánh mì. Không chỉ học lý thuyết, các học viên được thực hành ngay trên lớp cùng giảng viên của trường.&lt;/li&gt;
&lt;li&gt;Trang thiết bị cơ sở vật chất đầy đủ, tạo điều kiện cho học viên khóa học tốt nhất. &lt;/li&gt;
&lt;li&gt;Tư vấn hỗ trợ giải đáp thắc mắc của học viên, cũng như hỗ trợ học viên trong việc lên menu mở quán kinh doanh.
Hy vọng với những chia sẻ trên đã giúp bạn sơ lược hình dung về chương trình học của trường, để biết thêm thông tin và tư vấn thêm về chương trình học các bạn liên hệ:
  TRƯỜNG TC CN VÀ QT ĐÔNG ĐÔ- TRUNG TÂM HỌC MÓN VIỆT
ĐỊA CHỈ:  Nhà E21, ngõ 68, phố Trung Kính, Yên Hòa, Cầu Giấy, Hà Nội.
LIÊN HỆ:  Ms Hồng: 0989 434 130 – 0948 079 040
Zalo: 0989 434 130 
Đăng ký tư vấn các khóa học chứng chỉ của trường tại &lt;a href="http://tinyurl.com/dk-chungchi"&gt;http://tinyurl.com/dk-chungchi&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>lophoclamnhanbanh</category>
      <category>khoahocnhanbanh</category>
    </item>
    <item>
      <title>
Lớp học trung cấp Thư viện thiết bị trường học cấp tốc
</title>
      <author>TuyensinhDongdo24h</author>
      <pubDate>Mon, 12 Jul 2021 07:42:23 +0000</pubDate>
      <link>https://dev.to/tuyensinhdongdo24h/l-p-h-c-trung-c-p-th-vi-n-thi-t-b-tr-ng-h-c-c-p-t-c-3ej9</link>
      <guid>https://dev.to/tuyensinhdongdo24h/l-p-h-c-trung-c-p-th-vi-n-thi-t-b-tr-ng-h-c-c-p-t-c-3ej9</guid>
      <description>&lt;p&gt;Đào tạo và cấp nhanh bằng THÔNG TIN THƯ VIỆN – THIẾT BỊ TRƯỜNG HỌC tại Hà Nội. Cấp nhanh CHỨNG CHỈ THÔNG TIN THƯ VIỆN Liên hệ/Zalo: 0989 434 130 (cô Hồng). Dùng để thi công chức xét biên chế ngành quản lý thông tin thư viện, thiết bị trường học =&amp;gt; Xem ngay Trung cấp THƯ VIỆN - THIẾT BỊ học cấp tốc tại Hà Nội  Sinh viên ở xa có chỗ ở ký túc xá miễn phí cuối tuần. Học trung cấp thư viện, học trung cấp thiết bị, học thiết bị trường học, học thư viện tại hà nội&lt;br&gt;
Bạn đang tìm lớp trung cấp thông tin thư viện thiết bị học nhanh thi công chức, bạn cần biết:&lt;br&gt;
– Hiện tại  nhu cầu tuyển dụng cán bộ thư viện thiết bị tại các trường là rất cao, vì hầu hết thường là các cán bộ ngành khác kiêm nhiệm làm công tác quản lý thư viện, quản lý thiết bị trường học.&lt;br&gt;
– Sở nội vụ quy định với mỗi cán bộ thư viện thiết bị ở trường học trình độ tổi thiểu là tốt nghiệp trung cấp trở lên, ở một số tỉnh thành thì chỉ yêu cầu có chứng chỉ thư viện , thiết bị thí nghiệm.&lt;br&gt;
– Có nhiều trưởng tuyển sinh trung cấp thông tin thư viện – thiết bị trường học nhưng để tìm trường học vừa đào tạo nhanh vừa đảm bảo chất lượng, sinh viên có thể vừa đi học vừa đi làm thì rất ít trường đáp ứng được.&lt;br&gt;
=&amp;gt; Đọc thêm bài viết Thông tin tuyển sinh lớp thư viện thiết bị cấp tốc 7 tháng để biết được lịch học và thời gian học&lt;br&gt;
Trường TC CN &amp;amp; QT Đông Đô là nơi đào tạo trung cấp thư viện thiết bị trường học có tiếng tại HN.&lt;br&gt;
– Là 1 trong các trường trực thuộc Sở giáo dục và đào tạo Hà Nội, đào tạo chất lượng, uy tín được xếp hạng tốt trong các trường trung cấp chuyên nghiệp&lt;br&gt;
– Trường thường xuyên mở các lớp chuyên đề thực tế cho sinh viên, để sinh viên không những được học lý thuyết còn được thực hành, khi ra trường không còn bỡ ngỡ.&lt;br&gt;
=&amp;gt;  Xem thêm bài viết Thông tin ngành học trung cấp thư viện  thiết bị để biết thêm môn học ngành học &lt;a href="http://tuyensinhdongdo24h.edu.vn/trung-cap-thong-tin-thu-vien-thiet-bi/"&gt;http://tuyensinhdongdo24h.edu.vn/trung-cap-thong-tin-thu-vien-thiet-bi/&lt;/a&gt;&lt;br&gt;
Trường tuyển sinh đối tượng học trung cấp thư viện thiết bị đáp ứng các yêu cầu sau:&lt;br&gt;
– Học sinh có bằng TC, CĐ,ĐH hoặc sơ cấp nghề của 1 ngành khác thì học hệ 1 năm (học 8-10 tháng)&lt;br&gt;
– Học sinh học hết THPT, hoặc có bằng bổ túc THPT học hệ 2 năm (15 tháng)&lt;br&gt;
– Học sinh tốt nghiệp THCS học hệ 3 năm (25 tháng).&lt;br&gt;
Link đăng ký học, tìm hiểu thông tin: &lt;a href="http://tinyurl.com/dang-ky-online68"&gt;http://tinyurl.com/dang-ky-online68&lt;/a&gt;&lt;br&gt;
Hồ sơ xét vào lớp học trung cấp thư viện thiết bị cần phải chuẩn bị:&lt;br&gt;
– Bản sao Bằng tốt nghiệp Phổ thông hoặc Bằng TC, CĐ, ĐH (nếu có)&lt;br&gt;
– Bản sao Bảng điểm hoặc Học bạ phổ thông (có công chứng)&lt;br&gt;
–  Bản sao Giấy khai sinh&lt;br&gt;
–  Ảnh 3×4: 3 chiếc&lt;br&gt;
–  Bản sao CMTND&lt;br&gt;
Địa chỉ tiếp nhận hồ sơ và học tập trường Trung Cấp Công nghệ và Quản Trị Đông Đô:&lt;br&gt;
Số 6 (ngõ 97), Phạm Ngọc Thạch, Kim Liên, Đống Đa, HN&lt;br&gt;
Mọi chi tiết liên hệ: 0989 434 130 -0948 079 040 (cô Hồng)&lt;br&gt;
Zalo: 0989 434 130/ Mail: &lt;a href="mailto:hongbt79@gmail.com"&gt;hongbt79@gmail.com&lt;/a&gt;&lt;br&gt;
 CẢM ƠN CÁC BẠN ĐÃ ĐỌC THÔNG TIN!&lt;/p&gt;

</description>
      <category>trungcathuwuvien</category>
      <category>thongtinthuvien</category>
      <category>thietbitruonghoc</category>
    </item>
    <item>
      <title>Jira Zendesk Integration: Sync Jira Issues and Zendesk Tickets</title>
      <author>Teja Bhutada</author>
      <pubDate>Mon, 12 Jul 2021 07:20:46 +0000</pubDate>
      <link>https://dev.to/bhutadateja/jira-zendesk-integration-sync-jira-issues-and-zendesk-tickets-1cjn</link>
      <guid>https://dev.to/bhutadateja/jira-zendesk-integration-sync-jira-issues-and-zendesk-tickets-1cjn</guid>
      <description>&lt;p&gt;Choosing the right software is one of those critical decisions that impacts your business. Now getting the software to interact and automating workflows can increase that impact and ensure your organization is headed the right way.&lt;/p&gt;

&lt;p&gt;Today, I’ll discuss integrating Jira and Zendesk, showing you how tickets and issues can be shared between your teams seamlessly, letting information propagate from team to team and helping everyone work effectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-integrate-jira-and-zendesk"&gt;
  &lt;/a&gt;
  Why Integrate Jira and Zendesk
&lt;/h2&gt;

&lt;p&gt;It’s common for teams to store data on different systems. There’s often a large amount of overlap between the data, so syncing it benefits the teams and their collaboration.&lt;/p&gt;

&lt;p&gt;Sharing data manually is slow and error prone. An automated system will do it regularly and quickly. It can also log what it does and record any errors.&lt;/p&gt;

&lt;p&gt;A common use case for a Jira Zendesk sync is where a company uses Jira for development and Zendesk for customer service. Many of the issues raised by users will end up as tickets for developers.&lt;/p&gt;

&lt;p&gt;Such integration lets these Zendesk tickets move to Jira automatically. With the right software integration solution, you can decide how you want to send them while allowing users to flag some of them or to set specific conditions for transfer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-a-jira-zendesk-integration-in-6-steps"&gt;
  &lt;/a&gt;
  How to Set up a Jira Zendesk Integration in 6 Steps
&lt;/h2&gt;

&lt;p&gt;I am going to use a software integration solution called &lt;a href="https://exalate.com"&gt;Exalate&lt;/a&gt;. Here’s how to set the integration up in a few simple steps. &lt;/p&gt;

&lt;p&gt;First, you’ll install Exalate on both sides and then connect them. After that, there are a couple of optional steps to get things working exactly how you want. Then you’re ready to go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-exalate-on-jira"&gt;
  &lt;/a&gt;
  Step 1 - Install Exalate on Jira
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PjGRT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o82xpw5vj1febj67o8l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PjGRT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o82xpw5vj1febj67o8l0.png" alt="exalate for jira"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Jira, click the top right user icon and select ‘Atlassian Marketplace’. Enter ‘Exalate’ in the search field and press return. ‘Exalate Jira Issue Sync &amp;amp; More’ will appear as the top entry.&lt;/p&gt;

&lt;p&gt;Click the blue button to choose a plan and install Exalate. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-install-exalate-on-zendesk"&gt;
  &lt;/a&gt;
  Step 2 - Install Exalate on Zendesk
&lt;/h3&gt;

&lt;p&gt;Now you’ll install Exalate on Zendesk. You can read more about it in the documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nww9e25f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dotuq72sx02t6o98lhi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nww9e25f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dotuq72sx02t6o98lhi2.png" alt="exalate for zendesk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Zendesk, click the cog in the left hand menu, then click ‘Marketplace’ in the ‘Apps’ section. Type ‘Exalate’ in the search field, then click ‘Exalate’ when its icon appears.&lt;/p&gt;

&lt;p&gt;Click the install button, then select your account on the popup. Click ‘install’ again. A config screen will appear. You can change the details if you like, before clicking ‘Install’ again.&lt;/p&gt;

&lt;p&gt;Exalate will appear in Zendesk’s left-hand menu. Click it, then click ‘Allow’ to give it access to your data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-a-connection-between-your-instances"&gt;
  &lt;/a&gt;
  Step 3 - Create a Connection Between Your Instances
&lt;/h3&gt;

&lt;p&gt;You can do the next steps from either side. I’ll use Zendesk here. Click the Exalate icon in the left side menu, then click ‘Connections’. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3CeRlBtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oowgvk7o922e95zxj3wk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3CeRlBtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oowgvk7o922e95zxj3wk.png" alt="jira zendesk integration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the connections screen, click the ‘Initiate Connection’ button. Paste the address of your Jira instance into the ‘Destination instance URL’ field. Exalate will now check your Jira instance to make sure it is installed there too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeetikAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au13bskq5c2ddq0vuj2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeetikAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au13bskq5c2ddq0vuj2h.png" alt="initiate a jira zendesk sync"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then it will present you with several options.&lt;/p&gt;

&lt;p&gt;The basic more (Free Plan) lets you create connections with everything configured automatically. That’s a great way to test Exalate out. The more advanced plans offer a visual and a scripting mode. These let you choose what is shared, and the conditions under which sharing takes place. &lt;/p&gt;

&lt;p&gt;In visual mode, you can do this using an intuitive, easy-to-use interface. And in scripting mode, you use code. Visual mode is easier, but scripting mode lets you add more advanced rules.&lt;/p&gt;

&lt;p&gt;I’ll use the basic mode for now, but will discuss the others briefly in the next steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCMz8awx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2xhxrd922vijfw6b8c2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCMz8awx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2xhxrd922vijfw6b8c2.png" alt="exalate free plan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you choose ‘basic’ and click next, Exalate will ask if you have admin access to the other side of the connection. If so, you’ll be sent there to activate it. You need to pick a project for the connection to work with. Exalate will use that project’s data.&lt;/p&gt;

&lt;p&gt;If not, you’ll generate a code, which you can paste into Jira manually. You do that by going to the connection screen in Jira, clicking ‘Accept Invitation’ and following the steps that appear on-screen.&lt;/p&gt;

&lt;p&gt;You can also optionally enter an issue to sync to test the connection is working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-configure-your-connection-to-share-the-right-data"&gt;
  &lt;/a&gt;
  Step 4 - Configure Your Connection to Share the Right Data
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oPOBPNEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn9gnip8vdx429m6ferj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oPOBPNEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn9gnip8vdx429m6ferj.png" alt="configure jira zendesk sync"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click the ‘edit connection’ button in the connections list, then the rules tab on the next screen, you can see how fields are synced. In visual mode, you can change these mappings, remove what you don’t want and add any others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdYnGX4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppn2i16tgf54d47ihqw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdYnGX4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppn2i16tgf54d47ihqw3.png" alt="jira zendesk sync rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In script mode, you can create more complex rules. Programmers will appreciate the additional power this provides. &lt;/p&gt;

&lt;p&gt;If you look at the existing rules, you’ll get an idea of how it works. Lines of code assign attributes from one side of the connection to the other.&lt;/p&gt;

&lt;p&gt;If you don’t want an attribute synced, you can comment that line out. You can also match different attributes. Perhaps you want to add the priority to the notes, and set it yourself on the other side. &lt;/p&gt;

&lt;p&gt;The outgoing rules essentially provide the other side of the connection with equivalent attributes. The incoming sync picks out a few attributes to use when creating new issues, based on the information it receives.&lt;/p&gt;

&lt;p&gt;You can add items here, and, again, change anything you like. You could set the assignee to a specific person by adding this line:&lt;/p&gt;

&lt;p&gt;Issue.assignee = “Peter”&lt;/p&gt;

&lt;p&gt;You could also combine items, or use more advanced code to make decisions based on other attributes. The assignee could depend on the priority for example.&lt;/p&gt;

&lt;p&gt;With script rules, you can get very specific and get the connection to do exactly what you want. So don’t be afraid to experiment! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-automated-synchronization-triggers"&gt;
  &lt;/a&gt;
  Step 5 - Create Automated Synchronization Triggers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nUhsqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5rxu42up08db6jteyth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nUhsqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5rxu42up08db6jteyth.png" alt="sync triggers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the ‘Create Trigger’ button on the ‘Triggers’ page and you can set a rule for syncing items. You can select the type of entity and the connection the trigger applies to. In the ‘if’ section you enter rules in Zendesk search syntax to pick out the tickets you want to share. &lt;/p&gt;

&lt;p&gt;Set the ‘Active’ switch, then click ‘Create’ and your trigger will be ready. You can also add notes to help you keep track of things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-start-syncing-issues-and-tickets"&gt;
  &lt;/a&gt;
  Step 6 - Start Syncing Issues and Tickets
&lt;/h3&gt;

&lt;p&gt;Now that your instances are connected and sharing data, feel free to revisit the previous steps to refine your connection’s behaviour. You can add further connections, rules, and triggers and get Exalate doing more and more work for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Integrating platforms can multiply the benefits you get from them, and level up your business. And as you’ve learned today, it is very easy to do. A little work setting things up can save you a lot of time.&lt;/p&gt;

&lt;p&gt;Exalate lets you share data reliably, while maintaining your teams’ autonomy. It is flexible enough to make changes and share the data you want, when you want. &lt;/p&gt;

&lt;p&gt;As well as Jira and Zendesk, it works with several other platforms such as Azure DevOps, Github, and ServiceNow. &lt;a href="https://exalate.com/integrations"&gt;Take a look&lt;/a&gt; and see how it will work for you.&lt;/p&gt;

</description>
      <category>jira</category>
      <category>zendesk</category>
      <category>integration</category>
    </item>
    <item>
      <title>I made a WhatsApp bot to solve Math problems</title>
      <author>Amey Bhavsar</author>
      <pubDate>Mon, 12 Jul 2021 07:20:32 +0000</pubDate>
      <link>https://dev.to/ameybhavsar/i-made-a-whatsapp-bot-to-solve-math-problems-6ab</link>
      <guid>https://dev.to/ameybhavsar/i-made-a-whatsapp-bot-to-solve-math-problems-6ab</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzddc83R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytpl9th2h7uae77fhho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzddc83R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytpl9th2h7uae77fhho.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am fascinated by chatbots. They can carry out any task automatically for you and can be invoked at a single command. I found bots on Discord and was intrigued to make one for WhatsApp. But, WhatsApp doesn't share its official API with everyone. Fortunately, many workarounds exist using WhatsApp Web. I used &lt;a href="https://github.com/pedroslopez/whatsapp-web.js"&gt;&lt;code&gt;whatsapp-web.js&lt;/code&gt;&lt;/a&gt; to ease authentication and messaging controls. It provides a simple WhatsApp Web client built using Node &amp;amp; Puppeteer.&lt;/p&gt;

&lt;p&gt;Using this bot, you can add more functionality and automate anything you'd like. Maybe you want to monitor your servers or get random memes. I found WolframAlpha's computational intelligence fascinating and hence decided to integrate its API with WhatsApp messaging.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#heres-the-github-code-repository-you-can-get-setup-the-bot-and-start-playing-with-it-directly"&gt;
  &lt;/a&gt;
  Here's the Github code repository. You can get setup the bot and start playing with it directly.
&lt;/h5&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ameybhavsar24"&gt;
        ameybhavsar24
      &lt;/a&gt; / &lt;a href="https://github.com/ameybhavsar24/ww-wra"&gt;
        ww-wra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Whatsapp Web bot to query and get results to and from WolframAlpha API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And if like creating things from scratch, let's not waste any time and get started building the bot! 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#start-a-new-npm-project-in-your-favourite-project-directory"&gt;
  &lt;/a&gt;
  Start a new NPM project in your favourite project directory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#install-whatsapp-web-packages"&gt;
  &lt;/a&gt;
  Install Whatsapp Web packages.
&lt;/h3&gt;

&lt;p&gt;We need &lt;code&gt;whatsapp-web.js&lt;/code&gt; for WhatsApp client and &lt;code&gt;qrcode-terminal&lt;/code&gt; to parse the auth information into visible QR code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i whatsapp-web.js qrcode-terminal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate-code-to-get-started"&gt;
  &lt;/a&gt;
  Boilerplate code to get started.
&lt;/h3&gt;

&lt;p&gt;Create a new file &lt;code&gt;index.js&lt;/code&gt; and add the following code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qrcode-terminal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// open whatsapp web in a headless browser (no gui)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--no-sandbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// initialize client object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// prints QR code to console when received&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;small&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Client is ready!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// listen for new messages&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message_create&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!ping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will initialize a client instance. We pass &lt;code&gt;puppeteerOptions&lt;/code&gt; to &lt;code&gt;client&lt;/code&gt; to disable a GUI. &lt;br&gt;
Notice the &lt;code&gt;message_create&lt;/code&gt; event. The client listens for any new messages. Right now, we will listen to only &lt;code&gt;!ping&lt;/code&gt; and respond with &lt;code&gt;pong&lt;/code&gt;.&lt;br&gt;
Add the following start script to &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Start the node app with&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esa49oeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9g4boi8ktwumv4m2m43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esa49oeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9g4boi8ktwumv4m2m43.png" alt="Screenshot from 2021-07-12 12-47-45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see a QR code displayed in the terminal. Scan this QR code with the WhatsApp Web option in the WhatsApp menu.&lt;br&gt;
Once scanned successfully, you should see a message &lt;strong&gt;Client is ready!&lt;/strong&gt; in the console. &lt;br&gt;
If you send &lt;em&gt;!ping&lt;/em&gt; in any direct or group chat, the bot should reply with &lt;em&gt;pong&lt;/em&gt;. If the bot is running with the same account as yours, it will reply as you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: WhatsApp only allows web use from a single session. If already web sessions are active (for e.g.: on a browser), they will automatically become inactive.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWmmyd2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsw6rg59z9sixus7tgl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWmmyd2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsw6rg59z9sixus7tgl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#responding-to-math-problems"&gt;
  &lt;/a&gt;
  Responding to Math problems
&lt;/h3&gt;

&lt;p&gt;To solve Math problems, we are going to use the &lt;a href="https://products.wolframalpha.com/api/"&gt;Wolfram|Alpha API&lt;/a&gt;.&lt;br&gt;
Sign up for a free account and create a new app on the &lt;a href="https://developer.wolframalpha.com/portal/myapps/"&gt;Developer Portal&lt;/a&gt; by clicking on &lt;strong&gt;Get an App ID&lt;/strong&gt; button.&lt;br&gt;
Give your app a cool name and description.&lt;br&gt;
Remember to note the App ID. You can always check it again by clicking the &lt;strong&gt;Edit&lt;/strong&gt; link on the app card.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdqIXM6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc7e4sjb8gpcnmh6ihyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdqIXM6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc7e4sjb8gpcnmh6ihyq.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Create a new file called &lt;code&gt;.env&lt;/code&gt; and paste the &lt;code&gt;APPID&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;APPID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;App ID from Wolfram|Alpha API here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To use this variable in our code, we can use the dotenv package. To install &lt;code&gt;dotenv&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, initialize dotenv by adding this line at the top of &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Wolfram|Alpha provides official modules to call its functions. Download &lt;a href="https://products.wolframalpha.com/api/libraries/javascript/WolframAlphaAPI.js.html"&gt;WolframAlphaAPI.js&lt;/a&gt; to your project directory. We can then require it and initialize the instance as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APPID&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WolframAlphaAPI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./WolframAlphaAPI.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WolframAlphaAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invokeKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we are getting the &lt;code&gt;appid&lt;/code&gt; from process and then initializing WolframAlphaAPI instance &lt;code&gt;wraAPI&lt;/code&gt; which will later handle all functions.&lt;br&gt;
Also, it's a good idea to have invoke keys (basically strings with which messages are prefixed) so the bot can differentiate between normal messages and commands.&lt;/p&gt;

&lt;p&gt;Try running &lt;code&gt;npm start&lt;/code&gt; to make sure no errors are present. You should still see a QR code and after authenticating any new messages should be logged.&lt;/p&gt;

&lt;p&gt;If you find any errors and need help, feel free to comment them and I'll definately take a look!&lt;/p&gt;

&lt;p&gt;Ok, it's been a long way and we are almost done.&lt;/p&gt;

&lt;p&gt;Let's handle bot commands and add reply functionality.&lt;br&gt;
Edit &lt;code&gt;index.js&lt;/code&gt; to handle message.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message_create&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invokeKey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;messageHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// receive all bot commands and reply accordingly&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get message body and trim invokeKey&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invokeKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Querying result for &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;handleImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Before you run &lt;code&gt;npm start&lt;/code&gt; again, wait a sec! We also need to define the logic for handling image responses in &lt;code&gt;handleImage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's how we can do that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i parse-data-url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, add the following to &lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseDataUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;parse-data-url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MessageMedia&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Image request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// send the rest of the message to Wolfram|Alpha API&lt;/span&gt;
    &lt;span class="nx"&gt;wraAPI&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSimple&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseDataUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MessageMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#and-were-done"&gt;
  &lt;/a&gt;
  And ... we're done!
&lt;/h4&gt;

&lt;p&gt;Yep, really. That was it. &lt;br&gt;
Start the node app again with &lt;code&gt;npm start&lt;/code&gt;. Once you have authenticated, try this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJQg90Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azm1fjo4qi6p18hzeomi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJQg90Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azm1fjo4qi6p18hzeomi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the bot should reply with the correct image output.&lt;br&gt;
Give yourself a pat on the back for finishing this project!&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#find-the-complete-code-for-this-project-on-github-if-you-find-it-interesting-do-star-the-repository"&gt;
  &lt;/a&gt;
  Find the complete code for this project on Github. If you find it interesting, do star the repository.
&lt;/h5&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ameybhavsar24"&gt;
        ameybhavsar24
      &lt;/a&gt; / &lt;a href="https://github.com/ameybhavsar24/ww-wra"&gt;
        ww-wra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Whatsapp Web bot to query and get results to and from WolframAlpha API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I created another WhatsApp bot with Google search, random jokes, compliments and anime quotes! Check out &lt;a href="https://github.com/ameybhavsar24/ww-wra-goog"&gt;ameybhavsar24/ww-wra-goog&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h3&gt;

&lt;p&gt;Now you have a way to programmatically reply to Whatsapp messages. What you can create with it is limitless. I recommend you to check out following ideas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of &lt;a href="https://products.wolframalpha.com/api/"&gt;prebuilt WolframAlpha APIs&lt;/a&gt;. You can get text &amp;amp; audio responses as well as steps for a problem. You can even use their Conversational API to build a bot with back-and-forth dialog.&lt;/li&gt;
&lt;li&gt;Google search responses &lt;/li&gt;
&lt;li&gt;Random joke or roast (remember when you need the perfect comeback on a group debate, you're covered now xD)&lt;/li&gt;
&lt;li&gt;Or anything else you find cool.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right now, you need to scan the QR code for every run but the session can be stored in a JSON file to resume it again. Read more on &lt;a href="https://waguide.pedroslopez.me/features/resuming-sessions"&gt;Resuming Sessions - whatsapp-web.js guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading this tutorial to the very end! I'm happy you were able to build your own WhatsApp bot. &lt;br&gt;
If you faced any errors, feel free to comment on them. Also, your feedback on improving this post is welcome.&lt;/p&gt;

&lt;p&gt;Author: &lt;a class="mentioned-user" href="https://dev.to/ameybhavsar"&gt;@ameybhavsar&lt;/a&gt;
&lt;br&gt;
Github: &lt;a href="https://github.com/ameybhavsar24"&gt;https://github.com/ameybhavsar24&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bot</category>
      <category>node</category>
      <category>api</category>
      <category>wolframalpha</category>
    </item>
    <item>
      <title>AWS open source news and updates #75</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 12 Jul 2021 07:04:49 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-75-4abj</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-75-4abj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#12th-july-2021-instalment-75"&gt;
  &lt;/a&gt;
  12th July, 2021 - Instalment #75
&lt;/h2&gt;

&lt;p&gt;Newsletter #75.&lt;/p&gt;

&lt;p&gt;This week we have a bumper edition, due to the fact I did not publish last week and it looks like everyone has been very busy. We have new open source projects include a light weight Java client, a tool to help you manage your AWS resources and some sample applications to help you get started with location based services, Bottlerocket and algorithmic trading. We have a new workshop on GraphQL as well as the usual round up of community and AWS blog posts, featuring lots of great content for machine and data scientists, container and devops specialists as well as developer tools and IoT. We have posts on Apache Airflow, Apache Kafka, Apache Spark, Apache Flink, Spring Boot, AWS Data Wrangler, Bottlerocket, Kubernetes, Drupal, RabbitMQ, Suricata, MySQL, Redis and many more.&lt;/p&gt;

&lt;p&gt;I have introduced a [hands on] tag so you can see which posts have code or are walk throughs where you can end up (hopefully) with the same result as the blog post they came from!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you read this newsletter, I would love to hear what you think so I can improve it. Please &lt;a href="https://eventbox.dev/survey/CHG06PE"&gt;complete this very short survey&lt;/a&gt; (will take you less than 60 seconds) and you may get an AWS $25 credit voucher. Thank you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Pratik Bhavsar, Damon Cortesi, Vu Dao, Dave Moten, Adam McQuistan, Sheldon Hull, Jens Schmidt Hansen, Steve Sklar, Kyle Neideck, Oliver Steffmann, Fernando Rocha Silva, Panna Shetty, Talia Nassi, Sam Mokhtari, Mitesh Patel, Joseph Morais, Jobin George, Roberto Luna Rojas, Shawn Wang, Asaf Porat Stoler, Itay Maoz, Yehonatan Yulazari, Maish Saidel-Keesing, Amar Mehta, Royal O’Brien, Amit Chowdhury, Saurabh Shrivastava, Michael DeRan, Chris Friedline, Netsanet Gebremadhin, Jenna Lang, Lee Pang, Nick Ragusa, Dirk Michel, Zach Gardner, Rashed Talukder, Jae M. Kim, Eddie Pick, Scott Perry, Mony Kiem, Frenil Randeria, Ripunjaya Pattnaik, Sean McArthur, Ugur Kira, Jeremy Cowan, Steve Borrelli, Rob Clark, Manabu McCloskey, Vikrant Kahlir, Nima Kaviani, Sai Sharanya Nalla, Kartik Kannapur, Narayana Vemburaj, Anjani Reddy, Shivkumar Rajendran, Ananth Vaidyanathan, and Prem Nambi.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;aws-lightweight-client-java&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ps"&gt;aws-lightweight-client-java&lt;/a&gt; if you are looking for a really  lightweight java client for the AWS API, then Dave Moten has you covered with this project. This standalone artefact (about 57K) that performs authentication (signing requests with AWS Signature Version 4) and helps you build requests against the AWS API. It includes nice concise builders, a lightweight inbuilt xml parser (to parse responses), and useful convenience methods. Perfect for those situations this is important (Mobile and functions for example)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;serverless-transformers-on-aws-lambda&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/py"&gt;serverless-transformers-on-aws-lambda&lt;/a&gt; Pratik Bhavsar shared his latest open source project late last week, which looks very interesting. It provides a serverless way to run your machine learning transformers. A &lt;a href="https://en.wikipedia.org/wiki/Transformer_(machine_learning_model)"&gt;transformer&lt;/a&gt; is a deep learning model that adopts the mechanism of attention, differentially weighing the significance of each part of the input data. It is used primarily in the field of natural language processing (NLP)[1] and in computer vision (CV)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bottlerocket-ecs-updater-cdk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/pt"&gt;bottlerocket-ecs-updater-cdk&lt;/a&gt; this project from Adam Keller provides an example of a bottlerocket deployment to Amazon ECS with the updater built as a construct. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;collie-cli&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/pk"&gt;collie-cli&lt;/a&gt; is a new open source project from meshcloud that allows you to manage your AWS resources through a single view. View your tenants, tags, costs, users, access rights and more through a single common model. Check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2fOPPay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/meshcloud/collie-cli/blob/develop/.github/collie-demo.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2fOPPay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/meshcloud/collie-cli/blob/develop/.github/collie-demo.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amazon-location-service-musterpoint-tracker-ios&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/p2"&gt;amazon-location-service-musterpoint-tracker-ios&lt;/a&gt; this project helps you build a sample mobile application that show cases how to integrate both location based services as well as geofencing using the recently launched Amazon Location Service. You can dive deeper and follow along with the blog post that accompanies this project, &lt;a href="https://aws-oss.beachgeek.co.uk/p3"&gt;Create an iOS tracker application with Amazon Location Service and AWS Amplify &lt;/a&gt; from Fernando Rocha Silva and Panna Shetty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_gqL31---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0a57cb53ba59c46fc4b692527a38a87c78d84028/2021/06/24/architecture-updated.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_gqL31---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0a57cb53ba59c46fc4b692527a38a87c78d84028/2021/06/24/architecture-updated.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;algorithmic-trading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ov"&gt;algorithmic-trading&lt;/a&gt; this project is a hands on workshop where you will learn how to load and store financial data to build and backtest algorithmic trading strategies that use technical indicators and advanced machine learning models. You can read more about this project via the blog post from Oliver Steffmann, &lt;a href="https://aws-oss.beachgeek.co.uk/ou"&gt;Building algorithmic trading strategies with Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3TQiR5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/algorithmic-trading/blob/master/assets/chart.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3TQiR5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/algorithmic-trading/blob/master/assets/chart.png%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/px"&gt;Building and Testing a new Apache Airflow Plugin&lt;/a&gt; Damon Cortesi has put together this great blog post that tells you everything you need to know about contributing an operator to Apache Airflow, sharing his experience during the work he did on a new EMR on EKS plugin to Apache Airflow. Great stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Data Wrangler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you work with data on AWS, then there is a good chance you will find the open source project &lt;a href="https://aws-oss.beachgeek.co.uk/pp"&gt;AWS Data Wrangler&lt;/a&gt; something you need to know more about. Not to be confused with SageMaker Data Wrangler, AWS Data Wrangler extends the capabilities of Pandas to AWS by connecting data frames to AWS data-related services. Last week it was included in ThoughtWorks Technology Radar under Trial (to find out more about this, I highly recommend you read about and subscribe to the &lt;a href="https://aws-oss.beachgeek.co.uk/po"&gt;ThoughtWorks Technology Radar&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Check out what they said, but I think this is a great summary:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We've used AWS Data Wrangler in production and like that it lets you focus on writing transformations without spending too much time on the connectivity to AWS data services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;AWS Greengrass&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I loved this post from Kyle Neideck, &lt;a href="https://aws-oss.beachgeek.co.uk/pj"&gt;Cloud-printing for Restaurants with AWS IoT Greengrass&lt;/a&gt; which really appealed to the inner device hacker/maker in me. In this post Kyle shows you how he build a new open source project that enables restaurants to connect customers to the kitchen. Really well worth reading this project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WeV9EUWk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1225/1%2AH7-sLIPEJpZlWZD9bHn7TQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WeV9EUWk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1225/1%2AH7-sLIPEJpZlWZD9bHn7TQ.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ph"&gt;How to Create an AWS ALB and ASG&lt;/a&gt; in this post you will learn how you can take your Spring Boot application and then configure a load balancer and an auto scaling group that will allow you to scale up and down your application in response to demand. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KinD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EKS-Distro was launched during re:Invent, and is a distribution of Kubernetes that can be run in a number of different environments, including your own. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/pg"&gt;Using KinD to run EKS-D&lt;/a&gt; Jeremy Cowan takes a look at how you can use Kubernetes in Docker (KinD) to run EKS-D clusters on your local machine. [hands on] &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk8s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another great post from Vu Dao, this week he writes about using cdk8s (an open-source software development framework for defining Kubernetes applications and reusable abstractions using familiar programming languages - a la AWS CDK), to deploy an AWS Load Balancer for your Kubernetes application in the post &lt;a href="https://aws-oss.beachgeek.co.uk/pu"&gt;Create AWS Load Balancer Controller Ingress With CDK8S&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are a user of Terraform and have wanted to deploy an Amazon EMR cluster that can consume data from other AWS accounts (Cross Account S3 bucket access for example), then you need to read this blog post from Adam McQuistan, &lt;a href="https://aws-oss.beachgeek.co.uk/pf"&gt;How To Provision AWS EMR Cluster with Cross Account S3 Bucket Access Using Terraform&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;I also enjoyed reading another Terraform post from Steve Sklar, &lt;a href="https://aws-oss.beachgeek.co.uk/pi"&gt;Running Scheduled Jobs in AWS Using Terraform&lt;/a&gt; where he shows you how you can use Terraform to automate the provisioning of a solution based on AWS Fargate, and outlines why he choose Fargate over a number of other technologies within AWS that allow you to schedule jobs. Nice post. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leapp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have featured Leapp in previous newsletter posts, and have it running on my mac when I need to connect to various AWS instances. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/pe"&gt;Simplify Aws Developer Security With Leapp&lt;/a&gt; Sheldon Hull shares his experience in using it so far. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/pd"&gt;Install pg_cron on AWS RDS&lt;/a&gt; Jens Schmidt Hansen has put together this short guide on upgrading your PostgreSQL database on Amazon RDS to support scheduling jobs using pg_cron. pg_cron is a simple cron-based job scheduler for PostgreSQL (9.5 or higher) that runs inside the database as an extension. It uses the same syntax as regular cron, but it allows you to schedule PostgreSQL commands directly from the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workshops"&gt;
  &lt;/a&gt;
  Workshops
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a new workshop that will help you get hands on with GraphQL, building a fully functioning application for a fast-paced sports event called the GraphQL Real-time Race.&lt;/p&gt;

&lt;p&gt;Start your engines &lt;a href="https://aws-oss.beachgeek.co.uk/pc"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-amazon-open-source-posts"&gt;
  &lt;/a&gt;
  AWS and Amazon open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Open 3D Engine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Big news last week for game developers and enthusiasts, as we announced the open sourcing of a new project Open 3D Engine (O3DE) a AAA-capable, cross-platform open source game engine. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/oy"&gt;Built for Builders: The Story of AWS and Open 3D Engine – Developer Preview&lt;/a&gt; Amar Mehta and Royal O’Brien share the open source journey, the differences from its Lumberyard ancestor, take a look at the key features of this project and share what is coming up next.As the authors conclude:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our hope is that this open-source effort provides a game and simulation development platform that anyone can leverage to quickly build even more amazing games and real-time simulations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMCGzbq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2021/07/01/O3DE-002.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMCGzbq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2021/07/01/O3DE-002.jpg" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS IoT C-SDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://aws-oss.beachgeek.co.uk/p6"&gt;How being open led to greater customer value with the AWS IoT Device SDK for Embedded C&lt;/a&gt;, Rashed Talukder writes how adopting and collaborating with leading open source projects helped developers make the AWS IoT C-SDK more trustworthy and flexible, while increasing ease of use. A great post when considering what you can apply when thinking about your own particular use case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;curl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Curl is one of those foundational libraries that we take for granted, but that influences our lives online. Following from a Webinar that discussed memory safety and the internet, Sean McArthur shares some of the key talking points from that webinar, which you can check out in the post &lt;a href="https://aws-oss.beachgeek.co.uk/pa"&gt;How using hyper in curl can help make the internet safer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VS Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nick Ragusa has put together probably my most favourite blog post this week in , &lt;a href="https://aws-oss.beachgeek.co.uk/p4"&gt;Field Notes: Use AWS Cloud9 to Power Your Visual Studio Code IDE&lt;/a&gt;. In this blog post and walkthrough, he shows you how you can combine the power of AWS Cloud9 together with VS Code (which is also my day to day development tool) to overcome challenges such as disk space or CPU exhaustion. Very nice post. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--em6hr84i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/06/30/Visual-Studio-Ref-Architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--em6hr84i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/06/30/Visual-Studio-Ref-Architecture.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Flink&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/os"&gt;Get started with Flink SQL APIs in Amazon Kinesis Data Analytics Studio&lt;/a&gt; in this blog post, Sam Mokhtari and Mitesh Patel demonstrate different query patterns you can use to get insight from streaming data using Apache Flink SQL APIs. The post provides you with examples of Flink SQL queries that you can run within Kinesis Data Analytics Studio, so you can experiment for your self. [hands on]&lt;/p&gt;

&lt;p&gt;We also had this two part post, Build and optimise real-time stream processing pipeline with Amazon Kinesis Data Analytics for Apache Flink,&lt;a href="https://aws-oss.beachgeek.co.uk/p1"&gt;Part1&lt;/a&gt; &lt;a href="https://aws-oss.beachgeek.co.uk/p0"&gt;Part 2&lt;/a&gt; from Amit Chowdhury and Saurabh Shrivastava who show you how you can build a reliable, scalable, and highly available streaming application based on Apache Flink and Kinesis Data Analytics. They use the telemetry data of a taxi fleet in New York City in real time to optimise fleet operation. Whilst part one focused on getting this setup, part two dive deep into the things you need to look to ensure the health and performance of the Amazon Kinesis Data Analytics for Apache Flink application. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiNkESYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/06/29/bdb1482-1-image015.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiNkESYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/06/29/bdb1482-1-image015.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Joseph Morais, AWS Evangelist over at Confluent, in collaboration with Jobin George and Roberto Luna Rojas from AWS have put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ot"&gt;Low Latency Real-Time Cache Updates with Amazon ElastiCache for Redis and Confluent Cloud Kafka&lt;/a&gt; that shows you how you can power a logistics and inventory system with microsecond read performance powered Redis and Apache Kafka (powered by Confluent Cloud) [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3oR2tKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2021/06/29/Confluent-ElastiCache-Redis-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3oR2tKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2021/06/29/Confluent-ElastiCache-Redis-4.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MySQL binlog replication is a popular feature serving multiple use cases, including offloading transactional work from a source database, replicating changes to a separate dedicated system to run analytics, and streaming data into other systems. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/p7"&gt;Introducing binlog I/O cache in Amazon Aurora MySQL to improve binlog performance&lt;/a&gt; Jae M. Kim shows you show performance improvements of the new binlog I/O cache introduced in the Aurora MySQL 2.10 release and explores its related monitoring metrics and status variables.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVEZQ40E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/23/dbblog-1727_01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVEZQ40E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/23/dbblog-1727_01.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post &lt;a href="https://aws-oss.beachgeek.co.uk/ow"&gt;Reduce cost and boost throughput with Global Datastore for Amazon ElastiCache for Redis&lt;/a&gt; Shawn Wang, Asaf Porat Stoler, Itay Maoz, and Yehonatan Yulazari show you how you can use Redis (specifically some features available in Amazon ElastiCache for Redis) to reduce latency of data access for better geo-local performance, thanks to improvements made from Redis 6 that resulted in significant throughput improvements. Read on to find out more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7d6e3yuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/25/dbblog1424-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7d6e3yuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/25/dbblog1424-01.png" alt="bench"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In another Redis post, Dirk Michel from MYCOM OSI together with Zach Gardner from AWS share the story of how they moved from self-managed Redis to using Amazon ElastiCache for Redis, including the benefits achieved, the migration journey, and the architectures involved. Read more in &lt;a href="https://aws-oss.beachgeek.co.uk/p5"&gt;MYCOM OSI Service Impact Engine migration to Amazon ElastiCache for Redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6ihVnPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/30/dbblog1656-03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6ihVnPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/30/dbblog1656-03.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nextflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Genome Analysis Toolkit (GATK), is a BSD open source genomic analysis toolkit developed by the Data Sciences Platform team at the Broad Institute, that provides tools for genomic variant discover and genotyping. The blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/oz"&gt;Running GATK workflows on AWS: a user-friendly solution&lt;/a&gt; that was co-authored by Michael DeRan, Chris Friedline, Netsanet Gebremadhin at Diamond Age Data Science and Jenna Lang and Lee Pang from AWS, shows you how you can simplify how you run this on AWS using Nextflow, an open source bioinformatics workflow manager that enables the development of portable and reproducible workflows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SDwGn9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/06/24/Architecture-B-Workflow-infrastructure-using-FSx-for-Lustre-storage-deployed-with-Nextflow-Tower.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SDwGn9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/06/24/Architecture-B-Workflow-infrastructure-using-FSx-for-Lustre-storage-deployed-with-Nextflow-Tower.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The post links to a GitHub repository where you can find the resources you need to dive deeper. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RabbitMQ is an open-source message broker to which applications connect in order to transfer a message or messages between services. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/or"&gt;Using Amazon MQ for RabbitMQ as an event source for Lambda&lt;/a&gt; Talia Nassi shows you how to set up a RabbitMQ broker and networking configuration, and how to create a Lambda function that is invoked by messages from Amazon MQ RabbitMQ queues. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hugging Face&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugging Face Transformers is a popular open-source project that I have written about in previous editions of this newsletter, and makes it super easy to use a variety of pre-trained, natural language processing (NLP) models for a wide variety of use cases. In the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/p8"&gt;Hosting Hugging Face models on AWS Lambda for serverless inference&lt;/a&gt; Eddie Pick and Scott Perry have put together this solution that automatically provisions container image-based Lambda functions that perform ML inference using pre-trained Hugging Face models. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kbmod8Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/06/28/architecture-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbmod8Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/06/28/architecture-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To add to that, Sai Sharanya Nalla and Kartik Kannapur put this post together last week, &lt;a href="https://aws-oss.beachgeek.co.uk/pq"&gt;Announcing managed inference for Hugging Face models in Amazon SageMaker&lt;/a&gt; where they discuss different methods to create a SageMaker endpoint for a Hugging Face model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bottlerocket OS in an open source project that was built to provide a secure foundation for hosts running containers, minimising operational overhead to manage them at scale. In the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/ox"&gt;Getting started with Bottlerocket and Amazon ECS&lt;/a&gt; Maish Saidel-Keesing walks you through how you can use Amazon ECS and Bottlerocket together to run your applications in a safe and secure manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JfP4g3S1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/06/image-2021-07-06T104447.977.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfP4g3S1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/06/image-2021-07-06T104447.977.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also had Narayana Vemburaj and Anjani Reddy post &lt;a href="https://aws-oss.beachgeek.co.uk/pv"&gt;Persistent Storage using EFS for EKS on Bottlerocket&lt;/a&gt; showing you how you can set up persistent storage with Amazon Elastic Kubernetes Service (Amazon EKS) clusters running on Bottlerocket OS with Amazon Elastic File System (Amazon EFS).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FByyNxsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/02/EFS-Persistent-Diagram-19May.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FByyNxsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/02/EFS-Persistent-Diagram-19May.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fluentd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fluentd is a popular open source project for streaming logs from Kubernetes pods to different backends aggregators like CloudWatch. It is often used with the kubernetes_metadata filter, a plugin for Fluentd that enriches the logs with basic metadata such as the pod’s namespace, UUIDs, labels, and annotations. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/pb"&gt;Fluentd considerations and actions required at scale in Amazon EKS&lt;/a&gt;, Ugur Kira and Jeremy Cowan analyze the impact the plug-in has on the Kubernetes API and recommend how to optimally configure Fluentd and the kubernetes_metadata plug-in in large clusters. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XU4tCZsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/06/22/image4-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XU4tCZsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/06/22/image4-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alolita Sharma and Nizar Tyrewalla announced the latest release of AWS Distro for OpenTelemetry, which you can read about in the post &lt;a href="https://aws-oss.beachgeek.co.uk/pr"&gt;AWS Distro for OpenTelemetry (ADOT) 0.11.0 is now available&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spinnaker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Steve Borrelli and Rob Clark from Upbound, and Manabu McCloskey, Vikrant Kahlir, and Nima Kaviani from AWS collaborated on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/pn"&gt;Declarative provisioning of AWS resources with Spinnaker and Crossplane&lt;/a&gt;. The post looks at the setup and configuration required for Spinnaker and Crossplane to work together. Crossplane is an open source project that allows teams to manage cloud resources in a Kubernetes-native way, which means you can provision and manage Amazon Simple Storage Service (Amazon S3) buckets, VPCs, databases, and Lambda functions in the same way you manage Pods, Ingresses, and StatefulSets. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suricata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suricata is open-source network threat detection engine is capable of real-time intrusion detection (IDS), that also provides inline intrusion prevention (IPS), network security monitoring (NSM), and offline packet capture processing. AWS Network Firewall uses Suricata and in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/p9"&gt;Integrate AWS Network Firewall with your ISV Firewall Rulesets&lt;/a&gt; you can read from Mony Kiem, Frenil Randeria, and Ripunjaya Pattnaik how to operate a hybrid architecture using the same firewall and IPS rules for both your on-premises and cloud networks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZohXua7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/06/23/Fig1-Firewall.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZohXua7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/06/23/Fig1-Firewall.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drupal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/pw"&gt;Deploy serverless Drupal applications using AWS Fargate and Amazon EFS&lt;/a&gt; in this post, Shivkumar Rajendran, Ananth Vaidyanathan, and Prem Nambi show you how to build a highly available, cost-effective, scalable Drupal-based website on AWS Cloud. The architecture uses serverless compute, serverless storage, and a serverless database, with no infrastructure to manage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GV7OijvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e1822db470e60d090affd0956d743cb0e7cdf113/2021/07/08/Deploy-serverless-Drupal-using-AWS-Fargate-and-Amazon-EFS-architecture-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GV7OijvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e1822db470e60d090affd0956d743cb0e7cdf113/2021/07/08/Deploy-serverless-Drupal-using-AWS-Fargate-and-Amazon-EFS-architecture-diagram.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now use the consistent hash exchange type on your Amazon MQ for RabbitMQ brokers. This exchange type uses consistent hashing to uniformly distribute messages across queues. Consistent hash exchanges are useful in applications like transaction processing to maintain the order of dependent messages while scaling up the number of consumers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS ParallelCluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS ParallelCluster is a fully supported and maintained open source cluster management tool that makes it easy for scientists, researchers, and IT administrators to deploy and manage High Performance Computing (HPC) clusters in the AWS cloud. HPC clusters are collections of tightly coupled compute, storage, and networking resources that enable customers to run large scale scientific and engineering workloads. Significant feature enhancements to this latest release of AWS ParallelCluster 2.11 include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Ubuntu 20.04 Operating System - Customers can now choose Ubuntu 20.04 as their base operating system of choice to run their clusters for both x86 and Arm architectures&lt;/li&gt;
&lt;li&gt;FSx for Lustre in isolated subnets - Customers can now set up and mount an Amazon FSx for Lustre file system in AWS ParallelCluster without requiring public internet access. This gives customers an additional option for how they can help keep their HPC environments secure and isolated inside of AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Announced last week was the General Availability of the Amazon ECS optimised Bottlerocket Amazon Machine Image (AMI). Bottlerocket is an open source Linux-based Operating System (OS) that is purpose-built to run containers. &lt;/p&gt;

&lt;p&gt;Bottlerocket only includes essential software that are required to run containers, helping customers significantly reduce the attack surface and impact of vulnerabilities. Bottlerocket’s root filesystem is read-only, backed by dm-verity. The kernel blocks all direct writes, and behind the scenes will detect any modification as corruption and reboot the host. It also comes with Security-Enhanced Linux (SELinux) policies enabled in enforcing mode for additional isolation. In addition to these security enhancements, updates to Bottlerocket are applied and rolled back in an atomic manner, reducing update complexity and failures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Client VPN now supports SAML based federated authentication for opening a VPN connection from a Linux Desktop Operating system (Ubuntu 64bit 18.04 and 20.04 LTS). The Linux Desktop client has feature parity with the existing Windows and macOS Desktop clients.&lt;/p&gt;

&lt;p&gt;AWS Client VPN allows you to choose from AWS VPN Desktop Client or OpenVPN-based clients, giving your employees the option to use the device of their choice.&lt;/p&gt;

&lt;p&gt;AWS Client VPN Desktop Clients are available free of charge, and can be downloaded &lt;a href="https://aws-oss.beachgeek.co.uk/oq"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda functions that are triggered from self-managed Apache Kafka topics can now access usernames and passwords secured by AWS Secrets Manager using SASL/PLAIN, a simple username/password authentication mechanism that is typically used with TLS for encryption to implement secure authentication. This is in addition to SASL/SCRAM, which is already supported on Lambda. To get started, customers who select Apache Kafka as the event source for their Lambda function can choose SASL/PLAIN as their authentication mechanism, and select their credentials from Secrets Manager on the AWS Management Console, AWS CLI or AWS SDK for Lambda.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MariaDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Relational Database Service (Amazon RDS) for MariaDB now supports MariaDB minor versions 10.2.37, 10.3.28, 10.4.18, and 10.5.9. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Developing Secure Open Source Software (OSS)&lt;/strong&gt; [FREE Event]&lt;br&gt;
&lt;strong&gt;July 20th, 9:30 – 11:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;David Wheeler, Director of Open Source Supply Chain Security at The Linux Foundation will discuss steps you can take to develop more secure OSS and evaluate OSS for security.&lt;/p&gt;

&lt;p&gt;Read more and &lt;a href="https://aws-oss.beachgeek.co.uk/pm"&gt;register here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ML Dev Day Live Workshop&lt;/strong&gt; [FREE Event]&lt;br&gt;
&lt;strong&gt;July 21st 9:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to build highly scalable and reliable pipelines for analytics using open source technologies such as Apache Spark, Delta Lake and open source machine learning frameworks such as TensorFlow, XGBoost, scikit-learn and MLFlow.&lt;/p&gt;

&lt;p&gt;Read more and &lt;a href="https://aws-oss.beachgeek.co.uk/pl"&gt;register here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on [@AWSOpen](&lt;a href="https://twitter.com/AWSOpen"&gt;https://twitter.com/AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>RequestAnimationFrame in JavaScript</title>
      <author>Suprabha</author>
      <pubDate>Mon, 12 Jul 2021 06:58:25 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/requestanimationframe-in-javascript-n12</link>
      <guid>https://dev.to/suprabhasupi/requestanimationframe-in-javascript-n12</guid>
      <description>&lt;p&gt;&lt;span&gt;U&lt;/span&gt;sing the native requestAnimationFrame method we can make our browser repeat something very quickly forever. It calls itself to paint the next frame.&lt;/p&gt;

&lt;p&gt;📝 Note: Your callback routine must itself call &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; again if you want to animate another frame at the next repaint. requestAnimationFrame() is 1 shot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;requestAnimationFrame&lt;/strong&gt; takes one argument, only callback.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;u&gt;Syntax:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt;: The function to call when it's time to update your animation for the next repaint.&lt;/p&gt;

&lt;p&gt;Animations with &lt;strong&gt;requestAnimationFrame&lt;/strong&gt; are non-blocking, which means if you make subsequent calls to &lt;strong&gt;requestAnimationFrame&lt;/strong&gt;, the resulting animations will all occur at  same time.&lt;/p&gt;

&lt;p&gt;The goal is &lt;strong&gt;60 frame per second(fps)&lt;/strong&gt; to appear smooth animation.&lt;/p&gt;

&lt;p&gt;So we do like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// animation code&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But now we have &lt;strong&gt;requestAnimationFrame&lt;/strong&gt;, which is more better and optimized:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animations will be so smooth as its optimized&lt;/li&gt;
&lt;li&gt;Animations in inactive tabs will stop, allowing the CPU to chill&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how can we create the above snippet using requestAnimationFrame&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// animtion&lt;/span&gt;
    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-can-you-start-and-stop-animation"&gt;
  &lt;/a&gt;
  How can you start and stop animation ⏲️
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;requestAnimationFrame&lt;/strong&gt; returns an ID you can use to cancel it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reqAnimationId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// animtion&lt;/span&gt;
    &lt;span class="nx"&gt;reqAnimationId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// to start&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reqAnimationId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// to end&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reqAnimationId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reqAnimationId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reqAnimationId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout the &lt;strong&gt;codepen&lt;/strong&gt; here for more details:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/suprabhasupi/embed/dyWpBJd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;MDN Docs of requestAnimationFrame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/"&gt;requestAnimationFrame by paulirish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary-%E2%88%91"&gt;
  &lt;/a&gt;
  Summary ∑
&lt;/h2&gt;

&lt;p&gt;If you do any animation on browser and wanted it to be optimised, then would highly recommend to use requestAnimationFrame web API.&lt;/p&gt;

&lt;p&gt;Thanks for reading the article ❤️&lt;br&gt;
I hope you love the article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>10 Steps To Secure Your Cloud</title>
      <author>Aditya Gaur</author>
      <pubDate>Mon, 12 Jul 2021 06:19:40 +0000</pubDate>
      <link>https://dev.to/aws-builders/10-steps-to-secure-your-cloud-2mhn</link>
      <guid>https://dev.to/aws-builders/10-steps-to-secure-your-cloud-2mhn</guid>
      <description>&lt;p&gt;In the realm of cloud computing, security is something that possesses duality. Duality in the sense, for example, for some incumbents, security must have been the need that made them adopt cloud whereas for some people it might be a concern hence they are still hesitant to step into the cloud. But what’s the reality? Is the cloud really unsecure or is it more secure?&lt;/p&gt;

&lt;p&gt;Actually, it’s nothing like that. In simple words, security is a shared responsibility in the world of cloud computing. You must have heard the term ‘Shared Responsibility Model’, if not then you can search about it on the web. On a very high level, it clearly states that maintaining the security of cloud is a responsibility of the cloud service provider while maintaining security in the cloud is a responsibility of the customer. And if we dig deep into it there are different perimeters defined for different services across different service models in different cloud platforms.&lt;/p&gt;

&lt;p&gt;Let me break it down for you in simple words to just have a gist of it. Suppose you’ve put your jewellery in a bank locker and the bank has given you a password for the locker. Now it’s the responsibility of the bank to take care of your things. The bank will ensure that the physical security, proper access management, authorization, etc are in place or not. You’ve just shared your responsibilities with your bank. If it hasn’t been like this then you’d have to take care of all the things on your own. i.e., you’d have to keep your jewellery at your home and then protect it. Now after putting it into the locker, the only thing that you’ve to take care of is the password that they’ve given to you. It’s nearly impossible for someone to gain access to your stuff even if she or he has your password but still, we shouldn’t share our passwords with anyone.&lt;/p&gt;

&lt;p&gt;Now I hope you’ve got a basic understanding of the shared responsibility model. Let’s come back to the cloud. In cloud, you don’t have to worry about the things that cloud service providers are required to take care of. You just have to take care of the things which are on your platter. But the problem is security is not getting enough attention. Also, there’s a blurry line between the shared responsibilities. In this article, I’ve tried to list out some generic steps that would help to maintain security in the cloud. I’ve taken AWS for the sake examples but the principles are almost the same across all the clouds.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get familiar with your account and don’t miss out leveraging existing security features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to protect your cloud, you got to be familiar with your account, as it’s a door to your cloud. It happens quite often that we forget to implement or enable the security features that the Cloud Service Providers provide to us.&lt;/p&gt;

&lt;p&gt;For example, you can find the best practices and security alerts in your IAM dashboard in AWS. So, it’s not something that should be ignored, instead if implemented all those things will enhance your security.&lt;/p&gt;

&lt;p&gt;Service(s): AWS IAM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enhance your authentication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, you’ve protected your door but what about the lock? Yes, I’m talking about the authentication. Organizations with their workload on cloud ought to have a strong authentication mechanism. Enhance your authentication with Multi-Factor Authentication. And in that too, avoid using security questions or text messages. Use of genuine Authenticator Applications is recommended. Hardware MFA Devices can be used as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/iam/features/mfa/"&gt;https://aws.amazon.com/iam/features/mfa/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Service(s): AWS IAM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Say no to hard-coded secrets and transmission of unencrypted sensitive information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes programmers leave access keys exposed in the plain format in code that can become a risk of compromise. And it might happen that due to some security misconfiguration, that some sensitive information in transit is unprotected. Hence, we should avoid hard-coded secrets and we must encrypt all of our sensitive data in transit.&lt;/p&gt;

&lt;p&gt;For example, you can use your IAM Credentials to authenticate into your RDS instance instead of the traditional authentication methods.&lt;/p&gt;

&lt;p&gt;Click the link given below to know more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/users-connect-rds-iam/"&gt;https://aws.amazon.com/premiumsupport/knowledge-center/users-connect-rds-iam/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to encrypt the data in transit, AWS Certificate Manager can be used.&lt;/p&gt;

&lt;p&gt;Also, you can even encrypt a connection to a DB Instance.&lt;/p&gt;

&lt;p&gt;Click the link given below to know more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html"&gt;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Service(s): AWS Certificate Manager&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement proper access controls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grant access to the users in your organization on the basis of least privilege or need to know basis. Define proper segregation between workloads &amp;amp; networks and use tags wherever possible. Through these practices, it’d be easy to manage your resources and keep them secure.&lt;/p&gt;

&lt;p&gt;Service(s): AWS IAM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protect your storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS S3 uses buckets to store date inside. You can even use these buckets to host data on your website(s). And for that you’d have to allow the public access to the bucket. Now in some cases, you might have your sensitive information residing in the same bucket for which you’ve allowed the public access. This can compromise your data. So, it’s very important to disable the public access for your sensitive objects or buckets. Same goes with the CORS configuration, use it as per your requirements. Also, do not forget to implement encryption for your data at rest. There are many ways to encrypt your data in S3.&lt;/p&gt;

&lt;p&gt;Click the link given below to know more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingEncryption.html"&gt;https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingEncryption.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Service(s): Amazon S3, AWS KMS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Centralize your logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Logs are very necessary to keep an eye on your workloads. They can have many applications, but in security perspective it’s very important to have the logs of critical actions, operations, access attempts to your critical resources etc. Maintaining logs is one side of a coin, the other side is to review them and fetch out the relevant information. At the same time, consolidating your logs from multiple sources at a single place makes the reviewing process much easier.&lt;/p&gt;

&lt;p&gt;In AWS, Always store the access logs of your S3 bucket in a different bucket, otherwise it’ll create an infinite series of events that can cause trouble.&lt;/p&gt;

&lt;p&gt;Service(s): AWS CloudTrail, AWS CloudWatch, Amazon S3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review and Validate your , Roles, Security Groups &amp;amp; NACLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As discussed above, it’s good to have a proper access control for your organization. But it should be a consistent effort. It might happen that the admin forgot to revoke access granted to someone for a limited period of time, or to delete the access keys that are no longer in use. There can be many such cases, hence it’s important to keep reviewing &amp;amp; validating your Roles, Security Groups &amp;amp; NACLs.&lt;/p&gt;

&lt;p&gt;Service(s): AWS IAM, Amazon EC2, Amazon VPC&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be proactive with security findings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSPs offer many services that will help you to keep your cloud secure, like Amazon Macie, Amazon Inspector in AWS &amp;amp; Azure Security Center in Azure, etc. Do leverage these services as they offer quite flexible and efficient features over the other third-party tools available in the market.&lt;/p&gt;

&lt;p&gt;Along with that, it’s very important to take actions on the security findings these tools show, otherwise they won’t be of any good.&lt;/p&gt;

&lt;p&gt;Service(s):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/products/security/"&gt;https://aws.amazon.com/products/security/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don’t forget to rotate your keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ve protected the door, the lock but what about the keys? It’s always a good practice to keep rotating your keys i.e., changing your keys. You can also automate the process to rotate your keys at regular period of intervals. And in fact, a lot of compliance standards demands the same thing.&lt;/p&gt;

&lt;p&gt;Services: AWS KMS, AWS IAM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make security a habit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even after implementing all the required security services and incorporating the best practices, you just can’t sit idle, as I mentioned security is a consistent effort. So, it’s always good to make security a habit. It can be a burden sometimes, but it’s always worth the risk, depending upon your risk appetite. So, whenever performing any operation whether it’s a tiny one like deploying an virtual instance or huge like migrating your entire workload to cloud, keep security in mind.&lt;/p&gt;

&lt;p&gt;Stay safe, Stay Secure!&lt;/p&gt;

&lt;p&gt;Thank you! :)&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>security</category>
    </item>
  </channel>
</rss>
