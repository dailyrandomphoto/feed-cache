<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>1.3 - AWS Amplify Admin UI</title>
      <author>Alex Patterson</author>
      <pubDate>Wed, 15 Sep 2021 02:32:12 +0000</pubDate>
      <link>https://dev.to/codingcatdev/aws-amplify-admin-ui-2m65</link>
      <guid>https://dev.to/codingcatdev/aws-amplify-admin-ui-2m65</guid>
      <description>&lt;p&gt;Original: &lt;a href="https://codingcat.dev/podcast/1-3-aws-amplify-admin-ui-with-rene-brandel"&gt;https://codingcat.dev/podcast/1-3-aws-amplify-admin-ui-with-rene-brandel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/p33Q9cT_dNQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1VaD0we7TmA8t6YCEaL4sw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>webdev</category>
      <category>devops</category>
      <category>aws</category>
    </item>
    <item>
      <title>Conversational AI should be in every developer toolbox. Here's why.</title>
      <author>Arthur Grishkevich</author>
      <pubDate>Wed, 15 Sep 2021 01:35:49 +0000</pubDate>
      <link>https://dev.to/arrrgr/conversational-ai-should-be-in-every-developer-toolbox-here-s-why-349i</link>
      <guid>https://dev.to/arrrgr/conversational-ai-should-be-in-every-developer-toolbox-here-s-why-349i</guid>
      <description>&lt;p&gt;Hi folks. I’ve posted a few conversational AI tutorial articles here. I realize that I failed to talk about one important thing - why you, as a developer, should even think about adding conversational technologies to your stack of tools. &lt;/p&gt;

&lt;p&gt;Fair warning: I work for a startup with the world’s most advanced conversational AI APIs and a studio built specifically for developers. Because of this, the examples of use cases and approaches below will be based on the art of the possible with Dasha. I will also talk to you about Google Dialogflow and Rasa AI which offer great sets of tools for some use cases. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-think-about-conversational-voice-technologies-in-the-first-place%C2%A0%C2%A0"&gt;
  &lt;/a&gt;
  Why think about conversational voice technologies in the first place  
&lt;/h2&gt;

&lt;p&gt;Voice is the native interface for human-human communication. And that’s it. That’s your reason for why you should think about conversational AI technologies. The tactile way in which we communicate with machines today is a stepping stone. &lt;/p&gt;

&lt;p&gt;Look at science fiction to show you the way (I have been doing this since I learned to read and it hasn’t steered me wrong). HAL 5000 in 2001: A Space Odyssey, Eddie the ship's computer in HHGTTG, Jarvis in Iron Man. These are all machines that communicate with humans at a level indistinguishable from a human being. In this communication commands are born not in the simple command-response ways of today’s Alexa. &lt;/p&gt;

&lt;p&gt;These machines parse deep intent from the words of the human that is conversing with them, from their intonations, emotional tone and from the wider context of the conversation. Which is the same thing that humans do. Which makes the human feel comfortable in conversing with the machines. Which, in other words, passes the Turing test. &lt;/p&gt;

&lt;p&gt;In order for voice user interfaces to become ubiquitous, we need conversational AI that communicates at a level indistinguishable from a human, without falling into an uncanny valley trap. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-is-conversational-voice-ai-today%C2%A0"&gt;
  &lt;/a&gt;
  Where is conversational voice AI today 
&lt;/h2&gt;

&lt;p&gt;What is done with conversational AI today: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chatbots. Mainly simple, often multiple-choice apps. Great for taking an order or routing a customer to the right support agent. I felt I had to mention, though the focus of this article is on voice. &lt;/li&gt;
&lt;li&gt;Basic voice user interfaces - Alexa Skills, Siri assistant and such. They are great for fulfilling a single function, for example, tell you the weather or play a song. As these are command-response interactions, they do not aim to pass the Turing test and they are limited in scope of application. &lt;/li&gt;
&lt;li&gt;Voice AI business automation. Call center automation from simple voice (not touch tone) menus to more complex outbound applications. Some of these applications (mainly outbound today) do aim to pass the Turing test and oftentimes do pass it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re not yet at the point where conversational AI can fully replace tactile interfaces. Yet we are getting there. Here is me giving a demo of a conversational app which I recently built: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/46nyWBTSHgs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is a fairly simple demo. It only took me a few of hours to build from scratch. Using the same technology already today some Dasha users are building conversations with hundreds of logical nodes. In live call center environments, some apps are performing better than their human agent counterparts were before them. &lt;/p&gt;

&lt;p&gt;If you want to try building an app like the one in point 3, just look at my post history for some tutorials or pop in to our conversational AI dev &lt;a href="https://community.dasha.ai"&gt;community&lt;/a&gt;. You'll get an API key and instructions automatically upon joining. @ me in the intro channel, I’ll help where I can. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-adding-conversational-ai-to-your-toolbox-give-you-as-a-developer"&gt;
  &lt;/a&gt;
  What will adding conversational AI to your toolbox give you, as a developer?
&lt;/h2&gt;

&lt;p&gt;It will give you two things. The ability to build voice interfaces for your apps and the ability to run automated telephone conversations with an API call. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voice-user-interfaces"&gt;
  &lt;/a&gt;
  Voice user interfaces
&lt;/h3&gt;

&lt;p&gt;With a deep voice interface you can let your users engage every interaction in your app with their voice. &lt;/p&gt;

&lt;p&gt;A few use cases for this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your app is designed to be used on the go (walking, running, driving), for example, it’s a navigation app, a music app, etc.&lt;/li&gt;
&lt;li&gt;If there is a use case in which your app runs in the background, while the user switches to another app. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think in the future, VUIs will be standard fare in most new software products. &lt;/p&gt;

&lt;p&gt;In the meantime, you can implement a voice user interface with Dasha using a connector to our Node.js SDK. Next year, we will roll out Swift and Kotlin SDKs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-telephone-conversations"&gt;
  &lt;/a&gt;
  Automated telephone conversations
&lt;/h3&gt;

&lt;p&gt;Kind of like Twilio giving developers the ability to use SMS text messages with the call of an API, a proper conversational AI API gives you the ability to conduct automated calls with the call of an API. &lt;/p&gt;

&lt;p&gt;Here are just a few use cases you might want to use this for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call a user who abandoned their shopping cart and ask if they need any help completing the purchase or have some questions they need answered.&lt;/li&gt;
&lt;li&gt;Call a user to verify some details or call them up as a part of an onboarding process. &lt;/li&gt;
&lt;li&gt;Set up a fully automated customer service line for your product. You can take calls through telephony or in-app using voice over GRPC.
&lt;/li&gt;
&lt;li&gt;Call back a newly generated lead in less than a minute to convert them into a user. &lt;/li&gt;
&lt;li&gt;Build a voice Discord bot that can do pretty much anything you can think of. &lt;/li&gt;
&lt;li&gt;Literally build a replacement for a call center agent and impress your boss at the big bank. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-skills-do-you-need-to-build-with-conversational-ai"&gt;
  &lt;/a&gt;
  What skills do you need to build with conversational AI?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#analytical"&gt;
  &lt;/a&gt;
  Analytical
&lt;/h3&gt;

&lt;p&gt;Analytical skills are important for two reasons. One - you need to logically structure your conversation before you begin developing it. Two - you will need to analyze live conversations that your AI app has with real human users and implement changes to improve the app. Rasa AI calls this second part Conversation Driven Development. I love this term. We at Dasha call it training the application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding"&gt;
  &lt;/a&gt;
  Coding
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#google-dialogflow"&gt;
  &lt;/a&gt;
  Google Dialogflow
&lt;/h4&gt;

&lt;p&gt;Interestingly enough, with Google Dialogflow, the analytical skill is the only one you will need to create conversations - it is an in-browser GUI for creating automated dialogues.  You can provide intents training data, create scripts,  STT and TTS comes out of the box. Two software engineers who tested all three platforms felt that their learning curve was higher with Dialogflow even though it was a no-code environment, than with Rasa or Dasha. Pros: no-code platform. Biggest cons: speech synthesis sounds very robotic, hard to make dialogue paths handle digressions. You may need a bit of technical knowledge to set up integrations through web hooks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rasa-ai"&gt;
  &lt;/a&gt;
  Rasa AI
&lt;/h4&gt;

&lt;p&gt;To use Rasa, you will need to have Python installed to use Rasa Open Source. Knowledge of Python will be needed as you build. You can specify intents, as a part of training data. As mentioned earlier, Rasa is a technology for chatbots. If you want to use it with voice, you will need to connect external text to speech and speech to text. Connecting to external services obviously adds delays which detracts from the conversational user experience. &lt;/p&gt;

&lt;p&gt;There are multiple dialogue policies which can be used simultaneously and which dictate conversation flow (I found this a bit confusing). Rasa has a great low-code/no-code GUI for conversational design. You describe dialogue using stories and intents using NLU data. You can also specify bot responses, forms (collecting data) and rules. The open source Rasa server runs on your machine and connects to your app. &lt;/p&gt;

&lt;p&gt;Its main pro is that you can quickly build simple, straightforward text conversations. Its main drawback is that it is a bot builder. It does not aspire to let you create conversations which are human-like in form and content.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dasha-ai"&gt;
  &lt;/a&gt;
  Dasha AI
&lt;/h4&gt;

&lt;p&gt;To use Dasha, you will need to have Node.js installed. You will also want to know JavaScript. DashaScript is a domain-specific language which you use to script the dialogue between the machine and the user. &lt;/p&gt;

&lt;p&gt;You specify intents training data, much as you do with Rasa, but with Dasha you can also define named entities which can be used for slot filling. You define AI responses in the phrase map or right within the body of your dialogue script. You can define &lt;a href="https://dasha.ai/en-us/blog/using-digressions"&gt;digressions&lt;/a&gt; (send conversation to a specific node at any point based on what the user has said), to emulate how humans do dialogue. Human-like speech synthesis and text to speech come out of the box. Dasha SDK runs within your Node.js app, the conversation gets executed in the Dasha Cloud. &lt;/p&gt;

&lt;p&gt;Dasha’s main pro is that you can build simple human-like conversations quickly or take longer to build complex conversations of nearly unlimited depth. Its main drawback is that we are still in Beta and polishing up some details with user feedback. All the more reason to join our &lt;a href="https://community.dasha.ai"&gt;community&lt;/a&gt; and be one of the folks giving their input to this AI as a service engine. Don’t get it twisted though, we have paying customers using the product even in its Beta. Dasha AI is processing close to 10 million conversations monthly. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-closing"&gt;
  &lt;/a&gt;
  In closing
&lt;/h2&gt;

&lt;p&gt;To summarize, you’ll be able to add conversational AI to your stack of developer tools even if you have only a few months of programming experience. I’m a case in point - I started building with Dasha, then started teaching myself JavaScript with FreeCodeCamp. I have used Rasa Open Source and had no problem with it even though my Python skills are almost non-existent.&lt;/p&gt;

&lt;p&gt;You should hold some of these tools in your stack because they let you engage with users in ways that differentiate the user experience.  &lt;/p&gt;

&lt;p&gt;Have you used conversational AI dev tools before? &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vercel's pkg - Package your Node.js app into a single executable</title>
      <author>Sivamuthu Kumar</author>
      <pubDate>Wed, 15 Sep 2021 01:28:51 +0000</pubDate>
      <link>https://dev.to/ksivamuthu/vercel-s-pkg-package-your-node-js-app-into-a-single-executable-3mhf</link>
      <guid>https://dev.to/ksivamuthu/vercel-s-pkg-package-your-node-js-app-into-a-single-executable-3mhf</guid>
      <description>&lt;p&gt;Hello all, In this short post, we will take a look at Vercel's pkg - how we can package the Node.js app into a single executable. &lt;/p&gt;

&lt;p&gt;When we are developing a Node.js application, it totally makes sense to install dev tools, dependencies to build and run an application. In the end, the user is interested in running the app and not the code and libraries the developer integrates. In the Node.js world, it's getting tougher that - when we release the packages, the sources are also released along with the 100s of dependency code as node_modules. It brings the necessity of the package mechanism to build and distribute the node library as a single executable - with the runtime or as a single file to run on already installed nodejs runtime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-the-nodejs-app-into-a-single-file-ncc"&gt;
  &lt;/a&gt;
  Build the Node.js app into a single file - ncc
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vercel"&gt;
        vercel
      &lt;/a&gt; / &lt;a href="https://github.com/vercel/ncc"&gt;
        ncc
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Compile a Node.js project into a single file. Supports TypeScript, binary addons, dynamic requires.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;ncc - Simple CLI for compiling a Node.js module into a single file, together with all its dependencies, gcc-style.&lt;/p&gt;

&lt;p&gt;Install the ncc using the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;npm i -g @vercel/ncc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Build the project using this simple command. It will output the Node.js compact build of app.js into dist/app.js&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;ncc build app.js -o dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#package-the-nodejs-app-into-a-single-executable-pkg"&gt;
  &lt;/a&gt;
  Package the Node.js app into a single executable - pkg
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vercel"&gt;
        vercel
      &lt;/a&gt; / &lt;a href="https://github.com/vercel/pkg"&gt;
        pkg
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Package your Node.js project into an executable
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;pkg - This command-line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed.&lt;/p&gt;

&lt;p&gt;Install the pkg using the below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;npm install -g pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run the pkg build targeting multiple platforms. It will create the executable in the dist directory&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;pkg -t node12-linux,node14-linux,node14-win index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Targets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pkg&lt;/code&gt; can generate executables for several target machines at a time. You can specify a comma-separated list of targets via &lt;code&gt;--targets&lt;/code&gt; option. A canonical target consists of 3 elements, separated by dashes, for example &lt;code&gt;node12-macos-x64&lt;/code&gt; or &lt;code&gt;node14-linux-arm64&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;nodeRange&lt;/strong&gt; (node8), node10, node12, node14, node16 or latest&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform&lt;/strong&gt; alpine, linux, linuxstatic, win, macos, (freebsd)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;arch&lt;/strong&gt; x64, arm64, (armv6, armv7)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Check out this repo &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ksivamuthu"&gt;
        ksivamuthu
      &lt;/a&gt; / &lt;a href="https://github.com/ksivamuthu/vercel-pkg-demo"&gt;
        vercel-pkg-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Vercel PKG Demo
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run locally and verify whether it's logging the telemetry in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;➜ vercel-pkg-demo git:(main) npm i
➜ vercel-pkg-demo git:(main) node index.js
IoT Device Initialized
Telemetry: {"temperature":"56.12","humidity":"52.11"}
Telemetry: {"temperature":"68.30","humidity":"51.90"}
Telemetry: {"temperature":"53.78","humidity":"53.72"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm run build&lt;/code&gt; to build the package into executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;"scripts": {
    "build": "npx pkg -t linux,macos,win . --out-path dist"
 },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The build steps are added in GitHub Actions and you can see the executable files are added as artifacts after build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ir3gdlvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631668176228/CYq3OOsGM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir3gdlvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631668176228/CYq3OOsGM.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's download the executable and run and see whether we are seeing the same output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;./hvac-demo-device-macos
➜  dist git:(main)  ./hvac-demo-device-macos
IoT Device Initialized
Telemetry: {"temperature":"70.59","humidity":"46.23"}
Telemetry: {"temperature":"69.76","humidity":"49.93"}
Telemetry: {"temperature":"62.15","humidity":"58.93"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make a commercial version of your application without sources&lt;/li&gt;
&lt;li&gt;Make a demo/evaluation/trial version of your app without sources&lt;/li&gt;
&lt;li&gt;Instantly make executables for other platforms (cross-compilation)&lt;/li&gt;
&lt;li&gt;No need to install Node.js and npm to run the packaged application&lt;/li&gt;
&lt;li&gt;Put your assets inside the executable to make it even more portable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I've found vercel's pkg very useful in order to achieve a similar target and package a whole application into standalone executables for multiplatform. It's nice to have a single file that can be started right away without any external dependency. And also, it prevents from having to distribute the full sources. You can extend it for including assets and other requirements.&lt;/p&gt;

&lt;p&gt;I'm Siva - working as Sr. Software Architect at Computer Enterprises Inc from Orlando. I'm an AWS Community builder, Auth0 Ambassador and I am going to write a lot about Cloud, Containers, IoT, and Devops. If you are interested in any of that, make sure to follow me if you haven’t already. Please follow me &lt;a class="mentioned-user" href="https://dev.to/ksivamuthu"&gt;@ksivamuthu&lt;/a&gt;
 Twitter or check out my blogs at blog.sivamuthukumar.com&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>Engenharia de Software: O tal Code Review</title>
      <author>Marylly</author>
      <pubDate>Tue, 14 Sep 2021 23:16:17 +0000</pubDate>
      <link>https://dev.to/marylly/engenharia-de-software-o-tal-code-review-5eof</link>
      <guid>https://dev.to/marylly/engenharia-de-software-o-tal-code-review-5eof</guid>
      <description>&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9"&gt;
  &lt;/a&gt;
  O que é?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Code Review&lt;/em&gt; ou Revisão de código é uma prática onde o código desenvolvido para atender determinada demanda passa pela revisão de outras pessoas desenvolvedoras antes de ser integrada a uma versão principal de um software.&lt;/p&gt;

&lt;p&gt;Idealmente não deve ser um processo mandatório, e sim um pacto do time, e o valor deve ser muito bem entendido para que existam benefícios.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-review-x-pr%C3%A1ticas-ag%C3%A9is"&gt;
  &lt;/a&gt;
  &lt;em&gt;Code Review&lt;/em&gt; x Práticas Agéis
&lt;/h2&gt;

&lt;p&gt;Do ponto de vista do desenvolvimento ágil de software, o &lt;em&gt;code review&lt;/em&gt; é um processo que impacta a velocidade do time e da entrega, e pode virar um gargalo se algumas boas práticas não são atendidas, logo uma má prática.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contexto-e-cen%C3%A1rios-comuns"&gt;
  &lt;/a&gt;
  Contexto e Cenários + comuns
&lt;/h2&gt;

&lt;p&gt;Considerando muitos times de desenvolvimento de software, muitos não detém do todo o conhecimento elementar que permitam um modelo de trabalho mais ágil utilizando &lt;em&gt;trunk based&lt;/em&gt; sem um processo de &lt;em&gt;code review&lt;/em&gt; estruturado e maduro. O &lt;em&gt;trunk based&lt;/em&gt; deve ser o próximo passo após superadas essas deficiências e o processo de &lt;em&gt;code review&lt;/em&gt; eliminado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-aplicar"&gt;
  &lt;/a&gt;
  Como aplicar?
&lt;/h2&gt;

&lt;p&gt;Apesar de alguns contrapontos, o processo de &lt;em&gt;code review&lt;/em&gt; pode ser bem benéfico, e pode apoiar a maturidade e evolução técnica do time em muito aspectos.&lt;/p&gt;

&lt;p&gt;Nessa prática, temos dois papéis: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pessoa(s) quem desenvolveu o código&lt;/li&gt;
&lt;li&gt;Pessoa(s) quem pode trazer pontos de melhoria, identificar contrapontos e sugerir formas distintas para resolver não somente o problema de implementação, como problemas relacionados a demanda do código.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pode ser feito de duas maneiras: (1) Pessoalmente com as pessoas que a autora do código confia e se sente segura, ou sua liderança imediata. (2) Utilizando o recurso de &lt;em&gt;Pull Request&lt;/em&gt; oferecida por ferramentas de host de versionamento (GitHub, GitLab, BitBucket, etc)&lt;/p&gt;

&lt;p&gt;A expectativa do processo é responder algumas das perguntas relacionadas abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Código limpo ou &lt;a href="https://dev.to/marylly/clean-code-introducao-bfb"&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;:&lt;/strong&gt; É possível as pessoas lerem o código e entender o seu propósito (comportamento/resultado)? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Diretrizes do Projeto:&lt;/strong&gt; Perfomático, escalável, enxuto, padrões de projetos, padrões de arquitetura, &lt;em&gt;style guide&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Funcionalidade:&lt;/strong&gt; O comportamento do código atende as expectativas da pessoa desenvolvedora e as pessoas que irão usar: clientes, etc? Efeitos colaterais no comportamento e/ou funcionalidades já existentes no software?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Complexidade:&lt;/strong&gt; As mesmas tarefas e resultados do código podem ser executadas com um código mais simples e enxuto?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Testes:&lt;/strong&gt; O código está sendo testado? Existem cenários que cubram os cenários feliz e infeliz do processo principal desenvolvido no código? Se um comportamento indesejado ou inesperado surgir, os testes sinalizaram?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Nomes:&lt;/strong&gt; Os nomes utilizados no código trazem uma conexão com os processos e problemas de negócio que o código está sendo desenvolvido para resolver? Os nomes empregados nas variáveis, classes, métodos, funções apoiam o entendimento do comportamento ou da saída de código em revisão?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Comentários:&lt;/strong&gt; Os que foram utilizados estão fácil de compreender, curtos e realmente úteis onde aplicados?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Efeitos colaterais:&lt;/strong&gt; Impacta na comunicação e/ou comportamento de aplicações internas/externas e de parceiros? Quebra de contratos de comunicação?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Documentação:&lt;/strong&gt; A documentação de apoio precisa ser atualizada? Contém o que precisa para executar alguma atividade ou tarefa relacionada ao código?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benef%C3%ADcios"&gt;
  &lt;/a&gt;
  Benefícios
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Apoia o engajamento do time com a saúde do código;&lt;/li&gt;
&lt;li&gt;Apoia no aprendizado de linguagens, frameworks, paradigmas, etc;&lt;/li&gt;
&lt;li&gt;Acelera o engajamento de novas pessoas desenvolvedoras sobre o que é esperado do código;&lt;/li&gt;
&lt;li&gt;A medida que as boas práticas e melhorias são aplicadas, novas formas são discutidas e absorvidas, aumentando a qualidad;&lt;/li&gt;
&lt;li&gt;Fortalece a confiança da pessoa desenvolvedora e do time em &lt;em&gt;deploys&lt;/em&gt; de alta qualidade;&lt;/li&gt;
&lt;li&gt;Promove discussões sobre: (1) Tecnologias usadas e novas (2) Discussões sobre arquitetura de código (3) Discussões sobre boas práticas;&lt;/li&gt;
&lt;li&gt;Promove o compartilhamento de conhecimento e a cooperação;&lt;/li&gt;
&lt;li&gt;Apoia na identificação de refatorações e débitos técnicos que podem ser trabalhados posteriormente.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#contrapontos"&gt;
  &lt;/a&gt;
  Contrapontos
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Pode gerar estresse e ansiedade para as pessoas autoras do código, principalmente para pessoas novas no time/projeto.&lt;/li&gt;
&lt;li&gt;Pode se tornar um gargalo no ciclo de desenvolvimento de software.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  RECOMENDAÇÕES
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#autora-do-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Autora do Código
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Na apresentação ou descrição da revisão, comunique o objetivo da implementação, e se for necessário, as idéias por traz da solução desenvolvida;&lt;/li&gt;
&lt;li&gt;Se o processo for por PRs, faça-os de forma incremental com pouco conteúdo e sinalize o trabalho ainda em andamento (vulgo WIP ou &lt;em&gt;Work in Progress&lt;/em&gt;), para não desestimular as pessoas revisoras pelo volume ou pela falta de tempo para revisar adequadamente;&lt;/li&gt;
&lt;li&gt;Evite enviar para revisão pedaços de código não-funcionais ou que não agregam ao processo. Atrapalha a revisão e aumenta o tempo utilizado para entender o que o código faz;&lt;/li&gt;
&lt;li&gt;Evite códigos de coisas que ainda vão ser desenvolvidas no futuro (as vezes coisas não confirmadas). Ex. Classes vazias, métodos/funçõe vazios, as vezes só a sua assinatura, TO-DOS, etc;&lt;/li&gt;
&lt;li&gt;Não espere pelo tempo das pessoas revisoras, sinalize as envolvidas, afinal todas temos prazos para serem atendidos, e a entrega é do time, pelo alguém do time deve se organizar para fazer a revisão;&lt;/li&gt;
&lt;li&gt;Se for fazer revisão pessoalmente, agende com a pessoa e reserve um tempo para focar adequadamente no processo;&lt;/li&gt;
&lt;li&gt;Se não houver consenso ou ocorrer conflitos, busque a liderança ou outras pessoas para chegar na melhor solução possível para o contexto e momento;&lt;/li&gt;
&lt;li&gt;Em revisões privadas, compartilhe os resultados num comentário do PR ou num canal comum com o time para que todas entendam e aprendam com a informação;&lt;/li&gt;
&lt;li&gt;Evite código/artefatos desnecessários: Código comentado que não está e/ou nem será utilizado, arquivos que não precisam ser versionados ou que são temporários.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#revisora-do-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Revisora do código
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Evite criticar a pessoa ou código;&lt;/li&gt;
&lt;li&gt;Seja propositiva nos comentários, e compartilhe suas razões;&lt;/li&gt;
&lt;li&gt;Foque nas diretrizes do projeto;&lt;/li&gt;
&lt;li&gt;Evite compartilhar opiniões pessoais, faça de forma privada, somente você e a pessoa autora;&lt;/li&gt;
&lt;li&gt;Não compartilhe &lt;em&gt;feedbacks&lt;/em&gt; negativos ou construtivos, faça de forma privada, somente você e a pessoa autora;&lt;/li&gt;
&lt;li&gt;Se existir dúvida se vai ofender ou gerar conflitos, faça de forma privada ou busque apoio para transmitir a mensagem adequadamente;&lt;/li&gt;
&lt;li&gt;Nem sempre as preferências da pessoa revisora é uma regra que deve ser adotada pela pessoa autora do código, e isso deve ficar bem entendido pelas pessoas envolvidas;&lt;/li&gt;
&lt;li&gt;Sinalize quando um comentário é apenas uma sugestão, não necessariamente algo mandatório, e a pessoa autora pode tomar a decisão de fazer ou não;&lt;/li&gt;
&lt;li&gt;Busque o consenso em detrimento da imposição;&lt;/li&gt;
&lt;li&gt;Abordagens interessantes de solução foram apresentadas, reconheça, aprecie a pessoa autora do código, reforce as coisas boas e que trazem valor;&lt;/li&gt;
&lt;li&gt;Se não conhece muito bem a &lt;em&gt;codebase&lt;/em&gt;, comece pelos testes para entender o comportamento desenvolvido e os elementos do código utilizado para confrontar com a proposta inicial da demanda.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#princ%C3%ADpios-recomendados"&gt;
  &lt;/a&gt;
  Princípios Recomendados
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Novas demandas emergentes:&lt;/strong&gt; Podem surgir necessidades de reavaliação da implementação, refatoração e até necessidade de criar novas funcionalidades. As pessoas da liderança e de negócio devem ser sinalizadas e a solução replanejada ou refatorada de acordo com o prazo, pessoas e recursos disponíveis, evitar absorver esse trabalho emergente num trabalho iniciado e identificado através de uma revisão de código;&lt;br&gt;
&lt;strong&gt;2. Ambiente seguro e inclusivo:&lt;/strong&gt; NÃO é um espaço para repressão das pessoas autoras por preconceitos por parte das pessoas revisoras, pelas características da pessoa autora do código (raça, gênero, origem, religião, inclinação política, comportamento e/ou aparência), todas as pessoas DEVEM ser respeitadas pelo o que REALMENTE são;&lt;br&gt;
&lt;strong&gt;3. Espaço de aprendizado:&lt;/strong&gt; NÃO é um espaço para as pessoas autoras serem reprimidas por falta de alguns conhecimentos, e sim, para suprir deficiências técnicas, aprender novas formas de trabalho, exporem suas idéias, fortalecerem seus conhecimentos e obter &lt;em&gt;feedback&lt;/em&gt; sobre a evolução do trabalho antes de ir para ambiente produtivo;&lt;br&gt;
&lt;strong&gt;4. Revisões rápidas:&lt;/strong&gt; O time deve ser encorajado a fazer as revisões assim que possível, o período máximo de um dia de trabalho para ser concluído.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%B5es"&gt;
  &lt;/a&gt;
  Conclusões
&lt;/h2&gt;

&lt;p&gt;Apesar do &lt;em&gt;Code Review&lt;/em&gt; não ser considerada uma boa prática, pode ser um espaço de muito crescimento e amadurecimento das pessoas envolvidas, e deve ser utilizado como um trampolim para a evolução para o formato &lt;em&gt;trunk based&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se conhece outras formas para a prática do processo, compartilhe comigo nos comentários, seria muito legal continuar a conversa e evoluir sobre o tema. =]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ATENÇÃO: Esse conteúdo é a consolidação das impressões e opiniões da autora sobre o assunto, resultado de vivências e processos empíricos que trouxeram resultados para contextos específicos, não há garantia que é aderente a qualquer contexto e/ou time de desenvolvimento de software.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;Google Inc: &lt;strong&gt;The Standard of Code Review, Engineering Practices.&lt;/strong&gt; Acessado em 10 de Setembro de 2021: &lt;a href="https://google.github.io/eng-practices/review/reviewer/standard.html"&gt;https://google.github.io/eng-practices/review/reviewer/standard.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yu, Chak Shun; Better Programming Blog: &lt;strong&gt;5 Actionable tips to deliver higher quality code reviews today.&lt;/strong&gt;&lt;br&gt;
Acessado em 14 de Setembro de 2021: &lt;a href="https://betterprogramming.pub/5-actionable-tips-to-deliver-higher-quality-code-reviews-today-de422cd538df"&gt;https://betterprogramming.pub/5-actionable-tips-to-deliver-higher-quality-code-reviews-today-de422cd538df&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>agile</category>
      <category>bestpractice</category>
      <category>engineering</category>
    </item>
    <item>
      <title>Understanding Ngrx Actions, Reducers and Effects</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Tue, 14 Sep 2021 23:01:24 +0000</pubDate>
      <link>https://dev.to/mcube25/understanding-ngrx-actions-reducers-and-effects-j9e</link>
      <guid>https://dev.to/mcube25/understanding-ngrx-actions-reducers-and-effects-j9e</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;Actions, Reducers and Effects are building blocks in Ngrx which is used in many Angular applications. This article is meant to explain the relationship between the three and how we can use them in an application&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#actions"&gt;
  &lt;/a&gt;
  Actions
&lt;/h4&gt;

&lt;p&gt;Actions are one of the main building blocks in Ngrx. Actions express unique events that happen throughout an application. This events can be user interaction with a page, external interaction through network request and direct interaction with the device API's. Actions are the input and output of many systems in Ngrx. They help in understanding how events are handled in an application. The Action is an object like interface. Let us have a look of what an Action interface looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Action {
  type: string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Action interface has a single property. Its type is represented as a string. The type property is for describing the action that will be dispatched into an application. The value of the type comes from the &lt;strong&gt;&lt;em&gt;[source]&lt;/em&gt;&lt;/strong&gt;  event and is used to provide a context of what category of action is to be taken. Properties are added to an action to provide additional context or metadata for an action. Actions are JavaScript objects in simple terms. For example an event is triggered from an authentication after interacting with a backend API can be described as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  type: '[Auth API] Login success';
  username: string;
  password: string;
  phone - number: number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above action is an event triggered by a user clicking a login button from the login page to attempt to authenticate a user. The username, password and phone-number are defined as additional metadata from the login page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#writing-actions"&gt;
  &lt;/a&gt;
  Writing Actions
&lt;/h4&gt;

&lt;p&gt;The following rules should be applied when a good action is to be written within an application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Write actions before developing features. This is to understand and gain a shared knowledge of the feature being implemented&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide contents that are descriptive and that are targeted to a unique event with more detailed information that can be used to debug in the developer tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Divide actions into categories based on the event source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Actions are inexpensive to write. For this reason, the more actions written the better a developer can express a work flow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Actions should be event driven. Events should be captured and not commands as the description of an event are the handling of the event.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take a look at an example Action. First we import Actions from the Ngrx store into our action file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Action } from '@ngrx/store';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we import our data source&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Assessmentconfig } from 'src/app/shared/models/school.model';

export enum AssessmentconfigActionTypes {
  CreateAssessmentconfig = '[Assessmentconfig] Create'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we implement our action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class CreateAssessmentconfig implements Action {
 type = AssessmentconfigActionTypes.CreateAssessmentconfig;
  constructor(public payload: { assessmentconfig: Assessmentconfig }) {}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CreateAssessmentconfig function returns an object in the shape of an action interface. The constructor will be used to define any additional metadata needed for the handling of the action. The action being dispatched should be created in a consistent, type-safe way. The action creator can the be used to return the action when dispatching.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onSubmit(username: string, password: string){
  store.dispatch(CreateAssessmentconfig({
    username: username,
    password: password
  }
  ))
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CreateAssessmentconfig action creator receives an object of username and password and returns a plane javaScript object with a property type of &lt;strong&gt;&lt;em&gt;[Login Page], Login&lt;/em&gt;&lt;/strong&gt;. The returned action has very specific context about where the action came from and what happened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The category of the action is captured within the square brackets []&lt;/li&gt;
&lt;li&gt;The category is used to group actions for a particular area. This area can be a component page, backend API or browser API&lt;/li&gt;
&lt;li&gt;The Login text after the category is a description of what event occurred from the action.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#reducers"&gt;
  &lt;/a&gt;
  Reducers
&lt;/h4&gt;

&lt;p&gt;Reducers are functions responsible for handling transitions from one state to the next state in an application. They are pure functions in that they produce the same output for a given input without any side effects handling state transition synchronously. Each reducer function takes the latest Action dispatched, the current state and determines whether to return a newly modified state or the original state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-reducer-function"&gt;
  &lt;/a&gt;
  The Reducer Function
&lt;/h4&gt;

&lt;p&gt;The consistent parts of pieces of state managed by a reducer are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An interface or type that defines the shape of the state &lt;/li&gt;
&lt;li&gt;The functions that handle the state changes for the associated actions&lt;/li&gt;
&lt;li&gt;The arguments including the initial state or current state and current action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take a look at an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface AssessmentconfigState {
  // additional entities state properties
  selectedId: number;
  loading: boolean;
  error: string;
  query: AssessmentconfigSearchQuery;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A reducer file is created and the a default state is set as in above. A reducer function is a listener of actions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class CreateAssessmentconfig implements Action {
 type = AssessmentconfigActionTypes.CreateAssessmentconfig;
  constructor(public payload: { assessmentconfig: Assessmentconfig }) {}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code in the Actions folder describes the transitions that will be handled by the reducer. We will import this action into the reducer file. The shape of the state will now be defined according to what is to be captured.&lt;/p&gt;

&lt;p&gt;We can now use the default state to create an initial state for a required state property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const initialAssessmentconfigState: AssessmentconfigState({

  selectedId: null,
  loading: false,
  error: '',
  query: {
    filter: '',
    sorting: '',
    limit: 999,
    page: 1
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a reducer function we can&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function assessmentconfigReducer(state = initialAssessmentconfigState,
  action: AssessmentconfigActions): AssessmentconfigState {
  switch (action.type) {
    case AssessmentconfigActionTypes.CreateAssessmentconfig:
      return {
        ...state,
        loading: true,
        error: ''
      };

    default:
      return state;
  }
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the reducer above, the action is strongly typed. The action handles the state transition immutably. The state transition are not modifying the original state but returning a new state of objects using the spread operator. The spread syntax copies the properties for the current state into the object creating a new reference.&lt;br&gt;
 This ensures that a new state is produced with the change. This preserves the purity of the change thereby promoting referential integrity that guarantees old references are discarded when a state change occurs.  When an action is dispatched, all registered reducers receive the action. Reducers are only responsible for deciding which state transition should occur for a given action.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#effects"&gt;
  &lt;/a&gt;
  Effects
&lt;/h4&gt;

&lt;p&gt;In an Angular application there is need to handle impure actions. Impure actions can be network request, websocket messages and time based events. In a service based Angular application, components are responsible for interacting with external resources through services. Effects provide a way to interact with those services so as to isolate them from the component. They handle task such as fetching data, running task that produce multiple events and other external interactions where components do not need explicit knowledge of such interactions. In other words effects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isolate side effects from components allowing for more pure components that select state and dispatch actions.&lt;/li&gt;
&lt;li&gt;are long running services that listen to observable of every action dispatched on the store&lt;/li&gt;
&lt;li&gt;filter the actions based on the type of action they are interested in. This is done by an operator&lt;/li&gt;
&lt;li&gt;performs tasks which are synchronous or asynchronous, returning a new action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In service based applications, components interact with data through many different services that expose the data through properties and methods. This services may depend on other services. Components consume these services to perform task giving them many responsibilities. &lt;br&gt;
 Effects when used along with the &lt;strong&gt;&lt;em&gt;store&lt;/em&gt;&lt;/strong&gt; decreases the responsibility of the component. In a larger application, it becomes more important because of multiple sources of data.  Effects handle external data and interactions allowing services to be less stateful and only perform tasks related to the external interactions.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#writing-effects"&gt;
  &lt;/a&gt;
  Writing Effects
&lt;/h4&gt;

&lt;p&gt;To isolate side effects from a component, an effect class should be created to listen for events and perform task. Effects are injectable service classes with distinct parts which are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An injectable actions service that provides an observable stream of all actions dispatched after the latest state has been reduced.&lt;/li&gt;
&lt;li&gt;Metadata is attached to the observable stream using the create function. The metadata is used to register the streams the store subscribes to and returns actions from the effects stream dispatching back to the store.&lt;/li&gt;
&lt;li&gt;Actions are filtered using pipeable &lt;code&gt;ofType&lt;/code&gt; operator. This operator takes one or more action types as arguments and filters the action to be acted upon.&lt;/li&gt;
&lt;li&gt;Effects are subscribed to the store observable.&lt;/li&gt;
&lt;li&gt;Services are injected into effects to interact with external API's and handle stream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take an example at play&lt;br&gt;
First we import&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The action and services are now imported from the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {AssessmentconfigActionTypes,CreateAssessmentconfig,
 CreateAssessmentconfigFail 
} from './assessmentconfig.actions';
import { SchoolService } from 'src/app/shared/services/school.service';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the effects by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Injectable()
export class AssessmentconfigEffects {
  // ========================================= CREATE
  @Effect()
  create: Observable&amp;lt;Action&amp;gt; = this.actions$.pipe(
    ofType&amp;lt;CreateAssessmentconfig&amp;gt;(AssessmentconfigActionTypes.CreateAssessmentconfig),
      this.service.createAssessmentConfig(schoolId, action.payload.assessmentconfig).pipe(
        switchMap((assessmentconfig: Assessmentconfig) =&amp;gt; {
          const a1 = new CreateAssessmentconfigSuccess({ result: assessmentconfig });
          const a2 = new SelectAssessmentconfigById({ id: assessmentconfig.id });
          return [a1, a2];
        }),
        catchError(({ message }) =&amp;gt; of(new CreateAssessmentconfigFail({ error: message })))
      )
    )
  );

  constructor(private actions$: Actions, private store: Store&amp;lt;ApplicationState&amp;gt;,
     private service: SchoolService) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AssessmentconfigEffects is listening for all dispatched actions through the Action stream. It shows its specific interest by using the  &lt;code&gt;ofType&lt;/code&gt; operator. The stream of action is then mapped into a new observable using the &lt;code&gt;switchMap&lt;/code&gt;  operator. It returns a new action with an error method attached. The action is dispatched to the store where it would be handled by the reducers when a state change is needed. It is very important to handle errors when dealing with observable streams so that the effects can continue running.&lt;/p&gt;

&lt;p&gt;This brings us to the end of this article. We have explained how to create Ngrx Actions, Reducers and Effects as well as their implementation in an application.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>ngrx</category>
      <category>devops</category>
    </item>
    <item>
      <title>Building a Basic Local Kubernetes/Docker Setup</title>
      <author>ndesmic</author>
      <pubDate>Tue, 14 Sep 2021 22:49:10 +0000</pubDate>
      <link>https://dev.to/ndesmic/building-a-basic-local-kubernetes-docker-setup-1fdk</link>
      <guid>https://dev.to/ndesmic/building-a-basic-local-kubernetes-docker-setup-1fdk</guid>
      <description>&lt;p&gt;I found myself needing to trying to test out some Kubernetes stuff locally.  In order to do so I needed to build a cluster but I actually found the resources that came up a bit lacking.  I actually got stuck trying to figure out how to hit my cluster externally. So once I figure out what I needed to know I decided to try a few different approaches to making a basic setup for container orchestration setup.  Hopefully this is helpful to someone.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-tools"&gt;
  &lt;/a&gt;
  The Tools
&lt;/h1&gt;

&lt;p&gt;The tools we need are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;kubectl to interact with the cluster - &lt;a href="https://www.downloadkubernetes.com/"&gt;https://www.downloadkubernetes.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;kind to build the cluster - &lt;a href="https://github.com/kubernetes-sigs/kind"&gt;https://github.com/kubernetes-sigs/kind&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;minikube to build a minikube cluster - &lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;https://minikube.sigs.k8s.io/docs/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;docker to build images - &lt;a href="https://www.docker.com/get-started"&gt;https://www.docker.com/get-started&lt;/a&gt; (or &lt;code&gt;winget install docker&lt;/code&gt; for winget users)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: You may need to reboot and check that hardware virtualization is enabled in your BIOS if you are fresh installing docker.&lt;/p&gt;

&lt;p&gt;I feel like a real devops already.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-simple-app"&gt;
  &lt;/a&gt;
  A simple app
&lt;/h1&gt;

&lt;p&gt;I built a simple app using Deno.  Mostly because Deno is cool and this primarily a javascript blog.  You can use node too, the app code isn't going to be the biggest focus.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Started on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;}`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serveHttp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;httpConnection&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello for Application!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deno is super simple, don't even need a single import for this.&lt;/p&gt;

&lt;p&gt;You can run it with &lt;code&gt;deno run --allow-all --unstable app/server.js&lt;/code&gt;.  If you haven't used deno &lt;code&gt;--allow-all&lt;/code&gt; means we're allowing all permissions which are naturally restricted unlike node.  Really &lt;code&gt;--allow-net&lt;/code&gt; is better but for a little test project &lt;code&gt;--allow-all&lt;/code&gt; covers the bases so you don't need to fiddle with it if you use more.  &lt;code&gt;--unstable&lt;/code&gt; is because there's a few unstable things in deno that this depends on.  Hopefully that gets taken care of soon.  &lt;/p&gt;

&lt;p&gt;Once running you should be able to hit it one port 8080.&lt;/p&gt;

&lt;p&gt;At this point I will start making scripts for all my steps so that I can run them without remembering all the flags and stuff. I typically do this as shell scripts which are a little weird to use on Windows.  If you have git installed (and I don't know why anyone reading this wouldn't) you can add &lt;code&gt;C:\Program Files\Git\bin&lt;/code&gt; to your path, which lets you use &lt;code&gt;sh&lt;/code&gt;.  But if you are a Powershell user that probably works too, or WSL.  The point is to start building these steps up.  I also sometimes use a package.json to run them as scripts because that's actually a really handy feature even if I don't need node.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#running-an-application-in-docker"&gt;
  &lt;/a&gt;
  Running an application in Docker
&lt;/h1&gt;

&lt;p&gt;We can run the app.  Now let's run the app in a container.  First we need a dockerfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; denoland/deno&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["deno", "run", "--allow-all", "--unstable", "app/server.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line says we're inheriting from the denoland/deno image which as you might expect contains deno (it's the official image and it's base OS is Debian Linux if you're wondering).  These name refer to images on &lt;a href="https://hub.docker.com/"&gt;dockerhub&lt;/a&gt; by default.  If you are using node or something else find one of the official images there and replace the name.&lt;/p&gt;

&lt;p&gt;The second line say we're going to copy things from the host's current working directory (".") to the current working directory inside the container (you can change the paths if necessary).&lt;/p&gt;

&lt;p&gt;The last line is the command that is run when you start the container.  You can use a string but the array format is preferred as it doesn't go through the shell.  All we're doing is the same command we used to run the server on the outside.&lt;/p&gt;

&lt;p&gt;Now let's build our image.  &lt;code&gt;docker build -f docker/app.dockerfile -t my-app .&lt;/code&gt; where "docker/app.dockerfile" is the path to the dockerfile (it will use &lt;code&gt;./dockerfile&lt;/code&gt; by default) and "my-app" is the name or tag you want to give the image.  I highly recommend you tag the images otherwise you have to look them up when you want to delete them.&lt;/p&gt;

&lt;p&gt;If docker is installed and running it will download some stuff and build the container.  At this point I'd recommend using the official docker extension for vscode if you are using vscode like me.  Otherwise you'll need to learn some more docker commands to list images and running containers.  Once we have the image we can then launch a container.  A container is really just a light-weight VM.  I say "light-weight" but they're still a couple hundred megabytes so you may wish to clean up after yourself.  To run it use &lt;code&gt;docker run -p 8080:8080 --name my-app -it my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;"--name my-app" is the name of the container "my-app" at the end is the name you gave the image you wish to build.  "-it" means you want to get the terminal output and interact with the process, this is technically optional.  &lt;code&gt;-p 8080:8080&lt;/code&gt; is how the host port connects to the container port.  The left is the host, the right is the container, so we're just passing though port 8080.&lt;/p&gt;

&lt;p&gt;At this point you should see the same running output and be able to hit localhost:8080 in the browser and get the same result, this time it's in a container and we can move this container anywhere you want and it will still work as long as you have docker.&lt;/p&gt;

&lt;p&gt;Lastly, let's clean it up.  If we make changes we need to remove the running container (as there can't be 2 with the same name).  We may also want to remove the image just to save space.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rm -f my-app&lt;/code&gt; will kill the container.  The &lt;code&gt;-f&lt;/code&gt; is force because we don't care about the state of it, if we did then we might be gentler.  &lt;code&gt;docker image rm my-app&lt;/code&gt; will remove the image.&lt;/p&gt;

&lt;p&gt;Next you can choose one of two tools for running a local cluster.  A "cluster" is basically a kubernetes universe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-a-cluster-with-kind"&gt;
  &lt;/a&gt;
  Setup a cluster with Kind
&lt;/h2&gt;

&lt;p&gt;First we'll start by using Kind as a cluster.  You can get install instructions here: &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation"&gt;https://kind.sigs.k8s.io/docs/user/quick-start/#installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once setup all we need to do is run &lt;code&gt;kind create cluster --name my-app&lt;/code&gt; to create a new cluster.&lt;/p&gt;

&lt;p&gt;Before we can deploy we need the image for "my-app" to be available to the cluster.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kind load docker-image my-app --name my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first "my-app" is the image name.  You'll need to have built the image with docker first with the name "my-app".  The &lt;code&gt;--name&lt;/code&gt; "my-app" is the cluster name which is needed to disambiguate, it corresponds to the name when creating the cluster.&lt;/p&gt;

&lt;p&gt;Once you are done with the cluster and want to delete it you use &lt;code&gt;kind delete cluster --name my-app&lt;/code&gt;.  I suggest you do this after each test to make sure you are in a clean state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-a-cluster-with-minikube"&gt;
  &lt;/a&gt;
  Setup a cluster with Minikube
&lt;/h2&gt;

&lt;p&gt;If you don't want kind we could also use minikube which is another way to run Kubernetes clusters locally.  You can find install instructions here: &lt;a href="https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/"&gt;https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Starting is easy enough it's just &lt;code&gt;minikube start&lt;/code&gt;.  Deleting is just as east &lt;code&gt;minikube delete&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get images onto minikube we can use the command &lt;code&gt;minikube image load my-app&lt;/code&gt; where "my-app" is the name of your docker image.  Note: Searching how to do this will bring up a bunch of other ways but this seems to be the latest and easiest way to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-a-kubernetes-deployment"&gt;
  &lt;/a&gt;
  Build a kubernetes deployment
&lt;/h2&gt;

&lt;p&gt;Oh boy, here we go.  At least the cluster is easy enough to setup. &lt;/p&gt;

&lt;p&gt;Once a cluster is created there's really nothing in it.  We need to create "pods".  Pods are the smallest unit infrastructure in kubernetes.  They represent a co-located set of containers (or just one container in the simple case).  Abstractly they represent one instance of an application.  To create a pod that runs our application we need to dive into some yaml.&lt;/p&gt;

&lt;p&gt;The first sort of resource we'll setup is called a "deployment". A deployment is a group of pods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;//deployment.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-deploy&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
        &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MESSAGE&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Hello World&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we start with what's basically an XML schema definition.  Then the "kind" which is the type of resource we're creating.  We can give the deploy metadata which is a bunch of freeform tags.  "spec" is the actual blueprint to build.  Unlike most other resources deployments are done with templates which means we're giving the blueprint for a configuration of a pod rather than the configuration of the pod itself (we could also do the latter with a kind "pod").  This is because we might make many pods with the same blueprint like in an autoscaling environment.  The "selector" is like a CSS selector, we find pods matching the tags (in this case app = "my-app") and update them if they exist.&lt;/p&gt;

&lt;p&gt;Now to describe the pods themselves. Each pod might have metadata as well in this case a name (the same name we select above).  The spec for the pod includes the containers in the pod.  We just have one.  We give it a name and the name of the image (corresponds to the tag or "-t" argument you gave docker).  "imagePullPolicy" tell it we don't want to automatically download the image. Typically you cluster up in the cloud will download images from a registry like dockerhub, but since we're using local images that will fail so we're turning it off.  Lastly is the port which is the port that gets exposed.  By saying containerPort 8080 the container will expose 8080 to the rest of the pod.  As a bonus I've added some "env".  These are environment variable that are given to the pod and one of the simplest ways to pass data in.&lt;/p&gt;

&lt;p&gt;Since we're adding an environment variable it makes sense to read it so I'll update the application slightly (remember to rebuild the images!).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Started on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serveHttp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;httpConnection&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; from Application!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To actually apply this deployment we use &lt;code&gt;kubectl apply -f path/to/deployment.yaml&lt;/code&gt;.  The &lt;code&gt;-f&lt;/code&gt; here means "use this file".  Also important to note that we're describing the state it should be in, 1 pod running our app and kubernetes will try it's best to maintain that. Also keep in mind yaml is whitespace sensitive, if you have errors it might be because things aren't lined-up correctly.&lt;/p&gt;

&lt;p&gt;At this point we have a pod but we can't really do anything with it because it's not accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-a-service"&gt;
  &lt;/a&gt;
  Build a service
&lt;/h2&gt;

&lt;p&gt;Pods in kubernetes are ephemeral, they can be created and destroyed each time with random addresses so we need a stable way to reach a group of resources at a specified address.  This is where a service comes into play.  We can add a service to the deployment.yaml.  Yaml lets us declare multiple documents in the same file as long as the documents are delimited with &lt;code&gt;\n---\n&lt;/code&gt;. So like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;//Deployment spec&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="s"&gt;//Service spec&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll look at the service spec now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app-service&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
    &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a kind "service" with a metadata name.  Should be straightforward enough.  For the spec we select all pods with app=my-app.  The "targetPort" is the port on the pod and "port" is the port that the service is exposed on.  Now inside the cluster &lt;code&gt;8080&lt;/code&gt; will refer to this service, which is pointed at our app pod's port 8080 so we should see the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expose-it-externally"&gt;
  &lt;/a&gt;
  Expose it externally
&lt;/h2&gt;

&lt;p&gt;We have a service which gives us a stable address, now we need to expose it so we can access the service externally. We can do this with port forwarding.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl port-forward service/my-app-service 8080:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;service/my-app-service&lt;/code&gt; means it's a service with name "my-app-service" which we labeled it above.  Then we say we want to expose it's port 8080 (services could have multiple ports) on external port 8080.&lt;/p&gt;

&lt;p&gt;With this you should be able to visit localhost:8080 and see the application.  In fact, you should be able to see the message "Hello World from Application!" because it's reading the environment variable we gave it.&lt;/p&gt;

&lt;p&gt;This is a very simple passthrough.  For things like load balancing you need something more complicated called an ingress which has to be configured.  I won't be dealing with that today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;p&gt;I won't go too deep into debugging but there's a few basic commands to know to help you unstick yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;kubectl get {resource}&lt;/code&gt; - where {resource} is "pods", "service" etc.  This will list out all of that resource in the cluster so you can see what's there (did the service actually get created?).  Specifically you can see if the pods are healthy.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubectl describe {resource} {name}&lt;/code&gt; - where name is the name of the resource (you can find it from the get command). This will do a more detailed description of the resource.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubectl logs {podName} {containerName}&lt;/code&gt; - You can get the generated {podName} from the get command, the container name is the name of the container as defined in the yaml configuration.  This will dump all the standard console logs produced by the running process.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubectl exec {podName} {containerName} -it -- /bin/bash&lt;/code&gt; - This will open a terminal in the container on the pod so you can run commands.  Depending on the Linux version you might need to run "/bin/sh" instead.  Great for running tools like curl to explore the environment. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bonus-docker-swarm"&gt;
  &lt;/a&gt;
  Bonus: Docker Swarm
&lt;/h2&gt;

&lt;p&gt;Kubernetes is fine and all, it's probably what your enterprise-grade company will use but sometimes, just sometimes, you want a simple cloud setup with less complexity and yaml (note there's still some yaml).  For this there's docker swarm.  I'm a bit sad it didn't take off like Kubernetes because at least as a layman in scalable cloud applications I find it to be a lot more elegant and you need 2 less binaries to run it.&lt;/p&gt;

&lt;p&gt;By default swarm is not enabled in docker.  You need to run &lt;code&gt;docker swarm init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Docker swarm is configured with a &lt;code&gt;docker-compose.yaml&lt;/code&gt; file which similar to the kubernetes deploy.yaml we built (thought far simpler).  It used to be the case that you would use a related tool called "docker-compose" to build environments from these files though much of it is now built-in to docker itself though docker-compose is still hanging around with slightly different use-cases (it can build images before deploying) but it seems mostly obsolete to me because we do the same thing just in 2 steps.  Let's start with a compose file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;//app.docker-compose.yaml&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;my-app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;my-app"&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MESSAGE="Hello Swarm"&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;8080:8080"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It start with a version which is not dissimilar from the kubernetes version and notes what version spec the file conforms to.  Then we list out services which are similar to kubernetes services, it has one or many containers "my-app" using image "my-app" that we built earlier.  We can pass in environment just like kubernetes and we expose container port 8080 on host port 8080.  The latter line does the same thing the service would have done in kubernetes, we setup a direct line from localhost:8080 to the container's port 8080 in one line.&lt;/p&gt;

&lt;p&gt;To deploy it to the docker engine use the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker stack deploy -c docker/app.docker-compose.yaml my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-c&lt;/code&gt; indicates the compose file.&lt;/p&gt;

&lt;p&gt;BTW if you get a message like "services.my-app Additional property {name} is not allowed" you probably misspelled something.&lt;/p&gt;

&lt;p&gt;If all is well this will start you app on localhost:8080.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-swarm"&gt;
  &lt;/a&gt;
  Debugging Swarm
&lt;/h2&gt;

&lt;p&gt;I have less experience here but the main commands you can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;docker service ls&lt;/code&gt; - To list services&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker ps&lt;/code&gt; - To list docker process, that is running containers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker exec -it {containerId} /bin/bash&lt;/code&gt; - get a shell to the running container (use /bin/sh depending on Linux version).  You can lookup the container id from &lt;code&gt;docker ps&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#beyond"&gt;
  &lt;/a&gt;
  Beyond
&lt;/h2&gt;

&lt;p&gt;This was just a very basic tutorial.  The next steps might be adding replicas or change the resource limits on pods/containers.  These tools are ridiculously complex.&lt;/p&gt;

&lt;p&gt;You can find the full code here: &lt;a href="https://github.com/ndesmic/orchestration-basics/tree/v1.0"&gt;https://github.com/ndesmic/orchestration-basics/tree/v1.0&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>deno</category>
    </item>
    <item>
      <title>CodePen no VS code</title>
      <author>Ricardo Rodrigues</author>
      <pubDate>Tue, 14 Sep 2021 22:48:52 +0000</pubDate>
      <link>https://dev.to/rrodrigues345/codepen-no-vs-code-1mcj</link>
      <guid>https://dev.to/rrodrigues345/codepen-no-vs-code-1mcj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#codepen-amp-vscode"&gt;
  &lt;/a&gt;
  CodePen &amp;amp; VSCode
&lt;/h2&gt;

&lt;p&gt;CodePen é um editor de código on-line útil e libertador para desenvolvedores de qualquer nível de habilidade, e particularmente capacitante para pessoas que estão aprendendo a programar. Usando apenas seu navegador, permite que você escreva códigos principalmente em linguagens de front-end como HTML, CSS, JavaScript e veja os resultados à medida que os constrói.  Além disso, é principalmente um ambiente de desenvolvimento social pois permite uma maneira fácil de compartilhar seu projeto com a comunidade dev. &lt;/p&gt;

&lt;p&gt;Entretanto, em alguns casos, pode ser que você queira exportar o seu projeto para um outro editor de código-fonte, como o Visual Studio Code, desenvolvido pela Microsoft e assim praticar em um editor diferente. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primeiros-passos"&gt;
  &lt;/a&gt;
  Primeiros Passos
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#crie-uma-pasta-para-armazenar-o-projeto-no-seu-computador"&gt;
  &lt;/a&gt;
  Crie uma pasta para armazenar o projeto no seu computador:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cf1O_uh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/02-criar-pasta-projeto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cf1O_uh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/02-criar-pasta-projeto.png" alt="imagem pasta"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abra-a-pasta-com-o-vs-code"&gt;
  &lt;/a&gt;
  Abra a pasta com o VS code:
&lt;/h3&gt;

&lt;p&gt;Clique com o botão direito do mouse em cima da pasta e escolha a opção "Abrir com --&amp;gt; Visual Studio Code"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lF1gsUKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/01-abrir-com-vscode.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lF1gsUKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/01-abrir-com-vscode.png" alt="imagem abrir-com-vscode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crie-os-arquivos-para-fazer-a-importa%C3%A7%C3%A3o-do-conte%C3%BAdo"&gt;
  &lt;/a&gt;
  Crie os arquivos para fazer a importação do conteúdo
&lt;/h3&gt;

&lt;p&gt;O VS code abrirá a pasta do projeto, porém não há ainda nenhum arquivo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---78lq3oM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/03-criar-arquivos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---78lq3oM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/03-criar-arquivos.png" alt="imagem abrir-com-vscode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos então, criar 3 arquivos, referentes às 3 colunas do CodePen contendo o HTML, o CSS e o JAVASCRIPT .&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.html;&lt;/li&gt;
&lt;li&gt;style.css;&lt;/li&gt;
&lt;li&gt;app.js;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feito isso, cole o conteúdo do CodePen correspondente a cada arquivo. &lt;/p&gt;

&lt;p&gt;No CodePen o conteúdo estava separado, já no VS code precisaremos referenciar os conteúdos para que fiquem interligados. Fazemos isso editando o arquivo index.html. &lt;/p&gt;

&lt;p&gt;No arquivo index.html, editamos o &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; e adicionaremos o caminho do arquivo &lt;code&gt;style.css&lt;/code&gt;. No &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; adicionaremos o link referente ao &lt;code&gt;app.js&lt;/code&gt;. Veja a imagem, onde destaquei o código em amarelo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AE_lDXL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/04-editar-html-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AE_lDXL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/04-editar-html-01.png" alt="imagem editar-html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Confira o resultado abrindo o arquivo index.html pelo seu navegador. Aqui no exemplo, usaremos o Google Chrome:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bo2_z4P5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/05-abrir-com-google.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bo2_z4P5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/05-abrir-com-google.png" alt="imagem abrir-com-google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Veja como está abrindo direitinho no Google Chrome:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eoYWgAxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/05-abrir-com-google2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eoYWgAxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/05-abrir-com-google2.png" alt="Visualizando site no Google Chrome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora você poderá praticar também no VS code e depois exportar seus projetos para o CodePen. Fica a seu critério!&lt;/p&gt;

&lt;p&gt;Essa dica também é útil nos casos em que você ficará por um período sem internet, então nada melhor do que ter seus arquivos disponíveis &lt;em&gt;offline&lt;/em&gt; =)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seja-meu-amigo-de-bolso"&gt;
  &lt;/a&gt;
  Seja meu amigo de bolso!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/rrodrigues345"&gt;twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/rrodrigues345/"&gt;instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.alura.com.br/artigos/codepen-o-que-e-e-como-usar"&gt;https://www.alura.com.br/artigos/codepen-o-que-e-e-como-usar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xvkuNF_8Coc"&gt;https://www.youtube.com/watch?v=xvkuNF_8Coc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=j6S1Izj5mqM"&gt;https://www.youtube.com/watch?v=j6S1Izj5mqM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codepen</category>
      <category>vscode</category>
      <category>alura</category>
      <category>imersaodev</category>
    </item>
    <item>
      <title>Sorting Algorithms in 3 Minutes</title>
      <author>mosemet</author>
      <pubDate>Tue, 14 Sep 2021 22:30:19 +0000</pubDate>
      <link>https://dev.to/tebohom/sorting-algorithms-in-3-minutes-3mf3</link>
      <guid>https://dev.to/tebohom/sorting-algorithms-in-3-minutes-3mf3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#bubble-sort-algorithm"&gt;
  &lt;/a&gt;
  Bubble Sort Algorithm
&lt;/h3&gt;

&lt;p&gt;Bubble sort is a simple sorting algorithm that repeatedly steps through the array, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements "bubble" to the top of the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;swapSort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#min-sort-algorithm-custom"&gt;
  &lt;/a&gt;
  Min Sort Algorithm - Custom
&lt;/h3&gt;

&lt;p&gt;Min Sort or Minimum sorting algorithm is a custom algorithm I created when I started studying sorting algorithms. It merely grabs the minimum element within the array, pushes the minimum element into a new array, and also deletes that minimum element from the old array. So it will get a new minimum with each iteration until the new array is sorted. I found it quite handy as it was straightfoward to implement using built-in functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;minSort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#selection-sort-algorithm"&gt;
  &lt;/a&gt;
  Selection Sort Algorithm
&lt;/h3&gt;

&lt;p&gt;Selection sort algorithm divides the input list into two parts: a sorted sub-list of items which is built up from left to right at the front (left) of the list and a sub-list of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sub-list is empty and the unsorted sub-list is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sub-list, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sub-list boundaries one element to the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selectionSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;  
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
          &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#quick-sort-algorithm"&gt;
  &lt;/a&gt;
  Quick Sort Algorithm
&lt;/h3&gt;

&lt;p&gt;Quicksort is an in-place sorting algorithm. It is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort.[4] The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting.&lt;/p&gt;

&lt;p&gt;Animation:&lt;br&gt;
An animation on how the algorithm works can be found &lt;a href="https://en.wikipedia.org/wiki/Quicksort#/media/File:Sorting_quicksort_anim.gif"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Merge Sort Algorithm
&lt;/h3&gt;

&lt;p&gt;In computer science, merge sort (also commonly spelled as mergesort) is an efficient, general-purpose, and comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. &lt;/p&gt;

&lt;p&gt;Conceptually, a merge sort works as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Divide the unsorted list into n sub-lists, each containing one element (a list of one element is considered sorted).&lt;/li&gt;
&lt;li&gt;Repeatedly merge sub-lists to produce new sorted sub-lists until there is only one sub-list remaining. This will be the sorted list.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;merger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mergedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;merger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 14 Sep 2021 22:19:34 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1mki</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1mki</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thoughtful-questions-and-study-groups"&gt;
  &lt;/a&gt;
  Thoughtful questions and study groups
&lt;/h2&gt;

&lt;p&gt;When a new developer joined &lt;a class="mentioned-user" href="https://dev.to/jingjing142"&gt;@jingjing142&lt;/a&gt;
's team, they felt compelled to write down the things that helped &lt;em&gt;them&lt;/em&gt; get started with their developer career — and lucky for us that they did!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jingjing142" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cstQ0ZbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TBjQXFgx--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384604/b4449fc2-17f5-4c9d-9234-66af382ad70c.jpeg" alt="jingjing142"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jingjing142/tips-for-starting-your-first-developer-job-2gfe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Tips for starting your first developer job&lt;/h2&gt;
      &lt;h3&gt;Jing ・ Sep 7 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#quick-typescript-tip"&gt;
  &lt;/a&gt;
  Quick TypeScript tip
&lt;/h2&gt;

&lt;p&gt;"The next time you consider type casting a property with as MyType," writes &lt;a class="mentioned-user" href="https://dev.to/smeijer"&gt;@smeijer&lt;/a&gt;
, "consider writing a type assertion instead." Here's why...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/smeijer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcpMT_fZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BKNo7n4T--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/163536/99565e6b-c04d-4165-985b-16990c8e1dd9.png" alt="smeijer"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/smeijer/typescript-type-assertions-4klf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Typescript Type Assertions &lt;/h2&gt;
      &lt;h3&gt;Stephan Meijer ・ Sep 7 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#assertions&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#we-all-started-out-as-beginners"&gt;
  &lt;/a&gt;
  We all started out as beginners
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/annika_h"&gt;@annika_h&lt;/a&gt;
 shared this soothing and helpful post that will really come in handy if you could use some motivation and advice this week.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/s2engineers" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbQ0yEJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jcJ1yWF7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2029/7ed5faf1-5170-46b9-8906-316c8ffabffe.png" alt="SinnerSchrader Engineers"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3ygjALZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZJMP2QHa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/358905/ebfd9aa5-da74-4ce8-939d-00184da3c192.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/s2engineers/things-you-might-want-to-hear-from-an-experienced-developer-2m9n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Things you might want to hear from an experienced developer &lt;/h2&gt;
      &lt;h3&gt;Annika_H for SinnerSchrader Engineers ・ Sep 8 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#writing-with-your-other-hand"&gt;
  &lt;/a&gt;
  Writing with your other hand
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/jessicacregg"&gt;@jessicacregg&lt;/a&gt;
 explains how switching careers is like becoming ambidextrous — it might feel impossible at first, but when you reframe the tools at your disposal, a world of options opens up!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jessicacregg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tmg8-Po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZFSzR6Uk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/437227/103e69d2-3c3c-4ca7-a1bb-61003d6608b2.jpg" alt="jessicacregg"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jessicacregg/my-experience-as-a-career-switcher-in-tech-4p3j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My Experience as a Career Switcher in Tech&lt;/h2&gt;
      &lt;h3&gt;𝕛𝕖𝕤𝕤𝕚𝕔𝕒 ・ Sep 6 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In this guide, &lt;a class="mentioned-user" href="https://dev.to/dastasoft"&gt;@dastasoft&lt;/a&gt;
 explores what Node/Express is and how it works, shows us how we can build a REST API to store and retrieve data, test endpoints, and upload our application. Super informative!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dastasoft" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---wZs2Esu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k5bXZLGT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/337369/f37a6e53-6f09-40cf-a55a-eb43d7c9e859.jpeg" alt="dastasoft"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dastasoft/how-every-web-developer-can-become-fullstack-with-node-js-11fc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How Every Web Developer Can Become FullStack With Node.js&lt;/h2&gt;
      &lt;h3&gt;dastasoft ・ Sep 10 ・ 25 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#100-days-of-web-security-education"&gt;
  &lt;/a&gt;
  100 days of web security education
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/lindsfonnes"&gt;@lindsfonnes&lt;/a&gt;
 is participating in 100 days of hacking — and will be sharing content about common vulnerabilities and how we as developers can defend against them. In this intro post, Lindsey presents how they view the intersection of web security. and software development.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lindsfonnes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFsQxzQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7GZb4415--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/599646/64ce8a36-7b32-44b3-b901-8949b01613f5.jpeg" alt="lindsfonnes"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lindsfonnes/why-security-is-important-for-every-developer-21d9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Every Web Developer Should Learn About Security&lt;/h2&gt;
      &lt;h3&gt;Lindsey Fonnesbeck ・ Sep 7 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofhacking&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#baseline-scope-and-documentation"&gt;
  &lt;/a&gt;
  Baseline, scope, and documentation
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/erikmelone"&gt;@erikmelone&lt;/a&gt;
 dives into two time-efficient ways to write better documentation.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/erikmelone" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jhTZclY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3VYrRmHp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/694604/abe33402-1bc3-40ca-839f-6545a70a8082.jpeg" alt="erikmelone"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/erikmelone/how-to-write-clear-and-concise-documentation-4mjm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to write clear and concise documentation&lt;/h2&gt;
      &lt;h3&gt;Erik Melone ・ Sep 11 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#culture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>An approach to loosely coupled CloudWatch alarms and contextual alerts</title>
      <author>Lars Jacobsson</author>
      <pubDate>Tue, 14 Sep 2021 21:50:27 +0000</pubDate>
      <link>https://dev.to/mathem/an-approach-to-loosely-coupled-cloudwatch-alarms-and-contextual-alerts-2fh2</link>
      <guid>https://dev.to/mathem/an-approach-to-loosely-coupled-cloudwatch-alarms-and-contextual-alerts-2fh2</guid>
      <description>&lt;p&gt;We have for the past four years used a third party for monitoring and alerting of our large scale serverless ecommerce platform. &lt;/p&gt;

&lt;p&gt;For a number of reasons, we have recently decided to leave this provider in favour of CloudWatch.&lt;/p&gt;

&lt;p&gt;This post will take you through how we used my two favourite AWS services, EventBridge and StepFunctions, to set up error anomaly detection for 100% of our Lambda functions along with context rich Slack alerts in less than two days. This model supports any resource type and alarm type, but for brevity I will focus on error anomaly alarms for Lambda.&lt;/p&gt;

&lt;p&gt;Some understanding of both &lt;a href="https://aws.amazon.com/eventbridge/"&gt;EventBridge&lt;/a&gt; and &lt;a href="https://aws.amazon.com/step-functions/"&gt;StepFunctions&lt;/a&gt; is assumed.&lt;/p&gt;




&lt;p&gt;One thing we lacked with the third party solution was a coupling with CloudFormation stacks. Monitors were created by hand and if something was removed on the AWS side we were left with an orphaned monitor.&lt;/p&gt;

&lt;p&gt;Being obsessed with automation, we needed a fast way to onboard all core resources to being monitored by CloudWatch. As a first approach we build &lt;a href="https://github.com/mhlabs/cfn-alarms"&gt;cfn-alarms&lt;/a&gt;, a CLI tool to generate CloudFormation alarm and alerting boilerplate resources based on the resources in a template, but to roll that out on hundreds of stacks proved inefficient. However, we still wanted to tie the alarms with the lifecycle of the resources they monitor so that when a Lambda function is deleted, the associated alarms are deleted with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loosely-coupled-alarms"&gt;
  &lt;/a&gt;
  Loosely coupled alarms
&lt;/h2&gt;

&lt;p&gt;At first we looked at what we require our teams to monitor when they deploy features to our platform. We came up with a quite small list of services including Lambda errors, SQS queue depth, API 5XX/4XX rate, etc.&lt;/p&gt;

&lt;p&gt;When new resources are created or deleted, CloudTrail emits events to EventBridge's default bus with the configuration of the resource. To create or delete alarms we can simply create rules to match these events and route them to Lambda functions that programmatically spin them up or down:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  LambdaCreation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: lambda/creation.handler
      Events:
        LambdaCreationEvent:
          Type: EventBridgeRule
          Properties:
            InputPath: $.detail.requestParameters
            EventBusName: default
            Pattern:
              source:
                - aws.lambda
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventName:
                  - prefix: CreateFunction
    [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This rule will forward the CloudTrail event's requestParameters to the function handler, which looks like this (truncated for brevity. Refer to the &lt;a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CloudWatch.html#putMetricAlarm-property"&gt;SDK docs&lt;/a&gt; for syntax):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.handler = async (event) =&amp;gt; {
  const functionName = event.functionName;
  const tags = event.tags;

  const threshold = tags["alarm:lambda:errors:anomaly:threshold"] || 2;

  await cloudWatch
    .putAnomalyDetector({
        ... truncated ...
    })
    .promise();

  await cloudWatch
    .putMetricAlarm({
      AlarmName: `auto:${functionName}:lambda:errors:anomaly`,
      AlarmDescription: `Error anomaly detected`,
      Tags: Object.keys(tags).map((p) =&amp;gt; {
        return { Key: p, Value: tags[p] };
      }),
      ... truncated ...
    })
    .promise();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we allow for customisation of certain alarm configurations by using a tagging strategy of &lt;code&gt;alarm:&amp;lt;service&amp;gt;:&amp;lt;metric&amp;gt;:&amp;lt;evaluation type&amp;gt;:&amp;lt;variable&amp;gt;&lt;/code&gt;. This naming is reflected in the &lt;code&gt;AlarmName&lt;/code&gt; property for a semantic coupling. Also note how we relay the tags from the monitored resource onto the alarm resource. This will later be used in the alerting phase when monitors go in and out of alarm.&lt;/p&gt;

&lt;p&gt;The alarm lifecycle event flow is very simple and looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzE8ELK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nkrqclfpsun3nv7n923.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzE8ELK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nkrqclfpsun3nv7n923.png" alt="Alarm creation and deletion diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This approach also allows us to build custom tooling to onboard or reconfigure the entire platform in one go without the need of deploying all stacks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#alerting"&gt;
  &lt;/a&gt;
  Alerting
&lt;/h2&gt;

&lt;p&gt;Getting alerting right is difficult and is a balance act of not skipping valuable alerts, but at the same time keeping it brief and relevant to avoid &lt;a href="https://en.wikipedia.org/wiki/Alarm_fatigue"&gt;alarm fatigue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At Mathem we use Slack across all development teams and we have a requirement to tag all resources with the team name owning the service. We wanted to leverage this to automatically direct alerts to team specific Slack channels. This is why we relay the resource tags on the alarm resource in the code example above.&lt;/p&gt;

&lt;p&gt;When a CloudWatch alarm changes state there's an event put on EventBridge. A state can be one of &lt;code&gt;OK&lt;/code&gt;, &lt;code&gt;ALARM&lt;/code&gt; and &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. We are interested in alerting on &lt;code&gt;ALARM&lt;/code&gt; and communicating recovery on &lt;code&gt;OK&lt;/code&gt;. The aim is to be as brief as possible whilst giving the developers quick access to extended context, such as logs and CloudWatch metrics related to the alarm. For this we'll use a StepFunctions state machine triggered by an EventBridge rule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source:
  - aws.cloudwatch
detail-type:
  - CloudWatch Alarm State Change
detail:
  state:
    value:
      - ALARM
      - OK
resources:
  - prefix: !Sub &amp;gt;-
      arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:auto:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the prefix matching on the alarm ARN. Including &lt;code&gt;auto:&lt;/code&gt; at the end ensures only automatically created alarms are consumed by the state machine.&lt;/p&gt;

&lt;p&gt;The state machine takes different actions depending on the alarm state and resource type the alarm is concerning.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtOjbfCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiqwe10bsqkpew4cafty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtOjbfCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiqwe10bsqkpew4cafty.png" alt="State machine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first state simply fetches the tags from the alarm resource. The tags we are interested in are &lt;code&gt;team&lt;/code&gt;, &lt;code&gt;aws:cloudformation:stack-name&lt;/code&gt; and &lt;code&gt;aws:cloudformation:logical-id&lt;/code&gt;. The &lt;code&gt;team&lt;/code&gt; tag decides where to send the alert and the &lt;code&gt;aws:cloudformation:...&lt;/code&gt; tags are used to make the alert message more human readable.&lt;/p&gt;

&lt;p&gt;Next, we check if it's an alarm or a recovery. If it's an alarm we'll send a message to a Slack channel following &lt;code&gt;#alerts-&amp;lt;teamname&amp;gt;-&amp;lt;environment&amp;gt;&lt;/code&gt;. If the channel doesn't exist, our Slack bot creates it for us.&lt;/p&gt;

&lt;p&gt;The alert is short and to the point. It also provides the developer buttons that instantly takes them to either the alarm page or the failing resource's page in the AWS console. This saves us from wasting time manually clicking our way to the root cause.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o5hws0oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeu6wbc2a3jtpadtuhpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o5hws0oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeu6wbc2a3jtpadtuhpz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the message is sent we pass the output to a parallel state. In one branch we store the message id, or timestamp, we get back from Slack to a DynamoDB table. We'll retrieve this when the alarm has recovered to update the original message.&lt;/p&gt;

&lt;p&gt;The other branch in the parallel state allow us to extend the alarm notification with additional context depending on the resource type we're notifying about. At this point in time we have only implemented extra context for Lambda error alarms for which we fetch the most recent error log and post it as a thread reply along with a link to the log group:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkE47KTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s88kwdjijajq4c3cb1c8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkE47KTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s88kwdjijajq4c3cb1c8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can be extended with for example X-Ray data or whatever might be useful without flooding the channel.&lt;/p&gt;

&lt;p&gt;When an alarm reach an &lt;code&gt;OK&lt;/code&gt; state we update the original alarm instead of posting a new message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oAl8_UQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8i4rv1johelqks5mxc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oAl8_UQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8i4rv1johelqks5mxc5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This post covered an approach using EventBridge and Lambda to onboard a large set of resources to be monitored by CloudWatch Alarms and StepFunctions to create contextual  Slack alerts that can easily be extended to other notification channels.&lt;/p&gt;

&lt;p&gt;You can find a reference project for this post &lt;a href="https://github.com/ljacobsson/cw-alarms-poc"&gt;here&lt;/a&gt;. The state of the project is early days and be mindful of &lt;a href="https://aws.amazon.com/cloudwatch/pricing/"&gt;CloudWatch Alarm costs&lt;/a&gt; before deploying.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>eventbridge</category>
      <category>stepfunctions</category>
    </item>
    <item>
      <title>
HackerRank #38 | SubArray | 🇧🇷 </title>
      <author>Beatriz Maciel</author>
      <pubDate>Tue, 14 Sep 2021 21:03:14 +0000</pubDate>
      <link>https://dev.to/beatrizmaciel/hackerrank-38-subarray-1693</link>
      <guid>https://dev.to/beatrizmaciel/hackerrank-38-subarray-1693</guid>
      <description>&lt;p&gt;&lt;a href="https://www.hackerrank.com/challenges/java-negative-subarray/problem"&gt;Este exercício&lt;/a&gt; me custou algumas muitas horas de resolução. Não tanto pelo enunciado, mas sim pelo desenvolvimento.&lt;br&gt;
O problema pede para que peguemos um &lt;code&gt;int n&lt;/code&gt; que vai delimitar a quantidade de elementos de um array. No exemplo, ele usa &lt;code&gt;n = 5&lt;/code&gt; e devolve um array com 5 elementos, separados por espaço.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
1 -2 4 -5 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O intuito é de fazer subarrays a partir desse array, sendo que cada subarray pode ter 1 ou mais posições. Exemplos de arrays que podem ser formados:&lt;/p&gt;

&lt;p&gt;Subarrays que podem ser formados começando na posição 0:&lt;/p&gt;

&lt;p&gt;[1]&lt;br&gt;
[1, -2]&lt;br&gt;
[1, -2, 4]&lt;br&gt;
[1, -2, 4, -5]&lt;br&gt;
[1, -2, 4, -5, 1]&lt;/p&gt;

&lt;p&gt;Subarrays que podem ser formados começando na posição 2:&lt;/p&gt;

&lt;p&gt;[4]&lt;br&gt;
[4, -5]&lt;br&gt;
[4, -5, 1]&lt;/p&gt;

&lt;p&gt;Subarrays que podem ser formados começando na posição 4:&lt;br&gt;
[1]&lt;/p&gt;

&lt;p&gt;Agora que já sabemos como são feitos os subarrays, queremos saber quanto será o resultado da soma deles. Por exemplo:&lt;/p&gt;

&lt;p&gt;[1]                    = 1&lt;br&gt;
[1, -2]                = -1&lt;br&gt;
[1, -2, 4]             = 3&lt;br&gt;
[1, -2, 4, -5]         = -2&lt;br&gt;
[1, -2, 4, -5, 1]      = -1&lt;/p&gt;

&lt;p&gt;O problema pede para descobrirmos quantos subarrays têm como resultado somas negativas. No caso acima, 3 subarrays têm resultados negativos, mas sabemos que ainda podemos fazer vários outros subarrays e para isso precisamos contabilizar a soma array por array.&lt;/p&gt;

&lt;p&gt;=======&lt;/p&gt;

&lt;p&gt;Para resolver esse problema, segui o passo a passo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Escaneei o &lt;code&gt;int n&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fiz um novo array com &lt;code&gt;n&lt;/code&gt; elementos: &lt;code&gt;int[] array = new int[n]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fiz um for que escaneia os valores para todos os &lt;code&gt;n&lt;/code&gt; elementos
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        Scanner scanner = new Scanner(new File("input.txt"));
        int n = scanner.nextInt();
        int[] array = new int[n];

        for (int i = 0; i &amp;lt; n; i++) {
            array[i] = scanner.nextInt();
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Declarei a variável &lt;code&gt;int sum = 0;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Declarei a variável &lt;code&gt;int negativeSum = 0;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fiz dois &lt;code&gt;for&lt;/code&gt;, um dentro do outro. O primeiro &lt;code&gt;for (j)&lt;/code&gt; serve para fixar a primeira posição do array, enquanto que o segundo &lt;code&gt;for&lt;/code&gt; (z) vai percorrer todos os elementos seguintes.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        for (int j = 0; j &amp;lt; array.length; j++) {
            for (int z = j; z &amp;lt; array.length; z++) {
              Boolean isNegativeSum = negativeSum(j,z, array);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dentro do segundo &lt;code&gt;for&lt;/code&gt;, será necessário passar um método booleano que faz a soma dos elementos dentro do array e confere se são negativos ou positivos (lembrando que queremos contar apenas os arrays que têm resultados negativos!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O método passa &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; e &lt;code&gt;array&lt;/code&gt; e faz mais uma iteração. Fica assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static Boolean negativeSum(int j, int z, int[] array) {

        int sum = 0;
        for (int i = j; i &amp;lt;= z; i++) {
            sum += array[i];
        }

        if (sum &amp;lt; 0)
            return true;

        return false;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por fim, ao retornar para a &lt;code&gt;main&lt;/code&gt; depois de ter passado pelo método booleano, somamos, através da soma &lt;code&gt;isNegativeSum++&lt;/code&gt;. Código final fica assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array = new int[n];

        for (int i = 0; i &amp;lt; n; i++) {
            array[i] = scanner.nextInt();
        }

        int sum = 0;
        int negativeSum = 0;
        for (int j = 0; j &amp;lt; array.length; j++) {
            for (int z = j; z &amp;lt; array.length; z++) {
                Boolean isNegativeSum = negativeSum(j,z, array);

                if (isNegativeSum) {
                    negativeSum++;
                }
            }
        }
        System.out.println(negativeSum);
    }

    public static Boolean negativeSum(int j, int z, int[] array) {

        int sum = 0;
        for (int i = j; i &amp;lt;= z; i++) {
            sum += array[i];
        }

        if (sum &amp;lt; 0)
            return true;

        return false;

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;=======&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/4439595/how-to-create-a-sub-array-from-another-array-in-java"&gt;How to create a subarray from another array&lt;/a&gt; : StackOverFlow&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/java-array-sum-average"&gt;Java array sum average&lt;/a&gt; : Baeldung&lt;/p&gt;

</description>
      <category>java</category>
      <category>subarray</category>
      <category>array</category>
    </item>
    <item>
      <title>AWS User Group Dubai 2021 Container Series Meetups</title>
      <author>Vlad Ionescu</author>
      <pubDate>Tue, 14 Sep 2021 20:37:50 +0000</pubDate>
      <link>https://dev.to/aws-heroes/aws-user-group-dubai-2021-container-series-meetups-49fi</link>
      <guid>https://dev.to/aws-heroes/aws-user-group-dubai-2021-container-series-meetups-49fi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h2&gt;

&lt;p&gt;This series of talks and hands-on workshops around the concept of "&lt;em&gt;AWS cloud-native modern applications&lt;/em&gt;" introduces AWS cloud platform in that light. Starting with the core building blocks of modernizing traditional applications, and how to capitalize on AWS services and capabilities to build a better resilient, reliable application with cloud-native design in mind.&lt;/p&gt;

&lt;p&gt;It's 2021. There is a need to find ways to speed up the process of deploying, scaling, and automating our applications, also enable developers and operations teams "&lt;em&gt;DevOps&lt;/em&gt;" to collaborate effectively, work efficiently, save resources, and solve the matrix from Hell problems. The magic word here is Containers. This is a pragmatic hands-on series of workshops to introduce members to AWS container workloads focusing on the fundamentals and where to start, AWS Containers 101 workshop.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conception &amp;amp; leadership: AWS Container Hero &lt;strong&gt;Walid Shaari&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Organizer: AWS Community Hero &lt;strong&gt;Anas Khattar&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Outreach: AWS Community Hero &lt;strong&gt;Ahmed Samir&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Speakers:

&lt;ul&gt;
&lt;li&gt;AWS Container Hero &lt;strong&gt;Walid Shaari&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;AWS Container Hero &lt;strong&gt;Vlad Ionescu&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow AWS UG Dubai on Twitter: &lt;a href="https://twitter.com/awsdubai"&gt;@awsdubai&lt;/a&gt; and &lt;a href="https://twitter.com/AWSomeMENA"&gt;@AWSomeMENA&lt;/a&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#intro-to-containers-101"&gt;
  &lt;/a&gt;
  Intro to Containers 101
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlsme5iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07rqf2tjsg5yefrb5up6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlsme5iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07rqf2tjsg5yefrb5up6.png" alt="Cover image for the first talk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first talk of this new series, we will introduce the format for this multi-talk series. After that, we’ll discuss containers in an abstract way. Why do we use containers? What are some different ways of running containers?&lt;/p&gt;

&lt;p&gt;Agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intro to this series: speakers, format, sponsors&lt;/li&gt;
&lt;li&gt;What are some ideal use cases for containers?&lt;/li&gt;
&lt;li&gt;How can we run containers in production?&lt;/li&gt;
&lt;li&gt;Open discussions, Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Containers, Docker, OCI&lt;/li&gt;
&lt;li&gt;AWS ECS, Amazon EKS, Kubernetes, Lambda Containers, Serverless&lt;/li&gt;
&lt;li&gt;Immutable Infrastructure, Virtual Machines, VMs&lt;/li&gt;
&lt;li&gt;Gitpod, GitHub Codespaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📆 Date: Wednesday, Sept. 15, 2021, at 8:30 PM UTC +4&lt;/p&gt;

&lt;p&gt;🌍 Venue: online, see all the details at &lt;a href="https://www.meetup.com/AWS-Dubai/events/280711543/"&gt;AWS UG Dubai Meetup #8 (virtual): Part 1 - Intro to Containers 101&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#building-containers-102"&gt;
  &lt;/a&gt;
  Building Containers 102
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ivBjqAOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo0xm708vdyg3q206zdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ivBjqAOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo0xm708vdyg3q206zdj.png" alt="Cover image for the second talk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this session we will discuss everything about building containers. What’s a container image? how do we build a container image? and the definition of OCI will be covered. We will end this talk with some best practices, and we will build up some excitement for the workshop!&lt;/p&gt;

&lt;p&gt;Agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container workflows&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Dockerfiles&lt;/li&gt;
&lt;li&gt;Building an image&lt;/li&gt;
&lt;li&gt;Tagging an image&lt;/li&gt;
&lt;li&gt;Running a container from an image&lt;/li&gt;
&lt;li&gt;Best practices and helpful tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dockerfiles&lt;/li&gt;
&lt;li&gt;Docker, OCI, Open Container Initiative&lt;/li&gt;
&lt;li&gt;GitHub Actions, CircleCI&lt;/li&gt;
&lt;li&gt;AWS ECR, Github Container Registry, Dockerhub, Quay&lt;/li&gt;
&lt;li&gt;Hadolint, Snyk, Dependabot, Dive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📆 Date: Tuesday, Sept. 21, 2021, at 8:30 PM UTC +4&lt;/p&gt;

&lt;p&gt;🌍 Venue: online, see all the details at &lt;a href="https://www.meetup.com/AWS-Dubai/events/280722294/"&gt;AWS UG Dubai Meetup #9 (virtual): Part 2 - Building Containers 102&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#building-containers-102-lab"&gt;
  &lt;/a&gt;
  Building Containers 102 Lab
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jy2_2HDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79jq2bko622tqt8rwpuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jy2_2HDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79jq2bko622tqt8rwpuv.png" alt="Cover image for the workshop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this hands-on lab you will learn how to build containers for different applications. After a short introduction, each student will open a pre-configured Gitpod workspace and build container images for 3 applications: one Go app, one Python app, and a React app! Once an image is built, we will push the image to Amazon Elastic Container Registry. For extra credit, we will also inspect the image we built. No previous experience with Docker, Go, Python, React, or Javascript is required!&lt;/p&gt;

&lt;p&gt;This will be a live and guided workshop, leveraging Zoom, Slack, and Gitpod.&lt;/p&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub account&lt;/li&gt;
&lt;li&gt;Gitpod account (can be created instantly)&lt;/li&gt;
&lt;li&gt;An active AWS account (if you don’t have an AWS account, you can do the first half of the workshop)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS, ECR, Amazon Elastic Container Registry, Github Container Registry, Dockerhub, Quay&lt;/li&gt;
&lt;li&gt;Workshop, Interactive, Live, Guided&lt;/li&gt;
&lt;li&gt;Docker, OCI, Containerd, Buildkit, GitHub Actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📆 Date: Wednesday, Sept. 22, 2021, at 8:30 PM UTC +4&lt;/p&gt;

&lt;p&gt;🌍 Venue: online, see all the details at &lt;a href="https://www.meetup.com/AWS-Dubai/events/280722765/"&gt;AWS UG Dubai Meetup #10 (virtual): Part 3 - Building Containers Lab&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#application-modernization-with-amazon-eks"&gt;
  &lt;/a&gt;
  Application Modernization with Amazon EKS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tl6s65IN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq0897hj7ivyuf0hstgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tl6s65IN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq0897hj7ivyuf0hstgt.png" alt="Cover image for the fourth talk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this session, we will explore the popular workload manager and scheduler Kubernetes. Amazon managed Kubernetes service, Elastic Container Service for Kubernetes (Amazon EKS)  takes care of the heavy-lifting and lets one focus on managing the containerized workloads. EKS, however, still gives you the flexibility and choice where to run, and how to efficiently run your data-plane that hosts your workloads. In this session, we cover what you need to know to get your application up and running with Kubernetes on AWS. We show how Amazon EKS makes deploying Kubernetes on AWS simple and scalable.&lt;/p&gt;

&lt;p&gt;Agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review the general Kubernetes architecture and relate to EKS&lt;/li&gt;
&lt;li&gt;How to set up and provision your Kubernetes cluster using console and eksctl.&lt;/li&gt;
&lt;li&gt;Discuss the important abstractions that developers use to map their traditional application into any kubernetes platform.&lt;/li&gt;
&lt;li&gt;How to deploy software efficiently, while sustaining reliable and scalable applications. &lt;/li&gt;
&lt;li&gt;Deploy your first microservices on EKS&lt;/li&gt;
&lt;li&gt;EKS possible development deployment workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EKS-Distro, EKS-Anywhere&lt;/li&gt;
&lt;li&gt;Fargate, data plane&lt;/li&gt;
&lt;li&gt;YAML, Helm, Gitops, Operators&lt;/li&gt;
&lt;li&gt;Pod, Deployment, Service, ConfigMap, Secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📆 Date: Tuesday, Sept. 28, 2021, at 8:30 PM UTC +4&lt;/p&gt;

&lt;p&gt;🌍 Venue: online, see all the details at &lt;a href="https://www.meetup.com/AWS-Dubai/events/280723703/"&gt;AWS UG Dubai Meetup #11: Part 4 - Application Modernization with Amazon EKS&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
