<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Programming Language For Cyber Security</title>
      <author>gaidu</author>
      <pubDate>Thu, 05 Aug 2021 14:54:18 +0000</pubDate>
      <link>https://dev.to/gaidu/best-programming-language-for-cyber-security-2p5g</link>
      <guid>https://dev.to/gaidu/best-programming-language-for-cyber-security-2p5g</guid>
      <description>&lt;p&gt;&lt;span&gt;Cybersecurity&lt;/span&gt;¬†is more popular than ever.¬†Cyber security is more important than ever, thanks to the highly consequential 2020 data breach and massive cyber and IT skill demand forecasts for the next ten years.¬†Many of us wouldn‚Äôt have heard this word ten years ago.&lt;/p&gt;
&lt;p&gt;It should come as no surprise that cyber security is a popular topic. There‚Äôs also an increasing desire to work in the business. What are the most popular cyber-security programming languages?¬†Let‚Äôs see.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/best-programming-language-to-learn-for-cyber-security/"&gt;Best Programming Language To Learn For Cyber Security&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to create good patreon benefits</title>
      <author>Beatriz Oliveira</author>
      <pubDate>Thu, 05 Aug 2021 14:14:34 +0000</pubDate>
      <link>https://dev.to/beatrizoliveira/how-to-create-good-patreon-benefits-36n8</link>
      <guid>https://dev.to/beatrizoliveira/how-to-create-good-patreon-benefits-36n8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#this-case-i-will-add-my-exclusive-discord-server-for-new-patreons"&gt;
  &lt;/a&gt;
  This case I will add my exclusive Discord Server for new Patreons!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Have a Discord Server created.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Log in to Patreon and navigate to your &lt;a href="https://www.patreon.com/edit/about"&gt;&lt;strong&gt;Creator Page Editor&lt;/strong&gt;&lt;/a&gt;. From here select the Tiers link of your editor. From here select the &lt;strong&gt;Tiers link&lt;/strong&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uF7yAYaz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gkhd7yr6hy4e1jg63h9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uF7yAYaz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gkhd7yr6hy4e1jg63h9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 3:&lt;/strong&gt; Click the &lt;strong&gt;Edit tier&lt;/strong&gt; button on a Tier you‚Äôd like to assign a Discord role(s) and click into the &lt;strong&gt;Advanced&lt;/strong&gt; button. Scroll until you find the &lt;strong&gt;Connect to Discord button&lt;/strong&gt;.&lt;br&gt;
1:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJDIK3E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aejfio9na41rjzyjl1xw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJDIK3E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aejfio9na41rjzyjl1xw.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
2:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E00AaAC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8k4ey9jdzgjliyhdu8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E00AaAC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8k4ey9jdzgjliyhdu8q.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
3:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkzIjed4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atspsjizlycm8i5px9uk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkzIjed4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atspsjizlycm8i5px9uk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Click the &lt;strong&gt;Connect to Discord&lt;/strong&gt; button and log in to your Discord account via the pop-up window that populates.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NdzsLyNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah3zc1sw0am80envxz8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NdzsLyNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah3zc1sw0am80envxz8i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Head to the Server Settings window and navigate to the Roles tab. You‚Äôll notice a new ‚ÄúPatreon‚Äù role is in your server, go ahead and rename the role ‚ÄúPatreon Bot‚Äù. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbtIGTR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y24h92sdezvozu2jm48t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbtIGTR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y24h92sdezvozu2jm48t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Server management tips: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rename your roles so that they match your Tier names&lt;/li&gt;
&lt;li&gt;Give your roles a distinguishing color &lt;/li&gt;
&lt;li&gt;Enable the Display role members separately from online members setting, this will help you distinguish Patrons from other server members &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Give the Patreon Bot the required permissions&lt;br&gt;
Make sure that the Patreon Bot is above the roles you‚Äôve just created for your Tiers. If you have existing roles you‚Äôd like to assign to patrons, be sure to drag the Patreon Bot above those roles. If the Patreon Bot is not above these roles, it will not assign that role to patrons. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Do not deselect or add any permissions to the Patreon Bot! It has all of the permissions it needs, and adding any additional permissions may break the integration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2pRhpExH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw6tj4v9kbf37oqz4r83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2pRhpExH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw6tj4v9kbf37oqz4r83.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:&lt;/strong&gt; Click the &lt;strong&gt;Edit tier&lt;/strong&gt; button on a Tier you‚Äôd like to assign a Discord role(s), and click into the &lt;strong&gt;Advanced button&lt;/strong&gt;. Scroll down and select &lt;strong&gt;Gives patrons access to selected Discord roles&lt;/strong&gt;. A drop-down menu will populate where you can select a role. &lt;/p&gt;

&lt;p&gt;You can select multiple roles. This useful if higher tiers are meant to receive benefit that lower tiers do. When you‚Äôve selected your role(s) click &lt;strong&gt;Save tier button&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjT0GuUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yzj09xpyjxud0qj5q7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjT0GuUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yzj09xpyjxud0qj5q7c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#and-done-now-you-can-create-better-benefits-for-your-patreons"&gt;
  &lt;/a&gt;
  And done, now you can create better benefits for your patreons üéâ
&lt;/h5&gt;

&lt;h4&gt;
  &lt;a href="#enjoy-and-support-me-in-patreon-i-create-several-things-related-to-open-source"&gt;
  &lt;/a&gt;
  Enjoy and support me in &lt;a href="https://www.patreon.com/beatrizoliveira"&gt;&lt;strong&gt;Patreon&lt;/strong&gt;&lt;/a&gt;, I create several things related to open sourceüòÑ
&lt;/h4&gt;

</description>
      <category>patreon</category>
    </item>
    <item>
      <title>Distributed Tracing: Build vs Buy</title>
      <author>Michael Haberman</author>
      <pubDate>Thu, 05 Aug 2021 13:57:12 +0000</pubDate>
      <link>https://dev.to/aspecto/distributed-tracing-build-vs-buy-5c8k</link>
      <guid>https://dev.to/aspecto/distributed-tracing-build-vs-buy-5c8k</guid>
      <description>&lt;p&gt;As microservices observability becomes more and more of a challenge for engineers, companies are turning to distributed tracing solutions.&lt;/p&gt;

&lt;p&gt;Now, they have to decide whether to buy or to build their distributed tracing infrastructure. While building a solution from scratch might sound compelling, and can even be supported with open source &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; and &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;, buying solutions provide more features and easier usage.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how the two compare and when you should choose each one. But first, let‚Äôs remind ourselves about what distributed tracing is.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is Distributed Tracing?
&lt;/h1&gt;

&lt;p&gt;Logging is a difficult and time-consuming practice, which doesn‚Äôt always provide the relevant information for solving performance issues and regressions. Traces complement logs, by presenting the relationships between services and components and tracking requests across them. It‚Äôs no surprise, then, that many developers are adding tracing to their workflows, and engineering departments are using it to reduce their MTTR.&lt;/p&gt;

&lt;p&gt;But we live in a world of microservices, and we need tracing to adapt.&lt;/p&gt;

&lt;p&gt;That‚Äôs where distributed tracing comes in. Distributed tracing is tracing that is suited for microservices. It provides observability into the microservices architecture. For example, it shows why failed integrations between components occur. These insights are used for faster troubleshooting and accelerating time-to-market.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read more about distributed tracing, its advantages, and when to use it &lt;a href="https://www.aspecto.io/blog/logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=distributed-tracing-build-vs-buy"&gt;in this blog post&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-vs-buying-distributed-tracing"&gt;
  &lt;/a&gt;
  Building vs. Buying Distributed Tracing
&lt;/h1&gt;

&lt;p&gt;So you‚Äôve determined your organization needs a distributed tracing solution. Congratulations! Now you need to decide whether you‚Äôre going to build one or to buy one.&lt;/p&gt;

&lt;p&gt;Building a solution means the product is built internally, from the ground up. This includes researching the problem, designing the tracing solution with open source solutions like &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt;, using &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; to instrument, gather and analyze data, allocating resources to build it, and continuously maintaining it.&lt;/p&gt;

&lt;p&gt;One of the most famous examples of building an internal distributed testing solution is Netflix, whose developers wrote a &lt;a href="https://netflixtechblog.com/building-netflixs-distributed-tracing-infrastructure-bb856c319304"&gt;blog post&lt;/a&gt; about the progress they‚Äôve made four years after they started building it.&lt;/p&gt;

&lt;p&gt;But even if you‚Äôre not Netflix, you can probably still build your own basic tracing solution.&lt;/p&gt;

&lt;p&gt;What if you need a tracing solution that can scale and provide lots of added value? Then, you might want to look into buying a solution.&lt;/p&gt;

&lt;p&gt;This means purchasing a ready-made out-of-the-box distributed tracing solution. You can either choose a managed solution, i.e a solution that manages open source (like Jaeger) for you. Or, an unmanaged solution, i.e a distributed tracing solution from a vendor, with unique features and capabilities. &lt;/p&gt;

&lt;p&gt;Whichever you choose, buying a solution enables immediate implementation, observability, and insights. &lt;/p&gt;

&lt;p&gt;Let‚Äôs dive deeper into how these two types of solutions compare.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-vs-buying-distributed-tracing-a-comparison"&gt;
  &lt;/a&gt;
  Building vs. Buying Distributed Tracing ‚Äì a Comparison
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-maintenance-and-scalability"&gt;
  &lt;/a&gt;
  1. Maintenance and Scalability
&lt;/h2&gt;

&lt;p&gt;You‚Äôre on the quest for data. Luckily, you‚Äôve come to the right place. However, maintaining and storing all that data isn‚Äôt always easy, or easy on your resources. Scaling your tracing operation is another huge challenge.&lt;/p&gt;

&lt;p&gt;Ingesting and storing large amounts of data from many services requires a reliable infrastructure. This infrastructure should enable scaling the amount of traces collected, processing them, and storing them in a database like &lt;a href="https://www.elastic.co/"&gt;ElasticSearch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Building a solution requires constant operation and maintenance as you scale your data collections. Buying a solution ensures your data is scalable and available, no matter the load or requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-features-and-capabilities"&gt;
  &lt;/a&gt;
  2. Features and Capabilities
&lt;/h2&gt;

&lt;p&gt;Built and bought solutions offer different features and capabilities. With built solutions, you can design the system according to your specific needs and requirements. On the other hand, buying solutions provide out-of-the-box capabilities that are meant to give you value beyond your basic needs. There is usually a wide variety, and they are built on industry best practices and requirements from multiple companies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cost"&gt;
  &lt;/a&gt;
  3. Cost
&lt;/h2&gt;

&lt;p&gt;Built solutions require many resources for configuring, designing, managing, maintaining, and operating. While this might seem more cost-effective, the truth is that when you build your own, you know where you start ‚Äì but not where you‚Äôll end up. You have to factor in the time developers need to learn and build the solution, as well as the cloud resources cost.&lt;/p&gt;

&lt;p&gt;Buying a solution, on the other hand, has a fixed cost. The price might seem higher, but everything is taken care of. You can also always start out with a free trial or free tier to make sure the solution answers your needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-security"&gt;
  &lt;/a&gt;
  4. Security
&lt;/h2&gt;

&lt;p&gt;Security is shifting left, making it more and more the responsibility of developers. When building a distributed tracing solution, you also have to take security controls into consideration. Data privacy, reducing the attack surface and mitigating vulnerabilities have to be designed. Purchased solutions, on the other hand, do the security heavy lifting. They take security concerns off your plate and offer it out-of-the-box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-business-focus"&gt;
  &lt;/a&gt;
  5. Business Focus
&lt;/h2&gt;

&lt;p&gt;Sure, your super developer powers can build anything. But should they? When developers build a distributed tracing solution internally, they‚Äôre diverted from the core business. Why not let other developers, who work at companies where distributed tracing is the core business, build the solution for you?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-democratization-and-accessibility"&gt;
  &lt;/a&gt;
  6. Democratization and Accessibility
&lt;/h2&gt;

&lt;p&gt;When distributed tracing solutions are built internally, the engineers who built them control the knowledge and accessibility to the product. Buying a solution enables more democratization since access and training is available for all.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#buy-vs-build-distributed-tracing-comparison-table"&gt;
  &lt;/a&gt;
  Buy vs. Build Distributed Tracing Comparison Table
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cF_1Ss8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsotxu1tt5fpvf2yq5zc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cF_1Ss8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsotxu1tt5fpvf2yq5zc.png" alt="Build vs. Built Distributed Tracing Comparison Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#distributed-tracing-solutions"&gt;
  &lt;/a&gt;
  Distributed Tracing Solutions
&lt;/h1&gt;

&lt;p&gt;Unless you are a large company with available resources and unique architecture, or an individual looking to test the water of distributed tracing (in which case maybe a hybrid model would also work for you), we believe buying is the way to go. &lt;/p&gt;

&lt;p&gt;Here are some of the tools you can choose from for both building and buying a distributed tracing solution:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-open-source-jaeger"&gt;
  &lt;/a&gt;
  1. Open Source: Jaeger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; is an open-source, distributed tracing tool that you can use as the basis for building your own distributed tracing solution. You can use Jaeger for transaction monitoring, latency optimization, root cause analysis, dependency analysis, and context propagation. Jaeger can run on any infrastructure and leverage OpenTelemetry regardless of the code language.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---66FObX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk56upjq0xbsoyff4uan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---66FObX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk56upjq0xbsoyff4uan.png" alt="Jaeger UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-managed-distributed-tracing-solution"&gt;
  &lt;/a&gt;
  2. Managed Distributed Tracing Solution
&lt;/h2&gt;

&lt;p&gt;If you‚Äôre into Jaeger but not into getting your hands dirty with it, managed solutions will bring the hand sanitizer and do it for you. With such solutions, you get Jaeger‚Äôs capabilities, but the vendor packs them up for you in dashboards that already provide you with insights and observability.&lt;/p&gt;

&lt;p&gt;It‚Äôs also easier to get started than having to download Jaeger and building your infrastructure from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-aspecto"&gt;
  &lt;/a&gt;
  3. Aspecto
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=distributed-tracing-build-vs-buy"&gt;Aspecto&lt;/a&gt; is a distributed tracing platform with plenty of new features and a unique UI. Aspecto helps developers find, fix, and prevent distributed application issues across the entire development cycle.&lt;/p&gt;

&lt;p&gt;It‚Äôs the Chrome DevTools for your distributed applications.&lt;/p&gt;

&lt;p&gt;OpenTelemetry based, Aspecto allows developers to prevent issues before they reach production by implementing telemetry data that learns the system, then compares what they do locally to the production, staging, or other locals baseline data. You can easily &lt;a href="https://docs.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=distributed-tracing-build-vs-buy"&gt;install&lt;/a&gt; Aspecto, for free, with a one-liner SDK, or give the &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=distributed-tracing-build-vs-buy"&gt;Live Playground&lt;/a&gt; a spin.&lt;/p&gt;

&lt;p&gt;And if you‚Äôre already using the OpenTelemetry collector, you can use it to export traces to the Aspecto OTEL collector.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIM2E51n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y86txjdcuynnr46vsvfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIM2E51n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y86txjdcuynnr46vsvfh.png" alt="Aspecto UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Building your distributed tracing solution might sound like a nice challenge. Unless you‚Äôre a huge company with endless resources and unique architecture ‚Äì you might be embarking on a very costly and ineffective adventure. &lt;/p&gt;

&lt;p&gt;Buying a tracing solution offers you all the capabilities and observability you need right when you get started. You can buy Jaeger-based managed solutions or get more feedback and visibility with tons of additional features through solutions like Aspecto. &lt;/p&gt;

&lt;p&gt;We recommend getting started with distributed tracing as soon as you can, no matter your choice. Make your microservices management and troubleshooting a lot more effective with tracing.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>webdev</category>
      <category>architecture</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>How to cut a cake with various tech</title>
      <author>Siddharth</author>
      <pubDate>Thu, 05 Aug 2021 13:47:10 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/how-to-cut-a-cake-with-various-tech-262m</link>
      <guid>https://dev.to/siddharthshyniben/how-to-cut-a-cake-with-various-tech-262m</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You build a robust, accurate user experience to cut cake. But then you realize that knifes are not supported in most browsers.&lt;/li&gt;
&lt;li&gt;You cut yourself.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You try to cut the cake, but by the time you position the knife, the cake has moved into your face. You realize that you need Adobe Flash to cut cake.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTML&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You cut a triangle in your cake with nothing more than a small penknife, but you realize that to make it look convincing, you need to be using Dreamweaver.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Git&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;It is easy to cut cake with Git, but also easy to revert to a previous cake and merge it with your current frosting.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~$ ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cake.c cake.h cake.o frosting.c frosting.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~$ rm * .o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm: .o: No such file or directory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~$ ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You don't remember any syntax and spend 5 hours reading man pages. Then you give up and cut the computer&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can't actually cut the cake; all you can do is describe the knife in painful detail.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cake and knife are available, but they use callbacks. You install packages for them, but the knife is too heavy. Frustrated, you rewrite Node.js.&lt;/li&gt;
&lt;li&gt;You write the knife, using 13 other libraries. But this bloats the knife, and you can't lift it. You get frustrated and kick the cake and cut it yourself. Considering this a success, you blog about your experience of being able to cut cake without even using a knife!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You spend hours learning Angular, and when you are done you are so happy you forget about cutting cake.&lt;/li&gt;
&lt;li&gt;You absolutely mutilate the cake&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cut cake. You are now an expert on JavaScript.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Svelte&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since the only instruction is to cut cake, the Svelte compiler hyperoptimizes your code so that it only shaves off a small part of the cake&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You manage to get rid of &lt;code&gt;this&lt;/code&gt;, which was stopping you from cutting cake, but then you face a closure.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Vim&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cut cake, but you can't quit.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"cake"&lt;/code&gt; is falsy, so you can't cut it&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;VSCode&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You type cake, but VSCode autocompletes to &lt;code&gt;hasUncaughtExceptionCaptureCallback&lt;/code&gt;. The next time you try, it autocompletes to &lt;code&gt;REGEX_SPECIAL_CHAR_BACKREF&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Assembly&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You try to cut cake, but then you realize you need to invent the cake, the knife, the oven needed to cook cake, and your hand&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;BASIC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POINT KNIFE at CAKE, then MOVE DOWN 45px, then MOVE UP 45px, then ROTATE KNIFE.HANDLE, then MOVE DOWN 45px, then MOVE UP 45px.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>jokes</category>
    </item>
    <item>
      <title>A Complete Guide to Buffers in Node.js</title>
      <author>Ruan Martinelli</author>
      <pubDate>Thu, 05 Aug 2021 13:22:20 +0000</pubDate>
      <link>https://dev.to/ruanmartinelli/a-complete-guide-to-buffers-in-node-js-1150</link>
      <guid>https://dev.to/ruanmartinelli/a-complete-guide-to-buffers-in-node-js-1150</guid>
      <description>&lt;p&gt;In Node.js, buffers are a special type of object that can store raw binary data. A buffer represents a chunk of memory - typically RAM - allocated in your computer. Once set, the size of a buffer cannot be changed.&lt;/p&gt;

&lt;p&gt;A buffer stores &lt;strong&gt;bytes&lt;/strong&gt;. A byte is a sequence of eight &lt;strong&gt;bits&lt;/strong&gt;. Bits are the most basic unit of storage on your computer, they can hold the value of either 0 or 1.&lt;/p&gt;

&lt;p&gt;Node.js exposes the &lt;code&gt;Buffer&lt;/code&gt; class in the global scope (you don't need to import or require it like other modules). With this API, you get a series of functions and abstractions to manipulate raw binaries.&lt;/p&gt;

&lt;p&gt;A buffer in Node.js looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Buffer&lt;/span&gt; &lt;span class="na"&gt;61&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt; &lt;span class="na"&gt;71&lt;/span&gt; &lt;span class="na"&gt;3b&lt;/span&gt; &lt;span class="na"&gt;65&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt; &lt;span class="na"&gt;31&lt;/span&gt; &lt;span class="na"&gt;2f&lt;/span&gt; &lt;span class="na"&gt;61&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, you can see 10 pairs of letters and numbers. Each pair represents a byte stored in the buffer. The total size of this particular buffer is 10.&lt;/p&gt;

&lt;p&gt;You might be asking yourself: "if these are bits and bytes, where are the 0s and 1s?"&lt;/p&gt;

&lt;p&gt;That's because Node.js displays bytes using the &lt;strong&gt;hexadecimal&lt;/strong&gt; system. This way, every byte can be represented using just two digits - a pair of numbers and letters from 0-9 and "a" to "f".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why buffers?&lt;/strong&gt; Before buffers were introduced, there was no easy way of handling binary data in JavaScript. You would have to resort to primitives such as strings, which are slower and have no specialized tools to handle binaries. Buffers were created to provide a proper set of APIs to manipulate bits and bytes in an easy and performant way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-buffers"&gt;
  &lt;/a&gt;
  Working with buffers
&lt;/h2&gt;

&lt;p&gt;Let's see some of the things we can do with buffers.&lt;/p&gt;

&lt;p&gt;You will notice that handling buffers is a bit similar to the way we handle arrays in JavaScript. For example, you can &lt;code&gt;.slice()&lt;/code&gt;, &lt;code&gt;.concat()&lt;/code&gt; and get the &lt;code&gt;.length&lt;/code&gt; of a buffer. Buffers are also iterable and can be used within constructs such as &lt;code&gt;for-of&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you're following the examples on your computer, keep in mind that the &lt;code&gt;Buffer&lt;/code&gt; class is exposed globally. You don't need to import or require it as a separate module.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-buffers"&gt;
  &lt;/a&gt;
  Creating buffers
&lt;/h3&gt;

&lt;p&gt;Buffers are created using these three methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buffer.from()&lt;/li&gt;
&lt;li&gt;Buffer.alloc()&lt;/li&gt;
&lt;li&gt;Buffer.allocUnsafe()&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In the past, buffers were created using the Buffer class constructor (e.g., &lt;code&gt;new Buffer()&lt;/code&gt;). This syntax is now deprecated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Buffer.from()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method is the most straightforward way to create a buffer. It accepts a string, an array, an &lt;code&gt;ArrayBuffer&lt;/code&gt;, or another buffer instance. Depending on which params you pass, &lt;code&gt;Buffer.from()&lt;/code&gt; will create a buffer in a slightly different way.&lt;/p&gt;

&lt;p&gt;When passing a string, a new buffer object will be created containing that string. By default, it will parse your input using &lt;strong&gt;utf-8&lt;/strong&gt; as the enconding (see &lt;a href="https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings"&gt;here&lt;/a&gt; all enconding types supported):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a new buffer with the string 'heya!'&lt;/span&gt;
&lt;span class="c1"&gt;// If no enconding is passed in the second parameter, defaults to 'utf-8'.&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;heya!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates the same buffer as the above, but passes 'heya!' as a hex encoded string&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6865796121&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also pass an array of bytes to &lt;code&gt;Buffer.from()&lt;/code&gt;. Here I am passing the same string as before (&lt;em&gt;"heya!"&lt;/em&gt;), but represented as an array of hexadecimal characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Also writes 'heya!' to the buffer, but passes a array of bytes&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mh"&gt;0x68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x21&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you're not familar with the &lt;code&gt;0xNN&lt;/code&gt; syntax, it means that the characters after &lt;code&gt;0x&lt;/code&gt; should be interpreted as hexadecimal values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When passing a buffer to &lt;code&gt;Buffer.from()&lt;/code&gt;, Node.js will copy that buffer into the current one. The new buffer is allocated in a different area of memory, so you can modify it independently:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates a buffer from `buffer1`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Modify `buffer2`&lt;/span&gt;
&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6d is the letter "m"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; "cars"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; "mars"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These should cover most of the cases where you use &lt;code&gt;Buffer.from()&lt;/code&gt;. Refer to the &lt;a href="https://nodejs.org/api/buffer.html"&gt;docs&lt;/a&gt; for other ways to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buffer.alloc()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.alloc()&lt;/code&gt; method is useful when you want to create empty buffers, without necessarily filling them with data. By default, it accepts a number and returns a buffer of that given size filled with 0s:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 00 00 00 00 00 00&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can later on fill the buffer with any data you want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a buffer of size 1 filled with 0s (&amp;lt;Buffer 00&amp;gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Fill the first (and only) position with content&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x78&lt;/span&gt; &lt;span class="c1"&gt;// 0x78 is the letter "x"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'x'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also fill the buffer with other content than 0 and a given enconding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 78 78 78 78 78 78&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Buffer.allocUnsafe()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;.allocUnsafe()&lt;/code&gt; , the process of sanitizing and filling the buffer with 0s is skipped. The buffer will be allocated in a area of memory that may contain old data (that's where the "unsafe" part comes from). For example, the following code will most likely always print some random pieces of data every time you run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Allocates a random area of memory with size 10000&lt;/span&gt;
&lt;span class="c1"&gt;// Does not sanitizes it (fill with 0) so it may contain old data&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allocUnsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Prints loads of random data&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A good use case for &lt;code&gt;.allocUnsafe()&lt;/code&gt; is when you are copying a buffer that was safely allocated. Since you will completely overwrite the copied buffer, all the old bytes will be replaced by predictable data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a buffer from a string&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi, I am a safely allocated buffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates a new empty buffer with `allocUnsafe` of the same&lt;/span&gt;
&lt;span class="c1"&gt;// length as the previous buffer. It will be initally filled with old data.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffCopy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allocUnsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Copies the original buffer into the new, unsafe buffer.&lt;/span&gt;
&lt;span class="c1"&gt;// Old data will be overwritten with the bytes&lt;/span&gt;
&lt;span class="c1"&gt;// from 'hi, I am a safely allocated buffer' string.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffCopy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffCopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'hi, I am a safely allocated buffer'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In general, &lt;code&gt;.allocUnsafe()&lt;/code&gt; should only be used if you have a good reason (e.g., performance optimizations). Whenever using it, make sure you never return the allocated buffer without completely filling it with new data, otherwise you could be potentially leaking sensitive information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-buffers"&gt;
  &lt;/a&gt;
  Writing to buffers
&lt;/h3&gt;

&lt;p&gt;The way to write data into buffers is using &lt;code&gt;Buffer.write()&lt;/code&gt;. By default, it will write a string encoded in &lt;code&gt;utf-8&lt;/code&gt; with no offset (starts writing from the first position of the buffer). It returns a number, which is the number of bytes that were written in the buffer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 9 (number of bytes written)&lt;/span&gt;

&lt;span class="c1"&gt;// If you write more bytes than the buffer supports,&lt;/span&gt;
&lt;span class="c1"&gt;// your data will truncated to fit the buffer.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey christopher&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// retuns 9 (number of bytes written)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 'hey chris'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that not all characters ocuppy a single byte in the buffer (!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The copyright symbol ('¬©') occupies two bytes,&lt;/span&gt;
&lt;span class="c1"&gt;// so the following operation will completely fill the buffer.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;¬©&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 2&lt;/span&gt;

&lt;span class="c1"&gt;// If the buffer is too small to store the character, it will not write it.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tinyBuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tinyBuff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;¬©&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 0 (nothing was written)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tinyBuff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 00&amp;gt; (empty buffer)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also notice that 2 is &lt;strong&gt;not&lt;/strong&gt; the highest number of bytes a character can have. For example, the &lt;code&gt;utf-8&lt;/code&gt; enconding type supports characters with up to 4 bytes. Since you cannot modify the size of the buffer, you always need to be mindful of what you are writing and how much space it will take (size of the buffer vs. size of your content).&lt;/p&gt;

&lt;p&gt;Another way to write into buffers is throguh an array-like syntax, where you add bytes to a specific position of the buffer. It's important to notice that any data with more than 1 byte needs to be broken down and set on each position of the buffer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x68&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x68 is the letter "h"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x65 is the letter "e"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6c is the letter "l"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6c is the letter "l"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6f is the letter "o"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'hello'&lt;/span&gt;

&lt;span class="c1"&gt;// ‚ö†Ô∏è Warning: if you try setting a character with more than 2 bytes&lt;/span&gt;
&lt;span class="c1"&gt;// to a single position, it will fail:&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xc2a9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0xc2a9 is the symbol '¬©'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'ÔøΩello'&lt;/span&gt;

&lt;span class="c1"&gt;// But if you write each byte separately...&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xc2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xa9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; '¬©llo'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While it's appreciated that you can write to buffers using an array-like syntax, I suggest sticking to &lt;code&gt;Buffer.from()&lt;/code&gt; when you can. Managing the length of inputs can be a hard task and will bring complexity to your code. With &lt;code&gt;.from()&lt;/code&gt;, you can write things in a buffer worry-free and handle the cases where the input is too large by checking if nothing was written (when it returns 0).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iterating-over-buffers"&gt;
  &lt;/a&gt;
  Iterating over buffers
&lt;/h3&gt;

&lt;p&gt;You can use modern JavaScript constructs to iterate over a buffer the same way you would with an array. For example, with &lt;code&gt;for-of&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// `.toString(16)` returns the content in hexadecimal format.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Prints:&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 68&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 65&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6c&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6c&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6f&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other iterator helpers such as &lt;code&gt;.entries()&lt;/code&gt;, &lt;code&gt;.values()&lt;/code&gt; and &lt;code&gt;.keys()&lt;/code&gt; are also available for buffers. For example, using &lt;code&gt;.entries()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copyBuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;copyBuff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyBuff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 'hello!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#going-further-buffers-and-typedarrays"&gt;
  &lt;/a&gt;
  Going further: &lt;strong&gt;Buffers and TypedArrays&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In JavaScript (I mean JavaScript in general, not restricted to Node.js), memory can be allocated using the special &lt;code&gt;ArrayBuffer&lt;/code&gt; class. We rarely manipulate &lt;code&gt;ArrayBuffer&lt;/code&gt; objects directly. Instead, we use a set of "view" objects which reference the underlying array buffer. Some of the view objects are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Int8Array&lt;/code&gt;, &lt;code&gt;Uint8Array&lt;/code&gt;, &lt;code&gt;Uint8ClampedArray&lt;/code&gt;, &lt;code&gt;Int16Array&lt;/code&gt;, &lt;code&gt;Uint16Array&lt;/code&gt;, &lt;code&gt;Int32Array&lt;/code&gt;, etc. See the full list &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And then there is &lt;code&gt;TypedArray&lt;/code&gt;, which is an umbrella term to refer to all of these view objects listed above. All view objects inherit methods from &lt;code&gt;TypedArray&lt;/code&gt; via prototypes. The &lt;code&gt;TypedArray&lt;/code&gt; constructor is &lt;strong&gt;not&lt;/strong&gt; exposed globally, you always have to use one of the view methods. If you see some tutorial or documentation using &lt;code&gt;new TypedArray()&lt;/code&gt;, it means it's using any of the view objects (Uint8Array, Float64Array, etc).&lt;/p&gt;

&lt;p&gt;In Node.js, objects created from the &lt;code&gt;Buffer&lt;/code&gt; class are also instance of &lt;code&gt;Uint8Array&lt;/code&gt;. There are a few small differences between them, which you can read &lt;a href="https://nodejs.org/api/buffer.html#buffer_buffers_and_typedarrays"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As a beginner, buffers were a topic in Node.js that got me very confused (another one was streams, but that deserves its own post). Hopefully I was able to demystify some of the concepts around buffers and give an overview of the Buffer API.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 JS Tips to Help You Code Smarter, Not¬†Longer</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 05 Aug 2021 13:09:07 +0000</pubDate>
      <link>https://dev.to/sewangco/10-js-tips-to-help-you-code-smarter-not-longer-411d</link>
      <guid>https://dev.to/sewangco/10-js-tips-to-help-you-code-smarter-not-longer-411d</guid>
      <description>&lt;p&gt;Earlier this week, we spoke about &lt;a href="https://codesphere.com/articles/burnout-the-price-of-passion-7988b1139078"&gt;Developer Burnout&lt;/a&gt;, which a &lt;a href="https://haystack-books.s3.amazonaws.com/Study+to+understand+the+impact+of+COVID-19+on+Software+Engineers+-+Full+Report.pdf"&gt;study&lt;/a&gt; found that 83% of developers experience.&lt;/p&gt;

&lt;p&gt;Among the top reasons that developers feel burnt out are high workload, personal life, and inefficient processes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbYme_36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n2p1urr9uhy451kowwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbYme_36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n2p1urr9uhy451kowwu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I can't promise to improve your personal life, I can offer some tips to help reduce your workload and make your coding processes more efficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-10-javascript-tips-to-help-you-code-smarter-not%C2%A0longer"&gt;
  &lt;/a&gt;
  Here are 10 Javascript Tips to help you code smarter, not¬†longer:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-ternary-operators"&gt;
  &lt;/a&gt;
  1. Ternary Operators
&lt;/h3&gt;

&lt;p&gt;If you're not using ternary operators to give variables conditional values, you're making your life a lot harder.&lt;br&gt;
Ternary Operators allow you to set the value of a variable based on a boolean.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let variable = booleanToCheck¬†? 'Value if True'¬†: 'Value if False'&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-use-falsy-instead-of%C2%A0false"&gt;
  &lt;/a&gt;
  2. Use Falsy Instead of¬†False
&lt;/h3&gt;

&lt;p&gt;Another way to reduce the complexity of your conditional statements is to use Falsy values as a quicker alternative to checking the value of a variable. Falsy values are values, like 0 and undefined, that are treated as being equivalent to false when they are used in a boolean context.&lt;/p&gt;

&lt;p&gt;All of the following statements are equivalent:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if (false)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (null)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (undefined)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (0)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (-0)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (0n)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (NaN)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if ("")&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-optional%C2%A0chaining"&gt;
  &lt;/a&gt;
  3. Optional¬†Chaining
&lt;/h3&gt;

&lt;p&gt;Okay final one to make conditionals simpler, I promise.&lt;br&gt;
Instead of writing if statements making sure that certain values are defined, you can use the¬†? operator which will return undefined if the relevant value doesn't exist.&lt;br&gt;
Usage courtesy of the MDN Web Docs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const adventurer = {&lt;br&gt;
name: 'Alice',&lt;br&gt;
cat: {&lt;br&gt;
name: 'Dinah'&lt;br&gt;
}&lt;br&gt;
};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const dogName = adventurer.dog?.name;&lt;br&gt;
console.log(dogName);&lt;br&gt;
// expected output: undefined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(adventurer.someNonExistentMethod?.());&lt;br&gt;
// expected output: undefined&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-use-test-driven-development"&gt;
  &lt;/a&gt;
  4. Use Test Driven Development
&lt;/h3&gt;

&lt;p&gt;Surely, Test-Driven Development isn't going to save you time, right? Well, it might feel like an unnecessary step, but if you and your team find your software caught in a long web of bugs, it's probably because you didn't stop these bugs when they started.&lt;/p&gt;

&lt;p&gt;A full explanation of Test Driven Development warrants its own article, but the general idea is to specify and check the exact way certain functions and features are going to work. Oftentimes, this testing is done automatically, but a lot of the benefits of TDD can be reaped just by documenting code well or using&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.assert()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To make sure certain things still have their expected behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-null-coalescing"&gt;
  &lt;/a&gt;
  5. Null Coalescing
&lt;/h3&gt;

&lt;p&gt;Also within the theme of stopping bugs before they get worse, null coalescing allows you to specify default values in case of an unexpected, or expected, undefined value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const variable = null¬†?? 'default value'&lt;br&gt;
console.log(variable) // "Output: default value"&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-visualize-git-with-gitk-and%C2%A0gitgui"&gt;
  &lt;/a&gt;
  6. Visualize Git with GitK and¬†Git-GUI
&lt;/h3&gt;

&lt;p&gt;If you find yourself wasting a lot of time trying to navigate convoluted git repos, it might be helpful to use a Git Visualizer. The two most popular ones are &lt;a href="https://git-scm.com/docs/gitk/"&gt;GitK&lt;/a&gt; and &lt;a href="https://git-scm.com/docs/git-gui/"&gt;Git-GUI&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlzcWMeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piit4cwpw8p6fi9e2enj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlzcWMeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piit4cwpw8p6fi9e2enj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_5qs4RN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cixctjequjyheze14j2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_5qs4RN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cixctjequjyheze14j2p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, GitHub offers &lt;a href="https://desktop.github.com/"&gt;Github Desktop&lt;/a&gt; to help make managing your local versions with the remote repository easier:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ni1VpRMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ctxog4h6bd2s74i4422.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ni1VpRMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ctxog4h6bd2s74i4422.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-build-custom%C2%A0sort"&gt;
  &lt;/a&gt;
  7. Build Custom¬†Sort()
&lt;/h3&gt;

&lt;p&gt;Unless you are working with incredibly large arrays and are tracking the computational complexity of your javascript functions, you don't need to be writing your own sorting functions.&lt;/p&gt;

&lt;p&gt;In fact, when Javascript's Sort() function is called, browsers make sure to use a more efficient sorting algorithm(Like Mergesort and Quicksort) when necessary. The sort() function can also take in custom comparison functions, allowing it to be much more versatile than just a simple number comparison.&lt;/p&gt;

&lt;p&gt;Example per &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;MDN Web Docs&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var items = [&lt;br&gt;
{ name: 'Edward', value: 21 },&lt;br&gt;
{ name: 'And', value: 45 },&lt;br&gt;
{ name: 'The', value: -12 },&lt;br&gt;
];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;// sort by value&lt;br&gt;
items.sort(function (a, b) {&lt;br&gt;
return a.value‚Ää-‚Ääb.value;&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-review-your-sites-automatically-with-lighthouse"&gt;
  &lt;/a&gt;
  8. Review Your Sites Automatically with Lighthouse
&lt;/h3&gt;

&lt;p&gt;If you need to improve your website, but don't know where to start, I highly recommend using Chrome's built-in Lighthouse dev-tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBziJdsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5fr07dagmlqu7qion2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBziJdsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5fr07dagmlqu7qion2m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Lighthouse allows you to check any site for performance, accessibility, or SEO issues and will give you the specific parts of your site that you need to fix or optimize. It is a huge time saver when it comes to making sure your app is ready for production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-use-typescript"&gt;
  &lt;/a&gt;
  9. Use Typescript
&lt;/h3&gt;

&lt;p&gt;Similar to Test-Driven Development, Typescript might feel like it would do the very opposite of saving you time. In the long run, Typescript tends to have the opposite effect.&lt;/p&gt;

&lt;p&gt;Coding in a strictly typed language is going to make your code much more readable, meaning that you and your teammates are going to spend less time trying to understand the codebase. In addition, Typescript is going to help prevent bugs long before they occur, which is a huge time saver.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-stop-wasting-time-configuring-infrastructure"&gt;
  &lt;/a&gt;
  10. Stop Wasting Time Configuring Infrastructure
&lt;/h3&gt;

&lt;p&gt;Finally, stop wasting time configuring infrastructure. It's 2021, it shouldn't take you more than a couple of minutes to deploy your app. By combining a Web IDE with the cloud, &lt;a href=""&gt;Codesphere&lt;/a&gt; streamlines the deployment process. We're making running an app in the cloud as easy as running it on your local machine.&lt;/p&gt;




&lt;p&gt;So what'd we leave off the list? Let us know down below!&lt;br&gt;
Happy Coding!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>GitLab Commit 2021 - Upgrade your development workflow with interactive code maps</title>
      <author>Kevin Gilpin</author>
      <pubDate>Thu, 05 Aug 2021 12:54:58 +0000</pubDate>
      <link>https://dev.to/kgilpin/gitlab-commit-2021-upgrade-your-development-workflow-with-interactive-code-maps-4hdn</link>
      <guid>https://dev.to/kgilpin/gitlab-commit-2021-upgrade-your-development-workflow-with-interactive-code-maps-4hdn</guid>
      <description>&lt;p&gt;Earlier this week, I gave a talk at GitLab Commit 2021 about how we can build our understanding of code, share that knowledge with other people, and use new tools for guidance and navigation as we create, fix and improve code. If you weren‚Äôt able to attend the event, don‚Äôt worry! I‚Äôm going to recap my talk here. If you prefer to watch vs. read, &lt;a href="#presentation-video"&gt;scroll down&lt;/a&gt; for a 14 minute video of my talk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here‚Äôs the problem I outlined:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acquiring knowledge about code is hard. And communicating it across teams is even harder. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So when we make structural changes to code, I think it‚Äôs important to pause for a minute and confirm our assumptions before we start changing things. Getting extra context and getting oriented is really important when making performance changes, refactoring or fixing tough bugs -- because navigation of code becomes less apparent when we make these types of complex changes. &lt;/p&gt;

&lt;p&gt;This is particularly relevant in DevSecOps, because security has specific skill sets and values. Bringing security into DevSecOps requires everyone to learn more about people in adjacent roles, and learn a bit of their language and value system in order to collaborate and share context efficiently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here‚Äôs the example I shared:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take the lifecycle of a bug fix, a basic communication process that happens every day between 3 different people in different roles. You‚Äôve got:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The person reporting the bug (e.g. another developer, a QA tester or security tester)&lt;/li&gt;
&lt;li&gt;The developer fixing the bug&lt;/li&gt;
&lt;li&gt;The code reviewer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are 2 handoff stages here: from the bug finder to the developer, and from the developer to the reviewer. At each stage, a knowledge transfer needs to happen between people with very different experience levels with the code in question. In fact, it‚Äôs possible that none of these 3 people really know this particular area of the codebase that well. But they all need to work together to get a code change written, reviewed and approved.&lt;/p&gt;

&lt;p&gt;The bug finder knows that the dev team wants as much descriptive information about the bug as possible -- what the tester was doing, what they typed in, what buttons they pushed, what they saw, etc. This description can be accompanied by some screenshots and for UI bugs, this works great. But what about bugs in application behavior, where it‚Äôs the backend that‚Äôs misbehaving? Maybe the user is presented with inaccurate information or data belonging to someone else! Or they expect to go to page X but end up on page Y. What then?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here‚Äôs the solution I proposed:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, wouldn‚Äôt it be great if the bug finder could send you the equivalent of a screenshot, but of the backend internals? How about a map of code paths, including all the dynamic and complex stuff like HTTP requests, caching, user session interactions, security and SQL? &lt;/p&gt;

&lt;p&gt;This is all possible with code maps. And by code maps, I mean a visual presentation of code (other than the code as text) that makes a design aspect of the code easier to understand.&lt;/p&gt;

&lt;p&gt;Making code maps is possible with &lt;a href="https://appland.com/docs/appmap-overview.html"&gt;AppMap&lt;/a&gt;, a free, open source tool that makes runtime recordings of code. AppMap works equally well with large and small projects, web applications, and microservices. It captures all the information I described above, and bundles it into a portable JSON format. It‚Äôs also easy to write  programs that process, analyze and display AppMap data. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Quick sidebar:&lt;/strong&gt; Last week we released a GitLab integration for AppMap! Now you can upload AppMaps to the AppMap Cloud and log in with your GitLab account. You can also attach links to AppMaps stored in AppMap Cloud to your GitLab merge requests. &lt;a href="https://appland.com/videos/2021/07/30/runtime-code-maps-for-your-gitlab-project/"&gt;Here‚Äôs a short demo video&lt;/a&gt; if you‚Äôd like to see this in action. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Here‚Äôs the demo I gave:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my talk, I showed how to use AppMaps to transfer information about bugs from testers to developers, and from developers to code reviewers. Start watching at the 5:00 mark in the video to watch the demo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next steps you can take:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you‚Äôd like to try using code maps to accelerate code understanding and improve communication with your team, you‚Äôll need to:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appland.com/docs/quickstart/"&gt;Install AppMap&lt;/a&gt; for VSCode or JetBrains &lt;/li&gt;
&lt;li&gt;Install and configure the AppMap client agent for Ruby, Python, or Java&lt;/li&gt;
&lt;li&gt;Show your dev team or pen testers how to run the app with AppMap enabled, and use the AppMap browser extension to &lt;a href="https://appland.com/docs/reference/remote-recording.html"&gt;record what they see and do&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Show everyone &lt;a href="https://appland.com/docs/guides/add-appmaps-to-a-code-issue.html"&gt;how to upload and download AppMaps&lt;/a&gt; - from your own internal repository, or from &lt;a href="https://appland.com/products/appmap-cloud"&gt;AppMap Cloud&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#presentation-video"&gt;
  &lt;/a&gt;
  Presentation video
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iC0NrcqhStI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Any comments or questions? Come find us on &lt;a href="https://discord.com/invite/N9VUap6"&gt;our Discord server&lt;/a&gt; or &lt;a href="https://twitter.com/landofapps"&gt;on Twitter&lt;/a&gt;. I‚Äôd love to hear from you! &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>webdev</category>
      <category>devops</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Story time with Treblle : Fun with flags</title>
      <author>Vedran Cindriƒá</author>
      <pubDate>Thu, 05 Aug 2021 12:47:54 +0000</pubDate>
      <link>https://dev.to/treblle/fun-with-flags-3kio</link>
      <guid>https://dev.to/treblle/fun-with-flags-3kio</guid>
      <description>&lt;p&gt;&lt;em&gt;Welcome to a series of short stories about how &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; helped solved real problems for real developers. Hope you like them üôåüèª&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of our customers had an iOS app where you would enter a phone number and it would make an API request. The API endpoint would then send a confirmation code via SMS. You couldn‚Äôt even start using the app without the code. The API devs used Twilio to send the message and they tested it many many times by manually making requests to it. It was all working. &lt;/p&gt;

&lt;p&gt;On the app side the UI had a country dropdown with flags followed by the user entered phone number. It looked cool. You would select your country and then enter a phone number. The iOS team used a pod to build the UI and then sent the value to the API endpoint. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once the app was somewhat ready they sent it to a bunch of external testers.&lt;/strong&gt; Nobody could get it to work. No SMS was comming in from the API. Of course it got reported to the API team and they again tried manually testing via Postman. Everything was working for them - again. Frustration and friction between the iOS devs and API devs built up. iOS team was saying that they are doing everything by the book, the API team was saying it‚Äôs working for them when try try it‚Ä¶ They had a stalemate on their hands. &lt;strong&gt;Together, they spent days communicating back and forth.&lt;/strong&gt; A few testers tried to enter different numbers, used different app versions‚Ä¶All they found out is that Twillio rejected the phone number - no idea why. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After a few days they added Treblle and as soon as they typed in the phone number in the app everybody understood what went wrong.&lt;/strong&gt; The pod that the iOS team used. for showing a list of countries, had been appending the selected flag emoji in front of the number. That was being sent to the API and logically it wasn‚Äôt working!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lessons learned:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;developers will always tend to test in perfect conditions - that is just how we are wired ü§∑üèª‚Äç‚ôÇÔ∏è&lt;/li&gt;
&lt;li&gt;it‚Äôs really hard to debug something that no one can actually see üßê&lt;/li&gt;
&lt;li&gt;it‚Äôs hard to find issues when third party code is causing it üçù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚úÖ &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; helped them solve a multi day issue that was blocking the release in literary a few seconds &lt;br&gt;
‚úÖ &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; brought them together as a team and reduced friction&lt;/p&gt;

&lt;p&gt;Stay tuned for more concrete examples of how &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; can help you and your team make you daily dev life easier. Also if you used &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; and it helped you comment here we would love to hear from you. &lt;/p&gt;

</description>
      <category>twilio</category>
      <category>api</category>
      <category>ios</category>
      <category>tooling</category>
    </item>
    <item>
      <title>How WordPress can help you build a website for your business
</title>
      <author>ImbaChat</author>
      <pubDate>Thu, 05 Aug 2021 12:43:56 +0000</pubDate>
      <link>https://dev.to/imba_chat/how-wordpress-can-help-you-build-a-website-for-your-business-2ced</link>
      <guid>https://dev.to/imba_chat/how-wordpress-can-help-you-build-a-website-for-your-business-2ced</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-wordpress-can-help-you-build-a-website-for-your-business"&gt;
  &lt;/a&gt;
  How WordPress can help you build a website for your business?
&lt;/h2&gt;

&lt;p&gt;Websites are an essential platform for business. The website allows companies to showcase who they are. This is convenient for businesses whose customers from other parts of the world cannot make transactions in person.&lt;/p&gt;

&lt;p&gt;Your website can provide you with an otherwise wasted opportunity to expand on your products or services. This will help you convince your prospect to understand why they should invest in your products or services.&lt;/p&gt;

&lt;p&gt;Today you can install a &lt;a href="https://imbachat.com/en/wordpress-chat"&gt;multifunctional group chat plugin for WordPress&lt;/a&gt;. ImbaChat is a chat plugin that includes the functions of WordPress private chat between users, group chat, and online chat support in one cloud service. This is a pretty handy and practical software to make a WordPress chat room. There is integration with BuddyPress and WooCommerce.&lt;/p&gt;

&lt;p&gt;Fortunately, quality website development is no longer exclusively for large corporations. With the growing number of digital marketing companies, your content may display well and delight your potential customers.&lt;/p&gt;

&lt;p&gt;Aside from these agencies, there is a great tool that has allowed countless websites to thrive without bypassing thousands of companies - WordPress. &lt;/p&gt;

&lt;p&gt;So how does this help you better present yourself in the market?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-of-all-it-allows-you-to-make-blog-posts"&gt;
  &lt;/a&gt;
  First of all, it allows you to make blog posts
&lt;/h3&gt;

&lt;p&gt;For many websites, whether the business sells products or offers services, there is a blog section. This section can be used to showcase testimonials and information materials to help you show potential customers why you are the right choice.&lt;br&gt;
You are guaranteed automatic updates&lt;/p&gt;

&lt;p&gt;Updates are an important aspect for websites to maintain their functionality as well as security. While manual updates are just as effective as automatic updates, the latter allows you to update your site in no time.&lt;/p&gt;

&lt;p&gt;That being said, even if your web development team isn't working all day, you can rest assured that your site will be taken care of. When your team is back to work, after making updates, they can work on other tasks, such as improving the design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-add-your-flavor"&gt;
  &lt;/a&gt;
  You can add your flavor
&lt;/h3&gt;

&lt;p&gt;WordPress is open source. This means that although the blog is built on WordPress, you can easily modify it using a variety of plugins and themes to suit your preferences. All this allows you to create a blog that matches your business brand without incurring any cost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#great-forwith-seo"&gt;
  &lt;/a&gt;
  Great for/with SEO
&lt;/h3&gt;

&lt;p&gt;Part of being a successful site is visible. And more often than not, search engine optimization is the key. Fortunately, WordPress is a fairly SEO-friendly platform. There are free plugins like Yoast that help developers track ranking and performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finally-it-is-reliable"&gt;
  &lt;/a&gt;
  Finally, it is reliable
&lt;/h3&gt;

&lt;p&gt;Many of the most popular sites on the Internet, such as The New York Times website and Mashable, are WordPress users, so you know you are in good hands. WordPress is a popular choice for integrating a blog with a website, and for good reason, as evidenced by these sites, and ultimately your site.&lt;br&gt;
WordPress is undoubtedly a great tool that no business should give up. It works, it adapts, and most importantly, it shouldn't cost you anything.&lt;/p&gt;

&lt;p&gt;Note, however, that no matter how good WordPress is as a platform, you will need people with experience with it. If you want to get the most out of this, you will need people who can ensure that tools, plugins, and the like are used and installed properly.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>chat</category>
      <category>buddypress</category>
    </item>
    <item>
      <title>5 Git Tricks Every Developer Should¬†Know</title>
      <author>Shadid Haque</author>
      <pubDate>Thu, 05 Aug 2021 12:26:05 +0000</pubDate>
      <link>https://dev.to/shadid12/5-git-tricks-every-developer-should-know-1201</link>
      <guid>https://dev.to/shadid12/5-git-tricks-every-developer-should-know-1201</guid>
      <description>&lt;p&gt;As software developers version control plays an important role in our day to day work life. In this article we will discuss 5 git tips and tricks that will enhance your productivity, better your workflow and make you an overall git ninja. Let‚Äôs dive in:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-remove-all-your-local-git-branches-but-keep-master"&gt;
  &lt;/a&gt;
  1. Remove all your local git branches but keep master
&lt;/h2&gt;

&lt;p&gt;You are often working on many features and every feature requires you to create a separate branch. At some point you will have lots of dangling local branches that you don‚Äôt need. As a developer I have this problem all the time. I want to get rid of all branches except &lt;strong&gt;master/main&lt;/strong&gt;. This following command will do the trick.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch | grep -v ‚Äúmaster‚Äù | xargs git branch -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#2-how-do-i-undo-the-most-recent-local-commits-in-git"&gt;
  &lt;/a&gt;
  2. How do I undo the most recent local commits in Git?
&lt;/h2&gt;

&lt;p&gt;This happens to be one of the most asked questions on stack overflow. Let‚Äôs say you committed something by mistake and now you have to undo this.&lt;br&gt;
Here‚Äôs a git commit that I made recently that I want to undo&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m ‚Äúthis was a mistake‚Äù
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I can reset to any previous commit by running &lt;strong&gt;git reset‚Ää‚Äî‚Äähard &lt;/strong&gt; but this will override my local changes (the changes I made in the local files). We can do better.&lt;br&gt;
We can undo only the latest commit without changing the working tree (files that we made changes to on the disk) with the command below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset HEAD~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After running this we can run our git add and git commit commands like we usually do.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m ‚Äúsome message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#3-a-better-git-log-visualization-on-terminal"&gt;
  &lt;/a&gt;
  3. A better git log visualization on terminal
&lt;/h2&gt;

&lt;p&gt;You have most definitely used the &lt;code&gt;git log&lt;/code&gt; command before. It prints out all the version control history in your terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuyZwXdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6D89DABFC9940A59D8BBC120EAC178B1EC503D67F9319BA08C657A9890F714AA_1628166090239_1_oSQgVsUCDJDPpgRXJU6hgQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuyZwXdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6D89DABFC9940A59D8BBC120EAC178B1EC503D67F9319BA08C657A9890F714AA_1628166090239_1_oSQgVsUCDJDPpgRXJU6hgQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;git log output&lt;br&gt;
As you can see in the above output we can see the commit history. We can make this more intuitive with the following git command&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log ‚Äî graph ‚Äî pretty=format:‚Äô%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset‚Äô ‚Äî abbrev-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now this will print the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gOWuYa-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6D89DABFC9940A59D8BBC120EAC178B1EC503D67F9319BA08C657A9890F714AA_1628166130460_1_CJMLXsaXem3MNry8SKLOhQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOWuYa-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6D89DABFC9940A59D8BBC120EAC178B1EC503D67F9319BA08C657A9890F714AA_1628166130460_1_CJMLXsaXem3MNry8SKLOhQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;git log 2&lt;br&gt;
As you can see this way we have much more information logged out in the terminal. You can also observe recent line changes with the associated commit. Just pass in a &lt;strong&gt;&lt;em&gt;-p&lt;/em&gt;&lt;/strong&gt; flag at the end of previous command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#4-how-to-delete-git-branch-locally-and-from-remote-"&gt;
  &lt;/a&gt;
  4. How to delete git branch locally and from remote ?
&lt;/h2&gt;

&lt;p&gt;This one is very self explanatory. To remove a git branch locally we can run the following command&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -d &amp;lt;name of your branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you would like to delete the branch without checking merge status use &lt;strong&gt;&lt;em&gt;-D&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt;&lt;br&gt;
Now to delete branch from remote you can run the following&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin --delete &amp;lt;your remote branch name&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#5-how-to-cherry-pick-from-another-repository"&gt;&lt;br&gt;
  &lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;How to cherry pick from another repository
&lt;/li&gt;
&lt;/ol&gt;
&lt;/h2&gt;


&lt;p&gt;Let‚Äôs say we want to apply some changes from another repository. We can do this by running the following command.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch &amp;lt;remote-git-url&amp;gt; &amp;lt;branch&amp;gt; &amp;amp;&amp;amp; git cherry-pick SHA1&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#conclusion"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Conclusion&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed learning about these git tricks. That‚Äôs all for today, until next time!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git"&gt;https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coderwall.com/p/sgpksw/git-cherry-pick-from-another-repository"&gt;https://coderwall.com/p/sgpksw/git-cherry-pick-from-another-repository&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>discuss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Power of console.table() in JavaScriptüí™üèªüòé</title>
      <author>Neha Soni</author>
      <pubDate>Thu, 05 Aug 2021 12:16:09 +0000</pubDate>
      <link>https://dev.to/nehasoni__/power-of-console-table-in-javascript-18n0</link>
      <guid>https://dev.to/nehasoni__/power-of-console-table-in-javascript-18n0</guid>
      <description>&lt;center&gt;&lt;strong&gt;Debugging is the skill that all developers should have in their toolboxüß∞&lt;/strong&gt;&lt;/center&gt;
&lt;br&gt;
No doubt &lt;code&gt;console.log()&lt;/code&gt; is a super useful, quick, and simple debug method. Many of us probably use console.log() to debug our javascript code and there is nothing wrong with this. Many developers use this to debug their code. But today I am going to share a tip that helps you debug your javascript code more efficiently.&lt;br&gt;
&lt;center&gt;&lt;strong&gt;&lt;em&gt;console.table()&lt;/em&gt;&lt;/strong&gt;&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#so-what-is-consoletable"&gt;
  &lt;/a&gt;
  So, what is console.table()ü§Ø‚ùì
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.table()&lt;/code&gt; allows you to print out arrays and objects to the console in tabular form. The tabular representation of data works like a charm which means you will get greater insight into your data and you can just debug your code faster.  You can also sort columns quickly.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntaxü§ì
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//or&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;‚Ä¢ data:- The data to fill the table with. It must be either an array or an object.&lt;br&gt;
‚Ä¢ columns:- array containing the names of the columns to be included in the table.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-implement-consoletable"&gt;
  &lt;/a&gt;
  How to implement console.table()ü§î‚ùì
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.table&lt;/code&gt; can be implemented in the following ways:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-array"&gt;
  &lt;/a&gt;
  a.) Array
&lt;/h3&gt;

&lt;p&gt;If the value of data argument is an array then the index column will be incremented by one, with the starting value being 0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mango&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grapes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Outputü§©:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7F-0NdF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628148953361/iZcf6SpYq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7F-0NdF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628148953361/iZcf6SpYq.png" alt="Screenshot (402).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;If you want to sort the column click on the header of that column.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#b-array-of-arrays"&gt;
  &lt;/a&gt;
  b.) Array of arrays
&lt;/h3&gt;

&lt;p&gt;When we print an array of arrays then the column names will be incremented in the same way as the index column values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jari&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Claus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Marti&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Martha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Outputü§©:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7oaHZUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628149395376/70AxhtzGs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7oaHZUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628149395376/70AxhtzGs.png" alt="Screenshot (403).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c-object"&gt;
  &lt;/a&gt;
  c.) Object
&lt;/h3&gt;

&lt;p&gt;If the value of the data argument is an object then the index column represents the keys and the value column represents the value corresponding to that particular key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;neha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Outputü§©:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BLAqYQQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628150289757/IrHKMyIq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BLAqYQQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628150289757/IrHKMyIq5.png" alt="Screenshot (404).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#d-array-of-objects"&gt;
  &lt;/a&gt;
  d.) Array of Objects
&lt;/h3&gt;

&lt;p&gt;If the value of the data argument is an array of objects then their properties are enumerated in the row, one per column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;neha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Outputü§©:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yx9Z2CPt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628164309414/0uVRxAwqH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yx9Z2CPt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628164309414/0uVRxAwqH.png" alt="Screenshot (412).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#e-nested-objects"&gt;
  &lt;/a&gt;
  e.) Nested Objects
&lt;/h3&gt;

&lt;p&gt;If the value of the data argument is nested objects i.e an object whose properties are themselves objects. In this case, the console.table() method labels the index appropriately with the nested object properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;employees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;leader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Story&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;andrew@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bhatt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amit@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;developer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Param&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dutta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;param@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Outputü§©:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvOGAxUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628159323784/Pz6Vhh3rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvOGAxUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628159323784/Pz6Vhh3rj.png" alt="Screenshot (406).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-you-have-an-object-that-has-10-properties"&gt;
  &lt;/a&gt;
  What if you have an Object that has 10+ propertiesüò≥ü§Ø?
&lt;/h3&gt;

&lt;p&gt;Obviously, if you have a very large object with lots of properties, this table can become very large and the data can be difficult to read.&lt;br&gt;
But luckily, &lt;code&gt;console.table&lt;/code&gt; allows us to pass an optional second argument that will specify the columns we want and only print those out.&lt;br&gt;&lt;br&gt;
 Let's look at an example to get the exact idea:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;employees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;leader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10001&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Story&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;andrew@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10002&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bhatt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amit@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;developer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10003&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Param&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dutta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;param@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Outputü§©
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I5oR4G35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628160270047/gzM-45glX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I5oR4G35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628160270047/gzM-45glX.png" alt="Screenshot (407).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you require only one column, this could be done like this:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Outputü§©
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTzvnqtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628160514873/fPT0RiGSn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTzvnqtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628160514873/fPT0RiGSn.png" alt="Screenshot (408).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this blog post. If you enjoyed learning and find it useful please do like and share so that, it reaches others as well ü§ù&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading üòÉ
&lt;/h3&gt;

&lt;p&gt;I would ‚ù§ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/the-curated-list-of-ultimate-java-resources-5amk"&gt;The Curated List of Ultimate Java Resources üßµ&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/top-10-useful-github-repos-for-self-development-25c0"&gt;Top 10 Useful GitHub Repos for Self-Development&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/how-to-setup-billing-alarm-in-aws-4144"&gt;How to SetUp Billing Alarm in AWS&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/amazon-web-services-an-overview-2okc"&gt;Amazon Web Services- An Overview&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/cloud-computing-an-overview-4ib3"&gt;Cloud Computing- An Overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/random-quote-generator-using-html-css-and-javascript-3gbp"&gt;Random Quote Generator Using HTML, CSS, and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/playing-with-javascript-objects-k4h"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy LearningüòÉüòÉ&lt;/strong&gt;&lt;br&gt;
!important;width: 217px !important;" &amp;gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hello, World! in 10 different languages üî•üî•</title>
      <author>Rohidul Islam</author>
      <pubDate>Thu, 05 Aug 2021 12:15:41 +0000</pubDate>
      <link>https://dev.to/rohidhub/hello-world-in-10-different-languages-6ko</link>
      <guid>https://dev.to/rohidhub/hello-world-in-10-different-languages-6ko</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-python"&gt;
  &lt;/a&gt;
  1. Python
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-java"&gt;
  &lt;/a&gt;
  2. Java
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-javascript"&gt;
  &lt;/a&gt;
  3. JavaScript
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-c-sharp"&gt;
  &lt;/a&gt;
  4. C Sharp
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;         
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-swift"&gt;
  &lt;/a&gt;
  5. Swift
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#6-dart"&gt;
  &lt;/a&gt;
  6. Dart
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#7-go"&gt;
  &lt;/a&gt;
  7. Go
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#8-c"&gt;
  &lt;/a&gt;
  8. C++
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#9-c"&gt;
  &lt;/a&gt;
  9. C
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#10-kotlin"&gt;
  &lt;/a&gt;
  10. Kotlin
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>programming</category>
      <category>helloworld</category>
      <category>coding</category>
      <category>languages</category>
    </item>
  </channel>
</rss>
