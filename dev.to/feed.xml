<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Laravel Pipeline Design Pattern Example
</title>
      <author>Abdallah Samy</author>
      <pubDate>Tue, 04 May 2021 12:41:44 +0000</pubDate>
      <link>https://dev.to/abdallhsamy/laravel-pipeline-design-pattern-example-1pc9</link>
      <guid>https://dev.to/abdallhsamy/laravel-pipeline-design-pattern-example-1pc9</guid>
      <description>&lt;p&gt;Using laravel pipelines you can pass an object between several classes in a fluid way to perform any type of task and finally return the resulting value once all the “tasks” have been executed.&lt;/p&gt;

&lt;p&gt;Larval uses the Pipeline Design Pattern in a couple of places throughout the framework. This means everything we need to implement this pattern is already part of the foundation of your application!&lt;/p&gt;

&lt;p&gt;In today’s tutorial we will be looking at the Pipeline Design Pattern and how we can filter data using laravel pipeline, in this tutorial we are going to see that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravelpipelineexample"&gt;
  &lt;/a&gt;
  laravel-pipeline-example
&lt;/h2&gt;

&lt;p&gt;What is the Pipeline Design Pattern?&lt;br&gt;
The Pipeline Design Pattern is where a complex process is broken down into individual tasks. Each individual task is reusable and so the tasks can be composed into complex processes.&lt;/p&gt;

&lt;p&gt;This allows you to break up monolithic processes into smaller tasks that process data and then pass that data to the next step.&lt;/p&gt;

&lt;p&gt;Each task within the pipeline should receive and emit the same type of data. This allows tasks to be added, removed, or replaced from the pipeline without disturbing the other tasks.&lt;/p&gt;

&lt;p&gt;Now let's start our tutorial. In this tutorial we will create a post table, and filter them using active or inactive, asc or desc or will filter them order by title or name. That mean we are going to filter data using Laravel pipeline. Let's see.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-create-route"&gt;
  &lt;/a&gt;
  Step 1 :  Create Route
&lt;/h2&gt;

&lt;p&gt;Now we have to create a route to return our data, so create it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;FilterController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-create-post-model"&gt;
  &lt;/a&gt;
  Step 2 :  Create Post Model
&lt;/h2&gt;

&lt;p&gt;To create Post model, paste this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan make:model Post &lt;span class="nt"&gt;-m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open our newly created database table and paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreatePostsTable&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'active or inactive'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;dropIfExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-generate-some-dummy-data"&gt;
  &lt;/a&gt;
  Step 3: Generate some dummy data
&lt;/h2&gt;

&lt;p&gt;To generate some dummy data, open PostFactory and paste below code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Database\Factories&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Carbon\Carbon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\Factory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Factory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'active'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then run below command to generate fake data using faker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan tinker
&lt;span class="se"&gt;\A&lt;/span&gt;pp&lt;span class="se"&gt;\M&lt;/span&gt;odels&lt;span class="se"&gt;\P&lt;/span&gt;ost::factory&lt;span class="o"&gt;(&lt;/span&gt;5&lt;span class="o"&gt;)&lt;/span&gt;-&amp;gt;create&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-add-controller-method"&gt;
  &lt;/a&gt;
  Step 4:  Add Controller Method
&lt;/h2&gt;

&lt;p&gt;Now at last we have to add new controller method index() in your Home Controller. So let's add index() method on HomeController.php file.&lt;/p&gt;

&lt;p&gt;app/Http/Controllers/FilterController.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FilterController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-setup-model"&gt;
  &lt;/a&gt;
  Step 5:  Setup Model
&lt;/h2&gt;

&lt;p&gt;Now open Post model, and paste this following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Pipeline\Pipeline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Pipeline&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;through&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\Active&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\Sort&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\MaxCount&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;thenReturn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see the pipeline class source code which i mentioned link above, you will understand clearly what is happening here. Pipeline class define some classes like, you pass in the object that you want to send through the pipeline:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$pipeline&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next you pass an array of tasks that should accept and process the request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$pipeline&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;through&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$middleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally you run the pipeline with a destination callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$pipeline&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="c1"&gt;// Do something  &lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it also uses this below method which i used my code above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="cd"&gt;/**
     * Run the pipeline and return the result.
     *
     * @return mixed
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;thenReturn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to create our own custom class to filter our database data.&lt;/p&gt;

&lt;p&gt;app/QueryFilters/Filter.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\QueryFilters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Closure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Closure&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;filterName&lt;/span&gt;&lt;span class="p"&gt;())){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;applyFilters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;applyFilters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;filterName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;snake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;class_basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app/QueryFilters/Active.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\QueryFilters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Active&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;applyFilters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;filterName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app/QueryFilters/Sort.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\QueryFilters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sort&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;applyFilters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;filterName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app/QueryFilters/MaxCount.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\QueryFilters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MaxCount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;applyFilters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;filterName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you visit this url, you will find our filter data&lt;/p&gt;

&lt;p&gt;&lt;a href="http://127.0.0.1:8000/post?active=1&amp;amp;sort=desc&amp;amp;max_count=1"&gt;http://127.0.0.1:8000/post?active=1&amp;amp;sort=desc&amp;amp;max_count=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you should the below output. Here we can see our all active post with descending order. make sure that paginate and max_count can not work together.&lt;/p&gt;

&lt;p&gt;If you get data from model without out using paginate method then max_count also work for filtering. See below code to understand. Hope you will understand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Pipeline&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;through&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\Active&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\Sort&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\MaxCount&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;thenReturn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//just change here like below code&lt;/span&gt;


&lt;span class="nv"&gt;$posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Pipeline&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;through&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\Active&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\Sort&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\QueryFilters\MaxCount&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;thenReturn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M7JMLnXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rlhwowte2ff1uro1ad3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M7JMLnXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rlhwowte2ff1uro1ad3.jpg" alt="1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://127.0.0.1:8000/post?active=0&amp;amp;sort=desc&amp;amp;max_count=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QCjfhsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww1i96ps8908dd9zy1lh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QCjfhsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww1i96ps8908dd9zy1lh.jpg" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you should the below output. Here we can see our all inactive post with descending order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-create-view-file"&gt;
  &lt;/a&gt;
  Step 6 : Create View File
&lt;/h2&gt;

&lt;p&gt;Now paste this following code to this post.blade.php file.&lt;/p&gt;

&lt;p&gt;resources/views/post.blade.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       @foreach ($posts as $item)
           {{ $item-&amp;gt;title }} 
           {{ $item-&amp;gt;active }} &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
       @endforeach
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 {!! $posts-&amp;gt;appends(request()-&amp;gt;input())-&amp;gt;links()  !!}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Laravel makes good use of this design pattern internally in the framework. But you can use Laravel’s Pipeline functionality for your own projects.&lt;/p&gt;

&lt;p&gt;In next week’s tutorial we’re going to be looking at how you can use the Pipeline functionality to deal with complex processes. Hope it can help you to gather new knowledge. &lt;/p&gt;

</description>
      <category>pipeline</category>
      <category>laravel</category>
      <category>design</category>
      <category>pattern</category>
    </item>
    <item>
      <title>Docker Must know commands and tricks</title>
      <author>vishwasnarayanre</author>
      <pubDate>Tue, 04 May 2021 10:52:33 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/docker-must-know-commands-and-tricks-5ag8</link>
      <guid>https://dev.to/vishwasnarayan5/docker-must-know-commands-and-tricks-5ag8</guid>
      <description>&lt;p&gt;Welcome to the first in a series of tutorials on getting started with Docker. Docker is a tool that allows developers and system administrators to create, instal, and run containers-based software. This is often referred to as containerization. Putting apps in containers has a number of advantages:&lt;/p&gt;

&lt;p&gt;Containers in Docker are still compact. This assumes you can create containers locally and distribute them to any docker environment (other machines, servers, cloud, etc...).&lt;br&gt;
Containers are lightweight and they share the host kernel (the host operating system), but they are still capable of handling the most dynamic applications.&lt;br&gt;
Containers can be stacked vertically, and services can be stacked verically on the fly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#containers-vs-virtual-machines"&gt;
  &lt;/a&gt;
  Containers vs. Virtual Machines
&lt;/h2&gt;

&lt;p&gt;When discussing containerization, virtual computers are often used as analogies. Take a glance at the screenshot below to see the biggest difference:&lt;br&gt;
The Docker container framework runs on top of the host operating system at all times. Containers hold binaries, libraries, and the program itself. Containers do not have a guest operating system, allowing them to be lightweight.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-idea-on-docker-container"&gt;
  &lt;/a&gt;
  the idea on docker container
&lt;/h3&gt;

&lt;p&gt;This guide will teach you about Docker and how to get started with this famous container framework. Before we begin using Docker in practise, let us first define some of the most relevant principles and terminologies. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Images :&lt;/strong&gt;&lt;br&gt;
A Docker image contains all of the components used to run an application as a container. This contains the following:&lt;br&gt;
environment variables configuration files code runtime libraries&lt;br&gt;
The picture can then be deployed and executed as a container in any Docker environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers :&lt;/strong&gt;&lt;br&gt;
A Docker container is an image's runtime example. From a single picture, you can launch multiple containers (all of which run the sample application) on different Docker platforms.&lt;br&gt;
On the host computer, a container operates as a separate operation. Since the container operates without the need to boot up a guest operating system, it is lightweight and uses less resources (such as memory) to function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation :&lt;/strong&gt;&lt;br&gt;
First and foremost, ensure that Docker is built on your device. For the purposes of this guide, we'll presume that Docker Community Edition (CE) is already installed. This version is suitable for developers who want to get started with Docker and play with container-based applications, making it an excellent option for our use case. Docker Community Edition is available for all major operating systems, including MacOS, Windows, and Linux. The detailed instructions for installing Docker CE on your system can be found at &lt;a href="https://docs.docker.com/install/"&gt;https://docs.docker.com/install/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also build a free account at &lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt; so that you can use it to sign in to the Docker Desktop program. Finally, ensure that the Docker Desktop program is running.&lt;br&gt;
Once Docker is mounted and operational on your server, we can begin by entering the following command into the terminal:&lt;/p&gt;

&lt;p&gt;The following tutorial is performed on the &lt;strong&gt;Windows host PC OS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_MB2vzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k946smqlfl7canuwic8f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_MB2vzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k946smqlfl7canuwic8f.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
and also you can also test the version of the Docker that you have installed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S9D0EEQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pt9sx8v4vq0xvwh7kxy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9D0EEQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pt9sx8v4vq0xvwh7kxy.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And also if you want to run the hello world program you can run the following command&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1SHDRjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1z6iocdmunq74oq993si.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1SHDRjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1z6iocdmunq74oq993si.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus, this says the command that you have already pulled and the image from the hello-world from the docker is already there in your local server (your pc) and also a test for the docker that has been successfully installed also gives you the confidence that you are ready to work for the future projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selecting-an-image-form-the-docker-hub"&gt;
  &lt;/a&gt;
  Selecting an image form the Docker Hub
&lt;/h2&gt;

&lt;p&gt;Now that Docker is up and running, we can choose a picture on which to run our first docker container. To choose from a list of pre-existing Docker images, go to hub.docker.com:&lt;/p&gt;

&lt;p&gt;Make sure you're logged in with your Docker Hub account before entering a search term that matches the name of the application for which you'd like to locate a current Docker picture.&lt;/p&gt;

&lt;p&gt;Best thing is as soon as you install it go and login to the local docker portal that you have installed thus will use the same credentials and will make your life even easier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3m5Kgig2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja6uc0qb54jspxx9a518.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3m5Kgig2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja6uc0qb54jspxx9a518.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This how your local docker desktop local portal looks like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AyaCzWHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j57v1xxz8l67jpc7upus.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyaCzWHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j57v1xxz8l67jpc7upus.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s say that we’d first like to run a TensorFlow server. Type in the search term “tensorflow”. A result list will be presented in the command prompt:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W9GCYVZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfobb0xoxd1hrowi7bm3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9GCYVZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfobb0xoxd1hrowi7bm3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the information tab, you can see a rundown of the image's versions as well as links to the related Dockerfiles.(in the docker hub)&lt;br&gt;
A Dockerfile is a text document that contains all of the commands that you can usually run manually to create a Docker image. Docker will automatically generate images by reading the instructions from a Dockerfile.&lt;br&gt;
Later, we'll go through the steps of creating a Dockerfile.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt; command will give the list of all the images that we have pulled. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0cqyQ8td--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcesoq2wlynblw5hx1le.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cqyQ8td--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcesoq2wlynblw5hx1le.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, the docker pull &amp;gt;repository name&amp;gt; will pull the required image that is desired from the developer if the image exists in the Docker Hub.&lt;/p&gt;

&lt;p&gt;When you want to specifically pull the docker container image from any repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LfSMLcfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtm510lhplffu9szlpi4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LfSMLcfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtm510lhplffu9szlpi4.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you want to pull a "nginx" that is present in the docker hub directly you can use the command below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6VAJ9ZwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cntl8mu4zice4vyozbl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6VAJ9ZwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cntl8mu4zice4vyozbl.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lf0eZ8J0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqr1v8a7cq1iz55s1sra.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lf0eZ8J0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqr1v8a7cq1iz55s1sra.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;docker run&lt;/em&gt; the command shown above this helps in running the container image and will perform the required operation.&lt;br&gt;
&lt;code&gt;-d&lt;/code&gt; detach mode for the operation of the running container.&lt;br&gt;
&lt;code&gt;-t&lt;/code&gt; tag that is used for the new tag to be written for the running container.&lt;br&gt;
&lt;code&gt;-p&lt;/code&gt; is the tag that is used for getting the port to be running.&lt;br&gt;
but when you run the docker container in the interactive mode the logs of the HTTPS gets request on the command line and will have the output which are visible on the command prompt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3_MJ72v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycez0zrw9vi44c69r7ff.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3_MJ72v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycez0zrw9vi44c69r7ff.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tag is the best way to know how you have made some changes in the built container thus they will help us in getting to know the latest version of the code patch that has been released through the repository.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YymUJl4L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45piq2fsyk5umxys5rbr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YymUJl4L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45piq2fsyk5umxys5rbr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6RD-VsAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqj2wft5pbm5e52uvoic.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6RD-VsAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqj2wft5pbm5e52uvoic.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
After running the command and getting the local port:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4oePVtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9in7rp0ctzdfmpjgsfw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4oePVtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9in7rp0ctzdfmpjgsfw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above is a example program to get the command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhzJ7nhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw37kcpm832xsmab494d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhzJ7nhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw37kcpm832xsmab494d.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above will be the sample output that is available on the Browser.&lt;/p&gt;

&lt;p&gt;push is the command that will push the local repository or the tagged image to the "logged hub account"(that is your docker hub account) where every time you make a change the container will be made available through the hub and anybody can pull and work with the repository that has released.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhvFPmv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pe50lhlvvt5vw4c9z4us.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhvFPmv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pe50lhlvvt5vw4c9z4us.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
command to run it with the exec code&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Umrsj5qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32cd038xbwgzsky6kdko.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Umrsj5qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32cd038xbwgzsky6kdko.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;thus when you want to stop the container type in &lt;code&gt;docker stop [container-id]&lt;/code&gt;&lt;br&gt;
This is the set of the container that are up and running thus we need to make one of them stop this I chose the first container in the list of the container and used it for stopping it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZRyWtBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcu1ddvfx8jpn9b5rhsq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZRyWtBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcu1ddvfx8jpn9b5rhsq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
after the command above the code will stop the desired container.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBCLRIjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1493w65552emtrrlz5a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBCLRIjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1493w65552emtrrlz5a.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The one before the execution of the docker stop command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onWz1A4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxggujiqv6llo6k5h7h0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onWz1A4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxggujiqv6llo6k5h7h0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The one after the execution of the docker stop command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7CSxlDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh0ymjgvmoi3oj2ktjo5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7CSxlDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh0ymjgvmoi3oj2ktjo5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we will now jump on the docker services.&lt;/p&gt;

&lt;p&gt;You've also learned how to use Docker images and containers to run applications in a container environment. However, in most real-world settings, a "function" is made up of various components. A web application, for example, necessitates the operation of a web server, which serves content to the browser. A database server is also needed, and the web application connects to the database to retrieve data.&lt;/p&gt;

&lt;p&gt;Now when you are running the images and you feel that it's an overhead in the memory of the system thus you can use the command &lt;code&gt;docker image prune -a&lt;/code&gt; for removing all the images that you pulled or created using the &lt;code&gt;docker build&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;You can orchestrate such "services" in Docker by merging multiple files through &lt;strong&gt;"Docker Swarm"&lt;/strong&gt;. Using this method, we can describe one service that runs the MongoDB database and another service that runs the web application. Docker makes it very simple to describe and run certain services; all we need to do is create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file that declares the services.&lt;/p&gt;

&lt;p&gt;But first, let's start from scratch with a real-world example: In the following steps, we will create a Node.js server program that exposes a REST API for handling Todo objects. The Node.js server connects to a MongoDB database, which is responsible for data persistence, by using the Mongoose library.&lt;/p&gt;

&lt;p&gt;To run this app on Docker, we create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file in which we specify two services: one for running the Node.js server and another for running the MongoDB database. We'll also learn how to link one Docker service to another since the Node.js server program has to connect to the MongoDB database.&lt;/p&gt;

&lt;p&gt;Thus further for the orchestration we will have the Docker Swarm this will be another series on it and also will be doing a series on Kubernetes, so stay tuned folks.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Binary Search Trees</title>
      <author>divya08296</author>
      <pubDate>Tue, 04 May 2021 10:48:25 +0000</pubDate>
      <link>https://dev.to/divya08296/binary-search-trees-2n54</link>
      <guid>https://dev.to/divya08296/binary-search-trees-2n54</guid>
      <description>&lt;p&gt;A Binary Search tree is organized in a Binary Tree. Such a tree can be defined by a linked data structure in which a particular node is an object. In addition to a key field, each node contains field left, right, and p that point to the nodes corresponding to its left child, its right child, and its parent, respectively. If a child or parent is missing, the appropriate field contains the value NIL. The root node is the only node in the tree whose parent field is Nil.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In-Order-Tree-Walk (x): Always prints keys in binary search tree in sorted order.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;INORDER-TREE-WALK (x) - Running time is θ(n)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If x ≠ NIL.&lt;/li&gt;
&lt;li&gt;then INORDER-TREE-WALK (left [x])&lt;/li&gt;
&lt;li&gt;print key [x]&lt;/li&gt;
&lt;li&gt;INORDER-TREE-WALK (right [x])

&lt;ol&gt;
&lt;li&gt;PREORDER-TREE-WALK (x): In which we visit the root node before the nodes in either subtree.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PREORDER-TREE-WALK (x): &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If x ≠ NIL.&lt;/li&gt;
&lt;li&gt;then print key [x]&lt;/li&gt;
&lt;li&gt;PREORDER-TREE-WALK (left [x]).&lt;/li&gt;
&lt;li&gt;PREORDER-TREE-WALK (right [x]).&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>design</category>
      <category>analysis</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>15 Years of Amazon S3 with 'Pi Week' Recap |  Amazon S3 Object Lambda </title>
      <author>Adit Modi</author>
      <pubDate>Tue, 04 May 2021 10:44:43 +0000</pubDate>
      <link>https://dev.to/cloudtech/15-years-of-amazon-s3-with-pi-week-recap-amazon-s3-object-lambda-2c64</link>
      <guid>https://dev.to/cloudtech/15-years-of-amazon-s3-with-pi-week-recap-amazon-s3-object-lambda-2c64</guid>
      <description>&lt;p&gt;Amazon S3 was launched 15 years ago on Pi Day, March 14, 2006, and created the first generally available AWS service. Over that time, data storage and usage has exploded, and the world has never been the same.&lt;/p&gt;

&lt;p&gt;Amazon S3 has virtually unlimited scalability, and unmatched availability, durability, security, and performance. Customers of all sizes and industries can use S3 to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, and big data analytics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y3KRnq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi4a4eewnuqctydvn3vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3KRnq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi4a4eewnuqctydvn3vv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Background: I am Cloud , DevOps &amp;amp; Big Data Enthusiast | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified . &lt;/p&gt;

&lt;p&gt;When you store data in Amazon Simple Storage Service (S3), you can easily share it for use by multiple applications. However, each application has its own requirements and may need a different view of the data. For example, a dataset created by an e-commerce application may include personally identifiable information (PII) that is not needed when the same data is processed for analytics and should be redacted. On the other side, if the same dataset is used for a marketing campaign, you may need to enrich the data with additional details, such as information from the customer loyalty database.&lt;/p&gt;

&lt;p&gt;To provide different views of data to multiple applications, there are currently two options. You either create, store, and maintain additional derivative copies of the data, so that each application has its own custom dataset, or you build and manage infrastructure as a proxy layer in front of S3 to intercept and process data as it is requested. Both options add complexity and costs, so the S3 team decided to build a better solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MAjFAr5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v5g9yctrz1uaoong0gp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MAjFAr5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v5g9yctrz1uaoong0gp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Watch the On-Demand AWS Pi Week 4-day , virtual event which was hosted from March 15-18, 2021 hosted on the AWS channel on Twitch as AWS celebrated the 15th birthday of the AWS Cloud. the event included talks from AWS leaders and experts as they took us back in time reviewing the history of AWS and the key decisions involved in the building and evolution of Amazon S3. they also dived into how you can leverage S3 to control costs and continuously optimize your spend, while building modern, scalable applications.&lt;/p&gt;

&lt;p&gt;The event is ideal to watch for anyone ( on-demand ) who is eager to learn more about:&lt;/p&gt;

&lt;p&gt;How S3 and other AWS services are architected for availability and durability inside AWS Regions and Availability Zones&lt;br&gt;
How S3's strong consistency model works to support many different workloads&lt;br&gt;
The history of and best practices for S3 data security&lt;br&gt;
How AWS architects evolvable services that provide new features and greater scalability with no disruption to customers&lt;br&gt;
Detailed ways to move data into and out of the AWS Cloud &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pages.awscloud.com/pi-week-2021.html"&gt;pi-week&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On-demand AWS Pi Week Twitch video streams&lt;/p&gt;

&lt;p&gt;Day 1 - Amazon S3 origins - foundations of cloud infrastructure&lt;br&gt;
&lt;a href="https://www.twitch.tv/videos/950331443"&gt;Video 1&lt;/a&gt; | &lt;a href="https://www.twitch.tv/videos/950384494"&gt;Video 2&lt;/a&gt;&lt;br&gt;
Day 2 - Building data lakes and enabling data movement&lt;br&gt;
&lt;a href="https://www.twitch.tv/videos/951537246?filter=archives&amp;amp;sort=time"&gt;Video 1&lt;/a&gt; | &lt;a href="https://www.twitch.tv/videos/951772985?filter=archives&amp;amp;sort=time"&gt;Video 2&lt;/a&gt;&lt;br&gt;
Day 3 - Amazon S3 security framework and best practices&lt;br&gt;
&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=952756254&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Day 4 - Amazon S3 and the foundations of a serverless infrastructure&lt;br&gt;
&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=953961080&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's New
&lt;/h1&gt;

&lt;p&gt;S3 Object Lambda was announced by AWS, a new capability that allows you to add your own code to process data retrieved from S3 before returning it to an application. S3 Object Lambda works with your existing applications and uses AWS Lambda functions to automatically process and transform your data as it is being retrieved from S3. The Lambda function is invoked inline with a standard S3 GET request, so you don’t need to change your application code.&lt;/p&gt;

&lt;p&gt;In this way, you can easily present multiple views from the same dataset, and you can update the Lambda functions to modify these views at any time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWIU1BDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6fwlcikcl8nfqbsbw9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWIU1BDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6fwlcikcl8nfqbsbw9v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many use cases that can be simplified by this approach, for example:&lt;/p&gt;

&lt;p&gt;Redacting personally identifiable information for analytics or non-production environments.&lt;br&gt;
Converting across data formats, such as converting XML to JSON.&lt;br&gt;
Augmenting data with information from other services or databases.&lt;br&gt;
Compressing or decompressing files as they are being downloaded.&lt;br&gt;
Resizing and watermarking images on the fly using caller-specific details, such as the user who requested the object.&lt;br&gt;
Implementing custom authorization rules to access data.&lt;br&gt;
You can start using S3 Object Lambda with a few simple steps:&lt;/p&gt;

&lt;p&gt;Create a Lambda Function to transform data for your use case.&lt;br&gt;
Create an S3 Object Lambda Access Point from the S3 Management Console.&lt;br&gt;
Select the Lambda function that you created above.&lt;br&gt;
Provide a supporting S3 Access Point to give S3 Object Lambda access to the original object.&lt;br&gt;
Update your application configuration to use the new S3 Object Lambda Access Point to retrieve data from S3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#availability-and-pricing"&gt;
  &lt;/a&gt;
  Availability and Pricing
&lt;/h2&gt;

&lt;p&gt;S3 Object Lambda is available today in all AWS Regions with the exception of the Asia Pacific (Osaka), AWS GovCloud (US-East), AWS GovCloud (US-West), China (Beijing), and China (Ningxia) Regions. You can use S3 Object Lambda with the AWS Management Console, AWS Command Line Interface (CLI), and AWS SDKs. Currently, the AWS CLI high-level S3 commands, such as aws s3 cp, don’t support objects from S3 Object Lambda Access Points, but you can use the low-level S3 API commands, such as aws s3api get-object.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;S3 Object Lambda&lt;/strong&gt;, you pay for the AWS Lambda compute and request charges required to process the data, and for the data S3 Object Lambda returns to your application. You also pay for the S3 requests that are invoked by your Lambda function. For more pricing information, please see the Amazon S3 pricing page.&lt;/p&gt;

&lt;p&gt;This new capability makes it much easier to share and convert data across multiple applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-glacier-announces-a-40-price-reduction-for-put-and-lifecycle-requests"&gt;
  &lt;/a&gt;
  Amazon S3 Glacier announces a 40% price reduction for PUT and Lifecycle requests
&lt;/h2&gt;

&lt;p&gt;Amazon S3 is reducing the cost to move data to Amazon S3 Glacier by lowering PUT and Lifecycle request charges by 40% for all AWS Regions. You can use the S3 PUT API to directly store compliance and backup data in S3 Glacier that does not require immediate access. You can also use S3 Lifecycle policies to move data from S3 Standard, S3 Standard-Infrequent Access, or S3 One Zone-Infrequent Access to S3 Glacier to save on storage costs when data becomes rarely accessed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon S3 Glacier&lt;/strong&gt; is a secure, durable, and extremely low-cost Amazon S3 cloud storage class for data archiving and long-term backup. S3 Glacier provides a low-cost option for archiving data accessed once per quarter that needs to be accessible within minutes to a few hours.&lt;/p&gt;

&lt;p&gt;In addition to being durable and secure, the S3 Glacier storage class is now even more cost-effective than before. Effective March 1, 2021, AWS is lowering the charges for PUT and Lifecycle requests to S3 Glacier by 40% for all AWS Regions. This includes the AWS GovCloud (US) Regions, the AWS China (Beijing) Region, operated by Sinnet, and the AWS China (Ningxia) Region, operated by NWCD. To learn more, see the S3 pricing page, and get started in the S3 console.&lt;/p&gt;

&lt;p&gt;I hope this guide helps you understand all the new aws s3 features that were launched during the pi week, I know it's a little late to give a recap on "pi week" but I had like to do it anyways, feel free to contact me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>beginners</category>
      <category>aws</category>
    </item>
    <item>
      <title>Create Ascii art with Python</title>
      <author>Stokry</author>
      <pubDate>Tue, 04 May 2021 10:44:11 +0000</pubDate>
      <link>https://dev.to/stokry/create-ascii-art-with-python-31nd</link>
      <guid>https://dev.to/stokry/create-ascii-art-with-python-31nd</guid>
      <description>&lt;p&gt;Hello all, in today's quick tutorial I will show you a small Python script that converts image files into beautiful ASCII art. &lt;/p&gt;

&lt;p&gt;This is our test image: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TeMy_bmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/P4P16kN/test1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TeMy_bmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/P4P16kN/test1.jpg" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
Let's jump to the code:&lt;/p&gt;

&lt;p&gt;First we need to import our dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;termcolor&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;colored&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;colorama&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we need to read our image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;colorama&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test1.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we will be converting it into grayscale&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AsciiArt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_path&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after that, we resize the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
        &lt;span class="n"&gt;aspect_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="n"&gt;new_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;
        &lt;span class="n"&gt;new_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aspect_ratio&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;new_width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.55&lt;/span&gt;
        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;new_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_height&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;new size of image, and we convert image to greyscale format&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace each pixel with a character from array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;amp;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"@"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;new_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pixel&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pixel&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;new_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;split string of chars into multiple strings of length equal to new width and create a list&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;new_pixels_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ascii_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;new_width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_pixels_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;ascii_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascii_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascii_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;write to a text file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;      &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ascii_image.txt"&lt;/span&gt;
      &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascii_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"saved art image to file as &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"yellow"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;AsciiArt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our final result -&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHnJvjQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bHDsJ16/final.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHnJvjQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bHDsJ16/final.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you all. &lt;/p&gt;

</description>
      <category>python</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Great blogs from the past week to satisfy your reading needs! 🤓</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Tue, 04 May 2021 10:37:44 +0000</pubDate>
      <link>https://dev.to/technoglot/great-blogs-from-the-past-week-to-satisfy-your-reading-needs-5a1f</link>
      <guid>https://dev.to/technoglot/great-blogs-from-the-past-week-to-satisfy-your-reading-needs-5a1f</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@siora18?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Siora Photography&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/reading?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello DEV fam! 👋🏻 And welcome (back) to another edition of #bestofdev by yours truly, technoglot! 🙇🏻‍♀️&lt;/p&gt;

&lt;p&gt;You know the drill by now, but I'll repeat myself for the newcomers 😉. This blog series is dedicated to great, yet underrated blogs I read over the weekend. I believe they deserve more attention, hence the reason I compile this short list on a weekly basis.&lt;/p&gt;

&lt;p&gt;To celebrate this 3rd edition (and the fact that I read too much last weekend), I figured I'd make the list a little longer. Hope you don't mind! 😊&lt;/p&gt;

&lt;p&gt;Without further delay, let's dive right into this week's picks! 🤿&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Obligatory disclaimer 🚨&lt;/strong&gt;: Do y'all even read this stuff? Anyway... I'm doing this out of my personal motivation. None of these great authors/bloggers asked me for any promo. I still think they deserve a shout out, so here it goes. The order in which I list the posts is totally random, by the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #1️⃣
&lt;/h1&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/juanfrank77"&gt;@juanfrank77&lt;/a&gt;
 absolutely killed it with this one! 👌🏻 If you ever thought you can't learn something from writing, think again! Be sure to pick up some wisdom from this one. 🤓&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/juanfrank77" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgoHXQfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bUNDSqew--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/76104/fc27d428-3e02-44da-8677-6ef7e1e55c00.jpeg" alt="juanfrank77 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/juanfrank77/can-you-learn-something-new-by-writing-5gpm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Can you learn something new by writing?&lt;/h2&gt;
      &lt;h3&gt;Juan F Gonzalez  ・ Apr 26 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#learning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #2️⃣
&lt;/h1&gt;

&lt;p&gt;Working from home can be tough! 😫 No problem, &lt;a class="mentioned-user" href="https://dev.to/sandordargo"&gt;@sandordargo&lt;/a&gt;
 has your back with 5 great productivity tips to get more done while working from home. Must read for anyone struggling with the new normal! &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/sandordargo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6KfStcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PTqNI8Xw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37458/adbc8839-4e49-4a14-bb5d-7a70ff635d1f.jpg" alt="sandordargo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sandordargo/another-5-great-productivity-tips-for-working-from-home-1f5a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Another 5 great productivity tips for working from home!&lt;/h2&gt;
      &lt;h3&gt;Sandor Dargo ・ Apr 28 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #3️⃣
&lt;/h1&gt;

&lt;p&gt;Ah, the newbies! 🐣 How should you prepare to welcome them in your company? Check this blog post out, where &lt;a class="mentioned-user" href="https://dev.to/tiina"&gt;@tiina&lt;/a&gt;
 gives actionable tips on how to better onboard newcomers in your company. Great read, trust me! 💯&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/tiina" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwhzRMPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SfCBLMWh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/622503/8cc52944-6528-4703-8843-deef28be836e.jpg" alt="tiina image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tiina/how-company-should-prepare-for-a-newcomer-30p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How company should prepare for a newcomer&lt;/h2&gt;
      &lt;h3&gt;Tiina ・ Apr 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#onboarding&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#culture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #4️⃣
&lt;/h1&gt;

&lt;p&gt;Now, now. Who doesn't love a little controversy? (It's okay if you don't 😉) &lt;a class="mentioned-user" href="https://dev.to/sonny_ad"&gt;@sonny_ad&lt;/a&gt;
 takes you on an unexpected ride and tells you why you definitely shouldn't be a fullstack dev. Curious? Click that link and binge read!&lt;/p&gt;

&lt;p&gt;P.S.: Oopsie, this one's not from last week, but I'm too lazy to replace it! 😜&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/sonny_ad" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKD7LVgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mjZJEKu8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/612697/a5628e43-f96a-4f80-9ee5-283fa8d30e97.jpeg" alt="sonny_ad image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sonny_ad/why-you-shouldn-t-be-a-full-stack-engineer-faa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why you shouldn't be a full-stack engineer&lt;/h2&gt;
      &lt;h3&gt;Sonny Alves Dias ・ Apr 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#fullstack&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#junior&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #5️⃣
&lt;/h1&gt;

&lt;p&gt;Do you even single-task, bro? To all the multi-taskers out there: this one's for you! 📢 &lt;a class="mentioned-user" href="https://dev.to/kristimke"&gt;@kristimke&lt;/a&gt;
 shares the importance of single tasking with us and provides 3 tips for leaving behind multitasking once and for all (it will take some effort on your end though 🤭).&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kristimke" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U4Bvc8UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--c8wPQmOa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613705/b7c121d6-cae6-4b38-95bd-93375da76f2b.jpeg" alt="kristimke image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kristimke/3-single-tasking-tips-to-improve-your-focus-22k5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 Single-Tasking Tips to Improve Your Focus&lt;/h2&gt;
      &lt;h3&gt;Kristi Anderson ・ Apr 29 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ai&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#culture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#leadership&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #6️⃣
&lt;/h1&gt;

&lt;p&gt;Similarly, I'd like to ask you: do you ask GOOD questions? If you are unsure, you better read &lt;a class="mentioned-user" href="https://dev.to/tkdodo"&gt;@tkdodo&lt;/a&gt;
 's post on how to ask better questions. Tip 💡: don't start with "How can I..."!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/tkdodo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpYx8dD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4QV2Zd80--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/536846/96ff5cb8-c744-41e7-b480-b5bee2cba2b5.jpeg" alt="tkdodo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tkdodo/how-can-i-1pf2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How can I ... ?&lt;/h2&gt;
      &lt;h3&gt;Dominik D ・ Apr 25 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#pick-"&gt;
  &lt;/a&gt;
  Pick #7️⃣
&lt;/h1&gt;

&lt;p&gt;Ever heard of lateral thinking? Bet you haven't! 😜 Now, here's a little gem by &lt;a class="mentioned-user" href="https://dev.to/krisplatis"&gt;@krisplatis&lt;/a&gt;
 I found grabbing dust around here. In this post you'll be gently introduced to the concept of thinking backwards. Confused? 🥴 Solve that by reading this short yet thought provoking post!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/krisplatis" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QpxGwSbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bhPtcTEz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/277429/ed9283f3-74c5-48f7-aa6b-dd3560c19b5a.jpg" alt="krisplatis image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/krisplatis/seek-ideal-solutions-by-thinking-backwards-from-the-goal-to-the-starting-point-2mhj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Seek ideal solutions by thinking backwards: from the goal to the starting point ⏮&lt;/h2&gt;
      &lt;h3&gt;Krzysztof Platis ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#thinking&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lateralthinking&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#its-a-wrap"&gt;
  &lt;/a&gt;
  It's a wrap! 🌯
&lt;/h1&gt;

&lt;p&gt;That's all for this one fam! Be sure to check these posts out and show the authors some love! 💖 If you enjoyed this blog, be sure to let me know below 👇🏻 and stay put for next week's edition.&lt;/p&gt;

&lt;p&gt;Until then! 👩🏻‍💻&lt;/p&gt;

&lt;p&gt;P.S.: TIL that you cannot tag more than 7 people in a blog post here on DEV 😱&lt;/p&gt;

</description>
      <category>bestofdev</category>
      <category>icymi</category>
      <category>writing</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Handling burnouts as a developer!</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 04 May 2021 10:35:50 +0000</pubDate>
      <link>https://dev.to/ms_yogii/handling-burnouts-as-a-developer-2ng7</link>
      <guid>https://dev.to/ms_yogii/handling-burnouts-as-a-developer-2ng7</guid>
      <description>&lt;p&gt;Hello Folks, &lt;/p&gt;

&lt;p&gt;I mostly prefer talking about technical things in my articles but today’s article is as important as all those technical skills! As a developer, the only thing which remains constant for us is continuous learning and while choosing this path we all have signed-up for this. Though most of the time we enjoy learning, there are times when this feels overwhelming, draining and demotivating. &lt;/p&gt;

&lt;p&gt;We all go through this at some point, but we hardly talk about this!&lt;/p&gt;

&lt;p&gt;It’s been more than a year now that we have shifted to work from home culture. It made a huge shift in our daily routines, lifestyles and habits. But one major change it caused was taking less days off! Not only this, if you are someone like me, who is working on some &lt;a href="http://peerlist.io/"&gt;side-project&lt;/a&gt;, then this day off comes as a more opportunity to work and that is what I did for the past 6 months (not a single day off!😨)&lt;/p&gt;

&lt;p&gt;After this over working, I felt burned out! I posted this on twitter and the people around me taught me some really good tips to handle this in a better way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ms_yogii/status/1384388410769506306"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5PQAKFo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqe4lametmz0aqvlvz2g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will be sharing those tips with you 😇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-lets-understand-why-this-happened"&gt;
  &lt;/a&gt;
  First, let’s understand why this happened?
&lt;/h3&gt;

&lt;p&gt;Burnouts are mostly the outcome of overworking, I know this is a very basic thing, but we tend to avoid digging deep and not understanding the root cause. As a developer, all our work is done sitting at one place solving problems. We start working on one thing to another without switching in-between. This is the exact opposite of doing a physical activity, which looks more rewarding. &lt;/p&gt;

&lt;p&gt;If you are doing some physical activity, like walking, hiking or anything, you can easily measure your progress, as it is clearly visible. But while coding, if you have solved half the logic of your bug spending 4 hours on it, that doesn’t look like progress! &lt;/p&gt;

&lt;p&gt;Here are some solutions to this - &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-breaks-spend-some-time-without-any-screen"&gt;
  &lt;/a&gt;
  Take breaks, spend some time without any screen!
&lt;/h3&gt;

&lt;p&gt;Solution is, rewarding yourself with some free time after a small accomplishment! You may have a huge to-do, a prod deployment ahead or any urgent task, NEVER stop taking a break! This is the reason why pomodoro technique is so efficient. If you want to save draining yourself, you will need to take breaks and enjoy some free time away from the screen. This thing will be very helpful when you have a lot of work to do! &lt;/p&gt;

&lt;p&gt;I used to think, taking a break will waste my time and I will not be able to finish these tasks. But, practically, it calms you down giving you more energy to focus and finish tasks within time. We all know this, but we underestimate it a lot!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-up-your-creative-side"&gt;
  &lt;/a&gt;
  Open up your creative side!
&lt;/h3&gt;

&lt;p&gt;Everyone has some hobby, some creative side of themselves. Give it some room. I was not doing any activity apart from coding and daily chores. That was a mistake. Because of continuous work, I was not giving myself time to reflect on the things happening around or even to understand something is going wrong with me. &lt;/p&gt;

&lt;p&gt;To understand this, to think through the situation, try working on some creative stuff. Draw, paint, knit, do anything, which will keep your mind idle yet feeling comfortable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-mindfulness"&gt;
  &lt;/a&gt;
  Practice mindfulness!
&lt;/h3&gt;

&lt;p&gt;I have this habit of planning things ahead of time. This helps me finish things, but it has a drawback of keeping me worried all the time. I used to take frequent breaks, but during those breaks, I used to plan my next activities. That way you still continue your work and the break doesn't remain a break! To stop this, you need to practice mindfulness. Being in the moment and not planning anything! This sounds little philosophical, but people like me who are obsessive planners will need to understand this! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-and-most-important-limit-social-media"&gt;
  &lt;/a&gt;
  Last and Most Important, Limit social media!
&lt;/h3&gt;

&lt;p&gt;You might think, this has nothing to do with burnout, but trust me it has! Social media is full of success stories, but out of those, very few people talk about the struggles. Social media always shows only the success without giving much focus on many lost attempts. Being on social media, we unknowingly compare our success with someone else and start to feel low! This makes you work more, without enjoying it and end up getting burnout!&lt;/p&gt;

&lt;p&gt;Afterall, the ultimate aim is to enjoy doing what we are doing 🥰&lt;/p&gt;

&lt;p&gt;I hope with these things in your mind, you might handle your burnouts better than me 😅 or at least save yourself from getting burned out! I would love to listen to your stories or ways of handling this, please share them in comments or message me on &lt;a href="https://twitter.com/ms_yogii"&gt;Twitter&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;In case, you are curious to know, I have been working on a side project for creating a single work profile. You can check that &lt;a href="https://peerlist.io/"&gt;here&lt;/a&gt; and share your feedback about it. I would love to understand! &lt;/p&gt;

&lt;p&gt;Thank you so much for reading this article!&lt;br&gt;
Keep growing 🙌&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>watercooler</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Automate your data processing pipeline in 9 steps ⚙️</title>
      <author>Lorena Ciutacu</author>
      <pubDate>Tue, 04 May 2021 10:10:01 +0000</pubDate>
      <link>https://dev.to/n8n/automate-your-data-processing-pipeline-in-9-steps-9de</link>
      <guid>https://dev.to/n8n/automate-your-data-processing-pipeline-in-9-steps-9de</guid>
      <description>&lt;p&gt;&lt;strong&gt;If you've ever struggled with setting up pipelines for extracting, transforming, and loading data (so-called ETL jobs), managing different databases, and scheduling workflows -- know that there's an easier way to automate these data engineering tasks. In this article, you'll learn how to build an n8n workflow that processes text, stores data in two databases, and sends messages to Slack.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few months ago, I completed a Data Science bootcamp, where one week was all about data engineering, ETL pipelines, and workflow automation. The project for that week was to create a database of tweets that use the hashtag #OnThisDay, along with their sentiment score, and post tweets in a Slack channel to inform members about historical events that happened on that day. This pipeline had to be done with &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; and included six steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Collect tweets with the hashtag #OnThisDay&lt;/li&gt;
&lt;li&gt; Store the collected tweets in a &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; database&lt;/li&gt;
&lt;li&gt; Extract tweets from the database&lt;/li&gt;
&lt;li&gt; Process the tweets (clean the text, analyse sentiment)&lt;/li&gt;
&lt;li&gt; Load the cleaned tweets and their sentiment score in a &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt; database&lt;/li&gt;
&lt;li&gt; Extract and post tweets with positive sentiment in a &lt;a href="https://slack.com/intl/en-de/"&gt;Slack&lt;/a&gt; channel&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZnUH2Vo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://n8n.io/blog/content/images/2021/04/ETL_pipeline_simple2-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZnUH2Vo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://n8n.io/blog/content/images/2021/04/ETL_pipeline_simple2-1.png" alt="ETL pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a fun project that offers lots of learning opportunities about different topics: APIs, text processing with Natural Language Processing libraries, both relational and non-relational databases, social media and communication apps, as well as workflow orchestration. If you're wondering, like I did, why we had to use two different databases, the answer is simple: for the sake of learning more. Postgres and MongoDB represent not only different database providers, but different kinds of database structures -- &lt;a href="https://www.mongodb.com/nosql-explained/nosql-vs-sql"&gt;relational (SQL) vs non-relational (NoSQL)&lt;/a&gt; -- and it's useful to be familiar with both.&lt;/p&gt;

&lt;p&gt;Though our use case is just for fun, this pipeline can support most common data engineering tasks (e.g. aggregating data from multiple sources, setting up and managing the data flow across databases, developing and maintaining data pipelines).&lt;/p&gt;

&lt;p&gt;I was really excited, though also a bit overwhelmed by all the things I had to set up for this project. In total, I spent five days learning the tools, debugging, and building this pipeline with Python (including libraries like &lt;a href="https://www.tweepy.org/"&gt;Tweepy&lt;/a&gt;, &lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt;, &lt;a href="https://github.com/cjhutto/vaderSentiment"&gt;VADER&lt;/a&gt;, and &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;), Postgres, MongoDB, &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, and &lt;a href="https://airflow.apache.org/"&gt;Airflow&lt;/a&gt; (most frustrating part...). If you're interested to see how I did this, you can check out the project on &lt;a href="https://github.com/lorenanda/tweets-docker-pipeline"&gt;GitHub&lt;/a&gt; and read &lt;a href="https://lorenaciutacu.com/2020-11-14-bootcamp7/"&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But in this article, I'll show you an easier way to achieve the same result in as much as an hour -- with n8n!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h1&gt;

&lt;p&gt;Since I started using n8n, I've been looking for use cases for various data science tasks, starting with my existing projects. When I realised that all the apps and services that I used in my tweets pipeline are available as n8n nodes, I decided to replicate the project as an n8n workflow with nine nodes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.cron/"&gt;Cron node&lt;/a&gt; to schedule the workflow&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.twitter/"&gt;Twitter node&lt;/a&gt; to collect the tweets&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.mongoDb/"&gt;MongoDB&lt;/a&gt; to store the tweets&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.googleCloudNaturalLanguage/"&gt;Google Cloud Natural Language&lt;/a&gt; to analyse the sentiment of the tweets&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.set/"&gt;Set&lt;/a&gt; to extract the sentiment values&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.postgres/"&gt;Postgres&lt;/a&gt; to store the tweets and their sentiment&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.if/"&gt;IF&lt;/a&gt; to filter positive and negative tweets&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.slack/"&gt;Slack&lt;/a&gt; to post tweets into a channel&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.n8n.io/nodes/n8n-nodes-base.noOp/"&gt;NoOp&lt;/a&gt; to ignore negative tweets&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AM-OZ81I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/F42x14NNPvLbk_b68rOkkpXQDLRegGXTOjkK3PONzLJxPdoaAquCW32eYMzM0aLO2svLcCvv7txB8km2DWg7H7i55AmR67u2b624CXf_hXqfogfpEbCjS6poAxIu235bQ6UtJUVC" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AM-OZ81I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/F42x14NNPvLbk_b68rOkkpXQDLRegGXTOjkK3PONzLJxPdoaAquCW32eYMzM0aLO2svLcCvv7txB8km2DWg7H7i55AmR67u2b624CXf_hXqfogfpEbCjS6poAxIu235bQ6UtJUVC" alt="n8n workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I'll show you how to set up this workflow node by node. If this is your first n8n workflow, have a look at our &lt;a href="https://docs.n8n.io/getting-started/quickstart.html"&gt;quickstart guide&lt;/a&gt; to learn how to set up n8n and how to navigate the Editor UI. It's also helpful to have at least basic knowledge of databases and SQL.&lt;/p&gt;

&lt;p&gt;Once you have your n8n Editor UI open, there are two ways to follow this tutorial: either copy the workflow from &lt;a href="https://n8n.io/workflows/1045"&gt;here&lt;/a&gt; into your Editor UI and deactivate the nodes, so that you can execute and test each node separately, or add the nodes one at a time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-starting-the-workflow"&gt;
  &lt;/a&gt;
  1. Starting the workflow
&lt;/h2&gt;

&lt;p&gt;We will begin with the end in mind: We know that we want this whole workflow to run every day, so first we need to set up the &lt;strong&gt;Cron node&lt;/strong&gt; to trigger our workflow every day at 06:00.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cF49RzS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/fY39vU3j9UgE-kZa7oCbuGLckzIYtlhGxNIYXpraCR7SljiX1t9zpwOp0rd6-agoXRY6RS4c3N4P7gpwG9lQE5D55WMvRaaYrEYfHOqjWf0oUMIuxW1gPOC8RxolI3JbB46NUqJg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cF49RzS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/fY39vU3j9UgE-kZa7oCbuGLckzIYtlhGxNIYXpraCR7SljiX1t9zpwOp0rd6-agoXRY6RS4c3N4P7gpwG9lQE5D55WMvRaaYrEYfHOqjWf0oUMIuxW1gPOC8RxolI3JbB46NUqJg" alt="Cron node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Cron node makes it very easy to schedule and trigger workflows, compared to setting up &lt;a href="https://airflow.apache.org/docs/apache-airflow/1.10.1/scheduler.html"&gt;scheduling and triggers in Airflow&lt;/a&gt;, and this saved me so much time and nerves!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-collecting-tweets"&gt;
  &lt;/a&gt;
  2. Collecting tweets
&lt;/h2&gt;

&lt;p&gt;Next, we are going to collect tweets with the hashtag #OnThisDay. To do this, first you need to create a &lt;a href="https://developer.twitter.com/"&gt;Twitter Developer&lt;/a&gt; account and register an app. Follow the instructions &lt;a href="https://docs.n8n.io/credentials/twitter/"&gt;in our reference docs&lt;/a&gt; to learn how to set up your Twitter app and get the necessary credentials (Consumer Key and Consumer Secret). Once you have your credentials, copy and paste them in the &lt;strong&gt;&lt;em&gt;Credentials&lt;/em&gt;&lt;/strong&gt; field of the &lt;strong&gt;Twitter node&lt;/strong&gt;. Next, set the parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;Operation&lt;/em&gt;: Search&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Search Text&lt;/em&gt;: #OnThisDay&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Limit&lt;/em&gt;: 3. This last step is not mandatory, but I recommend limiting the number of collected tweets at least for testing the workflow, to ensure that you don't reach the query rate limit of the Twitter API and Google Cloud Natural Language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fdGOpVwe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/PeJmypmy2yeLPl6LUmqTdVOlYI3tU-gc4LNfO8WSWKxor8wotBiaNYVbYoJbVMKHDfXlDRH1EHQW2OXnsqYoIQE-YrVjlAcyMIxfUToopAaERnM9UJKHszGPMpCC_jedmI04lu8K" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fdGOpVwe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/PeJmypmy2yeLPl6LUmqTdVOlYI3tU-gc4LNfO8WSWKxor8wotBiaNYVbYoJbVMKHDfXlDRH1EHQW2OXnsqYoIQE-YrVjlAcyMIxfUToopAaERnM9UJKHszGPMpCC_jedmI04lu8K" alt="Twitter node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-inserting-tweets-into-mongodb"&gt;
  &lt;/a&gt;
  3. Inserting tweets into MongoDB
&lt;/h2&gt;

&lt;p&gt;Now that we collected some tweets, we need to store them into a database. MongoDB is a non-relational database (NoSQL) that stores data in JSON-like documents. Since our tweets are returned in JSON format, MongoDB is the ideal database to store them in and the &lt;strong&gt;MongoDB node&lt;/strong&gt; allows us to connect to the database. Before configuring the node, you need to create a MongoDB instance, set up a cluster, create a database and a collection within it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://account.mongodb.com/account/register"&gt;Create a MongoDB account&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; Set up a cluster: &lt;em&gt;cloud.mongodb.com &amp;gt; Clusters &amp;gt; Create New Cluster&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; Create a database: &lt;em&gt;Cluster &amp;gt; Collections &amp;gt; Create Database&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; Create a collection: &lt;em&gt;Cluster &amp;gt; Collections &amp;gt; Database &amp;gt; Create Collection&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; Create a field: &lt;em&gt;Collection &amp;gt; Insert document &amp;gt; Type the field "text" below "_id"&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; Allow access to the database: &lt;em&gt;Project &amp;gt; Security &amp;gt; Network Access &amp;gt; IP Access List &amp;gt; Add your IP address.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; Connect to the database from your terminal:
&lt;em&gt;mongo "mongodb+srv://YourClusterName.mongodb.net/" --username YourUsername&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you need more detailed information or other set up options, refer to the &lt;a href="https://docs.atlas.mongodb.com/connect-to-cluster/"&gt;MongoDB documentation&lt;/a&gt;. Now that we have a MongoDB collection up and running, we can set up the MongoDB node for our workflow. Set up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;Connection String&lt;/em&gt;: mongodb+srv://YourClusterName.mongodb.net/YourDatabaseName&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Database&lt;/em&gt;: YourDatabaseName&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpaf3f75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/bZKvOmb77F_53sYOrMb9vhozRKP9ONC7_GXTx3yRwGpA3QZIx-mK7JY-El3W_n7kzrNo4GTB6_yOfUgTyJ39ki3wrrbEv1b4z_UeWIq7qB_sVLhUWo1sIWOQmkhbkMn-Kz0vw0VI" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpaf3f75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/bZKvOmb77F_53sYOrMb9vhozRKP9ONC7_GXTx3yRwGpA3QZIx-mK7JY-El3W_n7kzrNo4GTB6_yOfUgTyJ39ki3wrrbEv1b4z_UeWIq7qB_sVLhUWo1sIWOQmkhbkMn-Kz0vw0VI" alt="MongoDB node credentials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, configure the node parameters to insert the collected tweets into the collection:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;Operation&lt;/em&gt;: Insert&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Collection&lt;/em&gt;: YourCollectionName&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Fields&lt;/em&gt;: text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1H-KEkte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/F4KpCoY7W8hor4N7si5b_U8QBtNiR-cKfBYdMeZIl7AJ00YlsVhWSZmI61yIfU5qFuPi2x0D7jxQeYIJqi1u-75m67AhIFeMSdeNOPkh7aX21ia6Oomz3csSUP-VFoPrX7E1DJiS" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1H-KEkte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/F4KpCoY7W8hor4N7si5b_U8QBtNiR-cKfBYdMeZIl7AJ00YlsVhWSZmI61yIfU5qFuPi2x0D7jxQeYIJqi1u-75m67AhIFeMSdeNOPkh7aX21ia6Oomz3csSUP-VFoPrX7E1DJiS" alt="MongoDB node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-analysing-the-sentiment-of-tweets"&gt;
  &lt;/a&gt;
  4. Analysing the sentiment of tweets
&lt;/h2&gt;

&lt;p&gt;Here comes my personal favourite part of this workflow: analysing the sentiment of tweets, i.e. the feeling associated with the entire text or entities in the text. For this, we use the &lt;strong&gt;Google Cloud Natural Language node&lt;/strong&gt;, which analyses a text and returns two numerical values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;score&lt;/strong&gt;: Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;magnitude&lt;/strong&gt;: A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both results are returned as documentSentiment in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"magnitude": number,
"score": number
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before configuring the node, you have to sign up on the &lt;a href="https://cloud.google.com/"&gt;Google Cloud Platform&lt;/a&gt; to enable the API and get the necessary credentials (Client ID and Client Secret). Follow the instructions in &lt;a href="https://docs.n8n.io/credentials/google/#prerequisites"&gt;our reference docs&lt;/a&gt; to set up your account and the node credentials.&lt;/p&gt;

&lt;p&gt;Once that's done, add an expression to the parameter &lt;em&gt;Content&lt;/em&gt; by clicking on the gear icon and selecting &lt;em&gt;Current Node &amp;gt; Input Data &amp;gt; text&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RX9pgidQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/utW8tHN_ZgvOkw91HB2S63vwMvi4ujHuR2RAQGYw_Q0D2vaTKDFbROda34tQZ2P5zc_pJyt32ZeNE8cML4h4X-CoaGHlkzgI-fG1nWEVN1zknH7KK01ElxP8aPrE02prcX7SUrhj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RX9pgidQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/utW8tHN_ZgvOkw91HB2S63vwMvi4ujHuR2RAQGYw_Q0D2vaTKDFbROda34tQZ2P5zc_pJyt32ZeNE8cML4h4X-CoaGHlkzgI-fG1nWEVN1zknH7KK01ElxP8aPrE02prcX7SUrhj" alt="Google Cloud Natural Language node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a side note, here it was interesting to see how differently Google Cloud Natural Language and the VADER and TextBlob libraries evaluated the sentiment of text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggeUnXYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Agd2ScjDEEyfYLHuQmYQdKw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggeUnXYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Agd2ScjDEEyfYLHuQmYQdKw.png" alt="Sentiment analysis table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-processing-sentiment-analysis"&gt;
  &lt;/a&gt;
  5. Processing sentiment analysis
&lt;/h2&gt;

&lt;p&gt;Now that we have sentiment scores for each tweet, we want to insert the text, sentiment score, and magnitude of the tweets into a new Postgres database. Since the magnitude sentiment score and the magnitude are included in the documentSentiment, we need to extract them in order to insert the values in two separate columns in Postgres.&lt;/p&gt;

&lt;p&gt;For this, we use the &lt;strong&gt;Set node&lt;/strong&gt;, which allows us to set new values based on the data we already have. In the node parameters, set three values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Score&lt;/strong&gt; (number): &lt;em&gt;Current Node &amp;gt; Input Data &amp;gt; JSON &amp;gt; documentSentiment &amp;gt; score&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Magnitude&lt;/strong&gt; (number): &lt;em&gt;Current Node &amp;gt; Input Data &amp;gt; JSON &amp;gt; documentSentiment &amp;gt; score&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Text&lt;/strong&gt; (string): &lt;em&gt;Current Node &amp;gt; Input Data &amp;gt; JSON &amp;gt; sentences &amp;gt; [Item: 0] &amp;gt; text &amp;gt; content&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPhNsUnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/TGiCiuzI7T0I1vzsCKqI9K6HKL040hSPqXMnq-bYgSB3Hp-t6iKXbxc_W8jbg2njiV5BMl8ztpgZbpEAvg1ulpVror7ln-mxIgbYejaDZC8BJW5EafnZILkkxijuHoSr7aO-e4ax" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPhNsUnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/TGiCiuzI7T0I1vzsCKqI9K6HKL040hSPqXMnq-bYgSB3Hp-t6iKXbxc_W8jbg2njiV5BMl8ztpgZbpEAvg1ulpVror7ln-mxIgbYejaDZC8BJW5EafnZILkkxijuHoSr7aO-e4ax" alt="Set node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-inserting-tweets-values-into-postgres"&gt;
  &lt;/a&gt;
  6. Inserting tweets values into Postgres
&lt;/h2&gt;

&lt;p&gt;Next, we want to insert the newly set data values into a Postgres database. First, you need to &lt;a href="https://www.postgresql.org/download/"&gt;install Postgres&lt;/a&gt;, then create a database and a table for tweets. The process is quite similar to the MongoDB setup and you can do this from your terminal:&lt;/p&gt;

&lt;p&gt;1. Connect to Postgres:&lt;code&gt;psql&lt;/code&gt;&lt;br&gt;
2. Create a database: &lt;code&gt;createdb twitter&lt;/code&gt;&lt;br&gt;
3. Go into the created database: &lt;code&gt;psql twitter&lt;/code&gt;&lt;br&gt;
4. Create columns in the database. The columns have to be named like the values defined in the Set node, in order to be matched: &lt;code&gt;CREATE TABLE tweets (text varchar(280), score numeric(4,3), magnitude numeric(4,3));&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can go ahead and configure the &lt;strong&gt;Postgres node&lt;/strong&gt;. Fill in the name of your database, username, and password in the &lt;em&gt;Credential Data&lt;/em&gt; fields, then configure the node parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;Operation&lt;/em&gt;: Insert&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Table&lt;/em&gt;: tweets&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Columns&lt;/em&gt;: text, score, magnitude&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Return Fields&lt;/em&gt;: *&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I6ApxMr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/5A9pkc4DcQO5YE5IOJSPopYst9ELHwcISIDHxnfQI3T2CwZpio5ATw31y-AFCqLVT77EDSALP0Q43cbeBQ9D7G6pXGNTObA9KDexwmoIMNGDv038x0mHqdWEI2jxywKGVJgQscRV" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I6ApxMr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/5A9pkc4DcQO5YE5IOJSPopYst9ELHwcISIDHxnfQI3T2CwZpio5ATw31y-AFCqLVT77EDSALP0Q43cbeBQ9D7G6pXGNTObA9KDexwmoIMNGDv038x0mHqdWEI2jxywKGVJgQscRV" alt="Postgres node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After executing the node, you can check if the tweets have been inserted in the table by running &lt;em&gt;SELECT * FROM tweets;&lt;/em&gt; in the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-filtering-positive-and-negative-tweets"&gt;
  &lt;/a&gt;
  7. Filtering positive and negative tweets
&lt;/h2&gt;

&lt;p&gt;Here comes another fun part related to sentiment analysis: filtering negative tweets. For this, we use the &lt;strong&gt;IF node&lt;/strong&gt;, which allows us to split the workflow conditionally based on comparison operations. We define positive tweets as those with a sentiment score above 0. To configure the IF node with this condition, configure the parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;Value 1&lt;/em&gt;: Current Node &amp;gt; Input Data &amp;gt; JSON &amp;gt; score&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Operation:&lt;/em&gt; Larger&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Value 2:&lt;/em&gt; 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Izh7BLgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/BvZZPOZzhvwmfD9T7Ogs0bnHb5b8dasX2xnAuSD_cppyZ2fWiMFVPV3uo4oUKsAfBabCCvHg4vlbm-RfDrceHdDTse2D0uJ2ncuEOFSwnndptKsa2yqmLb9Av28TKD1O01SAm_XV" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Izh7BLgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/BvZZPOZzhvwmfD9T7Ogs0bnHb5b8dasX2xnAuSD_cppyZ2fWiMFVPV3uo4oUKsAfBabCCvHg4vlbm-RfDrceHdDTse2D0uJ2ncuEOFSwnndptKsa2yqmLb9Av28TKD1O01SAm_XV" alt="IF node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This condition determines the data flow to the following connection: if the sentiment score is greater than 0, the tweet will be sent to Slack, otherwise it will just be kept stored in the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-sending-positive-tweets-to-slack"&gt;
  &lt;/a&gt;
  8. Sending positive tweets to Slack
&lt;/h2&gt;

&lt;p&gt;The way to send tweets from a database to a Slack channel is via a Slackbot, which you have to create from your Slack account. Follow the instructions &lt;a href="https://api.slack.com/bot-users"&gt;on Slack&lt;/a&gt; and in &lt;a href="https://docs.n8n.io/credentials/slack/"&gt;our reference docs&lt;/a&gt; to learn how to create your Slackbot and get the necessary credentials (Access Token).&lt;/p&gt;

&lt;p&gt;Once you have the Slack node credentials set up, configure the parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;Resource&lt;/em&gt;: Message&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Operation&lt;/em&gt;: Post&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Channel&lt;/em&gt;: &lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Text&lt;/em&gt;: 🐦 NEW TWEET with sentiment score &lt;code&gt;{{$json["score"]}}&lt;/code&gt; and magnitude &lt;code&gt;{{$json["magnitude"]}} ⬇️
{{$json["text"]}}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1kn_gei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/CU1W4OcN0xfGqQyxntlVVDEUzEndcftzYF-utzWb29pt3tGqibEyWMj7JTypmGhOJBWo3K0FVSnkd-O2-OyYhpj33705_MPo9S0sZ_NXmkDYa65Og13xf8yqbHYmjmjKC0JGghcU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1kn_gei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/CU1W4OcN0xfGqQyxntlVVDEUzEndcftzYF-utzWb29pt3tGqibEyWMj7JTypmGhOJBWo3K0FVSnkd-O2-OyYhpj33705_MPo9S0sZ_NXmkDYa65Og13xf8yqbHYmjmjKC0JGghcU" alt="Slack node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After executing the node, check your Slack channel for a new tweet:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tmdNTcNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://n8n.io/blog/content/images/2021/04/Screenshot-from-2021-04-08-09-23-39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tmdNTcNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://n8n.io/blog/content/images/2021/04/Screenshot-from-2021-04-08-09-23-39.png" alt="Slack channel message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-ignoring-negative-tweets"&gt;
  &lt;/a&gt;
  9. Ignoring negative tweets
&lt;/h2&gt;

&lt;p&gt;The last node in this workflow is the &lt;strong&gt;NoOp node&lt;/strong&gt;, which is used when we don't want to perform any operations. The purpose of this node is to make the workflow easier to read and understand where the data flow stops. Though this node is not necessary for our workflow, I included it to mark visually the false condition and make it clear that the workflow can be extended in this direction.&lt;/p&gt;

&lt;p&gt;Finally, execute the whole workflow and activate it, so that it runs as scheduled. Also, check your MongoDB collection and Postgres database to make sure that the tweets have been inserted properly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h1&gt;

&lt;p&gt;Congrats --- you now have an automated workflow that informs you every day about positive historical events that happened on that day! As usual, you can tweak and extend this workflow, for example by keeping track of whether a tweet has been processed already, adding an action for the condition when the IF node is false, or cleaning the text of the collected tweets to check whether it influences the sentiment score.&lt;/p&gt;

&lt;p&gt;Of course, you can also build other ETL pipelines for various business use cases, such as product feedback at scale, Jira ticket automation based on customer sentiment, or regular database querying for reporting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did you find this tutorial helpful? Feel free to&lt;/em&gt; &lt;a href="https://twitter.com/intent/tweet?text=ETL%20automation%20with%20%40n8n_io%20%20n8n.io/blog/automate-your-data-processing-pipeline-in-9-steps-with-n8n/"&gt;&lt;em&gt;share it on Twitter&lt;/em&gt;&lt;/a&gt; &lt;em&gt;🐦 and discuss it in the&lt;/em&gt; &lt;a href="https://community.n8n.io"&gt;&lt;em&gt;community forum&lt;/em&gt;&lt;/a&gt; &lt;em&gt;🧡 To get our latest content about automation, subscribe to our blog by adding your email address in the form below!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published on the&lt;/em&gt; &lt;a href="https://n8n.io/blog/automate-your-data-processing-pipeline-in-9-steps-with-n8n/"&gt;&lt;em&gt;n8n blog&lt;/em&gt;&lt;/a&gt; &lt;em&gt;on May 4, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>database</category>
      <category>automation</category>
      <category>n8n</category>
    </item>
    <item>
      <title>24 HTML Tags you may not know.</title>
      <author>Kiran Raj R</author>
      <pubDate>Tue, 04 May 2021 09:59:59 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/24-html-tags-you-may-not-know-37be</link>
      <guid>https://dev.to/kiranrajvjd/24-html-tags-you-may-not-know-37be</guid>
      <description>&lt;p&gt;We all know about HTML, it help us to structure the contents, there are many tags which help us to develop the web application quickly, there also some tags that we may never use because we don't know it existed. Here I list 24 html tags that may be useful to you at some point in your web development career. You can find the tags in action in this &lt;a href="https://codepen.io/kiran-r-raj/pen/oNBKWWm"&gt;codepen&lt;/a&gt;. If you know any interesting tags let me know. Hope this list will help you in someway, happy coding&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-address-element"&gt;
  &lt;/a&gt;
  1. address element
&lt;/h3&gt;

&lt;p&gt;The address element is a container element which is used to represent contact information or group contact information together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:kiran2345raj@gmail.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;kiranraj&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Location : Kerala, India&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-data-element"&gt;
  &lt;/a&gt;
  2. data element
&lt;/h3&gt;

&lt;p&gt;The data element links a given content with a machine readable translation. The data element has one attribute, value, which specifies the machine readable translation. By default the value is not visible to the user.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;data&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1972"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C Language&lt;span class="nt"&gt;&amp;lt;/data&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;data&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1979"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C++ Language&lt;span class="nt"&gt;&amp;lt;/data&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;data&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1995"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JavaScript&lt;span class="nt"&gt;&amp;lt;/data&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#3-datalist-element"&gt;
  &lt;/a&gt;
  3. datalist element
&lt;/h3&gt;

&lt;p&gt;The datalist elements contains a set of option elements. datalist can be used to create auto complete function for input elements in HTML.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"SELECT"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Pick a country&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"country"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SELECT"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"country"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"INDIA"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"USA"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"UK"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"GERMANY"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"RUSSIA"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-bdi-element-bi-directional-isolation"&gt;
  &lt;/a&gt;
  4. bdi element (Bi Directional Isolation)
&lt;/h3&gt;

&lt;p&gt;The bdi element tells the browser to treat the content inside the bdi element differently, with respect to the directionality.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello World &lt;span class="nt"&gt;&amp;lt;bdi&amp;gt;&lt;/span&gt;مرحبا بالعالم&lt;span class="nt"&gt;&amp;lt;/bdi&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#5-bdo-element-bi-directional-override"&gt;
  &lt;/a&gt;
  5. bdo element (Bi Directional Override)
&lt;/h3&gt;

&lt;p&gt;The bdo element overrides the current text direction of the text enclosed in the bdo tag, i.e. the text enclosed inside the bdo tag will have a direction specified by the dir attribute of the bdo tag.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello World &lt;span class="nt"&gt;&amp;lt;bdo&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"rtl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/bdo&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#6-code-element"&gt;
  &lt;/a&gt;
  6. code element
&lt;/h3&gt;

&lt;p&gt;The code element is used to distinct program code snippet from normal text, the default font used to display text enclosed in code tag is monospace font.&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;To install create-react-app use &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;npx create-react-app&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#7-dl-element-description-list"&gt;
  &lt;/a&gt;
  7. dl element (Description List)
&lt;/h3&gt;

&lt;p&gt;The dl element is used to define a description list. The list consists of term or groups of terms each represented by dt tag and a corresponding detail for each terms enclosed in the dd tag.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#dt-element-description-term"&gt;
  &lt;/a&gt;
  dt element (Description Term)
&lt;/h5&gt;

&lt;p&gt;The dt element is used to define a description term inside the description list.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#dd-element-description-details"&gt;
  &lt;/a&gt;
  dd element (Description Details)
&lt;/h5&gt;

&lt;p&gt;The dt element is used to define a description detail inside the description list.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 7. Description Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;bdi tag&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;The bdi tag help to display part of the text in the opposite direction&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;bdo tag&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;The bdo tag overrides the default text direction.&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#8-kbd-elementkeyboard-input-element"&gt;
  &lt;/a&gt;
  8. kbd element(Keyboard Input Element)
&lt;/h3&gt;

&lt;p&gt;The kbd element is an inline tag which represent user input from a keyboard or any other text entry device. By default kbd use a monospace font.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 8. Keyboard input Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Use &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;Ctrl&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt; + &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;S&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt; to save your work.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#9-mark-element"&gt;
  &lt;/a&gt;
  9. mark element
&lt;/h3&gt;

&lt;p&gt;The mark tag is used to highlight text content, it's an inline element.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 9. Mark Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Use &lt;span class="nt"&gt;&amp;lt;mark&amp;gt;&lt;/span&gt;Ctrl+ S&lt;span class="nt"&gt;&amp;lt;/mark&amp;gt;&lt;/span&gt; to save your work.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#10-meter-element"&gt;
  &lt;/a&gt;
  10. Meter Element
&lt;/h3&gt;

&lt;p&gt;The meter tag is used to define a horizontal meter. It has a few attributes like value, min, max, low, high and optimum. The Value represent the current numeric value and it must be between min and max value. Min and max value represent the upper and lower bounds of the meter tag. Low and high represent the upper bound of low value and lower bound of the high value. Low must be higher than the min value and high must be lower than the max value.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 10. Meter Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"Mark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Mark:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meter&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Mark"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"80"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meter&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#11-noscript-element"&gt;
  &lt;/a&gt;
  11. noscript element
&lt;/h3&gt;

&lt;p&gt;The noscript tag contents are displayed only if the browser disabled JavaScript.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 11. Noscript Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;JavaScript is disabled in the browser&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#12-object-element"&gt;
  &lt;/a&gt;
  12. object element
&lt;/h3&gt;

&lt;p&gt;The object tag defines a container for external resources.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 12. Object Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/jpg"&lt;/span&gt;
    &lt;span class="na"&gt;data=&lt;/span&gt;&lt;span class="s"&gt;"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-1.2.1&amp;amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1950&amp;amp;q=80"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#13-output"&gt;
  &lt;/a&gt;
  13. Output
&lt;/h3&gt;

&lt;p&gt;The output is a container element which can be used to display result of a calculation/user action.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 13. Output --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;oninput=&lt;/span&gt;&lt;span class="s"&gt;"sum.value = parseInt(num1.value) + parseInt(num2.value)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"num1"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; +
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"num2"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"7"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; =
  &lt;span class="nt"&gt;&amp;lt;output&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"sum"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;11&lt;span class="nt"&gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#14-progress-element"&gt;
  &lt;/a&gt;
  14. progress element
&lt;/h3&gt;

&lt;p&gt;The progress element shows a progress bar, which take two properties max and value.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 14. Progress --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"70"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 70% &lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#15-sub-element-subscript"&gt;
  &lt;/a&gt;
  15. sub element (Subscript)
&lt;/h3&gt;

&lt;p&gt;The text enclosed in sub element cause the text to be displayed as a subscript&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 15. sub element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;H&lt;span class="nt"&gt;&amp;lt;sub&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/sub&amp;gt;&lt;/span&gt;O&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#16-sup-element-superscript"&gt;
  &lt;/a&gt;
  16. sup element (Superscript)
&lt;/h3&gt;

&lt;p&gt;The sup element style the text to be displayed as a superscript&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 16. sup element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; (x + y)&lt;span class="nt"&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/sup&amp;gt;&lt;/span&gt; = x&lt;span class="nt"&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/sup&amp;gt;&lt;/span&gt; + 2xy + y&lt;span class="nt"&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/sup&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#17-details-element"&gt;
  &lt;/a&gt;
  17. details element
&lt;/h3&gt;

&lt;p&gt;The details element create a disclosure widget that hides information, the information visible only when we click on the content of the summary element inside the details element.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 17. Details Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;Address&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:kiran2345raj@gmail.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;kiranraj@gmail.com&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Location : Kerala, India&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#18-time-elements"&gt;
  &lt;/a&gt;
  18. time elements
&lt;/h3&gt;

&lt;p&gt;The time element represent time in 24 hour clock, it's a inline element.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 18. Time Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  The IPL starts at &lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2021-05-04T20:00"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;20:00&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#19-var-element"&gt;
  &lt;/a&gt;
  19. var element
&lt;/h3&gt;

&lt;p&gt;The var tag is used to represent the name of a variable in a mathematical or programming expression.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 19. var Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Var Element&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;let &lt;span class="nt"&gt;&amp;lt;var&amp;gt;&lt;/span&gt;x&lt;span class="nt"&gt;&amp;lt;/var&amp;gt;&lt;/span&gt; = 10&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#20-wbr-element-word-break-opportunity"&gt;
  &lt;/a&gt;
  20. wbr element (Word break Opportunity)
&lt;/h3&gt;

&lt;p&gt;When we enter a lengthy text the browser automatically add line breaks to keep the paragraph's width under a specified limit, you can use the wbr element to indicate the browser the idea position to break the line.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 20. wbr Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wbr"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Wbr Element&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;helloworld,welcome&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;hello&lt;span class="nt"&gt;&amp;lt;wbr&amp;gt;&lt;/span&gt;world,&lt;span class="nt"&gt;&amp;lt;wbr&amp;gt;&lt;/span&gt;welcome&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#21-abbr-element-abbreviation"&gt;
  &lt;/a&gt;
  21. abbr element (Abbreviation)
&lt;/h3&gt;

&lt;p&gt;The abbr element represents a abbreviation, which have an optional title attribute where we can place the expansion for the abbreviation. This is the replacement of the  element, acronym element is supported by some browsers.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 21. abbr Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wbr"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;abbr&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"kiran raj r"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;krr&lt;span class="nt"&gt;&amp;lt;/abbr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#22-pre-element"&gt;
  &lt;/a&gt;
  22. pre element
&lt;/h3&gt;

&lt;p&gt;The pre element represents preformatted text, the browser will displays the text as in the same order as written in the html code and the white space is not ignored.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 22. pre Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Pre Element&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;
function greet(name) {
    console.log('Good Morning ' + name + '!');
}

sayHello('kiran raj');
      &lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#23-q-element"&gt;
  &lt;/a&gt;
  23. q element
&lt;/h3&gt;



&lt;p&gt;The q element is used to represent short inline quotation, cite is used to represent the reference of the quote. For long quotations use blockquote element.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 23. q Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;q and cite Elements&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;q&amp;gt;&lt;/span&gt;Imagination is more important than knowledge. 
    &lt;span class="nt"&gt;&amp;lt;cite&amp;gt;&lt;/span&gt;Albert Einstein&lt;span class="nt"&gt;&amp;lt;/cite&amp;gt;&amp;lt;/q&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#24-samp-element"&gt;
  &lt;/a&gt;
  24. samp element
&lt;/h3&gt;

&lt;p&gt;The samp element is used to represent inline sample output from a computer program. Monospaced font is used by browser by default.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 24. samp Element --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;samp Elements&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; x + y gives &lt;span class="nt"&gt;&amp;lt;samp&amp;gt;&lt;/span&gt;undefined&lt;span class="nt"&gt;&amp;lt;/samp&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/oNBKWWm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you find any errors please comment, any additional knowledge regarding this topic is welcomed. If you like this post take a look at my other posts, thank you.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/15-awesome-css-animation-resources-4mhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;15+ Awesome CSS Animation Resources&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 21 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/10-best-javascript-based-github-repos-for-web-developers-49pc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Awesome GitHub Repos For Web Developers &lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 26 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/40-awesome-illustrations-resources-for-your-web-projects-2fea" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;40+ Awesome Illustrations Resources For Your Web Projects&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 28 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/the-ultimate-css-background-pattern-resource-20m8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;24+ Awesome CSS Pattern Background Generators &lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 26 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How CSS pseudo-elements work a ridiculously simple explanation for beginners

</title>
      <author>Peter</author>
      <pubDate>Tue, 04 May 2021 09:58:25 +0000</pubDate>
      <link>https://dev.to/peterlunch/how-css-pseudo-elements-work-a-ridiculously-simple-explanation-for-beginners-49gk</link>
      <guid>https://dev.to/peterlunch/how-css-pseudo-elements-work-a-ridiculously-simple-explanation-for-beginners-49gk</guid>
      <description>&lt;p&gt;Pseudo-elements especially &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; are so hot right now. Amazing sites like &lt;a href="https://www.cyberpunk.net/us/en/"&gt;Cyberpunk.net&lt;/a&gt; use them to create amazing affects. However, lots of beginners don’t fully grasp their power. So, before you can harness their power you first need to understand how they work.&lt;/p&gt;

&lt;p&gt;When I first started working with pseudo-elements, I had no idea what I was doing or how they actually work. I was just copying and pasting other people's code and not really understanding why it was or wasn’t working.&lt;/p&gt;

&lt;p&gt;If you want to harness the power of CSS and get good at it then understanding pseudo-elements is a must. By the end of this post you will have a strong grasp of what pseudo-elements are and how to use them to create stylish elements yourself.&lt;/p&gt;

&lt;p&gt;But first, let’s explore what they are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-pseudoelements"&gt;
  &lt;/a&gt;
  What are Pseudo-Elements
&lt;/h2&gt;

&lt;p&gt;In CSS pseudo-elements are a keyword that you add to &lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;selectors&lt;/a&gt;. These pseudo elements let you style specific parts of the element you selected. CSS denotes them using two colons &lt;code&gt;::&lt;/code&gt; which helps you tell them apart from CSS pseudo-classes as they have only one colon &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at the general syntax for CSS pseudo-elements before we get into specific pseudo-elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="nd"&gt;::pseudo-element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you put the CSS selector before the double colon. Next, inside the curly braces you write CSS property value pairs, like you would for any other element you are styling.&lt;/p&gt;

&lt;p&gt;As a real example, we could do something like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.second&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;mediumspringgreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example uses the &lt;code&gt;::selection&lt;/code&gt; pseudo-element on the &lt;code&gt;second&lt;/code&gt; CSS class selector. Now, when you highlight the paragraph text it is a different color and background.&lt;/p&gt;

&lt;p&gt;We’ll explore the &lt;code&gt;::selection&lt;/code&gt; pseudo element some more later. For now I want you to focus on the two major pseudo-elements &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-before-and-after-pseudoelements"&gt;
  &lt;/a&gt;
  What are the before and after pseudo-elements?
&lt;/h2&gt;

&lt;p&gt;The before and after pseudo-elements let you insert content onto a web page. They allow you to do this without the need for it to be in the HTML. Essentially you can insert content through CSS.&lt;/p&gt;

&lt;p&gt;One important thing to note when it comes to the before and after pseudo-elements is that when they are created they are not actually on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"&gt;DOM&lt;/a&gt;. In other words, they are fake elements, this is why they are call &lt;em&gt;“pseudo&lt;/em&gt; elements as the word pseudo means fake. So, the name fits because these elements don’t actually change anything in the document. They are hidden elements that are only visible to the user and not the DOM.&lt;/p&gt;

&lt;p&gt;What this looks like in practice is this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result would be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  before
    &lt;span class="c"&gt;&amp;lt;!--actual h1 element --&amp;gt;&lt;/span&gt;
  after
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Knowing that these elements are fake it’s time to look at the first fake element you will use a lot in web development, the before pseudo-element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-before-pseudoelement"&gt;
  &lt;/a&gt;
  The before pseudo-element
&lt;/h3&gt;

&lt;p&gt;In CSS, &lt;code&gt;::before&lt;/code&gt; creates a pseudo-element that is the first child of the selected element. To put it another way, it is a pseudo-element that comes before the content of the CSS selector. So if you have a paragraph element it would look like this &lt;code&gt;p::before&lt;/code&gt; with &lt;code&gt;p&lt;/code&gt; being the selector and &lt;code&gt;::before&lt;/code&gt; being the pseudo-element.&lt;/p&gt;

&lt;p&gt;With this in mind let’s look at some examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Mr. and Mrs. Dursley of number four, Privet Drive, were proud to say that they were perfectly normal, thank you very much.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7f0909&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"the boy who lived"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;130%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5BC8F8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pprhb53f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ilm1imtlvnlryw0qskp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pprhb53f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ilm1imtlvnlryw0qskp.png" alt="::before pseudo-element result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the code above, we have added the content &lt;em&gt;'the boy who lived'&lt;/em&gt; before the CSS selector which in this case is the &lt;code&gt;p&lt;/code&gt; tag and its content.&lt;/p&gt;

&lt;p&gt;We were then able to style the content before the selector however we wanted.&lt;/p&gt;

&lt;p&gt;If we check the developer tools in the &lt;a href="https://codepen.io/pin0s/pen/dyNxvXZ"&gt;codepen&lt;/a&gt;, you will see that there is no element &lt;em&gt;'the boy who lived'&lt;/em&gt; There is just a pseudo-element &lt;code&gt;::before&lt;/code&gt;. As it isn't really on the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ytx2LfGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hghwiq4cytiba8sbh6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ytx2LfGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hghwiq4cytiba8sbh6x.png" alt="pseudo-element before showing in dev tools but not on the dom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's look at another example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;harry potter and the sorcerer's stone&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQ3LpF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9zwqoyqvhj1uxu5kvlz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQ3LpF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9zwqoyqvhj1uxu5kvlz.png" alt="before pseudo-element with block styling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, the before pseudo-element is using the &lt;code&gt;display&lt;/code&gt; property with the value &lt;code&gt;block&lt;/code&gt;. This then moves the background with a width of 5px above and before the &lt;code&gt;h1&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;Now you know what the before pseudo-element does let's look at the after pseudo-element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-after-pseudoelement"&gt;
  &lt;/a&gt;
  The After pseudo-element
&lt;/h3&gt;

&lt;p&gt;In CSS, &lt;code&gt;::after&lt;/code&gt; creates a pseudo-element this is the last child of the selected element. So much like the &lt;code&gt;::before&lt;/code&gt;, it is a pseudo-element that comes after the content of the CSS selector.&lt;/p&gt;

&lt;p&gt;Keeping that in mind let’s use the second example from the before section and add a line underneath with the after pseudo-element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayKP3Iz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi16jjzusd8ju3i6izei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayKP3Iz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi16jjzusd8ju3i6izei.png" alt="before &amp;amp; after pseudo-element with block styling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now have a line under the &lt;code&gt;h1&lt;/code&gt;. How cool is that, we can make our own little styling elements to create great looking elements.&lt;/p&gt;

&lt;p&gt;By now, you should now have a good understanding of how the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements work. To further improve our knowledge we need to understand what the &lt;code&gt;content&lt;/code&gt; property is and what it is doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-property"&gt;
  &lt;/a&gt;
  Content property
&lt;/h2&gt;

&lt;p&gt;Did you notice the use of the &lt;code&gt;content&lt;/code&gt; property, with the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements? Objects that are inserted using the &lt;code&gt;content&lt;/code&gt; property are anonymous replaced &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element"&gt;elements&lt;/a&gt;. Put in simpler terms, it is an element whose content is not affected by the current documents styles.&lt;/p&gt;

&lt;p&gt;Thus, when using the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements, you &lt;b&gt;must&lt;/b&gt; use the &lt;code&gt;content&lt;/code&gt; property to make your styles visible. Did you also notice that the content is inside the element? In spite of the fact that the naming of &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; make it feel like the content should come before or after the element. But, it is definitely before or after the content inside the element.&lt;/p&gt;

&lt;p&gt;Next, to better understand the content property let’s look at what values it takes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-property-accepted-values"&gt;
  &lt;/a&gt;
  Content Property Accepted Values
&lt;/h3&gt;

&lt;p&gt;The content property takes many types of values. The default value is &lt;code&gt;normal&lt;/code&gt;. It means 'normally' nothing will be visible to the user. Thus, you give the content property one of the values below.&lt;/p&gt;

&lt;p&gt;The other values content can be are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;string&lt;/strong&gt; - this sets the content to be the string you specify.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;counter&lt;/strong&gt; - used to style lists.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;image&lt;/strong&gt; - this sets the content to be an image you specify with a &lt;code&gt;url()&lt;/code&gt; or &lt;code&gt;gradient&lt;/code&gt; data type. The image is inserted at its exact dimensions, meaning you cannot resize the image.

&lt;ul&gt;
&lt;li&gt;please note that to insert alt text you use a &lt;code&gt;/&lt;/code&gt; after the &lt;code&gt;url()&lt;/code&gt; and a string description of the image. For example: &lt;code&gt;content: url("https://www.example.com/test.png") / "This is the alt text";&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nothing&lt;/strong&gt; - Useful for inserting images as background-images (set width and height, and can even resize with background-size), or making other cool styling features (link to dev.to post).&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;attr()&lt;/strong&gt; value - Sets the content as the string value of the selected elements attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-awesome-pseudoelements"&gt;
  &lt;/a&gt;
  Other awesome pseudo-elements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#selection"&gt;
  &lt;/a&gt;
  Selection
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::selection&lt;/code&gt; - This, CSS pseudo-element applies styles to the part of a document that has been highlighted by the user. To put it another way, it makes the highlighter on your page look pretty when people highlight text to copy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cyan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#firstletter"&gt;
  &lt;/a&gt;
  First-letter
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::first-letter&lt;/code&gt; - CSS pseudo-element applies styles to the first letter of the first line of a block-level element, but only when not preceded by other content (such as images or inline tables).&lt;/p&gt;

&lt;p&gt;To rephrase the above, this pseudo-element lets you style the first letter of the first line of the element you select. This only happens on elements that are categorized as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements"&gt;block-level elements&lt;/a&gt; check that link out for a list of block level elements.&lt;/p&gt;

&lt;p&gt;As a result, we can use this pseudo-element to make awesome drop caps for our paragraphs, see the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;117&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;212&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;173&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;81&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pin0s/embed/BapXWOg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstline"&gt;
  &lt;/a&gt;
  First-line
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::first-line&lt;/code&gt; - CSS pseudo-element applies styles to the first line of a block-level element.&lt;/p&gt;

&lt;p&gt;In plain English the above means, this pseudo-element lets you style the the first line of the element you select. Again like with first letter this only happens to block level elements.&lt;/p&gt;

&lt;p&gt;Let's add the below code to the &lt;code&gt;first-letter&lt;/code&gt; example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RT2_NA9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvj64lldpoe8kmz176d1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RT2_NA9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvj64lldpoe8kmz176d1.png" alt="first-letter and first-line pseudo-elements effects on p element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;p&lt;/code&gt; now has drop caps and red text for the first line. Play around with width in the pen above to see what happens as you increase and decrease the width.&lt;/p&gt;

&lt;p&gt;Did you notice how if the text moves lines the color changes? You have to be careful taking into consideration things like the width of the element and how it will respond on different screens when styling the first line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marker"&gt;
  &lt;/a&gt;
  Marker
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;::marker&lt;/code&gt; CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number.&lt;/p&gt;

&lt;p&gt;The marker pseudo-element will allow you to replace the counter content value. For an example on how a counter works I encourage you to check out this &lt;a href="https://www.freecodecamp.org/news/css-before-and-after-how-to-use-the-content-property/"&gt;post&lt;/a&gt;. That said, a counter is just the bullet point of number in front of a list item (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) and the &lt;code&gt;::marker&lt;/code&gt;pseudo-element lets you style them.&lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Nintendo Hero's&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Mario&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Link&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Samus&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;::marker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e4000f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pin0s/embed/ExZqWBo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The above example is pretty simple, we have just changed the bullet point color to red. But, you can do lot's of things like change the style or even use emoji's.&lt;/p&gt;

&lt;p&gt;Finally, it is important to note that the ::marker pseudo-element is not fully supported at the time of writing this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPjH5Bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx48djtc2wfdd3ml9dsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPjH5Bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx48djtc2wfdd3ml9dsw.png" alt="browser support for marker pseudo element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Now you should have a good understanding of pseudo-elements. Let’s recap on a few important notes.&lt;/p&gt;

&lt;p&gt;Firstly, pseudo elements let you style specific parts of the element you selected. Pseudo-elements are denoted by double colons.&lt;/p&gt;

&lt;p&gt;Next, remember that pseudo-elements do not appear in the DOM as they are fake elements. The way you make them visible to the user is to utilize the &lt;code&gt;content&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Lastly, if you learnt something from this post then checkout the rest of my posts &lt;a href="https://bit.ly/2Re6Vdf"&gt;here&lt;/a&gt; or &lt;a href="https://mailchi.mp/4fb2a2723574/peter-lunch-link"&gt;sign up to my newsletter&lt;/a&gt; to get ridiculously good and super exclusive newbie content.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>🚀ES6 MODULES 101 #1🚀</title>
      <author>michalpzarzycki</author>
      <pubDate>Tue, 04 May 2021 09:47:12 +0000</pubDate>
      <link>https://dev.to/michalpzarzycki/es6-modules-101-1-405a</link>
      <guid>https://dev.to/michalpzarzycki/es6-modules-101-1-405a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#a-global-problem"&gt;
  &lt;/a&gt;
  A GLOBAL PROBLEM
&lt;/h1&gt;

&lt;p&gt;Each of us, at the initial stage of writing scripts in JS, came to the conclusion that having all the code in one file is probably not a good solution. I remember my first attempts to divide my main javascript file into several smaller ones, trying to follow the rule that each such file should correspond to one functionality. Even though it required me to add more &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags to the html file, the compensation in the form of seemingly clearer code was quite a reward. Except that not entirely.&lt;br&gt;
One of the biggest problems with the pre-modular era was that code, although separated by different files, still operated at the same global scope. This caused a lot of problems, especially when two different functions in two different files have the same name. The code divide concept was good but not fine-tuned until modules.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Solution to the problem of pre-module-age global variables was to write code inside IIFE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#module-vs-script"&gt;
  &lt;/a&gt;
  MODULE vs. SCRIPT
&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;module&lt;/strong&gt; is a JS code in which the variables created at the highest level are not shared in the global scope, which solves our main problem in code sharing. In addition, the modules work in strict mode, which is an additional security. You also need to remember about &lt;code&gt;this&lt;/code&gt;, because it has a value of &lt;code&gt;undefined&lt;/code&gt; in the module.&lt;/p&gt;

&lt;p&gt;Anything that does not support the above functionalities can be called a &lt;strong&gt;script&lt;/strong&gt;. However, these are only superficial differences, as modules and scripts also differ in the way JavaScript is loaded and executed, but more on that later.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#import-export"&gt;
  &lt;/a&gt;
  IMPORT / EXPORT
&lt;/h1&gt;

&lt;p&gt;To export code fragments from the module, just put &lt;code&gt;export&lt;/code&gt; before the name of the function, variable or class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//You can export variables&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VARIABLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HELLO WORLD!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//function export&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//class&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;makeItDope&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is dope!`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//if you dont add export, this will be private in module&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;iAmNotExportes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Private message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//you can also export function later&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;noRushDude&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No worries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;noRushDude&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the module with exported items, we can import them to our file using the &lt;code&gt;import {} from ""&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;VARIABLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;noRushDude&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./previousFile.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;from&lt;/code&gt; keyword indicates the module that contains the items being exported. The name of the module is given in the form of a text string, in browsers it is given in a similar form as in the element &lt;code&gt;&amp;lt;script src=""&amp;gt;&lt;/code&gt; (this means specifying the extension of the &lt;code&gt;.js&lt;/code&gt; file), however, if you import the module on the &lt;code&gt;Node.js&lt;/code&gt; platform, you must know that there is a distinction between local files and packages, which slightly changes the form of the path (e.g. &lt;code&gt;"express"&lt;/code&gt; - package name, &lt;code&gt;"./express.js"&lt;/code&gt; - local file).&lt;/p&gt;

&lt;p&gt;Another interesting feature of import is that you can import the entire module. Let's have a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//all exported items are available inside previousFile&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;previousFile&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./previousFile.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VARIABLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//"Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also rename items during import and export:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;goodCar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BMW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;goodCar&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;badCar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//==========================&lt;/span&gt;

&lt;span class="c1"&gt;//now you can import &lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;badCar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;//but also rename it again!&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;badCar&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;goodCar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; the default values. The default value is a single variable, function or class, specified with the &lt;code&gt;default&lt;/code&gt; keyword. Only one default exported item can be defined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//You can do it like this:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//-----------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;//...or like this:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt;

&lt;span class="c1"&gt;//-----------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;//...or like this:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To import the default value you can get rid of &lt;code&gt;{}&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unless you want to rename it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some modules do not export anything but exist to modify global objects. Although modules do not have access to the global scope, they have access to objects such as Array, Object, Map, thanks to which they can modify them and such code can be imported. An example syntax for such an import looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./someModule.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;End of part one.&lt;/p&gt;

&lt;p&gt;🚀Thanks for reading!🚀&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>20 Linux System Administrator Interview Questions - Land the Job in 2021</title>
      <author>Course Probe</author>
      <pubDate>Tue, 04 May 2021 09:42:06 +0000</pubDate>
      <link>https://dev.to/courseprobe/20-linux-system-administrator-interview-questions-land-the-job-in-2021-1ak</link>
      <guid>https://dev.to/courseprobe/20-linux-system-administrator-interview-questions-land-the-job-in-2021-1ak</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Find below a collection of Questions &amp;amp; Answers for Linux System Administrator updated in May 2021. Also I’ve included a collection of resources to help you better prepare for your next job interview in 2021. Best of Luck landing your new Job!!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5W51uYrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/340/1%2AqQqS2gMOOtb7AwBVckEYqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5W51uYrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/340/1%2AqQqS2gMOOtb7AwBVckEYqg.png" alt="SysAdmin Interview Questions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/sysadmin-interview-questions"&gt;SysAdmin Interview Questions&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;1 &lt;strong&gt;What is the difference between rm and rm -rf?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The rm command by itself only deletes the named files (and not directories). With -rf you add two additional features: The -r, -R, or --recursive flag recursively deletes the directory’s contents, including hidden files and subdirectories, and the -f, or --force, flag makes rm ignore nonexistent files, and never prompt for confirmation.&lt;/p&gt;

&lt;p&gt;2 &lt;strong&gt;How do you make a process run in the background, and what are the advantages of doing so?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can make a process run in the background by adding the special character &amp;amp; at the end of the command. Generally, applications that take too long to execute, and don’t require user interaction are sent to the background so that we can continue our work in the terminal.&lt;/p&gt;

&lt;p&gt;3 &lt;strong&gt;What are the first five commands you type on a *nix server after login?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lsblk to see information on all block devices&lt;br&gt;
who to see who is logged into the server&lt;br&gt;
top to get a sense of what is running on the server&lt;br&gt;
df -khT to view the amount of disk space available on the server&lt;br&gt;
netstat to see what TCP network connections are active&lt;/p&gt;

&lt;p&gt;4 &lt;strong&gt;Is running these commands as root a good or bad idea?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running (everything) as root is bad due to two major issues. The first is risk. Nothing prevents you from making a careless mistake when you are logged in as root. If you try to change the system in a potentially harmful way, you need to use sudo, which introduces a pause (while you’re entering the password) to ensure that you aren’t about to make a mistake.&lt;/p&gt;

&lt;p&gt;The second reason is security. Systems are harder to hack if you don’t know the admin user’s login information. Having access to root means you already have one half of the working set of admin credentials.&lt;/p&gt;

&lt;p&gt;5 &lt;strong&gt;Compress.tgz has a file size of approximately 15GB. How can you list its contents, and how do you list them only for a specific file?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To list the file’s contents:&lt;/p&gt;

&lt;p&gt;tar tf archive.tgz&lt;/p&gt;

&lt;p&gt;To extract a specific file:&lt;/p&gt;

&lt;p&gt;tar xf archive.tgz filename&lt;/p&gt;

&lt;p&gt;6 &lt;strong&gt;Which port is used for the ping command?&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;The ping command uses ICMP. Specifically, it uses ICMP echo requests and ICMP echo reply packets.&lt;/p&gt;

&lt;p&gt;ICMP does not use either UDP or TCP communication services: Instead, it uses raw IP communication services. This means that the ICMP message is carried directly in an IP datagram data field.&lt;/p&gt;

&lt;p&gt;7 &lt;strong&gt;What is the difference between a router and a gateway? What is the default gateway?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Router describes the general technical function (layer 3 forwarding), or a hardware device intended for that purpose, while gateway describes the function for the local segment (providing connectivity to elsewhere). You could also state that you "set up a router as a gateway." Another term is hop, which describes forwarding between subnets.&lt;/p&gt;

&lt;p&gt;The term default gateway is used to mean the router on your LAN, which has the responsibility of being the first point of contact for traffic to computers outside the LAN.&lt;/p&gt;

&lt;p&gt;8 &lt;strong&gt;Explain the boot process for Linux.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BIOS -&amp;gt; Master Boot Record (MBR) -&amp;gt; GRUB -&amp;gt; the kernel -&amp;gt; init -&amp;gt; runlevel&lt;/p&gt;

&lt;p&gt;9 &lt;strong&gt;How do you check the error messages while the server is booting up?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kernel messages are always stored in the kmsg buffer, visible via the dmesg command.&lt;/p&gt;

&lt;p&gt;Boot issues and errors call for a system administrator to look into certain important files, in conjunction with particular commands, which are each handled differently by different versions of Linux:&lt;/p&gt;

&lt;p&gt;/var/log/boot.log is the system boot log, which contains all that unfolded during the system boot.&lt;br&gt;
/var/log/messages stores global system messages, including the messages logged during system boot.&lt;br&gt;
/var/log/dmesg contains kernel ring buffer information.&lt;/p&gt;

&lt;p&gt;10 &lt;strong&gt;How do you change kernel parameters? What kernel options might you need to tune?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To set the kernel parameters in Unix-like systems, first edit the file /etc/sysctl.conf. After making the changes, save the file and run the sysctl -p command. This command makes the changes permanent without rebooting the machine&lt;/p&gt;

&lt;p&gt;11 &lt;strong&gt;How do you run a script as another user without their password?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, if you were editing the sudoers file (such as /private/etc/sudoers), you might use visudo to add the following:&lt;/p&gt;

&lt;p&gt;user1 ALL=(user2) NOPASSWD: /opt/scripts/bin/generate.sh&lt;/p&gt;

&lt;p&gt;12 &lt;strong&gt;What is the UID 0 toor account? Have you been compromised?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The toor user is an alternative superuser account, where toor is root spelled backward. It is intended to be used with a non-standard shell, so the default shell for root does not need to change.&lt;/p&gt;

&lt;p&gt;This purpose is important. Shells which are not part of the base distribution, but are instead installed from ports or packages, are installed in /usr/local/bin; which, by default, resides on a different file system. If root’s shell is located in /usr/local/bin and the file system containing /usr/local/bin is not mounted, root could not log in to fix a problem, and the sysadmin would have to reboot into single-user mode to enter the shell’s path.&lt;/p&gt;

&lt;p&gt;13 &lt;strong&gt;How does tracert work and what protocol does it use?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The command tracert—or traceroute depending on the operating system—allows you to see exactly what routers you touch as you move through the chain of connections to your final destination. If you end up with a problem where you can’t connect to or ping your final destination, a tracert can help in that you can tell exactly where the chain of connections stops.&lt;/p&gt;

&lt;p&gt;14 &lt;strong&gt;How do you protect your system from getting hacked?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By following the principle of least privileges and these practices:&lt;/p&gt;

&lt;p&gt;Encrypt with public keys, which provides excellent security.&lt;br&gt;
Enforce password complexity.&lt;br&gt;
Understand why you are making exceptions to the rules above.&lt;br&gt;
Review your exceptions regularly.&lt;br&gt;
Hold someone to account for failure.&lt;/p&gt;

&lt;p&gt;15 &lt;strong&gt;What is LVM, and what are the advantages of using it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LVM, or Logical Volume Management, uses a storage device management technology that gives users the power to pool and abstract the physical layout of component storage devices for easier and flexible administration. Using the device mapper Linux kernel framework, the current iteration (LVM2) can be used to gather existing storage devices into groups and allocate logical units from the combined space as needed.&lt;/p&gt;

&lt;p&gt;16 &lt;strong&gt;What are sticky ports?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sticky ports are one of the network administrator’s best friends and worst headaches. They allow you to set up your network so that each port on a switch only permits one (or a number that you specify) computer to connect on that port, by locking it to a particular MAC address.&lt;/p&gt;

&lt;p&gt;17 &lt;strong&gt;What is a false positive and false negative in the case of IDS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the Intrusion Detection System (IDS) device generates an alert for an intrusion which has actually not happened, this is false positive. If the device has not generated any alert and the intrusion has actually happened, this is the case of a false negative.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Comment Below what would be your answers to the following questions ... Help others by commenting additional questions you think are important !!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;18 What is the difference between local and remote port forwarding?&lt;/p&gt;

&lt;p&gt;19 What is the difference between local and remote port forwarding?&lt;/p&gt;

&lt;p&gt;20 How do you catch a Linux signal on a script?&lt;/p&gt;




&lt;p&gt;Additional Resources that might come handy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=NcMZU1aTATA&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flinux-foundation-ceritifed-system-administrator-lfcs%2F"&gt;Linux Foundation Certified System Administrator (LFCS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coursesim.com/course/red-hat-certified-system-administrator-prep-course/"&gt;Red Hat Certified System Administrator Prep Course&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;If you are thinking about starting your career as a Linux System Administrator or Sysadmin and you would like to know more about System Administration then keep reading below:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-linux-system-administrator-do"&gt;
  &lt;/a&gt;
  What does a Linux system administrator do?
&lt;/h2&gt;

&lt;p&gt;As a Linux system Administrator you will have to deal with tasks like making sure all files and systems have the proper backup in place, you will be restoring information, recovering from data corruption and other disasters like security attacks. &lt;/p&gt;

&lt;p&gt;You will also have to deal with maintenance, applications and configurations in the servers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-prepare-for-a-system-administrator-interview"&gt;
  &lt;/a&gt;
  How do I prepare for a system administrator interview?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Learn about Linux and System Administration in general&lt;/li&gt;
&lt;li&gt;Review the different systems and how they are used by different businesses.&lt;/li&gt;
&lt;li&gt;Learn about &lt;a href="https://leanpub.com/devops-engineer"&gt;Role of a DevOps Engineer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get a System administrator certification.&lt;/li&gt;
&lt;li&gt;Be ready to talk about any previous IT experience with examples.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-should-a-linux-administrator-know"&gt;
  &lt;/a&gt;
  What should a Linux administrator know?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;User Management in the system (Linux/Win)&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Hardware setup including routers, vpns and firewalls&lt;/li&gt;
&lt;li&gt;Remote system administration&lt;/li&gt;
&lt;li&gt;Managing Scheduled Data Backups&lt;/li&gt;
&lt;li&gt;Software Installation and Updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-long-does-it-take-to-learn-system-administration"&gt;
  &lt;/a&gt;
  How long does it take to learn system administration?
&lt;/h2&gt;

&lt;p&gt;It takes at least 1 year studying and getting your certifications, it's a good idea during this time to also get an intern position. Then it will take an additional 2 years for you to build good experience and to progress into a senior position within your company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-linux-administration-jobs-in-demand-"&gt;
  &lt;/a&gt;
  Are Linux Administration jobs in demand ?
&lt;/h2&gt;

&lt;p&gt;According to the US Bureau of Labor Statistics, there will be a growth rate of 6% between the years 2016 to 2026, this means more roles will open since technologies will evolve and companies will expand business. Apart from this there's an expected increase in salary for the roles of Linux System Administrator.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
