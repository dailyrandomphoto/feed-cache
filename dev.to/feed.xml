<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Twitter Clone with Vue.js</title>
      <author>Cihat Salik</author>
      <pubDate>Mon, 12 Apr 2021 08:57:23 +0000</pubDate>
      <link>https://dev.to/cihat/twitter-clone-1agj</link>
      <guid>https://dev.to/cihat/twitter-clone-1agj</guid>
      <description>&lt;p&gt;Source Code: &lt;a href="https://github.com/cihat/twitter-clone"&gt;https://github.com/cihat/twitter-clone&lt;/a&gt;&lt;br&gt;
Live: &lt;a href="https://cihat.github.io/twitter-clone/"&gt;https://cihat.github.io/twitter-clone/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Twitter Clone project that I wrote with Vue.js using the Random User and Quotable API's.&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>javascript</category>
      <category>vue</category>
      <category>scss</category>
    </item>
    <item>
      <title>Maintaining Multi-language Angular Applications with i18n</title>
      <author>Michael Karén</author>
      <pubDate>Mon, 12 Apr 2021 08:55:04 +0000</pubDate>
      <link>https://dev.to/this-is-angular/maintaining-multi-language-angular-applications-with-i18n-2ccf</link>
      <guid>https://dev.to/this-is-angular/maintaining-multi-language-angular-applications-with-i18n-2ccf</guid>
      <description>&lt;p&gt;&lt;strong&gt;Angular i18n and the localizing of applications had an overhaul with version 9&lt;/strong&gt;, enabled by the new rendering engine Ivy. In this article, we &lt;strong&gt;take a closer look at how this built-in package of Angular now works&lt;/strong&gt;, while pointing out the benefits and drawbacks we find.&lt;/p&gt;

&lt;p&gt;We then set up an application with Angular internationalization and go through the complete process from marking texts for translation, extracting them to translation files, and how we manage these files to get the application deployed and maintained while keeping users all over the world happy with our translations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Illustration by &lt;a href="https://twitter.com/VeroIsabellaK"&gt;Vero Karén&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internationalization-and-localization"&gt;
  &lt;/a&gt;
  Internationalization and localization
&lt;/h2&gt;

&lt;p&gt;It’s easy to get confused with the terms &lt;strong&gt;internationalization (i18n)&lt;/strong&gt; and &lt;strong&gt;localization (i10n),&lt;/strong&gt; and where to draw the line between them. &lt;em&gt;Internationalization&lt;/em&gt; is the process of designing your application so that it can be adapted to different locales around the world while &lt;em&gt;localization&lt;/em&gt; is the process of building the versions of the applications to different locales.&lt;/p&gt;

&lt;p&gt;Together they help us in adapting software to different languages and local variations in the look and feel expected by the target audience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-localization-works-with-ivy"&gt;
  &lt;/a&gt;
  How localization works with Ivy
&lt;/h2&gt;

&lt;p&gt;The new localization process of &lt;a href="https://angular.io/guide/ivy"&gt;Angular Ivy&lt;/a&gt; is based on the concept of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"&gt;tagged templates&lt;/a&gt;. Tags allow you to parse template literals with a function. The tag used here is the global identifier &lt;code&gt;$localize&lt;/code&gt;. Instead of translating the strings, the Ivy template compiler converts all template text marked with &lt;code&gt;i18n&lt;/code&gt; attributes to &lt;code&gt;$localize&lt;/code&gt; tagged strings.&lt;/p&gt;

&lt;p&gt;So when we add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will be compiled to &lt;code&gt;$localize&lt;/code&gt; calls and somewhere in the compiled code we will be able to find:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`Hello World!`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way the &lt;em&gt;tagged template&lt;/em&gt; works is that you put the function that you want to run against the string before the template. Instead of &lt;code&gt;function()&lt;/code&gt;, you have &lt;code&gt;function&lt;/code&gt;&lt;code&gt;&lt;/code&gt; or as in this case &lt;code&gt;$localize&lt;/code&gt;&lt;code&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When this step is done we have two choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;compile-time inlining&lt;/strong&gt;: the &lt;a href="https://angular.io/api/localize/init/%24localize"&gt;&lt;code&gt;$localize&lt;/code&gt;&lt;/a&gt; tag is transformed at compile time by a transpiler, removing the tag and replacing the template literal string with the translation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;run-time evaluation&lt;/strong&gt;: the &lt;a href="https://angular.io/api/localize/init/%24localize"&gt;&lt;code&gt;$localize&lt;/code&gt;&lt;/a&gt; tag is a run-time function that replaces the template literal string with translations loaded at run-time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we use &lt;em&gt;compile-time inlining&lt;/em&gt; to achieve our goals. At the very end of the build process, we run a step for the translation files by providing an option flag to get a localized application for the languages. Since we are doing the translations compile-time we get one application per locale.&lt;/p&gt;

&lt;p&gt;At the end of the article, we take a further look into &lt;em&gt;run-time evaluation&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because the application does not need to be built again for each locale, the build process is much faster than before v9 of Angular.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uoqzkwqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2696/0%2AGMtohFA2nbkDKzpB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uoqzkwqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2696/0%2AGMtohFA2nbkDKzpB.png" alt="You can read more about this in [Angular localization with Ivy](https://cdn.hashnode.com/res/hashnode/image/upload/v1618075767519/BbSs51O0K.html) from where this picture is."&gt;&lt;/a&gt;&lt;em&gt;You can read more about this in &lt;a href="https://blog.angular.io/angular-localization-with-ivy-4d8becefb6aa"&gt;Angular localization with Ivy&lt;/a&gt; from where this picture is.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we understand the process of building the application we start to get an understanding of what it entails.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-good-and-the-bad"&gt;
  &lt;/a&gt;
  The good and the bad
&lt;/h2&gt;

&lt;p&gt;The standard Angular internationalization and localization are designed to produce one compiled application per language. By doing this we get optimal performance since there is no overhead of loading translation files and compiling them at run-time. But, this also means that each language has to be deployed to a separate URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;www.mydomain.com/en
www.mydomain.com/nb
www.mydomain.com/fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means we need to do a bit more set up on our webserver. A limitation with &lt;code&gt;ng serve&lt;/code&gt; is that it only works with one language at a time and to run different languages also needs some configuration. To run all languages locally we need to use a local webserver. We look into how we do all this in this article.&lt;/p&gt;

&lt;p&gt;Angular i18n uses &lt;strong&gt;XLIFF&lt;/strong&gt; and &lt;strong&gt;XMB&lt;/strong&gt; formats that are XML-based, more verbose formats than JSON. But since these files are used at compile-time it doesn’t matter. It makes sense to use JSON when we load the translation files at run-time to keep the file sizes smaller. The formats chosen for the built-in i18n are used by translation software which helps us with our translations as we will see.&lt;/p&gt;

&lt;p&gt;The number one drawback that people find with this solution is that you need to reload the application when you switch languages. But, is this really going to be a problem for you? People usually switch languages once if ever. And that couple of seconds it takes to reload applications will not be a problem.&lt;/p&gt;

&lt;p&gt;Having one bundle per language is not a problem for a web SPA other than that you have to configure your web server for this. But for standalone apps, this means you got to make the user download every translated bundle, or distribute a different app for every version.&lt;/p&gt;

&lt;p&gt;It’s important to understand your requirements before deciding which route to take.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transloco"&gt;
  &lt;/a&gt;
  Transloco
&lt;/h2&gt;

&lt;p&gt;If the standard Angular i18n doesn’t give you what you want then the best alternative today in my opinion is &lt;a href="https://ngneat.github.io/transloco/"&gt;Transloco&lt;/a&gt;. It’s being actively maintained and has an active community. It will get you up and running faster and is more flexible than the built-in solution. Since Transloco is runtime translation you have just &lt;code&gt;www.mydoman.com&lt;/code&gt; and can change localization on the fly.&lt;/p&gt;

&lt;p&gt;So, before choosing which way to go in such a fundamental choice you should check Transloco out to see if it would be a better fit for you.&lt;/p&gt;

&lt;p&gt;OK, enough technicalities let’s see some code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-localize-to-angular-project"&gt;
  &lt;/a&gt;
  Add localize to Angular project
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@angular/localize&lt;/code&gt; package was &lt;a href="https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3#b939"&gt;released with Angular 9&lt;/a&gt; and supports i18n in Ivy applications. This package requires a global &lt;a href="https://angular.io/api/localize/init/%24localize"&gt;&lt;code&gt;$localize&lt;/code&gt;&lt;/a&gt; symbol to exist. The symbol is loaded by importing the &lt;a href="https://angular.io/api/localize/init"&gt;&lt;code&gt;@angular/localize/init&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;To add the localization features provided by Angular, we need to add the &lt;code&gt;@angular/localize&lt;/code&gt; package to our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng add @angular/localize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Updates &lt;code&gt;package.json&lt;/code&gt; and installs the package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updates &lt;code&gt;polyfills.ts&lt;/code&gt;to import the &lt;code&gt;@angular/localize&lt;/code&gt; package.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you try using i18n without adding this package you get a self-explanatory error message reminding us to run &lt;code&gt;ng add @angular/localize&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translating-templates"&gt;
  &lt;/a&gt;
  Translating templates
&lt;/h2&gt;

&lt;p&gt;To translate templates in our application, we need first to prepare the texts by marking them with the &lt;code&gt;i18n&lt;/code&gt; attribute.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Internationalization"&gt;i18n&lt;/a&gt; is a custom attribute from the &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions"&gt;WebExtensions&lt;/a&gt; API. It’s recognized by Angular tools and compilers. During the compilation, it is removed, and the tag content is replaced with the translations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We mark the text like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag is now marked and ready for the next step in the translation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translating-typescript-files"&gt;
  &lt;/a&gt;
  Translating TypeScript files
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;NB! You need Angular 10.1 or later to extract strings from source code (.ts) files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s not only our templates that need to be translated. Sometimes we have code in our TypeScript files that also need a translation. To localize a string in the source code, we use the &lt;code&gt;$localize&lt;/code&gt; template literal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`My page`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;a href="https://michael-karen.medium.com/getting-started-with-modern-javascript-template-literals-d72f25511ab5"&gt;template literals&lt;/a&gt; use the backtick character instead of double or single quotes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extracting-texts"&gt;
  &lt;/a&gt;
  Extracting texts
&lt;/h2&gt;

&lt;p&gt;When our application is prepared to be translated, we can use the &lt;a href="https://angular.io/cli/extract-i18n"&gt;extract-i18n&lt;/a&gt; command to extract the marked texts into a &lt;strong&gt;source language file&lt;/strong&gt; named &lt;code&gt;messages.xlf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The command options we can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--output-path&lt;/code&gt;: Change the location of the source language file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--outFile&lt;/code&gt;: Change the file name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--format&lt;/code&gt;: Change file format. Possible formats are &lt;a href="https://en.wikipedia.org/wiki/XLIFF"&gt;XLIFF 1.2&lt;/a&gt; (default), XLIFF 2, and &lt;a href="http://cldr.unicode.org/development/development-process/design-proposals/xmb"&gt;XML Message Bundle (XMB)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running this command from the root directory of the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng extract-i18n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get the &lt;code&gt;messages.xlf&lt;/code&gt; file looking like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xliff&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.2"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"urn:oasis:names:tc:xliff:document:1.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;file&lt;/span&gt; &lt;span class="na"&gt;source-language=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"plaintext"&lt;/span&gt; &lt;span class="na"&gt;original=&lt;/span&gt;&lt;span class="s"&gt;"ng2.template"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"3492007542396725315"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"5513198529962479337"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;My page&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.ts&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xliff&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that we have the texts “Welcome” and “My page” in the file but what does it all mean?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;trans-unit&lt;/code&gt; is the tag containing a single translation. &lt;code&gt;id&lt;/code&gt; is a translation identifier that &lt;code&gt;extract-i18n&lt;/code&gt; generates so don’t modify it!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;source&lt;/code&gt; contains translation source text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context-group&lt;/code&gt; specifies where the given translation can be found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context-type="sourcefile"&lt;/code&gt; shows the file where translation is from.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context-type="linenumber"&lt;/code&gt; tells the line of code of the translation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have extracted the source file, how do we get files with the languages we want to translate?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-translation-files"&gt;
  &lt;/a&gt;
  Create translation files
&lt;/h2&gt;

&lt;p&gt;After we have generated the &lt;code&gt;messages.xlf&lt;/code&gt; file, we can add new languages by copying it and naming the new file accordingly with the associated locale.&lt;/p&gt;

&lt;p&gt;To store Norwegian translations we rename the copied file to &lt;code&gt;messages.nb.xlf&lt;/code&gt;. Then we send this file to the translator so that he can do the translations with an XLIFF editor. But, let’s not get ahead of us and first do a manual translation to get a better understanding of the translation files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translating-files-manually"&gt;
  &lt;/a&gt;
  Translating files manually
&lt;/h3&gt;

&lt;p&gt;Open the file and find the &lt;code&gt;&amp;lt;trans-unit&amp;gt;&lt;/code&gt; element, representing the translation of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; greeting tag that was previously marked with the &lt;code&gt;i18n&lt;/code&gt; attribute. Duplicate the &lt;code&gt;&amp;lt;source&amp;gt;...&amp;lt;/source&amp;gt;&lt;/code&gt; element in the text node, rename it to &lt;code&gt;target&lt;/code&gt;, and then replace its content with the Norwegian text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xliff&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.2"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"urn:oasis:names:tc:xliff:document:1.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;file&lt;/span&gt; &lt;span class="na"&gt;source-language=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"plaintext"&lt;/span&gt; &lt;span class="na"&gt;original=&lt;/span&gt;&lt;span class="s"&gt;"ng2.template"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"3492007542396725315"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;target&amp;gt;&lt;/span&gt;Velkommen&lt;span class="nt"&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"5513198529962479337"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;my page&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.ts&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xliff&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all that there is to it to add the translations to the files. Let’s see how we do it with an editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translating-files-with-an-editor"&gt;
  &lt;/a&gt;
  Translating files with an editor
&lt;/h3&gt;

&lt;p&gt;Before we can use an editor, we need to provide the translation language. We can do this by adding the &lt;code&gt;target-language&lt;/code&gt; attribute for the file tag so that translation software can detect the locale:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;file&lt;/span&gt; &lt;span class="na"&gt;source-language=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"plaintext"&lt;/span&gt; &lt;span class="na"&gt;original=&lt;/span&gt;&lt;span class="s"&gt;"ng2.template"&lt;/span&gt; &lt;span class="na"&gt;target-language=&lt;/span&gt;&lt;span class="s"&gt;"nb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s open this file in a translation tool to see what we are working with. I’m using the free version of &lt;a href="https://poedit.net/"&gt;PoEdit&lt;/a&gt; in this article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_NyHh9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075769143/GoAaKAWlq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_NyHh9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075769143/GoAaKAWlq.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks much easier to work with than the manual way. We even get some suggestions for translations. Let’s translate “my page” and save the file. If we then open &lt;code&gt;messages.nb.xlf&lt;/code&gt; we can see that it has added the translation in a target block like when we did it manually:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;My page&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;target&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="s"&gt;"translated"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Min side&lt;span class="nt"&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that it added &lt;code&gt;state="translated"&lt;/code&gt; to the target tag. This is an optional attribute that can have the values &lt;code&gt;translated&lt;/code&gt;, &lt;code&gt;needs-translation&lt;/code&gt;, or &lt;code&gt;final&lt;/code&gt;. This helps us when using the editor to find the texts that are not yet translated.&lt;/p&gt;

&lt;p&gt;This is a great start but before we try out the translations in our application, let’s see what more we can do by adding more information into the box in the screenshot named “Notes for translators”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes-for-translators"&gt;
  &lt;/a&gt;
  Notes for translators
&lt;/h2&gt;

&lt;p&gt;Sometimes the translator needs more information about what they are translating. We can add a &lt;strong&gt;description&lt;/strong&gt; of the translation as the value of the i18n attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;i18n=&lt;/span&gt;&lt;span class="s"&gt;"Welcome message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can add even more context to the translator by adding the &lt;strong&gt;meaning&lt;/strong&gt; of the text message. We can add the &lt;em&gt;meaning&lt;/em&gt; together with the &lt;em&gt;description&lt;/em&gt; and separate them with the &lt;code&gt;|&lt;/code&gt; character: &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt;. In this example we might want to let the translator know that this welcome message is located in the toolbar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;i18n=&lt;/span&gt;&lt;span class="s"&gt;"toolbar header|Welcome message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last part that we can add to the value of the &lt;code&gt;i18n&lt;/code&gt; attribute is an ID by using &lt;code&gt;@@&lt;/code&gt;. Be sure to define unique custom ids. If you use the same id for two different text messages, only the first one is extracted, and its translation is used in place of both original text messages.&lt;/p&gt;

&lt;p&gt;Here we add the ID &lt;code&gt;toolbarHeader&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;i18n=&lt;/span&gt;&lt;span class="s"&gt;"toolbar header|Welcome message@@toolbarHeader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we don’t add an ID for the translation, Angular will generate a random ID as we saw earlier. Running &lt;code&gt;ng extract-i18n&lt;/code&gt; again we can see that the helpful information has been added to our translation unit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"toolbarHeader"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;note&lt;/span&gt; &lt;span class="na"&gt;priority=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome message&lt;span class="nt"&gt;&amp;lt;/note&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;note&lt;/span&gt; &lt;span class="na"&gt;priority=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;"meaning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;toolbar header&lt;span class="nt"&gt;&amp;lt;/note&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;There are now a couple of &lt;code&gt;note&lt;/code&gt; tags that provide the translation &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;meaning&lt;/code&gt; and the &lt;code&gt;id&lt;/code&gt; is no longer a random number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we copy these to the &lt;code&gt;messages.ng.xlf&lt;/code&gt; file and open it in PoEdit we see that all these are now visible in “Notes for translators”:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PdUATuP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075770919/WrcgDKyAx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PdUATuP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075770919/WrcgDKyAx.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-context-in-typescript-files"&gt;
  &lt;/a&gt;
  Providing context in TypeScript files
&lt;/h2&gt;

&lt;p&gt;Like with Angular templates you can provide more context to translators by providing &lt;code&gt;meaning&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;id&lt;/code&gt; in TypeScript files. The format is the same as used for &lt;code&gt;i18n&lt;/code&gt; markers in the templates. Here are the different options as found in the &lt;a href="https://angular.io/api/localize/init/%24localize#description"&gt;Angular Docs&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:meaning|description@@id:source message text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:meaning|:source message text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:description:source message text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:@@id:source message text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding an &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; to our title could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:Header on first page@@firstPageTitle:My page`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the template literal string contains expressions, you can provide the placeholder name wrapped in &lt;code&gt;:&lt;/code&gt; characters directly after the expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:name:`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specialized-use-cases"&gt;
  &lt;/a&gt;
  Specialized use cases
&lt;/h2&gt;

&lt;p&gt;There are some specialized use cases for translations that we need to look at. &lt;strong&gt;Attributes&lt;/strong&gt; can easily be overlooked but are also important to translate, not least for accessibility.&lt;/p&gt;

&lt;p&gt;Different languages have different pluralization rules and grammatical constructions that can make translation difficult. To simplify translation, we can use &lt;code&gt;plural&lt;/code&gt; to mark the uses of plural numbers and &lt;code&gt;select&lt;/code&gt; to mark alternate text choices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attributes"&gt;
  &lt;/a&gt;
  Attributes
&lt;/h3&gt;

&lt;p&gt;Apart from the usual suspects of HTML tags, we need to also be aware that we need to translate HTML attributes. This is especially important when we are making our applications accessible to all people.&lt;/p&gt;

&lt;p&gt;Let’s take the example of an &lt;code&gt;img&lt;/code&gt; tag. People using a screen reader would not see the picture but instead, the &lt;code&gt;alt&lt;/code&gt; attribute would be read to them. For this reason and others, provide a useful value for &lt;code&gt;alt&lt;/code&gt; whenever possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Welcome logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To mark an attribute for translation, add &lt;code&gt;i18n-&lt;/code&gt; followed by the attribute that is being translated. To mark the &lt;code&gt;alt&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag we add &lt;code&gt;i18n-alt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="na"&gt;i18n-alt&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Welcome logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the text “Welcome logo” will be extracted for translation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also assign a meaning, description, and custom ID with the &lt;br&gt;
&lt;code&gt;i18n-attribute="&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;@@&amp;lt;id&amp;gt;"&lt;/code&gt; syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#plurals"&gt;
  &lt;/a&gt;
  Plurals
&lt;/h3&gt;

&lt;p&gt;Pluralization rules between languages differ. We need to account for all potential cases. We use the &lt;code&gt;plural&lt;/code&gt; clause to mark expressions we want to translate depending on the number of subjects.&lt;/p&gt;

&lt;p&gt;For example, imagine we do a search and want to show how many results were found. We want to show “nothing found” or the number of results appended with “items found”. And of course, let’s not forget about the case with only one result.&lt;/p&gt;

&lt;p&gt;The following expression allows us to translate the different plurals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
{itemCount, plural, =0 {nothing found} =1 {one item found} other {{{itemCount}} items found}}
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;itemCount&lt;/code&gt; is a property with the number of items found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;plural&lt;/code&gt; identifies the translation type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The third parameter lists all the possible cases (0, 1, other) and the corresponding text to display. Unmatched cases are caught by &lt;code&gt;other&lt;/code&gt;. Angular supports more categories &lt;a href="https://angular.io/guide/i18n#mark-plurals"&gt;listed here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we translate plural expression we have two trans units: One for the regular text placed before the plural and one for the plural versions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternates"&gt;
  &lt;/a&gt;
  Alternates
&lt;/h3&gt;

&lt;p&gt;If your text depends on the value of a variable, you need to translate all alternatives. Much like &lt;code&gt;plural&lt;/code&gt;, we can use the &lt;code&gt;select&lt;/code&gt; clause to mark choices of alternate texts. It allows you to choose one of the translations based on a value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Color: {color, select, red {red} blue {blue} green {green}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the value of &lt;code&gt;color&lt;/code&gt; we display either “red”, “blue”, or “green”. Like when translating plural expressions we get two trans units:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"7195591759695550088"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Color: &lt;span class="nt"&gt;&amp;lt;x&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"ICU"&lt;/span&gt; &lt;span class="na"&gt;equiv-text=&lt;/span&gt;&lt;span class="s"&gt;"{color, select, red {red} blue {blue} green {green}}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;12&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"3928679011634560837"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;{VAR_SELECT, select, red {red} blue {blue} green {green}}&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;12&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The editors understand these units and help us with the translations:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQ_sZnFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075772614/avS2wCzQV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQ_sZnFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075772614/avS2wCzQV.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interpolation"&gt;
  &lt;/a&gt;
  Interpolation
&lt;/h3&gt;

&lt;p&gt;Let’s combine a welcome message the &lt;code&gt;title&lt;/code&gt; property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome to {{ title }}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This places the value of the &lt;code&gt;title&lt;/code&gt; variable that we earlier translated in the text. When we extract this text we see how the interpolation is handled:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Welcome to &lt;span class="nt"&gt;&amp;lt;x&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"INTERPOLATION"&lt;/span&gt; &lt;span class="na"&gt;equiv-text=&lt;/span&gt;&lt;span class="s"&gt;"{{ title }}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the translation the &lt;code&gt;&amp;lt;x.../&amp;gt;&lt;/code&gt; stays the same for the target language:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;target&amp;gt;&lt;/span&gt;Velkommen til &lt;span class="nt"&gt;&amp;lt;x&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"INTERPOLATION"&lt;/span&gt; &lt;span class="na"&gt;equiv-text=&lt;/span&gt;&lt;span class="s"&gt;"{{ title }}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s the last example of translations that we are looking at. Now, let’s see how we can get this applications up and running with our new language!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-locales"&gt;
  &lt;/a&gt;
  Configuring locales
&lt;/h2&gt;

&lt;p&gt;To be able to run our application in many languages we need to define the locales in the build configuration. In the &lt;code&gt;angular.json&lt;/code&gt; file, we can define locales for a project under the &lt;code&gt;i18n&lt;/code&gt; option and &lt;code&gt;locales&lt;/code&gt;, that maps locale identifiers to translation files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"projects"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"i18n-app"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"i18n"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sourceLocale"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"en-US"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"locales"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"messages.nb.xlf"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we added the configuration for the Norwegian language. We provide the path for the translation file for the locale &lt;code&gt;"nb"&lt;/code&gt;. In our case, the file is still in the root directory.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sourceLocale&lt;/code&gt; is the locale you use within the app source code. The default is &lt;code&gt;en-US&lt;/code&gt; so we could leave this line out or we could change it to another language. Whatever value we use here is also used to build an application together with the &lt;code&gt;locales&lt;/code&gt; we define.&lt;/p&gt;

&lt;p&gt;To use your locale definition in the build configuration, use the &lt;code&gt;"localize"&lt;/code&gt; option in &lt;code&gt;angular.json&lt;/code&gt; to tell the CLI which locales to generate for the build configuration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;"localize"&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for &lt;em&gt;all&lt;/em&gt; the locales previously defined in the build configuration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;"localize"&lt;/code&gt; to an array of a subset of the previously-defined locale identifiers to build only those locale versions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The development server only supports localizing a single locale at a time. Setting the &lt;code&gt;"localize"&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; will cause an error when using &lt;code&gt;ng serve&lt;/code&gt; if more than one locale is defined. Setting the option to a specific locale, such as &lt;code&gt;"localize": ["nb"]&lt;/code&gt;, can work if you want to develop against a specific locale.&lt;/p&gt;

&lt;p&gt;Since we want to be able to &lt;code&gt;ng serve&lt;/code&gt; our application with a single language, we create a custom locale-specific configuration by specifying a single locale in &lt;code&gt;angular.json&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"localize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"browserTarget"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ng-i18n:build:nb"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this change we can serve the Norwegian version of the app and make sure the translations are working by sending in &lt;code&gt;nb&lt;/code&gt; to the &lt;code&gt;configuration&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng serve &lt;span class="nt"&gt;--configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also build the app with a specific locale:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng build &lt;span class="nt"&gt;--configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production,nb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with all the locales at once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng build &lt;span class="nt"&gt;--prod&lt;/span&gt; &lt;span class="nt"&gt;--localize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In other words, it’s more flexible to configure it the way we did but we could also have just set &lt;code&gt;localize&lt;/code&gt; and &lt;code&gt;aot&lt;/code&gt; to true and be done with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-multiple-languages-locally"&gt;
  &lt;/a&gt;
  Run multiple languages locally
&lt;/h2&gt;

&lt;p&gt;For performance reasons, running &lt;code&gt;ng serve&lt;/code&gt; only supports one locale at a time. As we saw earlier we can serve the specific languages by sending in the locale to the &lt;code&gt;configuration&lt;/code&gt; option. But, how can we run the application with all the configured languages?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-languages"&gt;
  &lt;/a&gt;
  Multiple languages
&lt;/h3&gt;

&lt;p&gt;To run all languages simultaneously we need first to build the project. We can build applications with the locales defined in the build configuration with the &lt;code&gt;localize&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng build &lt;span class="nt"&gt;--prod&lt;/span&gt; &lt;span class="nt"&gt;--localize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the build is localized and ready we need to set up a local webserver to serve the applications. Remember we have one application per language, which is what makes this a bit more complex.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://angular.io/guide/i18n#configuring-servers"&gt;Angular Docs&lt;/a&gt;, there are a couple of examples of server-side code that we can use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nginx"&gt;
  &lt;/a&gt;
  Nginx
&lt;/h3&gt;

&lt;p&gt;To get our application up and running we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href="https://www.nginx.com/resources/wiki/start/"&gt;Nginx&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add config from &lt;a href="https://angular.io/guide/i18n#nginx"&gt;Angular Docs&lt;/a&gt; to &lt;code&gt;conf/nginx.conf&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build our applications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy applications to the folder defined in &lt;code&gt;root&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open browser in &lt;code&gt;localhost&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The port is set in &lt;code&gt;listen&lt;/code&gt; and is normally set to 80. You change languages by changing the URL. We should now see our Norwegian application at &lt;code&gt;localhost/nb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of the &lt;code&gt;nginx.conf&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;events&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;types&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;module&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="n"&gt;/etc/nginx/mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Expires map for caching resources&lt;/span&gt;
  &lt;span class="kn"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;$sent_http_content_type&lt;/span&gt; &lt;span class="nv"&gt;$expires&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;default&lt;/span&gt;                    &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;text/html&lt;/span&gt;                  &lt;span class="s"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;text/css&lt;/span&gt;                   &lt;span class="s"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;application/javascript&lt;/span&gt;     &lt;span class="s"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;~image/&lt;/span&gt;                    &lt;span class="s"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# Browser preferred language detection&lt;/span&gt;
  &lt;span class="kn"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;$http_accept_language&lt;/span&gt; &lt;span class="nv"&gt;$accept_language&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;~*^en&lt;/span&gt; &lt;span class="s"&gt;en&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;~*^nb&lt;/span&gt; &lt;span class="s"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt;         &lt;span class="n"&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Set cache expires from the map we defined.&lt;/span&gt;
    &lt;span class="kn"&gt;expires&lt;/span&gt; &lt;span class="nv"&gt;$expires&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Security. Don't send nginx version in Server header.&lt;/span&gt;
    &lt;span class="kn"&gt;server_tokens&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Fallback to default language if no preference defined by browser&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$accept_language&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;"^$")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$accept_language&lt;/span&gt; &lt;span class="s"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Redirect "/" to Angular app in browser's preferred language&lt;/span&gt;
    &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^/&lt;/span&gt;$ &lt;span class="n"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$accept_language&lt;/span&gt; &lt;span class="s"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Everything under the Angular app is always redirected to Angular in the correct language&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;^/(en|nb)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="n"&gt;/index.html?&lt;/span&gt;&lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;# Add security headers from separate file&lt;/span&gt;
      &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="n"&gt;/etc/nginx/security-headers.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Proxy for APIs.&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/api&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://api.address.here&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we use Nginx in production, it makes sense to also test our application locally with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-production"&gt;
  &lt;/a&gt;
  Deploy to production
&lt;/h2&gt;

&lt;p&gt;If you are using Nginx in production, then you already have the language configuration setup. If not, you need to find out what changes you need for your particular server configuration.&lt;/p&gt;

&lt;p&gt;We have to take into consideration if we are running the application locally or in production. We can do this by using &lt;a href="https://angular.io/api/core/isDevMode"&gt;&lt;code&gt;isDevMode&lt;/code&gt;&lt;/a&gt;, which returns whether Angular is in development mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;isDevMode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, when we are running the application locally with &lt;code&gt;ng serve&lt;/code&gt; we don’t add the locale to the URL as we do when we have localized the application in the production build.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maintaining-the-application"&gt;
  &lt;/a&gt;
  Maintaining the application
&lt;/h2&gt;

&lt;p&gt;Usually, when the application has been deployed it’s time to end the article. This time I wanted to address a few more things before ending. Let’s start by looking into what challenges we run into when going into maintenance mode.&lt;/p&gt;

&lt;p&gt;The biggest challenge is the handling of the translation files. We need to make sure that the marked texts find their way to the translators and back to the application before it’s deployed. To help with this we need to find a way to &lt;strong&gt;automate&lt;/strong&gt; the generation of translation files and get &lt;strong&gt;notified&lt;/strong&gt; when we have missing translations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-the-translation-files"&gt;
  &lt;/a&gt;
  Generating the translation files
&lt;/h3&gt;

&lt;p&gt;It’s not sustainable to keep merging the translation files manually. We need some automation! To implement this, I’m using a free tool called &lt;a href="https://github.com/martinroob/ngx-i18nsupport/tree/master/projects/xliffmerge"&gt;Xliffmerge&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since this tool has old Angular versions as &lt;code&gt;peerDependencies&lt;/code&gt; we need to use &lt;code&gt;--legacy-peer-deps&lt;/code&gt; if we are using a new version of NPM (v7) that would otherwise fail on installation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation for Xliffmerge is targeting older versions of Angular, but after some experimentation, I found it enough to install the &lt;code&gt;@ngx-i18nsupport/tooling&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; @ngx-i18nsupport/tooling &lt;span class="nt"&gt;--legacy-peer-deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;-D&lt;/code&gt; installs to &lt;code&gt;devDependencies&lt;/code&gt;, and for use in a CI pipeline, you should omit it to use in &lt;code&gt;dependencies&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we can add new languages to the configurations in &lt;code&gt;angular.json&lt;/code&gt; under &lt;code&gt;projects -&amp;amp;gt; projectName -&amp;amp;gt; architect -&amp;amp;gt; xliffmerge&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"xliffmerge"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"builder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@ngx-i18nsupport/tooling:xliffmerge"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"xliffmergeOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"defaultLanguage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"en-US"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"languages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding new translations, we can extract them and migrate them to our translation files by running this script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng extract-i18n &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ng run projectName:xliffmerge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get a couple of warnings running the script which tells us its working!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WARNING: merged 1 trans-units from master to "nb"
WARNING: please translate file "messages.nb.xlf" to target-language="nb"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, you can distribute the language files to the translators. And when the translations finish, the files need to be merged back into the project repository.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just a word of caution that this library was not being actively maintained at the time of this writing, so you might want to look into other options. There is an Angular &lt;a href="https://github.com/angular/angular/issues/37655"&gt;issue on merging translated files&lt;/a&gt;. Go and upvote it if you think this is something that we need!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#missing-translations"&gt;
  &lt;/a&gt;
  Missing Translations
&lt;/h3&gt;

&lt;p&gt;Another way to make sure the translations are valid is to get noticed if translations are missing. By default, the build succeeds but generates a warning of missing translations. We can configure the level of the warning generated by the Angular compiler:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;error&lt;/code&gt;: An error message is displayed, and the build process is aborted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;warning&lt;/code&gt; (default): Show a Missing translation warning in the console or shell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ignore&lt;/code&gt;: Do nothing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Specify the warning level in the options section for the build target of your Angular CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;. The following example shows how to set the warning level to error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"i18nMissingTranslation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the application and no translation is found, the application displays the source-language text. We have to make a decision here on how important the translations are. If they are crucial then we should break the build to make sure we get all translations delivered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#format-data-based-on-locale"&gt;
  &lt;/a&gt;
  Format data based on locale
&lt;/h2&gt;

&lt;p&gt;Languages are not the only thing to take into consideration when localizing applications. A couple of the more obvious things we need to think about is how we present dates and numbers to our local customers.&lt;/p&gt;

&lt;p&gt;In Angular, we provide the &lt;a href="https://angular.io/api/core/LOCALE_ID"&gt;&lt;code&gt;LOCALE_ID&lt;/code&gt;&lt;/a&gt; token to set the locale of the application and register locale data with &lt;a href="https://angular.io/api/common/registerLocaleData"&gt;&lt;code&gt;registerLocaleData()&lt;/code&gt;&lt;/a&gt;. When we use the &lt;code&gt;--localize&lt;/code&gt; option with &lt;code&gt;ng build&lt;/code&gt; or run the &lt;code&gt;--configuration&lt;/code&gt; flag with &lt;code&gt;ng serve&lt;/code&gt;, the Angular CLI automatically includes the locale data and sets the &lt;code&gt;LOCALE_ID&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;LOCALE_ID&lt;/code&gt; set to the correct locale, we can use the built-in &lt;a href="https://angular.io/guide/glossary#pipe"&gt;pipes&lt;/a&gt; of Angular to format our data. Angular provides the following pipes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/api/common/DatePipe"&gt;&lt;code&gt;DatePipe&lt;/code&gt;&lt;/a&gt;: Formats a date value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/api/common/CurrencyPipe"&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;&lt;/a&gt;: Transforms a number to a currency string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/api/common/DecimalPipe"&gt;&lt;code&gt;DecimalPipe&lt;/code&gt;&lt;/a&gt;: Transforms a number into a decimal number string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/api/common/PercentPipe"&gt;&lt;code&gt;PercentPipe&lt;/code&gt;&lt;/a&gt;: Transforms a number to a percentage string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, &lt;code&gt;{{myDate | date}}&lt;/code&gt; uses &lt;code&gt;DatePipe&lt;/code&gt; to display the date in the correct format. We can also use the pipes in TypeScript files as long as we provide them to the module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#runtime-translations"&gt;
  &lt;/a&gt;
  Runtime translations
&lt;/h2&gt;

&lt;p&gt;When we run &lt;code&gt;ng serve --configuration=xx&lt;/code&gt; or &lt;code&gt;ng build --localize&lt;/code&gt; then the application is compiled and translated before we run it. However, if we don’t tell Angular to localize our application, then the &lt;code&gt;$localize&lt;/code&gt; tags are left in the code, and it’s possible to instead do the translation at runtime.&lt;/p&gt;

&lt;p&gt;This means that we can ship a single application and load the translations that we want to use before the application starts. There is a function &lt;a href="https://angular.io/api/localize/loadTranslations"&gt;&lt;code&gt;loadTranslations&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;@angular/localize&lt;/code&gt; that can be used to load translations, in the form of key/value pairs, before the application starts.&lt;/p&gt;

&lt;p&gt;Since the translations have to be called before any module file is imported, we can put it in &lt;code&gt;polyfills.ts&lt;/code&gt;. You could also use it in &lt;code&gt;main.ts&lt;/code&gt; by using a dynamic &lt;code&gt;import(...)&lt;/code&gt; for the module.&lt;/p&gt;

&lt;p&gt;Here is an example of using &lt;code&gt;loadTranslations&lt;/code&gt; in &lt;code&gt;polyfills.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/localize/init&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadTranslations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/localize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;loadTranslations&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;welcome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Velkommen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the outcome of this is effectively the same as translation at compile-time. The translation happens only once If you want to change the language at runtime then you must restart the whole application. Since &lt;code&gt;$localize&lt;/code&gt; messages are only processed on the first encounter, they do not provide dynamic language changing without refreshing the browser.&lt;/p&gt;

&lt;p&gt;The main benefit is allowing the project to deploy a single application with many translation files. The documentation on this part is still lacking, but hopefully, we get &lt;a href="https://github.com/angular/angular/issues/37563"&gt;official documentation&lt;/a&gt; on how to best work with &lt;code&gt;loadTranslations&lt;/code&gt; and &lt;code&gt;$localize&lt;/code&gt;. There are 3rd party libraries like &lt;a href="https://github.com/soluling/I18N/tree/master/Library/Angular"&gt;Soluling&lt;/a&gt; out there trying to bridge the gaps.&lt;/p&gt;

&lt;p&gt;If a dynamic and runtime-friendly solution is what you are looking for, then you should use &lt;a href="https://ngneat.github.io/transloco/"&gt;Transloco&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We started this article by looking into how the new Ivy engine changed the i18n and localizing of applications with Angular. We looked into what benefits and drawbacks this entails and if and when we should use alternative solutions.&lt;/p&gt;

&lt;p&gt;We then looked into adding the built-in package to a solution and how we mark texts for translation. We learned how to configure the application for localization and added tooling to manage our translation files. When we used an editor for translating, we saw how adding context to translations helps.&lt;/p&gt;

&lt;p&gt;Finally, after configuring and translating the application, we set up a web server to serve our application both locally and in production.&lt;/p&gt;

&lt;p&gt;There are many parts to localizing an application and I hope that after reading this article, you have a better understanding of how you can create and manage multi-language applications with Angular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/guide/i18n"&gt;Angular Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.angular.io/angular-localization-with-ivy-4d8becefb6aa"&gt;Angular localization with Ivy&lt;/a&gt; by &lt;a href="https://medium.com/@petebd"&gt;Pete Bacon Darwin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.ninja-squad.com/2019/12/10/angular-localize/"&gt;Internationalization with @angular/localize&lt;/a&gt; by &lt;a href="https://twitter.com/cedric_exbrayat"&gt;Cédric Exbrayat&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why and how to manage state for Angular Reactive Forms</title>
      <author>Mike Pearson</author>
      <pubDate>Mon, 12 Apr 2021 08:34:37 +0000</pubDate>
      <link>https://dev.to/this-is-angular/why-and-how-to-manage-state-for-angular-reactive-forms-25fn</link>
      <guid>https://dev.to/this-is-angular/why-and-how-to-manage-state-for-angular-reactive-forms-25fn</guid>
      <description>&lt;p&gt;Should form state always be local? Some believe so, but methods like &lt;code&gt;setValue()&lt;/code&gt; and &lt;code&gt;disable()&lt;/code&gt; indicate that at least &lt;em&gt;sometimes&lt;/em&gt; you need to manage form state from the outside. But these methods are imperative and &lt;a href="https://dev.to/this-is-angular/isn-t-angular-reactive-forms-basically-just-jquery-22ol"&gt;reminiscent of jQuery&lt;/a&gt;, so usually it is better to have something more declarative and reactive like the rest of Angular. &lt;/p&gt;

&lt;p&gt;Before we look at how to accomplish this, let's review some scenarios where reactive state management is especially helpful:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saved-progress"&gt;
  &lt;/a&gt;
  Saved Progress
&lt;/h3&gt;

&lt;p&gt;This is any app where users spend a lot of time in a form and switch between multiple drafts, such as email clients with draft emails. This requires a lot of external state updates to the form.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undoredo"&gt;
  &lt;/a&gt;
  Undo/Redo
&lt;/h3&gt;

&lt;p&gt;Undo/Redo across multiple form elements can be convenient for users, and it requires completely swapping out form state multiple times. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-and-realtime"&gt;
  &lt;/a&gt;
  Time and Realtime
&lt;/h3&gt;

&lt;p&gt;Sometimes realtime data needs to be reflected in a form on an ongoing basis, like when a user is entering a bid for an item with frequent price updates, or scheduling something in the near future. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverside-events"&gt;
  &lt;/a&gt;
  Server-Side Events
&lt;/h3&gt;

&lt;p&gt;Any time something happens to a data model that the user is editing, you may need to update the state of the form. These events could be another user editing the same data, an item selling out, some status change, or anything that would cause a problem if the user tried to submit outdated data. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h3&gt;

&lt;p&gt;Complex forms are hard to understand, but Redux Devtools can help a lot. You have to personally decide when a form is complex enough to justify the time to set up external state management. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#the-simple-way"&gt;
  &lt;/a&gt;
  The Simple Way
&lt;/h2&gt;

&lt;p&gt;Setting up external state management for forms might take a lot less time than you might think. I'm going to explain how to do it with both NgRx and StateAdapt because I just released StateAdapt and want you to know how cool it is 😁&lt;/p&gt;

&lt;p&gt;Skip to Steps 5-7 if you want to only see the stuff that is related to forms. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-ngrx-and-stateadapt"&gt;
  &lt;/a&gt;
  Step 1 (NgRx and StateAdapt)
&lt;/h3&gt;

&lt;p&gt;Create the form state interface and initial state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// form-state.interface.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FormState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Whatever it is&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-ngrx-only"&gt;
  &lt;/a&gt;
  Step 2 (NgRx only)
&lt;/h3&gt;

&lt;p&gt;Create this action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// form.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ngrx/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FormState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./form-state.interface&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formValueChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Form] Value Change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-ngrx-only"&gt;
  &lt;/a&gt;
  Step 3 (NgRx only)
&lt;/h3&gt;

&lt;p&gt;Create the reducer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// form.reducer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ngrx/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FormState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./form-state.interface&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;formValueChange&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./form.actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formValueChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormState&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;formReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-ngrx-only"&gt;
  &lt;/a&gt;
  Step 4 (NgRx only)
&lt;/h3&gt;

&lt;p&gt;Plug the reducer into the reducer/state tree, wherever you want it to show up (see &lt;a href="https://ngrx.io/guide/store/reducers#registering-root-state"&gt;NgRx Docs&lt;/a&gt;). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-ngrx"&gt;
  &lt;/a&gt;
  Step 5 (NgRx)
&lt;/h3&gt;

&lt;p&gt;Add these imports to the file of the component containing the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;formValueChange&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./form.actions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this code inside the component class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// this.form is the formGroup you created for the form&lt;/span&gt;
  &lt;span class="nx"&gt;formValues$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueChanges&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formValueChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Wherever you put it in your state tree&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-stateadapt"&gt;
  &lt;/a&gt;
  Step 5 (StateAdapt)
&lt;/h3&gt;

&lt;p&gt;Add these imports to the file of the component containing the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapToAction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@state-adapt/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./form-state.interface&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this code inside the component class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// this.form is the formGroup you created for the form&lt;/span&gt;
  &lt;span class="nx"&gt;valueChanges$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueChanges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;mapToAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Form] Value Change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;formValues$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adapt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueChanges$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-ngrx-and-stateadapt"&gt;
  &lt;/a&gt;
  Step 6 (NgRx and StateAdapt)
&lt;/h3&gt;

&lt;p&gt;Drop this directive into your module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// patch-form-group-values.directive.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[patchFormGroupValues]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PatchFormGroupValuesDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;formGroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;patchFormGroupValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patchValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;emitEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-7-ngrx-and-stateadapt"&gt;
  &lt;/a&gt;
  Step 7 (NgRx and StateAdapt)
&lt;/h3&gt;

&lt;p&gt;Use the new directive in your component template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;[formGroup]=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;[patchFormGroupValues]=&lt;/span&gt;&lt;span class="s"&gt;"formValues$ | async"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#simple-way-review"&gt;
  &lt;/a&gt;
  Simple Way Review
&lt;/h2&gt;

&lt;p&gt;Here are working StackBlitz examples for &lt;a href="https://stackblitz.com/edit/angular-reactive-forms-state-management?file=src%2Fapp%2Fform%2Fngrx-form.component.ts"&gt;NgRx&lt;/a&gt; and &lt;a href="https://stackblitz.com/edit/angular-reactive-forms-state-management?file=src%2Fapp%2Fform%2Fstate-adapt-form.component.ts"&gt;StateAdapt&lt;/a&gt;. Open up Redux Devtools and watch as you edit the form. Success! &lt;/p&gt;

&lt;p&gt;Notice that StateAdapt didn't require Steps 2-4. Check out the diff between NgRx and StateAdapt:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0g5gg3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chrk1rh5kwijcn43exah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0g5gg3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chrk1rh5kwijcn43exah.png" alt="Angular Reactive Forms diff between NgRx and StateAdapt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is StateAdapt missing that makes it so minimal? Nothing. It has every layer NgRx has; each layer is just thinner.&lt;/p&gt;

&lt;p&gt;Here I used &lt;code&gt;this.adapt.updater&lt;/code&gt; instead of the usual &lt;code&gt;this.adapt.init&lt;/code&gt; method. It is syntactic sugar for calling &lt;code&gt;init&lt;/code&gt; for a basic adapter with an &lt;code&gt;update&lt;/code&gt; state change function. I do not think this is cheating, because a primary benefit of StateAdapt is encouragement to reuse state management patterns (an idea from NgRx/Entity). But even without the syntactic sugar it would only take 6 lines of code to define the &lt;code&gt;updateAdapter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAdapter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@state-adapt/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FormState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./form-state.interface&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateAdapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()({&lt;/span&gt;
  &lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read more about StateAdapt &lt;a href="https://medium.com/weekly-webtips/introducing-stateadapt-reusable-reactive-state-management-9f0388f1850e"&gt;here&lt;/a&gt; if you are interested.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-advanced-way"&gt;
  &lt;/a&gt;
  The Advanced Way
&lt;/h2&gt;

&lt;p&gt;The simple method only puts one action type in Redux Devtools: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuth_AfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zvonb6z453oadand5nn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuth_AfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zvonb6z453oadand5nn.png" alt="Action types are all the same"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will probably want something more descriptive if your form is large. &lt;/p&gt;

&lt;p&gt;The basic pattern is established in the simple method above, so if you want to extend it, you will just need to create an action for each property of &lt;code&gt;FormState&lt;/code&gt; and enhance the reducer to handle each action. If you have multiple form groups, you can use &lt;code&gt;PatchFormGroupValues&lt;/code&gt; on each of them. If, however, you are defining an action for each form control, you need a new directive. Here is where you can use the &lt;code&gt;SetValue&lt;/code&gt; directive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// set-value.directive.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgControl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/forms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[setValue]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SetValueDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;emitEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;ngControl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NgControl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is used as you would imagine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;[formControl]=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;[setValue]=&lt;/span&gt;&lt;span class="s"&gt;"name$ | async"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;[formControl]=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;[setValue]=&lt;/span&gt;&lt;span class="s"&gt;"age$ | async"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the component you would listen to the &lt;code&gt;valueChanges&lt;/code&gt; of each form control and have a &lt;code&gt;using&lt;/code&gt; call for each if you are using NgRx. I won't paste all the code here, but I do have &lt;a href="https://stackblitz.com/edit/angular-reactive-forms-state-management?file=src%2Fapp%2Fform%2Fstate-adapt-advanced-form.component.ts"&gt;a working example in StackBlitz&lt;/a&gt; for StateAdapt. The result is a little more detail about what is happening:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---_qzECgT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbvz6coz9tmbj1zhuat2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---_qzECgT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbvz6coz9tmbj1zhuat2.png" alt="Action types are different"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;When it is this easy to get Redux Devtools working for a form, I do not see many situations where you would not want to use it. Maybe NgRx is too much setup for a lot of forms, but if you add StateAdapt to your NgRx or NGXS project, you really only need to add 4 or so lines of code to enable Redux Devtools for a form. Plus, you have a much more reactive and declarative foundation for managing form state in the future!&lt;/p&gt;

&lt;p&gt;You can control other attributes of form controls with directives, too, if you follow the same pattern. For example, I have a &lt;code&gt;ControlDisabled&lt;/code&gt; directive in &lt;a href="https://dev.to/this-is-angular/isn-t-angular-reactive-forms-basically-just-jquery-22ol"&gt;my last blog post&lt;/a&gt; you can use. &lt;/p&gt;

&lt;p&gt;If you are interested in learning more about StateAdapt, please &lt;a href="https://medium.com/weekly-webtips/introducing-stateadapt-reusable-reactive-state-management-9f0388f1850e"&gt;read my introduction post&lt;/a&gt; or &lt;a href="https://state-adapt.github.io/"&gt;visit the website&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>angular</category>
      <category>forms</category>
      <category>ngrx</category>
      <category>stateadapt</category>
    </item>
    <item>
      <title>How to become a web designer?</title>
      <author>Nilesh NJ</author>
      <pubDate>Mon, 12 Apr 2021 08:17:54 +0000</pubDate>
      <link>https://dev.to/thenileshnj/how-to-become-a-web-designer-1d5j</link>
      <guid>https://dev.to/thenileshnj/how-to-become-a-web-designer-1d5j</guid>
      <description>&lt;p&gt;If you want to become a successful web designer, first you need to understand what is web designing? what are the responsibilities of a web designer? what to learn to become a successful web designer.&lt;/p&gt;

&lt;p&gt;How to become a web designer&lt;/p&gt;

&lt;p&gt;what you need to learn to become a web designer:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;p&gt;JavaScript&lt;/p&gt;

&lt;p&gt;Any CSS framework&lt;/p&gt;

&lt;p&gt;basic SEO&lt;/p&gt;

&lt;p&gt;Naw, you get what is and what to learn to become a web designer to get more info or perfect guide read the article “How to become a successful web designer”&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webdesigning</category>
    </item>
    <item>
      <title>Some small Css tips #014</title>
      <author>Stephan Nijman</author>
      <pubDate>Mon, 12 Apr 2021 08:12:31 +0000</pubDate>
      <link>https://dev.to/vanaf1979/some-small-css-tips-014-85o</link>
      <guid>https://dev.to/vanaf1979/some-small-css-tips-014-85o</guid>
      <description>&lt;p&gt;To continue on my &lt;a href="https://dev.to/vanaf1979/some-small-css-tips-013-4bk4"&gt;previous post&lt;/a&gt; here are some more tweets with little Css tips that might help you in your projects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prevent-users-from-selecting-text"&gt;
  &lt;/a&gt;
  Prevent users from selecting text.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjPMPyBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EwMtAQZXAAMXGSy.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: You can prevent users from selecting text on your site by setting the css user-select property to none; &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt;&lt;br&gt;&lt;br&gt;👇Check out the CodePen below 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:27 PM - 11 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1369988287285387271" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1369988287285387271" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1369988287285387271" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/jOVvdEd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
User-select docs: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/user-select"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/user-select&lt;/a&gt;


&lt;h3&gt;
  &lt;a href="#css-is"&gt;
  &lt;/a&gt;
  Css :is()
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uudBguC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EwRvKchW8AYhCzq.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: Instead of writing out a lot of chained selectors we can use the :is() function to shorten these. &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt;&lt;br&gt;&lt;br&gt;👇Check out the CodePen below 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:54 AM - 12 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1370342555490131968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1370342555490131968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1370342555490131968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/LYbJMEK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
:is() docs: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:is"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/:is&lt;/a&gt;


&lt;h3&gt;
  &lt;a href="#css-viewport-units"&gt;
  &lt;/a&gt;
  Css viewport units.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXZXQD2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ewmh51MWQAAkqzP.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: Instead of using pixels or rems you can also use css viewport units (vw, vh, vmin, vmax) to make your websites more responsive. &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt;&lt;br&gt;&lt;br&gt;👇Check out the CodePen below. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:48 PM - 16 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1371805648938266626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1371805648938266626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1371805648938266626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/VwmRVmj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;





&lt;h3&gt;
  &lt;a href="#css-logical-properties"&gt;
  &lt;/a&gt;
  Css logical properties.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OrxPahcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EwrqF1OWYAQE3jU.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: If you need to support multiple writing directions (rtl, ltr etc...) you could use Css Logical Properties to automatically change your margins, paddings and borders to match the used direction. &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt;&lt;br&gt;&lt;br&gt;👇Check out the CodePen below. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:43 PM - 17 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1372166615731740677" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1372166615731740677" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1372166615731740677" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/YzpgOye?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Css logical properties docs: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties&lt;/a&gt;




&lt;h3&gt;
  &lt;a href="#subscribe-and-follow"&gt;
  &lt;/a&gt;
  Subscribe and Follow
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/channel/UCeyqA3y26RlnfUSx3ufgFoA"&gt;Subscribe to my Youtube channel.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/Vanaf1979"&gt;Follow me on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading/watching and stay safe&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Von Neumann &amp; Harvard Architectures</title>
      <author>Yetkin Akyuz</author>
      <pubDate>Mon, 12 Apr 2021 08:10:25 +0000</pubDate>
      <link>https://dev.to/yetkinakyuz/von-neumann-harvard-architectures-30f5</link>
      <guid>https://dev.to/yetkinakyuz/von-neumann-harvard-architectures-30f5</guid>
      <description>&lt;p&gt;Considering the problem of how to access CPU level memory, There are two popular designs: Von Neumann and Harvard architectures.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROom-OPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yetkinakyuz.com/wp-content/uploads/2021/03/Von-Neumann.png" alt="Von Neumann Architecture" width="70%" height="70%"&gt;&lt;p&gt;Figure 1: Von Neumann Architecture [2]&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;The Von Neumann architecture, created by John Von Neumann in 1945, is a computer architecture in which data and instruction memories share a single storage unit. There is only one bus each for memory addresses and data transmission.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--osGdvBJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4nx302hg3lj5xyyd51a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--osGdvBJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4nx302hg3lj5xyyd51a.png" alt="Harvard Architecture" width="70%" height="70%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;p&gt;Figure 2: Harvard Architecture [3]&lt;/p&gt;&lt;/center&gt;

&lt;p&gt;In the Harvard architecture, which takes its name from Harvard Mark I, the computer for which it is used for the first time, data and instruction memories are physically separated from each other. Both have separate memory address bus and data bus. When a program runs, instruction flow and data flow take place over separate sets of buses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-von-neumann-bottleneck"&gt;
  &lt;/a&gt;
  The Von Neumann Bottleneck
&lt;/h3&gt;

&lt;p&gt;The fact that a single bus transmits both instructions and data leads to a problem called The Von Neumann Bottleneck. Because a single bus can only access one class of memory at a time, the throughput is lower than the speed at which the CPU can run. Therefore, the CPU has to constantly wait for the required data to be transported, resulting in a drastic drop in processing speed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0B_4LbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib7fcvio7owdoxm9kgui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0B_4LbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib7fcvio7owdoxm9kgui.png" alt="Performance of processor and memory" width="70%" height="70%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;p&gt;Figure 3: Performance of processor and memory [4]&lt;/p&gt;&lt;/center&gt;

&lt;p&gt;The most logical solution is to use a cache, which holds the last data used by the processor. In this way, the processor does not need to access memory and the expected time is compensated.&lt;/p&gt;

&lt;p&gt;The problem is experienced in general today, rather than only in Von Neumann architecture. Memory technology, which cannot keep up with the development of processor technology, greatly increases this problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-modified-harvard-architecture"&gt;
  &lt;/a&gt;
  The Modified Harvard Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isx_yilU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5dtkthxovlk9802talo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isx_yilU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5dtkthxovlk9802talo.jpg" alt="Modified Harvard Architecture" width="50%" height="50%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;p&gt;Figure 4: Modified Harvard Architecture [6]&lt;/p&gt;&lt;/center&gt;

&lt;p&gt;The Modified Harvard architecture is a variation of the Harvard computer architecture that allows the contents of the instruction memory to be accessed as data, unlike the pure Harvard architecture. It supports higher performance concurrent data and instruction access of Harvard architecture. It also loosens the distinction between commands and data. Two separate caches are used, supported by the same memory address, one for commands and the other for data. In short, while Harvard architecture is used on the cache side, Von Neumann architecture is used on the main memory side.&lt;/p&gt;

&lt;p&gt;Most of the modern computers described as Harvard architecture are actually modified Harvard architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Zhu, Y. (Haziran 2018). Embedded Systems with ARM Cortex-M Microcontrollers in Assembly Language and C&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Von_Neumann_architecture"&gt;Wikipedia. Von Neumann Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Harvard_architecture"&gt;Wikipedia. Harvard Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iopscience.iop.org/article/10.1088/1742-6596/523/1/012002/pdf"&gt;Nowak, A. (2014). Opportunities and choice in a new vector era&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Modified_Harvard_architecture"&gt;Wikipedia. Modified Harvard Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blocksandfiles.com/2019/08/20/back-to-the-future-with-persistent-memory/"&gt;Blocksandfiles. (2019). Back to the future with persistent memory&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>computerscience</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Basic Component pada Vue JS</title>
      <author>Dimas Andhika</author>
      <pubDate>Mon, 12 Apr 2021 08:04:23 +0000</pubDate>
      <link>https://dev.to/dimasngoding/basic-component-pada-vue-js-381m</link>
      <guid>https://dev.to/dimasngoding/basic-component-pada-vue-js-381m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#perkenalan"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Perkenalan&lt;/strong&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vue adalah progresif framework javascript yang memungkinkan kalian menulis kode dengan efisien dan cepat dibandingkan tanpa Framework sama sekali, oleh karena itu di Vue JS menerapkan sistem Component&lt;/p&gt;
&lt;/blockquote&gt;



&lt;blockquote&gt;
&lt;p&gt;Di vue js terdapat banyak component seperti: &lt;strong&gt;Component Basic, Component Props, Component Emit, Component Slot, Component Provide, Component Inject&lt;/strong&gt;. Artikel ini akan membahas Component Basic pada Vue JS &lt;strong&gt;Note: Pastikan kalian paham tentang Vue dan Javascript Dasar&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#component-basic"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Component Basic&lt;/strong&gt;
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#konfigurasi-pada-vue-cli"&gt;
  &lt;/a&gt;
  🚀 Konfigurasi pada Vue CLI
&lt;/h4&gt;



&lt;ol&gt;
&lt;li&gt;Pertama kita buat file (Nama.vue) biasanya di simpan pada direktori &lt;em&gt;src/components/&lt;/em&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/Nama.vue&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;Ini&lt;/span&gt; &lt;span class="nc"&gt;Dipanggil&lt;/span&gt; &lt;span class="nc"&gt;Dari&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="nc"&gt;Nama&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vue&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kalian bebas menentukan nama filenya. Lalu didalam filenya kalian tuliskan elemen html seperti biasa, seperti pada contoh diatas.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
2.Tentukan dimana kalian akan merender Component tersebut contoh saya ingin render di src/App.vue&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Nama&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;/* eslint-disable */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Nama&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path/ke/FileVueKalian&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Nama&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nama-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Nama&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Jika ingin kebab-case&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Otomatis elemen &lt;code&gt;h3&lt;/code&gt; dengan tulisan &lt;code&gt;Ini Dipanggil Dari Component Nama.vue&lt;/code&gt; akan langsung di render pada File App.vue. Hanya dengan begitu saja kalian sudah bisa membuat Component Dasar pada Vue JS&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>AWS open source news and updates #63</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 12 Apr 2021 07:46:30 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-63-393c</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-63-393c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#april-12th-2021-instalment-63"&gt;
  &lt;/a&gt;
  April, 12th, 2021 - Instalment #63
&lt;/h2&gt;

&lt;p&gt;Newsletter #63. &lt;/p&gt;

&lt;p&gt;No newsletter last week due to the holidays, which means that this week we have a bumper edition. Check out the AWS CDK content this week, as there is both lots of it, but also all if it is great. We then have some great content if you are into containers, and the usual round up of other open source posts from AWS and the community covering topics such as Selenium, Apache Airflow, Apache Flink, GraphQL, Java and much more. On top of that we have some great new open source projects, including the latest from Amazon Research that provides tools to help data scientists fine tune language models.&lt;/p&gt;

&lt;p&gt;Not signed up for the CDK Day yet? Don't worry, there is still time - head down to the Events section for links. Remember this is a free event, with a fantastic line up (schedule was published last week) and already has over 1000 folks signed up from across the world. This is one event you do not want to miss.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rust Foundation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First up this week is news that Shane Miller is taking on the role of the Rust Foundation chair. Shane heads up the Rust platform team at AWS, and you can read more about this announcement in the post over at ZDNet, &lt;a href="https://aws-oss.beachgeek.co.uk/do"&gt;AWS's Shane Miller to head the newly created Rust Foundation&lt;/a&gt;. Congratulations Shane.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Treatments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Read about how open source is helping to give patients the tools and technology to build treatments in this post,&lt;br&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/d1"&gt;Software engineer bets on technology to help speed rare disease treatments&lt;/a&gt;. The post talks about Open Treatments which is an open source platform, that is intended to accelerate collaboration and provide the tools needed to accelerate research and find new treatments. Inspiring stuff, and well worth 5 minutes of your time.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Isabel Groves, Matt Hansen, Kyle Davis, Kyle Lee, Jonah Jones, Loris Degioanni, Christian Weber, Ishan Bhanuka, Eric Z. Beard, Rico Huijbers, Mitchell Valine, Nader Dabit, Mark Sailes, Re Alvarez-Parmar, Elamaran Shanmugam, Vivek Singh, Sagar Patel, Praveen Kumar, Anand Shah, Masudur Rahaman Sayem, Benjamin Gardiner, Olly Pomeroy, Massimo Re Ferre, Jeremy Cowan, Jimmy Ray, Yoni Leitersdorf, Manish Dhawaria, Hari Ohm Prasath, Jonah Jones, Prakash Palanisamy, Benjamin Meyer, Phillip Ninan, Rehan van der Merwe, Luc van Donkersgoed, Eric Meisel, Maria Sokolova, Masudur Rahaman Sayem, Karl Platz, Vadim Dabravolski and Paolo Irrera.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;datatuner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ds"&gt;datatuner&lt;/a&gt; this new open source project was developed in the Alexa AI team, and is an end-to-end, data-to-text generation system called DataTuner, which can be used for a variety of data types and topics to generate fluent and accurate texts. You can read the published paper, &lt;a href="https://aws-oss.beachgeek.co.uk/dt"&gt;Automatically generating text from structured data&lt;/a&gt; written by Isabel Groves that introduces the topic and covers the techniques used to improve natural language understanding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZcCkmJdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.amazon.science/dims4/default/c5d113e/2147483647/strip/true/crop/1377x773%2B0%2B0/resize/1200x674%21/quality/90/%3Furl%3Dhttp%253A%252F%252Famazon-topics-brightspot.s3.amazonaws.com%252Fscience%252Ff8%252Fbb%252Fbd2103fc48e98225e578e021aa73%252Fdatatuner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZcCkmJdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.amazon.science/dims4/default/c5d113e/2147483647/strip/true/crop/1377x773%2B0%2B0/resize/1200x674%21/quality/90/%3Furl%3Dhttp%253A%252F%252Famazon-topics-brightspot.s3.amazonaws.com%252Fscience%252Ff8%252Fbb%252Fbd2103fc48e98225e578e021aa73%252Fdatatuner.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-tmux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/dh"&gt;aws-tmux&lt;/a&gt; my colleague Darko has been sharing his love of his favourite tools, and one of them tmux, he has added some nice new &lt;em&gt;beta&lt;/em&gt; features, allowing you to have easy access to useful information such as the AWS region you are in, the status of any Cloudformation stacks that are in the process of deploying and the version of the AWS cli you are using.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7PqdiMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/darko-mesaros/aws-tmux/main/img/header.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7PqdiMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/darko-mesaros/aws-tmux/main/img/header.png" alt="screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sns-sqs-big-payload&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/di"&gt;sns-sqs-big-payload&lt;/a&gt; this open source library from aspecto-io that provides you with an Amazon SNS/SQS client library that enables sending and receiving messages with payload larger than 256KiB via Amazon S3. The project has detailed examples of how you can use this, so if you are looking to use SNS/SQS with larger payloads, this is just what you need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sam-patterns-cli&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/dj"&gt;sam-patterns-cli&lt;/a&gt; from the lovely people at mhlabs, we have another open source tool, this time a command line tool for importing patterns from &lt;a href="https://serverlessland.com/patterns"&gt;https://serverlessland.com/patterns&lt;/a&gt; into your SAM template. It is an early version, so if you try it out make sure to provide feedback to the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vygRVeRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/sam-patterns-cli/main/images/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vygRVeRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/sam-patterns-cli/main/images/demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kinesis-mock&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/dk"&gt;kinesis-mock&lt;/a&gt; Eric Meisel has put together this nice little project that provides a mock for the Kinesis API, that you might use for local testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;steampipe-plugin-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/dl"&gt;steampipe-plugin-aws&lt;/a&gt; if you are using steampipe, then this is a very nice open source plugin from Turbot that you can use to use SQL to query infrastructure including servers, networks, identity and more from AWS. Make sure you check out the documentation that provides everything you need to know including some examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;meta-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/dm"&gt;meta-aws&lt;/a&gt; this project is the metadata layer for baking AWS device software to Embedded Linux distributions built by the Yocto Project build system.  It provides recipes for building in AWS edge software capabilities to Embedded Linux built with OpenEmbedded and Yocto Project build frameworks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amazon-ecs-bestpractices-guide&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/dp"&gt;amazon-ecs-bestpractices-guide&lt;/a&gt; published last week, this is the open source version of the Amazon ECS best practices guide. You can submit feedback &amp;amp; requests for changes by submitting issues in this repo or by making proposed changes &amp;amp; submitting a pull request.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aws-cdk"&gt;
  &lt;/a&gt;
  AWS CDK
&lt;/h3&gt;

&lt;p&gt;With CDK Day approaching (check out the events section, and sign up if you have not already) it is not surprising we are seeing some great new content appear, both from AWS and the community so this week I thought I would round up the posts that I have been reading and think are worth sharing.&lt;/p&gt;

&lt;p&gt;First up we have Phillip Ninan who writes not one but TWO posts, &lt;a href="https://aws-oss.beachgeek.co.uk/de"&gt;A No-Nonsense Guide To AWS Cloud Development Kit (CDK)&lt;/a&gt; is a follow up to a previous post I shared in an earlier newsletter. This time he is back with a nice guide in how you can get started. So get your AWS and your Typescript skills to the ready. In &lt;a href="https://aws-oss.beachgeek.co.uk/dq"&gt;Insider Secrets Of AWS CDK - The Base Stack&lt;/a&gt; he dives deep into the concept of the "base stack", one of the essential AWS CDK building blocks.&lt;/p&gt;

&lt;p&gt;Next up we have Rehan van der Merwe with &lt;a href="https://aws-oss.beachgeek.co.uk/df"&gt;CDK Shorts #1 – Consistent asset hashing&lt;/a&gt; something that I came across whilst reading an interesting discussion on Reddit/aws around how to minimise the amount of redeploys of asset resources when doing a CDK deploy. It is super interesting, and the post provides a workaround that works for Rehan, and might be a good fit for you if you have this concern.&lt;/p&gt;

&lt;p&gt;The final community post this week is from a regularly featured writer, Luc van Donkersgoed, who writes &lt;a href="https://aws-oss.beachgeek.co.uk/dg"&gt;Why I love the CDK&lt;/a&gt;. Luc starts off this post "If the CDK was a band, I’d be a groupie. If it was a football team I’d buy a season pass. If the CDK was a movie star I’d wait in line for an autograph." and so how could you resist reading with a start like that? Find out more by reading the four reasons why Luc loves CDK and will almost certainly be attending CDK Day :-) &lt;/p&gt;

&lt;p&gt;We have some great AWS posts covering AWS CDK, so lets start off with Christian Weber with another &lt;a href="https://aws-oss.beachgeek.co.uk/cu"&gt;CDK Corner&lt;/a&gt;. In this March edition, he covers some of the community updates, CDK updates you need to know about and some videos for those that prefer to consume content that way.&lt;/p&gt;

&lt;p&gt;Following that we have the post &lt;a href="https://aws-oss.beachgeek.co.uk/ct"&gt;Using strong typing practices to declare a large number of resources with AWS CDK&lt;/a&gt; from Ishan Bhanuka, where he shares lessons learned from using AWS CDK to manage the complexity when declaring large numbers of resources. Ishan covers how you can dynamically declare those resources at scale whilst still getting compile time checks and auto-completion in the IDE, reducing errors and improving your development experience.&lt;/p&gt;

&lt;p&gt;Next we have Eric Z. Beard and Rico Huijbers collaborating on &lt;a href="https://aws-oss.beachgeek.co.uk/cv"&gt;Best practices for developing cloud applications with AWS CDK&lt;/a&gt; discussing strategies for organising the development of complex cloud applications with large teams when using AWS CDK. This is a deep dive post, going beyond simple tutorials on basic AWS CDK concepts. This post covers how developers write and test code locally, how it gets deployed to production and various staging accounts, and how to organise a team’s apps to fit into a larger company-wide structure. Essential reading.&lt;/p&gt;

&lt;p&gt;Finally, we have the eagerly anticipated (if social media is anything to go about) launch of being able to use Go with AWS CDK. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/cw"&gt;Getting started with the AWS Cloud Development Kit and Go&lt;/a&gt;, Mitchell Valine writes about the developer preview of Go support for AWS CDK. The post will walk you through creating your first CDK applications using Go. If you are a Gopher, give it a try and be sure to feedback via the various channels mentioned in the post.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GraphQL on a Graph database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/cy"&gt;Building a GraphQL API on AWS with Amazon Neptune Graph Database and CDK&lt;/a&gt; Nader Dabit with another great combo post/video (link to the video in the post) where he shows you very quickly how to build a simple application that combines a Graph database (in this instance, using Amazon Neptune) with GraphQL. Nader provides full source code and you can follow along in the video.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevSecOps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/d8"&gt;Catching Privilege Escalation in CI&lt;/a&gt; Yoni Leitersdorf takes a look at how you can use a number of open source tools such as Cloudsplaining, checkov, Parliment and more to help you build better IAM policies for your applications, by using those tools to review your policies as they pass through your development pipelines. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Distro for Elasticsearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/dr"&gt;Open Distro for Elasticsearch 1.13.2 is now available&lt;/a&gt; Kyle Davis with a post announcing the launch of Open Distro for Elasticsearch 1.13.2 covering the key things you need to know around the general availability of Trace Analytics, as well as other pieces of this release including bug fixes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4W9ZNxqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opendistro.github.io/for-elasticsearch/assets/media/blog-images/2021-04-07-release-blog-1-13-2/trace-analytics-screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4W9ZNxqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opendistro.github.io/for-elasticsearch/assets/media/blog-images/2021-04-07-release-blog-1-13-2/trace-analytics-screenshot.png" alt="trace"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aws-open-source-posts"&gt;
  &lt;/a&gt;
  AWS open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Detectron2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/dw"&gt;Object detection with Detectron2 on Amazon SageMaker&lt;/a&gt; Vadim Dabravolski and Paolo Irrera discuss Detectron2, an object detection and segmentation framework released by Facebook AI Research (FAIR), and its implementation on Amazon SageMaker to solve a dense object detection task for retail. This post includes an associated sample notebook, available via the GitHub repo. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As more architectures become distributed, how you address operational challenges around how to application issues such as performance problems, having the visibility across that distributed architecture as well as being able to understand the health of the components is where the use of observability data can help. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/d9"&gt;Tracing AWS Lambda functions in AWS X-Ray with OpenTelemetry&lt;/a&gt; Manish Dhawaria shows you how you can take your existing code, in this instance using code in an AWS Lambda function, and setup AWS Distro for OpenTelemtry to collect and send trace data to AWS X-Ray.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0CcQLhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/03/26/awsmani_XRay-Lambda-OpenTelemetry_f11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0CcQLhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/03/26/awsmani_XRay-Lambda-OpenTelemetry_f11.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This week we have a couple of posts related to Selenium, the open source suite of automation testing tools based on the JavaScript framework.&lt;/p&gt;

&lt;p&gt;First up we have Hari Ohm Prasath and Jonah Jones with &lt;a href="https://aws-oss.beachgeek.co.uk/da"&gt;Run Selenium tests at scale using AWS Fargate&lt;/a&gt; which does as it says on the tin, and shows you a neat way of running Selenium tests at scale for low cost by utilising AWS Fargate Spot to run tests without having to manage and orchestrate their containers. They provide source code, and because it has been packaged up as an AWS CDK application, you should be able to get this up and running very quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FIpwt-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/03/11/jonahjo_run-selenium_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FIpwt-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/03/11/jonahjo_run-selenium_f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following that we have Prakash Palanisamy with a post and detailed walkthrough on how to use AWS Developer Tools to build a continuous delivery pipeline that automatically deploys a test environment that runs a UI test. In, &lt;a href="https://aws-oss.beachgeek.co.uk/db"&gt;Serverless UI testing using Selenium, AWS Lambda, AWS Fargate, and AWS Developer Tools&lt;/a&gt; Prakash shows how you can build a solution using a number of open source tools such as Chromium browser, Firefox browser, and Selenium. This is a great post, so make sure you check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGfSKVnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/03/20/SolutionDesign.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGfSKVnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/03/20/SolutionDesign.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/cz"&gt;Running Airflow Workflow Jobs on Amazon EKS with EC2 Spot Instances&lt;/a&gt; Re Alvarez-Parmar and Elamaran Shanmugam with a great post that shows you how you can deploy and run your own, self managed Apache Airflow instance, taking advantage of Amazon EKS and EC2 Spot instances to help you optimise the costs of running your worker nodes. If you are running Apache Airflow this is a must read post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QkJmEq2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/04/06/image-2021-04-05T202759.145.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkJmEq2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/04/06/image-2021-04-05T202759.145.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Flink&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of Apache Flink posts this week, starting off with &lt;a href="https://aws-oss.beachgeek.co.uk/d2"&gt;Build a real-time streaming application using Apache Flink Python API with Amazon Kinesis Data Analytics&lt;/a&gt; where Praveen Kumar, Anand Shah, and Masudur Rahaman Sayem walk you through how to build a stateful stream processing pipeline using the Apache Flink Python API on Kinesis Data Analytics. Apache Flink is a popular open-source framework and distributed processing engine for stateful computations. Customers using Kinesis Data Analytics for Apache Flink want to be able to write and run code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics without managing the complex distributed Apache Flink environment. Whilst this has principally been done in Java, this new capability allows you to now use Python. If you want to know more about these concepts or about Apache Flink, this is a good post to read.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cbCHc3CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/03/25/bdb1289-pyflink-kda-1-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cbCHc3CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/03/25/bdb1289-pyflink-kda-1-1.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following that (and winner of this weeks longest blog post title) is &lt;a href="https://aws-oss.beachgeek.co.uk/du"&gt;How Isentia improves customer experience by modernizing their real-time media monitoring and intelligence platform with Amazon Kinesis Data Analytics for Apache Flink&lt;/a&gt; co written by Maria Sokolova, and Masudur Rahaman Sayem from AWS and Karl Platz, Chief Architect at Isentia (a media monitoring, intelligence and insights solution provider in Asia Pacific) where they look at how Isentia updated their data processing pipeline with Amazon Kinesis Data Analytics for Apache Flink to replace the previous Apache Storm based pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L5n60im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/04/06/isentia-flink-1-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L5n60im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/04/06/isentia-flink-1-1.jpg" alt="upgrade"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With so many options for how you can deploy open source databases, especially popular and well loved ones such as PostgreSQL, wouldn't it be good to get some help in knowing what to think about as I explore the options. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/d0"&gt;Is Amazon RDS for PostgreSQL or Amazon Aurora PostgreSQL a better choice for me?&lt;/a&gt; Vivek Singh and Sagar Patel provide some great information on that should help you to determine the best option between Amazon RDS for PostgreSQL and Aurora PostgreSQL for your workloads and business requirements. They take a look at the differences in performance, scalability, failover, storage, high availability, backup, and database versions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EVqElX2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/04/07/Screen-Shot-2021-04-07-at-09.04.41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVqElX2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/04/07/Screen-Shot-2021-04-07-at-09.04.41.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kaniko&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/d4"&gt;Building container images on Amazon ECS on AWS Fargate&lt;/a&gt; Re Alvarez-Parmar and Olly Pomeroy take a look at building container images that you can use on Amazon ECS on AWS Fargate, taking a look at how you can use the open source tool kaniko, that builds container images from a Dockerfile, much like the traditional Docker does, but unlike Docker, it doesn’t require root privileges. It executes each command within a Dockerfile entirely in userspace. If you build docker images, perhaps have automated pipelines that do this, and want to reduce the need to run privilege processes, take a look at this post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yZl-zNya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/03/31/image-2021-03-31T175201.446.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZl-zNya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/03/31/image-2021-03-31T175201.446.png" alt="userspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/d6"&gt;dex&lt;/a&gt; is a popular OpenID Connect (OIDC) provider that provides connectors for a variety of different OAuth providers. This lets dex defer authentication to LDAP servers, SAML providers, or established identity providers like GitHub, Google, and Active Directory (check out the project to see the current list) to obtain an identity. With that in mind, Jeremy Cowan and Jimmy Ray have put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/d7"&gt;Using Dex &amp;amp; dex-k8s-authenticator to authenticate to Amazon EKS&lt;/a&gt; describing how to use dex with Amazon EKS, walking you through an example of using GitHub as your Identity Provider (IdP).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sticking with the building of containers, we have Olly Pomeroy and Massimo Re Ferre writing on this topic in, &lt;a href="https://aws-oss.beachgeek.co.uk/d5"&gt;Automated software delivery using Docker Compose and Amazon ECS&lt;/a&gt;. Using a nice simple application that changes from green to blue (or is it blue to green) find out how to build an automated deployment pipeline using Docker Compose. This is a really nice post, very well presented and explained and shows you how easy it can be to set up these automated software delivery processes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6817sAbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/04/06/image-2021-04-06T102401.314.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6817sAbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/04/06/image-2021-04-06T102401.314.png" alt="pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wordpress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/d3"&gt;Launching a WordPress Website using Amazon Lightsail Containers&lt;/a&gt; Benjamin Gardiner writes and shows you how you can setup and run your own Wordpress installation using the recently launched Amazon Lightsail Containers service. Amazon Lightsail was a really great and easy way to quickly get started in the cloud, and you can do the same thing now with your container applications, providing a migration path to other AWS container services if you need to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS ParallelCluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I enjoyed this post from Benjamin Meyer, &lt;a href="https://aws-oss.beachgeek.co.uk/dc"&gt;Simplify HPC cluster usage with AWS Cloud9 and AWS ParallelCluster&lt;/a&gt;, where he shows you how easy it is to get started with HPC on AWS. In this post he shows you how to configure AWS ParallelCluster and explains how to set up an AWS Cloud9 IDE on the head node of the cluster. AWS Cloud9 automatically saves the state from the previous work done, which is super nice as this will help new users of AWS ParallelCluster’s environment get started quickly with the cluster and enable easy collaboration with their peers and colleagues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GsLPpo2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2021/03/30/Picture1-11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GsLPpo2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2021/03/30/Picture1-11.png" alt="hpc on cloud9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robotics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Two posts this week for those interested in this space. First up we have &lt;a href="https://aws-oss.beachgeek.co.uk/dd"&gt;Roomie uses AWS RoboMaker to scale custom robotics development&lt;/a&gt; where Camilo Buscaron and Grace Reed from AWS and Alfredo Polito, Chief Technology Officer of Roomie collaborate on this post that shows how you can use AWS and open source tools to build and deploy a wide variety of custom robot solutions. In this post we look at Roomie, a fast-growing robotics startup based in Mexico City, who has taken on the challenge to build interactive utility robots.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fwNYLwo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/04/01/roomie-architecture-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fwNYLwo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/04/01/roomie-architecture-3.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we have &lt;a href="https://aws-oss.beachgeek.co.uk/dv"&gt;Improving control of diagnostic tools in simulations with AWS RoboMaker tool configuration&lt;/a&gt; from Matt Hansen, who takes a look at a tool configuration feature that allows customers to improve control of diagnostic tools with their simulations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/cx"&gt;Open-sourcing the AWS Java Runtime Interface Client&lt;/a&gt;, in this post Mark Sailes takes a closer look at one of the announcements made at re:Invent around the new packaging format (container images) for AWS Lambda functions, exploring the AWS Lambda runtime API and what this means in the context of some of the things that were open sourced. Mark dives deeper into the Java runtime interface, aws-lambda-java-runtime-interface-client, and what this means to developers. This is an essential post for Java developers, and well worth 5 minutes of your time.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Cassandra&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Keyspaces (for Apache Cassandra), a scalable, highly available, and fully managed Cassandra-compatible database service, now offers Federal Information Processing Standards (FIPS) 140-2 compliant endpoints to help you run highly regulated workloads more easily.&lt;/p&gt;

&lt;p&gt;FIPS 140-2 is a US and Canadian government standard that specifies the security requirements for cryptographic modules that protect sensitive information. Now, you can run Cassandra workloads that require FIPS 140-2 compliance more easily by using a fully managed and serverless solution. You can configure applications to use a FIPS-compliant endpoint when connecting to Keyspaces by specifying it as the service endpoint in your client configuration. You can migrate existing workloads to Keyspaces that require FIPS compliance by using open-source tools such as cqlsh.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now launch RabbitMQ 3.8.11 brokers on Amazon MQ. This patch update to RabbitMQ contains several fixes and new features compared to the previously supported version, RabbitMQ 3.8.6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Amplify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Amplify iOS can now be installed through the Swift Package Manager. iOS developers can interface with AWS services through Amplify iOS, which is a use case based client library. Developers have been importing Amplify iOS through dependency management tools like CocoaPods. With Swift 3.0, Apple introduced a native package management tool called Swift Package Manager that allows developers to manage these dependencies within their Swift project.&lt;/p&gt;

&lt;p&gt;Swift Package Manager has been the preferred method for including third-party libraries in Swift projects, and support for Swift Package Manager has been a highly requested feature from the developer community for Amplify iOS. As of April 7th, 2021, developers can include Amplify iOS in their projects via Swift Package Manager. In cases where Amplify iOS does not address a use case entirely, developers can also directly include the low level AWS iOS SDKs via Swift Package Manager.&lt;/p&gt;

&lt;p&gt;AWS Dev Advocate Kyle Lee put together a blog post so you can find out more on how to get started, so make sure you check out &lt;a href="https://aws-oss.beachgeek.co.uk/cs"&gt;Swift Package Manager Support for Amplify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Elastic Kubernetes Service (EKS) clusters running in the AWS GovCloud (US) Regions are now compliant with the Federal Risk and Authorization Management Program (FedRAMP) High baseline. With FedRAMP-High compliance, customers that operate under FedRAMP guidelines can use Amazon EKS to run their Kubernetes clusters in both AWS GovCloud (US) regions using Amazon EC2 or Fargate compute types. The security and compliance of Amazon EKS is assessed as part of multiple AWS compliance programs. In addition to FedRAMP High and Moderate baselines, Amazon EKS is compliant with SOC, IRAP, K-ISMS, ENS High, OSPAR, HITRUST CSF, and is a HIPAA eligible service.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;This week we have another video from the Containers from the Couch crew, this time inviting Jonah Jones and Loris Degioanni from Sysdiag to talk about the role OSS will play in the future of security, and lateral movements from containers to cloud. Compelling stuff.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6z1Pz1vArCI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CDK Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;April 30th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Announced this week was the second &lt;a href="https://sessionize.com/cdkday/"&gt;CDK Day&lt;/a&gt;, which will be on April 30th. Check out &lt;a href="https://sessionize.com/cdkday/"&gt;the web page&lt;/a&gt; to find out more about the first CDK Day, which was incredible. This second event promises to be even better. The CFP is open until the 19th of March. Check out this supporting blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/4v"&gt;CDK Day CFP Is Open!!!!&lt;/a&gt; from Matt as to what to expect and what they are looking for when it comes to sessions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Rust Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 3rd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rust is a language empowering everyone to build secure, reliable, and efficient software. Rust is becoming more widely used in cloud native, powering everything from lightning-fast service meshes and powerful developer tools to internet-scale distributed databases.&lt;/p&gt;

&lt;p&gt;Come explore what makes Rust a fantastic choice for new cloud native development, and learn about how the community uses Rust today. Find out &lt;a href="https://aws-oss.beachgeek.co.uk/5y"&gt;more and register here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 4, 2021 | 10:00AM - 6:00PM CEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Container Day x KubeCon is a fully live, virtual day of sessions all about Amazon EKS and Kubernetes at AWS, hosted by Brent Langston and Adam Keller of Containers from the Couch. At this Day Zero KubeCon event, the AWS Kubernetes team will be revealing new launches, demoing products and features, covering best practices, and answering your questions live on Twitch! If you have a question before the event, you can email the team at &lt;a href="mailto:awscontainerday@amazon.com"&gt;awscontainerday@amazon.com&lt;/a&gt; and maybe get them answered.&lt;/p&gt;

&lt;p&gt;Find out more and to register, &lt;a href="https://aws-oss.beachgeek.co.uk/cr"&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>40+ Useful Resources for Mastering Web🎁</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Mon, 12 Apr 2021 07:36:58 +0000</pubDate>
      <link>https://dev.to/surajondev/40-useful-resources-for-mastering-web-1i0h</link>
      <guid>https://dev.to/surajondev/40-useful-resources-for-mastering-web-1i0h</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;We have a list of various resources that can help you to solve many problems that you are facing or might face in the future.&lt;/p&gt;

&lt;p&gt;We have resources for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Illustration&lt;/li&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;Productivity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get started without further ado.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#illustration"&gt;
  &lt;/a&gt;
  ILLUSTRATION
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#drawit"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.drawkit.io/"&gt;Drawit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BMNJ-K21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsftv9zy5tfo1r1epr8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMNJ-K21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsftv9zy5tfo1r1epr8x.png" alt="DrawKit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hand-drawn vector illustration and icon resources, perfect for your next project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#flaticon"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.flaticon.com/"&gt;FlatIcon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-0vHQeX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7u6kpnrq851g3bln036.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-0vHQeX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7u6kpnrq851g3bln036.jpg" alt="flaticon-generic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;4340500+ Free vector icons in SVG, PSD, PNG, EPS format or as ICON FONT. Thousands of free icons in the largest database of free vector icons!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#blush-design"&gt;
  &lt;/a&gt;
  &lt;a href="https://blush.design/"&gt;Blush Design&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7x6tsBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhpfr7xzcgd4kcnpgm0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7x6tsBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhpfr7xzcgd4kcnpgm0d.png" alt="Blush Design"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Easily create and customize stunning illustrations with collections made by artists across the globe. Try it, it’s kind of fun.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#smash-illustration"&gt;
  &lt;/a&gt;
  &lt;a href="https://usesmash.com/"&gt;Smash Illustration&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t0odzE4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqk6zlp1c859v5ffh7uu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0odzE4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqk6zlp1c859v5ffh7uu.png" alt="Smash Illustration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undraw"&gt;
  &lt;/a&gt;
  &lt;a href="https://blush.design/"&gt;unDraw&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghj0XILl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dxgj5o0auvj2d6hv92n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghj0XILl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dxgj5o0auvj2d6hv92n.png" alt="unDraw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Open-source illustrations for any idea you can imagine and create. A constantly updated design project with beautiful SVG images that you can use completely free and without attribution.&lt;/p&gt;

&lt;p&gt;Awesome illustration constructor with colorful and trendy characters&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#controlrocks"&gt;
  &lt;/a&gt;
  &lt;a href="https://control.rocks/"&gt;Control.Rocks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNS4u3wK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j5ch9qugacxe8up2ncs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNS4u3wK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j5ch9qugacxe8up2ncs.png" alt="Control.Rocks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;They have created a big library of illustrations with customizable styles and action types. Use the constructor to create a scene that you are looking for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#error-404-fun"&gt;
  &lt;/a&gt;
  &lt;a href="https://error404.fun/"&gt;Error 404 Fun&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--awtfkJ7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piviing92pr61uzafgtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--awtfkJ7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piviing92pr61uzafgtw.png" alt="Error 404 Fun"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make a unique journey through 404 error pages on your website Use these illustrations that describe better than words&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#open-doodlers"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.opendoodles.com/"&gt;Open Doodlers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gY_2Cssy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aa40prl0clxt3wuwj156.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gY_2Cssy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aa40prl0clxt3wuwj156.jpg" alt="Open Doodlers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Free Set of Open-Source Illustrations!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  DEVELOPMENT
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#carbon"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.drawkit.io/"&gt;Carbon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6fcsgFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rz37chaowg05qwdelkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6fcsgFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rz37chaowg05qwdelkd.png" alt="Carbon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create and share beautiful images of your source code.&lt;br&gt;
Start typing or drop a file into the text area to get started.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#replit"&gt;
  &lt;/a&gt;
  &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uO4uFPM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjafst7h09ci7vtlhlbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uO4uFPM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjafst7h09ci7vtlhlbj.png" alt="Replit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Replit is a simple yet powerful online IDE, Editor, Compiler, Interpreter, and REPL. Code, compile, run, and host in 50+ programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#squoosh"&gt;
  &lt;/a&gt;
  &lt;a href="https://squoosh.app/"&gt;Squoosh&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--err3en_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qouudxuus666f5g17c77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--err3en_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qouudxuus666f5g17c77.png" alt="Squoosh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Compress and compare images with different codecs, right in your browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#wappalyzer"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.wappalyzer.com/"&gt;Wappalyzer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmoWbqka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h8sb59jd6ayizgy0tdx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmoWbqka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h8sb59jd6ayizgy0tdx.png" alt="Wappalyzer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Programmatic access to technographic data. The Wappalyzer APIs provide instant access to website technology stacks, contact details, and social media profiles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#kite"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.kite.com/"&gt;Kite&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YIXSayRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5o3oxnw597f2mumaaqhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIXSayRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5o3oxnw597f2mumaaqhm.png" alt="Kite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kite adds AI-powered code completions to your code editor, giving developers superpowers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#devhints"&gt;
  &lt;/a&gt;
  &lt;a href="https://devhints.io/"&gt;Devhints&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWYYB8y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6voe7qtpi85gtzw95jc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWYYB8y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6voe7qtpi85gtzw95jc.png" alt="Devhints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A modest collection of cheatsheets&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#netlify"&gt;
  &lt;/a&gt;
  &lt;a href="https://devhints.io/"&gt;Netlify&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_oKicj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozann30glp7lxan8dmjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_oKicj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozann30glp7lxan8dmjw.png" alt="Netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An intuitive Git-based workflow and powerful serverless platform to build, deploy, and collaborate on web apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#i-hate-regex"&gt;
  &lt;/a&gt;
  &lt;a href="https://ihateregex.io/"&gt;i Hate Regex&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkYmO8AB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8czxcz6mucfbfkbilztr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkYmO8AB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8czxcz6mucfbfkbilztr.png" alt="i Hate Regex"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i Hate Regex is a regex cheat sheet that also explains the commonly used expressions so that you understand them. Stop hating and start learning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#devdocs"&gt;
  &lt;/a&gt;
  &lt;a href="https://devdocs.io/"&gt;DevDocs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9dOE29A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imujglnlentzb0uz8qfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9dOE29A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imujglnlentzb0uz8qfc.png" alt="DevDocs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fast, offline, and free documentation browser for developers. Search 100+ docs in one web app: HTML, CSS, JavaScript, PHP, Ruby, Python, Go, C, C++, and many more.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#animista"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.drawkit.io/"&gt;Animista&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GxMiepLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpcyqfkxwepgohuiwmf5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxMiepLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpcyqfkxwepgohuiwmf5.jpg" alt="Animista"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Animista is a place where you can play with a collection of ready-to-use CSS animations, tweak them and download only those you will actually use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#csstricks"&gt;
  &lt;/a&gt;
  &lt;a href="https://css-tricks.com/"&gt;CSS-Tricks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3wUnFqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d7df43j1xzh7kumuduz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3wUnFqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d7df43j1xzh7kumuduz.png" alt="CSS-tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Daily articles about CSS, HTML, JavaScript, and all things related to web design and development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#patterncss"&gt;
  &lt;/a&gt;
  &lt;a href="https://bansal.io/pattern-css"&gt;Pattern.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmMHiWzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhhpplp0jug1xu3hk5nb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmMHiWzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhhpplp0jug1xu3hk5nb.jpg" alt="Pattern.css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS only library to fill your empty background with beautiful patterns.&lt;/p&gt;

&lt;p&gt;A simple, online CSS generator that creates a basic layout framework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#csseffectssnippets"&gt;
  &lt;/a&gt;
  &lt;a href="https://emilkowalski.github.io/css-effects-snippets/"&gt;CSSeffectsSnippets&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p3aatNpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5wb23w3xir64md9pekt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p3aatNpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5wb23w3xir64md9pekt.png" alt="CSSeffectsSnippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Click on the animation to copy the CSS effects which include hover, loading, and others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#98css"&gt;
  &lt;/a&gt;
  &lt;a href="https://jdan.github.io/98.css/"&gt;98.css&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNKRtIAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81c31kkifax4f2z4bh5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNKRtIAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81c31kkifax4f2z4bh5e.png" alt="98.css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;98.css is a CSS library for building interfaces that look like Windows 98.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  DESIGN
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#colorslol"&gt;
  &lt;/a&gt;
  &lt;a href="https://colors.lol/"&gt;Colors.lol&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9pXiVFKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewj8u7t4frjtl5f7zaxh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9pXiVFKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewj8u7t4frjtl5f7zaxh.png" alt="Colors.lol"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Overly descriptive color palettes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#colormind"&gt;
  &lt;/a&gt;
  &lt;a href="https://colors.lol/"&gt;Colormind&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDdssgnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luni2w2dc1znvkxqln0m.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDdssgnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luni2w2dc1znvkxqln0m.jpeg" alt="Colormind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Colormind is a color scheme generator that uses deep learning. It can learn color styles from photographs, movies, and popular art.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#color-hunt"&gt;
  &lt;/a&gt;
  &lt;a href="https://colorhunt.co/"&gt;Color Hunt&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WMbK_MUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgvbdinc72ljannkz3so.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMbK_MUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgvbdinc72ljannkz3so.png" alt="color-hunt-palettes-og"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Color Hunt is a free and open platform for color inspiration with thousands of trendy hand-picked color palettes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#fontspark"&gt;
  &lt;/a&gt;
  &lt;a href="https://fontspark.app/"&gt;FontSpark&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Iq2h0j1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vkxtnywqd92z2tts4zl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Iq2h0j1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vkxtnywqd92z2tts4zl.jpg" alt="FontSpark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Helping designers discover the perfect font for their next design project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#fontspace"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.fontspace.com/"&gt;FontSpace&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOsSzx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buh96vvqxcdnf4ojnscc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOsSzx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buh96vvqxcdnf4ojnscc.png" alt="FontSpace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FontSpace is a designer-centered font website that has quick customizable previews and hassle-free downloads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#appmockup"&gt;
  &lt;/a&gt;
  &lt;a href="https://app-mockup.com/"&gt;AppMockUp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_k-D35d1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlel3ivsyrffhlkl2puu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_k-D35d1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlel3ivsyrffhlkl2puu.png" alt="AppMockUp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AppMockUp Studio is the online design tool trusted by mobile developers to create the most compelling screenshots for the App Store &amp;amp; Play Store. No account required. It is fast &amp;amp; free.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#webframe"&gt;
  &lt;/a&gt;
  &lt;a href="https://webframe.xyz/"&gt;Webframe&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wTCIK-5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/666j0jksxorp3v4dorza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wTCIK-5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/666j0jksxorp3v4dorza.png" alt="webframe-screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A showcase of beautiful and well-designed web app screens for design inspiration. Including screens from behind signup/paywalls.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#blobs"&gt;
  &lt;/a&gt;
  &lt;a href="https://lintyour.design/"&gt;Blobs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOHnpBVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/togalc7e9agskpbxbovd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOHnpBVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/togalc7e9agskpbxbovd.png" alt="blobs_app_poster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Customizable blobs as SVG and Flutter Widget. Create random or fixed blobs, loop, animate, clip them with ease.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#ucraft"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ucraft.com/free-logo-maker"&gt;Ucraft&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7p7Y3oVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hhrxthnripnyf2k4hiy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7p7Y3oVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hhrxthnripnyf2k4hiy.jpg" alt="maxresdefault (6)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create your logo for a website or brand in just a few clicks. Ucraft's free online logo maker allows you to design eye-catching, professional logos, and use them across various platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#design-lint"&gt;
  &lt;/a&gt;
  &lt;a href="https://lintyour.design/"&gt;Design Lint&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usM7OQfv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdwgcm7vbnhz2ptfwpch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usM7OQfv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdwgcm7vbnhz2ptfwpch.png" alt="Design Lint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design Lint is a free and open-source plugin for Figma built to help you find and fix errors in your designs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#productivity"&gt;
  &lt;/a&gt;
  PRODUCTIVITY
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#getterms"&gt;
  &lt;/a&gt;
  &lt;a href="https://getterms.io/"&gt;GetTerms&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uyzBQb1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wgdir4emceq33fwc8xk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uyzBQb1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wgdir4emceq33fwc8xk.jpg" alt="GetTerms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GetTerms.io is a free, generic website privacy policy generator, based on typical, reasonable, and fair use of information. Whether you use WordPress, Shopify, or more, we can generate simple terms &amp;amp; conditions and privacy policy documents for your website, ready to adapt to your needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#google-keep"&gt;
  &lt;/a&gt;
  &lt;a href="https://keep.google.com/"&gt;Google Keep&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UAavC4wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk0nh64p01n3h5h5isc2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UAavC4wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk0nh64p01n3h5h5isc2.jpg" alt="Google Keep"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google Keep is a note-taking service included as part of the free, web-based Google Docs Editors suite offered by Google.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#sejda"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sejda.com/"&gt;Sejda&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEcV6-w_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7a7jy7mm75ly40mnjpa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEcV6-w_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7a7jy7mm75ly40mnjpa.jpg" alt="Sejda"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sejda helps with your PDF tasks. Quick and simple online service, no installation required! Split, merge, or convert PDF to images, alternate mix, or split scans.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#grammarly"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.grammarly.com"&gt;Grammarly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAQ_NNOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npjzvwzgbxijpkbr4ufv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAQ_NNOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npjzvwzgbxijpkbr4ufv.jpg" alt="Grammarly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grammarly scans your text for common grammatical mistakes (like misused commas) and complex ones (like misplaced modifiers).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1PFlEFh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj8kzcpevc9zn4yww2p1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1PFlEFh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj8kzcpevc9zn4yww2p1.png" alt="Notion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;Thank You for reading the blog post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toptal-gitignore-generator"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.toptal.com/developers/gitignore"&gt;Toptal gitignore Generator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbPK03po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7k7zmamxniu9rrh2x6dg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbPK03po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7k7zmamxniu9rrh2x6dg.png" alt="Toptal gitignore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create useful .gitignore files for your project&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#waveapp"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.waveapps.com/"&gt;WaveApp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1TNp7vS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c64mjdt3adoq7ttb0aay.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1TNp7vS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c64mjdt3adoq7ttb0aay.jpg" alt="WaveApp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Free invoicing &amp;amp; accounting software with credit card processing &amp;amp; payroll services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#clockify"&gt;
  &lt;/a&gt;
  &lt;a href="https://clockify.me/"&gt;Clockify&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1pJm0fC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7nxv74ukv7fx3xf6pmo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1pJm0fC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7nxv74ukv7fx3xf6pmo.png" alt="Clockify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The most popular free time tracker for teams. The time tracking software used by millions. Clockify is a simple time tracker and timesheet app that lets you and your team track work hours across projects. Unlimited users, free forever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#untools"&gt;
  &lt;/a&gt;
  &lt;a href="https://untools.co/"&gt;Untools&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CBPjPdfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgpuafqr2ohhefqcyu8q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CBPjPdfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgpuafqr2ohhefqcyu8q.jpg" alt="Untools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Collection of thinking tools and frameworks to help you solve problems, make decisions, and understand systems.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 5 3D web design trends 2020 | 2021</title>
      <author>Dezigner Bay</author>
      <pubDate>Mon, 12 Apr 2021 07:30:32 +0000</pubDate>
      <link>https://dev.to/baydezigner/top-5-3d-web-design-trends-2020-2021-3o4c</link>
      <guid>https://dev.to/baydezigner/top-5-3d-web-design-trends-2020-2021-3o4c</guid>
      <description>&lt;p&gt;Top 5 3D web design trends 2020 | 2021&lt;br&gt;
Hello guys, Welcome to Dezigner bay.🙂&lt;/p&gt;

&lt;p&gt;Today I brought you to the 5 most amazing 3d interactive websites that Every web developer should visit.&lt;/p&gt;

&lt;p&gt;Let's have a look.&lt;br&gt;
&lt;a href="https://youtu.be/L099UGgxUwQ"&gt;https://youtu.be/L099UGgxUwQ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webdesign</category>
      <category>webdesigninspiration</category>
    </item>
    <item>
      <title>5 Best Python Modules Every Developer Should Know</title>
      <author>Ashish Yadav</author>
      <pubDate>Mon, 12 Apr 2021 06:56:42 +0000</pubDate>
      <link>https://dev.to/expoashish/5-best-python-modules-best-python-libraries-every-developer-should-know-13np</link>
      <guid>https://dev.to/expoashish/5-best-python-modules-best-python-libraries-every-developer-should-know-13np</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-module-in-python"&gt;
  &lt;/a&gt;
  What is a Module in Python?
&lt;/h2&gt;

&lt;p&gt;A file containing a set of functions you want to include in your application is known as module. You can create your own module in python and you can use it with others files or application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-selenium"&gt;
  &lt;/a&gt;
  1. Selenium
&lt;/h2&gt;

&lt;p&gt;Selenium is one of the most popular automation testing tools which is used for browser automation. This module helps developers to programmatically open webpages, enter fields, click buttons, and submit forms. These all task can be done automatically with the help of selenium module. Selenium supports automation across different browsers, platforms and programming languages.&lt;/p&gt;

&lt;p&gt;Installing Selenium in window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-moviepy"&gt;
  &lt;/a&gt;
  2. MoviePy
&lt;/h2&gt;

&lt;p&gt;MoviePy is a Python module which is used for video editing. We can perform basic operations to edit video like cutting, concatenations, title insertions, video compositing (a.k.a. non-linear editing), video processing, and creation of custom effects.. It can read and write the most common video formats, including GIF.&lt;/p&gt;

&lt;p&gt;Installing MoviePy in window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;moviepy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-pandas"&gt;
  &lt;/a&gt;
  3. Pandas
&lt;/h2&gt;

&lt;p&gt;Pandas is a Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data. Pandas allows us to analyze big data and make conclusions based on statistical theories. Pandas can clean messy data sets, and make them readable and relevant.&lt;/p&gt;

&lt;p&gt;Installing Pandas in window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-pygame"&gt;
  &lt;/a&gt;
  4. Pygame
&lt;/h2&gt;

&lt;p&gt;Pygame is a set of modules in python which is used to create video games. This allows you to create fully featured games and multimedia programs in the Python language. Pygame is suitable to create client-side applications that can be potentially wrapped in a standalone executable. It consists of computer graphics and sound libraries designed to be used with the Python programming language.&lt;/p&gt;

&lt;p&gt;Installing Pygame in window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-tkinter"&gt;
  &lt;/a&gt;
  5. Tkinter
&lt;/h2&gt;

&lt;p&gt;Tkinter is a standard library in python used for creating Graphical User Interface (GUI) for Desktop Applications. With the help of Tkinter developing desktop applications is not a tough task.&lt;/p&gt;

&lt;p&gt;Installing Tkinter in window: &lt;br&gt;
&lt;em&gt;Tkinter comes with the Python installer. We just need to install Python from &lt;a href="http://www.python.org"&gt;www.python.org&lt;/a&gt;, and it comes along with the Python. We don't need to install it separately.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thankyou🤗&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Making CSS perspective text</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 12 Apr 2021 06:47:22 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/making-css-perspective-text-og3</link>
      <guid>https://dev.to/dailydevtips1/making-css-perspective-text-og3</guid>
      <description>&lt;p&gt;Today I wanted to create a fun CSS effect and try and figure out how it's done.&lt;/p&gt;

&lt;p&gt;Today we are making CSS perspective text to make text look like stairs.&lt;br&gt;
In essence, we will use some skew transforms and position offsets to create this effect.&lt;/p&gt;

&lt;p&gt;The end result for today:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/LYxzvBy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-structure"&gt;
  &lt;/a&gt;
  HTML Structure
&lt;/h2&gt;

&lt;p&gt;As for the HTML goes, we don't need that much fancy stuff.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Always&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;deliver&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;quality&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, I want to have three words to use as our effect.&lt;br&gt;
You could alter the codebase to work with paragraphs as well.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-perspective-text"&gt;
  &lt;/a&gt;
  CSS Perspective text
&lt;/h2&gt;

&lt;p&gt;Now on to the magic element, CSS.&lt;br&gt;
We'll start by styling the main &lt;code&gt;h1&lt;/code&gt; element. The goal is to make it look sans-serif and quite big.&lt;br&gt;
This works best for this effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I use quite a big font and transform everything too uppercase.&lt;br&gt;
Then I offset the whole element. Since we will be using absolute positions, it's hard to position the whole element at once.&lt;br&gt;
You might have to change these positions based on the words you want to use.&lt;/p&gt;

&lt;p&gt;Then each span element inside our h1 should be absolute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;span&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next rule will be to make the step skew in opposite directions. I'm using an &lt;a href="https://daily-dev-tips.com/posts/css-pseudo-elements/"&gt;odd/even child pseudo-selector&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;span&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;&amp;amp;:nth-child(odd)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-30deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.66667&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-30deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.33333&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That brings us very close, but all the elements are on top of each other now.&lt;br&gt;
We need to modify the offset position for every second and above element.&lt;/p&gt;

&lt;p&gt;With my words, that comes down to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;h1 {
  span {
    &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;:nth-child(2) {
      left: 27px;
      top: 52px;
    }
    &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;:nth-child(3) {
      left: 54px;
      top: 105px;
    }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it. You now have this super cool stair-looking perspective text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lcixIYgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617862678888/NyjslbL_N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lcixIYgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617862678888/NyjslbL_N.png" alt="CSS Perspective text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
  </channel>
</rss>
