<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Let's Write a Redux Controller for Web Components</title>
      <author>Benny Powers 🇮🇱🇨🇦</author>
      <pubDate>Thu, 06 Jan 2022 22:55:21 +0000</pubDate>
      <link>https://dev.to/bennypowers/lets-write-a-redux-controller-for-web-components-4edl</link>
      <guid>https://dev.to/bennypowers/lets-write-a-redux-controller-for-web-components-4edl</guid>
      <description>&lt;p&gt;Elliott Marquez challenged me to write a redux controller on the &lt;a href="https://lit.dev/slack-invite/"&gt;Lit &amp;amp; Friends slack&lt;/a&gt;. &lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__137797"&gt;
  
    .ltag__user__id__137797 .follow-action-button {
      background-color: #D7DEE2 !important;
      color: #FFFFFF !important;
      border-color: #D7DEE2 !important;
    }
  
    &lt;a href="/elliott" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlTmLbS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9y-D1XMO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/137797/51b85172-df02-46c5-86af-499fcc94aee9.jpeg" alt="elliott image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/elliott"&gt;Elliott&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/elliott"&gt;I work on Developer experiences at Chrome and closely with the web platform&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;So let's get cracking!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-0-the-setup"&gt;
  &lt;/a&gt;
  Step 0: The Setup
&lt;/h2&gt;

&lt;p&gt;First step let's make a new project and import some dependencies to help us develop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;controllers
&lt;span class="nb"&gt;cd &lt;/span&gt;controllers
git init
npm init &lt;span class="nt"&gt;--yes&lt;/span&gt;
npm i &lt;span class="nt"&gt;-D&lt;/span&gt; typescript lit
&lt;span class="nb"&gt;touch &lt;/span&gt;reducer.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok next we'll set up the controller class in reducer.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactiveController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ReactiveControllerHost&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ReducerController&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ReactiveController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactiveControllerHost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hostUpdate&lt;/span&gt;&lt;span class="p"&gt;()?:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That &lt;code&gt;hostUpdate&lt;/code&gt; signature is just to keep typescript from complaining. 🤷.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-reducers"&gt;
  &lt;/a&gt;
  Step 1: Reducers
&lt;/h2&gt;

&lt;p&gt;Our controller essentially bolts some statefullness onto a function which takes some state &lt;code&gt;T&lt;/code&gt; and some action &lt;code&gt;A&lt;/code&gt; and returns some other or the same state &lt;code&gt;T&lt;/code&gt;. So let's formalize that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Reducer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The controller should take that reducer, along with some initial state, and pin them to the class instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ReducerController&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ReactiveController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactiveControllerHost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Reducer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hostUpdate&lt;/span&gt;&lt;span class="p"&gt;?():&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-actions"&gt;
  &lt;/a&gt;
  Step 2: Actions
&lt;/h2&gt;

&lt;p&gt;Believe it or not we're pretty much done. The last piece we need is to implement a &lt;code&gt;dispatch&lt;/code&gt; method which takes an action &lt;code&gt;A&lt;/code&gt; and updates the host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestUpdate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, as Chef John would say, &lt;em&gt;that's it&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;If we want to use our controller, we just create it on a compatible host (like LitElement) and we're off to the races:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bennyp/embed/abLjmqW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lit.dev/playground/#project=W3sibmFtZSI6ImNvdW50ZXItZWxlbWVudC50cyIsImNvbnRlbnQiOiJpbXBvcnQge2h0bWwsIGNzcywgTGl0RWxlbWVudH0gZnJvbSAnbGl0JztcbmltcG9ydCB7Y3VzdG9tRWxlbWVudCwgcHJvcGVydHl9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7UmVkdWNlckNvbnRyb2xsZXJ9IGZyb20gJy4vcmVkdWNlci5qcyc7XG5cbkBjdXN0b21FbGVtZW50KCdjb3VudGVyLWVsZW1lbnQnKVxuZXhwb3J0IGNsYXNzIENvdW50ZXJFbGVtZW50IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIHByaXZhdGUgY291bnQgPSBuZXcgUmVkdWNlckNvbnRyb2xsZXIodGhpcywgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uOiBDb3VudEFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlICdpbmNyZW1lbnQnOlxuICAgICAgICByZXR1cm4gc3RhdGUgKyAxO1xuICAgICAgY2FzZSAnZGVjcmVtZW50JzpcbiAgICAgICAgcmV0dXJuIHN0YXRlIC0gMTtcbiAgICB9XG4gIH0sIDApO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxidXR0b24gQGNsaWNrPSR7KCkgPT4gdGhpcy5jb3VudC5kaXNwYXRjaCh7IHR5cGU6ICdpbmNyZW1lbnQnIH0pfT4rPC9idXR0b24-XG4gICAgICA8b3V0cHV0PiR7dGhpcy5jb3VudC5zdGF0ZX08L291dHB1dD5cbiAgICAgIDxidXR0b24gQGNsaWNrPSR7KCkgPT4gdGhpcy5jb3VudC5kaXNwYXRjaCh7IHR5cGU6ICdkZWNyZW1lbnQnIH0pfT4rPC9idXR0b24-XG4gICAgYDtcbiAgfVxufVxuIn0seyJuYW1lIjoiaW5kZXguaHRtbCIsImNvbnRlbnQiOiI8IURPQ1RZUEUgaHRtbD5cbjxoZWFkPlxuICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIuL3NpbXBsZS1ncmVldGluZy5qc1wiPjwvc2NyaXB0PlxuPC9oZWFkPlxuPGJvZHk-XG4gIDxjb3VudGVyLWVsZW1lbnQ-PC9jb3VudGVyLWVsZW1lbnQ-XG48L2JvZHk-XG4ifSx7Im5hbWUiOiJwYWNrYWdlLmpzb24iLCJjb250ZW50Ijoie1xuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJsaXRcIjogXCJeMi4wLjBcIixcbiAgICBcIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiOiBcIl4xLjAuMFwiLFxuICAgIFwibGl0LWVsZW1lbnRcIjogXCJeMy4wLjBcIixcbiAgICBcImxpdC1odG1sXCI6IFwiXjIuMC4wXCJcbiAgfVxufSIsImhpZGRlbiI6dHJ1ZX0seyJuYW1lIjoicmVkdWNlci50cyIsImNvbnRlbnQiOiJpbXBvcnQgdHlwZSB7IFJlYWN0aXZlQ29udHJvbGxlciwgUmVhY3RpdmVDb250cm9sbGVySG9zdCB9IGZyb20gJ2xpdCc7XG5cbmV4cG9ydCB0eXBlIFJlZHVjZXI8VCwgQT4gPSAoc3RhdGU6IFQsIGFjdGlvbjogQSkgPT4gVDtcblxuZXhwb3J0IGNsYXNzIFJlZHVjZXJDb250cm9sbGVyPFQgPSB1bmtub3duLCBBID0gdW5rbm93bj4gaW1wbGVtZW50cyBSZWFjdGl2ZUNvbnRyb2xsZXIge1xuICBwdWJsaWMgc3RhdGU6IFQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBob3N0OiBSZWFjdGl2ZUNvbnRyb2xsZXJIb3N0LFxuICAgIHB1YmxpYyByZWR1Y2VyOiBSZWR1Y2VyPFQsIEE-LFxuICAgIHB1YmxpYyBpbml0aWFsU3RhdGU6IFQsXG4gICkge1xuICAgIHRoaXMuaG9zdC5hZGRDb250cm9sbGVyKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIH1cblxuICBkaXNwYXRjaChhY3Rpb246IEEpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5yZWR1Y2VyKHRoaXMuc3RhdGUsIGFjdGlvbik7XG4gICAgdGhpcy5ob3N0LnJlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gIGhvc3RVcGRhdGU_KCk6dm9pZFxufVxuIn1d"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>redux</category>
      <category>webcomponents</category>
      <category>lit</category>
    </item>
    <item>
      <title>Create an ESP32 based smart device with Arduino and MQTT</title>
      <author>julz</author>
      <pubDate>Thu, 06 Jan 2022 22:16:50 +0000</pubDate>
      <link>https://dev.to/julzor42/create-an-esp32-based-smart-device-with-arduino-and-mqtt-3lkh</link>
      <guid>https://dev.to/julzor42/create-an-esp32-based-smart-device-with-arduino-and-mqtt-3lkh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This article will show you how to quickly create an ESP32 based "smart device", using Arduino, by creating a simple application that basically connects your WiFi router, then a MQTT server, and publishes a message every five seconds.&lt;/p&gt;

&lt;p&gt;Of course, you can use any other WiFi enabled board.&lt;br&gt;
I chose the ESP32 because I recently bought a LiliGo TTGO ESP32 board, without any specific project in mind.&lt;br&gt;
This is the board I use: &lt;a href="http://www.lilygo.cn/prod_view.aspx?Id=1126"&gt;http://www.lilygo.cn/prod_view.aspx?Id=1126&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#board"&gt;
  &lt;/a&gt;
  Board
&lt;/h2&gt;

&lt;p&gt;First, we need to add support to our ESP32 board.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the Arduino preferences, in the &lt;em&gt;Additional Boards Manager URLs&lt;/em&gt; field, add: &lt;code&gt;https://dl.espressif.com/dl/package_esp32_index.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Tools&lt;/strong&gt; menu, open the &lt;strong&gt;Boards Manager&lt;/strong&gt; and look for &lt;em&gt;esp32&lt;/em&gt;, then install it.&lt;/li&gt;
&lt;li&gt;Still in the &lt;strong&gt;Tools&lt;/strong&gt; menu, choose your board (&lt;em&gt;TTGO LoRa32-OLED V1&lt;/em&gt; in my case)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In the &lt;strong&gt;Sketch&lt;/strong&gt; menu, select &lt;strong&gt;Manage Libraries...&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Install library &lt;em&gt;PubSubClient&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#headers"&gt;
  &lt;/a&gt;
  Headers
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;WiFi.h&amp;gt;
#include &amp;lt;PubSubClient.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#definitions"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h3&gt;

&lt;p&gt;Let's define our WiFi SSID, password, and the MQTT server&lt;br&gt;
informations (hostname, port, username, password, client).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#define ssid          "MyWiFi" 
#define password      "MyWifiPassword"
#define mqtt_host     "MyMQTTServer"
#define mqtt_port     1883
#define mqtt_client   "ArduinoCl"
#define mqtt_user     "julzor"
#define mqtt_password "SomePassword"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#global-variables"&gt;
  &lt;/a&gt;
  Global variables
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WiFiClient espClient;
PubSubClient cli = PubSubClient(espClient);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#connecting-to-wifi"&gt;
  &lt;/a&gt;
  Connecting to WiFi
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void setup_wifi()
{
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#connecting-to-mqtt"&gt;
  &lt;/a&gt;
  Connecting to MQTT
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void setup_mqtt()
{
  cli.setServer(mqtt_host, mqtt_port);

  if (cli.connect(mqtt_client, mqtt_user, mqtt_password))
  {
    // Now we're connected to the MQTT server
    // Let's publish a first message...
    cli.publish("test/hello", "hello world");
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void setup()
{
    Serial.begin(115200);

    delay(10);

    setup_wifi();
    setup_mqtt();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loop"&gt;
  &lt;/a&gt;
  Loop
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;long last = 0;

void loop() {
  if (!cli.connected())
  {
    // We were disconnected, let's reconnect
    delay(1000);
    setup_mqtt();
  }
  else
  {
    cli.loop();

    long now = millis();
    if (now - last &amp;gt; 5000)
    {
      last = now;
      cli.publish("test/ping", "Ping");
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You should now have a working application that does nothing but send a ping message on your MQTT server. That's a start!&lt;/p&gt;

&lt;p&gt;In another article, I will show you how I use my useless smart device with Node-RED, a Raspberry Pi, and Alexa.&lt;/p&gt;

</description>
      <category>esp32</category>
      <category>mqtt</category>
      <category>arduino</category>
      <category>smartdevice</category>
    </item>
    <item>
      <title>Setup RSpec on a fresh Rails 7 project</title>
      <author>Adrian Valenzuela</author>
      <pubDate>Thu, 06 Jan 2022 22:13:32 +0000</pubDate>
      <link>https://dev.to/adrianvalenz/setup-rspec-on-a-fresh-rails-7-project-5gp</link>
      <guid>https://dev.to/adrianvalenz/setup-rspec-on-a-fresh-rails-7-project-5gp</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@jonathanbean?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jonathan Bean&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/blacksmith?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Installing RSpec, FactoryBot, Faker gems and configuring for testing environment. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ruby 3.0.1 + Rails 7.0.0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's get right to it...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-a-fresh-project"&gt;
  &lt;/a&gt;
  Start a fresh project
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new projectname -d postgresql
cd projectname
git add -A
git commit -m "initial commit"

rails db:create
rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-gems"&gt;
  &lt;/a&gt;
  Install gems
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b rspec
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Gemfile add...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;group :development, :test do
  # See https://guides.rubyonrails.org/debugging_rails_applications.html#debugging-with-the-debug-gem
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
  gem "rspec-rails"
  gem "factory_bot_rails"
  gem "faker"
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back in terminal/command line...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle install
rails g rspec:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-gems"&gt;
  &lt;/a&gt;
  Configure gems
&lt;/h2&gt;

&lt;p&gt;Create 'support' directory in 'spec' directory and create two files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;spec/support/factory_bot.rb
spec/support/chrome.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then one file in the spec directory for factories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;spec/factories.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configure FactoryBot&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# spec/support/factory_bot.rb

RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configure driver&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# spec/support/chrome.rb

RSpec.configure do |config|
  config.before(:each, type: :system) do
    if ENV["SHOW_BROWSER"] == "true"
      driven_by :selenium_chrome
    else
      driven_by :selenium, using: :headless_chrome, screen_size: [1400, 1400]
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Require support files in &lt;code&gt;rails_helper.rb&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# spec/rails_helper.rb

require_relative 'support/factory_bot'
require_relative 'support/chrome'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you generate a User model (or any model) RSpec will generate a factory for you in your &lt;code&gt;factories.rb&lt;/code&gt; file.&lt;br&gt;
You can modify it to look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# spec/factories.rb

FactoryBot.define do
  factory(:user) do
    email { Faker::Internet.email }
    password { Faker::Internet.password }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#it-should-run-a-test-do"&gt;
  &lt;/a&gt;
  it "should run a test" do...
&lt;/h2&gt;

&lt;p&gt;Run &lt;code&gt;rspec&lt;/code&gt; command in the terminal and you should see it run and output some green text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-&amp;gt; rspec
No examples found.

Finished in 0.00038 seconds (files took 0.94577 seconds to load)
0 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finish-up"&gt;
  &lt;/a&gt;
  Finish up
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -A
git commit -m "add rspec"
git checkout main
git merge rspec
git branch -D rspec
git push # assuming you have a repo online somewhere
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>rails</category>
      <category>rspec</category>
      <category>testing</category>
      <category>ruby</category>
    </item>
    <item>
      <title>What Does a DevOps Engineer Do?</title>
      <author>Francesco Ciulla</author>
      <pubDate>Thu, 06 Jan 2022 21:41:43 +0000</pubDate>
      <link>https://dev.to/tinystacks/what-does-a-devops-engineer-do-5795</link>
      <guid>https://dev.to/tinystacks/what-does-a-devops-engineer-do-5795</guid>
      <description>&lt;p&gt;Hiring a DevOps Engineer for the first time? Knowing what to look for in a talented engineer can be a challenge. In this article, I discuss what you can expect from a DevOps Engineer in today's marketplace. I share some of my own experiences hiring DevOps Engineers in today's competitive labor market. Finally, I talk about cheaper alternatives to hiring a full-time DevOps Engineer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-do-you-need-a-devops-engineer"&gt;
  &lt;/a&gt;
  When Do You Need a DevOps Engineer?
&lt;/h2&gt;

&lt;p&gt;In my past articles,  &lt;a href="https://blog.tinystacks.com/stacks-stages-environments-definitions"&gt;I've discussed DevOps release pipelines, stacks, and stages in-depth&lt;/a&gt;. A release pipeline is a software-driven process that development teams use to promote application changes from development into production. The pipeline creates multiple stacks - full versions of your application - across multiple stages of deployment. &lt;/p&gt;

&lt;p&gt;A development team usually starts a pipeline automatically via a push to a source code control system, such as Git. The team then pushes the change set gradually through each stage (dev-&amp;gt;test-&amp;gt;staging-&amp;gt;prod), testing and validating their changes along the way. &lt;/p&gt;

&lt;p&gt;What I haven't discussed (directly, at least) is how &lt;em&gt;complicated&lt;/em&gt; this process is. A DevOps release pipeline is itself a piece of software. It requires code to run - and that code needs to be tested, debugged, and maintained. &lt;/p&gt;

&lt;p&gt;Many teams and small development shops get started without a dedicated DevOps engineer. Yours may be one of them! In these situations, a few team members generally own pieces of the pipeline and keep it running. Pipelines at this point are usually a mix of automated promotion and old-school manual deployment. &lt;/p&gt;

&lt;p&gt;However, as your application and requests from your customers grow, you may realize the lack of a dedicated DevOps engineer is slowing your team down. Some of the signs include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your team's velocity slows under the weight of its current (mostly manual) deployment processes. &lt;/li&gt;
&lt;li&gt;You have a somewhat automated deployment process but maintaining it is consuming more and more of the team's time. &lt;/li&gt;
&lt;li&gt;You realize after a high-profile failure that your release procedures need professional help. &lt;/li&gt;
&lt;li&gt;You know you should improve your deployment process but your team is so crushed with feature work that no one has time to spend on it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're facing down one or more of these issues, it may be time to hire a part-time or full-time DevOps Engineer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsibilities-of-a-devops-engineer"&gt;
  &lt;/a&gt;
  Responsibilities of a DevOps Engineer
&lt;/h2&gt;

&lt;p&gt;A DevOps Engineer's role will likely look slightly different at every company. However, the following broad-based responsibilities tend to be common and consistent. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automate-the-full-release-pipeline"&gt;
  &lt;/a&gt;
  Automate the Full Release Pipeline
&lt;/h3&gt;

&lt;p&gt;A good release pipeline eliminates unnecessary manual steps and reduces the time required to deploy changes to your application. Building and maintaining this pipeline is the DevOps Engineer's primary job. &lt;/p&gt;

&lt;p&gt;DevOps Engineers usually craft release pipelines using  &lt;a href="https://blog.tinystacks.com/using-codebuild-and-codepipeline-to-deploy-aws-applications-easily"&gt;a Continuous Integration/Continuous Development tool&lt;/a&gt;. Tools  &lt;a href="https://www.katalon.com/resources-center/blog/ci-cd-tools/"&gt;such as Jenkins, Atlassian, GitLab, and Azure DevOps&lt;/a&gt; integrate with source code control tools (usually Git) and handle triggering automated actions in response to repository check-ins. If your team already uses such a tool and is committed to it, you'll want to find someone proficient in your specific CI/CD toolset. &lt;/p&gt;

&lt;p&gt;Many CI/CD toolsets offer a set of predefined actions to assist with the CI/CD process. However, other actions will be specific to your team's application. A DevOps engineer uses one or more scripting languages to automate complicated deployment tasks your team may have been executing manually. Python, JavaScript, shell scripting, and PowerShell (on Windows)  &lt;a href="https://www.devopsuniversity.org/what-programming-languages-are-used-by-a-devops-engineer/"&gt;are some of the more popular scripting languages that DevOps Engineers use&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For cloud-deployed software, a DevOps Engineer is also responsible for setting up the entire stack on which the application runs using  &lt;a href="https://blog.tinystacks.com/stacks-stages-aws"&gt;Infrastructure as Code&lt;/a&gt;. A DevOps Engineer should be able to design and implement a stack deployment that can be deployed multiple times to any stage of your release pipeline. &lt;/p&gt;

&lt;p&gt;Some engineers implement Infrastructure as Code using a scripting language such as Python. However, it's more common to use a templating language, such as  &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation on AWS&lt;/a&gt; or  &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview"&gt;Azure Resource Manager (ARM) Templates&lt;/a&gt; on Azure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-best-practices-for-software-development"&gt;
  &lt;/a&gt;
  Setting Best Practices for Software Development
&lt;/h3&gt;

&lt;p&gt;As part of setting up the build and release pipeline, your DevOps guru will also define best practices for coding and validation of changes. In other words, they're the point person for your team's  &lt;a href="https://blog.tinystacks.com/pipeline-approvals-manual-automatic"&gt;change management approval process&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For example, a DevOps Engineer may work with their team to devise the best way to manage the overall work process. For most teams, this usually means adopting an Agile approach to software development  &lt;a href="https://www.planview.com/resources/guide/introduction-to-kanban/kanban-vs-scrum/"&gt;such as Scrum or Kanban&lt;/a&gt;. It could also mean defining a code review process and teaching the team how to conduct good reviews. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitor-builds-and-deployments"&gt;
  &lt;/a&gt;
  Monitor Builds and Deployments
&lt;/h3&gt;

&lt;p&gt;The DevOps Engineer is responsible for ensuring the continued health of the team's CI/CD pipeline. This includes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monitoring build progress and logs from your team's CI/CD tool&lt;/li&gt;
&lt;li&gt;Moving quickly to resolve broken builds and keep changes flowing through the pipeline&lt;/li&gt;
&lt;li&gt;Observing dashboard metrics as new instances of the application come online&lt;/li&gt;
&lt;li&gt;Staying alert for errors as your deployment shifts more users over to the new version of your application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Monitoring should occur in all stages of the pipeline.  &lt;a href="https://www.atlassian.com/devops/devops-tools/devops-monitoring"&gt;As Atlassian points out&lt;/a&gt;, pre-production monitoring means you can stomp out critical errors before they ever reach customers. &lt;/p&gt;

&lt;p&gt;Depending on the size of your organization, the DevOps Engineer may supervise all of this themselves. They may also work in conjunction with a Sustained Engineering or Support team that's ultimately responsible for maintaining application health. In either case, your DevOps Engineer should take the lead in defining what the team needs to monitor. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-the-git-guru"&gt;
  &lt;/a&gt;
  Be the Git Guru
&lt;/h3&gt;

&lt;p&gt;Ahhh, Git. The free source code control system is a marvelous invention. You can't be a developer nowadays and not know at least the basics of Git. And yet even seasoned developers will sometimes find themselves mired in Merge Conflict Hell. &lt;/p&gt;

&lt;p&gt;A team's DevOps Engineer should know Git inside and out. They should understand, for example,  &lt;a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing"&gt;the difference between a merge and a rebase&lt;/a&gt; - and which one to use when. They are the person primarily responsible for defining the team's branching and merging strategy - and maintaining quality internal documentation for other team members.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-look-for-in-a-devops-engineer"&gt;
  &lt;/a&gt;
  What to Look for in a DevOps Engineer
&lt;/h2&gt;

&lt;p&gt;As an engineering manager, I've hired multiple DevOps engineers. During the interview process, my loops focus on validation a combination of technical and soft skills: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevOps knowledge&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Does the candidate have the basics of CI/CD down pat? What successes have they accumulated in developing successful pipelines? What setbacks have they encountered - and how have they overcome them? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud platform and DevOps tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In what DevOps tools is your candidate most experienced? Do they know the tools your team is already using? &lt;/p&gt;

&lt;p&gt;A DevOps Engineer will also need to make numerous decisions on whether to buy or build certain parts of the DevOps process. For example, does your team roll its own artifact storage features? Or does it leverage a tool like  &lt;a href="https://jfrog.com/artifactory/"&gt;Artifactory&lt;/a&gt;? DevOps Engineers need to remain up to speed on the tools marketplace so they can make these critical buy vs. build decisions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leadership&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A DevOps Engineer needs to do more than build a pipeline. They need to convince a (sometimes reluctant) team of engineers and stakeholders to change the way they develop software. Does your candidate have experience talking a tough crowd into adopting new processes? &lt;/p&gt;

&lt;p&gt;As a manager, I like to use  &lt;a href="https://www.indeed.com/career-advice/interviewing/how-to-use-the-star-interview-response-technique"&gt;STAR (Situation-Task-Action-Result) questions&lt;/a&gt; to determine a candidate's experience with being a technical leader. So I might ask something like, "Tell me about a time when you received pushback from your team on a process change. What was it and how did you resolve it?" &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Growth mindset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The DevOps and cloud spaces are changing constantly. So it's important that a DevOps Engineer not get overly set in their ways. &lt;/p&gt;

&lt;p&gt;I also like to use STAR questions to gauge a candidate's willingness to grow. For example, what's the last thing that they learned just because it looked interesting? Did they end up using it on the job? If so, what was the result? &lt;/p&gt;

&lt;p&gt;Alternatively, I may ask when was the last time they received critical feedback from their manager. What was it? And how did they use that feedback to improve their job performance? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-to-hiring-a-fulltime-devops-engineer"&gt;
  &lt;/a&gt;
  Alternatives to Hiring a Full-Time DevOps Engineer
&lt;/h2&gt;

&lt;p&gt;You've determined that you need more DevOps savvy in your org. But that doesn't mean you need to start off with a full-time position out of the gate. Maybe you can't afford a full-time position at the moment. Or perhaps you'd just like to test the waters before diving in with both feet. &lt;/p&gt;

&lt;p&gt;Fortunately, there are a couple of alternatives to hiring someone full-time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hire-a-parttime-devops-engineer"&gt;
  &lt;/a&gt;
  Hire a Part-Time DevOps Engineer
&lt;/h3&gt;

&lt;p&gt;You may not need (nor even desire) a full-time team member. It may be enough to hire someone on a part-time basis to construct and maintain your build and release pipeline.&lt;/p&gt;

&lt;p&gt;In this scenario, you'd want to find a DevOps Engineer who's good at building self-service solutions. Your team should be able to kick off builds, perform releases, and monitor rollouts without having a full-time DevOps Engineer on call to oversee a successful outcome.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrate-to-tinystacks"&gt;
  &lt;/a&gt;
  Migrate to TinyStacks
&lt;/h3&gt;

&lt;p&gt;Another option? Forego the engineer! You can potentially save both time and money by adopting a DevOps tool that essentially provides you "DevOps as a service". &lt;/p&gt;

&lt;p&gt;TinyStacks is one such tool. Built by a team with deep experience building out the Amazon Web Services console, TinyStacks provides an automated approach to DevOps. Using a simple UI Web interface, your team can migrate its application into a full release pipeline - complete with AWS cloud architecture - within the week. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.tinystacks.com/"&gt;Read a little more on what TinyStacks can do for you&lt;/a&gt;  and contact us below to start a discussion!&lt;/p&gt;

&lt;p&gt;Article by Jay Allen&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Star Rating</title>
      <author>sonu sharma</author>
      <pubDate>Thu, 06 Jan 2022 21:26:29 +0000</pubDate>
      <link>https://dev.to/sonu_sharma/star-rating-31hj</link>
      <guid>https://dev.to/sonu_sharma/star-rating-31hj</guid>
      <description>&lt;p&gt;I am creating multipart series about creating a star rating using html, javascript and css.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Mrlallu/embed/QWqByVw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
I am using a custom element called &lt;code&gt;custom-rating&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what do you think about my approach ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Referece 1: &lt;a href="https://developers.google.com/web/fundamentals/web-components/customelements"&gt;https://developers.google.com/web/fundamentals/web-components/customelements&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;References 2: &lt;a href="https://developers.google.com/web/fundamentals/web-components/customelements#attrchanges"&gt;https://developers.google.com/web/fundamentals/web-components/customelements#attrchanges&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>These were my favorite apps of 2021</title>
      <author>Fernando Cutire</author>
      <pubDate>Thu, 06 Jan 2022 21:15:47 +0000</pubDate>
      <link>https://dev.to/fernandocutire/these-were-my-favorite-apps-of-2021-2nof</link>
      <guid>https://dev.to/fernandocutire/these-were-my-favorite-apps-of-2021-2nof</guid>
      <description>&lt;p&gt;This is not some kind of paid promotion. Just that sometimes are curious about what other people use in a daily basis.&lt;/p&gt;

&lt;p&gt;When I ask, I get different responses and is cool to have this variety.&lt;/p&gt;

&lt;p&gt;So I present my favorite apps/software of the last year&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-favorite-apps"&gt;
  &lt;/a&gt;
  My favorite apps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#calm"&gt;
  &lt;/a&gt;
  Calm
&lt;/h3&gt;

&lt;p&gt;A sleep and meditation app, has a ton of meditation exercises and calm music. Really an amazing app , i wish it has a better web app but for now it’s ok.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dashlane"&gt;
  &lt;/a&gt;
  Dashlane
&lt;/h3&gt;

&lt;p&gt;This password manager is really useful. By now it makes all that it needs to do. Also it has VPN, and a dark web email analyzer. It is a really great password manager.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toggl"&gt;
  &lt;/a&gt;
  Toggl
&lt;/h3&gt;

&lt;p&gt;It is a time tracker useful when working on different projects and clients. For me i use it to know how many time i spent on different topics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rescuetime"&gt;
  &lt;/a&gt;
  Rescuetime
&lt;/h3&gt;

&lt;p&gt;Another time tracker, this really blows my mind. It can track without specifying some task. When i open my PC it begins to track, really useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#os-ubuntu"&gt;
  &lt;/a&gt;
  OS: Ubuntu
&lt;/h3&gt;

&lt;p&gt;This was the year i began to use linux. Ubuntu has make things easier in development, although i had audio related issues, and the os freeze sometimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connnect"&gt;
  &lt;/a&gt;
  Let's connnect
&lt;/h2&gt;

&lt;p&gt;Remember you can follow me on Twitter &lt;a class="mentioned-user" href="https://dev.to/fernandocutire"&gt;@fernandocutire&lt;/a&gt;, I am getting better at writing in English so we could talk there&lt;/p&gt;

</description>
      <category>software</category>
      <category>apps</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to create a PyPi (Python) package</title>
      <author>Kalob Taulien</author>
      <pubDate>Thu, 06 Jan 2022 21:04:03 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/how-to-create-a-pypi-python-package-3g52</link>
      <guid>https://dev.to/kalobtaulien/how-to-create-a-pypi-python-package-3g52</guid>
      <description>&lt;p&gt;Have you ever wanted to create a Python package so you can type the following?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;my-awesome-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If so, this tutorial is for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-getting-poetry"&gt;
  &lt;/a&gt;
  1. Getting Poetry
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt; is a system package you can use to &lt;strong&gt;very easily&lt;/strong&gt; manage your Python Packages. &lt;/p&gt;

&lt;p&gt;It makes handling your packages super easy. I have 9 Python packages under my name, and this is by far the best solution. &lt;/p&gt;

&lt;p&gt;First, you need to install Poetry on your system. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#osx-linux-bashonwindows-install-instructions"&gt;
  &lt;/a&gt;
  osx / linux / bashonwindows install instructions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-sSL&lt;/span&gt; https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#windows-powershell-install-instructions"&gt;
  &lt;/a&gt;
  windows powershell install instructions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;Invoke-WebRequest &lt;span class="nt"&gt;-Uri&lt;/span&gt; https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py &lt;span class="nt"&gt;-UseBasicParsing&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.Content | python -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://python-poetry.org/docs/#installation"&gt;More details about installation here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can type &lt;code&gt;poetry --version&lt;/code&gt; to see the version you're running. If this doesn't work for you, try closing and re-opening your terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-a-poetry-project"&gt;
  &lt;/a&gt;
  2. Creating a Poetry project
&lt;/h2&gt;

&lt;p&gt;In this tutorial we're going to create a new package from scratch. &lt;/p&gt;

&lt;p&gt;Go ahead and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry new test-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the docs mention, it'll create a new folder with a bunch of files for you that are structured like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test-package
├── pyproject.toml
├── README.rst
├── test_package
│   └── __init__.py
└── tests
    ├── __init__.py
    └── test_test_package.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-adding-your-code"&gt;
  &lt;/a&gt;
  3. Adding your code
&lt;/h2&gt;

&lt;p&gt;Create a new file in &lt;code&gt;test-package/test_package/&lt;/code&gt; called &lt;code&gt;myfile.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your file structure should look like this now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test-package
├── pyproject.toml
├── README.rst
├── test_package
│   ├── __init__.py
│   └── myfile.py  # &amp;lt;- This is new
└── tests
    ├── __init__.py
    └── test_test_package.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of your code will go in the &lt;code&gt;test_package/&lt;/code&gt; folder. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This folder name will be different if you used a different package name during step 2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can add any files you want in this folder. This is what get's bundled in your package.&lt;/p&gt;

&lt;p&gt;Now in your &lt;code&gt;myfile.py&lt;/code&gt; file, add this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Later we can use this code like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test_package.myfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;custom_function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👆 We'll get to that later, first we need to build the package. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-building-your-package"&gt;
  &lt;/a&gt;
  4. Building your package
&lt;/h2&gt;

&lt;p&gt;So far we just have a bunch of code sitting on our computer and if someone else wants to use our code, they need to copy all the files and folders. &lt;/p&gt;

&lt;p&gt;Let's "build" the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take all your code, bundle it, and put it in a versioned file inside of a &lt;code&gt;/dist/&lt;/code&gt; folder. The file should look something like this: &lt;code&gt;test-package-0.1.0.tar.gz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It will also create a wheel file for you that looks something like this: &lt;code&gt;test_package-0.1.0-py3-none-any.whl&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-testing-your-code-in-other-virtual-environments"&gt;
  &lt;/a&gt;
  5. Testing your code in other virtual environments
&lt;/h2&gt;

&lt;p&gt;Now what I like to do is test my package in a brand new virtual environment. &lt;/p&gt;

&lt;p&gt;Create a new virtual env in a new folder somewhere else on your computer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;testenv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;testenv 
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv .venv/ 
&lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Your virtual env will be created differently if you're on Windows. You can use virtualenv, pipenv, Docker, etc. It just needs to be a fresh environment. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you're in a new Python environment, copy that .tar.gz from from earlier into this folder. (I usually use the operating systems OS for this, but there's nothing wrong with using &lt;code&gt;cp&lt;/code&gt; to copy the file). The only file in this virtual environment should be your .tar.gz file. &lt;/p&gt;

&lt;p&gt;Now install this file with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;test-package-0.1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming everything went well, let's test this out. &lt;/p&gt;

&lt;p&gt;Open a new Python shell (REPL) with:&lt;br&gt;
&lt;code&gt;python&lt;/code&gt; (on non-Windows) or &lt;code&gt;py&lt;/code&gt; on Windows. And type this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test_package.myfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;custom_function&lt;/span&gt;

&lt;span class="n"&gt;custom_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kalob"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should print out &lt;code&gt;Hello Kalob!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And just like that, you have create a bundled package. But it's not available for everybody just yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-push-it-to-github"&gt;
  &lt;/a&gt;
  6. Push it to GitHub
&lt;/h2&gt;

&lt;p&gt;At this stage I like to push my code up to GitHub. &lt;/p&gt;

&lt;p&gt;Because we're making a public package, I tend to make my repo's public as well. No use hiding the source code when it will be easily downloaded from PyPi.org anyway. &lt;/p&gt;

&lt;p&gt;Dont forget to add &lt;code&gt;/dist/&lt;/code&gt; and other files to your .gitignore file. The &lt;code&gt;/dist/&lt;/code&gt; folder is where your bundled code goes when it's built by Poetry. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-publish-the-package"&gt;
  &lt;/a&gt;
  7. Publish the package
&lt;/h2&gt;

&lt;p&gt;Now let's publish this code on PyPi.org. &lt;/p&gt;

&lt;p&gt;First, you need a free &lt;a href="https://pypi.org/"&gt;PyPi.org&lt;/a&gt; account.  You'll need your username and password handy because Poetry will ask for it so it can upload your file to PyPi and associate it with your account. &lt;/p&gt;

&lt;p&gt;Once you have a free PyPi account, go ahead and run this in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask for your username and password. Go ahead and type those in. &lt;/p&gt;

&lt;p&gt;And now your package will be on PyPi.org. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the package of &lt;code&gt;test-package&lt;/code&gt; already exists, or at one point existed, on PyPi.org you &lt;em&gt;cannot&lt;/em&gt; use the same name. Making your Python packages have unique names is the best way to avoid this problem. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you didn't run into a naming problem, you'll have successfully published a package to PyPi.org! &lt;/p&gt;

&lt;p&gt;Congrats!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-install-your-package-using-pip"&gt;
  &lt;/a&gt;
  8. Install your package using pip
&lt;/h2&gt;

&lt;p&gt;Assuming your package is now on PyPi, let's install your package in another project and test it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;test-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything should work as expected now. And your code is now easily accessible to every Python developer. 🎉 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-repo"&gt;
  &lt;/a&gt;
  Example repo
&lt;/h2&gt;

&lt;p&gt;If you'd like to see a simple package I recently created for &lt;a href="https://arbington.com"&gt;Arbington.com&lt;/a&gt; take a look at &lt;a href="https://github.com/arbington/python-vimeo"&gt;python-vimeo on GitHub&lt;/a&gt; and feel free to use any part of that repo. That's why we open sourced it! :) &lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>4 years of taking online education taught me this (first year) Pt1</title>
      <author>Fernando Cutire</author>
      <pubDate>Thu, 06 Jan 2022 20:51:57 +0000</pubDate>
      <link>https://dev.to/fernandocutire/5-years-of-taking-online-education-taught-me-this-first-year-pt1-eeh</link>
      <guid>https://dev.to/fernandocutire/5-years-of-taking-online-education-taught-me-this-first-year-pt1-eeh</guid>
      <description>&lt;p&gt;Online courses are everywhere, and every day there are more. &lt;br&gt;
This is not going anywhere, and don't expect that it would slow down.&lt;/p&gt;

&lt;p&gt;In a series of articles, I will explain my approach to online education. &lt;/p&gt;

&lt;p&gt;This is written in a personal way, maybe you can relate. It wasn't always perfect, I was really slow and the start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-this-was-the-first-year"&gt;
  &lt;/a&gt;
  So this was the first year.
&lt;/h1&gt;

&lt;p&gt;In my first year, I discover online courses, but I didn’t see it as a way that can help me at the time. &lt;/p&gt;

&lt;p&gt;I would only say to myself, this looks good but I don’t feel pressured to finish it, maybe someday, like when I am looking for a job I will have better reasons&lt;/p&gt;

&lt;p&gt;As you may know, my way of thinking was not very mature, and it wasn’t because I was at school with so many hours and for me, it was not a big deal to finish.&lt;/p&gt;

&lt;p&gt;The topics that interested me at the time were mainly programming and business. I enroll in 3 free udemy courses and paid for 3. I remember that I just completed 2 but because it was 2 hours or less, so no big deal.&lt;/p&gt;

&lt;p&gt;As you may know, some Udemy Courses can get through 30 hours of content, and this makes it hard to finish. At the time I thought that more content meant that the course was better, but obviously, I was mistaken.&lt;/p&gt;

&lt;p&gt;Finally, it is important to say that I just took courses from Spanish speakers instructors so as you may think, the offer was not very high back then.&lt;/p&gt;

&lt;p&gt;This series will continue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connnect"&gt;
  &lt;/a&gt;
  Let's connnect
&lt;/h2&gt;

&lt;p&gt;Remember you can follow me on Twitter  &lt;a href="https://twitter.com/fernandocutire"&gt;@fernandocutire&lt;/a&gt;, I am getting better at writing in English so we could talk there&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My First React Project &amp; React State | Day 5 &amp; 6</title>
      <author>Web.Developer.io</author>
      <pubDate>Thu, 06 Jan 2022 20:35:34 +0000</pubDate>
      <link>https://dev.to/developerioweb/my-first-react-project-react-state-day-5-6-4b21</link>
      <guid>https://dev.to/developerioweb/my-first-react-project-react-state-day-5-6-4b21</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;The State is a &lt;strong&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/strong&gt; where we store our values that belongs to the Component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what are Objects🤔 ??&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So we have heard about the &lt;strong&gt;&lt;code&gt;variables&lt;/code&gt;&lt;/strong&gt; , they are the containers which used to store the data values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Objects are also Variable but they can contain many values.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tesla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h3&gt;

&lt;p&gt;But we already have &lt;strong&gt;&lt;code&gt;props&lt;/code&gt;&lt;/strong&gt; then why we need the &lt;strong&gt;&lt;code&gt;State.&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Props used to pass data to Component but we can’t change the data once passed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;But state is used to store the Dynamic data .&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It’s helps in making the &lt;strong&gt;Dynamic Web Application.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also we need something which keep track what is happing in our Application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State is Designed to Change in Response to the Event.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTecpfkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ese91i41zs7kt01auyse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTecpfkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ese91i41zs7kt01auyse.png" alt="React State" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;As u can see in the above example the uses of state.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use state to find out like whether a user is logged-in or logged-out and display the different Screen depending upon the case.&lt;/p&gt;

&lt;p&gt;So every time we are doing something we are changing the State of our Component like we click to &lt;code&gt;read more&lt;/code&gt; and the text expands this is also a state change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also there are 2 types of State changes which state keep track of&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UI Logic → When we are changing the State of the Interface&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like,&lt;/strong&gt; we click on some button and a pop-up opens so this comes under the UI logic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Business Logic → When we are changing the state of the Data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like,&lt;/strong&gt; we are Deleting some message. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;p&gt;To use the State u should use the class Component instead of Functional Component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React state is an Object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;like if u did &lt;code&gt;this.state&lt;/code&gt; same as the &lt;code&gt;this.props&lt;/code&gt; it will return a object which will have the key-value pairs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;we set/initialize the state in the Constructor Function.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cld-RpRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr7khqvyn0xn091knxff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cld-RpRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr7khqvyn0xn091knxff.png" alt="Constructor" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another thing is that we have to declare/initialize our State but in the case of props they are already Declared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;did&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;give&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; 

&lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;give&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;nothing&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; 
&lt;span class="nx"&gt;rendered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code Explanation →&lt;/strong&gt;&lt;br&gt;
So the Code Look like this👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have made a Constructor which take &lt;code&gt;props&lt;/code&gt; as an argument after that we have call the Super with props as Argument &lt;/p&gt;

&lt;p&gt;So to explain this thing let’s first understand the use of the super&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Look at the Code Below&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inside Constructor of Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inside the Constructor of App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;When u ran this , a error will pop-up that say.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dW01uq4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8n861q4d18hzs2xmzy0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dW01uq4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8n861q4d18hzs2xmzy0.png" alt="Error" width="880" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so we have to use the &lt;code&gt;Super&lt;/code&gt; to use the functionality of the derived class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/-Pro/pen/yLzqYzQ?editors=0010"&gt;React State&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why we use the props as a argument in the Super 🤔?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As u know that the props are pre-declared and accessible throughout the Component But they are not accessible inside the Constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ScoreKeeper&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;constrctor&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=**&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Score : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If u try to run , this will give the error cuz the props are not accessible inside the constructor to use them we should use &lt;code&gt;**super(props)&lt;/code&gt;;**&lt;/p&gt;

&lt;p&gt;So when we need to use the props inside the Constructor we should take them as a argument otherwise not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#another-way-of-defining-the-state"&gt;
  &lt;/a&gt;
  Another way of Defining the State
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ScoreKeeper&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Score : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;So we can also define like this&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;But this isn’t a valid JavaScript , Babel Convert it in the valid JavaScript code.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-states%E2%86%92"&gt;
  &lt;/a&gt;
  Setting States→
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0VNdxfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6u6sm02524cgrujglgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0VNdxfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6u6sm02524cgrujglgt.png" alt="Changing States" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this.setState() expects an object to be passed as an Argument also u can pass a Function in this or there are other ways of using this also.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Also the keys which we passed as an Object are changes and other remains unchaged.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;This process is Asynchronous → Means React will not do it Immediately.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Don&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t do like this to change the state**
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don’t use the setState() method inside the Constructor Function and also not in the render.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 👇&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maketimer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;maketimer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#my-first-project"&gt;
  &lt;/a&gt;
  My First Project
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pokedex-99321.herokuapp.com/"&gt;&lt;strong&gt;PokeGame 👆&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a PokeGame Project which render 2 pokedex each having 4-4 Pokemon and it will compare the Exp of both the pokedexes and declare the Winner &amp;amp; Loser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!🙂&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Reduce the Pressure on Young and Inexperienced Developers</title>
      <author>Jens Oliver Meiert</author>
      <pubDate>Thu, 06 Jan 2022 20:17:16 +0000</pubDate>
      <link>https://dev.to/j9t/reduce-the-pressure-on-young-and-inexperienced-developers-31an</link>
      <guid>https://dev.to/j9t/reduce-the-pressure-on-young-and-inexperienced-developers-31an</guid>
      <description>&lt;p&gt;There’s a sad running gag in our industry: “Looking for junior developer with five years of experience.” (Examples: &lt;a href="https://twitter.com/shakimdev/status/1179540094451113984"&gt;2019&lt;/a&gt;, &lt;a href="https://twitter.com/tucker_dev/status/1278083107531501568"&gt;2020&lt;/a&gt;, &lt;a href="https://twitter.com/madsbrodt/status/1472250462120329222"&gt;2021&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;You can tell the contradiction: We can have &lt;em&gt;close to no&lt;/em&gt; expectations of junior or, generally speaking, young and inexperienced developers.&lt;/p&gt;

&lt;p&gt;Any expectations we do set change the profile we’re hiring for. To stick with the popular example, if we’re looking for someone with five years of experience, we’re looking for a medior. Not a junior. If we keep these expectations up insisting on hiring a junior, a working student, or even an intern, it gets ridiculous (and exploitative).&lt;/p&gt;

&lt;h3&gt;Consequences of Unrealistic Expectations&lt;/h3&gt;

&lt;p&gt;While we know of our thirst for experienced developers and see that thirst trickle down to entry roles, we may not consider what unrealistic expectations mean for young and inexperienced developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We show disrespect.&lt;/strong&gt; Asking someone to meet a standard they cannot meet is not showing appreciation for who they are, what they bring to the table, or what else they have accomplished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We evade our responsibility to mentor and coach.&lt;/strong&gt; By suggesting a candidate knows everything, it may be argued that we’re playing a cheap trick, acting like we don’t need to train them anymore. The candidate may see through that, but we may fool ourselves in a way that hurts us more than we think, because evading that responsibility also evades the respective growth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We put undue pressure on candidates.&lt;/strong&gt; Unrealistic expectations make for pressure. A young or inexperienced developer already has enough of that—after all, they’re just trying to get a foot in the door, to start their (new) career. This is hard. Add brazen requirements and it gets worse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We set candidates up for failure.&lt;/strong&gt; When—unintentionally or not—we’re not up to our own responsibility and instead put pressure on young and inexperienced developers, we set them up for failure. We make it harder for them to enter the field, and we make it harder for them to acclimate and thrive in the field.&lt;/p&gt;

&lt;h3&gt;Healthier Hiring&lt;/h3&gt;

&lt;p&gt;What we can do instead is to lower the expectations on young and inexperienced developers—and to &lt;strong&gt;raise the expectations on the mentoring and coaching of young and inexperienced developers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There can be several reasons for hiring someone young or inexperienced, but we must be far past doing so in order to take advantage of them. This is a terrible reason, and those motivated by it are fit for neither hiring nor leading.&lt;/p&gt;

&lt;p&gt;The best reasons include that you want to give to the candidate and the community, and that you hire because you deem it part of your mission to train and nurture new talent.&lt;/p&gt;

&lt;h4&gt;One Approach&lt;/h4&gt;

&lt;p&gt;I’m still tweaking my own management and leadership philosophy. But here’s my thinking around young and inexperienced developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In general, there’s a hybrid goal for each engineering team to complete work, do good work, and drive work forward; and to do so in (and contribute to) a healthy and diverse work environment and culture.&lt;/li&gt;
&lt;li&gt;Young and inexperienced developers cannot immediately contribute to the first part of the goal, but are already one key for a healthy environment and culture. They may be so important for that, that in some team constellations, a junior developer could make the team more effective than a senior developer, just because that may avoid some sort of “seniority mono-culture.”&lt;/li&gt;
&lt;li&gt;When hiring young and inexperienced developers, one fair condition is that they have some early link to the field—like, they’re studying computer science, or they went through a development bootcamp, or they’re running some technical projects.&lt;/li&gt;
&lt;li&gt;More important, then, are soft skills: Is the person awake, are they motivated, are they a good culture fit?&lt;/li&gt;
&lt;li&gt;The rest, then, is the manager’s and the team’s responsibility: &lt;em&gt;They&lt;/em&gt; are now responsible for mentoring, training, and guiding the new team member so that they can be successful (to the extent that the new member accepts their own responsibility).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;❧ Hiring juniors, hiring young as well as inexperienced developers is important and beautiful. But the challenge is training and mentoring them, and that responsibility should stay with us, and not be loaded off on new talent by setting unrealistic expectations. Let’s put the pressure on us, the experienced developers and managers, and reduce the pressure on new peers. That’s much better for everyone.&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>hiring</category>
      <category>training</category>
    </item>
    <item>
      <title>The Future of Color in CSS</title>
      <author>Kathryn Grayson Nanz</author>
      <pubDate>Thu, 06 Jan 2022 20:03:32 +0000</pubDate>
      <link>https://dev.to/kathryngrayson/the-future-of-color-in-css-5316</link>
      <guid>https://dev.to/kathryngrayson/the-future-of-color-in-css-5316</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-past"&gt;
  &lt;/a&gt;
  The Past
&lt;/h2&gt;

&lt;p&gt;We’ve always known that the way colors are represented on a monitor doesn’t encompass the full width and breadth of colors that the human eye can perceive. As always, art is limited by the technology of the time – ages ago, color decisions were limited based on the relative expense of various dyes or paint colors to produce. That’s why purple is associated with royalty in many western cultures; purple dyes used to be quite expensive, so wearing purple clothes was a real flex! Similarly, early computers were limited to green text on a black background because the monochrome monitors used phosphor, and green phosphor was the brightest and had the longest afterglow (which helped disguise the low refresh rates). Heck, if you’ve been doing web design or development for a while, you probably remember the list of 216 “web-safe” colors we were limited to in the 90s! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-present"&gt;
  &lt;/a&gt;
  The Present
&lt;/h2&gt;

&lt;p&gt;Similarly, the way we’re used to writing RGB colors now has a lot to do with the limitations of the time it was created. For instance, did you know that the reason RGB colors are defined on a scale from 0 to 255 is because a color is stored in three bytes of data (one for red, one for green, and one for blue)? So, if we were to take things all the way back to the binary, we’d see &lt;code&gt;00000000 - 00000000 - 00000000&lt;/code&gt; as the code for pure black and &lt;code&gt;11111111 - 11111111 - 11111111&lt;/code&gt; as the code for pure white – all off, or all on, basically. When we convert from binary to decimal, &lt;code&gt;1111111&lt;/code&gt; converts to &lt;code&gt;255&lt;/code&gt;. So, when we’re defining RGB colors, we’re really telling each one of those subpixels in an RGB display what binary value we want it to take...but it’s a lot faster and easier for us to write them in the decimal value shorthand. Kind of cool, right? Like, we abstractly know that it’s all 1s and 0s in the end, but I think it can be a lot of fun to see the curtain pulled back in this way. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--poHca8rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rffrjwdywf6ny6bfa157.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--poHca8rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rffrjwdywf6ny6bfa157.gif" alt="RGB pixels" width="600" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image from &lt;a href="https://www.quora.com/Why-in-RGB-the-biggest-number-for-any-particular-color-is-255#:~:text=The%20reason%20it%20is%20255,lowest%2C%20255%20is%20the%20highest"&gt;https://www.quora.com/Why-in-RGB-the-biggest-number-for-any-particular-color-is-255#:~:text=The reason it is 255,lowest%2C 255 is the highest&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-the-future"&gt;
  &lt;/a&gt;
  Back to the Future
&lt;/h2&gt;

&lt;p&gt;Today, we’re seeing the shift from LCD to OLED screens, which opens up a whole new array of newly displayable colors for our usage. That new color set is known as &lt;strong&gt;P3&lt;/strong&gt;, and it’s about 50% larger than our current RGB color set – which is pretty great, right?. It mean we’ll be able to design using brighter and more vibrant colors. But, we also know that it won’t be the &lt;em&gt;last&lt;/em&gt; color set; the human eye is capable of seeing even more colors than we can currently represent on OLED screens. The set beyond P3 is known as Rec. 2020, and it’s what you can currently see on ultra-high definition displays (like when you see a TV advertised as being “4K UHD”) – although some of those still only support 90-97% of the full Rec. 2020 range. &lt;/p&gt;

&lt;p&gt;The important thing to take away from this is that P3 is the next – but &lt;em&gt;not&lt;/em&gt; the last – color set available to us as developers, which meant that it was important for us to define a color syntax that could grow with us...unlike, unfortunately, the RGB model, which is too limited to use with P3 colors. What we’ve been referring to as RGB colors will be known moving forward as sRGB; the S is for “standard”. You might also start to see reference to “wide-gamut” color support, which is just a quick way to say “able to support more colors than an sRGB display”. &lt;/p&gt;

&lt;p&gt;It’s possible to automatically convert from sRGB to P3 (or backwards), but when that’s done by an algorithm, it can distort the colors slightly from what the designer intended. That means we needed a new way for developers and designers to define color in CSS – one that’s not limited to the sRGB color model the way &lt;code&gt;rgb()&lt;/code&gt;, &lt;code&gt;hsl()&lt;/code&gt; or hex are. There are a few options out there for defining P3 colors, all from the CSS Color Module Level 4.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options-for-writing-p3-colors-in-css"&gt;
  &lt;/a&gt;
  Options for Writing P3 Colors in CSS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-colordisplayp3-0-0-0-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;color(display-p3 0 0 0)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In this syntax, we begin by specifying the color display type, which for our purposes would be &lt;code&gt;display-p3&lt;/code&gt; but could also be &lt;code&gt;srgb&lt;/code&gt; or &lt;code&gt;rec2020&lt;/code&gt;. Then, the three numbers are kind of an updated version of how we used to define sRGB color: each number still represents red, green, and blue (in that order), but instead of maxing out at 255, it now functions on a scale from 0 to 1, with 1 being equal to 100% (the same way we define opacity). So, if we wanted a color that was 100% pure red, we’d write it like &lt;code&gt;color(display-p3 1 0 0)&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;This method is nice, because it’s a very similar syntax to the stuff we’re already familiar with – no big learning curve on the developer end. However, some argue that it’s actually less useful since the RGB approach to defining color is unintuitive. Which is true; it’s hard to fine-tune an RGB defined color in the code alone, unless you’re some kind of color and code wizard. For example, if you have a color that’s &lt;code&gt;color(display-p3 0.6 0.44 0.89)&lt;/code&gt; how do you make it darker? How do you make it brighter? You’d almost always have to go back to some kind of color selection tool and adjust the color there, then derive a new RBG color value to copy into your code. Kind of a pain. Which brings us to...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lab0-0-0-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;lab(0% 0 0)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;lab()&lt;/code&gt; syntax is a method of defining colors based on lightness and color channels. In fact, that’s what the L in &lt;code&gt;lab&lt;/code&gt; stands for: Lightness! Lightness, Color Channel A, and Color Channel B. Lightness is defined on a scale from 0-100%, with 0 being completely dark and 100% being the lightest it can go. The color channels work a little bit differently than we might be accustomed to; they define color as a value between two ends of a spectrum, going from -128 to 127 (which, spoiler alert, is a total spectrum of 255 values). Channel A works on a spectrum between red and green, and channel B works on a spectrum between blue and yellow. In both situations, 0 would be the exact middle – grey. Picture an X shape, with green to red being one crossbar and blue to yellow being the other. &lt;code&gt;lab(50% -40 60)&lt;/code&gt; allows us to plot on that graph, but also adds a new value at the very beginning to define lightness on a scale from 1-100%. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oMgOsUan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k0ikf4w4k3lw0xlatwl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oMgOsUan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k0ikf4w4k3lw0xlatwl.jpg" alt="lab_colourspace_3.jpg" width="348" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image from &lt;a href="https://www.colourphil.co.uk/lab_lch_colour_space.shtml"&gt;https://www.colourphil.co.uk/lab_lch_colour_space.shtml&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lch0-0-0-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;lch(0% 0 0)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;lch()&lt;/code&gt; syntax is similar, but not quite the same as &lt;code&gt;lab()&lt;/code&gt; – it might even be &lt;em&gt;more&lt;/em&gt; easy to use. The L still stands for lightness, and the scale works in exactly the same way: 0-100% to control the lightness of the color. However, the next two values are different; the C stands for chroma, and the H for hue. Chroma is the saturation or intensity of the color, with 0 being grey and 230 (the "max" value) being the highest vividness. Technically, that upper value is limitless, but in practice you'll never (currently) see it go higher than 230. Hue, as you probably guessed, is the color itself. It works on a scale from 0 to 360 (representing the color wheel), with each number representing a hue in the available spectrum. This approach is nice because it’s an incredibly intuitive approach to color. The L and C values correlate really well to the “brightness” and “saturation” controls that we’ve become really accustomed to through things like instagram filters or color picker UI tools. If you want to play around with it a little bit, &lt;a href="https://css.land/lch/"&gt;this LCH Color Picker&lt;/a&gt; can really help you visualize how it works. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aKTjdRrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbkk02b7nyvcvp6oh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKTjdRrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbkk02b7nyvcvp6oh.jpg" alt="lch_colourspace_3.jpg" width="348" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image from &lt;a href="https://www.colourphil.co.uk/lab_lch_colour_space.shtml"&gt;https://www.colourphil.co.uk/lab_lch_colour_space.shtml&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Oh, and in case you were wondering about alpha values (aka: transparency), it works the same way it did before (on a scale from 0 to 1) and can be appended to the end of any of these three new CSS syntaxes by adding a slash after the values within the parenthesis. So a new color value defined in LCH, for example, would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;lch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;66&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;132&lt;/span&gt; &lt;span class="err"&gt;359&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;65&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#great-when-can-i-start"&gt;
  &lt;/a&gt;
  Great, when can I start?
&lt;/h2&gt;

&lt;p&gt;As always, the bad news with future tech is that...well, it’s still mostly in the future! This stuff has only recently been finalized in the CSS specs, so that when P3 color is widely adopted the CSS is already there to support it. Most browsers right now don’t support P3 color. Here’s a quick overview on what &lt;em&gt;is&lt;/em&gt; currently supported, as of Jan 1, 2022. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CSS&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;FF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;color()&lt;/td&gt;
&lt;td&gt;Yes, v15+&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lab()&lt;/td&gt;
&lt;td&gt;Yes, v15+&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No (In development)&lt;/td&gt;
&lt;td&gt;No (In development)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lch()&lt;/td&gt;
&lt;td&gt;Yes, v15+&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No (In development)&lt;/td&gt;
&lt;td&gt;No (In development)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Suffice to say, it’s officially on its way...but not quite here. That being said, it’s fully supported in Safari &lt;em&gt;right now&lt;/em&gt;, so if you want to start playing around with this new approach to color there’s a browser you can use to do so without needing to turn on any experimental flags or anything! In fact, there are even some really great P3 color tools built right into the Safari Web Inspector panel – Jen Simmons has &lt;a href="https://twitter.com/jensimmons/status/1478858248677736454?s=21"&gt;a really great, short overview video&lt;/a&gt; on those tools that I’d highly encourage you to check out if you’re interested in starting to work with P3 colors today. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-fallbacks-with-raw-colorgamut-endraw-"&gt;
  &lt;/a&gt;
  Setting fallbacks with &lt;code&gt;color-gamut&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The other thing that’s important to know if you want to start using P3 colors is how to set a fallback for your users who don’t yet have support for the new colors. By using the &lt;code&gt;color-gamut&lt;/code&gt; media query, you can check the user’s browser AND output device for current color compatibility by passing in &lt;code&gt;srgb&lt;/code&gt;, &lt;code&gt;p3&lt;/code&gt;, or &lt;code&gt;rec2020&lt;/code&gt; and then conditionally rendering your styles based on the status. So if you want to start writing for those future color spectrums, you could set up a little graceful degradation like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color-gamut&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;66%&lt;/span&gt; &lt;span class="m"&gt;132&lt;/span&gt; &lt;span class="m"&gt;359&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;65%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color-gamut&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;srgb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;110&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also do basically the same thing using &lt;code&gt;@supports&lt;/code&gt;, if you were so inclined. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-you-ready-for-the-future-of-color"&gt;
  &lt;/a&gt;
  Are you ready for the future of color?
&lt;/h2&gt;

&lt;p&gt;Being able to witness (and participate in!) these kinds of technological advances is my favorite part of being a developer. Sometimes it can feel frustrating that everything moves so fast, and it can be hard to make peace with the knowledge that the stuff you just learned a year or two ago will inevitably be outdated soon...and yet, in the same breath, I also feel very lucky to be able to work in a field that’s constantly growing, improving, and expanding. As a huge design nerd, the new color gamut support coming to CSS is something I’m especially excited about – the new methods for defining colors are all great options, and I’m thrilled to be able to create designs with brighter and more vibrant colors than we were able to use before. With the adoption P3 color support in Safari, full modern browser support is expected within the next year or so. So get ready; the future of color is here, and we get to be the ones to write it!&lt;/p&gt;

</description>
      <category>css</category>
      <category>ui</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build your self-hosted Evernote
</title>
      <author>Fabio Manganiello</author>
      <pubDate>Thu, 06 Jan 2022 19:58:18 +0000</pubDate>
      <link>https://dev.to/blacklight/build-your-self-hosted-evernote-of7</link>
      <guid>https://dev.to/blacklight/build-your-self-hosted-evernote-of7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-need-for-an-online-second-brain"&gt;
  &lt;/a&gt;
  The need for an online &lt;em&gt;second brain&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;When &lt;a href="https://evernote.com"&gt;Evernote&lt;/a&gt; launched the idea of an online notebook as a sort of "second brain" more than a decade ago, it resonated so much with what I had been trying to achieve for a while. By then I already had tons of bookmarks, text files with read-it-later links, notes I had taken across multiple devices, sketches I had taken on physical paper and drafts of articles or papers I was working on. All of this content used to be sparse across many devices, it was painful to sync, and then Evernote came like water in a desert.&lt;/p&gt;

&lt;p&gt;I have been a happy Evernote user until ~5-6 years ago, when I realized that the company had run out of ideas, and I could no longer compromise with its decisions. If Evernote was supposed to be my second brain then it should have been very simple to synchronize it with my filesystem and across multiple devices, but that wasn't as simple as it sounds. Evernote had a primitive API, a primitive web clipper, no Linux client, and, as it tried harder and harder to monetize its product, it put more and more features behind expensive tiers. Moreover, Evernote experienced &lt;a href="https://www.cnet.com/news/thousands-of-evernote-users-affected-by-data-loss/"&gt;data losses&lt;/a&gt;, &lt;a href="https://thenextweb.com/insider/2013/03/05/after-major-data-breach-evernote-accelerates-plans-to-implement-two-factor-authentication/"&gt;security breaches&lt;/a&gt; and &lt;a href="https://www.forbes.com/sites/thomasbrewster/2016/12/14/worst-privacy-policy-evernote/#525cc6c71977"&gt;privacy controversies&lt;/a&gt; that in my eyes made it unfit to handle something as precious as the notes from my life and my work. I could not compromise with a product that would charge me $5 more a month just to have it running on an additional device, especially when the product itself didn't look that solid to me. If Evernote was supposed to be my second brain then I should have been able to take it with me wherever I wanted, without having to worry on how many devices I was using it already, without having to fear future changes or more aggressive monetization policies that could have limited my ability to use the product.&lt;/p&gt;

&lt;p&gt;So I started my journey as a wanderer of note-taking and link-saving services. Yes, ideally I want something that can do both: your digital brain consists both of the notes you've taken and the links you've saved.&lt;/p&gt;

&lt;p&gt;I've tried many of them over the following years (Instapaper, Pocket, Readability, Mercury Reader, SpringPad, Google Keep, OneNote, Dropbox Paper...), but eventually got dissatisfied by most of them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In most of the cases those products fall into the note-taking category or web scraper/saver category, rarely both.&lt;/li&gt;
&lt;li&gt;In most of the cases you have to pay a monthly/yearly fee for something as simple as storing and syncing text.&lt;/li&gt;
&lt;li&gt;Many of the products above either lack an API to programmatically import/export/read data, or they put their APIs behind some premium tiers. This is a no-go for me: if the company that builds the product goes down, the last thing I want is my personal notes, links and bookmarks to go down with it with no easy way to get them out.&lt;/li&gt;
&lt;li&gt;Most of those products don't have local filesystem sync features: everything only works in their app.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My dissatisfaction with the products on the market was a bit relieved when I discovered &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt;. A Markdown-based, modern-looking, multi-device product that transparently stores your notes on your own local storage, and it even provides plenty of community plugins? That covers all I want, it's almost too good to be true! And, indeed, it is too good to be true. Obsidian &lt;a href="https://obsidian.md/pricing"&gt;charges&lt;/a&gt; $8 a month just for syncing content across devices (copying content to their own cloud), and $16 a month if you want to publish/share your content. Those are unacceptably high prices for something as simple as synchronizing and sharing text files! This was the trigger that motivated me to take the matter into my own hands, so I came up with the wishlist for my ideal "second brain" app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It needs to be self-hosted. No cloud services involved: it's easy to put stuff on somebody else's cloud, it's usually much harder to take it out, and cloud services are unreliable by definition - they may decide from a moment to another that they aren't making enough money, charge more for some features you are using, while keeping your own most precious data as hostage. Or, worse, they could go down and take all of your data with them.&lt;/li&gt;
&lt;li&gt;Each device should have a local copy of my notebook, and it should be simple to synchronize changes across these copies.&lt;/li&gt;
&lt;li&gt;It ought to be Markdown-based. Markdown is portable, clean, easy to index and search, it can easily be converted to HTML if required, but it's much less cumbersome to read and write, and it's easy to import/export. To give an idea of the underestimated power and flexibility of Markdown, keep in mind that all the articles on &lt;a href="https://blog.platypush.tech"&gt;the Platypush blog&lt;/a&gt; are static Markdown files on a local server that are converted on the fly to HTML before being served to your browser.&lt;/li&gt;
&lt;li&gt;It needs to be able to handle my own notes, as well as parse and convert to Markdown web pages that I'd like to save or read later.&lt;/li&gt;
&lt;li&gt;It must be easy to add and modify content. Whether I want to add a new link from my browser session on my laptop, phone or tablet, or type some text on the fly from my phone, or resume working on a draft from another device, I should be able to do so with no friction, as if I were working always on the same device.&lt;/li&gt;
&lt;li&gt;It needs to work offline. I want to be able to work on a blog article while I'm on a flight with no Internet connection, and I expect the content to be automatically synced as soon as my device gets a connection.&lt;/li&gt;
&lt;li&gt;It needs to be file-based. I'm sick of custom formats, arcane APIs and other barriers and pointless abstractions between me and my text. The KISS rule applies here: if it's a text file, and it appears on my machine inside a normal directory, then expose it as a text file, and you'll get primitives such as read/create/modify/copy/move/delete for free.&lt;/li&gt;
&lt;li&gt;It needs to encapsulate some good web scraping/parsing logic, so every web page can be distilled into a readable and easily exportable Markdown format.&lt;/li&gt;
&lt;li&gt;It needs to allow automated routines - for instance, automatically fetch new content from an RSS feed and download it in readable format on the shared repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It looks like a long shopping list, but it actually doesn't take that much to implement it. It's time to get to the whiteboard and design its architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlevel-architecture"&gt;
  &lt;/a&gt;
  High-level architecture
&lt;/h2&gt;

&lt;p&gt;From a high-level perspective, the architecture we are trying to build resembles something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4RH_aazr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/self-hosted-notebook-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4RH_aazr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/self-hosted-notebook-architecture.png" alt="High-level architecture" width="880" height="1161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-git-repository"&gt;
  &lt;/a&gt;
  The git repository
&lt;/h2&gt;

&lt;p&gt;We basically use a git server as the repository for our notes and links. It could be a private repo on GitHub or Gitlab, or even a static folder initialized as a git repo on a server accessible over SSH. There are many advantages in choosing a versioning system like git as the source of truth for your notebook content:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;History tracking&lt;/em&gt; comes for free: it's easy to keep track of changes commit by different devices, as well as rollback to previous versions - nothing is ever really lost.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Easy synchronization&lt;/em&gt;: pushing new content to your notes can be mapped to a &lt;code&gt;git push&lt;/code&gt;, synchronizing new content on other devices can be mapped to a &lt;code&gt;git pull&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Native Markdown-friendly interfaces&lt;/em&gt;: both GitHub and Gitlab provide native good interfaces to visualize Markdown content. Browsing and managing your notebook is as easy as browsing a git repo.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Easy to import and export&lt;/em&gt;: exporting your notebook to another device is as simple as running a &lt;code&gt;git clone&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Storage flexibility&lt;/em&gt;: you can create the repo on a cloud instance, on a self-hosted instance, or on any machine with an SSH interface. The repo can live anywhere, as long as it is accessible to the devices that you want to use.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So the first requirement for this project is to set up a git repository on whatever source you want to use a central storage for your notebook. We have mainly three options for this:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-a-new-repo-on-a-githubgitlab-cloud-instance"&gt;
  &lt;/a&gt;
  Create a new repo on a GitHub/Gitlab cloud instance.
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Pros&lt;/em&gt;: you don't have to maintain a git server, you just have to create a new project, and you have all the fancy interfaces for managing files and viewing Markdown content.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Cons&lt;/em&gt;: it's not really 100% self-hosted, isn't it? :)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#host-a-gitlab-instance-yourself"&gt;
  &lt;/a&gt;
  Host a Gitlab instance yourself.
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Pros&lt;/em&gt;: plenty of flexibility when it comes to hosting. You can even run the server on a machine only accessible from the outside over a VPN, which brings some nice security features and content encapsulation. Plus, you have a modern interface like Gitlab to handle your files, and you can also easily set up repository automation through web hooks.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Cons&lt;/em&gt;: installing and running a Gitlab instance is a process with its own learning curve. Plus, a Gitlab instance is usually quite resource-hungry - don't run it on a Raspberry Pi if you want the user experience to be smooth.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#initialize-an-empty-repository-on-any-publicly-accessible-server-or-accessible-over-vpn-with-an-ssh-interface"&gt;
  &lt;/a&gt;
  Initialize an empty repository on any publicly accessible server (or accessible over VPN) with an SSH interface.
&lt;/h4&gt;

&lt;p&gt;An often forgotten feature of git is that it's basically a wrapper on top of SSH, therefore you can create a repo on the fly on any machine that runs an SSH server - no need for a full-blown web framework on top of it. It's as simple as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Server machine&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/user/notebook.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/user/notebook.git
&lt;span class="nv"&gt;$ &lt;/span&gt;git init &lt;span class="nt"&gt;--bare&lt;/span&gt;

&lt;span class="c"&gt;# Client machine&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone user@remote-machine:/home/user/notebook.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Pros&lt;/em&gt;: the most flexible option: you can run your notebook storage on literally anything that has a CPU, an SSH interface and git.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Cons&lt;/em&gt;: you won't have a fancy native interface to manage your files, nor repository automation features such as actions or web hooks (available with GitHub and Gitlab respectively).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-markdown-web-server"&gt;
  &lt;/a&gt;
  The Markdown web server
&lt;/h2&gt;

&lt;p&gt;It may be handy to have a web server to access your notes and links from any browser, especially if your repository doesn't live on GitHub/Gitlab, and therefore it doesn't have a native way to expose the files over the web.&lt;/p&gt;

&lt;p&gt;Clone the notebook repo on the machine where you want to expose the Markdown web server and then install &lt;a href="https://github.com/DannyBen/madness"&gt;Madness&lt;/a&gt; and its dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;ruby-full
&lt;span class="nv"&gt;$ &lt;/span&gt;gem &lt;span class="nb"&gt;install &lt;/span&gt;madness
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take note of where the &lt;code&gt;madness&lt;/code&gt; executable was installed and create a new user systemd service file under &lt;code&gt;~/.config/systemd/user/madness.service&lt;/code&gt; to manage the server on your repo folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[Unit]&lt;/span&gt;
&lt;span class="py"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Serve Markdown content over HTML&lt;/span&gt;
&lt;span class="py"&gt;After&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network.target&lt;/span&gt;

&lt;span class="nn"&gt;[Service]&lt;/span&gt;
&lt;span class="py"&gt;ExecStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/user/.gem/ruby/version/bin/madness /path/to/the/notebook --port 9999&lt;/span&gt;
&lt;span class="py"&gt;Restart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;
&lt;span class="py"&gt;RestartSec&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;

&lt;span class="nn"&gt;[Install]&lt;/span&gt;
&lt;span class="py"&gt;WantedBy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;default.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reload the systemd daemon and start/enable the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl &lt;span class="nt"&gt;--user&lt;/span&gt; daemon-reload
&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl &lt;span class="nt"&gt;--user&lt;/span&gt; start madness
&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nb"&gt;enable &lt;/span&gt;madness
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything went well you can head your browser to &lt;code&gt;http://host:9999&lt;/code&gt; and you should see the Madness interface with your Markdown files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mC6ZsiiZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/madness-screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mC6ZsiiZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/madness-screenshot.png" alt="Madness interface screenshot" width="803" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can easily configure a &lt;a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/"&gt;nginx reverse proxy&lt;/a&gt; or an &lt;a href="https://www.ssh.com/academy/ssh/tunneling"&gt;SSH tunnel&lt;/a&gt; to expose the server outside of the local network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-mqtt-broker"&gt;
  &lt;/a&gt;
  The MQTT broker
&lt;/h2&gt;

&lt;p&gt;An MQTT broker is another crucial ingredient in this set up. It is used to asynchronously transmit events such as a request to add a new URL or update the local repository copies.&lt;/p&gt;

&lt;p&gt;Any of the open-source MQTT brokers out there should do the job. I personally use &lt;a href="https://mosquitto.org/"&gt;Mosquitto&lt;/a&gt; for most of my projects, but &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;, &lt;a href="https://github.com/moscajs/aedes"&gt;Aedes&lt;/a&gt; or any other broker should all just work.&lt;/p&gt;

&lt;p&gt;Just like the git server, you should also install the MQTT on a machine that is either publicly accessible, or it is accessible over VPN by all the devices you want to use your notebook on. If you opt for a machine with a publicly accessible IP address then it's advised to enable both SSL and username/password authentication on your broker, so unauthorized parties won't be able to connect to it.&lt;/p&gt;

&lt;p&gt;Taking the case of Mosquitto, the installation and configuration is pretty straightforward. Install the &lt;code&gt;mosquitto&lt;/code&gt; package from your favourite package manager, the installation process should also create a configuration file under &lt;code&gt;/etc/mosquitto/mosquitto.conf&lt;/code&gt;. In the case of an SSL configuration with username and password, you would usually configure the following options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# Usually 1883 for non-SSL connections, 8883 for SSL connections
&lt;/span&gt;&lt;span class="err"&gt;port&lt;/span&gt; &lt;span class="err"&gt;8883&lt;/span&gt;

&lt;span class="c"&gt;# SSL/TLS version
&lt;/span&gt;&lt;span class="err"&gt;tls_version&lt;/span&gt; &lt;span class="err"&gt;tlsv1.2&lt;/span&gt;

&lt;span class="c"&gt;# Path to the certificate chain
&lt;/span&gt;&lt;span class="err"&gt;cafile&lt;/span&gt; &lt;span class="err"&gt;/etc/mosquitto/certs/chain.crt&lt;/span&gt;

&lt;span class="c"&gt;# Path to the server certificate
&lt;/span&gt;&lt;span class="err"&gt;certfile&lt;/span&gt; &lt;span class="err"&gt;/etc/mosquitto/certs/server.crt&lt;/span&gt;

&lt;span class="c"&gt;# Path to the server private key
&lt;/span&gt;&lt;span class="err"&gt;keyfile&lt;/span&gt; &lt;span class="err"&gt;/etc/mosquitto/certs/server.key&lt;/span&gt;

&lt;span class="c"&gt;# Set to false to disable access without username and password
&lt;/span&gt;&lt;span class="err"&gt;allow_anonymous&lt;/span&gt; &lt;span class="err"&gt;false&lt;/span&gt;

&lt;span class="c"&gt;# Password file, which contains username:password pairs
# You can create and manage a password file by following the
# instructions reported here:
# https://mosquitto.org/documentation/authentication-methods/
&lt;/span&gt;&lt;span class="err"&gt;password_file&lt;/span&gt; &lt;span class="err"&gt;/etc/mosquitto/passwords.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't need SSL encryption and authentication on your broker (which is ok if you are running the broker on a private network and accessing it from the outside over VPN) then you'll only need to set the &lt;code&gt;port&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;After you have configured the MQTT broker, you can start it and enable it via &lt;code&gt;systemd&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start mosquitto
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;mosquitto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then use an MQTT client like &lt;a href="http://mqtt-explorer.com/"&gt;MQTT Explorer&lt;/a&gt; to connect to the broker and verify that everything is working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-platypush-automation"&gt;
  &lt;/a&gt;
  The Platypush automation
&lt;/h2&gt;

&lt;p&gt;Once the git repo and the MQTT broker are in place, it's time to set up Platypush on one of the machines where you want to keep your notebook synchronized - e.g. your laptop.&lt;/p&gt;

&lt;p&gt;In this context, Platypush is used to glue together the pieces of the sync automation by defining the following chains of events:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When a file system change is detected in the folder where the notebook is cloned (for example because a note was added, removed or edited), start a timer than within e.g. 30 seconds synchronizes the changes to the git repository (the timer is used to throttle the frequency of update events). Then send a message to the MQTT &lt;code&gt;notebook/sync&lt;/code&gt; topic to tell the other clients that they should synchronize their copies of the repository.&lt;/li&gt;
&lt;li&gt;When a client receives a message on &lt;code&gt;notebook/sync&lt;/code&gt;, and the originator is different from the client itself (this is necessary in order to prevent "sync loops"), pull the latest changes from the remote repository.&lt;/li&gt;
&lt;li&gt;When a specific client (which will be in charge of scraping URLs and adding new remote content) receives a message on the MQTT &lt;code&gt;notebook/save&lt;/code&gt; topic with a URL attached, the content of the associated web page will be parsed and saved to the notebook ("Save URL" feature).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The same automation logic can be set up on as many clients as you like.&lt;/p&gt;

&lt;p&gt;The first step is to install the Redis server and Platypush on your client machine. For example, on a Debian-based system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install Redis&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;redis-server
&lt;span class="c"&gt;# Start and enable the Redis server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start redis-server
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;redis-server
&lt;span class="c"&gt;# Install Platypush&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;platypush
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll then have to create a configuration file to tell Platypush which services you want to use. Our use-case will require the following integrations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;mqtt&lt;/code&gt; (&lt;a href="https://docs.platypush.tech/platypush/backend/mqtt.html"&gt;backend&lt;/a&gt; and &lt;a href="https://docs.platypush.tech/platypush/plugins/mqtt.html"&gt;plugin&lt;/a&gt;), used to subscribe to sync/save topics and dispatch messages to the broker.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.platypush.tech/platypush/backend/file.monitor.html"&gt;&lt;code&gt;file.monitor&lt;/code&gt; backend&lt;/a&gt;, used to monitor changes to local folders.&lt;/li&gt;
&lt;li&gt;[Optional] &lt;a href="https://docs.platypush.tech/platypush/plugins/pushbullet.html"&gt;&lt;code&gt;pushbullet&lt;/code&gt;&lt;/a&gt;, or an alternative way to deliver notifications to other devices (such as &lt;a href="https://docs.platypush.tech/platypush/plugins/chat.telegram.html"&gt;&lt;code&gt;telegram&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.platypush.tech/platypush/plugins/twilio.html"&gt;&lt;code&gt;twilio&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.platypush.tech/platypush/plugins/gotify.html"&gt;&lt;code&gt;gotify&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.platypush.tech/platypush/plugins/mailgun.html"&gt;&lt;code&gt;mailgun&lt;/code&gt;&lt;/a&gt;). We'll use this to notify other clients when new content has been added.&lt;/li&gt;
&lt;li&gt;[Optional] the &lt;a href="https://docs.platypush.tech/platypush/plugins/http.webpage.html"&gt;&lt;code&gt;http.webpage&lt;/code&gt;&lt;/a&gt; integration, used to scrape a web page's content to Markdown or PDF.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start by creating a &lt;code&gt;config.yaml&lt;/code&gt; file with your integrations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# The name of your client&lt;/span&gt;
&lt;span class="na"&gt;device_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-client&lt;/span&gt;

&lt;span class="na"&gt;mqtt&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;your-mqtt-server&lt;/span&gt;
  &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1883&lt;/span&gt;
  &lt;span class="c1"&gt;# Uncomment the lines below for SSL/user+password authentication&lt;/span&gt;
  &lt;span class="c1"&gt;# port: 8883&lt;/span&gt;
  &lt;span class="c1"&gt;# username: user&lt;/span&gt;
  &lt;span class="c1"&gt;# password: pass&lt;/span&gt;
  &lt;span class="c1"&gt;# tls_cafile: ~/path/to/ssl.crt&lt;/span&gt;
  &lt;span class="c1"&gt;# tls_version: tlsv1.2&lt;/span&gt;

&lt;span class="c1"&gt;# Specify the topics you want to subscribe here&lt;/span&gt;
&lt;span class="na"&gt;backend.mqtt&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;listeners&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;topics&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;notebook/sync&lt;/span&gt;

&lt;span class="c1"&gt;# The configuration for the file monitor follows.&lt;/span&gt;
&lt;span class="c1"&gt;# This logic triggers FileSystemEvents whenever a change&lt;/span&gt;
&lt;span class="c1"&gt;# happens on the specified folder. We can use these events&lt;/span&gt;
&lt;span class="c1"&gt;# to build our sync logic&lt;/span&gt;
&lt;span class="na"&gt;backend.file.monitor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Path to the folder where you have cloned the notebook&lt;/span&gt;
    &lt;span class="c1"&gt;# git repo on your client&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/path/to/the/notebook&lt;/span&gt;
      &lt;span class="na"&gt;recursive&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="c1"&gt;# Ignore changes on non-content sub-folders, such as .git or&lt;/span&gt;
      &lt;span class="c1"&gt;# other configuration/cache folders&lt;/span&gt;
      &lt;span class="na"&gt;ignore_directories&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.git&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.obsidian&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then generate a new Platypush virtual environment from the configuration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;platyvenv build &lt;span class="nt"&gt;-c&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the command has run, it should report a line like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Platypush virtual environment prepared under /home/user/.local/share/platypush/venv/my-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's call this path &lt;code&gt;$PREFIX&lt;/code&gt;. Create a structure to store your scripts under &lt;code&gt;$PREFIX/etc/platypush&lt;/code&gt; (a copy of the&lt;br&gt;
&lt;code&gt;config.yaml&lt;/code&gt; file should already be there at this point). The structure will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;$&lt;span class="n"&gt;PREFIX&lt;/span&gt;
 -&amp;gt; &lt;span class="n"&gt;etc&lt;/span&gt;
   -&amp;gt; &lt;span class="n"&gt;platypush&lt;/span&gt;
    -&amp;gt; &lt;span class="n"&gt;config&lt;/span&gt;.&lt;span class="n"&gt;yaml&lt;/span&gt;      &lt;span class="c"&gt;# Configuration file
&lt;/span&gt;    -&amp;gt; &lt;span class="n"&gt;scripts&lt;/span&gt;          &lt;span class="c"&gt;# Scripts folder
&lt;/span&gt;      -&amp;gt; &lt;span class="err"&gt;__&lt;/span&gt;&lt;span class="n"&gt;init__&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt;    &lt;span class="c"&gt;# Empty file
&lt;/span&gt;      -&amp;gt; &lt;span class="n"&gt;notebook&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt;    &lt;span class="c"&gt;# Logic for notebook synchronization
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's proceed with defining the core logic in &lt;code&gt;notebook.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.event.hook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.message.event.file&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileSystemEvent&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.message.event.mqtt&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MQTTMessageEvent&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.procedure&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;procedure&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'notebook'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;repo_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/path/to/your/git/repo'&lt;/span&gt;

&lt;span class="n"&gt;sync_timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;sync_timer_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;should_sync_notebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MQTTMessageEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Only synchronize the notebook if a sync request came from
    a source other than ourselves - this is required to prevent
    "sync loops", where a client receives its own sync message
    and broadcasts sync requests again and again.
    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'device_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'origin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cancel_sync_timer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Utility function to cancel a pending synchronization timer.
    """&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;sync_timer&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sync_timer_lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sync_timer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sync_timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;sync_timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset_sync_timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Utility function to start a synchronization timer.
    """&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;sync_timer&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sync_timer_lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cancel_sync_timer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sync_timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sync_notebook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="n"&gt;sync_timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MQTTMessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'notebook/sync'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_notebook_remote_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This hook is triggered when a message is received on the
    notebook/sync MQTT topic. It triggers a sync between the
    local and remote copies of the repository.
    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;should_sync_notebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;sync_notebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileSystemEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_notebook_local_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This hook is triggered when a change (i.e. file/directory
    create/update/delete) is performed on the folder where the
    repository is cloned. It starts a timer to synchronize the
    local and remote repository copies.
    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Synchronizing repo path &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reset_sync_timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;procedure&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sync_notebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This function holds the main synchronization logic.
    It is declared through the @procedure decorator, so you can also
    programmatically call it from your requests through e.g.
    `procedure.notebook.sync_notebook`.
    """&lt;/span&gt;
    &lt;span class="c1"&gt;# The timer lock ensures that only one thread at the time can
&lt;/span&gt;    &lt;span class="c1"&gt;# synchronize the notebook
&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sync_timer_lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Cancel any previously awaiting timer
&lt;/span&gt;        &lt;span class="n"&gt;cancel_sync_timer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Synchronizing notebook - path: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;has_stashed_changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Check if the local copy of the repo has changes
&lt;/span&gt;            &lt;span class="n"&gt;git_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'git status --porcelain'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;git_status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'The local copy has changes: synchronizing them to the repo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="c1"&gt;# If we have modified/deleted files then we stash the local changes
&lt;/span&gt;                &lt;span class="c1"&gt;# before pulling the remote changes to prevent conflicts
&lt;/span&gt;                &lt;span class="n"&gt;has_modifications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\s*[MD]\s+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;git_status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_modifications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'git stash'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignore_errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="n"&gt;has_stashed_changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

                &lt;span class="c1"&gt;# Pull the latest changes from the repo
&lt;/span&gt;                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'git pull --rebase'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_modifications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# Un-stash the local changes
&lt;/span&gt;                    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'git stash pop'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

                &lt;span class="c1"&gt;# Add, commit and push the local changes
&lt;/span&gt;                &lt;span class="n"&gt;has_stashed_changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="n"&gt;device_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'device_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'git add .'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'git commit -a -m "Automatic sync triggered by &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;device_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'git push origin main'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

                &lt;span class="c1"&gt;# Notify other clients by pushing a message to the notebook/sync topic
&lt;/span&gt;                &lt;span class="c1"&gt;# having this client ID as the origin. As an alternative, if you are using
&lt;/span&gt;                &lt;span class="c1"&gt;# Gitlab to host your repo, you can also configure a webhook that is called
&lt;/span&gt;                &lt;span class="c1"&gt;# upon push events and sends the same message to notebook/sync.
&lt;/span&gt;                &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mqtt.publish'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'notebook/sync'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'origin'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'device_id'&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# If we have no local changes, just pull the remote changes
&lt;/span&gt;                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'git pull'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_stashed_changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'git stash pop'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;# In case of errors, retry in 5 minutes
&lt;/span&gt;            &lt;span class="n"&gt;reset_sync_timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Notebook synchronized'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can start the newly configured environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;platyvenv start my-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or create a systemd user service for it under &lt;code&gt;~/.config/systemd/user/platypush-notebook.service&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt; &amp;gt; ~/.config/systemd/user/platypush-notebook.service
[Unit]
Description=Platypush notebook automation
After=network.target

[Service]
ExecStart=/path/to/platyvenv start my-client
ExecStop=/path/to/platyvenv stop my-client
Restart=always
RestartSec=10

[Install]
WantedBy=default.target
&lt;/span&gt;&lt;span class="no"&gt;EOF

&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl &lt;span class="nt"&gt;--user&lt;/span&gt; daemon-reload
&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl &lt;span class="nt"&gt;--user&lt;/span&gt; start platypush-notebook
&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nb"&gt;enable &lt;/span&gt;platypush-notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While the service is running, try and create a new Markdown file under the monitored repository local copy. Within a few seconds the automation should be triggered and the new file should be automatically pushed to the repo. If you are running the code on multiple hosts, then those should also fetch the updates within seconds. You can also run an instance on the same server that runs Madness to synchronize its copy of the repo, and your web instance will remain in sync with any updates. Congratulations, you have set up a distributed network to synchronize your notes!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#android-setup"&gt;
  &lt;/a&gt;
  Android setup
&lt;/h2&gt;

&lt;p&gt;You may probably want a way to access your notebook also on your phone and tablet, and keep the copy on your mobile devices automatically in sync with the server.&lt;/p&gt;

&lt;p&gt;Luckily, it is possible to install and run Platypush on Android through &lt;a href="https://termux.com/"&gt;&lt;code&gt;Termux&lt;/code&gt;&lt;/a&gt;, and the logic you have set up on your laptops and servers should also work flawlessly on Android. Termux allows you to run a Linux environment in user mode with no need for rooting your device.&lt;/p&gt;

&lt;p&gt;First, install the &lt;a href="https://f-droid.org/packages/com.termux/"&gt;&lt;code&gt;Termux&lt;/code&gt; app&lt;/a&gt; on your Android device. Optionally, you may also want to install the following apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://f-droid.org/en/packages/com.termux.api/"&gt;&lt;code&gt;Termux:API&lt;/code&gt;&lt;/a&gt;: to programmatically access Android features (e.g. SMS texts, camera, GPS, battery level etc.) from your scripts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://f-droid.org/en/packages/com.termux.boot/"&gt;&lt;code&gt;Termux:Boot&lt;/code&gt;&lt;/a&gt;: to start services such as Redis and Platypush at boot time without having to open the Termux app first (advised).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://f-droid.org/en/packages/com.termux.widget/"&gt;&lt;code&gt;Termux:Widget&lt;/code&gt;&lt;/a&gt;: to add scripts (for example to manually start Platypush or synchronize the notebook) on the home screen.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://f-droid.org/en/packages/com.termux.gui/"&gt;&lt;code&gt;Termux:GUI&lt;/code&gt;&lt;/a&gt;: to add support for visual elements (such as dialogs and widgets for sharing content) to your scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After installing Termux, open a new session, update the packages, install &lt;code&gt;termux-services&lt;/code&gt; (for services support) and enable SSH access (it's usually more handy to type commands on a physical keyboard than a phone screen):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pkg update
&lt;span class="nv"&gt;$ &lt;/span&gt;pkg &lt;span class="nb"&gt;install &lt;/span&gt;termux-services openssh
&lt;span class="c"&gt;# Start and enable the SSH service&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sv up sshd
&lt;span class="nv"&gt;$ &lt;/span&gt;sv-enable sshd
&lt;span class="c"&gt;# Set a user password&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;passwd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A service that is enabled through &lt;code&gt;sv-enable&lt;/code&gt; will be started when a Termux session is first opened, but not at boot time unless Termux is started. If you want a service to be started a boot time, you need to install the &lt;code&gt;Termux:Boot&lt;/code&gt; app and then place the scripts you want to run at boot time inside the &lt;code&gt;~/.termux/boot&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;After starting &lt;code&gt;sshd&lt;/code&gt; and setting a password, you should be able to log in to your Android device over SSH:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-p&lt;/span&gt; 8022 anyuser@android-device
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to enable access for Termux to the internal storage (by default it can only access the app's own data folder). This can easily be done by running &lt;code&gt;termux-setup-storage&lt;/code&gt; and allowing storage access on the prompt. We may also want to disable battery optimization for Termux, so the services won't be killed in case of inactivity.&lt;/p&gt;

&lt;p&gt;Then install git, Redis, Platypush and its Python dependencies, and start/enable the Redis server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pkg &lt;span class="nb"&gt;install &lt;/span&gt;git redis python3
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;platypush
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If running the &lt;code&gt;redis-server&lt;/code&gt; command results in an error, then you may need to explicitly disable a warning for a COW bug for ARM64 architectures in the Redis configuration file. Simply add or uncomment the following line in &lt;code&gt;/data/data/com.termux/files/usr/etc/redis.conf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ignore-warnings ARM64-COW-BUG
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then need to create a service for Redis, since it's not available by default. Termux doesn't use systemd to manage services, since that would require access to the PID 1, which is only available to the root user. Instead, it uses it own system of scripts that goes under the name of &lt;a href="https://wiki.termux.com/wiki/Termux-services"&gt;&lt;em&gt;Termux services&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Services are installed under &lt;code&gt;/data/data/com.termux/files/usr/var/service&lt;/code&gt;. Just &lt;code&gt;cd&lt;/code&gt; to that directory and copy the available &lt;code&gt;sshd&lt;/code&gt; service to &lt;code&gt;redis&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /data/data/com.termux/files/usr/var/service
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; sshd redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then replace the content of the &lt;code&gt;run&lt;/code&gt; file in the service directory with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/data/data/com.termux/files/usr/bin/sh&lt;/span&gt;
&lt;span class="nb"&gt;exec &lt;/span&gt;redis-server 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then restart Termux so that it refreshes its list of services, and start/enable the Redis service (or create a boot script for it):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sv up redis
&lt;span class="nv"&gt;$ &lt;/span&gt;sv-enable redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify that you can access the &lt;code&gt;/sdcard&lt;/code&gt; folder (shared storage) after restarting Termux. If that's the case, we can now clone the notebook repo under &lt;code&gt;/sdcard/notebook&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git-url /sdcard/notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The steps for installing and configuring the Platypush automation are the same shown in the previous section, with the following exceptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;repo_path&lt;/code&gt; in the &lt;code&gt;notebook.py&lt;/code&gt; script needs to point to &lt;code&gt;/sdcard/notebook&lt;/code&gt; - if the notebook is cloned on the user's home directory then other apps won't be able to access it.&lt;/li&gt;
&lt;li&gt;If you want to run it in a service, you'll have to follow the same steps illustrated for Redis instead of creating a systemd service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may also want to redirect the Platypush stdout/stderr to a log file, since Termux messages don't have the same sophisticated level of logging provided by systemd. The startup command should therefore look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;platyvenv start my-client &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /path/to/logs/platypush.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once everything is configured and you restart Termux, Platypush should automatically start in the background - you can check the status by running a &lt;code&gt;tail&lt;/code&gt; on the log file or through the &lt;code&gt;ps&lt;/code&gt; command. If you change a file in your notebook on either your Android device or your laptop, everything should now get up to date within a minute.&lt;/p&gt;

&lt;p&gt;Finally, we can also leverage &lt;code&gt;Termux:Shortcuts&lt;/code&gt; to add a widget to the home screen to manually trigger the sync process - maybe because an update was received while the phone was off or the Platypush service was not running. Create a &lt;code&gt;~/.shortcuts&lt;/code&gt; folder with a script inside named e.g. &lt;code&gt;sync_notebook.sh&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/data/data/com.termux/files/usr/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt; | python
from platypush.utils import run

run('mqtt.publish', topic='notebook/sync', msg={'origin': None})
&lt;/span&gt;&lt;span class="no"&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script leverages the &lt;code&gt;platypush.utils.run&lt;/code&gt; method to send a message to the &lt;code&gt;notebook/sync&lt;/code&gt; MQTT topic with no &lt;code&gt;origin&lt;/code&gt; to force all the subscribed clients to pull the latest updates from the remote server.&lt;/p&gt;

&lt;p&gt;You can now browse to the widgets' menu of your Android device (usually it's done by long-pressing an empty area on the launcher), select &lt;em&gt;Termux shortcut&lt;/em&gt; and then select your newly created script. By clicking on the icon you will force a sync across all the connected devices.&lt;/p&gt;

&lt;p&gt;Once Termux is properly configured, you don't need to repeat the whole procedure on other Android devices. Simply use the &lt;a href="https://wiki.termux.com/wiki/Backing_up_Termux"&gt;Termux backup&lt;/a&gt; scripts to back up your whole configuration and copy it/restore it on another device, and you'll have the whole synchronization logic up and running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-obsidian-app"&gt;
  &lt;/a&gt;
  The Obsidian app
&lt;/h2&gt;

&lt;p&gt;Now that the backend synchronization logic is in place, it's time to move to the frontend side. As mentioned earlier, Obsidian is an option I really like - it has a modern interface, it's cross-platform, it's &lt;a href="https://www.electronjs.org/"&gt;electronjs-based&lt;/a&gt;, it has many plugins, it relies on simple Markdown, and it just needs a local folder to work. As mentioned earlier, you would normally need to subscribe to Obsidian Sync in order to synchronize notes across devices, but now you've got a self-synchronizing git repo copy on any device you like. So just install Obsidian on your computer or mobile, point it to the local copy of the git notebook, and you're set to go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--docQG3no--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/obsidian-screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--docQG3no--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/obsidian-screenshot.png" alt="Obsidian screenshot" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nextcloud-option"&gt;
  &lt;/a&gt;
  The NextCloud option
&lt;/h2&gt;

&lt;p&gt;Another nice option is to synchronize your notebook across multiple devices is to use a &lt;a href="https://nextcloud.com/"&gt;NextCloud&lt;/a&gt; instance. NextCloud provides a &lt;a href="https://apps.nextcloud.com/apps/notes"&gt;Notes app&lt;/a&gt; that already supports notes in Markdown format, and it also comes with an &lt;a href="https://f-droid.org/en/packages/it.niedermann.owncloud.notes/"&gt;Android app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If that's the way you want to go, you can still have notes&amp;lt;-&amp;gt;git synchronization by simply setting up the Platypush notebook automation on the server where NextCloud is running. Just clone the repository to your NextCloud Notes folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git-url /path/to/nextcloud/data/user/files/Notes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then set the &lt;code&gt;repo_path&lt;/code&gt; in &lt;code&gt;notebook.py&lt;/code&gt; to this directory.&lt;/p&gt;

&lt;p&gt;Keep in mind however that local changes in the &lt;code&gt;Notes&lt;/code&gt; folder will not be synchronized to the NextCloud app until the next cron is executed. If you want the changes to be propagated as soon as they are pushed to the git repo, then you'll have to add an extra piece of logic to the script that synchronizes the notebook, in order to rescan the &lt;code&gt;Notes&lt;/code&gt; folder for changes. Also, Platypush will have to run with the same user that runs the NextCloud web server, because of the requirements for executing the &lt;code&gt;occ&lt;/code&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'notebook'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Path to the NextCloud occ script
&lt;/span&gt;&lt;span class="n"&gt;occ_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/srv/http/nextcloud/occ'&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sync_notebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;refresh_nextcloud&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;refresh_nextcloud&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'php &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;occ_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; files:scan --path=/nextcloud-user/files/Notes'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'shell.exec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'php &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;occ_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; files:cleanup'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your notebook is now synchronized with NextCloud, and it can be accessed from any NextCloud client!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automation-to-parse-and-save-web-pages"&gt;
  &lt;/a&gt;
  Automation to parse and save web pages
&lt;/h2&gt;

&lt;p&gt;Now that we have a way to keep our notes synchronized across multiple devices and interfaces, let's explore how we can parse web pages and save them in our notebook in Markdown format - we may want to read them later on another device, read the content without all the clutter, or just keep a persistent track of the articles that we have read.&lt;/p&gt;

&lt;p&gt;Elect a notebook client to be in charge of scraping and saving URLs. This client will have a configuration like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# The name of your client&lt;/span&gt;
&lt;span class="na"&gt;device_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-client&lt;/span&gt;

&lt;span class="na"&gt;mqtt&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;your-mqtt-server&lt;/span&gt;
  &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1883&lt;/span&gt;
  &lt;span class="c1"&gt;# Uncomment the lines below for SSL/user+password authentication&lt;/span&gt;
  &lt;span class="c1"&gt;# port: 8883&lt;/span&gt;
  &lt;span class="c1"&gt;# username: user&lt;/span&gt;
  &lt;span class="c1"&gt;# password: pass&lt;/span&gt;
  &lt;span class="c1"&gt;# tls_cafile: ~/path/to/ssl.crt&lt;/span&gt;
  &lt;span class="c1"&gt;# tls_version: tlsv1.2&lt;/span&gt;

&lt;span class="c1"&gt;# Specify the topics you want to subscribe here&lt;/span&gt;
&lt;span class="na"&gt;backend.mqtt&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;listeners&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;topics&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;notebook/sync&lt;/span&gt;
       &lt;span class="c1"&gt;# notebook/save will be used to send parsing requests&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;notebook/save&lt;/span&gt;

&lt;span class="c1"&gt;# Monitor the local repository copy for changes&lt;/span&gt;
&lt;span class="na"&gt;backend.file.monitor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Path to the folder where you have cloned the notebook&lt;/span&gt;
    &lt;span class="c1"&gt;# git repo on your client&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/path/to/the/notebook&lt;/span&gt;
      &lt;span class="na"&gt;recursive&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="c1"&gt;# Ignore changes on non-content sub-folders, such as .git or&lt;/span&gt;
      &lt;span class="c1"&gt;# other configuration/cache folders&lt;/span&gt;
      &lt;span class="na"&gt;ignore_directories&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.git&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.obsidian&lt;/span&gt;

&lt;span class="c1"&gt;# Enable the http.webpage integration for parsing web pages&lt;/span&gt;
&lt;span class="na"&gt;http.webpage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# We will use Pushbullet to send a link to all the connected devices&lt;/span&gt;
&lt;span class="c1"&gt;# with the URL of the newly saved link, but you can use any other&lt;/span&gt;
&lt;span class="c1"&gt;# services for delivering notifications and/or messages - such as&lt;/span&gt;
&lt;span class="c1"&gt;# Gotify, Twilio, Telegram or any email integration&lt;/span&gt;
&lt;span class="na"&gt;backend.pushbullet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-token&lt;/span&gt;
  &lt;span class="na"&gt;device&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-client&lt;/span&gt;

&lt;span class="na"&gt;pushbullet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build an environment from this configuration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;platyvenv build &lt;span class="nt"&gt;-c&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure that at the end of the process you have the &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; executables installed - the &lt;code&gt;http.webpage&lt;/code&gt; integration uses the &lt;a href="https://github.com/postlight/mercury-parser"&gt;Mercury Parser&lt;/a&gt; API to convert web pages to Markdown.&lt;/p&gt;

&lt;p&gt;Then copy the previously created &lt;code&gt;scripts&lt;/code&gt; folder under &lt;code&gt;&amp;lt;environment-base-dir&amp;gt;/etc/platypush/scripts&lt;/code&gt;. We now want to add a new script (let's name it e.g. &lt;code&gt;webpage.py&lt;/code&gt;) that is in charge of subscribing to new messages on &lt;code&gt;notebook/save&lt;/code&gt; and use the &lt;code&gt;http.webpage&lt;/code&gt; integration to save its content in Markdown format in the repository folder. Once the parsed file is in the right directory, the previously created automation will take care of synchronizing it to the git repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.event.hook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.message.event.mqtt&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MQTTMessageEvent&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.procedure&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;procedure&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'notebook'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;repo_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/path/to/your/notebook/repo'&lt;/span&gt;
&lt;span class="c1"&gt;# Base URL for your Madness Markdown instance
&lt;/span&gt;&lt;span class="n"&gt;markdown_base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://my-host/'&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MQTTMessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'notebook/save'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_notebook_url_save_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Subscribe to new messages on the notebook/save topic.
    Such messages can contain either a URL to parse, or a
    note to create - with specified content and title.
    """&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;save_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;procedure&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Please specify either a URL or some Markdown content'&lt;/span&gt;

    &lt;span class="c1"&gt;# Create a temporary file for the Markdown content
&lt;/span&gt;    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'.md'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Parsing URL &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Parse the webpage to Markdown to the temporary file
&lt;/span&gt;        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http.webpage.simplify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Sanitize title and filename
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Note created at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Download the Markdown file to the repo
&lt;/span&gt;    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'[^a-zA-Z0-9 \-_+,.]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'.md'&lt;/span&gt;
    &lt;span class="n"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0o660&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'URL &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; successfully downloaded to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Send the URL
&lt;/span&gt;    &lt;span class="n"&gt;link_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;markdown_base_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'pushbullet.send_note'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;link_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have a service that can listen for messages delivered on &lt;code&gt;notebook/save&lt;/code&gt;. If the message contains some Markdown content, it will directly save it to the notebook. If it contains a URL, it will use the &lt;code&gt;http.webpage&lt;/code&gt; integration to parse the web page and save it to the notebook. What we need now is a way to easily send messages to this channel while we are browsing the web. A common use-case is the one where you are reading an article on your browser (either on a computer or a mobile device) and you want to save it to your notebook to read it later through a mechanism similar to the familiar &lt;em&gt;Share&lt;/em&gt; button. Let's break down this use-case in two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The desktop (or laptop) case&lt;/li&gt;
&lt;li&gt;The mobile case&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sharing-links-from-the-desktop"&gt;
  &lt;/a&gt;
  Sharing links from the desktop
&lt;/h3&gt;

&lt;p&gt;If you are reading an article on your personal computer and you want to save it to your notebook (for example to read it later on your mobile) then you can use the &lt;a href="https://git.platypush.tech/platypush/platypush-webext"&gt;Platypush browser extension&lt;/a&gt; to create a simple action that sends your current tab to the &lt;code&gt;notebook/save&lt;/code&gt; MQTT channel.&lt;/p&gt;

&lt;p&gt;Download the extension on your browser (&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/platypush/"&gt;Firefox version&lt;/a&gt;, &lt;a href="https://chrome.google.com/webstore/detail/platypush/aphldjclndofhflbbdnmpejbjgomkbie"&gt;Chrome version&lt;/a&gt;) - more information about the Platypush browser extension is available in a &lt;a href="https://blog.platypush.tech/article/One-browser-extension-to-rule-them-all"&gt;previous article&lt;/a&gt;. Then, click on the extension icon in the browser and add a new connection to a Platypush host - it could either be your own machine or any of the notebook clients you have configured.&lt;/p&gt;

&lt;p&gt;Side note: the extension only works if the target Platypush machine has &lt;code&gt;backend.http&lt;/code&gt; (i.e. the web server) enabled, as it is used to dispatch messages over the Platypush API. This wasn't required by the previous set up, but you can now select one of the devices to expose a web server by simply adding a &lt;code&gt;backend.http&lt;/code&gt; section to the configuration file and setting &lt;code&gt;enabled: True&lt;/code&gt; (by default the web server will listen on the port 8008).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RiAH_pzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/extension-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RiAH_pzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/extension-2.png" alt="Platypush web extension first screen" width="533" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-8pBQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/extension-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-8pBQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/extension-3.png" alt="Platypush web extension second screen" width="647" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then from the extension configuration panel select your host -&amp;gt; Run Action. Wait for the autocomplete bar to populate (it may take a while the first time, since it has to inspect all the methods in all the enabled packages) and then create a new &lt;code&gt;mqtt.publish&lt;/code&gt; action that sends a message with the current URL over the &lt;code&gt;notebook/save&lt;/code&gt; channel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzHZ8y2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/self-hosted-notebook-extension-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzHZ8y2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.platypush.tech/img/self-hosted-notebook-extension-1.png" alt="URL save extension action" width="681" height="287"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;em&gt;Save Action&lt;/em&gt; button at the bottom of the page, give your action a name and, optionally, an icon, a color and a set of tags. You can also select a keybinding between Ctrl+Alt+0 and Ctrl+Alt+9 to automatically run your action without having to grab the mouse.&lt;/p&gt;

&lt;p&gt;Now browse to any web page that you want to save, run the action (either by clicking on the extension icon and selecting it or through the keyboard shortcut) and wait a couple of seconds. You should soon receive a Pushbullet notification with a link to the parsed content and the repo should get updated as well on all of your devices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sharing-links-from-mobile-devices"&gt;
  &lt;/a&gt;
  Sharing links from mobile devices
&lt;/h3&gt;

&lt;p&gt;An easy way to share links to your notebook through an Android device is to leverage &lt;a href="https://tasker.joaoapps.com/"&gt;Tasker&lt;/a&gt; with the &lt;a href="https://joaoapps.com/autoshare/what-it-is/"&gt;AutoShare&lt;/a&gt; plugin, and choose an app like &lt;a href="https://play.google.com/store/apps/details?id=in.dc297.mqttclpro"&gt;MQTT Client&lt;/a&gt; that comes with a Tasker integration. You may then create a new AutoShare intent named e.g. &lt;em&gt;Save URL&lt;/em&gt;, create a Tasker task associated to it that uses the MQTT Client integration to send the message with the URL to the right MQTT topic. When you are browsing a web page that you'd like to save then you simply click on the &lt;em&gt;Share&lt;/em&gt; button and select &lt;em&gt;AutoShare Command&lt;/em&gt; in the popup window, then select the action you have created.&lt;/p&gt;

&lt;p&gt;However, even though I really appreciate the features provided by Tasker, its ecosystem and the developer behind it (I have been using it for more than 10 years), I am on a path of moving more and more of my automation away from it. Firstly, because it's a paid app with paid services, and the whole point of setting up this whole automation is to have the same quality of a paid service without having to pay for - we host it, we own it. Secondly, it's not an open-source app, and it's notably tricky to migrate configurations across devices.&lt;/p&gt;

&lt;p&gt;Termux also provides a mechanism for &lt;a href="https://wiki.termux.com/wiki/Intents_and_Hooks"&gt;intents and hooks&lt;/a&gt;, and we can easily create a sharing intent for the notebook by creating a script under &lt;code&gt;~/bin/termux-url-opener&lt;/code&gt;. Make sure that the binary file is executable and that you have &lt;code&gt;Termux:GUI&lt;/code&gt; installed for support for visual widgets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/data/data/com.termux/files/usr/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# termux-dialog-radio show a list of mutually exclusive options and returns&lt;/span&gt;
&lt;span class="c"&gt;# the selection in JSON format. The options need to be provided over the -v&lt;/span&gt;
&lt;span class="c"&gt;# argument and they are comma-separated&lt;/span&gt;
&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;termux-dialog radio &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="s1"&gt;'Select an option'&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="s1"&gt;'Save URL,some,other,options'&lt;/span&gt; | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s1"&gt;'.text'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$action&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="s1"&gt;'Save URL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt; | python
from platypush.utils import run

run('mqtt.publish', topic='notebook/save', msg={'url': '&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="sh"&gt;'})
&lt;/span&gt;&lt;span class="no"&gt;EOF
&lt;/span&gt;      &lt;span class="p"&gt;;;&lt;/span&gt;

    &lt;span class="c"&gt;# You can add some other actions here&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now browse to a page that you want to save from your mobile device, tap the &lt;em&gt;Share&lt;/em&gt; button, select &lt;em&gt;Termux&lt;/em&gt; and select the &lt;em&gt;Save URL&lt;/em&gt; option. Everything should work out of the box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delivering-rss-digests-to-your-notebook"&gt;
  &lt;/a&gt;
  Delivering RSS digests to your notebook
&lt;/h2&gt;

&lt;p&gt;As a last step in our automation set up, let's consider the use-case where you want a digest of the new content from your favourite source (your favourite newspaper, magazine, blog etc.) to be automatically delivered on a periodic basis to your notebook in readable format.&lt;/p&gt;

&lt;p&gt;It's relatively easy to set up such automation with the building blocks we have put in place and the Platypush &lt;a href="https://docs.platypush.tech/platypush/plugins/rss.html"&gt;&lt;code&gt;rss&lt;/code&gt;&lt;/a&gt; integration. Add an &lt;code&gt;rss&lt;/code&gt; section to the configuration file of any of your clients with the &lt;code&gt;http.webpage&lt;/code&gt; integration. It will contain the RSS sources you want to subscribe to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;rss&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;subscriptions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;https://source1.com/feed/rss&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;https://source2.com/feed/rss&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;https://source3.com/feed/rss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then either rebuild the virtual environment (&lt;code&gt;platyvenv build -c config.yaml&lt;/code&gt;) or manually install the required dependency in the existing environment (&lt;code&gt;pip install feedparser&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The RSS integration will trigger a &lt;a href="https://docs.platypush.tech/platypush/events/rss.html#platypush.message.event.rss.NewFeedEntryEvent"&gt;&lt;code&gt;NewFeedEntryEvent&lt;/code&gt;&lt;/a&gt; whenever an entry is added to an RSS feed you are subscribed to. We now want to create a logic that reacts to such events and does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Whenever a new entry is created on a subscribed feed, add the corresponding URL to a queue of links to process&lt;/li&gt;
&lt;li&gt;A cronjob that runs on a specified basis will collect all the links in the queue, parse the content of the webpages and save them in a &lt;code&gt;digests&lt;/code&gt; folder on the notebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Create a new script under &lt;code&gt;$PREFIX/etc/platypush/scripts&lt;/code&gt; named e.g. &lt;code&gt;digests.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RLock&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.cron&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cron&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.event.hook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.message.event.rss&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NewFeedEntryEvent&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platypush.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.notebook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;repo_path&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'digest-generator'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Path to a text file where you'll store the processing queue
# for the feed entries - one URL per line
&lt;/span&gt;&lt;span class="n"&gt;queue_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/path/to/feeds/processing/queue'&lt;/span&gt;
&lt;span class="c1"&gt;# Lock to ensure consistency when writing to the queue
&lt;/span&gt;&lt;span class="n"&gt;queue_path_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# The digests path will be a subfolder of the repo_path
&lt;/span&gt;&lt;span class="n"&gt;digests_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/digests'&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NewFeedEntryEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_new_feed_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Subscribe to new RSS feed entry events and add the
    corresponding URLs to a processing queue.
    """&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;queue_path_lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'0 4 * * *'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;digest_generation_cron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This cronjob runs every day at 4AM local time.
    It processes all the URLs in the queue, it generates a digest
    with the parsed content and it saves it in the notebook folder.
    """&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Running digest generation cronjob'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;queue_path_lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;md_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# Create a temporary file for the Markdown content
&lt;/span&gt;                    &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'.md'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Parsing URL &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="c1"&gt;# Parse the webpage to Markdown to the temporary file
&lt;/span&gt;                    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http.webpage.simplify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;md_files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;md_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'No URLs to process'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digests_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;digest_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digests_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_digest'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;digest_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'# Digest generated on &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;md_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;md_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;digest_content&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digest_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digest_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Clean up the queue
&lt;/span&gt;            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;md_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;md_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now restart the Platypush service. On the first start after configuring the &lt;code&gt;rss&lt;/code&gt; integration it should trigger a bunch of &lt;code&gt;NewFeedEntryEvent&lt;/code&gt; with all the newly seen content from the subscribed feed. Once the cronjob runs, it will process all these pending requests and it will generate a new digest in your notebook folder. Since we previously set up an automation to monitor changes in this folder, the newly created file will trigger a git sync as well as broadcast sync request on MQTT. At there you go - your daily or weekly subscriptions, directly delivered to your custom notebook!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;In this article we have learned:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to design a distributed architecture to synchronize content across multiple devices using Platypush scripts as the glue between a git repository and an MQTT broker.&lt;/li&gt;
&lt;li&gt;How to manage a notebook based on Markdown and which popular options are available for the visualization - Github/Gitlab, Obsidian, NextCloud Notes, Madness.&lt;/li&gt;
&lt;li&gt;How to install a Platypush virtual environment on the fly from a configuration file through &lt;code&gt;platyvenv&lt;/code&gt; command (in the previous articles I mainly targeted manual installations). Just for you to know, a &lt;code&gt;platydock&lt;/code&gt; command is also available to create Docker containers on the fly from a configuration file, but given the hardware requirements or specific dependency chains that some integrations may require the mileage of &lt;code&gt;platydock&lt;/code&gt; may vary.&lt;/li&gt;
&lt;li&gt;How to install and run Platypush directly on Android through Termux. This is actually quite huge: in this specific article we targeted a use-case for folder synchronization between mobile and desktop, but given the high number of integrations provided by Platypush, as well as the powerful scripts provided by &lt;code&gt;Termux:API&lt;/code&gt;, it's relatively easy to use Platypush to set up automations that replace the need of paid (and closed-source) services like Tasker.&lt;/li&gt;
&lt;li&gt;How to use the &lt;code&gt;http.webpage&lt;/code&gt; integration to distill web pages into readable Markdown.&lt;/li&gt;
&lt;li&gt;How to push links to our automation chain through a desktop browser (using the Platypush browser extension) or mobile (using the &lt;code&gt;termux-url-opener&lt;/code&gt; mechanism).&lt;/li&gt;
&lt;li&gt;How to use the &lt;code&gt;rss&lt;/code&gt; integration to subscribe to feeds, and how to hook it to &lt;code&gt;http.webpage&lt;/code&gt; and cronjobs to generate periodic digests delivered to our notebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should now have some solid tools to build your own automated notebook. A few ideas on possible follow-ups:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use your notebook to manage databases (a feature provided by Notion) in CSV format.&lt;/li&gt;
&lt;li&gt;Set up a similar distributed sync mechanism to synchronize photos across devices.&lt;/li&gt;
&lt;li&gt;Host your own Markdown-based wiki or website built on top of such an automation pipeline, so on each update the website is automatically refreshed with the new content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>platypush</category>
      <category>python</category>
      <category>git</category>
      <category>mqtt</category>
    </item>
  </channel>
</rss>
