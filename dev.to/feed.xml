<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Headless-UI "Fully Accessible" - it's not your fault you believe the üí© BS üí©  [accessibility rants]</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 30 May 2021 12:35:11 +0000</pubDate>
      <link>https://dev.to/inhuofficial/headless-ui-fully-accessible-it-s-not-your-fault-you-believe-the-bs-accessibility-rants-582j</link>
      <guid>https://dev.to/inhuofficial/headless-ui-fully-accessible-it-s-not-your-fault-you-believe-the-bs-accessibility-rants-582j</guid>
      <description>&lt;p&gt;In case you haven't read one of these posts before, the anger is just for fun, the message is really important, I am not actually angry! üòÅ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On a side note:&lt;/strong&gt; There is something wrong with you all! üòâ You all seem to like me being angry and ranting at you, people are going to think I am a monster if this carries on! ü§£ Oh and for the 55 people who saw this post yesterday - sorry I mis clicked and posted before it was ready ü§¶‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fully-accessible-what-a-crock-of-sht"&gt;
  &lt;/a&gt;
  "Fully Accessible" - what a crock of sh*t
&lt;/h2&gt;

&lt;p&gt;I have seen loads of people praising headless-UI for accessibility, mentioning it in comments or even writing articles about how accessible it is, just regurgitating the crap they have been fed (you know, like the articles where "React virtual DOM is faster than vanilla JS DOM manipulation"...that sort of crap / poor understanding).&lt;/p&gt;

&lt;p&gt;I mean I don't even blame them for believing it, they say it right on the home page!:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"fully accessible UI components"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and when someone makes a claim with a popular library, of course they aren't full of crap!&lt;/p&gt;

&lt;p&gt;I mean, it isn't like people can just write what they want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-word-from-our-sponsor-magigrow"&gt;
  &lt;/a&gt;
  A quick word from our sponsor, MagiGrow!
&lt;/h3&gt;

&lt;p&gt;So before we continue, let me just tell you about today's sponsor...MagiGrow!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you want bigger boobs?&lt;/strong&gt;&lt;br&gt;
Just apply MagiGrow ointment 3 times a day and you will soon be sooooo front heavy, you might just topple over! &lt;/p&gt;

&lt;p&gt;Nobody will ever talk to your face again!  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you want an ass that just won't quit?&lt;/strong&gt;&lt;br&gt;
Use MagiGrow on your butt and you will cause earthquakes when you twerk!&lt;/p&gt;

&lt;p&gt;You will be that Thicc after using MagiGrow that people will call you "bowl of oatmeal"!!&lt;/p&gt;

&lt;p&gt;Oh and guys, we haven't forgotten you!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want a bigger dick?&lt;/strong&gt;&lt;br&gt;
MagiGrow for Men, has got you covered too.&lt;/p&gt;

&lt;p&gt;Apply liberally and you will soon have horses jealous of you! &lt;/p&gt;

&lt;p&gt;Tripod won't even be an accurate name for you as one "leg" will be longer than the other two.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order today! Only $69.69&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(I mean, I wouldn't just write some random, made up crap to make a point...you do believe me that I am sponsored by MagiGrow and it works don't you!?)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ok-we-get-it-dont-believe-everything-you-read"&gt;
  &lt;/a&gt;
  Ok we get it, don't believe everything you read.
&lt;/h2&gt;

&lt;p&gt;Yeah sorry, the ointment isn't real...and neither are headless-UI's claims.&lt;/p&gt;

&lt;p&gt;Don't believe me? Let me break down the first example they give.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#menudrop-down"&gt;
  &lt;/a&gt;
  Menu-drop down.
&lt;/h3&gt;

&lt;p&gt;Right, first one they showcase, there shouldn't be too many problems with this one surely as they are leading with it?&lt;/p&gt;

&lt;p&gt;They start with a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; (A great start, it is semantically correct...you did read &lt;a href="https://dev.to/inhuofficial/they-just-won-t-learn-a-button-is-a-lt-button-gt-accessibility-rants-k1b"&gt;my rant on buttons&lt;/a&gt; didn't you?).&lt;/p&gt;

&lt;p&gt;They also apply &lt;code&gt;aria-haspopup="true"&lt;/code&gt; (so screen readers can let people know that this opens something up) - looking good so far. &lt;/p&gt;

&lt;p&gt;They even remembered to apply &lt;code&gt;aria-expanded="true"&lt;/code&gt; when the menu is open (so screen readers can let people know that the menu is open). &lt;/p&gt;

&lt;p&gt;And they add &lt;code&gt;aria-controls="idOfTheMenu"&lt;/code&gt; (so screen readers can let people know what this button controls and make associations).&lt;/p&gt;

&lt;p&gt;It looks pretty accessible so far doesn't it! 10 / 10!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-list-is-where-it-all-goes-to"&gt;
  &lt;/a&gt;
  The list is where it all goes to üí©
&lt;/h4&gt;

&lt;p&gt;I mean, first thing is first &lt;strong&gt;why&lt;/strong&gt; if you have a list of buttons would you not use...a LIST.&lt;/p&gt;

&lt;p&gt;It is just a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a load of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s with buttons in them.&lt;/p&gt;

&lt;p&gt;The list should be a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; containing the buttons. &lt;strong&gt;SE-fucking-MANTICS people&lt;/strong&gt;. We are going to have to remove the semantic information later using &lt;code&gt;role&lt;/code&gt; but we need to start from the right place!&lt;/p&gt;

&lt;p&gt;Instead it is a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with other &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s inside it. (yeah they added some WAI-ARIA, but seriously &lt;strong&gt;why not start with the right elements in the first place!&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Why does it matter? Because an &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; has a secret super power. It allows screen readers to announce how many options there are ("list with 6 items").  This is really useful information if you can't see and your screen reader doesn't support the WAI-ARIA properties used - graceful degradation!&lt;/p&gt;

&lt;p&gt;Anyway, if the relevant WAI-ARIA is supported it works ok, so a minor point I suppose.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#they-cant-even-use-raw-role-endraw-properly"&gt;
  &lt;/a&gt;
  They can't even use &lt;code&gt;role&lt;/code&gt; properly
&lt;/h5&gt;

&lt;p&gt;Next thing - on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s (that should be &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) they apply &lt;code&gt;role="none"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;They obviously haven't even read the &lt;a href="https://www.w3.org/TR/wai-aria-1.1/#none"&gt;WAI-ARIA spec as the editor note says &lt;strong&gt;not to use &lt;code&gt;role="none"&lt;/code&gt; yet&lt;/strong&gt; (use &lt;code&gt;role="presentation"&lt;/code&gt; or `role="none presentation")&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can't blame them too much for this one though - &lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html"&gt;even WCAG guidance can't get this right&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I mean, you didn't think you can just copy and paste official WCAG recommendations did you? Of course not, loads of their examples don't follow their own best practices.&lt;/p&gt;

&lt;p&gt;A lot of them show how to take semantically incorrect elements and apply the correct semantics to them (instead of using semantically correct elements and &lt;strong&gt;enhancing them&lt;/strong&gt; or better yet having a big warning that says "you don't need to use &lt;code&gt;aria&lt;/code&gt; for this anymore, HTML5 has you covered"), loads of them are outdated and some of them are just plain wrong - don't worry &lt;a href="https://dev.to/inhuofficial/w1y-d2s-a11y-h2e-to-be-so-b4y-c9d-a1d-i10e-38no"&gt;I have included WCAG in my rants before&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Anyway, I am not docking any points for this one, in a few years it will be usable for everybody, they technically followed the spec and they probably just looked at some examples which misguided them.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#why-are-they-interfering-in-keyboard-controls-they-shouldnt"&gt;
  &lt;/a&gt;
  Why are they interfering in keyboard controls they shouldn't?
&lt;/h5&gt;

&lt;p&gt;Next issue (and now we are getting to ones that do matter): you can't Tab out of the menu...this isn't a bloody modal. Once the menu is open you can't Tab to the next control. &lt;/p&gt;

&lt;p&gt;What the hell are they thinking? &lt;/p&gt;

&lt;p&gt;Was it too difficult for their little brains to work out how to close the menu if it didn't have focus anymore? &lt;/p&gt;

&lt;p&gt;It isn't like they made it so you can Tab to the next item in the menu itself, so they effectively just removed functionality for no reason.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#and-why-cant-they-follow-simple-patterns-for-keyboard-controls"&gt;
  &lt;/a&gt;
  And why can't they follow simple patterns for keyboard controls?
&lt;/h5&gt;

&lt;p&gt;Then there is the cycling of items in the menu. &lt;/p&gt;

&lt;p&gt;If I press the up arrow when the menu opens (or when I have the first item in the list highlighted) it should go to the last item in the list. &lt;strong&gt;It doesn't.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Same with if you are on the last item in the list and press the down arrow, it should cycle to the first item. &lt;strong&gt;It doesn't&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or what about the fact that you should be able to jump to items based on their first letter. &lt;/p&gt;

&lt;p&gt;I press d it jumps to "duplicate"...as expected. I press d again and - it does nothing. It should jump to "delete". &lt;strong&gt;It doesn't&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That last one is even more painful as they "half arsed" the solution. You don't &lt;strong&gt;have&lt;/strong&gt; to have this feature but they decided to implement it as it is recommended. But their incorrect implementation can cause massive confusion if the menu is dynamic. &lt;/p&gt;

&lt;p&gt;For example: if "delete" is sometimes disabled (as it isn't applicable at that time) I might press d a couple of times, find it doesn't cycle to delete as expected and think "oh, I obviously can't delete this item". &lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#waiaria-is-not-a-fix-for-everything-in-fact-it-is-a-last-resort"&gt;
  &lt;/a&gt;
  WAI-ARIA is not a fix for everything, in fact it is a last resort!
&lt;/h5&gt;

&lt;p&gt;Finally, because of their massive over-reliance on WAI-ARIA to correct their crappy HTML this is likely to not be particularly &lt;strong&gt;Robust&lt;/strong&gt;, which is what R stands for in the &lt;a href="https://uiowa.instructure.com/courses/40/pages/accessibility-principles-pour"&gt;WCAG principles known as POUR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.powermapper.com/tests/screen-readers/aria/"&gt;WAI-ARIA is like CSS - it isn't universally supported&lt;/a&gt;, and &lt;a href="https://a11ysupport.io/"&gt;there are loads of compatibility issues&lt;/a&gt;, so you need to use it with graceful degradation in mind. &lt;/p&gt;

&lt;p&gt;But hey, that is just one component, maybe we can do better with some of the others.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#listbox-select"&gt;
  &lt;/a&gt;
  Listbox (select)
&lt;/h3&gt;

&lt;p&gt;Ah they can't possibly get this one wrong.&lt;/p&gt;

&lt;p&gt;I mean, other than the fact that you can press Space to select an item, which is really weird (because they used &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements that accept both space and enter to activate them) I can't spot many new issues we hadn't seen previously.&lt;/p&gt;

&lt;p&gt;Obviously they treat it like a modal again, disabling Tab for no reason.&lt;/p&gt;

&lt;p&gt;Oh and I can't just change options using the arrow keys like I should be able to, pressing up or down opens the list (which is fine if you can tab out of the list and it remembers what item you had used the arrows to get to) but they have that annoying Tab issue, so I have to press Enter or Space to close the list before I can move on.&lt;/p&gt;

&lt;p&gt;You know what - it is passable, I will put the angry man away for a minute as I have seen far worse attempts.&lt;/p&gt;

&lt;p&gt;However - if you can, for one second, imagine coping with your design not being pixel perfect do you know what is &lt;em&gt;even&lt;/em&gt; better than their implementation...a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element. It...just...works. &lt;/p&gt;

&lt;p&gt;Hell I blame browser vendors for this one, if they just added the option to style the drop-down part hardly anybody would be trying to build their own!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#other-components"&gt;
  &lt;/a&gt;
  Other components
&lt;/h3&gt;

&lt;p&gt;Look I am already exhausted, I have already made my point. &lt;/p&gt;

&lt;p&gt;But because I know the Tailwind zealots are going to want to defend their precious cult, let me just list a few more issues in short hand to drive the message home:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#switch-toggle"&gt;
  &lt;/a&gt;
  Switch (toggle)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://scottaohara.github.io/a11y_styled_form_controls/src/checkbox--switch/#affects_on_sr"&gt;&lt;code&gt;role="switch"&lt;/code&gt; only has about 80% support&lt;/a&gt; - which would be fine but they start building the component from a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; (why, WHY! I tell you why - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Switch_role"&gt;even MDN uses a fucking button as the base for a switch&lt;/a&gt;). Using a &lt;code&gt;checkbox&lt;/code&gt; would be a better base.&lt;/p&gt;

&lt;p&gt;Also - by using a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; as the base how do they expect you to add an associated &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; that is visible? If the switch &lt;code&gt;role&lt;/code&gt; is supported you can use &lt;code&gt;for="idofswitch"&lt;/code&gt; but if it isn't supported, this association doesn't work. &lt;/p&gt;

&lt;p&gt;Screen readers might handle this quite well but Dragon Naturally Speaking (which a lot of people rely on) &lt;a href="https://a11ysupport.io/tech/html/label_element"&gt;can't even handle correctly marked up semantic &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; elements&lt;/a&gt; - it really won't stand a chance with this pattern.&lt;/p&gt;

&lt;p&gt;Anyway, we could always add some visually hidden (screen reader only) text to the button I suppose.&lt;/p&gt;

&lt;p&gt;Obviously you still need a visible label, but you could just add text above the switch to solve that couldn't you?&lt;/p&gt;

&lt;p&gt;Well you could, but then what happens when someone who needs a larger tap target (i.e. someone with Cerebral Palsy or Parkinson's disease who may have accuracy issues) tries to click on the "label" to activate the control. &lt;/p&gt;

&lt;p&gt;In case you were wondering, that is expected behaviour, clicking a label checks a checkbox and a switch is essentially just a fancy checkbox...ah who cares, there are only a few &lt;strong&gt;million&lt;/strong&gt; people with conditions that cause accuracy issues who rely on good design in the world, we can ignore them.&lt;/p&gt;

&lt;p&gt;But it also helps with WCAG compliance. The headless-UI toggle example does not comply with &lt;a href="https://www.w3.org/WAI/WCAG21/Understanding/target-size.html"&gt;tap target size requirements of 44 css pixels&lt;/a&gt; (it is close though at 38px tall) - but as that is a styling issue I also can't dock any points. &lt;/p&gt;

&lt;p&gt;However if it had a properly associated label, that can be included in the tap target area and their example would be fine. &lt;/p&gt;

&lt;p&gt;But they used a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, so it won't work properly without WAI-ARIA..it is a shame, they were so close to not fucking this one up!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#disclosure-component"&gt;
  &lt;/a&gt;
  Disclosure component
&lt;/h4&gt;

&lt;p&gt;I mean, most would call this an accordion but hey, who am I to judge on naming components, let's call it "magic expandy thingy" from now on. I don't want things to be clear for anyone.&lt;/p&gt;

&lt;p&gt;So with the "Magic Expandy Thingy (MET)" they have used buttons and all sorts of crap...I haven't even looked if they have done that correctly...I really can't be arsed.&lt;/p&gt;

&lt;p&gt;Why? &lt;/p&gt;

&lt;p&gt;Well because we have this fantastic, super modern technology called HTML5. Don't worry if you haven't come across HTML5 before, it only came out in 2008, it is still quite new!&lt;/p&gt;

&lt;p&gt;In the HTML 5 spec are a super secret pair of elements. &lt;/p&gt;

&lt;p&gt;So secret that they cleverly hid them as the &lt;a href="https://www.w3.org/TR/html52/interactive-elements.html#interactive-elements"&gt;first item mentioned under Interactive Elements section&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Nobody could possibly find them!&lt;/p&gt;

&lt;p&gt;These secret elements are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary"&gt;&lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;&lt;/a&gt;. I mean, to be fair to headless-UI, MDN call the summary element the "HTML Disclosure Summary element" - so perhaps their naming of the pattern was based on that? But then that would mean they know about the elements...and chose to ignore them...ah forget it, I can't work out what they are thinking!&lt;/p&gt;

&lt;p&gt;Here - try it for yourself, I am sick of explaining things to you, no CSS, no JS and it just works (unlike the liquid tag for this fiddle it seems, can somebody see what is wrong with it, it was working before I made a minor edit &lt;strong&gt;see the comment after the article for the fiddle&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;{% jsfiddle &lt;a href="https://jsfiddle.net/8pt23eLy"&gt;https://jsfiddle.net/8pt23eLy&lt;/a&gt; result html %}&lt;/p&gt;

&lt;p&gt;Now if you want to go and add your 47 utility classes to that - you can, &lt;a href="https://caniuse.com/details"&gt;&lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; will work in 96.6% of browsers&lt;/a&gt; and even degrade gracefully in IE (not that it matters, if you think headless-UI is accessible you won't support IE anyway, probably saying things like: "it's End Of Life (EOL) bro"...so who gives a shit?)&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#dialog-modal"&gt;
  &lt;/a&gt;
  Dialog (modal)
&lt;/h4&gt;

&lt;p&gt;Oh I am excited to see this one. I mean just read the blurb on the site:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A fully-managed, renderless dialog component &lt;strong&gt;jam-packed with accessibility and keyboard features&lt;/strong&gt;, perfect for building completely custom modal and dialog windows for your next application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is "Jam-packed" with accessibility and keyboard features, exciting!&lt;/p&gt;

&lt;p&gt;Ok so when the modal is open it applies &lt;code&gt;aria-hidden="true"&lt;/code&gt; to all other content on the page right? It adds &lt;code&gt;tabindex="-1"&lt;/code&gt; to all other interactive elements on the page so they are inactive right?&lt;/p&gt;

&lt;p&gt;Does it fuck.&lt;/p&gt;

&lt;p&gt;You see they think that keyboard users only use Tab. &lt;/p&gt;

&lt;p&gt;They haven't even laid eyes on a screen reader, never mind used one.&lt;/p&gt;

&lt;p&gt;In a screen reader you don't navigate with Tab, you navigate with arrow keys, the numbers 1-6 (to jump to headings), k (to cycle through links) etc. etc. &lt;/p&gt;

&lt;p&gt;Their modal traps focus to the same level of success as the rest of their "accessible" library - it doesn't, it isn't, they failed. I can get to everything on the page with a screen reader and not even know that there is a modal. &lt;/p&gt;

&lt;p&gt;I didn't even take the time to see if this returns focus to the button that activated it when it is closed, someone please tell me they at least implemented that?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#radio-group"&gt;
  &lt;/a&gt;
  Radio Group
&lt;/h4&gt;

&lt;p&gt;Yeah I know, I skipped "popover" - couldn't even be bothered as it is essentially the same as a modal so all the same problems will be there. So I moved onto radio group.&lt;/p&gt;

&lt;p&gt;I can't even be bothered here either to be fair as the first thing I saw was &lt;code&gt;&amp;lt;div role="radio"&lt;/code&gt;. Honestly what is wrong with using a &lt;strong&gt;fucking &lt;code&gt;&amp;lt;input type="radio"&lt;/code&gt; for a fucking radio group&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That is it, I am done, fanito, finished...headless-UI is obviously written by a load of fucking amateurs.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Yet again, the anger is for fun. &lt;/p&gt;

&lt;p&gt;In reality the headless-UI library does a better job than a lot of libraries when it comes to accessibility, and I applaud any company who is at least &lt;em&gt;trying&lt;/em&gt; to make things accessible. &lt;/p&gt;

&lt;p&gt;And to further defend them half of the issues they have are because guidance is just a mess.&lt;/p&gt;

&lt;p&gt;I just get annoyed with the "fully accessible" crap they keep saying. &lt;/p&gt;

&lt;p&gt;I understand that in marketing "bigging yourself up" is essential, but this is too far and is misleading people.&lt;/p&gt;

&lt;p&gt;If they just said "accessibility focused" library I would think "Yeah, not a bad job, few issues, but on the right track at least".&lt;/p&gt;

&lt;p&gt;But no, they are leading developers into thinking that they can just drag and drop their components into their application and they will be WCAG compliant. That people with disabilities will be able to use their website without any issues. &lt;strong&gt;They won't&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you take anything away from this article, don't believe the crap that companies feed you.&lt;/p&gt;

&lt;p&gt;Research it yourself, question everything (including questioning me, a couple of issues in this article are really minor, that is the problem with angry rants, it is hard to judge where the big problems are rather than minor ones). &lt;/p&gt;

&lt;p&gt;And that isn't just headless-UI, there are a lot of these "accessible" libraries and templates that...aren't!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#would-you-use-headlessui-though-after-all-that-putting-your-nonangry-head-on"&gt;
  &lt;/a&gt;
  Would you use headless-ui though after all that, putting your "non-angry head" on?
&lt;/h3&gt;

&lt;p&gt;No, I wouldn't use it personally (at time of writing) and no that isn't because I am on the "not a TailWind fan" side of the fence. &lt;/p&gt;

&lt;p&gt;They don't use semantically correct HTML as the base and if you want an accessible library - you gotta start with the basics (using the right native elements for the job) and progressively enhance them.&lt;/p&gt;

&lt;p&gt;With that being said, the real question is:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#if-i-know-nothing-about-accessibility-should-i-use-it"&gt;
  &lt;/a&gt;
  "If &lt;strong&gt;I&lt;/strong&gt; know nothing about accessibility, should &lt;strong&gt;I&lt;/strong&gt; use it".
&lt;/h3&gt;

&lt;p&gt;I would actually say yes üò≤, it will be more accessible than something you try and build yourself (for everything other than the "disclosure" item, just use &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; as I said - they dropped the ball with that one!).&lt;/p&gt;

&lt;p&gt;Just don't go advocating for it's use like it is perfect! &lt;/p&gt;

&lt;p&gt;And if you aren't looking for a quick fix and actually want to make your site "a great experience for people who rely on assistive technology" rather than "compliant with WCAG" then there are much better options.&lt;/p&gt;

&lt;p&gt;Don't worry, there are plenty more rants left in me that will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;little known libraries that do a much better job on accessibility. &lt;/li&gt;
&lt;li&gt;a rant or two on the difference between a compliance mindset and a great experience mindset when thinking about accessibility. &lt;/li&gt;
&lt;li&gt;rants on individual components such as custom select, checkbox and radio, menus etc. wherever I see terrible examples getting lots of upvotes, a rant will emerge I have no doubt ü§£.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Give me a follow for that (and some more serious tutorial style posts and proper discussions on things....all coming soon!)&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And finally, I will happily return to this article if they improve things and change my opinion!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-the-algo"&gt;
  &lt;/a&gt;
  For the Algo!
&lt;/h2&gt;

&lt;p&gt;My new sign off experiment! &lt;/p&gt;

&lt;p&gt;If you enjoyed this article, give it a ‚ù§, if you thought it was special give it a ü¶Ñ and above all, don't forget:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Leave a comment for the algorithm! Even if it is just to tell me to stop being so angry üòâ! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh and if you are a Tailwind evangelist...sorry that I attacked your religion, you will be OK don't worry! Leave a comment defending it by all means!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Solution: Maximum Gap</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 30 May 2021 12:28:50 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-maximum-gap-212k</link>
      <guid>https://dev.to/seanpgallivan/solution-maximum-gap-212k</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/maximum-gap/discuss/1240838"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-164-hard-maximum-gap"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/maximum-gap/"&gt;Leetcode Problem #164 (&lt;em&gt;Hard&lt;/em&gt;): Maximum Gap&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, return &lt;em&gt;the maximum difference between two successive elements in its sorted form&lt;/em&gt;. If the array contains less than two elements, return &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You must write an algorithm that runs in linear time and uses linear extra space.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [3,6,9,1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [10]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The array contains less than 2 elements, therefore return 0.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For this problem, we don't need to actually sort every element, which would take longer than &lt;strong&gt;O(N) time&lt;/strong&gt;. What we need to do is to find a way to group together numbers in such a way as to allow us to check the larger gaps between consecutive numbers. For this, we can turn to a &lt;strong&gt;bucket sort&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A bucket sort involves creating an array (&lt;strong&gt;buckets&lt;/strong&gt;) in which the elements represent buckets that cover the spread of the numbers to be sorted. Imagine trying to sort a deck of cards; it would only take once through the deck to sort it entirely into &lt;strong&gt;13&lt;/strong&gt; "buckets", one for each value. Then we could go through the individual buckets and perform another, smaller sort before joining the entire deck together.&lt;/p&gt;

&lt;p&gt;In this situation, however, we only need to perform the first part of the bucket sort. The idea is to define the size of our buckets such that the maximum gap will necessarily be larger than a single bucket. That would mean that our answer could then be found by comparing the highest value in each bucket with the lowest value in the next occupied bucket.&lt;/p&gt;

&lt;p&gt;To achieve the right bucket size (&lt;strong&gt;bsize&lt;/strong&gt;) for this to work, we'll need to iterate through &lt;strong&gt;nums&lt;/strong&gt; once to find the total range (&lt;strong&gt;hi - lo&lt;/strong&gt;), then use that to figure out the absolute smallest possible maximum gap value (&lt;strong&gt;(hi - lo) / (nums.length - 1)&lt;/strong&gt;). If we make sure to define the bucket size &lt;em&gt;smaller&lt;/em&gt; than this value, then as stated earlier, the two numbers that form the maximum gap will have to be found in separate buckets.&lt;/p&gt;

&lt;p&gt;Since there are exactly &lt;strong&gt;N&lt;/strong&gt; numbers spread throughout the buckets, and since it only requires a single iteration of each number in a bucket to observe the local high and lo values (&lt;strong&gt;currhi, currlo&lt;/strong&gt;), then it will take a total of &lt;strong&gt;O(N) time&lt;/strong&gt; to perform this process for the entire &lt;strong&gt;buckets&lt;/strong&gt; array. And since we only need to make one comparison per pair of buckets with consecutive numbers, and as there are only a maximum of &lt;strong&gt;2 * N&lt;/strong&gt; buckets, the comparisons will only take &lt;strong&gt;O(N) time&lt;/strong&gt;, as well.&lt;/p&gt;

&lt;p&gt;We'll just need to make sure that we remember the previous occupied bucket's high value (&lt;strong&gt;prevhi&lt;/strong&gt;) for the next comparison, as well as keeping track of the best result found so far (&lt;strong&gt;ans&lt;/strong&gt;). Then, once we reach the end of our &lt;strong&gt;buckets&lt;/strong&gt; array, we can simply &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;nums&lt;/strong&gt;&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;finding &lt;strong&gt;hi&lt;/strong&gt; and &lt;strong&gt;lo&lt;/strong&gt; in &lt;strong&gt;nums&lt;/strong&gt;: &lt;strong&gt;O(N)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;fill &lt;strong&gt;buckets&lt;/strong&gt;: &lt;strong&gt;O(N)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;finding all bucket &lt;strong&gt;hi&lt;/strong&gt;'s and &lt;strong&gt;lo&lt;/strong&gt;'s: &lt;strong&gt;O(N)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;comparing all bucket gaps: &lt;strong&gt;O(N)&lt;/strong&gt; for up to &lt;strong&gt;2 * N&lt;/strong&gt; buckets&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; for &lt;strong&gt;N&lt;/strong&gt; numbers spread among at most &lt;strong&gt;2 * N&lt;/strong&gt; buckets&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maximumGap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;e9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;buckets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;bsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;bsize&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prevhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="nx"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currhi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currlo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;prevhi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maximumGap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;bsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;buckets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;prevhi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
                &lt;span class="n"&gt;currhi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currhi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currlo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;prevhi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maximumGap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MAX_VALUE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buckets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt;
            &lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;());&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;prevhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currhi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currlo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;prevhi&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maximumGap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INT_MAX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;prevhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;currhi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currhi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currlo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currlo&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;prevhi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>A headache named default style in¬†CSS</title>
      <author>Alireza Hamid</author>
      <pubDate>Sun, 30 May 2021 12:15:48 +0000</pubDate>
      <link>https://dev.to/alirezahamid/a-headache-named-default-style-element-in-css-179j</link>
      <guid>https://dev.to/alirezahamid/a-headache-named-default-style-element-in-css-179j</guid>
      <description>&lt;p&gt;At least once, Front-end developers tackled default style in their projects and professional life. And also, swearing at CSS creator or Google Chrome and so on as well. So how we can get rid of this nightmare? Is any easy peasy lemon squeezy way to solve the problem?&lt;br&gt;
Yes, this Is the short answer to this question. But how? In this short article or whatever you named, I will introduce how you can reset all the user agent and default styles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-the-default-style-comes-from"&gt;
  &lt;/a&gt;
  Where the default style comes from?
&lt;/h2&gt;

&lt;p&gt;Before understanding the solution, it's important to understand where we get our basic styles in our browser.&lt;br&gt;
All the properties in CSS come with &lt;code&gt;initial&lt;/code&gt; value to load the default style of each property. And this is NOT related to HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-useragent-browser-styles"&gt;
  &lt;/a&gt;
  The User-Agent Browser Styles
&lt;/h2&gt;

&lt;p&gt;After applying the initial styles of all the CSS properties, the browser finally loads its default styles which are known as &lt;code&gt;user-agent&lt;/code&gt;. These styles have nothing to do with the base initial values of the CSS properties.&lt;/p&gt;

&lt;p&gt;Also, you can see them in the Chrome developer tools.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Q-E0r9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlnhpzj706yhv8vs395q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Q-E0r9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlnhpzj706yhv8vs395q.png" alt="1_user-agent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML elements do not have initial style values! The basic styles of an HTML element, such as the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag, for example, comes from the browser user agent stylesheet and not from the &lt;code&gt;initial&lt;/code&gt; value of the properties of CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-now-lets-to-talk-about-the-solution"&gt;
  &lt;/a&gt;
  And now lets to talk about the solution
&lt;/h2&gt;

&lt;p&gt;To reset all the &lt;code&gt;user-agent&lt;/code&gt; styles, you can easily use &lt;code&gt;all:unset&lt;/code&gt; property for each element in the CSS.&lt;br&gt;
For example: &lt;code&gt;h1{all:unset}&lt;/code&gt;&lt;br&gt;
There are different values for &lt;code&gt;all&lt;/code&gt; like &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;inherit&lt;/code&gt; which you can read about them more in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/all"&gt;developer.mozilla.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;inherit&lt;/code&gt;‚Ää-‚Ääworks in all browsers, including Internet Explorer 11&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;initial&lt;/code&gt; &amp;amp; &lt;code&gt;unset&lt;/code&gt; &amp;amp; &lt;code&gt;revert&lt;/code&gt;- work in all browsers except for Internet Explorer 11&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;That's all.&lt;br&gt;
I hope you've enjoyed this article and learned from my experience.&lt;br&gt;
If you like this post, I would appreciate applause and sharing¬†:-)&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>web</category>
    </item>
    <item>
      <title>Day 11/30 : Custom Radio Buttons using HTML and CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Sun, 30 May 2021 12:14:43 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/day-11-30-custom-radio-buttons-using-html-and-css-2ff</link>
      <guid>https://dev.to/somanathgoudar/day-11-30-custom-radio-buttons-using-html-and-css-2ff</guid>
      <description>&lt;p&gt;Welcome to Day 11 of this &lt;a href="https://dev.to/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1"&gt;Challenge&lt;/a&gt;. This is what I created today. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚ûú Here is the Demo :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FHWj6YUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-YaD0CjeewSQ/YKSz9Vj-vkI/AAAAAAAAAEY/V1JouxUYK7MsBfdOXPxiShfid2UNX2hFwCLcBGAsYHQ/s600/11.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHWj6YUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-YaD0CjeewSQ/YKSz9Vj-vkI/AAAAAAAAAEY/V1JouxUYK7MsBfdOXPxiShfid2UNX2hFwCLcBGAsYHQ/s600/11.gif" alt="Custom Radio Buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚ûú Video Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ixx5hctmhFU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;strong&gt;‚ûú Source Code :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.mrwebwolf.com/2021/05/how-to-create-custom-radio-buttons-with.html"&gt;https://www.mrwebwolf.com/2021/05/how-to-create-custom-radio-buttons-with.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚ûú Instagram Post and Reel for Day 11 :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/future_coderss/"&gt;See Post and Reel&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Hey, If You don't know what is happening here. Don't Worry, I am doing a crazy challenge üòÖ. Read More about it from the post below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;ü§Ø 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE ü§Ø&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar „Éª May 19 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Support Me :&lt;/strong&gt;&lt;br&gt;
üëâ Buy me a Coffee: &lt;a href="https://www.buymeacoffee.com/somanathgoudar"&gt;https://www.buymeacoffee.com/somanathgoudar&lt;/a&gt;&lt;br&gt;
üëâ &lt;a href="https://www.instagram.com/somanath_goudar/"&gt;Follow Me on Instagram&lt;/a&gt;&lt;br&gt;
üëâ &lt;a href="https://www.instagram.com/future_coderss/"&gt;Follow Future Coders on Instagram&lt;/a&gt;&lt;br&gt;
üëâ &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe to My Main Channel&lt;/a&gt;&lt;br&gt;
üëâ &lt;a href="https://www.youtube.com/channel/UCzGSyMOf2jPt1MkNBB3SJ3g"&gt;Subscribe to Channel Created for this Challenge&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Marketing Your Mobile App, The Steps For Continued Success</title>
      <author>Krowser Web Services </author>
      <pubDate>Sun, 30 May 2021 11:51:50 +0000</pubDate>
      <link>https://dev.to/krowser/marketing-your-mobile-app-the-steps-for-continued-success-4bk3</link>
      <guid>https://dev.to/krowser/marketing-your-mobile-app-the-steps-for-continued-success-4bk3</guid>
      <description>&lt;p&gt;Here are some tips for continued success in marketing your app to new users and maintaining your existing userbase. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask Users For Feedback&lt;/strong&gt;&lt;br&gt;
If people are using your app constantly, it is a sign that have made a connection with the product. Give them the opportunity to express their opinions with a popup invitation to leave a review, but remember that user experience should not be sacrificed by this tactic. Think about when and how you want to ask for a review and make sure it flows well with the user experience so it won‚Äôt frustrate users. The more strategically the popup is placed, the better the chances are for a positive review.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consider A Burst Campaign&lt;/strong&gt;&lt;br&gt;
A ‚Äúburst campaign‚Äù is one of the most popular techniques used by mobile app marketers who want to climb the app store ranks. The idea of a burst campaign is to provide a ‚Äúburst‚Äù of exposure for your app in which you aggressively purchase paid media exposure over a short period of time ‚Äì usually between 24 and 72 hours, depending on budget.&lt;br&gt;
The goal is to get as many paid installs as possible, boosting your ranking. All this with the hope of increasing the volume of quality organic installs ‚Äì that should follow when the app is finally ranked high enough to be discovered. While you should attract more organic downloads from a successful burst campaign, continued paid advertising will maintain steady downloads. You need to keep the momentum going.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offer A Referral Bonus&lt;/strong&gt;&lt;br&gt;
Offering your users a bonus or benefit when they promote your app online is a surefire way to get them to spread the word. With a staggering 3900% growth rate, Dropbox is an excellent example of how powerful referrals can be. The company had just 1,00,000 registered users in 2008, which climbed to a staggering 4,000,000 registered users within a mere 15 month period as a result of their referral program. This post from Localytics explains how Dropbox used referrals to exponentially increase their user base&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>webdev</category>
      <category>marketing</category>
    </item>
    <item>
      <title>Understanding Kubernetes in a visual way (in üé• video): part 15 ‚Äì Deployment Rolling Update</title>
      <author>Aur√©lie Vache</author>
      <pubDate>Sun, 30 May 2021 11:51:10 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-kubernetes-in-a-visual-way-in-video-part-15-deployment-rolling-update-i19</link>
      <guid>https://dev.to/aurelievache/understanding-kubernetes-in-a-visual-way-in-video-part-15-deployment-rolling-update-i19</guid>
      <description>&lt;p&gt;Understanding Kubernetes can be difficult or time-consuming. In order to spread knowledges about Cloud technologies I started to create sketchnotes about Kubernetes, then I've auto-published a book and since now I've started a new serie of video! :-)&lt;/p&gt;

&lt;p&gt;I imagined a serie of short videos with a mix of sketchnotes and speech.&lt;/p&gt;

&lt;p&gt;I think it could be a good way, more visual, with audio &amp;amp; video to explain Kubernetes (and others technologies).&lt;/p&gt;

&lt;p&gt;This episode is focused on Deployment Rolling Update.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/w2_-Q4QuDY8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The video is in French BUT I done the subtitles in english (and french too).&lt;/p&gt;

&lt;p&gt;If you liked the video and are interested to watch another ones, please give me some feedbacks (and you can also subscribe to &lt;a href="https://www.youtube.com/channel/UCrRk0kOP58lBMl9B8ZS8Vlg"&gt;my Youtube channel&lt;/a&gt;, if you want to ‚ù§Ô∏è).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 165 pages: &lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;"Understanding Kubernetes in a visual way"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like theses sketchnotes, you can follow me, I will publish others sketchs shortly :-).&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>docker</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 10 Google chrome extensions I use as backend web developer</title>
      <author>Anish Ansari</author>
      <pubDate>Sun, 30 May 2021 11:44:10 +0000</pubDate>
      <link>https://dev.to/ansarianish4/top-10-google-chrome-extensions-i-use-as-backend-web-developer-43jm</link>
      <guid>https://dev.to/ansarianish4/top-10-google-chrome-extensions-i-use-as-backend-web-developer-43jm</guid>
      <description>&lt;p&gt;Many extensions are available for chrome which helpful in any way but I am going to share what I use as a backend developer and going to explain how they are helping me speed up the daily. So let us start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Fake Filler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I use fake filler every day and it saves me a lot of time during development and testing. It fills the form with all inputs on a page with fake/dummy data. So you don't have to enter one by one.&lt;/p&gt;

&lt;p&gt;learn more here: &lt;a href="https://chrome.google.com/webstore/detail/fake-filler/bnjjngeaknajbdcgpfkgnonkmififhfo?hl=en"&gt;Fake Filler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.JSON Formatter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I am building simple APIs or interacting with any other API and I don't want to leave chrome then JSON Formatter helps me a lot. I use this for formatting the response in the browser.&lt;/p&gt;

&lt;p&gt;learn more here: &lt;a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"&gt;JSON Formatter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Nimbus Capture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;when I finish adding a feature or I have to clarify something to the client via screenshot or screencast then Nimbus is one solution for me I feel. It is not specific to web developers but it helps me a lot.&lt;/p&gt;

&lt;p&gt;Learn more: &lt;a href="https://chrome.google.com/webstore/detail/nimbus-screenshot-screen/bpconcjcammlapcogcnnelfmaeghhagj?hl=en"&gt;Nimbus Capture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Wappalyzer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wappalyzer is used to detect the Web technologies like cms, framework, etc is using. I used this to see what are others are using to build robust web applications and what I can learn from them.&lt;/p&gt;

&lt;p&gt;Learn more: &lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=en"&gt;Wappalyzer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Vue.js devtools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I have to work with vue.js this helps me debug vue.js applications.&lt;/p&gt;

&lt;p&gt;Learn more: &lt;a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en"&gt;Vue.js Devtools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.daily.dev&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension is very helpful and it keeps me up to date about dev news, blog, and programming news.&lt;/p&gt;

&lt;p&gt;Learn more: &lt;a href="https://chrome.google.com/webstore/detail/dailydev-all-in-one-codin/jlmpjdjjbgclbocgajdjefcidcncaied?hl=en"&gt;Daily.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.Lorem Ipsum Generator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again this one is for adding data to form input and testing the form. This extension helps me to generate random text.&lt;/p&gt;

&lt;p&gt;Learn more: &lt;a href="https://chrome.google.com/webstore/detail/lorem-ipsum-generator-def/mcdcbjjoakogbcopinefncmkcamnfkdb"&gt;Lorem Ipsum Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8.Clear Cache&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;when a page is loaded frequently browser used to cache the content and this cause problem sometime when you're testing things out.so this extension helps me clearthe cache so that you don't have to go through setting all the time.&lt;/p&gt;

&lt;p&gt;learn more: &lt;a href="https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?hl=en"&gt;Clear Cache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9.Web Developer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension has set of tools for web developers which helps in many way.&lt;/p&gt;

&lt;p&gt;learn more: &lt;a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm"&gt;Web Developer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10.Google Keep&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I use this extension for saving if I find any important website, links. I often use it to keep information UAT servers and things like that.&lt;/p&gt;

&lt;p&gt;Learn more: &lt;a href="https://chrome.google.com/webstore/detail/google-keep-chrome-extens/lpcaedmchfhocbbapmcbpinfpgnhiddi?utm_source=chrome-ntp-icon"&gt;Google Keep&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading. Stay safe&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>chrome</category>
      <category>html</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Java vs JavaScript. Key differences and similarities</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Sun, 30 May 2021 11:38:02 +0000</pubDate>
      <link>https://dev.to/coderslang/java-vs-javascript-key-differences-and-similarities-33mo</link>
      <guid>https://dev.to/coderslang/java-vs-javascript-key-differences-and-similarities-33mo</guid>
      <description>&lt;p&gt;The software programming world has progressed rapidly over time and has a lot of programming languages to offer. You might have heard about programming languages Java and JavaScript that sound similar in name and might have got confused about whether they're different names for the same language or are they different. Well, all your confusion will be clear after this brief yet full of knowledge blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-java"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Java?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Java is an OOP (Object-orientated programming language), class-based, and multi-platform programming language having a VM (Virtual Machine) platform. OOP is a programming paradigm based on the concept of objects containing the code and data. The Virtual Machine helps you create compiled programs that have the flexibility to run anywhere, on any platform. Java refers to this concept as Write Once, Run Anywhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-writing-code-in-java"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to get started with writing code in Java&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;There are two simple set-up steps you need to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download and set up the Java SE Development kit&lt;/li&gt;
&lt;li&gt;Choose any text editor that you like&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I recommended you choose Notepad as a complete beginner since it's the most basic one. A different text editor or an IDE will also work, just try not to get too fancy, as you want to focus on the essentials now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-a-simple-code-in-java"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Writing a simple code in Java&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Let's see how you can simply print a &lt;code&gt;hello world&lt;/code&gt; program in Java.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A Java Program used for printing a simple string (character input type, e.g. HelloWorld),&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explanation-of-the-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Explanation of the code&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first line you see starts with the generic comment statement that describes what our program does. You can see that it starts with &lt;code&gt;//&lt;/code&gt; which is a symbolic representation of a single line comment (a comment that's restricted to a single line).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we move onto the next line, let's explore the curly braces. Opening curly brace &lt;code&gt;{&lt;/code&gt; refers to the opening of the respective class or function, whereas ending curly brace &lt;code&gt;}&lt;/code&gt; refers to where it ends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;class&lt;/code&gt; refers to an object constructor or, in simple words, a blueprint from which we create objects. Each class has a name, and in this case, our class name is &lt;code&gt;HelloWorld&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now coming towards the main method of our program, that is&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  public static void main(String[] args)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;. Let's break this down into chunks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;public&lt;/code&gt; refers to this method being accessible to anyone from anywhere, which means it is globally available.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;static&lt;/code&gt; is a keyword that simply defines that this method is static and can't be changed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;void&lt;/code&gt; is also a keyword that refers to a method not returning anything.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;main&lt;/code&gt; refers to the name of the Java main method.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;String args[]&lt;/code&gt; refers to the arguments that are being passed to the main method. &lt;code&gt;args&lt;/code&gt; refers to the name of the string. You can name &lt;code&gt;args&lt;/code&gt; with any other string name, it's just a standard naming used for it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;System.out.println("Hello, World!");&lt;/code&gt; This is the actual output line where our &lt;code&gt;Hello, World!&lt;/code&gt; gets printed. Individual statements and variable declarations end with a semi-colon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sounds pretty complex for a program that just prints out a single string to the screen? That's true, and it's one of the reasons &lt;a href="https://js.coderslang.com"&gt;why learning JavaScript is a much better choice for beginner devs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-javascript"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is JavaScript?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;JavaScript is a high-level scripting programming language that is lightweight and is normally used to make web pages dynamic and interactive. It can add dynamic text into HTML and is known for being the browser's language. We will discuss its detailed features in its comparison with Java.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-writing-code-in-javascript"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to get started with writing code in JavaScript&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You just need to have the following 2 things to get started with JavaScript:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Browser (Google Chrome, Safari, Firefox, Internet Explorer)&lt;/li&gt;
&lt;li&gt;Text editor (Notepad, VS Code, Atom)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-write-your-first-javascript-program"&gt;
  &lt;/a&gt;
  How to write your first &lt;strong&gt;JavaScript program&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Let's see how you can write your first &lt;code&gt;hello world&lt;/code&gt; program in JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A JavaScript Program used for printing a simple string (character input type, e.g. HelloWorld),&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explanation-of-the-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Explanation of the code&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first line is again the same single line comment, as we previously saw for the Java program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In JavaScript, we simply use the statement&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  console.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to print anything on the console (an object which provides access to the browser debugging console). In short, you can view it when:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You right-click on your mouse&lt;/li&gt;
&lt;li&gt;Click on inspect&lt;/li&gt;
&lt;li&gt;Select the console tab&lt;/li&gt;
&lt;li&gt;View the logged statement in the console&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now tell me, how much easier it is when compared to Java?&lt;/p&gt;

&lt;p&gt;You're right, it's not even close.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#differences-between-java-and-javascript"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Differences between Java and JavaScript&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We can note the following major differences amongst the two languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Programming Paradigm:&lt;/strong&gt; Java strictly follows the object-oriented programming paradigm, whereas JavaScript follows a multi-paradigm that includes object-oriented programming, procedural, and scripting programming language.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code Execution:&lt;/strong&gt; Java applications have the flexibility of running on the JVM (virtual run time environment for Java), whereas JavaScript runs only on Browser-specific application-specific environments.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Objects:&lt;/strong&gt; Java objects are purely class-based whereas JavaScript objects are prototype-based.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Type Checking:&lt;/strong&gt; Java ensures strong type checking of its variables and functions before compilation, which makes the probability run or compile-time run quite low. However, JavaScript is weakly typed, the type of the variables is unknown until they get compiled, and hence, the chances of run or compile-time errors increase.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;File Extension:&lt;/strong&gt; Java has a &lt;code&gt;.java&lt;/code&gt; file extension, whereas JavaScript has a &lt;code&gt;.js&lt;/code&gt; file extension.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multithreading:&lt;/strong&gt; Java supports multithreading (a process of executing two or more threads simultaneously to maximum utilization of CPU), whereas JavaScript doesn't.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memory Usage:&lt;/strong&gt; Since Java has a lot going around in it, it occupies more space, whereas JavaScript occupies less.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Language Dependency:&lt;/strong&gt; Both languages can work independently on their own and can also pair up with other languages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Concurrency Approach:&lt;/strong&gt; Java takes advantage of its multithreading ability and has a thread-based approach, whereas JavaScript follows an event-driven approach.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance:&lt;/strong&gt; Scripting languages are always more efficient than pure programming languages because of their nature of engagement, and hence, Java is less efficient and slow as compared to JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#similarities-between-java-and-javascript"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Similarities between Java and JavaScript&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Any of the differences, right? Let's also explore what do these two have in common.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Browser Compatibility:&lt;/strong&gt; Both languages can run on a browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Support:&lt;/strong&gt; Both languages have a lot of online support community.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Syntax and Programming Concepts:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though both are two different languages, both share the same core programming concepts and some syntax concepts such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use of programming loops such as for loop, while loop.&lt;/li&gt;
&lt;li&gt;Use of conditional statements such as if and else if.&lt;/li&gt;
&lt;li&gt;Use of Math libraries such as Math.pow.&lt;/li&gt;
&lt;li&gt;Common shared syntax signs such as code block delimiters { }, semi-colon to end code statements.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Similar Name:&lt;/strong&gt; This one's strange, but both Java and JavaScript have "Java" in common, though both languages are completely different.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To sum it up, Java and JavaScript are two different languages that are different. A few similarities in them mainly come from the core programming principles, but apart from that, they both are two different worlds that share a similar name but diverge from each other majorly.&lt;/p&gt;

&lt;p&gt;Get my &lt;a href="https://learn.coderslang.com/free-ebooks/"&gt;free e-book&lt;/a&gt; to prepare for the technical interview or start to &lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Light/dark mode, user input</title>
      <author>Ayc0</author>
      <pubDate>Sun, 30 May 2021 11:28:20 +0000</pubDate>
      <link>https://dev.to/ayc0/light-dark-mode-user-input-ai1</link>
      <guid>https://dev.to/ayc0/light-dark-mode-user-input-ai1</guid>
      <description>&lt;p&gt;In the previous post, we've seen how to use CSS variables to adapt the display to user system preferences.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ayc0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPb0lUP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--c2MAZ8i8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/202017/2247c005-889d-4cd2-8de9-7e8812d2c713.png" alt="ayc0 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ayc0/light-dark-mode-the-simple-way-46nh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Light/dark mode, the simple way&lt;/h2&gt;
      &lt;h3&gt;Ayc0 „Éª May 30 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;But users of your website cannot change their theme directly from the website, they have to change their system mode to change it. Which can be a bit annoying when you want your OS to be in light mode and the website in dark mode for instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css"&gt;
  &lt;/a&gt;
  The CSS
&lt;/h2&gt;

&lt;p&gt;The easiest is to apply a classname to the body light/dark. And as we are using classnames, we cannot use &lt;code&gt;:root&lt;/code&gt; as before.&lt;/p&gt;

&lt;p&gt;The CSS is still fairly simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.light&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.dark&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-js"&gt;
  &lt;/a&gt;
  The JS
&lt;/h2&gt;

&lt;p&gt;We‚Äôll have to store the user preference for future visit of the website. You can do that with the method you prefer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;localStorage (if everything is done in the frontend)&lt;/li&gt;
&lt;li&gt;cookie (if you want to have access to it from the backend)&lt;/li&gt;
&lt;li&gt;remote database (if you want to apply the same theme to multiple devices)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you store the preferences in a remote database, I'd still recommend to double save it in a cookie/localStorage, because we'll see later how to avoid blinks when loading the pages. And this needs a synchronous access to the stored value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm gonna stick with localStorage here, because it's the easiest to deal with, but it doesn't really matter for this example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-and-writing-the-theme"&gt;
  &lt;/a&gt;
  Reading and writing the theme
&lt;/h3&gt;

&lt;p&gt;We can use this couple of function as first class getters/setters of the theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saveTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-the-theme"&gt;
  &lt;/a&gt;
  Setting the theme
&lt;/h3&gt;

&lt;p&gt;As we only used a classname on the body, applying only corresponds to setting the classname on it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I'd still recommend setting the &lt;code&gt;&amp;lt;meta name="color-scheme"&amp;gt;&lt;/code&gt; to &lt;code&gt;content="light"&lt;/code&gt; and &lt;code&gt;content="dark"&lt;/code&gt; for native inputs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This leaves us with this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colorScheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta[name="color-scheme"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;applyTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;colorScheme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assembling-the-whole-ensemble"&gt;
  &lt;/a&gt;
  Assembling the whole ensemble
&lt;/h3&gt;

&lt;p&gt;Now that we have all the elements, this is basically like legos: we need to assemble everything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeToggler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;applyTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;themeToggler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rotateTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;applyTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;saveTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: if you don't want any blink when users will load the page (seeing an empty white page when reloading the page for instance while they picked a dark mode for your website), it's important that this JS is executed in a blocking way, so that browsers won't render the html/css without having first computed this JS and applied the classname on the body.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ayc0/embed/NWpwgqM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understand React Js Hooks once and for all | part I</title>
      <author>Dimer BWimBA</author>
      <pubDate>Sun, 30 May 2021 11:23:52 +0000</pubDate>
      <link>https://dev.to/dimer191996/understand-react-js-hooks-once-and-for-all-part-i-86h</link>
      <guid>https://dev.to/dimer191996/understand-react-js-hooks-once-and-for-all-part-i-86h</guid>
      <description>&lt;p&gt;You'll already know now The React framework includes react hooks. Witch are Special hook functions that can be called from within a component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  function component(){

      //your react hook 

  return &amp;lt;&amp;gt;UI&amp;lt;/&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So By defining functions, we may create static or dumb react components. And UI components, on the other hand, are frequently dynamic; they may need to change the state of their data, respond to &lt;code&gt;lifecycle events&lt;/code&gt;, and access items from the &lt;code&gt;DOM&lt;/code&gt;, among other things.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Reactive State &amp;gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Component(){

   const [state] = useState('üçè')

  return &amp;lt;&amp;gt;UI&amp;lt;/&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;2) Side Effects &amp;gt; üîõ &amp;gt; Effects &amp;gt; üì¥&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Component(){

  useEffect(() =&amp;gt; alert('üíÉ'))

  return &amp;lt;&amp;gt;UI&amp;lt;/&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;3) Grab &amp;gt; HTML5 &amp;gt; Elements &amp;gt; ‚≠ê&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Component(){

  const el = useRef('üòä')

  return &amp;lt;&amp;gt;UI&amp;lt;/&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...more&lt;/p&gt;

&lt;p&gt;üò†üò†üò†üò†üò†&lt;br&gt;
But prior to react &lt;code&gt;version 16.8&lt;/code&gt;, developers were required to write classes to take advantage of certain react features. &lt;/p&gt;

&lt;p&gt;üò†üò†üò†üò†üò†&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class btn extends React.Component{
     constructor(props) {
       super(props);
       this.state = {
         count:0
       }
     }
     render() {
       return (
         &amp;lt;p&amp;gt;{this.state.count}&amp;lt;/p&amp;gt;
     );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üòäüòäüòäüòä&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Btn(){

   const [state] = useState({count:0})

   &amp;lt;p&amp;gt;{state.count}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can still use &lt;code&gt;classes&lt;/code&gt; in react üò†... &lt;br&gt;
But &lt;code&gt;hooks&lt;/code&gt; üòä generally provide a more ergonomic way to build components because you can reuse stateful logic without changing your component hierarchy. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí™üí™üí™React has 10 built in hooks, and you'll understand what every single one of them does by the end of four part series 'articles'. In addition, you'll learn how to build your own hooks from scratch to extract your own component logic into reusable functions üí™üí™üí™. So follow me bruh , let learn together .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ax8qnYCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umeos2whin555t7y7z91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ax8qnYCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umeos2whin555t7y7z91.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                #let gooooo #üë¥üë¥üë¥üë¥
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Before we dive into  the react hooks world üë¥üë¥, it's helpful to understand why hooks exist in the first place. In the past stateful logic or data that changes within the application was tightly coupled to a class based component. That means in order to work with reactive data, you needed to create a component that seems reasonable. But what it led to in reality was a complex tree of nested components.&lt;/p&gt;

&lt;p&gt;üë¥üë¥And this is where I have to admit that I used to really dislike and I never learned react because sharing any logic required some frustrating ‚Äçüë§ jujitsu like higher order components and render props, which are patterns that have you passing components as arguments to other components. And that just always felt way more complex to me than patterns you find in other frameworks like Angular. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/d0jIZ9i3ludE5ycGA1/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/d0jIZ9i3ludE5ycGA1/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üòä Fortunately, üòä  hooks changed everything by giving you access to lower level features of react outside of the context of a component. When you work with hooks, you can think of them like low level primitives of the React framework that gives you special abilities that you wouldn't otherwise have in vanilla JavaScript. The hooks themselves are functions, which always start with the name of &lt;code&gt;use&lt;/code&gt;, because you're using the super powers of the React framework. Now before you start using hooks, there's really just one rule you should be aware of. &lt;/p&gt;

&lt;p&gt;And that's to only call them at the top level of a functional component. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPc23XyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yanxpn0dfaani0qweoog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPc23XyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yanxpn0dfaani0qweoog.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
They don't work inside of regular JavaScript functions, nested functions, loops, or anything like that. &lt;/p&gt;

&lt;p&gt;The only exception to this rule is when building your own custom hooks, which we'll look at towards the end of these 'articles'. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-lpVn3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf66zwmv13x4rew2v5gv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-lpVn3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf66zwmv13x4rew2v5gv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#now-the-question-becomes-what-are-these-primitives-or-hooks-actually-do"&gt;
  &lt;/a&gt;
  Now the question becomes, what are these primitives or hooks actually do?
&lt;/h1&gt;

&lt;p&gt;Let's break them down one by one, starting with &lt;code&gt;useState&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--banipYJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lg5jm8d4v2d1698c2b7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--banipYJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lg5jm8d4v2d1698c2b7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; is easily the most important and often used hook . The purpose of &lt;code&gt;useState&lt;/code&gt; is to handle reactive data. any data that changes in the application is called state. And when the state changes, you want react to update the UI. So the latest changes are reflected to the end user. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hook takes one optional argument, which is the default state, which we'll go ahead and set to zero the function and returns an array that contains two values you can use within your component. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24LVEomK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf5rvxdrwpki499w9bvv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24LVEomK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf5rvxdrwpki499w9bvv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason they're returned in an array is because we can destructur  them with JavaScript to easily assign the values to local variables that we can name whatever we want. &lt;/p&gt;

&lt;p&gt;The first value is the reactive data or state. If we then reference it in the UI, and its value changes in the future, React will automatically rebuild the UI to show the latest value, it'll start with a value of zero our default in the hook. &lt;/p&gt;

&lt;p&gt;But how do we then change its value in the future, the second element in the array is a setter function. For example, we might listen to the on click event on the button, and when clicked will call the set count function to increment the count by one. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFkbLcLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3q9x5jhcwbzdwkckq4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFkbLcLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3q9x5jhcwbzdwkckq4d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üò†If we compare this code to a class based component, you can see &lt;br&gt;
 down bellow it's far more complex. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zx_ea5----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mokmr05076kueiamw7vh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zx_ea5----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mokmr05076kueiamw7vh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üò†&lt;em&gt;We need a class to extend a react component than a constructor to initialize the state. And also notice how we're required to reference the this keyword all over the place. You state in my opinion is a much cleaner solution&lt;/em&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#now-were-ready-to-tackle-the-second-most-important-hook-raw-useeffect-endraw-"&gt;
  &lt;/a&gt;
  Now we're ready to tackle the second most important hook &lt;code&gt;useEffect&lt;/code&gt;.
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gcMGJJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z28gr2ziozlgmfvdwar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gcMGJJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z28gr2ziozlgmfvdwar.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also happens to be one of the most #confusing to me and many other . So in order to understand it, you first need to understand the &lt;code&gt;component lifecycle&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Down below is a simplified breakdown of the component lifecycle, the component is added to the UI or mounted, which can only happen once then reactive data on the component can change or it's updated, which can happen multiple times. Then finally, at some point, that component will be removed from the UI or unmounted. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6InbpFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s28jpkdeyqxgf3vgst1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6InbpFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s28jpkdeyqxgf3vgst1b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now keep these three &lt;code&gt;lifecycle events&lt;/code&gt; or &lt;code&gt;side effects&lt;/code&gt; in mind as we talk about the use effect hook, which allows us to implement logic for all of them from within a single function API.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UseEffect&lt;/code&gt; is a function that takes a function you define as its first argument, React will then run your function or a side effect after it is updated the DOM with the current implementation, it will run this function anytime stateful data changes on the component. That means it'll run once when the component is initialized with a default value, then run again each time the state or account is updated. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6InbpFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s28jpkdeyqxgf3vgst1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6InbpFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s28jpkdeyqxgf3vgst1b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üí™üí™üí™In most cases, though, you'll likely want more fine grained control over that behavior. For example, imagine we need to fetch data when the component is first initialized, then update the state asynchronously after the data has been fetched. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXxxN-5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czprrsqosgrdlaj2sv2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXxxN-5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czprrsqosgrdlaj2sv2t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This previews code in the image would result in an infinite loop. Because every time we do the fetch, we then update the state, which then triggers another fetch, and so on forever. &lt;/p&gt;

&lt;p&gt;The way we address this is by adding a second argument to use a fact, which is an array of dependencies. If you add an empty array, it means there are no dependencies, which means it will only run once when the component is first initialized. But in other cases, you might want to rerun the function anytime certain staple data has changed, you can do that by adding the state to the dependencies array. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2-N6y2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7p7j0h3wu0djdcq9myk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2-N6y2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7p7j0h3wu0djdcq9myk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now react will track that value, and any time it changes, it will rerun this function&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Now one last thing you might want to do with &lt;code&gt;useEffect&lt;/code&gt; is run some teardown code when the component is destroyed. The way we implement a teardown function is to return a function from our use effect callback, React will take the function returned here, then call it when the component is destroyed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pAY2e8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgggiownkwchfunkl98i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pAY2e8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgggiownkwchfunkl98i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#and-with-that-lets-move-on-to-our-next-hook-use-context"&gt;
  &lt;/a&gt;
  And with that, let's move on to our next hook use context.
&lt;/h1&gt;

&lt;p&gt;This hook allows you to work with react context API, which itself is a mechanism that allows you to share or scope values throughout the entire component tree. &lt;/p&gt;

&lt;p&gt;Part 2 Tomorrow &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l41K4KlVE8dgozf8I/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l41K4KlVE8dgozf8I/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Buying a new domain is not the way to start your side project</title>
      <author>Rinas</author>
      <pubDate>Sun, 30 May 2021 11:08:22 +0000</pubDate>
      <link>https://dev.to/onerinas/buying-a-new-domain-is-not-the-way-to-start-your-side-project-21e8</link>
      <guid>https://dev.to/onerinas/buying-a-new-domain-is-not-the-way-to-start-your-side-project-21e8</guid>
      <description>&lt;p&gt;üí° When an idea strikes, the very next thing to do is buy a domain üòÖ&lt;/p&gt;

&lt;p&gt;I do this a lot and started to slow down recently. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You take a shower and the idea generator puts an awesome idea in your head&lt;/li&gt;
&lt;li&gt;It would be the most incredible idea you have ever come across. &lt;/li&gt;
&lt;li&gt;Rush to laptop see if that perfect domain name is available and boom üí• &lt;/li&gt;
&lt;li&gt;What did just happen? You got a dopamine effect of achieving something. Feels like the project is half done right? Nope. Wrong. &lt;/li&gt;
&lt;li&gt;In reality, you did nothing. You just paid some few $$&lt;/li&gt;
&lt;li&gt;Now you have 1 year to work on the project before it expires. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Guess what? You will probably let it expire or worse, renew it for one more year assuming some miracle is gonna happen this year. Nope, you are wrong again. &lt;/p&gt;

&lt;p&gt;I started keeping aside at least an hour for side projects starting March and obviously, I ended up buying few domains - nonolist.me, shipit.club, myfailedstartups.com&lt;/p&gt;

&lt;p&gt;Wanna know the current status of these projects? MVP is not ready yet. &lt;/p&gt;

&lt;p&gt;Meanwhile, I started thinking about this domain hoarding problem and hit the aha shower moment again üí°&lt;/p&gt;

&lt;p&gt;Let's build a website to find out how many domains people own üòÇ&lt;/p&gt;

&lt;p&gt;For some miraculous reason, I didn't buy a domain for this üòπ&lt;/p&gt;

&lt;p&gt;üìù I created a form using typeform and tweeted the link asking how many domains people own. &lt;/p&gt;

&lt;p&gt;üò± oh boy, many owned hundreds of domain names &lt;/p&gt;

&lt;p&gt;üë®‚Äçüíª Ok, now I hit that rush to buy a domain to build a website for this. &lt;/p&gt;

&lt;p&gt;üê£ &lt;a href="https://highscore.domains"&gt;HIGHSCORE.domains&lt;/a&gt; is born. A fun leaderboard to find out who owns more domains. &lt;/p&gt;

&lt;p&gt;ü§î I know you are reading this and thinking "oh wait, how many domains do I own actually?" ü§£&lt;/p&gt;

&lt;p&gt;üòé HIGHSCORE.domains is the project I bought the domain after seeing people are responding to it and might have some potential. &lt;br&gt;
Guess what? this is the only project which is live and not yet another "Sign up for early access" page.&lt;/p&gt;

&lt;p&gt;üôã Do you face this problem as well - ie, ended up buying domains and not use them? Is there any tricks/realization you had recently which helped to overcome this?  &lt;/p&gt;

</description>
      <category>sideprojects</category>
      <category>discuss</category>
      <category>domain</category>
    </item>
    <item>
      <title>Scheduling API for Digital Courses and e-learning</title>
      <author>Spurwing</author>
      <pubDate>Sun, 30 May 2021 10:57:53 +0000</pubDate>
      <link>https://dev.to/spurwing/scheduling-api-for-digital-courses-and-e-learning-7hj</link>
      <guid>https://dev.to/spurwing/scheduling-api-for-digital-courses-and-e-learning-7hj</guid>
      <description>&lt;p&gt;The world of work, learning, and play has been forever changed. What was once a source of anxiety has now begun to bear fruit, showing us that the new normal is a frontier with some exciting opportunities for &lt;strong&gt;training and learning&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As businesses and institutions acclimatize to their new environment, attempting to schedule classes around the world is becoming a costly problem to fix.&lt;/p&gt;

&lt;p&gt;Spurwing's time management solutions and API systems can help institutions in this transition: offering &lt;strong&gt;scheduling interfaces&lt;/strong&gt; that can even help businesses open themselves to the training systems of the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-spurwings-api-system-help-students-access-classes-around-the-world"&gt;
  &lt;/a&gt;
  How can Spurwing's API System Help Students Access Classes Around the World?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cif3K58l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enenuzg7m6xayswf4hg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cif3K58l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enenuzg7m6xayswf4hg8.png" alt="scheduling api for education"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigating-world-time-zones-with-ease"&gt;
  &lt;/a&gt;
  Navigating World Time Zones with Ease
&lt;/h3&gt;

&lt;p&gt;Distance learning and work from home have spread students, teachers, or tutors around the world. And, for perhaps the first time, businesses are having to contend with digital classrooms full of learners in entirely different time zones.&lt;/p&gt;

&lt;p&gt;Spurwing's Scheduling API can keep all your participants up-to-date and on time with our automated notifications ‚Äì available to send out at any time of the day.&lt;/p&gt;

&lt;p&gt;Simply customise our pre-designed templates (or disable them and craft your own) and send out &lt;strong&gt;booking confirmations or reminders&lt;/strong&gt; via e-mail and SMS. This will reduce the risk of missed appointments, keeping your classes on the schedule and your trainees learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-scheduling-convenient-intuitive-and-efficient"&gt;
  &lt;/a&gt;
  Making Scheduling Convenient, Intuitive, and Efficient
&lt;/h3&gt;

&lt;p&gt;Best of all: there is no need to overhaul your institution's digital infrastructure to do it.&lt;/p&gt;

&lt;p&gt;The Spurwing Scheduling API was specifically crafted to solve these problems while delivering a feature set that integrates neatly into your institution's existing software, communication channels, workflows to maximise productivity and appeal to your participants.&lt;/p&gt;

&lt;p&gt;You can enjoy a series of innovative, bespoke applications, features, and integrations to keep your online classes and digital training courses running smoothly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fully &lt;strong&gt;two-way synced&lt;/strong&gt; with Google Calendar, Outlook, and iCal, enjoy one-click add-to-calendar links and make full use of the scheduling systems your participants are already using to organise their time.&lt;/li&gt;
&lt;li&gt;Discord, Slack, and Facebook Messenger bots ensure that the API is fully optimizable to whichever workflows your training courses are making use of.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvRO86Hg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgs9l4pi20bff0e1nhrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvRO86Hg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgs9l4pi20bff0e1nhrp.png" alt="scheduling for education"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-api-that-keeps-on-giving"&gt;
  &lt;/a&gt;
  The API That Keeps on Giving
&lt;/h3&gt;

&lt;p&gt;Not only that, &lt;strong&gt;Spurwing's scheduling API&lt;/strong&gt; is feature-rich, non-intrusive, and all our plans come with unparalleled customer support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spurwing has developed an &lt;strong&gt;open-source marketplace&lt;/strong&gt; for features, bots, widgets, and interface tools, meaning that there are truly no limits to what can be done with our world-class API.&lt;/li&gt;
&lt;li&gt;All templates, widgets, and interfaces can be &lt;strong&gt;entirely customized&lt;/strong&gt; with your institution or business's branding. Not a single mention of Spurwing in sight!&lt;/li&gt;
&lt;li&gt;We offer both &lt;strong&gt;developer and product support&lt;/strong&gt; on your terms. We are available via email or live chat whenever you need us. We are even happy to join your team's Slack channel to stay in the loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0EVCYSPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t9qvb1349liomhvnabo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0EVCYSPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t9qvb1349liomhvnabo.png" alt="scheduling api for online classes"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#online-virtual-reality-classes-with-spurwings-scheduling-api"&gt;
  &lt;/a&gt;
  Online Virtual Reality Classes with Spurwing's Scheduling API
&lt;/h2&gt;

&lt;p&gt;As the world of learning changes, so too do the platforms on which we operate. Throughout the COVID-19 pandemic, we have seen a creeping adoption of &lt;strong&gt;Virtual Reality platforms&lt;/strong&gt; for distance learning and work-from-home.&lt;/p&gt;

&lt;p&gt;Virtual Reality is truly the future. But it opens a world of problems for businesses already struggling to cope with the challenges of organizing schedules across various &lt;strong&gt;time zones&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Spurwing's bespoke integrations and open-source marketplace make our Scheduling API the perfect launch-point for businesses looking to branch out and include VR mechanics without overhauling their management systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Spurwing's Scheduling API offers a lifeline to companies and learning institutions looking to navigate the new world of work and learning.&lt;/p&gt;

&lt;p&gt;From a feature-rich open-source marketplace to unparalleled customer support, your institution will never be left hung out to dry. Our Scheduling API is easy to use and integrates seamlessly into your current systems.&lt;/p&gt;

&lt;p&gt;Our Scheduling API can help your learners stay on track, navigate the perils of the new world of work, and open your platforms to the learning solutions of the future.&lt;/p&gt;

&lt;p&gt;What's not to love? Join thousands of businesses that have adopted Spurwing and &lt;a href="https://www.spurwing.io/learn-more"&gt;schedule a 30-minute intro call with one of our developers today&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Continue reading what Spurwing can do here - &lt;a href="https://github.com/Spurwing/Appointment-Scheduling-API"&gt;https://github.com/Spurwing/Appointment-Scheduling-API&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>devops</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
