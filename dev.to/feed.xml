<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Cool Extensions for VS Code  </title>
      <author>Hardik Chopra</author>
      <pubDate>Thu, 17 Dec 2020 09:19:38 +0000</pubDate>
      <link>https://dev.to/hardikchopra242/cool-extensions-for-vs-code-48jc</link>
      <guid>https://dev.to/hardikchopra242/cool-extensions-for-vs-code-48jc</guid>
      <description>&lt;p&gt;&lt;strong&gt;VS Code&lt;/strong&gt; is among the most popular, free, open-source code-editors out there, and one of the reasons for such high demand is the extensions and plugins it offers.&lt;/p&gt;

&lt;p&gt;If you are a VS Code user you must be familiar with some popular extensions like &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live-Server&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;. If you haven't you must check them out.&lt;br&gt;
Here I am sharing my list of cool extensions for VS Code that you might don't know and can make your life easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-path-intellisense" class="anchor"&gt;
  &lt;/a&gt;
  1. Path Intellisense
&lt;/h2&gt;

&lt;p&gt;In large projects, remembering specific file names and the directories your files are in can get tricky. This extension will provide you IntelliSense for just that. &lt;strong&gt;As you start typing a path in quotations, you will get IntelliSense for directories and file names&lt;/strong&gt;. This will save you from spending a lot of time in the file explorer.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-git-lens" class="anchor"&gt;
  &lt;/a&gt;
  2. Git Lens
&lt;/h2&gt;

&lt;p&gt;There are a bunch of git extensions out there, but one is the most powerful with tons of features. You get &lt;strong&gt;blame information, line and file history, commit searching&lt;/strong&gt;, and so much more. If you need help with your Git workflow, start with this extension!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-bracket-pair-colorizer" class="anchor"&gt;
  &lt;/a&gt;
  3. Bracket Pair Colorizer
&lt;/h2&gt;

&lt;p&gt;With tons of nested code, it gets almost impossible to determine which brackets match up with each other. Bracket Pair Colorizer, as its same suggests, colors matching brackets to make your code much more readable. Trust me, you want this!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-browser-preview" class="anchor"&gt;
  &lt;/a&gt;
  4. Browser Preview
&lt;/h2&gt;

&lt;p&gt;If you use the Live-Server Extension, this one goes another step further in terms of convenience. It gives you a live-reloading &lt;strong&gt;preview right inside of VS Code&lt;/strong&gt;. No more having to tab over to your browser to see a small change!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-javascript-code-snippet" class="anchor"&gt;
  &lt;/a&gt;
  5. Javascript Code Snippet
&lt;/h2&gt;

&lt;p&gt;This extension provides you snippets for popular pieces of modern (ES6) JavaScript code. Now there's no need to retype the same piece of code over and over again.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-es-lint" class="anchor"&gt;
  &lt;/a&gt;
  6. ES Lint
&lt;/h2&gt;

&lt;p&gt;This extension can be configured to &lt;strong&gt;auto-format&lt;/strong&gt; your code as well as "yell" with linting errors/warnings. VS Code specifically is also perfectly configured to show you these errors/warnings.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-auto-rename-tags" class="anchor"&gt;
  &lt;/a&gt;
  7. Auto Rename Tags
&lt;/h2&gt;

&lt;p&gt;Need to rename an element in HTML? Well, with Auto Rename Tag, you just need to rename either the opening or closing tag, and the other will be &lt;strong&gt;renamed automatically&lt;/strong&gt;. Simple, but effective!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-quokkajs" class="anchor"&gt;
  &lt;/a&gt;
  8. Quokka.js
&lt;/h2&gt;

&lt;p&gt;Need a quick place to test out some JavaScript? Quokka gives you a &lt;strong&gt;JavaScript (and TypeScript) scratchpad in VS Code&lt;/strong&gt;. This means you can test out a piece of code right there in your favorite editor!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-better-comments" class="anchor"&gt;
  &lt;/a&gt;
  9. Better Comments
&lt;/h2&gt;

&lt;p&gt;This extension &lt;strong&gt;color codes&lt;/strong&gt; various types of comments to give them different significance and stand out from the rest of your code.&lt;br&gt;
You can color informatory comments with green color, to-do comments with orange color, and just like that.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-better-align" class="anchor"&gt;
  &lt;/a&gt;
  10. Better Align
&lt;/h2&gt;

&lt;p&gt;If you're the kind of person who loves &lt;strong&gt;perfect alignment&lt;/strong&gt; in your code, you need to get Better Align. You can align multiple variable declarations, trailing comments, sections of code, etc. There's no better way to get a feel for how amazing this extension is than installing it and giving it a try!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bonusfire" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Bonus!üî•&lt;/strong&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#-polacode" class="anchor"&gt;
  &lt;/a&gt;
  # Polacode
&lt;/h2&gt;

&lt;p&gt;You know those fancy code &lt;strong&gt;screenshots&lt;/strong&gt; you see in articles and tweets? Well, most likely they came from Polacode. It's super simple to use. Copy a piece of code to your clipboard, open up the extension, paste the code, and click to save your image!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QsJg4i2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/10f7j07ql34f8o5lpyy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QsJg4i2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/10f7j07ql34f8o5lpyy5.png" alt="PolaCode Demo Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;If you got to learn something new and useful show some love by giving this post a&lt;/em&gt; ‚ù§Ô∏è&lt;br&gt;
&lt;em&gt;If you also know some cool extensions then do share them in the comment section below.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;To download and to learn more about these extensions visit the links:&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;Path Intellisense&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Git Lens&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair Colorizer&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview"&gt;Browser Preview&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets"&gt;Javascript Code Snippet&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ES Lint&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tags&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode"&gt;Quokka&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Better Comments&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=wwm.better-align"&gt;Better Align&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode"&gt;Polacode&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live-Server&lt;/a&gt;&lt;br&gt;
*&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have read so far, save this post and share it with your programming buddies üòÉ&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Writing Your First REST API</title>
      <author>Adarsh pandya</author>
      <pubDate>Thu, 17 Dec 2020 06:50:16 +0000</pubDate>
      <link>https://dev.to/whoadarshpandya/writing-your-first-rest-api-5bgk</link>
      <guid>https://dev.to/whoadarshpandya/writing-your-first-rest-api-5bgk</guid>
      <description>&lt;p&gt;&lt;strong&gt;REST API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;so this is the second part to my previous post 'Understanding REST api',in this part we'll make a small REST - API in node JS. so without further ado let's start making your first ever API&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TOOLS&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;install node js (&lt;a href="https://nodejs.org"&gt;https://nodejs.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;install vs code (editor)&lt;/li&gt;
&lt;li&gt;install POSTMAN (for testing routes)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a folder&lt;/li&gt;
&lt;li&gt;initialize the folder with
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;open the folder in vscode&lt;/li&gt;
&lt;li&gt;type &lt;em&gt;ctrl+shift+`&lt;/em&gt; in your keyboard to open integrated terminal&lt;/li&gt;
&lt;li&gt;we'll be using expressjs for writing api&lt;/li&gt;
&lt;li&gt;so in terminal type &lt;code&gt;&lt;/code&gt;&lt;code&gt;npm install express uuid&lt;/code&gt;&lt;code&gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;uuid will help us to create a RFC random id&lt;/li&gt;
&lt;li&gt;in &lt;code&gt;&lt;/code&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;code&gt;&lt;/code&gt; go to scripts and replace tests with 
&lt;code&gt;&lt;/code&gt;&lt;code&gt;
"scripts":{
"start":"node app.js"
}
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;LET'S start&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;create a file called &lt;code&gt;&lt;/code&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;code&gt;&lt;/code&gt; in your root folder &lt;br&gt;
inside &lt;code&gt;&lt;/code&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;code&gt;&lt;/code&gt; write the following code&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5EjrvEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u5f47t3kzfklbjqblk9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5EjrvEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u5f47t3kzfklbjqblk9r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;all of our routes are stores in folder called &lt;code&gt;&lt;/code&gt;&lt;code&gt;routes/routes.js&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
inside &lt;code&gt;&lt;/code&gt;&lt;code&gt;routes.js&lt;/code&gt;&lt;code&gt;&lt;/code&gt; write the following code&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eM4KH00N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eysenjib97aqrt1swvzx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eM4KH00N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eysenjib97aqrt1swvzx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;how to check whether request working or not?&lt;/strong&gt;&lt;br&gt;
open the postman , if you want a get request ,select GET from a dropdown , and type endpoint in url section&lt;/p&gt;

&lt;p&gt;you can checkout the code at : &lt;a href="https://github.com/WhoAdarshPandya/rest_for_beginners"&gt;https://github.com/WhoAdarshPandya/rest_for_beginners&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in upcoming blogs , we'll cover how to deploy a complete rest api on heroku :)&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>express</category>
    </item>
    <item>
      <title>An Introduction to CSS Modules in React</title>
      <author>Yogesh Chavan</author>
      <pubDate>Thu, 17 Dec 2020 05:56:52 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/an-introduction-to-css-modules-in-react-2fkd</link>
      <guid>https://dev.to/myogeshchavan97/an-introduction-to-css-modules-in-react-2fkd</guid>
      <description>&lt;p&gt;Following are some of the ways of styling in React.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inline CSS&lt;/li&gt;
&lt;li&gt;Normal CSS&lt;/li&gt;
&lt;li&gt;CSS In JS libraries like styled-components&lt;/li&gt;
&lt;li&gt;CSS Modules&lt;/li&gt;
&lt;li&gt;SASS/SCSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we will explore how to use CSS Modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-css-module" class="anchor"&gt;
  &lt;/a&gt;
  What is a CSS module?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS module is a CSS file in which all class names and animation names are scoped locally by default&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, all the CSS declared in the file are local to the file in which this CSS file is imported.&lt;/p&gt;

&lt;p&gt;We will use CSS modules in the context of React but they are not limited to just React. &lt;/p&gt;

&lt;p&gt;You can use the CSS modules with any module bundler like webpack or browserify or any other way which supports importing CSS files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An alternative to CSS modules in React to create local scope is to use &lt;a href="https://styled-components.com/"&gt;styled components&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-css-modules" class="anchor"&gt;
  &lt;/a&gt;
  Benefits of CSS modules:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using CSS modules avoid namespace collision for CSS classes&lt;/li&gt;
&lt;li&gt;You can use the same CSS class in multiple CSS files&lt;/li&gt;
&lt;li&gt;You can confidently update any CSS file without worrying about affecting other pages&lt;/li&gt;
&lt;li&gt;Using CSS Modules generates random CSS classes when displayed in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CSS Modules are the preferred way of styling in Gatsby.js and Next.js.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-use-the-css-module" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need to use the CSS Module?
&lt;/h2&gt;

&lt;p&gt;In the React application, we usually create a single &lt;code&gt;.css&lt;/code&gt; file and import it to the main file so the CSS will be applied to all the components.&lt;/p&gt;

&lt;p&gt;But using CSS modules helps to create separate CSS files for each component and is local to that particular file and avoids class name collision.&lt;/p&gt;

&lt;p&gt;That's enough about the Introduction. Let's see how to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-css-modules" class="anchor"&gt;
  &lt;/a&gt;
  Using CSS Modules
&lt;/h2&gt;

&lt;p&gt;CSS modules support is provided by &lt;code&gt;create-react-app&lt;/code&gt; out-of-the-box so we don't need to install or configure anything to get it working.&lt;/p&gt;

&lt;p&gt;When working with React, it's a convention to name the CSS file with &lt;code&gt;.module.css&lt;/code&gt; extension.&lt;/p&gt;

&lt;p&gt;Suppose, we have a &lt;code&gt;header.module.css&lt;/code&gt; file in the &lt;code&gt;components&lt;/code&gt; folder with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="nx"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;then in the &lt;code&gt;components/Header.js&lt;/code&gt; file, we import this file in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;headerStyles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./header.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;headerStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt; &lt;span class="nx"&gt;Modules&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;CodeSandbox demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/objective-goldstine-8l2dg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Check out the preview for the above code sandbox &lt;a href="https://8l2dg.csb.app/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you check the preview above, you will see that even though we have given as &lt;code&gt;title&lt;/code&gt; as the class for h1, the final CSS class is different when displayed in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jwAr2RWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/65f85c1ee39681b05a4e5c428c4d8c84e84a41cb/css_name_change.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jwAr2RWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/65f85c1ee39681b05a4e5c428c4d8c84e84a41cb/css_name_change.png" alt="CSS Class name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So CSS Modules helps to create random classes when displayed in the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-hyphens-while-naming-classes" class="anchor"&gt;
  &lt;/a&gt;
  Using hyphens while naming classes
&lt;/h2&gt;

&lt;p&gt;It's common to name a CSS class with hyphen like &lt;code&gt;menu-items&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So to use that class inside components we need to use the bracket notation like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;headerStyles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menu-items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;CodeSandbox demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/quirky-wilbur-u9dq3"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-multiple-classes" class="anchor"&gt;
  &lt;/a&gt;
  Adding multiple classes
&lt;/h2&gt;

&lt;p&gt;Consider we have two separate classes like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.bold&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then to use both of these classes for the same element we need to use the ES6 template literal syntax like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;headerStyles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;headerStyles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;CodeSandbox demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/brave-knuth-tm1n4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CSS modules help to avoid global class name collisions&lt;/li&gt;
&lt;li&gt;They also help in keeping CSS files clean and easy to organize&lt;/li&gt;
&lt;li&gt;They are similar to styled-components for maintaining local scope&lt;/li&gt;
&lt;li&gt;They're scoped locally to avoid unintentional side effects elsewhere&lt;/li&gt;
&lt;li&gt;They are used as preferred styling mechanism in Gatsby.js and Next.js and they work out-of-the-box&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;You can find the complete GitHub source code for this article in &lt;a href="https://github.com/myogeshchavan97/css-modules-react-introduction"&gt;this repository&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Learning Modern JavaScript is not an easy task. But don't worry, &lt;a href="https://modernjavascript.yogeshchavan.dev/"&gt;this guide&lt;/a&gt; will help you to become an expert in Modern JavaScript and better at React.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to subscribe to get my weekly newsletter with amazing tips, tricks, and articles directly in your inbox &lt;a href="https://yogeshchavan.dev/"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>css</category>
    </item>
    <item>
      <title>Get recognized: add some pizzazz to your portfolio</title>
      <author>Thomas Fitzgerald</author>
      <pubDate>Thu, 17 Dec 2020 00:44:48 +0000</pubDate>
      <link>https://dev.to/fitzwebdev/get-recognized-add-some-pizzazz-to-your-portfolio-156d</link>
      <guid>https://dev.to/fitzwebdev/get-recognized-add-some-pizzazz-to-your-portfolio-156d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what" class="anchor"&gt;
  &lt;/a&gt;
  What?
&lt;/h2&gt;

&lt;p&gt;When conceptualizing my personal profile site, the number one thing I had in mind was that I needed something to reflect my personality, to 'pop'. I had been searching for ideas for a while when I came across a CodePen that immediately caught my attention. I had seen moving gradient backgrounds before, but not like this; sliding diagonal backgrounds that are set under the content. I loved it. &lt;/p&gt;

&lt;p&gt;We are going to recreate that together. What will this look like? Check out the live demo here:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fitzwebdev/embed/wvzJZVm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started" class="anchor"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;p&gt;Let's get some HTML written. We are going to create three divs (&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;) all with the class of background &lt;code&gt;class="background&lt;/code&gt;. So, what we have now is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We still need to do two things to the HTML. In the second and third &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;'s we need to add a second &lt;code&gt;class=""&lt;/code&gt;. Add 'background2' to the second div and add 'background3' to the third div. You‚Äôll see the reason in the following paragraphs and now the result should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background background2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background background3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-css" class="anchor"&gt;
  &lt;/a&gt;
  Add CSS
&lt;/h2&gt;

&lt;p&gt;Now it's time to add some style! To start, let‚Äôs go ahead and create our three background classes. So now we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.background2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.background3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now in the &lt;code&gt;.background{}&lt;/code&gt; class we are going to set up our movement with the &lt;code&gt;animation:&lt;/code&gt; property. We‚Äôll add the code and then I‚Äôll explain what it does. Add this code to the background:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slide&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What are we doing here? It‚Äôs a lot jammed into that statement. First, we are naming the animation 'slide' and then telling it to take 3 seconds to complete. Next, we are telling the timing function to 'ease-in-out', which means to start slow and end slow and to iterate infinitely. Lastly, alternate tells the animation to 'play forward and then in reverse'.&lt;/p&gt;

&lt;p&gt;Now let's add the rest of the properties to the &lt;code&gt;.background{}&lt;/code&gt; starting directly below the animation line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slide&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ff0004&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0065d7&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Oh my! What's going on with the &lt;code&gt;background-image:&lt;/code&gt; property? We set it up to be a linear-gradient. By default linear-gradient is from top to bottom. So, the first part where we set it to &lt;code&gt;-50deg&lt;/code&gt;, sets a specific angle. Next, linear-gradient needs at least two colors, so we are going to use a shade of red and a shade of blue &lt;code&gt;#ff0004&lt;/code&gt; and &lt;code&gt;#0065d7&lt;/code&gt; respectively. The &lt;code&gt;50%&lt;/code&gt; after each color is an optional stop position you can add to the property. In our case, we only want each color to cover 50% of the gradient. &lt;/p&gt;

&lt;p&gt;The remaining properties in the &lt;code&gt;.background{}&lt;/code&gt; make sure it's positioned where we want it, that it will be behind the content, and that it‚Äôs slightly opaque. Let's finish up with the &lt;code&gt;.background2{}&lt;/code&gt; and &lt;code&gt;.background3{}&lt;/code&gt; classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;alternate-reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.background3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For these two classes we just want to adjust a few specific qualities of the animation. In &lt;code&gt;.background2{}&lt;/code&gt; we want it to play in the alternate direction of the &lt;code&gt;.background{}&lt;/code&gt; class. We also want it to take a full one second longer to play (any faster reduces the UX). For &lt;code&gt;.background3{}&lt;/code&gt;, we just want it to take a full two seconds longer than the &lt;code&gt;.background{}&lt;/code&gt; class. &lt;/p&gt;

&lt;p&gt;Why don't &lt;code&gt;.background2{}&lt;/code&gt; and &lt;code&gt;.background3{}&lt;/code&gt; have all the same properties as &lt;code&gt;.background{}&lt;/code&gt;? Well, recall the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;'s we created in the HTML? All three contain the &lt;code&gt;.background{}&lt;/code&gt; class which handles all the color. The other two background classes will apply a white overlay effect in their respective &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;'s creating different shades, and with the slight animation property adjustments, give us the different shades of red and blue moving diagonally! BOOM!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-make-it-move" class="anchor"&gt;
  &lt;/a&gt;
  Let's make it move
&lt;/h2&gt;

&lt;p&gt;Time to add that last bit of CSS, the &lt;code&gt;@keyframes&lt;/code&gt;! A keyframe is a CSS rule that controls the intermediate steps in an animation sequence by declaring waypoints (keyframes) along the animation sequence. Put this at the bottom of the CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;slide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-25%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let‚Äôs break it down. We have 'slide', which is what we initially named the animation in the top-level &lt;code&gt;.background{}&lt;/code&gt; class. Next, we‚Äôll declare two waypoints. Essentially we‚Äôre directing the movement from top to bottom in a 'here' to 'there' way. So at the start of the animation (0%) we set it to an offset of &lt;code&gt;-25%&lt;/code&gt; and then at the end of the animation (100%) it moves to an offset of &lt;code&gt;25%&lt;/code&gt;. Our full CSS should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slide&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ff0004&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0065d7&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.background2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;alternate-reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.background3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;slide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-25%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To see this live, check out my profile site at &lt;a href="https://fitzweb.dev"&gt;fitzweb.dev&lt;/a&gt;!&lt;br&gt;
See the code at this GitHub Repo &lt;a href="https://github.com/fitzwebdev/fitzwebdev.github.io"&gt;fitzwebdev&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#call-to-action" class="anchor"&gt;
  &lt;/a&gt;
  Call to action
&lt;/h2&gt;

&lt;p&gt;Now that you have a fun little sliding diagonal background, make it your own! You can add a fourth or fifth background, using the same slide animation, but with the linear-gradient line set to be up and down. Then you'd have diagonal movement along with right to left vertical movement. There is a lot you can do with this to experiment with to understand the basics of what we've learned today. Go build and make it your own!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Asking for help 101 for trainee and junior developers (or anyone)</title>
      <author>stack overfleur</author>
      <pubDate>Wed, 16 Dec 2020 21:51:48 +0000</pubDate>
      <link>https://dev.to/autochocadora/asking-for-help-101-for-trainee-and-junior-developers-or-anyone-4d6c</link>
      <guid>https://dev.to/autochocadora/asking-for-help-101-for-trainee-and-junior-developers-or-anyone-4d6c</guid>
      <description>&lt;p&gt;Hi! My name's Flor, and I've been a front-end junior developer for about a year, after being a trainee for over 9 months. During the past few years, I had more than enough time to reflect (and discuss with other devs) about an issue I find quite interesting: &lt;strong&gt;asking for help&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Asking for help (to devs, Google, yourself) is not as simple as it sounds, and I strongly believe is one of those superpowers you develop (like a Pok√©mon or a Digimon) as you evolve, both as a person and a professional. &lt;/p&gt;

&lt;p&gt;Knowing how or when to ask for help is an ability that's constantly changing, evolving. It's one of the pillars of learning how to communicate as a developer with tech or non-technical people, so, what I'll try to do over the next few lines, is to give some advice on how to navigate the "asking for help world" when you're a trainee or a junior developer, based on my colleagues, mentors and developer friend's advice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-being-a-beginner" class="anchor"&gt;
  &lt;/a&gt;
  About being a beginner
&lt;/h3&gt;

&lt;p&gt;First and foremost, in general, being a trainee or junior developer means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every five minutes, you get an internal ping sent by your brain telling you you're about to lose it and you're going to get fired unless you prove you know something that you probably don't because, well, you're a trainee/junior.&lt;/li&gt;
&lt;li&gt;Asking for help feels like disclosing you don't know stuff you should because you've been tested for this job, and once your co-workers find out you're not superb, you're gonna get looked down upon, forever and ever.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The level of anxiety is way out of this world&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm a very anxious person myself so, I get you. It doesn't matter if I'm surrounded by a very healthy environment full of amazing people, I always have that ping on my head reminding me I should be doing better. Luckily, I've been guided by good people that have taught me how to reinvent this state of mind and organize myself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-steps-doing-your-homework" class="anchor"&gt;
  &lt;/a&gt;
  The steps: doing your homework
&lt;/h3&gt;

&lt;p&gt;So, &lt;strong&gt;boom&lt;/strong&gt;, you have a doubt. You don't know how to do something.&lt;/p&gt;

&lt;p&gt;1) Try not to freak out. &lt;em&gt;"Easy for you to say"&lt;/em&gt;, I know, but trust me on this, &lt;strong&gt;just try&lt;/strong&gt;. Take a deep breath, hug a plushie, take a look over the window, take a sip of water. The computer's not gonna blow up because you're stuck on an infinite loop. There's not a single developer in the entire world that hasn't asked Google or a co-worker something they don't know nor remember, even if they've already done it before or used that tool for the 34353453rd time. You got the job, you are a developer, you have the skills to work this out. &lt;strong&gt;You got this&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;2) Before asking your coworker for help, &lt;strong&gt;let's try finding a solution by ourselves!&lt;/strong&gt; It doesn't matter if we don't, what matters is showing your coworkers (and yourself) that you're trying to conquer your fears, you're trying to break out of your shell, &lt;strong&gt;you're trying&lt;/strong&gt;. This will probably lead to a sense of personal reward because by doing something you're going forward, you're moving towards your goal.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"But I don't know how google my problem because I don't understand what's going on"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Which are the steps that lead you to the problem you're having?&lt;/strong&gt; Try doing a recap of what you've done, step by step, and then write those steps down. Sometimes while doing this, you end up finding the root of your problem, a core concept that maybe you need to revisit, or you just calm yourself down. &lt;strong&gt;Organization is key.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I have the list, but now I have more questions than before"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;4) Good! &lt;strong&gt;Write down those questions&lt;/strong&gt;. At this point, it really doesn't matter if you're not using technical concepts, you're not supposed to know exactly what's going on. If you're working remote and your mentor/coworker isn't available for a call, I &lt;em&gt;strongly&lt;/em&gt; recommend also gathering visual information such as screenshots, maybe a GIF or a short video reproducing the issue (I use QuickTime almost every day).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I've written down the steps, I've tried googling solutions, I have my screenshots, I haven't solved this and I feel like I'm going to die, now what?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;5) Gather what you've googled, the steps, the screenshots, and with all of that information, &lt;strong&gt;take a deep breath and ask&lt;/strong&gt; your coworker or your mentor if they have some time available to help you go over a coding problem you're dealing with. Let them know you've done all of this research, and enjoy taking a look at other people's mind, learn from their way of approaching conflicts and ask questions if you need to.&lt;/p&gt;

&lt;p&gt;That's it, &lt;strong&gt;YOU DID IT!&lt;/strong&gt; You calmed yourself down, organized your mind, did your research, you put down your time trying to get out of the problem, and now you're asking for help.&lt;/p&gt;

&lt;p&gt;Asking for help and working side by side with another developer is how we grow. I'm sure there are people that prefer going over their learning path by themselves and there will come a time when we learn to do this by ourselves, but for me, the bonds you create when giving those first steps into becoming a confident developer are the strongest steps, and those lessons are the most joyful ones. Enjoy :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks @mermadly, @messycatx and @mimirRamona for helping me clean up this article &amp;lt;3&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Learn All 8 Background CSS Properties in 5¬†Minutes</title>
      <author>Mateusz Hadry≈õ</author>
      <pubDate>Wed, 16 Dec 2020 21:02:22 +0000</pubDate>
      <link>https://dev.to/hadrysmateusz/learn-all-8-background-css-properties-in-5-minutes-2lk4</link>
      <guid>https://dev.to/hadrysmateusz/learn-all-8-background-css-properties-in-5-minutes-2lk4</guid>
      <description>&lt;p&gt;I remember when I first tried setting an image background in CSS.&lt;/p&gt;

&lt;p&gt;What I thought would be a simple task took me down a rabbit hole of learning 8 different &lt;code&gt;background-*&lt;/code&gt; properties. It took me hours to figure out what they all did and how they interacted.&lt;/p&gt;

&lt;p&gt;Now, I want to teach you everything you need to know about CSS background. In minutes instead of hours.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#color" class="anchor"&gt;
  &lt;/a&gt;
  üé® Color
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Property:&lt;/strong&gt; &lt;code&gt;background-color&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;code&gt;transparent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The most commonly used background property. It lets us change the color of an element's background.&lt;/p&gt;

&lt;p&gt;The color can be specified using rgb, hsl or hex notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Without Transparency */&lt;/span&gt;
&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;hsl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#000000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/* With Transparency */&lt;/span&gt;
&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;hsla&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#000000&lt;/span&gt;&lt;span class="nt"&gt;ff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;You can also use one of the &lt;a href="https://htmlcolorcodes.com/color-names/"&gt;140 predefined colors&lt;/a&gt;, or the &lt;code&gt;transparent&lt;/code&gt; keyword.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#image" class="anchor"&gt;
  &lt;/a&gt;
  üì∑ Image
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Property:&lt;/strong&gt; &lt;code&gt;background-image&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;code&gt;none&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The star of the show. Almost all other background properties modify it in some way.&lt;/p&gt;

&lt;p&gt;It allows us to set an image as the element's background. &lt;/p&gt;

&lt;p&gt;To do it, use the &lt;code&gt;url()&lt;/code&gt; function with a relative or absolute URL as its parameter. The URL should be wrapped in quotes &lt;code&gt;"&lt;/code&gt; or apostrophes &lt;code&gt;'&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you choose to go with a relative URL, remember that it's relative to the stylesheet, not the webpage.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;"image.png"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;But why can't we just write the URL without some fancy &lt;em&gt;function&lt;/em&gt;? Because there are other image sources in CSS. For example: gradients.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Yeah, gradients are images in CSS. If you find this hard to remember like me, use the background shorthand. It does the remembering for you üòÑ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An article about the background shorthand is coming in a few days. &lt;a href="https://twitter.com/HadrysMateusz"&gt;Follow me on twitter&lt;/a&gt; to get notified when it's published.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#repeat" class="anchor"&gt;
  &lt;/a&gt;
  Repeat
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Property:&lt;/strong&gt; &lt;code&gt;background-repeat&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;code&gt;repeat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;background-repeat&lt;/code&gt; determines what happens, if the image is smaller than the element it serves as a background for.&lt;/p&gt;

&lt;p&gt;The possible values of &lt;code&gt;background-repeat&lt;/code&gt; are better shown than told:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfozHyXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/814cbr2bvjqf00w3ptwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfozHyXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/814cbr2bvjqf00w3ptwp.png" alt="Example showing the different background-repeat values"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#size" class="anchor"&gt;
  &lt;/a&gt;
  Size
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Property:&lt;/strong&gt; &lt;code&gt;background-size&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;code&gt;auto auto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This property controls the size of the background image. Most of the time it's used with one of two keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cover&lt;/code&gt; - It fills (covers) the entire area of the element with the image, without stretching. Even if it means that parts of the image won't be visible.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;contain&lt;/code&gt; - The opposite of &lt;code&gt;cover&lt;/code&gt;. It makes sure that the entire image fits (is contained) in the element, without squashing. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unless &lt;code&gt;background-size&lt;/code&gt; is set to &lt;code&gt;no-repeat&lt;/code&gt;, setting &lt;code&gt;background-size: contain&lt;/code&gt; will result in image tiling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAKfy5Xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ycusgy7k8yzctvxp6sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAKfy5Xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ycusgy7k8yzctvxp6sw.png" alt="Example showing how the cover and contain values work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;background-size&lt;/code&gt; can also be a percentage or length (&lt;code&gt;px&lt;/code&gt;,&lt;code&gt;cm&lt;/code&gt;,&lt;code&gt;em&lt;/code&gt; etc.).&lt;/p&gt;

&lt;p&gt;A percentage value is relative to the element's size, or more specifically the area specified by &lt;code&gt;background-origin&lt;/code&gt;. More on that property later.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;background-size&lt;/code&gt; can be set using a &lt;strong&gt;one-value&lt;/strong&gt; or &lt;strong&gt;two-value&lt;/strong&gt; syntax.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When only one value is provided, it sets the image's width. Height is set automatically to preserve proportions.&lt;/li&gt;
&lt;li&gt;When two values are provided, the first one sets the width, and the second sets the height. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When using two values, the image might get stretched. To prevent stretching, set one value using a length/percentage and the other using the &lt;code&gt;auto&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDfnc-ne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cmp50zyl3xdkeremylvd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDfnc-ne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cmp50zyl3xdkeremylvd.png" alt="Six example values for background-size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#position" class="anchor"&gt;
  &lt;/a&gt;
  Position
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Property:&lt;/strong&gt; &lt;code&gt;background-position&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;code&gt;0% 0%&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maybe you've noticed that when we change an element's size, it stays glued to the top-left corner. We can change that by using &lt;code&gt;background-position&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are four keywords we can use: &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt;. As well as any length or percentage value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rjNxlS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3hirghs6ih0bj6ojuln7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rjNxlS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3hirghs6ih0bj6ojuln7.gif" alt="Animated example showing many possible background-position values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like &lt;code&gt;background-size&lt;/code&gt;, we can use a &lt;strong&gt;one-value&lt;/strong&gt; or &lt;strong&gt;two-value&lt;/strong&gt; syntax.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When using one value, it sets the image's horizontal (x-axis) position. The vertical (y-axis) position defaults to 50%.&lt;/li&gt;
&lt;li&gt;When using two values, the first sets the horizontal position and the second: vertical.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Length values set the distance of the image's top-left corner from the element's top-left corner. Percentage and keyword values set the position of the image's mid-point on a given axis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Combining &lt;code&gt;background-position: center&lt;/code&gt; with &lt;code&gt;background-size: cover&lt;/code&gt; or &lt;code&gt;contain&lt;/code&gt; is an easy way to achieve responsive images, that scale well with the element and the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z86bAx9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qyu1ghsesmpsd0xitdr2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z86bAx9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qyu1ghsesmpsd0xitdr2.gif" alt="Animated example showing how cover and contain combined with background-position: center react to resizing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#attachment" class="anchor"&gt;
  &lt;/a&gt;
  Attachment
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Property:&lt;/strong&gt; &lt;code&gt;background-attachment&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;code&gt;scroll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;background-attachment&lt;/code&gt; allows you to control how your background image reacts to scrolling. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Possible values are&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;scroll&lt;/code&gt; - Scrolls with the page, but not with the element's contents.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fixed&lt;/code&gt; - Fixed to the viewport. Acts like a window to something behind the page.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;local&lt;/code&gt; - Scrolls with the page and the element's contents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're confused by that, don't worry. It's tricky to understand without examples. Play around with the demo below until you get a better feeling for how this property works.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ematte/embed/GRjJjro?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#origin" class="anchor"&gt;
  &lt;/a&gt;
  Origin
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Property:&lt;/strong&gt; &lt;code&gt;background-origin&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;code&gt;padding-box&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This property sets the background's origin. It uses three keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;border-box&lt;/code&gt; -  The background starts at the outer edge of the border. It goes under it, which you can see if the border is semi-transparent, &lt;code&gt;dashed&lt;/code&gt;, or &lt;code&gt;dotted&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;padding-box&lt;/code&gt; - The background starts at the inner edge of the border.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content-box&lt;/code&gt; - The background starts where the element's content does.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--boqm1lC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rgydlk4wvxm66jq5ogx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--boqm1lC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rgydlk4wvxm66jq5ogx6.png" alt="3 Images showing the effects of different background-origin values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;background-position&lt;/code&gt; and &lt;code&gt;background-size&lt;/code&gt; are relative to the box set by this property.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#clip" class="anchor"&gt;
  &lt;/a&gt;
  Clip
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Property:&lt;/strong&gt; &lt;code&gt;background-clip&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;code&gt;border-box&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Even though &lt;code&gt;background-clip&lt;/code&gt; shares most of its values with &lt;code&gt;background-origin&lt;/code&gt; and their results might look similar, they are actually quite different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--boqm1lC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rgydlk4wvxm66jq5ogx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--boqm1lC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rgydlk4wvxm66jq5ogx6.png" alt="3 Images showing the effects of different background-clip values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This property doesn't modify the position of the background in any way. &lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;clips&lt;/strong&gt; the background to the selected box. This means that any parts of the background outside the area set by this property will not be visible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;border-box&lt;/code&gt; -  The background is clipped to the outer edge of the border. It will be visible under the border, padding and content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;padding-box&lt;/code&gt; - The background is clipped to the inner edge of the border. It will be visible under the padding and content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content-box&lt;/code&gt; - The background is clipped to the content area. It will only be visible under the element's content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text&lt;/code&gt; - The background will only be visible under the element's text content. Make sure to set &lt;code&gt;color: transparent&lt;/code&gt; to see the background. This can be used to achieve some cool effects like: gradient text.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If the area set by &lt;code&gt;background-clip&lt;/code&gt; is smaller than the one set by &lt;code&gt;background-origin&lt;/code&gt; the outer parts of the image will be cut off. Make sure there's nothing important there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#layers" class="anchor"&gt;
  &lt;/a&gt;
  Layers
&lt;/h1&gt;

&lt;p&gt;All background properties, except &lt;code&gt;background-color&lt;/code&gt; accept multiple values, separated by commas. That's because every element can have multiple background layers.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;cat&lt;/span&gt;&lt;span class="nc"&gt;.png&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;grass-texture&lt;/span&gt;&lt;span class="nc"&gt;.jpg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background-repeat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;no-repeat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;background-attachment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;scroll&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;local&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;green&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The first (leftmost) value corresponds to the top layer. The last (rightmost) value, is the bottom layer.&lt;/p&gt;

&lt;p&gt;But managing layers across multiple properties can get messy pretty quickly. For example: &lt;em&gt;What if you decide to add another image layer at the top of the layer stack but forget to update other `background-&lt;/em&gt;` properties?*&lt;/p&gt;

&lt;p&gt;This problem can be prevented by using the background shorthand.&lt;/p&gt;



&lt;p&gt;I hope this introduction made this topic easier to understand, and can serve as a reference, if you ever need a refresher.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading. If you have any questions, ask in the comments. Follow me for more web development tips.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#another-article-you-might-enjoy" class="anchor"&gt;
  &lt;/a&gt;
  Another article you might enjoy
&lt;/h1&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hadrysmateusz" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzSRQ-BO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gKxUFTo---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/181202/84e40fe5-169c-40f5-933d-f17571ec8dd0.png" alt="hadrysmateusz image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hadrysmateusz/full-text-styling-with-a-single-line-of-css-3kbd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Full Text Styling With a Single Line of¬†CSS&lt;/h2&gt;
      &lt;h3&gt;Mateusz Hadry≈õ „Éª Nov 11 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>11 Golden Rules for A11Y</title>
      <author>ezgihendrickx</author>
      <pubDate>Wed, 16 Dec 2020 19:10:29 +0000</pubDate>
      <link>https://dev.to/ezgihendrickx/11-golden-rules-for-a11y-146c</link>
      <guid>https://dev.to/ezgihendrickx/11-golden-rules-for-a11y-146c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#lets-make-our-websites-accessible-for-everyone" class="anchor"&gt;
  &lt;/a&gt;
  Let's make our websites accessible for everyone!
&lt;/h1&gt;

&lt;p&gt;As a self-taught front-end developer, when I discovered the concepts of accessibility and inclusive design a few months ago, I did not know much about it. But I realised that many of us, in this web dev field, also don't know much about it. It is regrettable but accessibility is not the best field to invest in these days. It is just a popular buzzword which sometimes comes in and out of our attention. But we can really make a difference when we decide to start learning more about this. And possibly this would just be a small drop in the ocean but we really need that to achieve our goals. &lt;br&gt;
&lt;em&gt;Are you ready or eager to learn more?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-raw-a11y-endraw-stand-for" class="anchor"&gt;
  &lt;/a&gt;
  What does &lt;code&gt;a11y&lt;/code&gt; stand for?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚Äúa11y‚Äù stands for ‚Äúaccessibility.‚Äù It is a numeronym, with 11 representing the count of letters between the letter a and the letter y. Other numeronyms you may be familiar with include: i18n (internationalization), P2P (peer to peer) etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#11-golden-rules-for-accessibility" class="anchor"&gt;
  &lt;/a&gt;
  11 Golden Rules for Accessibility
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#which-steps-should-we-follow-when-we-create-a-website" class="anchor"&gt;
  &lt;/a&gt;
  Which steps should we follow when we create a website?
&lt;/h3&gt;

&lt;p&gt;The below rules are important and deserve our attention not only for accessibility but also for the usability of your website.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Always use a meaningful &lt;code&gt;Alt text&lt;/code&gt;:&lt;br&gt;
&lt;strong&gt;Screen readers&lt;/strong&gt; may read out ugly, nonsense filenames to describe images. We don't want that as responsible developers right üòè ?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define the level of accessibility of your website and follow the &lt;strong&gt;guidelines&lt;/strong&gt; : &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/"&gt;Web Content Accessibility Guidelines&lt;/a&gt; &lt;br&gt;
This website should be your holy book when you want to get inspired üìï .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimise &lt;strong&gt;Color Contrast&lt;/strong&gt;: &lt;a href="https://www.getstark.co/"&gt;Getstark&lt;/a&gt; This is one of the color optimization platforms where you can find more information about optimising colours for accessibility. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYzhwW_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.getstark.co/sketch-action-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYzhwW_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.getstark.co/sketch-action-2.png" alt="Color optimization on Sketch"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Simplify&lt;/strong&gt; the language: We don't need complicated or sophisticated words to have a website. Someone once said that if you cannot explain your work simply then you don't understand it well enough.. Keep your content always simple and understandable, and keep your layout clear.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lead&lt;/strong&gt; the users: e.g. Always use form labels to describe input fields and place holders. Keep in mind that acceptable input field examples are really handy and useful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always provide &lt;strong&gt;captions&lt;/strong&gt; for video content. Without captions it is meaningless to a person with a permanent or temporary visual problem. Never ever have your video automatically begin playing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't forget to test &lt;strong&gt;keyboard navigation&lt;/strong&gt;. A user should have the right to use his/her keyboard to navigate the website. We cannot take this advantage away from them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create &lt;strong&gt;large buttons!&lt;/strong&gt; You don't have to be a designer to create large buttons. In this way it is more clear that this is a clickable button and it calls an action. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create &lt;strong&gt;understandable links&lt;/strong&gt;: Have you ever thought: "I don't know where to click or where to go"? Yes! This is the reason why we need to be clear when we create links. Every link should have a meaningful reason behind it. So don't just make a href because you love a href..&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;semantic&lt;/strong&gt; HTML elements: What on earth is semantic markup? Semantic elements mean elements with a meaning.&lt;br&gt;
&lt;br&gt;
&lt;code&gt;&amp;lt;main&amp;gt;, &amp;lt;nav&amp;gt;, &amp;lt;header&amp;gt;, &amp;lt;section&amp;gt;, &amp;lt;article&amp;gt;, &amp;lt;form&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
and so on. Semantic elements clearly define its content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;ARIA landmark&lt;/strong&gt; roles to add feature context to HTML elements.&lt;br&gt;
&lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/main.html"&gt;Aria Landmark Features&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you followed all the golden rules and are not sure where to ask, then ask the community: &lt;a href="https://www.a11yproject.com/"&gt;A11Y Project&lt;/a&gt;; they have the Accessibility Checklist for beginners to guide and enlighten you.. &lt;/p&gt;

&lt;p&gt;In a nutshell, Accessibility and Inclusive Design are really import to increase web content quality and make the standards higher on the web. Everyone has the right to reach your content. We should be more aware of these different aspects of web design and development.. I encourage you to everyday apply one new accessibility guideline on your website and enjoy while teaching to others.&lt;/p&gt;

&lt;p&gt;Useful links to learn more: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/"&gt;https://www.w3.org/WAI/standards-guidelines/wcag/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.a11yproject.com/"&gt;https://www.a11yproject.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/web-accessibility-introduction"&gt;https://www.edx.org/course/web-accessibility-introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.webaccessibility.com/"&gt;https://www.webaccessibility.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please do not hesitate to give any comment and add more sources or knowledge about accessibility. &lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>How to Gamify Coding with Charlotte Cheng &amp; Kevin Whinnery</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 16 Dec 2020 18:40:23 +0000</pubDate>
      <link>https://dev.to/devteam/how-to-gamify-coding-with-charlotte-cheng-kevin-whinnery-4bne</link>
      <guid>https://dev.to/devteam/how-to-gamify-coding-with-charlotte-cheng-kevin-whinnery-4bne</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Catch S3E6 of DevDiscuss here on DEV:&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s3-e6-how-to-gamify-coding"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S3:E6 - How to Gamify Coding&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s3-e6-how-to-gamify-coding" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s3-e6-how-to-gamify-coding" src="/assets/playbutt.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s3-e6-how-to-gamify-coding" src="/assets/pausebutt.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s3-e6-how-to-gamify-coding" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;
  &lt;div class="hidden-audio" id="hidden-audio-s3-e6-how-to-gamify-coding"&gt;
    
      
      Your browser does not support the audio element.
    
    &lt;div id="progressBar" class="audio-player-display"&gt;
      &lt;a href="/devdiscuss/s3-e6-how-to-gamify-coding"&gt;
        &lt;img id="episode-profile-image" alt="S3:E6 - How to Gamify Coding" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
        &lt;img id="animated-bars" src="/assets/animated-bars.gif" alt="animated volume bars"&gt;
      &lt;/a&gt;
      &lt;span id="barPlayPause"&gt;
        &lt;img class="butt play-butt" src="/assets/playbutt.png" alt="play"&gt;
        &lt;img class="butt pause-butt" src="/assets/pausebutt.png" alt="pause"&gt;
      &lt;/span&gt;
      &lt;span id="volume"&gt;
        &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
          &lt;span id="volbutt"&gt;
            &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SnhE4kcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/volume.png"&gt;
          &lt;/span&gt;
          &lt;span class="range-wrapper"&gt;
            
          &lt;/span&gt;
        &lt;/span&gt;
        &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
          &lt;img alt="mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--prPRZNLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/volume-mute.png"&gt;
        &lt;/span&gt;
        &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
        &lt;span id="buffer"&gt;&lt;/span&gt;
        &lt;span id="progress"&gt;&lt;/span&gt;
        &lt;span id="time"&gt;initializing...&lt;/span&gt;
        &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
      &lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This week, &lt;a class="comment-mentioned-user" href="https://dev.to/jess"&gt;@jess&lt;/a&gt;
 and I focused on gamified coding. More specifically, we talked about games that turn the experience of coding into a fun, educational challenge, what's important for developers to understand about this awesome category of software development, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-this-episode-we-were-joined-by-two-developer-guests-who-taught-us-a-lot-about-gamifying-the-coding-learning-process" class="anchor"&gt;
  &lt;/a&gt;
  In this episode, we were joined by two developer guests who taught us a lot about gamifying the coding learning process...
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/charlottedraws"&gt;Charlotte Cheng&lt;/a&gt;&lt;/strong&gt;, Senior Curriculum Developer at CodeCombat ‚Äî an educational video game for learning software programming concepts, Python, JavaScript, and HTML. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.twitter.com/kevinwhinnery"&gt;Kevin Whinnery&lt;/a&gt;&lt;/strong&gt;, Lead Developer of TwilioQuest at Twilio ‚Äî  a PC role-playing game that teaches people how to code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; ‚Äî or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links" class="anchor"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/devdiscuss/id1513053883"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/24oUKb0GA1BqDoXWlsOa8a"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzIz?sa=X&amp;amp;ved=0CAQQkfYCahcKEwigwNu8ktPtAhUAAAAAHQAAAAAQAw"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s3e6-how-to-gamify-coding-C68DfM7vaAS/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=159473429"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devdiscuss/episodes/73"&gt;Transcript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pca.st/aawir3rx"&gt;Pocket Casts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Our season three sponsors, &lt;a href="https://triplebyte.com/a/YU8fSn0/d"&gt;Triplebyte&lt;/a&gt;, &lt;a href="https://www.pluralsight.com/product/skills/free"&gt;PluralSight&lt;/a&gt;, and &lt;a href="https://rudderstack.com/"&gt;Rudderstack&lt;/a&gt;&lt;/em&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  üó£Ô∏èüó£Ô∏èüó£Ô∏è
&lt;/h1&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>How to use socket.io-client correctly in React app</title>
      <author>bravemaster619</author>
      <pubDate>Wed, 16 Dec 2020 17:56:13 +0000</pubDate>
      <link>https://dev.to/bravemaster619/how-to-use-socket-io-client-correctly-in-react-app-o65</link>
      <guid>https://dev.to/bravemaster619/how-to-use-socket-io-client-correctly-in-react-app-o65</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The following is my first blog to achieve 8k+ view and 1st in Google SERP rank. However, it has some concerns and I decided to rewrite it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/bravemaster619" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLRJEhTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eDdGUyUb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/334022/6fa6dabd-2414-4839-8bce-3577db733796.jpg" alt="bravemaster619 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/bravemaster619/how-to-prevent-multiple-socket-connections-and-events-in-react-531d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to prevent multiple socket connections and events in React&lt;/h2&gt;
      &lt;h3&gt;bravemaster619 „Éª Mar 22 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#socket&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#socketio&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#spa&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In this article, I used global &lt;code&gt;socket&lt;/code&gt; variable to manage socket events in a React app. Like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// service/socket.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;socketio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SOCKET_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// elsewhere&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;service/socket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, fellow devs recommended to use React context API in their comments. And I began to think that using global variable is not a React-way either. (Although I believe that works too. Because socket does not change its state). &lt;/p&gt;

&lt;p&gt;I updated my previous article, but I think it needs more explanation. So I decided to write an article that shows how to use React context API to manage one global socket instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-socket-context" class="anchor"&gt;
  &lt;/a&gt;
  1. Create Socket Context
&lt;/h3&gt;

&lt;p&gt;We will use &lt;a href="https://ko.reactjs.org/docs/hooks-reference.html#usecontext"&gt;useContext&lt;/a&gt; hook to provide SocketContext to entire app.&lt;/p&gt;

&lt;p&gt;Create a file in &lt;code&gt;context/socket.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;socketio&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;socket.io-client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SOCKET_URL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;socketio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SOCKET_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SocketContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-use-socket-context-and-provide-a-value" class="anchor"&gt;
  &lt;/a&gt;
  2. Use socket context and provide a value
&lt;/h3&gt;

&lt;p&gt;Add SocketContext provider at the root of your project or at the largest scope where socket is used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;SocketContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;context/socket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/Child&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SocketContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SocketContext.Provide&lt;/span&gt;&lt;span class="err"&gt;r
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-now-you-can-use-socket-in-any-child-component" class="anchor"&gt;
  &lt;/a&gt;
  3. Now you can use socket in any child component
&lt;/h3&gt;

&lt;p&gt;For example, in &lt;code&gt;GrandChild&lt;/code&gt; component, you can use socket like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;SocketContext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;context/socket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GrandChild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SocketContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;joined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setJoined&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleInviteAccepted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setJoined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleJoinChat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SEND_JOIN_REQUEST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;


  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// as soon as the component is mounted, do the following tasks:&lt;/span&gt;

    &lt;span class="c1"&gt;// emit USER_ONLINE event&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USER_ONLINE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

    &lt;span class="c1"&gt;// subscribe to socket events&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JOIN_REQUEST_ACCEPTED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleInviteAccepted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// before the component is destroyed&lt;/span&gt;
      &lt;span class="c1"&gt;// unbind all event handlers used in this component&lt;/span&gt;
      &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JOIN_REQUEST_ACCEPTED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleInviteAccepted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;joined&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;send&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="nx"&gt;chat&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Congratulations&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;accepted&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="nx"&gt;chat&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleJoinChat&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Join&lt;/span&gt; &lt;span class="nx"&gt;Chat&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OK, here are some explanations:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-raw-usecontext-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;useContext&lt;/code&gt;?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useContext&lt;/code&gt; provides a React way to use global state&lt;/li&gt;
&lt;li&gt;You can use context in any child component&lt;/li&gt;
&lt;li&gt;Context values are states. React notices their change and triggers re-render.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-raw-usecallback-endraw-why-did-you-put-every-handlers-inside-raw-usecallback-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;useCallback&lt;/code&gt;? Why did you put every handlers inside &lt;code&gt;useCallback&lt;/code&gt;?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useCallback&lt;/code&gt; prevents reassigning whenever there is state update&lt;/li&gt;
&lt;li&gt;Functions will be reassigned only when elements in the second argument are updated&lt;/li&gt;
&lt;li&gt;Since we passed an empty array to second argument, functions are assigned for only once&lt;/li&gt;
&lt;li&gt;You may forget (or don't bother) to use &lt;code&gt;useCallback&lt;/code&gt;. But you may face serious performance issues if there are many states and components in your project&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-raw-useeffect-endraw-and-that-raw-socket-endraw-array-provided-as-the-second-argument" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;useEffect&lt;/code&gt; and that &lt;code&gt;[socket]&lt;/code&gt; array provided as  the second argument?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The second argument is called dependency array. React will watch dependency array elements and whenever one of them is updated, the first argument function will be executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you omit dependency array in &lt;code&gt;useEffect&lt;/code&gt;, the function will be executed whenever there is a state update.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the dependency array is an empty array, the function will be executed only once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In React functional component, you can write &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt; alternatives in the following way:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// here is componentDidMount&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// here is componentWillUnmount&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is strongly recommended to put every state that's used in the first argument function to the dependency array. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;socket&lt;/code&gt; is a "global" state, so the second argument should be &lt;code&gt;[socket]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#bonus" class="anchor"&gt;
  &lt;/a&gt;
  BONUS
&lt;/h3&gt;

&lt;p&gt;If you want to use JWT token to authenticate socket connections, you can do like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAuthToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// get jwt token from local storage or cookie&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;socketio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SOCKET_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;socketio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SOCKET_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then in socket server, you can get jwt token like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SocketIO&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SocketIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwtMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handshake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// verify token&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jwtMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>socket</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Proxy &amp; Reflect API in Javascript</title>
      <author>CodeOzz</author>
      <pubDate>Wed, 16 Dec 2020 17:29:12 +0000</pubDate>
      <link>https://dev.to/codeozz/proxy-reflect-api-in-javascript-51la</link>
      <guid>https://dev.to/codeozz/proxy-reflect-api-in-javascript-51la</guid>
      <description>&lt;p&gt;These both feature appears in ES6, both work very well together !&lt;/p&gt;

&lt;p&gt;First,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proxy" class="anchor"&gt;
  &lt;/a&gt;
  Proxy
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;proxy&lt;/strong&gt; is an exotic object, he doesn't have properties ! It wraps the behavior of an object. It needs two arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;target:&lt;/em&gt; is the object that will be proxied/wrapped by the proxy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;handler:&lt;/em&gt; is the configuration of the proxy, it will intercept operation on the target (get, set ect..), you will see example !&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;proxy&lt;/strong&gt; you can create &lt;code&gt;traps&lt;/code&gt; like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`This &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; prop don't exist on this object !`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totoProxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;totoProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;totoProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="c1"&gt;// This c prop don't exist on this object !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each internal Object 'method' has his own &lt;em&gt;Target function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bellow it's a list of object methods equivalent into Target&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;object method&lt;/th&gt;
&lt;th&gt;target&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;object[prop]&lt;/td&gt;
&lt;td&gt;get&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;object[prop] = 55&lt;/td&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;new Object()&lt;/td&gt;
&lt;td&gt;construct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object.keys&lt;/td&gt;
&lt;td&gt;ownKeys&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Here the full list üîó &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Parameters of Target function can change depending on the function.&lt;/p&gt;

&lt;p&gt;For example, for &lt;strong&gt;get&lt;/strong&gt; function take &lt;em&gt;(target, prop, receiver(proxy itself))&lt;/em&gt; but for &lt;strong&gt;set&lt;/strong&gt; function it's &lt;em&gt;(target, prop, value (to set), receiver)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-usage" class="anchor"&gt;
  &lt;/a&gt;
  Example of usage
&lt;/h3&gt;

&lt;p&gt;We can create üîì secret property !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;_secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;***&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access denied&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access denied&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="c1"&gt;// set methods return boolean,&lt;/span&gt;
    &lt;span class="c1"&gt;// in order to let us know if the value has been correctly set !&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;ownKeys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totoProxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;proxy1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 'name', 'age'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reflect" class="anchor"&gt;
  &lt;/a&gt;
  Reflect
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Reflect&lt;/strong&gt; is a static class that simplifies creation of proxy.&lt;/p&gt;

&lt;p&gt;Each internal Object method has his own Reflect methods&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;object method&lt;/th&gt;
&lt;th&gt;Reflect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;object[prop]&lt;/td&gt;
&lt;td&gt;Reflect.get&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;object[prop] = 55&lt;/td&gt;
&lt;td&gt;Reflect.set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;new Object()&lt;/td&gt;
&lt;td&gt;Reflect.construct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object.keys&lt;/td&gt;
&lt;td&gt;Reflect.ownKeys&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Here the full list üîó &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ùì Why use it ? Because it works very nicely with Proxy ! It accepts the same parameters as handler of proxy !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Equal to target[prop]&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; 
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`This &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; prop don't exist on this object !`&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// Equal to target[prop] = value&lt;/span&gt;
     &lt;span class="c1"&gt;// Reflect.set return boolean, it's perfect&lt;/span&gt;
     &lt;span class="c1"&gt;// since set handler need to return boolean&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totoProxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So as you can see Proxy and Reflect api are usefull but you will not use it every day, it can be nice to use it in order to make traps or hide some object property. Another solution exist for that like Symbol for example.&lt;/p&gt;

&lt;p&gt;If you are using Vue Framework, try to modify a props object of component, it will trigger warn log from Vue, this feature is using Proxy :) !&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I rebuilt my portfolio website twice this year. Here's why.</title>
      <author>Dan Spratling</author>
      <pubDate>Wed, 16 Dec 2020 16:39:00 +0000</pubDate>
      <link>https://dev.to/danspratling/i-rebuilt-my-portfolio-website-twice-this-year-here-s-why-5eap</link>
      <guid>https://dev.to/danspratling/i-rebuilt-my-portfolio-website-twice-this-year-here-s-why-5eap</guid>
      <description>&lt;p&gt;I rebuilt my portfolio website twice this year.&lt;/p&gt;

&lt;p&gt;I know how that sounds.&lt;/p&gt;

&lt;p&gt;So why did I build my portfolio twice in one year when there are so many other things I could have been spending my time on?&lt;/p&gt;

&lt;p&gt;There are a few reasons...&lt;/p&gt;




&lt;p&gt;This article was originally posted over on &lt;a href="https://danspratling.dev"&gt;danspratling.dev&lt;/a&gt;, where you can see more articles about my website, design and development process and other projects I've worked on.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#learning-how-to-design" class="anchor"&gt;
  &lt;/a&gt;
  Learning how to design
&lt;/h2&gt;

&lt;p&gt;I often use my portfolio website to test out new ideas and concepts, and one of my biggest challenges this year was learning how to design.&lt;/p&gt;

&lt;p&gt;And what better way than to redesign my own website?&lt;/p&gt;

&lt;p&gt;Specifically, I was learning how to use &lt;a href="https://www.figma.com/"&gt;figma - an awesome cloud-based design tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Figma to design a full website from the ground up helped encourage good working practices like theming &amp;amp; componentization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/eVADlbqyz8cBAfqfo4eM1e/Portfolio-Design?node-id=0%3A1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSRsfWh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.datocms-assets.com/38195/1608024631-screenshot-2020-12-15-at-09-19-38.png" alt="See the design I created for my new portfolio in Figma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Could I have done a better job? Absolutely.&lt;/p&gt;

&lt;p&gt;But I learned a lot&lt;/p&gt;

&lt;p&gt;Understanding the core of how figma works will only make my design process faster in the future and allow me to practice more complex skills next time around &lt;/p&gt;

&lt;p&gt;And for a first attempt using figma, it turned out pretty well with the finished website clocking in at over 700 likes on Twitter&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P8N2mPyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1309071495449247744/ajndJR75_normal.jpg" alt="Dan Spratling üöÄ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dan Spratling üöÄ
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dan_spratling
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today is the day! &lt;br&gt;&lt;br&gt;I've been working tirelessly on my portfolio.&lt;br&gt;&lt;br&gt;Redesigned &amp;amp; rebuilt from the ground up to show off all the skills I offer as a freelancer developer.&lt;br&gt;&lt;br&gt;Take a look, share, and if you're looking for a new website - hire me.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/rdOE8BHTSj"&gt;danspratling.dev&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:44 AM - 07 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1335897887427923971" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1335897887427923971" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      71
      &lt;a href="https://twitter.com/intent/like?tweet_id=1335897887427923971" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      750
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#learning-new-technologies" class="anchor"&gt;
  &lt;/a&gt;
  Learning new technologies
&lt;/h2&gt;

&lt;p&gt;A portfolio is the perfect place to try out new technologies which are interesting. &lt;/p&gt;

&lt;p&gt;It's large enough to get really stuck into the new tool (or tools) but small enough to not be overwhelming or too complicated to understand what's going on.&lt;/p&gt;

&lt;p&gt;I build my new portfolio using NextJS, TailwindCSS and DatoCMS and before starting the project 3 months ago I'd only used each of these a little.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rmEutZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.datocms-assets.com/38195/1608024664-screenshot2020-12-15at09-23-18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rmEutZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.datocms-assets.com/38195/1608024664-screenshot2020-12-15at09-23-18.png" alt="NextJS homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using my portfolio to practice new skills means I'm able to demonstrate my experience to clients with a real project to back that up so while I was never too worried about learning these tools, practising with a project which matters helps encourage me to understand each tool deeply as I care more about the results.&lt;/p&gt;

&lt;p&gt;Skills which can then be passed on to my other work resulting in even higher quality builds. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-freelance" class="anchor"&gt;
  &lt;/a&gt;
  Going Freelance
&lt;/h2&gt;

&lt;p&gt;This was the primary reason I decided to rebuild my website from the ground up.&lt;/p&gt;

&lt;p&gt;Going freelance meant a big change to my primary audience, where potential (and repeat) clients become the top priority for my website. My new website needed to show clients exactly what I'm capable of and make it easy for them to hire me. &lt;/p&gt;

&lt;p&gt;Fellow developers are still a core part of my audience, but they became my secondary audience.&lt;/p&gt;

&lt;p&gt;And this change meant my old website was almost entirely useless for my new focus, so if I was ever going to rebuild now was the perfect chance.&lt;/p&gt;

&lt;p&gt;Combine this with a need for a new design and a desire to learn new technologies and a rebuild was the obvious choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-you-rebuild-your-website" class="anchor"&gt;
  &lt;/a&gt;
  When should you rebuild your website?
&lt;/h2&gt;

&lt;p&gt;If technology has progressed a long way since your website was created and you haven't been actively maintaining it, it's worth considering a rebuild. A fresh start always feels great but it likely isn't always the right choice.&lt;/p&gt;

&lt;p&gt;Benefits to rebuilding from scratch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You'll likely clear off your technical debt, making the solution far more manageable&lt;/li&gt;
&lt;li&gt;It's an opportunity to try out new things, especially on smaller non-consequential projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Downsides to rebuilding from scratch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's a lot of effort and very time-consuming!&lt;/li&gt;
&lt;li&gt;It's harder to test where problems have been solved when you start from scratch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://danspratling.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9KmwuyB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/drjcvfjgdpxw6q36ge6b.png" alt="Dan Spratling's new portfolio website" title="See it for yourself"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you need help rebuilding or maintaining your website, or deciding which option is best for you then &lt;a href="https://danspratling.dev/contact"&gt;get in touch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you'd like to keep up to date you should follow me on Twitter where you'll be the first to see my newest blog posts (and more).&lt;/p&gt;





</description>
      <category>webdev</category>
      <category>career</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>How to make an animated dropdown with Vue and Tailwindcss</title>
      <author>Fayaz Ahmed</author>
      <pubDate>Wed, 16 Dec 2020 16:24:32 +0000</pubDate>
      <link>https://dev.to/fayaz/vue-tailwindcss-a-match-made-in-heaven-animated-dropdown-1nm</link>
      <guid>https://dev.to/fayaz/vue-tailwindcss-a-match-made-in-heaven-animated-dropdown-1nm</guid>
      <description>&lt;p&gt;There will be a time when you have to make a custom dropdown, I happened to make one recently at work and this is the approach I took.&lt;/p&gt;

&lt;p&gt;I will be creating a Nuxt.js project since that's what I am usually preferring over vanilla Vue these days.&lt;/p&gt;

&lt;p&gt;Alright, let‚Äôs do this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR Here's the &lt;a href="https://tailwind-dropdown.surge.sh/"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#1-setting-up-our-project" class="anchor"&gt;
  &lt;/a&gt;
  1. Setting up our project.
&lt;/h3&gt;

&lt;p&gt;To create a Nuxt project run &lt;code&gt;npx create-nuxt-app dropdown&lt;/code&gt; and select Tailwindcss as our choice of framework when setting up the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJFaBtjU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3zpf66akz83cj9fcze6n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJFaBtjU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3zpf66akz83cj9fcze6n.jpg" alt="Creating a new project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nuxt is still in the process of adding the newly released Tailwindcss 2.0, hence we will be installing the v2 manually, in order to that. Let's run a few commands in our project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will update the Post css in our nuxt project which is necessary to run the latest version of Tailwind.&lt;/p&gt;

&lt;p&gt;Since I won't be changing any of tailwind's config, so I won't create a custom config file, if you want to know how to how to customise tailwindcss.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  2. How does it work?
&lt;/h3&gt;

&lt;p&gt;So, a dropdown will basically have three things technically.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A button or link which is the users action.&lt;/li&gt;
&lt;li&gt;A card element which will be displayed when the above button/link is clicked or hovered.&lt;/li&gt;
&lt;li&gt;A hidden wrapping &lt;code&gt;div&lt;/code&gt; which will be acting as a container for the button and the dropdown content&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bghbXu2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sstvi8zrz24phvw3vk6e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bghbXu2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sstvi8zrz24phvw3vk6e.jpg" alt="How the dropdown works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-making-the-dropdown" class="anchor"&gt;
  &lt;/a&gt;
  3. Making the dropdown
&lt;/h3&gt;

&lt;p&gt;I will be making a vue component, which is better for isolating the dropdown's state, making sure the code is readable and clean.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS, you can clear out the boilerplate from index.vue in pages &amp;amp; default.vue in layouts folders resp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Import a component called &lt;code&gt;&amp;lt;dropdown&amp;gt;&lt;/code&gt; in your &lt;code&gt;index.vue&lt;/code&gt; page.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class="min-h-screen flex items-center justify-center"&amp;gt;
    &amp;lt;dropdown /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create a file called dropdown.vue in the components folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's add some code, a lot of code actually, but that is what we need when we need a good looking UI tbh, there's not short cuts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div
    class="relative inline-block text-left text-gray-800"
    v-on-clickaway="closeMenu"
  &amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;span class="rounded-md shadow-sm"&amp;gt;
        &amp;lt;button
          @click="isMenuOpen = !isMenuOpen"
          type="button"
          class="inline-flex items-center justify-between w-full rounded-md border border-gray-300 h-10 px-4 py-4 bg-white text-sm leading-5 font-medium text-gray-700 hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue active:bg-gray-100 active:text-gray-800 transition ease-in-out duration-150 btn-focus"
          id="options-menu"
          aria-haspopup="true"
          aria-expanded="true"
        &amp;gt;
          &amp;lt;span&amp;gt; {{ label }} &amp;lt;/span&amp;gt;
          &amp;lt;img
            src="https://s.svgbox.net/hero-solid.svg?ic=chevron-down&amp;amp;fill=grey-800"
            class="-mr-1 ml-2 h-5 w-5"
          /&amp;gt;
        &amp;lt;/button&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;transition
      enter-active-class="transition ease-out duration-100"
      enter-class="transform opacity-0 scale-95"
      enter-to-class="transform opacity-100 scale-100"
      leave-active-class="transition ease-in duration-75"
      leave-class="transform opacity-100 scale-100"
      leave-to-class="transform opacity-0 scale-95"
    &amp;gt;
      &amp;lt;div
        v-if="isMenuOpen"
        class="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg text-sm overflow-hidden border z-20"
      &amp;gt;
        &amp;lt;div
          class="rounded-md bg-white shadow-xs"
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="options-menu"
        &amp;gt;
          &amp;lt;div&amp;gt;
            &amp;lt;div class="bg-gray-100 p-4 flex items-center"&amp;gt;
              &amp;lt;div class="w-full"&amp;gt;
                &amp;lt;img
                  class="h-8 w-8 rounded-full mb-2"
                  src="https://fayazz.co/fayaz.jpg"
                  alt="avatar"
                /&amp;gt;
                &amp;lt;p class="font-semibold text-base"&amp;gt;Fayaz Ahmed&amp;lt;/p&amp;gt;
                &amp;lt;button
                  class="flex items-center justify-between w-full focus:outline-none"
                &amp;gt;
                  &amp;lt;p class="text-gray-600"&amp;gt;fayaz@email.com&amp;lt;/p&amp;gt;
                  &amp;lt;img
                    src="https://s.svgbox.net/hero-solid.svg?ic=cog&amp;amp;fill=grey-700"
                    class="h-4 w-4"
                  /&amp;gt;
                &amp;lt;/button&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="border-t border-gray-100"&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div class="py-1"&amp;gt;
            &amp;lt;nuxt-link to="/" class="p-4 flex items-center space-x-2"&amp;gt;
              &amp;lt;img
                src="https://s.svgbox.net/hero-outline.svg?ic=currency-rupee"
                class="h-6 w-6"
              /&amp;gt;
              &amp;lt;span&amp;gt; Transaction History &amp;lt;/span&amp;gt;
            &amp;lt;/nuxt-link&amp;gt;
            &amp;lt;nuxt-link to="/" class="p-4 flex items-center space-x-2"&amp;gt;
              &amp;lt;img
                src="https://s.svgbox.net/hero-outline.svg?ic=heart"
                class="h-6 w-6"
              /&amp;gt;
              &amp;lt;span&amp;gt; Favourites &amp;lt;/span&amp;gt;
            &amp;lt;/nuxt-link&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="border-t border-gray-100"&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div class="py-1"&amp;gt;
            &amp;lt;nuxt-link
              to="/"
              @click.native="isMenuOpen = false"
              class="p-4 flex items-center space-x-2"
            &amp;gt;
              &amp;lt;img
                src="https://s.svgbox.net/hero-outline.svg?ic=logout"
                class="h-6 w-6"
              /&amp;gt;
              &amp;lt;span&amp;gt; Logout &amp;lt;/span&amp;gt;
            &amp;lt;/nuxt-link&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/transition&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;PS, I have also installed a clickaway plugin for my project called &lt;a href="https://www.npmjs.com/package/vue-clickaway"&gt;vue-clickaway&lt;/a&gt;. You can just import it as a directive in your component to handle the clicks outside the dropdown and close it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/E1vgeCFSRqU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's what I did to animate the dropdown&lt;/p&gt;

&lt;p&gt;I used the vue &lt;code&gt;transition&lt;/code&gt; component to make it work and these are the tailwind classes, which did the magic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enter-active-class="transition ease-out duration-100"
enter-class="transform opacity-0 scale-95"
enter-to-class="transform opacity-100 scale-100"
leave-active-class="transition ease-in duration-75"
leave-class="transform opacity-100 scale-100"
leave-to-class="transform opacity-0 scale-95"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Basically, it's just scaling the dropdown card to &lt;strong&gt;95&lt;/strong&gt; and back to &lt;strong&gt;100&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me know if you need any help on this.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>vue</category>
    </item>
  </channel>
</rss>
