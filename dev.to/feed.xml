<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 7 Games To Learn Coding </title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Sun, 05 Sep 2021 06:03:52 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/top-7-games-to-learn-coding-aoc</link>
      <guid>https://dev.to/koulurunandakishorereddy/top-7-games-to-learn-coding-aoc</guid>
      <description>&lt;h1&gt; 1. CODE MONKEY &lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.codemonkey.com/"&gt;Website Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2io2WQ5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626100364103/kWqJOi4pt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2io2WQ5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626100364103/kWqJOi4pt.jpeg" alt="CodeMonkey.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Code monkey&lt;/b&gt; covers text-based coding languages of CoffeeScript and Python. The programming language used in Coding Adventure is called CoffeeScript. It's a language that compiles to JavaScript, and similarly to JavaScript, it is used in the industry primarily for web applications.&lt;/p&gt;

&lt;p&gt;CodeMonkey is a leading, fun and intuitive curriculum where students learn to code in real programming languages. Through the game and project-based courses, students as young as 7 use real programming languages to solve puzzles and build games and apps. The majority of CodeMonkey’s courses do not require prior coding experience to teach. All courses are designed for school, extra-curricular and home-use.&lt;/p&gt;

&lt;h1&gt;2. CODINGAME &lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.codingame.com/start"&gt;Website Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4WQg4EKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626101279308/hvsIgGocB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4WQg4EKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626101279308/hvsIgGocB.jpeg" alt="codingame-1024x438.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CodinGame&lt;/b&gt; is a technology company editing an online platform for developers, allowing them to play with programming with increasingly difficult puzzles, to learn to code better with an online programming application supporting twenty-five programming languages, and to compete in multiplayer programming contests involving timed artificial intelligence, or code-golf challenges.&lt;/p&gt;

&lt;p&gt;CodinGame offers up to fun free games to help learn more than 25 programming languages, including JavaScript, PHP and Ruby. &lt;/p&gt;

&lt;h1&gt;3. FLEXBOX FROGGY &lt;/h1&gt;

&lt;p&gt;&lt;a href="https://flexboxfroggy.com/"&gt;Website Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kKELmK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626147023499/mOKxLodF9Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kKELmK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626147023499/mOKxLodF9Z.png" alt="screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Flexbox Froggy &lt;/b&gt;, a game where you help Froggy and friends by writing CSS code! Guide this frog to the lilypad on the right by using the justify-content property, which aligns items horizontally &lt;/p&gt;

&lt;p&gt;Want to learn how CSS flexbox works? check out &lt;a href="https://flexboxfroggy.com/"&gt;FLEXBOX FROGGY&lt;/a&gt; . It has a simple interface that teaches you the basics of how things align in flexbox while you help Froggy and his friends&lt;/p&gt;

&lt;h1&gt;4. Robocode &lt;/h1&gt;

&lt;p&gt;&lt;a href="https://robocode.sourceforge.io/"&gt;Website Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BbZMJWuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626148427926/iWsxrkYnL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BbZMJWuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626148427926/iWsxrkYnL.png" alt="programming-game-robocode.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Robocode&lt;/b&gt; is a complex programming game where you code robot tanks that fight against each other. Your job is to write the artificial intelligence that drives your robots to success---using real languages like Java, Scala, C#, and more. To get started, check out the Robocode Basics and Tutorials.&lt;/p&gt;

&lt;p&gt;The Robocode installer comes with a development environment, built-in robot editor, and Java compiler. You're actually writing real code! Despite launching back in 2000, Robocode is still regularly updated and maintained, helped along by the fact that it's open-source and addictive.&lt;/p&gt;

&lt;h1&gt;5. Codecombat &lt;/h1&gt;

&lt;p&gt;&lt;a href="https://codecombat.com/"&gt;Website Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLd13TFJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626148650812/Ir50QmM0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLd13TFJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626148650812/Ir50QmM0i.png" alt="Screen-Shot-2020-04-23-at-2.46.48-PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Codecombat&lt;/b&gt; is another web app for game-like puzzles and challenges that can only be solved by writing code. But whereas Codingame is more entertaining, Codecombat has a significant educational bent with a "Classroom Edition" that teachers can use to help their students learn how to code. As of this writing, three course paths are available: Computer Science, Web Development, and Game Development.&lt;/p&gt;

&lt;h1&gt;6. Codewars &lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.codewars.com/"&gt;Website Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hPXJwt9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626150051517/utyc-Unyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPXJwt9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626150051517/utyc-Unyd.png" alt="programming-game-codewars.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Codewars &lt;/b&gt; isn't so much a game as it is a gamified way to practice coding and solving algorithmic challenges. You get points for completing puzzles and point values are determined by how efficient your solutions are. Codewars lets you view solutions submitted by others, which you can study and learn from. I believe it's one of the best ways to learn a new programming language and its idioms.&lt;/p&gt;

&lt;h1&gt;7. CheckiO &lt;/h1&gt;

&lt;p&gt;&lt;a href="https://checkio.org/"&gt;Website Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AgUrraSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626150538733/xW4-kwUwh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AgUrraSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626150538733/xW4-kwUwh.jpeg" alt="share.jpg"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;b&gt;CheckiO&lt;/b&gt; is web-based Python learning resource, where your task is to learn through playing games and solving intertesting quizzes. CheckiO features it's own feature complete web-based development environment, but many users prfer using desktop IDE's.&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;
&lt;b&gt;&lt;/b&gt;&lt;p&gt;&lt;br&gt;
To all my readers out here I have an interesting thing to share with you. There's a hackathon going on there. For more information, keep reading.&lt;/p&gt;

&lt;p&gt;
A hackathon might be an alternative for you if you are a computer science student or an upcoming developer. The benefit of participating in an online or physical hackathon is that you can develop coding skills, work with developers, develop a resume, and meet peers.&lt;/p&gt;

&lt;p&gt;
I recommend Hack This Fall 2.0 if you are interested in such an event. The event takes place between 22nd and 24th of October. A 48-Hour Virtual Hackathon is taking this to the next level this year, with the aim of promoting hackers and helping them to develop new ideas and prototypes in various domains. A part of their mission is also to support beginners to hack our society and bring a positive change.&lt;/p&gt;

&lt;p&gt;If you want to register for this wonderful hackathon you can do it:&lt;a href="https://hackthisfall.devpost.com/"&gt;click here&lt;/a&gt;.don't forget to use my referral code : HTFHE068. Over a thousand hackers have already signed up.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 10 VS Code Themes</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Sun, 05 Sep 2021 05:45:56 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/top-10-vs-code-themes-3b60</link>
      <guid>https://dev.to/muthuannamalai12/top-10-vs-code-themes-3b60</guid>
      <description>&lt;p&gt;Working in a nice place makes you feel more productive, if you enjoy the look of your code, then you also enjoy writing it, editing it, and painstakingly debugging it. If visuals are important to you, then you’ve come to the right place. Want to make VS Code look a lot better? There are several ways to customize Visual Studio Code, but you should start first with a great theme! If you're looking for a new theme to change up your code editor in the new year, I'm here to help! Check out a variety of stylish themes with unique color palettes—from sleek to snazzy to vibrant and everything in between—to see what works best for you. Learn more about them in this article! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-change-your-visual-studio-code-theme"&gt;
  &lt;/a&gt;
  How to change your Visual Studio Code theme
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;For MAC Users:&lt;/strong&gt; ⌘K and then ⌘T to display the picker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Or you can go to the Code &amp;gt; Preferences &amp;gt; Color Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Windows Users:&lt;/strong&gt; Ctrl + Shift + P&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Or you can go to the File Icon &amp;gt;Theme Picker with File &amp;gt;Preferences &amp;gt;File Icon Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s the list, choose whatever makes you productive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-dracula-official"&gt;
  &lt;/a&gt;
  1) Dracula Official:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzpiB6-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625567841148/donRBUHoB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzpiB6-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625567841148/donRBUHoB.png" alt="1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-shades-of-purple"&gt;
  &lt;/a&gt;
  2) Shades of Purple:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ahmadawais.shades-of-purple"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GOSLAoWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568020894/gRP6U8QGxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GOSLAoWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568020894/gRP6U8QGxq.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-winter-is-coming"&gt;
  &lt;/a&gt;
  3) Winter is coming:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.winteriscoming"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Winter is Coming Dark Blue Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XhC_Iq93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568786606/P3rFSRfit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhC_Iq93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568786606/P3rFSRfit.png" alt="3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Winter is Coming Dark Black Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--shOikNff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568853223/2L13Bceee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shOikNff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568853223/2L13Bceee.png" alt="4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Winter is Coming Light Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWgOK6Qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568874456/MTqf3rns1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWgOK6Qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568874456/MTqf3rns1.png" alt="5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-night-owl"&gt;
  &lt;/a&gt;
  4) Night Owl
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Night Owl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1lVAIj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568952881/vgiEhrmNV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1lVAIj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568952881/vgiEhrmNV.jpeg" alt="6.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Light Owl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Clwgxf4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568972567/E8LjczvZ5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Clwgxf4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625568972567/E8LjczvZ5.jpeg" alt="7.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-laserwave"&gt;
  &lt;/a&gt;
  5) LaserWave:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jaredkent.laserwave"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJS24Qes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569126528/JnkJtJ9h5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJS24Qes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569126528/JnkJtJ9h5.png" alt="8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-firefox-theme"&gt;
  &lt;/a&gt;
  6) Firefox Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Heron.firefox-devtools-theme"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firefox Dark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6SI0P9z0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569346787/c2YBkZIs4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6SI0P9z0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569346787/c2YBkZIs4.jpeg" alt="9.jfif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firefox Light&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qxb_O_Dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569374022/zLEbJ7DAV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qxb_O_Dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569374022/zLEbJ7DAV.jpeg" alt="10.jfif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-one-dark-pro"&gt;
  &lt;/a&gt;
  7) One Dark Pro
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0B8ECN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569462948/M-kxShveLH0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0B8ECN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569462948/M-kxShveLH0.png" alt="11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-cobalt-2"&gt;
  &lt;/a&gt;
  8) Cobalt 2
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TuQu9V13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569519439/TayxhTmFV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TuQu9V13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569519439/TayxhTmFV.jpeg" alt="12.jfif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-palenight"&gt;
  &lt;/a&gt;
  9) PaleNight
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=whizkydee.material-palenight-theme"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TZDdzUpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569581264/CSf_tJrch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TZDdzUpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569581264/CSf_tJrch.png" alt="13.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-outrun"&gt;
  &lt;/a&gt;
  10) OutRun
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=samrapdev.outrun"&gt;Get It Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OutRun Night&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOihorZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569704886/E7HnyWzDs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOihorZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569704886/E7HnyWzDs.jpeg" alt="14.jfif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OutRun Electric&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rIDyBwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569715291/YQssWgWgg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rIDyBwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625569715291/YQssWgWgg.jpeg" alt="15.jfif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you have it! Those are some of my favorite themes available for VS Code, do you use any of these themes as well? What's your favorite VS-Code theme? Let me know in the comments 👇 😊 &lt;/p&gt;

&lt;p&gt;To all my readers out here I have an interesting thing to share with you. Hint: That is about a Hackathon. Keep reading to know more&lt;/p&gt;

&lt;p&gt;A hackathon might be an alternative for you if you are a computer science student or an upcoming developer. An online or physical hackathon allows you to develop your coding skills, gain experience working with developers, develop your resume, and meet peers in your field. &lt;/p&gt;

&lt;p&gt;If you are looking for one such hackathon I can recommend Hack This Fall 2.0. It is happening between 22nd October to 24th October. For this season, they are taking this to a level higher with a 48 Hours Virtual Hackathon; where they are aiming to promote hackers and help them nurture their new ideas and prototypes in various domains. Their motto is also to involve more beginner hackers and support everyone to solve the shared problems of our society, to bring a change in a positive way.&lt;/p&gt;

&lt;p&gt;If you want to register for this wonderful hackathon you can do it &lt;a href="https://hackthisfall.devpost.com/"&gt;here&lt;/a&gt; and do not forgot to use my referral code: HTFHE060&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Launching WordPress on AWS with RDS</title>
      <author>Suraj Warbhe</author>
      <pubDate>Sun, 05 Sep 2021 05:06:28 +0000</pubDate>
      <link>https://dev.to/surajwarbhe/launching-wordpress-on-aws-with-rds-2ee7</link>
      <guid>https://dev.to/surajwarbhe/launching-wordpress-on-aws-with-rds-2ee7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#usecase"&gt;
  &lt;/a&gt;
  USE-CASE
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create an AWS EC2 instance
&lt;/li&gt;
&lt;li&gt;Configure the instance with Apache webserver&lt;/li&gt;
&lt;li&gt;Download php application name "WordPress".&lt;/li&gt;
&lt;li&gt;Setup a MySQL server using AWS RDS service using Free Tier as a backend&lt;/li&gt;
&lt;li&gt;Provide the endpoint/connection string to the WordPress application to make it work&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Pre-requisite:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;AWS Account&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-an-ec2-instance"&gt;
  &lt;/a&gt;
  STEP 1 : Create an EC2 Instance
&lt;/h3&gt;

&lt;p&gt;🔶 We need to launch an EC2 Instance on AWS which we will use to configure Apache Webserver and run WordPress.&lt;/p&gt;

&lt;p&gt;🔶 Click on &lt;code&gt;Launch Instance&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🔶 Select 'Amazon Linux` as a Instance Flavor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8YlANvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf750g51p3g1crsjk787.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8YlANvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf750g51p3g1crsjk787.png" alt="Launch instance wizard _ EC2 Management Console - Google Chrome 04-09-2021 10_07_48 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Select &lt;code&gt;t2.micro&lt;/code&gt; as a &lt;code&gt;instance type&lt;/code&gt;. It is free for eligible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jBd7JScs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af4qde5o34ggtbb6d6a1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jBd7JScs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af4qde5o34ggtbb6d6a1.png" alt="Launch instance wizard _ EC2 Management Console - Google Chrome 04-09-2021 10_08_00 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Provide configuration details and click on &lt;code&gt;Add Storage&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ij3TjvWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcm5mrraeo5ndnkj0q7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ij3TjvWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcm5mrraeo5ndnkj0q7n.png" alt="Launch instance wizard _ EC2 Management Console - Google Chrome 04-09-2021 10_08_06 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Add &lt;code&gt;storage&lt;/code&gt;. I will keep it default. And click on &lt;code&gt;Add Tag&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cK8ZiYtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jarywbww9xy7slr907g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cK8ZiYtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jarywbww9xy7slr907g2.png" alt="Launch instance wizard _ EC2 Management Console - Google Chrome 04-09-2021 10_08_20 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Add &lt;code&gt;tag&lt;/code&gt; if you want. For this, click on &lt;code&gt;Add another tag&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8Fki1wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kzd0hzveavwmty8o3hf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8Fki1wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kzd0hzveavwmty8o3hf.png" alt="Launch instance wizard _ EC2 Management Console - Google Chrome 04-09-2021 10_08_43 PM"&gt;&lt;/a&gt;&lt;br&gt;
🔶 After this click on &lt;code&gt;Configure Security Group&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🔶 Click on &lt;code&gt;Add Rule&lt;/code&gt;. I will allow &lt;code&gt;All traffic&lt;/code&gt; to avoid any firewall issue. Then click on &lt;code&gt;Review and Launch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🔶 Attach &lt;code&gt;key pair&lt;/code&gt; then Instance will launched successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y_GgS-SX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8vvq77usiutd6px6whv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y_GgS-SX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8vvq77usiutd6px6whv.png" alt="Launch instance wizard _ EC2 Management Console - Google Chrome 04-09-2021 10_09_27 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FYDG4IR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ibv8gdutzshum4xsc4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FYDG4IR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ibv8gdutzshum4xsc4q.png" alt="Launch instance wizard _ EC2 Management Console - Google Chrome 04-09-2021 10_09_57 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Click on &lt;code&gt;Instance ID&lt;/code&gt;. You will get all the details of your created instance.&lt;/p&gt;

&lt;p&gt;🔶 You will get &lt;code&gt;Public IP&lt;/code&gt; and &lt;code&gt;Private IP&lt;/code&gt; from this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2gQ4hbEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7jy6dzqyrkaaumzrbxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2gQ4hbEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7jy6dzqyrkaaumzrbxy.png" alt="Launch instance wizard _ EC2 Management Console - Google Chrome 04-09-2021 10_10_32 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can use &lt;code&gt;Public IP address&lt;/code&gt; any Key to connect this Instance. You can use Putty(Recommended) or CLI Browser provided by Amazon to Connect Instance.&lt;/p&gt;

&lt;p&gt;Lets go for Next to Configure the instance as Apache Webserver:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-configure-the-instance-with-apache-webserver"&gt;
  &lt;/a&gt;
  STEP 2 : Configure the Instance with Apache Webserver
&lt;/h3&gt;

&lt;p&gt;🔶 Here we are going to configure the &lt;code&gt;Apache Web Server&lt;/code&gt; in Amazon Linux 2 Instance.&lt;/p&gt;

&lt;p&gt;🔶 To run WordPress, we need to run a web server on our EC2 instance. The open source Apache web server is the most popular web server used with WordPress.&lt;br&gt;
🔶 Install Apache Web Server.&lt;br&gt;
`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo su -
yum install httpd -y 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Then we are Starting Webserver and Enable it Permanently.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl start httpd

systemctl enable httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-installation-and-configuration-of-php-software-name-raw-wordpress-endraw-"&gt;
  &lt;/a&gt;
  STEP 3 : Installation and configuration of php software name &lt;code&gt;WordPress&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;🔶 WordPress is a php Application, let’s install &lt;code&gt;php 7.2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🔶 With Amazon Linux 2, you can use the Extras Library to install application and software updates on your instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; amazon-linux-extras install -y php7.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 After that download WordPress file!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget http://wordpress.org/latest.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 After download the "TAR" file "UNTAR" it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tar -xvzf latest.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Next you see &lt;code&gt;wordpress&lt;/code&gt; name &lt;code&gt;dir&lt;/code&gt; come up. So now you can copy all Content inside &lt;code&gt;wordpress folder&lt;/code&gt; to Document Root &lt;code&gt;/var/www/html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cp -rf wordpress/* /var/www/html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note:
&lt;/h5&gt;

&lt;p&gt;Make Sure where you download your &lt;code&gt;tar&lt;/code&gt; file and where you &lt;code&gt;Untar&lt;/code&gt; it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-setup-a-mysql-server-using-aws-rds-service-with-free-tier-account"&gt;
  &lt;/a&gt;
  STEP 4 : Setup a MySQL server using AWS RDS service with Free Tier Account
&lt;/h3&gt;

&lt;p&gt;🔶 Let’s now launch a MySql database using &lt;code&gt;Amazon RDS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🔶 Click on &lt;code&gt;Create Database&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PzFooUrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9o6013f3v5gsozxzzoag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PzFooUrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9o6013f3v5gsozxzzoag.png" alt="RDS Management Console - Google Chrome 04-09-2021 10_16_24 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Choose &lt;code&gt;Standard Create&lt;/code&gt; and &lt;code&gt;MySQL&lt;/code&gt; as a engine option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUIjsqZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/412xa1rf8iwtwx3evupv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUIjsqZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/412xa1rf8iwtwx3evupv.png" alt="RDS Management Console - Google Chrome 04-09-2021 10_16_55 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Select Version &lt;code&gt;MySQL 8.0.20&lt;/code&gt; and template as &lt;code&gt;Free tier&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HIt3m-Nx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz7jwakay9o39i2brny4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HIt3m-Nx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz7jwakay9o39i2brny4.png" alt="RDS Management Console - Google Chrome 04-09-2021 10_17_14 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Provide DB Instance name, Username &amp;amp; Password&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SMgSQXxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtqxdoq3jg186p48hs84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMgSQXxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtqxdoq3jg186p48hs84.png" alt="RDS Management Console - Google Chrome 04-09-2021 10_26_22 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Here this DB instance have No Connectivity to Internet. We will access it through EC2 Instance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDWH5tf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utmybrrxb6ru9ojuq0wh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDWH5tf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utmybrrxb6ru9ojuq0wh.png" alt="RDS Management Console - Google Chrome 04-09-2021 10_23_51 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Dt04Vg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fc74erj62llfcv1h1ol3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Dt04Vg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fc74erj62llfcv1h1ol3.png" alt="RDS Management Console - Google Chrome 04-09-2021 10_24_30 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Now after Launching this DB Instance &lt;code&gt;mydb&lt;/code&gt; named Database will be created inside this DB server.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w6dnlyNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qak8y43nr5lbjuz3nf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6dnlyNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qak8y43nr5lbjuz3nf2.png" alt="RDS Management Console - Google Chrome 04-09-2021 10_25_20 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Now click on &lt;code&gt;Launch Database&lt;/code&gt;. It will take around 10 minutes.&lt;/p&gt;

&lt;p&gt;🔶 Once the Database is available, click on &lt;code&gt;Connectivity &amp;amp; Security&lt;/code&gt;. You will get &lt;code&gt;hostname&lt;/code&gt; and &lt;code&gt;Port no.&lt;/code&gt; there.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRgNxoSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuurfyjk2l72iowgxsc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRgNxoSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuurfyjk2l72iowgxsc7.png" alt="RDS Management Console - Google Chrome 04-09-2021 10_36_48 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-5-provide-the-endpointconnection-string-to-the-wordpress-application"&gt;
  &lt;/a&gt;
  STEP 5 : Provide the Endpoint/Connection string to the WordPress Application
&lt;/h3&gt;

&lt;p&gt;🔶 Go to the created EC2 Instances instance. In the Description below, find the &lt;code&gt;Public DNS (IPv4)&lt;/code&gt; of your instance.&lt;/p&gt;

&lt;p&gt;🔶 Enter this IP Address into your web browser. And type Enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oxVSDVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh7w8tkxrf1sefago6rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oxVSDVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh7w8tkxrf1sefago6rg.png" alt="WordPress › Setup Configuration File - Google Chrome 05-09-2021 08_56_01 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4GzbRII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d10c8wlvnx13gogvkgco.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4GzbRII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d10c8wlvnx13gogvkgco.png" alt="WordPress › Setup Configuration File - Google Chrome 05-09-2021 08_56_08 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔅 Provide Following Information:&lt;br&gt;
🌀 Database Name: Provide Name of Database which created at time of launching DB!&lt;/p&gt;

&lt;p&gt;🌀 Username: The username you given while launching DB Instance!&lt;/p&gt;

&lt;p&gt;🌀 Password: Provide Password!&lt;/p&gt;

&lt;p&gt;🌀 Database Host: Provide the ENDPOINT which you get from "wordpress-database"!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5SNasLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cdzq3tzeds4k6ggwf6l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5SNasLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cdzq3tzeds4k6ggwf6l.png" alt="(4) Launching WordPress on AWS with RDS _ LinkedIn - Google Chrome 05-09-2021 09_06_58 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Now our WordPress is running on the AWS using AWS RDS as a service and in the backend it is using MySQL. &lt;br&gt;
Let's check from CLI.&lt;br&gt;
Use command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# mysql -h &amp;lt;endpoint_url&amp;gt; -u &amp;lt;username&amp;gt; -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And provide our password.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAABndSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjamk2n50v8rafc9ynr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAABndSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjamk2n50v8rafc9ynr0.png" alt="root@ip-172-31-45-40_~ 05-09-2021 09_19_29 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 Provide Following Details and Install WordPress!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMjFJb-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmlgpt9fr7r296q778mz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMjFJb-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmlgpt9fr7r296q778mz.png" alt="WordPress › Installation - Google Chrome 05-09-2021 09_09_20 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 After Login with the credentials and Login to WordPress!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uUjP1sLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuse2led2assp3rv0r49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUjP1sLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuse2led2assp3rv0r49.png" alt="WordPress › Installation - Google Chrome 05-09-2021 09_09_31 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHMikP5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awk644ey1wx5vi0dhveu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHMikP5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awk644ey1wx5vi0dhveu.png" alt="WordPress › Installation - Google Chrome 05-09-2021 09_17_13 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#successfully-done-we-have-login-in-to-wordpress-and-we-can-continue-to-write-blogs-etc-all-your-data-will-be-stored-in-rds-mysql-db"&gt;
  &lt;/a&gt;
  Successfully done! We have Login in to WordPress and we can continue to write Blogs etc., All your Data will Be stored in RDS MySQL DB.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgxzl7Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yybi3w53tdcy9ct6uk38.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgxzl7Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yybi3w53tdcy9ct6uk38.gif" alt="68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f69346776387341505f5f586746673d3d2d3931363135303430372e3136316636643238343363343039646134303138393"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>mysql</category>
      <category>wordpress</category>
      <category>awsrds</category>
    </item>
    <item>
      <title>How Pros Automate Repetitive Code using VS Code</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 05 Sep 2021 04:02:44 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/how-pros-automate-repetitive-code-using-vs-code-53b</link>
      <guid>https://dev.to/ruppysuppy/how-pros-automate-repetitive-code-using-vs-code-53b</guid>
      <description>&lt;p&gt;While &lt;strong&gt;Programming&lt;/strong&gt;, you are bound to encounter &lt;em&gt;Repetitive Code&lt;/em&gt;, writing which is a complete &lt;strong&gt;waste of time&lt;/strong&gt;. I am not talking about &lt;strong&gt;Non-DRY Code&lt;/strong&gt;, but &lt;em&gt;Essentials Code&lt;/em&gt; that is necessary to be written. An example of this would be connecting &lt;strong&gt;State&lt;/strong&gt;/&lt;strong&gt;Dispatch&lt;/strong&gt; to &lt;strong&gt;Props&lt;/strong&gt; using &lt;strong&gt;React-Redux&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Anyone who has worked on a decent-sized &lt;strong&gt;React-Redux&lt;/strong&gt; project knows how many times you have to write the same code to connect the &lt;strong&gt;Redux Store Data&lt;/strong&gt; to the &lt;strong&gt;Component Props&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Today we are going to fix that and provide you with a way to &lt;em&gt;streamline &lt;strong&gt;ANY&lt;/strong&gt; Repetitive Code&lt;/em&gt; you have and &lt;strong&gt;Maximize your Productivity&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-snippets-in-vs-code"&gt;
  &lt;/a&gt;
  What are &lt;strong&gt;Snippets&lt;/strong&gt; in &lt;strong&gt;VS Code&lt;/strong&gt;?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;VS Code&lt;/strong&gt; is an Amazing Code Editor that provides a &lt;em&gt;plethora of tools&lt;/em&gt; to take your &lt;strong&gt;productivity&lt;/strong&gt; to the &lt;strong&gt;next level&lt;/strong&gt;. &lt;strong&gt;Snippets&lt;/strong&gt; are just one such tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Snippets&lt;/strong&gt; can be thought of as &lt;strong&gt;Templates&lt;/strong&gt; that enable you &lt;em&gt;write code once&lt;/em&gt; and reuse it, &lt;em&gt;as per requirement&lt;/em&gt;. It allows &lt;strong&gt;Variables&lt;/strong&gt; as well as &lt;strong&gt;Dynamic User Inputs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you have been using &lt;strong&gt;VS Code&lt;/strong&gt; for some time, you are bound to come across &lt;strong&gt;Snippets&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0U4WfyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dl9v0jabeyz1e5zp616.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0U4WfyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dl9v0jabeyz1e5zp616.png" alt="Snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some &lt;strong&gt;Snippets&lt;/strong&gt; come pre-built with &lt;strong&gt;VS Code&lt;/strong&gt;. You can install some extensions to add event more &lt;strong&gt;Snippets&lt;/strong&gt;, but most importantly, you can create your own &lt;strong&gt;Snippets&lt;/strong&gt; to cater to your very own needs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-our-first-snippets"&gt;
  &lt;/a&gt;
  Creating our first &lt;strong&gt;Snippets&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Creating a &lt;strong&gt;Snippets&lt;/strong&gt; is fairly simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;strong&gt;File &amp;gt; Preferences &amp;gt; User Snippets&lt;/strong&gt; (possibly &lt;strong&gt;Code &amp;gt; Preferences &amp;gt; User Snippets&lt;/strong&gt; on macOS).&lt;/p&gt;

&lt;p&gt;Or you might use &lt;code&gt;F1&lt;/code&gt; to bring up the &lt;strong&gt;Command Palette&lt;/strong&gt; and search for &lt;strong&gt;User Snippets&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the type of &lt;strong&gt;Snippet&lt;/strong&gt; you want to create (&lt;strong&gt;language-specific&lt;/strong&gt;, &lt;strong&gt;project-specific&lt;/strong&gt; or &lt;strong&gt;global&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a_YSpOzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e23x82lrpzerzvzx2sxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a_YSpOzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e23x82lrpzerzvzx2sxy.png" alt="Snippet Creation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following in the created &lt;code&gt;.code-snippets&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"Signature"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"Hello!!!"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Done! Now when you type &lt;strong&gt;"hello"&lt;/strong&gt; in an &lt;strong&gt;HTML&lt;/strong&gt; file, you would be to use the &lt;strong&gt;Snippet&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This wasn't a practical example, but we did manage to get our feet wet at making &lt;strong&gt;Snippets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On inspecting the &lt;strong&gt;Snippet&lt;/strong&gt; definition, we find the &lt;code&gt;scope&lt;/code&gt; that declares which files the &lt;strong&gt;Snippet&lt;/strong&gt; should be used in. The &lt;code&gt;prefix&lt;/code&gt; mentions the &lt;strong&gt;prefix text&lt;/strong&gt; that will trigger the &lt;strong&gt;Snippet&lt;/strong&gt; to show up. The &lt;code&gt;body&lt;/code&gt; defines the &lt;strong&gt;body&lt;/strong&gt; of the &lt;strong&gt;Snippet&lt;/strong&gt;(each line of the &lt;strong&gt;Snippet&lt;/strong&gt; would be a new &lt;strong&gt;string&lt;/strong&gt; in array). And finally, &lt;code&gt;description&lt;/code&gt; is a short description of the &lt;strong&gt;Snippet&lt;/strong&gt;'s function.&lt;/p&gt;

&lt;p&gt;Let us make a couple of &lt;strong&gt;practical ones&lt;/strong&gt; to &lt;em&gt;deepen our understanding&lt;/em&gt; and solve the issue mentioned in the &lt;em&gt;Intro of the article&lt;/em&gt; (connecting &lt;strong&gt;State&lt;/strong&gt;/&lt;strong&gt;Dispatch&lt;/strong&gt; to &lt;strong&gt;Props&lt;/strong&gt; using &lt;strong&gt;React-Redux&lt;/strong&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#snippet-1-leaving-a-signature"&gt;
  &lt;/a&gt;
  Snippet 1: Leaving a Signature
&lt;/h1&gt;

&lt;p&gt;Let's try making a snippet that leaves a &lt;em&gt;signature&lt;/em&gt; like this in any file and isn't restricted to only &lt;strong&gt;Python&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;"""
Name: Tapajyoti Bose
Modified on: 05 September 2021 08:38:35
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would also like the &lt;strong&gt;Snippet&lt;/strong&gt; to update the &lt;strong&gt;date&lt;/strong&gt; and &lt;strong&gt;time&lt;/strong&gt; dynamically, of course.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;strong&gt;VS Code&lt;/strong&gt; provides a bunch of &lt;strong&gt;variables&lt;/strong&gt; for this purpose. &lt;/p&gt;

&lt;p&gt;We would be using &lt;code&gt;BLOCK_COMMENT_START&lt;/code&gt; and &lt;code&gt;BLOCK_COMMENT_END&lt;/code&gt; to automatically generate the block comments for any language and &lt;code&gt;CURRENT_DATE&lt;/code&gt;, &lt;code&gt;CURRENT_MONTH_NAME&lt;/code&gt;, &lt;code&gt;CURRENT_YEAR&lt;/code&gt;, &lt;code&gt;CURRENT_HOUR&lt;/code&gt;, &lt;code&gt;CURRENT_MINUTE&lt;/code&gt;, &amp;amp; &lt;code&gt;CURRENT_SECOND&lt;/code&gt; to generate the &lt;strong&gt;date&lt;/strong&gt; and &lt;strong&gt;time&lt;/strong&gt; dynamically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To get the complete list of &lt;strong&gt;variables&lt;/strong&gt;, &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the &lt;strong&gt;Snippet&lt;/strong&gt; would initially look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Signature"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"python,javascript,typescript,html,css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"signature"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"$BLOCK_COMMENT_START"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"Name: Tapajyoti Bose"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"Modified on: $CURRENT_DATE $CURRENT_MONTH_NAME $CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"$BLOCK_COMMENT_END"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Leave a signature"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now within &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;Javascript&lt;/strong&gt;, &lt;strong&gt;Typescript&lt;/strong&gt;, &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; files, you would be able to leave a signature.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8MXTztiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yb23slsuogytjmkzp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8MXTztiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yb23slsuogytjmkzp7.png" alt="Signature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering if &lt;em&gt;extending the functionality&lt;/em&gt; to &lt;em&gt;all languages&lt;/em&gt; would require you to add the &lt;em&gt;names of all languages&lt;/em&gt;. Luckily there is an easy solution: just remove the &lt;code&gt;scope&lt;/code&gt; from the &lt;strong&gt;Snippet&lt;/strong&gt; definition and &lt;strong&gt;Viola!&lt;/strong&gt; the functionality is extended to all languages!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#snippet-2-connecting-redux-to-react-props"&gt;
  &lt;/a&gt;
  Snippet 2: Connecting Redux to React Props
&lt;/h1&gt;

&lt;p&gt;This is even easier than the &lt;strong&gt;Signature Snippet&lt;/strong&gt;. Just copy the following code in the snippet definition, and you are done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Connect Component to Redux"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"javascriptreact,typescriptreact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"connect"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"const mapStateToProps = (state) =&amp;gt; ({"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;$1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"})"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"const mapDispatchToProps = (dispatch) =&amp;gt; ({"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;$0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"})"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"export default connect(mapStateToProps, mapDispatchToProps)($TM_FILENAME_BASE)"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connect React Component to Redux"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us examine what is being done.&lt;/p&gt;

&lt;p&gt;We are scoping the &lt;strong&gt;Snippet&lt;/strong&gt; to &lt;strong&gt;React&lt;/strong&gt; based projects for obvious reasons.&lt;/p&gt;

&lt;p&gt;In the body, you might be seeing &lt;code&gt;$0&lt;/code&gt; and &lt;code&gt;$1&lt;/code&gt; for the first time. These are placeholders for &lt;strong&gt;tab-able&lt;/strong&gt; positions where the user should enter &lt;em&gt;their own logic&lt;/em&gt; (the parts of the &lt;strong&gt;store&lt;/strong&gt; they want to connect to the &lt;strong&gt;props&lt;/strong&gt; in this case).&lt;/p&gt;

&lt;p&gt;We are using the &lt;strong&gt;File Name&lt;/strong&gt; as the &lt;strong&gt;Component Name&lt;/strong&gt;, as in &lt;em&gt;most&lt;/em&gt; cases, the convention is using the &lt;strong&gt;Component Name&lt;/strong&gt; to be the same as the &lt;strong&gt;File Name&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;In this article, we went over how you can &lt;strong&gt;Automate Repetitive Code&lt;/strong&gt; using &lt;strong&gt;VS Code Snippets&lt;/strong&gt;. Now you can create &lt;strong&gt;Custom Snippets&lt;/strong&gt; that solve your own problems and boost your productivity to new heights.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Developing!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhChxXQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqh8teicsquqqivxlfus.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhChxXQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqh8teicsquqqivxlfus.gif" alt="Thumbs Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a Digital Nomad in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>programming</category>
      <category>json</category>
    </item>
    <item>
      <title>How well do you know DOM JavaScript?</title>
      <author>Nicholas Mendez</author>
      <pubDate>Sun, 05 Sep 2021 03:50:49 +0000</pubDate>
      <link>https://dev.to/snickdx/how-well-do-you-know-dom-javascript-3fl5</link>
      <guid>https://dev.to/snickdx/how-well-do-you-know-dom-javascript-3fl5</guid>
      <description>&lt;p&gt;HTML and JavaScript have been around awhile, with its age there are some very nuanced tricks and hacks that aren't very well known. Let's take a look at some of them and when they are appropriate to use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-first-the-bom"&gt;
  &lt;/a&gt;
  But first... the BOM
&lt;/h1&gt;

&lt;p&gt;The collection of JavaScript objects &amp;amp; methods that let use access the features of the browser is referred to as the Browser Object Model. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwipPdI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czniaazwv9pgm5pegycu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwipPdI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czniaazwv9pgm5pegycu.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The Document Object Model which is the hierarchy of elements on a page that is accessed from the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement"&gt;window.document&lt;/a&gt; object. The DOM is really just part of the wider Browser Object Model BOM. &lt;/p&gt;

&lt;p&gt;The BOM then forms part of the wider set of Web APIs which allow us to tap into the wider features of the web.&lt;/p&gt;

&lt;p&gt;I often like to access a form and its element via their names and the document object as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"myform"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

       &lt;span class="c1"&gt;//you can access myform from the dom using document.forms&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

       &lt;span class="c1"&gt;//you can access a form's element using form.elements&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#dom-elements"&gt;
  &lt;/a&gt;
  DOM Elements
&lt;/h1&gt;

&lt;p&gt;Every other html element can be accessed in JavaScript by using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;document.querySelector()&lt;/a&gt;. The attributes of the HTML element can be accessed as a property of it's corresponding element object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#mylink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mylink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// https://google.com&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="c1"&gt;//access html attributes via properties&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// username&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// text&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// value entered into text field  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#window-and-global-scope"&gt;
  &lt;/a&gt;
  Window and Global Scope
&lt;/h1&gt;

&lt;p&gt;Global functions and objects declared with &lt;strong&gt;var&lt;/strong&gt; can be referenced via the window object. Note, that doesn't work with block scoped variables declared with &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// foo&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// undefined&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// [function: baz]&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#dom-nodes-and-id"&gt;
  &lt;/a&gt;
  DOM nodes and ID
&lt;/h1&gt;

&lt;p&gt;Any element with an ID will create a JavaScript object named after that ID. innerHTML is a very useful property that returns the contents of an HTML tab. Though it seems to behave quite differently across various browsers so you're probably better of using document.querySelector().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myheading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;  

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myheading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- logs "My Heading" --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#js-in-html-attributes"&gt;
  &lt;/a&gt;
  JS in html attributes
&lt;/h1&gt;

&lt;p&gt;Some html attributes can allow JavaScript to be executed. The most popular use case is probably calling a function in an &lt;a href="https://www.w3schools.com/tags/ref_eventattributes.asp"&gt;event attribute&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"btnClick()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Button &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
       &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;btnClick&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button clicked!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also execute JavaScript in an anchor tab by specifying JavaScript in the hrefs value. This can supposedly work with elemetets that have the src attribute as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript: console.log('hello')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Say Hello&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#data-attributes"&gt;
  &lt;/a&gt;
  Data attributes
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes"&gt;Data attributes&lt;/a&gt; are custom attributes we can add to and element and are a great way to provide contextual data to an event handler. You can create a data attribute by supplying your custom attribute with a data- prefix. Then you can access the value by using the dataset property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"john"&lt;/span&gt; &lt;span class="na"&gt;data-age=&lt;/span&gt;&lt;span class="s"&gt;"17"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"logUser(event)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;John Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"mary"&lt;/span&gt; &lt;span class="na"&gt;data-age=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"logUser(event)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Mary Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs john | mary&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs 17 | 18&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/target"&gt;event.target&lt;/a&gt; to get the elment that the click event occured on. This can only work if &lt;strong&gt;event&lt;/strong&gt; is passed to event handler logUser.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope you've learned a few new things in this post. Are there any lesser known tricks that I may have missed? Please share!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/buntine/dom-elements-with-ids-are-global-variable"&gt;Dev.to: DOM Elements with IDs are Global Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html"&gt;Stack Overflow: Attributes &amp;amp; Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2725156/complete-list-of-html-tag-attributes-which-have-a-url-value"&gt;Stack Overflow: URL Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/27852405/html-attributes-that-can-contain-javascript"&gt;Stack Overflow: Elements with JS Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-variables"&gt;Stack Overflow: ID and Global Variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>ian miles cheong twitter</title>
      <author>mdsahin</author>
      <pubDate>Sun, 05 Sep 2021 03:39:35 +0000</pubDate>
      <link>https://dev.to/sahin82767123/ian-miles-cheong-twitter-464p</link>
      <guid>https://dev.to/sahin82767123/ian-miles-cheong-twitter-464p</guid>
      <description>&lt;p&gt;Ian miles cheong twitter on said :&lt;br&gt;
A Taliban spokesperson nonetheless has a lively Twitter account, notwithstanding the platform’s suspension of former President Donald Trump for “hateful” and “violent” content.&lt;br&gt;
The Taliban are actively operating to recapture Afghanistan after the American withdrawal, with endless men, girls, and kids vulnerable to their lives.&lt;br&gt;
&lt;a href="https://ondequando.com/ian-miles-cheong-twitter/"&gt;https://ondequando.com/ian-miles-cheong-twitter/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creating Haskell notebooks with org-mode</title>
      <author>Laura Viglioni</author>
      <pubDate>Sun, 05 Sep 2021 03:30:51 +0000</pubDate>
      <link>https://dev.to/viglioni/creating-haskell-notebooks-with-org-mode-4h7</link>
      <guid>https://dev.to/viglioni/creating-haskell-notebooks-with-org-mode-4h7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#if-you-only-knew-the-power-of-the-dark-side"&gt;
  &lt;/a&gt;
  If you only knew the power of the Dark Side!
&lt;/h3&gt;

&lt;p&gt;Tools like &lt;a href="https://ipython.org/notebook.html"&gt;Jupyter Notebook&lt;/a&gt; are very well known and useful, although limited to a few languages. Wouldn't it be amazing to have this power to create notebooks with any other language?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pnYbPF3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/7guVjhMF9qBKE/giphy.gif%3Fcid%3Decf05e47q37qmzwrptf00no6pjyccaigplovdcpjplwdj59x%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pnYbPF3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/7guVjhMF9qBKE/giphy.gif%3Fcid%3Decf05e47q37qmzwrptf00no6pjyccaigplovdcpjplwdj59x%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this text, we will focus on doing it with Haskell, although it is virtually possible to be done using any language.&lt;/p&gt;

&lt;p&gt;Emacs has a very powerful mode called &lt;a href="https://orgmode.org/"&gt;org-mode&lt;/a&gt;, I once wrote &lt;a href="https://dev.to/viglioni/installing-latex-themes-on-your-machine-emacs-org-mode-1k9e"&gt;a text&lt;/a&gt; about using it to write presentations with &lt;a href="https://ctan.org/pkg/beamer?lang=en"&gt;beamer&lt;/a&gt;. This same mode allows us to write code snippets (&lt;strong&gt;and execute them!&lt;/strong&gt;), which is helpful to write notes/documents/presentations and export them to several formats like pdf, HTML, markdown, LaTeX and more!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1qOFYluebBg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qFEUapB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/Y9zXpUBsE0INO/giphy.gif%3Fcid%3D790b7611eda5c9355bae7673018d1b4da33d2ce80fac8628%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qFEUapB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/Y9zXpUBsE0INO/giphy.gif%3Fcid%3D790b7611eda5c9355bae7673018d1b4da33d2ce80fac8628%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your Emacs will need some packages: &lt;code&gt;org&lt;/code&gt;, &lt;code&gt;org-babel&lt;/code&gt; and &lt;code&gt;haskell-mode&lt;/code&gt;. If you use &lt;a href="http://spacemacs.org"&gt;spacemacs&lt;/a&gt; it is enough to add these layers in your &lt;code&gt;.spacemacs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;    &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="c1"&gt;;; ...&lt;/span&gt;
     &lt;span class="nv"&gt;dotspacemacs-configuration-layers&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;
         &lt;span class="nv"&gt;haskell&lt;/span&gt;
         &lt;span class="c1"&gt;;; ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you must have &lt;a href="https://downloads.haskell.org/~ghc/"&gt;GHC&lt;/a&gt; on your machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improving-what-we-already-have"&gt;
  &lt;/a&gt;
  Improving what we already have
&lt;/h3&gt;

&lt;p&gt;It is important to note that once you have those packages installed, Emacs already knows how to execute Haskell blocks. The motivation of this text is to compile the learning I had these last few months of how to do it better.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGBa45fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/NsIwMll0rhfgpdQlzn/giphy.gif%3Fcid%3D790b7611531ae5c75a90d7cb9149659570d5bd1efff6f41b%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGBa45fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/NsIwMll0rhfgpdQlzn/giphy.gif%3Fcid%3D790b7611531ae5c75a90d7cb9149659570d5bd1efff6f41b%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run a code block is as simple as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    #+begin_src &amp;lt;language name&amp;gt;
      &amp;lt;code&amp;gt;
    #+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and hit &lt;code&gt;C-c C-c&lt;/code&gt;. If your Emacs knows how to compile it, it will execute the code and put the result below your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-multiline-haskell-code"&gt;
  &lt;/a&gt;
  Writing multiline Haskell code
&lt;/h3&gt;

&lt;p&gt;The default way that &lt;code&gt;org-babel&lt;/code&gt; compiles your code is using &lt;code&gt;GHCi&lt;/code&gt;, so if you have to write a multiline code, then you need to do it as if we were inside a &lt;code&gt;GHCi&lt;/code&gt; buffer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;-- a very verbose way to sum a sequence of numbers:  &lt;/span&gt;
    &lt;span class="n"&gt;sumInts&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="n"&gt;sumInts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sumInts&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sumInts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;         
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;i.e.&lt;/em&gt; we need to put the multiline part of the code inside &lt;code&gt;:{ :}&lt;/code&gt; and what we want to be on the output on the last line. Also, it is important to note that, since it is running inside a &lt;code&gt;GHCi&lt;/code&gt;, we will only see the result of the last call. &lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;GHCi&lt;/code&gt; commands like &lt;code&gt;:set -XDataKinds&lt;/code&gt; too :))&lt;/p&gt;

&lt;p&gt;You may be asking yourself what is that &lt;code&gt;:exports both&lt;/code&gt;. As I said earlier, we can export this &lt;code&gt;org&lt;/code&gt; file to several formats. The &lt;code&gt;:exports&lt;/code&gt; tag defines if we want to export the code, result, both or none. You can check out the other tags &lt;a href="https://orgmode.org/manual/Using-Header-Arguments.html#Using-Header-Arguments"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: GitHub understands &lt;code&gt;org&lt;/code&gt; files without any manual export. You can use &lt;code&gt;org&lt;/code&gt; files to READMEs, or even to post &lt;a href="https://github.com/Viglioni/lang-studies/blob/main/learn-you-a-haskell/chapter-11.org"&gt;your notebooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_coe-BN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/x2Vx409.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_coe-BN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/x2Vx409.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formatting-the-output"&gt;
  &lt;/a&gt;
  Formatting the output
&lt;/h3&gt;

&lt;p&gt;As you may have noticed in the excerpt above, the output has a &lt;code&gt;Prelude&amp;gt;&lt;/code&gt; "prefix", and it might get bigger if you import other libs or executes multiline blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;map&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXR_IUGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/crnWnvD4kWUAAAAC/annoyed-annoying.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXR_IUGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/crnWnvD4kWUAAAAC/annoyed-annoying.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can avoid that with the &lt;code&gt;:post&lt;/code&gt; tag. This tag executes a function, of your choice, with the output of your code block as input. To get that, we will use... Yes, another code block :D&lt;/p&gt;

&lt;p&gt;At the beginning of your code, add these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;    &lt;span class="o"&gt;#+&lt;/span&gt;&lt;span class="nv"&gt;name:&lt;/span&gt; &lt;span class="nv"&gt;org-babel-haskell-formatter&lt;/span&gt;
    &lt;span class="o"&gt;#+&lt;/span&gt;&lt;span class="nv"&gt;begin_src&lt;/span&gt; &lt;span class="nv"&gt;emacs-lisp&lt;/span&gt; &lt;span class="ss"&gt;:var&lt;/span&gt; &lt;span class="nv"&gt;strr=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="ss"&gt;:exports&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rx&lt;/span&gt; &lt;span class="nv"&gt;line-start&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;| alphanumeric blank "." "|&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;")))
               "" (format "&lt;/span&gt;&lt;span class="nv"&gt;%s&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;strr&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="o"&gt;#+&lt;/span&gt;&lt;span class="nv"&gt;end_src&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt; &lt;a href="https://github.com/Viglioni/laurisp/blob/main/config/org-mode-extra-configs.org"&gt;This is the file I use to store this func in my repo&lt;/a&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;For now on, on your Haskell code blocks, you add the &lt;code&gt;#+name:&lt;/code&gt; you gave to that code block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;map&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#you-might-be-asking-yourself-right-now"&gt;
  &lt;/a&gt;
  You might be asking yourself right now:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#will-you-always-have-to-write-this-template-on-the-raw-beginsrc-endraw-"&gt;
  &lt;/a&gt;
  Will you always have to write this template on the &lt;code&gt;#+begin_src&lt;/code&gt;?
&lt;/h5&gt;

&lt;p&gt;Unfortunately, yes. My recommendation is to create a snippet to generate this Haskell block code or to create some helper function that does that for you.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#will-you-have-to-define-the-formatter-function-on-every-org-file"&gt;
  &lt;/a&gt;
  Will you have to define the formatter function on every org file?
&lt;/h5&gt;

&lt;p&gt;No! :D&lt;/p&gt;

&lt;p&gt;You can add to your config files an org file with that function definition and import it on your Emacs initiation using the &lt;code&gt;org-babel-lob-ingest&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="s"&gt;"org"&lt;/span&gt;
      &lt;span class="c1"&gt;;; load extra configs to org mode&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-babel-lob-ingest&lt;/span&gt; &lt;span class="s"&gt;"~/path/to/org-config-file.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that if you add a relative path (&lt;code&gt;./org-config-file.org&lt;/code&gt;) it might fail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-wild-awesome-feature-appears"&gt;
  &lt;/a&gt;
  A wild awesome feature appears!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUNhyY99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/dwxrfKboa0YAAAAC/darth-vader.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUNhyY99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/dwxrfKboa0YAAAAC/darth-vader.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the coolest stuff about using &lt;code&gt;org&lt;/code&gt; to write code snippets, even if you will not execute them, is that you can use specific modes while writing your snippet! &lt;/p&gt;

&lt;p&gt;With the cursor inside the &lt;code&gt;#+begin_src&lt;/code&gt; block, call a function &lt;code&gt;org-edit-special&lt;/code&gt; (&lt;code&gt;, '&lt;/code&gt; on spacemacs default binding), then Emacs will open a new buffer with your language mode. To exit it, hit &lt;code&gt;C-c '&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-external-haskell-libs-with-stack"&gt;
  &lt;/a&gt;
  Using external Haskell libs with Stack
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OsPz7Wy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/vjlozeBNuwEAAAAC/ive-been-looking-forward-to-this-dooku.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OsPz7Wy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/vjlozeBNuwEAAAAC/ive-been-looking-forward-to-this-dooku.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one was the trickiest to me, mostly because I'm not very familiar with the &lt;a href="https://docs.haskellstack.org/en/stable/"&gt;stack&lt;/a&gt; ecosystem. Maybe this is not the best way of doing it, but this is the way that I achieved it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Stack&lt;/code&gt; has a global project by default, you can check it out on &lt;code&gt;~/.stack/global-project&lt;/code&gt;. Inside this directory, create a new project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nv"&gt;$ &lt;/span&gt;stack new org-haskell new-template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On &lt;code&gt;~/.stack/global-project/stack.yaml&lt;/code&gt; add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;            &lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;org-haskell&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, all the libs you have imported on your &lt;code&gt;.stack/global-project/org-haskell/packages.yaml&lt;/code&gt; will be available on &lt;code&gt;stack ghci&lt;/code&gt;. For &lt;code&gt;org-babel&lt;/code&gt; to use it instead of regular &lt;code&gt;GHCi&lt;/code&gt;, set this variable on your configs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;haskell-process-type&lt;/span&gt; &lt;span class="ss"&gt;'stack-ghci&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#know-the-power-of-the-dark-side"&gt;
  &lt;/a&gt;
  Know the power of the Dark Side!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UydVxfxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiIzIhgJ6ZrY3cZeo/giphy.gif%3Fcid%3D790b76119c80a5db5863d2363f1ec9e44c75267bf50b1f35%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UydVxfxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiIzIhgJ6ZrY3cZeo/giphy.gif%3Fcid%3D790b76119c80a5db5863d2363f1ec9e44c75267bf50b1f35%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I do hope this is helpful for you.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;org-mode&lt;/code&gt; is a &lt;strong&gt;very&lt;/strong&gt; powerful tool, I do recommend that you know it and use it!&lt;/p&gt;

&lt;p&gt;Stay safe, use masks (even if you already got your shots!) and use Emacs&lt;br&gt;
xoxo&lt;/p&gt;

&lt;p&gt;&lt;small&gt; &lt;a href="https://www.reddit.com/r/emacs/comments/lf2cfm/just_in_case_yall_were_looking_for_some_new/"&gt;The header picture&lt;/a&gt; &lt;/small&gt;&lt;/p&gt;

</description>
      <category>emacs</category>
      <category>haskell</category>
      <category>org</category>
      <category>notebook</category>
    </item>
    <item>
      <title>Tailwind CSS: core concepts and JIT mode.</title>
      <author>Tony Kharioki</author>
      <pubDate>Sun, 05 Sep 2021 02:58:50 +0000</pubDate>
      <link>https://dev.to/kharioki/tailwind-css-core-concepts-and-jit-mode-c94</link>
      <guid>https://dev.to/kharioki/tailwind-css-core-concepts-and-jit-mode-c94</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-tailwindcss"&gt;
  &lt;/a&gt;
  What is Tailwindcss?
&lt;/h2&gt;

&lt;p&gt;It is a utility-first css framework packed with classes and can be composed to build any design, directly in your markup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Its like bootstrap or materialize but while frameworks give you fully built components, tailwind gives you low-level utility classes to make your own components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example: lets say we want to build a &lt;code&gt;card&lt;/code&gt; component &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OWBupYXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0usu2usiwlxv1qor8c9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWBupYXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0usu2usiwlxv1qor8c9.png" alt="card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-prerequisites-to-using-tailwindcss"&gt;
  &lt;/a&gt;
  What are the prerequisites to using tailwindcss?
&lt;/h2&gt;

&lt;p&gt;To use tailwind, you'l need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic understanding of both HTML and CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-tailwind-css"&gt;
  &lt;/a&gt;
  Using Tailwind CSS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can install Tailwind CLI using npm.&lt;/li&gt;
&lt;li&gt;You'll need node.js installed on your computer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-tailwind-works"&gt;
  &lt;/a&gt;
  How Tailwind works?
&lt;/h2&gt;

&lt;p&gt;We create a source file where we import Tailwind utilities and can even write our own css. Tailwind then processes that source file into vanilla css output file at build time with all the css which we link to our html pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-core-concepts"&gt;
  &lt;/a&gt;
  Tailwind Core Concepts
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Its Constraint Based&lt;/strong&gt;- Provides an API for your design system.&lt;br&gt;
Tailwind's utility classes help you work within the constraints of a system instead of littering your stylesheets with arbitrary values.&lt;br&gt;
They make it easy to be consistent with color choices, spacing, typography, shadows and everything else that makes up a well-engineered design system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build anything&lt;/strong&gt; - Build whatever you want, seriously&lt;br&gt;
Because tailwind is so low-level, it never encourages you to build/design the came site twice. Even with the same color palette and sizing scale, its easy to build the same component with a completely different look in the next project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;- Its tiny in production&lt;br&gt;
Tailwind automatically removes all unused css when building for production. This means your final css bundle is the smallest it could possibly be. Usually less than 10kb&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mobile first&lt;/strong&gt; - responsive everything&lt;br&gt;
Tailwind lets you build responsive designs right into your html. You can add a screen size in front of any utility class and it will apply it at a specific breakpoint.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;State variants&lt;/strong&gt; - style different things on state changes&lt;br&gt;
You can stick &lt;code&gt;hover, focus, active, disabled, focus-within, focus visible&lt;/code&gt; or even tailwind's &lt;code&gt;group-hover&lt;/code&gt; and would style something on these state changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Component driven&lt;/strong&gt; - you can extract repeated utilities into a component.&lt;br&gt;
If you're not into component frameworks, you can use Tailwinds &lt;code&gt;@apply&lt;/code&gt; directive to extract repeated utility patterns into custom css classes just by copying and pasting the list of class names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dark mode&lt;/strong&gt; - To enable dark mode in your configuration file throw &lt;code&gt;dark:&lt;/code&gt; in front of any color utility to apply it when dark mode is active. This works for background colors, text colors, border colors and even gradients.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customization&lt;/strong&gt; - extend it, tweak it or change it&lt;br&gt;
Use the &lt;code&gt;tailwind.config.js&lt;/code&gt; to craft your own design system then let tailwind transform it into your own custom css framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Modern features&lt;/strong&gt; - Tailwind provides first-class css grid suppo, composable transforms and gradients powered by css variables, support for modern state selectors like &lt;code&gt;focus-visible&lt;/code&gt; e.t.c&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Editor Tools&lt;/strong&gt; - world class IDE integration&lt;br&gt;
Tailwind css intellisense extension integrates perfectly with vs code providing you with intelligent autocomplete suggestions, linting, class definitions and more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1MpYmm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp5wyiz4oi4bvgg5hhxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1MpYmm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp5wyiz4oi4bvgg5hhxl.png" alt="Tailwind vscode plugin"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ready-made components with Tailwind UI&lt;/strong&gt; -&lt;br&gt;
Tailwind UI is a collection of beautiful, fully responsive UI components, designed and developed by creators of Tailwind CSS.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#justintime-mode"&gt;
  &lt;/a&gt;
  Just-In-Time Mode
&lt;/h2&gt;

&lt;p&gt;Just-In-Time(JIT) is a faster more powerful, on-demand engine for tailwind css v2.1+&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a compiler for Tailwind css that generates your styles on-demand as you author your templates instead of generating everything in advance at initial build-time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-use-jit-mode"&gt;
  &lt;/a&gt;
  Why use JIT mode?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lightining fast build times&lt;/strong&gt; - this library can compile even the biggest projects in about 800ms(with incremental builds as fast as 3ms), no matter what tool you're using. This usually takes 3 - 8s to initially compile using CLI and 30-45s in webpack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Every variant is enabled out-of-the-box&lt;/strong&gt; - since the library generates styles on demand, you can use any variant you want, whenever you want. you can even stack them like &lt;code&gt;sm:hover:active:disabled:opacity-75&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generate arbitrary styles without writing custom css&lt;/strong&gt; - since styles are generated on demand, you can generate a utility for any ultra-specific value using square bracket notation like &lt;code&gt;bg-[#ffa6d7]&lt;/code&gt;. This works with variants too eg &lt;code&gt;md:bg-[#ffa6d7]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Your CSS is identical in development and production&lt;/strong&gt; - you do not need to purge unused styles for production since you see the exact same css in all environments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Better browser performance in development&lt;/strong&gt; - since development builds are as small as production builds, the browser doesn't have to parse and manage multiple megabytes of pre-generated css.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-we-use-jit-mode"&gt;
  &lt;/a&gt;
  How we use JIT mode?
&lt;/h2&gt;

&lt;p&gt;To enable just-in-time mode, set the &lt;code&gt;mode&lt;/code&gt; option to &lt;code&gt;jit&lt;/code&gt; in the &lt;code&gt;tailwind.config.js&lt;/code&gt; file.&lt;br&gt;
You'll also need to configure the &lt;code&gt;purge&lt;/code&gt; option in &lt;code&gt;tailwind.config.js&lt;/code&gt; with all your template paths.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIYpCyyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrbng53huii6dwc7vf6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIYpCyyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrbng53huii6dwc7vf6z.png" alt="jit config"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>Vocabulary Building Day9</title>
      <author>vindhya Hegde </author>
      <pubDate>Sun, 05 Sep 2021 02:04:19 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day9-4abb</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day9-4abb</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;chortle&lt;/strong&gt;(verb): laugh merrily, laugh in a noisy, gleeful way.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hAXJD6py--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/jawmt14yZd4/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hAXJD6py--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/jawmt14yZd4/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=chortle&amp;amp;oq=chor&amp;amp;aqs=chrome.0.69i59l2j46i433i512j0i433i512j46i175i199i512j0i433i512l2j46i433i512j0i433i512.3931j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;exacerbate&lt;/strong&gt;(verb) :make worse.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3WPV9f2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wZxWHEyHA6o/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3WPV9f2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wZxWHEyHA6o/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=exacerbate&amp;amp;oq=exacerbate&amp;amp;aqs=chrome..69i57j0i433i512l3j0i512l6.5917j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;banal&lt;/strong&gt;(adjective): repeated too often, overfamiliar through overuse.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GU7PJi__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/72sfgHuScu0/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GU7PJi__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/72sfgHuScu0/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=banal&amp;amp;oq=banal&amp;amp;aqs=chrome.0.69i59j0i433i512l2j0i512j46i175i199i512j0i512l2j46i512j46i10i512j0i512.2615j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;decorous&lt;/strong&gt;(adjective): characterized by good taste in manners and conduct.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9C72O3PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.seekapor.com/wp-content/uploads/2019/11/adjoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9C72O3PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.seekapor.com/wp-content/uploads/2019/11/adjoa.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=semblance+meaning&amp;amp;oq=semblance&amp;amp;aqs=chrome.0.0i433i512j69i57j0i131i433i512j0i512l7.4293j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;culminate&lt;/strong&gt;(verb): reach a climax or point of highest development.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dEQNrff4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.dreamstime.com/b/culminate-2084723.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dEQNrff4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.dreamstime.com/b/culminate-2084723.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=culminate&amp;amp;oq=culminate&amp;amp;aqs=chrome..69i57j0i433i512l2j0i512l7.15137j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day9</category>
    </item>
    <item>
      <title>Call stack? Event loop? Async? 🤔</title>
      <author>Takuya Kikuchi</author>
      <pubDate>Sun, 05 Sep 2021 01:52:23 +0000</pubDate>
      <link>https://dev.to/takuyakikuchi/call-stack-event-loop-async-4aod</link>
      <guid>https://dev.to/takuyakikuchi/call-stack-event-loop-async-4aod</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-call-stack-event-loop-async"&gt;
  &lt;/a&gt;
  What are Call stack? Event loop? Async? 🤔
&lt;/h2&gt;

&lt;p&gt;Watch this youtube to understand them with the awesome visualization!&lt;/p&gt;

&lt;p&gt;What the heck is the event loop anyway? | Philip Roberts | JSConf EU - YouTube: &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8aGhZQkoFbQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memo"&gt;
  &lt;/a&gt;
  Memo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JS is single thread, non-blocking, asynchronous, concurrent language&lt;/li&gt;
&lt;li&gt;JS has

&lt;ul&gt;
&lt;li&gt;call stack&lt;/li&gt;
&lt;li&gt;event loop&lt;/li&gt;
&lt;li&gt;callback queue&lt;/li&gt;
&lt;li&gt;other apis&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;V8 has

&lt;ul&gt;
&lt;li&gt;call stack: execution context&lt;/li&gt;
&lt;li&gt;heap: memory allocation&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Call stack

&lt;ul&gt;
&lt;li&gt;one thread == one call stack == one thing at a time
⇒ blocking&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Why blocking is the problem
⇒ Because JS runs in the browser and while some action is completed, the browser cannot do anything(User cannot take any actions)

&lt;ul&gt;
&lt;li&gt;Render is blocked when there is actions on call stack&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Solution?
⇒ asynchronous callbacks(Concurrency)&lt;/li&gt;
&lt;li&gt;Concurrency &amp;amp; Event loop

&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;setTimeout()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;stack(deferring the action) ⇒ WebAPI(wait for given time) ⇒ task queue(wait until the call stack is empty) ⇒ Event loop(move the action to stack) ⇒ stack(run the action)

&lt;ul&gt;
&lt;li&gt;Event loop: When stack is empty, looks at the task queue and takes the first take from the queue&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Render is blocked when there is actions on call stack, and it has higher priority than Callback queue

&lt;ul&gt;
&lt;li&gt;"Don't put slow call on the stack, make it asynchronous"&lt;/li&gt;
&lt;li&gt;Going asynchronous means give time to render before each async callbacks executed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Scroll event
⇒ Debounce it, because it will create a lot of tasks in the queue&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>youtube</category>
    </item>
    <item>
      <title>Code This #6: Is Anagram</title>
      <author>Let's Code</author>
      <pubDate>Sat, 04 Sep 2021 23:44:35 +0000</pubDate>
      <link>https://dev.to/frontendengineer/code-this-6-is-anagram-pli</link>
      <guid>https://dev.to/frontendengineer/code-this-6-is-anagram-pli</guid>
      <description>&lt;h4&gt;
  &lt;a href="#interview-question-6"&gt;
  &lt;/a&gt;
  Interview Question #6:
&lt;/h4&gt;

&lt;p&gt;Write a function that will check if two strings are anagram❓🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need practice, try to solve this on your own. I have included 2 potential solutions below. &lt;/p&gt;

&lt;p&gt;Note: There are many other potential solutions to this problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Feel free to bookmark 🔖 even if you don't need this for now. You may need to refresh/review down the road when it is time for you to look for a new role.&lt;/p&gt;

&lt;p&gt;Code if you want to play around with it: &lt;a href="https://codepen.io/angelo_jin/pen/xxrVmdg"&gt;https://codepen.io/angelo_jin/pen/xxrVmdg&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution-1-array-sort"&gt;
  &lt;/a&gt;
  Solution #1: Array Sort
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This solution will utilize a helper function to remove all unwanted punctuation and symbols, basically non-alphabetic characters. Then, will sort the string. Once both strings are sorted, compare if they are equal
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAnagram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stringB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;normalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\w]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#solution-2-objecthash-map"&gt;
  &lt;/a&gt;
  Solution #2: Object/Hash Map
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This solution is what I prefer although more steps are needed than the first solution. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a helper function to build a hash map for the string counting each and every characters. Once map is built, iterate and compare the count of first map against the second map.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createCharMap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;normalizedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\w]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;normalizedString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAnagram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stringB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;charMapA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCharMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;charMapB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCharMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;charMapA&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;charMapB&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;charMapA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;charMapA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;charMapB&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding and good luck if you are interviewing!&lt;/p&gt;

&lt;p&gt;If you want to support me - &lt;a href="https://www.buymeacoffee.com/letscode77"&gt;Buy Me A Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you like a video instead of bunch of code 👍😊&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZelRKkGk8gY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>javascript</category>
      <category>jobinterview</category>
    </item>
    <item>
      <title>Snake In The JS Shadow: Run your python script in nodeJs</title>
      <author>Ademola Babatunde</author>
      <pubDate>Sat, 04 Sep 2021 23:29:54 +0000</pubDate>
      <link>https://dev.to/addempsea/snake-in-the-js-shadow-run-your-python-script-in-nodejs-im8</link>
      <guid>https://dev.to/addempsea/snake-in-the-js-shadow-run-your-python-script-in-nodejs-im8</guid>
      <description>&lt;p&gt;&lt;sup&gt;The cover image was sourced from &lt;a href="https://pythonsway.it/javascript-python/"&gt;here&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Ever wondered if you could run a python function inside a nodejs code? I wondered also and I researched and got to see a module in nodejs &lt;strong&gt;child_process&lt;/strong&gt; which allows you to run child processes. You may wonder what child processes are, well according to Wikipedia,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A child process in computing is a process created by another process. This technique pertains to multitasking operating systems and is sometimes called a subprocess or traditionally a subtask. There are two major procedures for creating a child process: the fork system call and the spawn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will attempt to walk you through how to run a non-blocking python script inside of your nodejs code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#musthaves"&gt;
  &lt;/a&gt;
  Must-Haves
&lt;/h2&gt;

&lt;p&gt;Obviously, you must have nodejs installed on your machine. After which you should import the fs module.&lt;br&gt;
Also because I want to display the results in a browser, let's use express to serve it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install express&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up"&gt;
  &lt;/a&gt;
  Set up
&lt;/h2&gt;

&lt;p&gt;Create two files, &lt;strong&gt;index.js&lt;/strong&gt; and &lt;strong&gt;main.py&lt;/strong&gt;, add the code below to your index.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { spawn } = require('child_process');
const express = require("express");
const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the main.py file, add the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print('Hello')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" alt="hr.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-implementation"&gt;
  &lt;/a&gt;
  Main Implementation
&lt;/h2&gt;

&lt;p&gt;In the index.js file, add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const pythonPromise = () =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    const python = spawn("python", ["./main.py"]);
    python.stdout.on("data", (data) =&amp;gt; {
      resolve(data.toString());
    });

    python.stderr.on("data", (data) =&amp;gt; {
      reject(data.toString());
    });
 });
};
app.get("/:name", async (req, res) =&amp;gt; {
  const dataFromPython = await pythonPromise();
  res.send(dataFromPython + req.params.name);
});
app.listen(3200, () =&amp;gt; console.log("App is running port 3200"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The spawn function here takes two arguments, the first &lt;code&gt;"python"&lt;/code&gt; which is the program we want to run, and &lt;code&gt;"./main"&lt;/code&gt; which is the path to the python file we wish to run.&lt;br&gt;
We all know nodejs is event-driven, the two events we are listening for are the &lt;code&gt;python.stdout.on&lt;/code&gt; and &lt;code&gt;python.stderr.on&lt;/code&gt;. The &lt;strong&gt;stderr&lt;/strong&gt; is short for standard error, which occurs while attempting to run the python script while &lt;strong&gt;stdout&lt;/strong&gt; is short for standard output, which is the return value from our script. The type of data returned is binary, which is why you need to call the &lt;code&gt;toString()&lt;/code&gt; method to convert it to a string.&lt;/p&gt;

&lt;p&gt;Start your server with &lt;code&gt;node index.js&lt;/code&gt; and visit &lt;code&gt;http://localhost:3200/yourName&lt;/code&gt; in your browser or postman to see the result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" alt="hr.png"&gt;&lt;/a&gt;&lt;br&gt;
There will really be no need to use python scripts if we are not passing arguments to the python script, let's edit our &lt;strong&gt;main.py&lt;/strong&gt; to have a function that takes arguments from your nodejs code. Replace with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sys
print('Hello ' + sys.argv[1] + ' your id is ' + sys.argv[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we add more arguments to the spawn function and our index.js file should look like this below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const pythonPromise = (data) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    const python = spawn("python", ["./main.py", ...data]);

    python.stdout.on("data", (data) =&amp;gt; {
      resolve(data.toString());
    });

    python.stderr.on("data", (data) =&amp;gt; {
      reject(data.toString());
    });
  });
};

app.get("/:name/:id", async (req, res) =&amp;gt; {
  const { name, id } = req.params;
  const dataFromPython = await pythonPromise([name, id]);
  res.send(dataFromPython);
});
app.listen(3200, () =&amp;gt; console.log("App is running port 3200"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may be wondering what the sys module we imported in the main.py script is. According to &lt;a href="https://www.geeksforgeeks.org/how-to-use-sys-argv-in-python/"&gt;geeksforgeeks&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The sys module provides functions and variables used to manipulate different parts of the Python runtime environment. This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the indexes argv[1] and argv[2] are the parameters we wish to pass to the script. The first argument, argr[0] is the name of the file we are running the script from.&lt;br&gt;
Start your server with &lt;code&gt;node index.js&lt;/code&gt; and visit &lt;code&gt;http://localhost:3200/yourName/anyId&lt;/code&gt; in your browser or postman to see the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" alt="hr.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a very basic example to expose you to the powers of the spawn method of the child_process module. There could be complex cases like passing JSON objects to your python script or receiving JSON data from the script, but this should get you started on the path to running python scripts in your nodejs applications. ✌🏻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>webdev</category>
      <category>node</category>
    </item>
  </channel>
</rss>
