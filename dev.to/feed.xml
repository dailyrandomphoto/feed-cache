<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>UIHUT- Product of the Day</title>
      <author>Mahfuzul Islam Nabil</author>
      <pubDate>Sat, 20 Nov 2021 06:39:52 +0000</pubDate>
      <link>https://dev.to/mahfuzulnabil/uihut-product-of-the-day-5373</link>
      <guid>https://dev.to/mahfuzulnabil/uihut-product-of-the-day-5373</guid>
      <description>&lt;p&gt;Hey, Dev's Beautiful People.&lt;br&gt;
We are Really Thankful to Guys for showing your love for us. We did it. We Got #1 Product of the day Badge.ðŸ¥°ðŸ¥°&lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/uihut-2-0"&gt;https://www.producthunt.com/posts/uihut-2-0&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vdeqdRYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oukew3379gqlgtzil0yt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vdeqdRYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oukew3379gqlgtzil0yt.png" alt="Image description" width="880" height="618"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lot's of Love.&lt;/p&gt;

</description>
      <category>producthunt</category>
      <category>webdev</category>
      <category>uiresouces</category>
      <category>webdesign</category>
    </item>
    <item>
      <title>Doing code reviews</title>
      <author>TueNguyen2911</author>
      <pubDate>Sat, 20 Nov 2021 06:26:41 +0000</pubDate>
      <link>https://dev.to/tuenguyen2911_67/doing-code-reviews-12op</link>
      <guid>https://dev.to/tuenguyen2911_67/doing-code-reviews-12op</guid>
      <description>&lt;p&gt;This week, I had a chance to review some pull requests from different students in &lt;a href="https://github.com/Seneca-ICTOER/IPC144"&gt;IPC144&lt;/a&gt; repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review-1"&gt;
  &lt;/a&gt;
  Review #1
&lt;/h2&gt;

&lt;p&gt;I did some reviews for this a PR on &lt;code&gt;Information.md&lt;/code&gt; but the author ran into some technical issues, I tried to help him to resolve using git, but he deleted his fork and tried opening new PRs. I pointed out some typo issues, markdown issues and his mistake committing an unresolved conflict. You can check them here, &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/115"&gt;PR#1&lt;/a&gt;, &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/101"&gt;PR#2&lt;/a&gt;, &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/119"&gt;PR#3&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review-2"&gt;
  &lt;/a&gt;
  Review #2
&lt;/h2&gt;

&lt;p&gt;I pointed out an unnecessary section of the page of the &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/79"&gt;PR&lt;/a&gt; on &lt;code&gt;functions-arrays-and-structs.md&lt;/code&gt; and advised an accessibility improvement on this &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/92"&gt;PR&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;Reviewing does take quite some time and great attention to details especially with those PRs. I did have some fun reading people's reviews and I learnt more about correct markdown syntaxes. I hope to review more challenging PRs next time.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Add Continuous Integration to GitHub Repo</title>
      <author>Qiwen Yu</author>
      <pubDate>Sat, 20 Nov 2021 06:19:36 +0000</pubDate>
      <link>https://dev.to/qiwenyu/add-continuous-integration-to-github-repo-n54</link>
      <guid>https://dev.to/qiwenyu/add-continuous-integration-to-github-repo-n54</guid>
      <description>&lt;p&gt;In this work,&lt;/p&gt;

</description>
      <category>ci</category>
      <category>python</category>
      <category>github</category>
      <category>actions</category>
    </item>
    <item>
      <title>Getting started with Go</title>
      <author>Abhinav Pandey</author>
      <pubDate>Sat, 20 Nov 2021 06:03:20 +0000</pubDate>
      <link>https://dev.to/abh1navv/getting-started-with-go-54pm</link>
      <guid>https://dev.to/abh1navv/getting-started-with-go-54pm</guid>
      <description>&lt;p&gt;Golang is a programming language that popularly used to build web applications. In this article, I'm going to give a brief introduction to Golang (aka "Go")&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;To install Golang, please follow the instructions below.&lt;br&gt;
Download the latest version of Golang from &lt;a href="https://golang.org/"&gt;Golang website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow the installation instructions as per your OS.&lt;br&gt;
Set environment variables- For e.g. on Mac, I would run the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;export GOPATH=$HOME/go&lt;/code&gt; - This is the path where I will store my Golang projects. This is used as default by the Go compiler to find the packages you create.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;export GOROOT=$HOME/go&lt;/code&gt; - This is the directory where you will find the &lt;code&gt;go&lt;/code&gt; binary.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;export PATH=$PATH:$GOROOT/bin&lt;/code&gt; - This adds the 'go' executable to the PATH variable so that you can run it from anywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#lets-say-hello-to-the-world"&gt;
  &lt;/a&gt;
  Let's say Hello to the world
&lt;/h2&gt;

&lt;p&gt;Let's look at a simple traditional Hello world program.&lt;/p&gt;

&lt;p&gt;Create a new directory in your home directory and name it &lt;code&gt;hello&lt;/code&gt;.&lt;br&gt;
Create a new file in the &lt;code&gt;hello&lt;/code&gt; directory and name it &lt;code&gt;main.go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;main.go&lt;/code&gt; file, write the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="c"&gt;// Package declaration&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt; &lt;span class="c"&gt;// Import statement&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;// Main function&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run this file in a terminal.&lt;br&gt;
Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's look at the code in a more detailed way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line of the file is the package declaration. If you are familiar with Java, this is the same as the package declaration in Java. This will be helpful when you want to import this file into another Go file. &lt;/li&gt;
&lt;li&gt;Next we have the import statement. It includes the standard package &lt;code&gt;fmt&lt;/code&gt;(Format). This package is used here to print the output. It can also be used to read input from the user. There can be many use cases for &lt;code&gt;fmt&lt;/code&gt; but let's not dig deep right now.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;main()&lt;/code&gt; function is the entry point of the program. This is where the program execution begins (again, this is the same as the main method in Java but more concise).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: Go provides a simpler &lt;code&gt;print/println&lt;/code&gt; function too. However, it is not recommended to use this function. &lt;code&gt;fmt&lt;/code&gt; is the preferred way because it is more flexible and can be used for many use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-try-a-function-call"&gt;
  &lt;/a&gt;
  Let's try a function call
&lt;/h2&gt;

&lt;p&gt;Let's change the output of the program to print the name of the user.&lt;br&gt;
For this, we will use the &lt;code&gt;fmt&lt;/code&gt; package.&lt;br&gt;
Let's add the following code to the &lt;code&gt;main.go&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; 

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;  

&lt;span class="c"&gt;// function that reads name from console and returns it&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; 
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter your name: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scanln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c"&gt;// a main function which calls the getName() method and prints Hello with the name&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, %s!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run this file in a terminal.&lt;br&gt;
Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
Enter your name: 
John
Hello, John!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at the getName() function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line of the function is the function declaration. It has two parts: the return type &lt;code&gt;string&lt;/code&gt;  and the function name &lt;code&gt;getName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next we have the variable declaration. This is where we declare the variable &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. We will cover more on variables in the next article.&lt;/li&gt;
&lt;li&gt;Notice the return statement. This is where the value of the variable &lt;code&gt;name&lt;/code&gt; is returned to the main function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another point to notice is the &lt;code&gt;:=&lt;/code&gt; operator used in the main function. This is a shorthand for declaring and initializing a variable. Here, we are declaring the variable &lt;code&gt;name&lt;/code&gt; and initializing it with the value returned by the &lt;code&gt;getName()&lt;/code&gt; function. We do not need to write the &lt;code&gt;var&lt;/code&gt; keyword or the type of the variable.&lt;/p&gt;




&lt;p&gt;This should give you a tiny idea of how Go works. In the next article, I will cover the basics of using variables and functions in Go. Stay tuned.&lt;br&gt;
Thanks for reading. If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Best Digital Marketing Training Institute In Jalandhar</title>
      <author>itronix11</author>
      <pubDate>Sat, 20 Nov 2021 05:45:38 +0000</pubDate>
      <link>https://dev.to/itronix11/best-digital-marketing-training-institute-in-jalandhar-4p1e</link>
      <guid>https://dev.to/itronix11/best-digital-marketing-training-institute-in-jalandhar-4p1e</guid>
      <description>&lt;p&gt;Itronix Solutions offers the &lt;a href="https://itronixsolution.com/digital-marketing-course-jalandhar/"&gt;best Digital Marketing Training in Jalandhar&lt;/a&gt;, according to industry standards. Itronix Solutions is one of the most highly regarded &lt;a href="https://www.itronixsolutions.com/digital-marketing-training-course-in-jalandhar/"&gt;Digital Marketing Training Institutes in Jalandhar&lt;/a&gt;, providing hands-on practical knowledge/practical implementation on live case studies, as well as advanced level Digital Marketing Training Courses to assure job placement. &lt;a href="https://priyadogra.com/digital-marketing-training-course-in-jalandhar/"&gt;Digital Marketing Training in Jalandhar&lt;/a&gt; is delivered by qualified corporate professionals with 10+ years of expertise implementing real-time Digital Marketing projects and case studies at Itronix Solutions.&lt;br&gt;
Itronix School of &lt;a href="https://thedigitaladda.com/digital-marketing-training-jalandhar/"&gt;Digital Marketing Training Institute in Jalandhar&lt;/a&gt; offers hands-on digital marketing training through live projects. Our Certified and Experienced Trainers will assist you in gaining knowledge and expertise in building websites from the ground up and using digital technologies to market your products and services online. Rather of grabbing books, we'll lead you through real-world projects. As a result, you will have a better grasp of digital marketing ideas. The finest Digital Marketing Institute in Jalandhar has designed a Digital Marketing Training Course for all Entrepreneurs, Job Seekers, and Professionals.&lt;br&gt;
Being a Microsoft Authorized Education Partner, Cisco Partners, Intel Technology Provider, Google Certified Professionals, and IBM Certified, we are one of the best Digital Marketing Training in Jalandhar. After the completion of the Digital Marketing Course in Jalandhar, Itronix Solutions provides 100% job placement for eligible students.&lt;br&gt;
Contact Itronix Solutions to Enroll for &lt;a href="https://ccnatrainingjalandhar.in/digital-marketing-training-course-in-jalandhar/"&gt;Best Digital Marketing Course in Jalandhar&lt;/a&gt; and Get FREE Digital Marketing Certification from Google. In Their Jalandhar Branch, Digital Marketing Course designs according to current IT requirements.&lt;br&gt;
Address: SCO-28, First Floor, Chotti Baradari, Garha Road, Jalandhar&lt;br&gt;
Phone No: +91 99140 77736, +91 94173 12121&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>CORS for a Twitch Extension</title>
      <author>shrmpy</author>
      <pubDate>Sat, 20 Nov 2021 05:33:36 +0000</pubDate>
      <link>https://dev.to/shrmpy/cors-for-a-twitch-extension-3170</link>
      <guid>https://dev.to/shrmpy/cors-for-a-twitch-extension-3170</guid>
      <description>&lt;p&gt;This article is the fourth in a multi-part series to walk through the creation of a Twitch extension. For the fourth part, the goal is to refactor the CORS headers.&lt;/p&gt;

&lt;p&gt;To go directly to the project, the source code repository is available at&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/shrmpy"&gt;
        shrmpy
      &lt;/a&gt; / &lt;a href="https://github.com/shrmpy/pavlok"&gt;
        pavlok
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      twitch extension project
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
and&lt;br&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/shrmpy"&gt;
        shrmpy
      &lt;/a&gt; / &lt;a href="https://github.com/shrmpy/pavlok-panel"&gt;
        pavlok-panel
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitch extension client ID&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-overview"&gt;
  &lt;/a&gt;
  Â§ Overview
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shrmpy/embed/mdMobOZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-headers"&gt;
  &lt;/a&gt;
  Â§ Headers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-preprocess-endraw-flow"&gt;
  &lt;/a&gt;
  &lt;code&gt;preprocess&lt;/code&gt; flow
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shrmpy/embed/qBXjmJP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-enablecors-endraw-flow"&gt;
  &lt;/a&gt;
  &lt;code&gt;enableCors&lt;/code&gt; flow
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shrmpy/embed/PoKjOBq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The wildcard (&lt;code&gt;*&lt;/code&gt;) in the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header is the primary change in this refactor work. It is time to restrict the origin to the hosting server (&lt;code&gt;ID.ext-twitch.tv&lt;/code&gt;) of the Twitch extension.&lt;/li&gt;
&lt;li&gt;Another change that should not add extra scope, is to remove &lt;code&gt;DELETE&lt;/code&gt; from the &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; header.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-test"&gt;
  &lt;/a&gt;
  Â§ Test
&lt;/h2&gt;

&lt;p&gt;Start the refactor by adding the new test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Calling the test runner will lead to compile errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/cmd/auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#-refactor"&gt;
  &lt;/a&gt;
  Â§ Refactor
&lt;/h2&gt;

&lt;p&gt;Add the new package files to define the configuration and middleware:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;There will be references to &lt;code&gt;enableCors&lt;/code&gt; in &lt;code&gt;preprocess.go&lt;/code&gt; and &lt;code&gt;main.go&lt;/code&gt; files that need to be cleaned-up. &lt;/p&gt;

&lt;p&gt;The changes also break one of the existing tests. So fix the old test for the preflight request&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Afterwards, the compile should be successful. Plus calling the test runner this time should have zero fails. All done? not yet. &lt;em&gt;Even though the tests pass,&lt;/em&gt; the middleware has not been applied to the original handler. Go to the &lt;code&gt;main.go&lt;/code&gt; file and adjust the &lt;code&gt;init()&lt;/code&gt; and &lt;code&gt;lambda.Start()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, the new configuration also expects a new environment variable &lt;code&gt;EXTENSION_ID&lt;/code&gt;. Go to the Netlify &lt;strong&gt;Site settings | Build &amp;amp; deploy | Environment&lt;/strong&gt; page. Click the &lt;strong&gt;Add&lt;/strong&gt; variable button. Name it &lt;code&gt;EXTENSION_ID&lt;/code&gt; and paste the Twitch extension client ID.&lt;/p&gt;

&lt;p&gt;Remember coding standards before saving the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go &lt;span class="nb"&gt;fmt&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;
go &lt;span class="nb"&gt;fmt&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/cmd/auth
git add config.go middleware.go &lt;span class="nv"&gt;$PWD&lt;/span&gt;/cmd/auth
git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s1"&gt;'refactor CORS allow-origin'&lt;/span&gt;
git push origin gh-issue-NNN
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-notes-lessons-monologue"&gt;
  &lt;/a&gt;
  * Notes, Lessons, Monologue
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Why change the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;?&lt;/em&gt; We used the wildcard (&lt;code&gt;*&lt;/code&gt;) in the early iterations, in order to make the requests work. At the time, there were CORS errors to overcome and without knowing the correct values required, we chose to &lt;em&gt;allow all&lt;/em&gt;. Now it's time to restrict access for security. So we learned that the Twitch extension is hosted from the &lt;code&gt;ID.ext-twitch.tv&lt;/code&gt; server and this would be the correct value for the Allow-Origin header.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why the middleware?&lt;/em&gt; It was in our backlog. So it was a matter of when. For this refactor, the idea was to intercept the response to shape the headers (that affect CORS). To intercept the response, do processing, and then continue the response flow, fits the description of middleware. The other benefit of middleware is consolidation and uncluttering the business logic. Before, we checked for preflight in &lt;code&gt;preprocess&lt;/code&gt;, repeated basic responses, and made a direct call to &lt;code&gt;enableCors&lt;/code&gt; from the main handler. Now CORS header logic is in one place, &lt;code&gt;ebs.MiddlewareCORS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why did the test pass before the &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;lambda.Start&lt;/code&gt; was patched?&lt;/em&gt; is the test pointless? The test only covers the middleware for the inputs supplied. The test doesn't execute the &lt;code&gt;main()&lt;/code&gt; or &lt;code&gt;init()&lt;/code&gt; functions. It may seem pointless, which is important to pause and reflect. Writing the test forced the design for a way to control the value of &lt;code&gt;EXTENSION_ID&lt;/code&gt;. Before now, an environment variable was the first choice. So thinking test first, we knew we needed another approach because assigning the environment variable in test scaffolding is not self-contained; the test would need to push any existing environment onto some stack before test run, then pop the environment after tests finish. The environment requires this kind of management because we don't want the test to clobber the variable of the host's environment. Even this precaution isn't self-contained because what if you run tests in parallel? Each test will step on each others' environment variable assignment. A very wordy way to say that's why we created the configuration in this refactor. It might appear as if the configuration struct is an one-off just for the test, but the real value is that it forced us to undertake the decoupling.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why not use dot env files?&lt;/em&gt; Honestly, I didn't think of it. At the time, I considered TOML/YAML for the configuration, and decided it was overkill. Remember that we want to do the &lt;em&gt;minimum&lt;/em&gt; to make a test green. The &lt;a href="https://gist.github.com/shrmpy/68d1d82b21016843267e7acfdb748f5e"&gt;config.go&lt;/a&gt; that we defined is lean in the current incarnation. Down the road, it may be the case that &lt;a href="https://github.com/joho/godotenv"&gt;dot env&lt;/a&gt; files will be the solution that scales.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does the call &lt;code&gt;ebs.MiddlewareCORS(conf, handler)(req)&lt;/code&gt; do?&lt;/em&gt; why is the &lt;code&gt;lambda.Start&lt;/code&gt; different? In the test, this line invokes the function wrapped by the middleware. The invoke uses the &lt;code&gt;req&lt;/code&gt; variable as the parameter to that function. With the &lt;code&gt;lambda.Start&lt;/code&gt;, the &lt;em&gt;function pointer&lt;/em&gt; is being supplied. That reference can be resolved at a later time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why pass the configuration as a parameter to the middleware call?&lt;/em&gt; This is the "trick". We needed a way to specify a setting in the handler. Before writing the test, this wasn't an issue since using an environment variable has global scope; the handler would have access to the variable. Inside the test, we need to specify the setting and supply it to the handler without using globals. So the configuration becomes the parameter. &lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>security</category>
    </item>
    <item>
      <title>Kotlin transform List with map() methods example
</title>
      <author>Harry Nguyen</author>
      <pubDate>Sat, 20 Nov 2021 05:28:44 +0000</pubDate>
      <link>https://dev.to/harrynguyen88/kotlin-transform-list-with-map-methods-example-f4b</link>
      <guid>https://dev.to/harrynguyen88/kotlin-transform-list-with-map-methods-example-f4b</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/kotlin-transform-list-map-methods-example"&gt;https://ozenero.com/kotlin-transform-list-map-methods-example&lt;/a&gt;&lt;br&gt;
In the tutorial, Grokonez will show you how to transform Kotlin List with map() methods.&lt;br&gt;
Read more&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Contributing to Seneca OER</title>
      <author>TueNguyen2911</author>
      <pubDate>Sat, 20 Nov 2021 05:23:25 +0000</pubDate>
      <link>https://dev.to/tuenguyen2911_67/contributing-to-seneca-oer-1ki2</link>
      <guid>https://dev.to/tuenguyen2911_67/contributing-to-seneca-oer-1ki2</guid>
      <description>&lt;p&gt;I had a chance to &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/41/files"&gt;contribute&lt;/a&gt; to &lt;a href="https://github.com/Seneca-ICTOER/IPC144"&gt;IPC144&lt;/a&gt;, a work in progress which aims to upgrade the &lt;a href="https://ict.senecacollege.ca/~ipc144/"&gt;current IPC144 website&lt;/a&gt; using Docusaurus. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue"&gt;
  &lt;/a&gt;
  The issue:
&lt;/h2&gt;

&lt;p&gt;I chose a pretty interesting issue to work on which asked me to convert the website into a pdf, the future students would be able to take notes partly thanks to me, yay! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solving-the-issue"&gt;
  &lt;/a&gt;
  Solving the issue:
&lt;/h2&gt;

&lt;p&gt;I took a look at a few packages that convert Docusaurus website into a pdf and I came to a conclusion to using &lt;a href="https://www.npmjs.com/package/mr-pdf"&gt;mr-pdf&lt;/a&gt; as it supported Docusaurus v.2 and had multiple options. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-mrpdf-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;mr-pdf&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;I created a shell script to run a line of command to convert the website into a pdf and added the script to the &lt;code&gt;scripts&lt;/code&gt; of &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

npx mr-pdf 
&lt;span class="nt"&gt;--initialDocURLs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:3000"&lt;/span&gt; 
&lt;span class="nt"&gt;--contentSelector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"article"&lt;/span&gt; 
&lt;span class="nt"&gt;--paginationSelector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;".pagination-nav__item--next &amp;gt; a"&lt;/span&gt; &lt;span class="nt"&gt;--excludeSelectors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;".margin-vert--xl a,.theme-edit-this-page,.tocCollapsible_1PrD theme-doc-toc-mobile tocMobile_3Hoh,.tocCollapsibleButton_2O1e"&lt;/span&gt; 
&lt;span class="nt"&gt;--coverImage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://download.logo.wine/logo/
Seneca_College/Seneca_College-Logo.wine.png"&lt;/span&gt; 
&lt;span class="nt"&gt;--coverTitle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"IPC144"&lt;/span&gt; 
&lt;span class="nt"&gt;--outputPDFFilename&lt;/span&gt; &lt;span class="s2"&gt;"Seneca-IPC144.pdf"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another issue came up, as &lt;code&gt;mr-pdf&lt;/code&gt; required a running instance of the website (&lt;code&gt;initialDocURLs&lt;/code&gt;), the pagination target (&lt;code&gt;paginationSelector&lt;/code&gt;), I needed to create a way for the project to &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-way-to-automatic-raw-build-endraw-raw-serve-endraw-and-convert"&gt;
  &lt;/a&gt;
  Creating a way to automatic &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt; and convert
&lt;/h3&gt;

&lt;p&gt;I wrote a Javascript file that used &lt;a href="https://www.npmjs.com/package/execa/v/0.6.0"&gt;&lt;code&gt;execa&lt;/code&gt;&lt;/a&gt; to handle child processes and &lt;a href="https://www.npmjs.com/package/wait-on"&gt;&lt;code&gt;wait-on&lt;/code&gt;&lt;/a&gt; to wait for resources on the &lt;code&gt;localhost&lt;/code&gt; to be available and then converted the page into a pdf. Killing the port was the last thing to do. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;My PR technically was working but I had to to spend quite a while fix  to meet the standard, and I made a bunch of small, syntactic errors. Some of which I didn't know but thanks to the experience, I think I will not make those mistakes again.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Basic Website</title>
      <author>Prakhar Doneria</author>
      <pubDate>Sat, 20 Nov 2021 05:20:07 +0000</pubDate>
      <link>https://dev.to/prakhardoneria/basic-website-54fj</link>
      <guid>https://dev.to/prakhardoneria/basic-website-54fj</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/PrakharDoneria/embed/BadrbyL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Un-official  Github Action for Deployment to Railway</title>
      <author>Bervianto Leo Pratama</author>
      <pubDate>Sat, 20 Nov 2021 05:10:10 +0000</pubDate>
      <link>https://dev.to/berviantoleo/un-official-github-action-for-deployment-to-railway-4g83</link>
      <guid>https://dev.to/berviantoleo/un-official-github-action-for-deployment-to-railway-4g83</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bervProject"&gt;
        bervProject
      &lt;/a&gt; / &lt;a href="https://github.com/bervProject/railway-deploy"&gt;
        railway-deploy
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Github Action to Deploy App to Railway using Railway CLI
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Railway Deploy Github Action&lt;/h1&gt;
&lt;p&gt;This action deploys your app to Railway using Railway CLI.&lt;/p&gt;
&lt;h2&gt;
Inputs&lt;/h2&gt;
&lt;h3&gt;
&lt;code&gt;railway_token&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; Railway Token to deploy the app.&lt;/p&gt;
&lt;h2&gt;
Outputs&lt;/h2&gt;
&lt;h3&gt;
&lt;code&gt;status&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Success/Failure result&lt;/p&gt;
&lt;h2&gt;
Example usage&lt;/h2&gt;
&lt;h3&gt;
Using with&lt;/h3&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;bervProject/railway-deploy@main&lt;/span&gt;
&lt;span class="pl-ent"&gt;with&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;railway_token&lt;/span&gt;: &lt;span class="pl-s"&gt;${ secret.RAILWAY_TOKEN }&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Using env&lt;/h3&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;bervProject/railway-deploy@main&lt;/span&gt;
&lt;span class="pl-ent"&gt;env&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;RAILWAY_TOKEN&lt;/span&gt;: &lt;span class="pl-s"&gt;${ secret.RAILWAY_TOKEN }&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bervProject/railway-deploy"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bervProject/railway-deploy/blob/main/action.yml"&gt;Yaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Example project that implement the &lt;strong&gt;bervproject/railway-deploy&lt;/strong&gt;:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bervProject"&gt;
        bervProject
      &lt;/a&gt; / &lt;a href="https://github.com/bervProject/MyPersonalWebAPI"&gt;
        MyPersonalWebAPI
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Personal Web API using FeathersJS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
MyPersonalWebAPI&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Web API for Bervianto's Web&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Build Status&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Codacy&lt;/th&gt;
&lt;th&gt;Travis&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://app.codacy.com/app/berviantoleo/MyPersonalWebAPI?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=bervProject/MyPersonalWebAPI&amp;amp;utm_campaign=Badge_Grade_Settings" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/978bcaf30389526c76fa6a3ace4a002a81bf7aee081f5f7190c2fb1b720bcfdb/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6135663230613763613338383430336639383463333237653338303832366532" alt="Codacy Badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/521594a5edc92a312ce12326784835c327ef9f4c0e992859def388ddcbe3f3f2/68747470733a2f2f7472617669732d63692e6f72672f6265727650726f6a6563742f4d79506572736f6e616c5765624150492e7376673f6272616e63683d6d6173746572"&gt;&lt;img src="https://camo.githubusercontent.com/521594a5edc92a312ce12326784835c327ef9f4c0e992859def388ddcbe3f3f2/68747470733a2f2f7472617669732d63692e6f72672f6265727650726f6a6563742f4d79506572736f6e616c5765624150492e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Notes (Requirement for Development or Production)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using Dockerfile or Docker Compose&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please rename &lt;code&gt;.env.example&lt;/code&gt; into &lt;code&gt;.env&lt;/code&gt; and update secret keys&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using Heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Update environment or config, using &lt;code&gt;secret&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; as keys and insert your value.&lt;/p&gt;
&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;This project uses &lt;a href="http://feathersjs.com" rel="nofollow"&gt;Feathers&lt;/a&gt;. An open source web framework for building modern real-time applications.&lt;/p&gt;
&lt;h2&gt;
Changelog&lt;/h2&gt;
&lt;p&gt;Changelog &lt;a href="https://github.com/bervProject/MyPersonalWebAPICHANGELOG.md"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;Copyright (c) 2018&lt;/p&gt;
&lt;p&gt;Licensed under the &lt;a href="https://github.com/bervProject/MyPersonalWebAPILICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bervProject/MyPersonalWebAPI"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bervProject/MyPersonalWebAPI/blob/master/.github/workflows/node%26docker.yml"&gt;Action Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>JavaScript Filter</title>
      <author>k.Jyothi Prakash Reddy</author>
      <pubDate>Sat, 20 Nov 2021 05:09:33 +0000</pubDate>
      <link>https://dev.to/jyothiprakashk/javascript-filter-4i9a</link>
      <guid>https://dev.to/jyothiprakashk/javascript-filter-4i9a</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#def"&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;Filter Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="def"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method returns new array with all the elements that pass the test implemented by provided function.&lt;/p&gt;

&lt;p&gt;&lt;a id="tips"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#filter-tips"&gt;
  &lt;/a&gt;
  Filter Tips
&lt;/h1&gt;

&lt;p&gt;Check below code for filter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prakash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bhanu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mohan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Then instead of writing code like this &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;select_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prakash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can simplify code as shown it below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;selected_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prakash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will return true,if the condition is satisfied otherwise it will return false&lt;/p&gt;

&lt;p&gt;We can simplify above code much more simple and understandable using &lt;code&gt;ES6&lt;/code&gt; syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;selected_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prakash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="conclusion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Filter method returns a new array consisting only those &lt;br&gt;
elements that satisfied the provided function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Filter method does not change original array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Filter method does not execute function for empty elements.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope You will learn something from this post.If there are more usecases, please mention in below comment section.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Audit and Fix a Markdown Page</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Sat, 20 Nov 2021 05:05:12 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/audit-and-fix-a-markdown-page-42l5</link>
      <guid>https://dev.to/okimotomizuho/audit-and-fix-a-markdown-page-42l5</guid>
      <description>&lt;p&gt;My recent contribution to an open source project is the improvement of the online course notes for the C language course (IPC144) in my college. The online note uses Docusaurus, and I had the opportunity to study Docusaurus a while back, so this contribution deepened my knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h3&gt;

&lt;p&gt;The issue I worked on was the Audit and Fix a Markdown Page. Each chapter of that online note consists of its own md file. My professor file an issue with a list of all of the md files and 19 tasks for improving each page. I selected the "output-functions" page in it, filed a new issue, and worked on the tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checking-display"&gt;
  &lt;/a&gt;
  Checking display
&lt;/h3&gt;

&lt;p&gt;I set everything up locally and checked for problems with the display. Such as: typo, markdown, the Light and Dark mode, and the desktop and mobile.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-tools-for-improving-the-quality-of-web-pages"&gt;
  &lt;/a&gt;
  Using tools for improving the quality of web pages
&lt;/h3&gt;

&lt;p&gt;As my professor mentioned, I tried running the page through Lighthouse and Web Hint.&lt;br&gt;
I had never used them, but it was easy to check with those tools.&lt;br&gt;
Lighthouse checked if the page is optimized for each item, and showed me there is no alt tag for images. After I added alt, performance, accessibility, best practices, SEO scores went up.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCRBQQz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhep3fujffzdjtucze6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCRBQQz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhep3fujffzdjtucze6m.png" alt="lighthouse" width="639" height="244"&gt;&lt;/a&gt;&lt;br&gt;
When I checked the page using Web Hint, I got 55 hints, but nothing about the page I was working on.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FSEDFfzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgtft6p0kwlmig1z9hwq.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSEDFfzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgtft6p0kwlmig1z9hwq.JPG" alt="Web Hint" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fixing-frontmatter-for-the-page"&gt;
  &lt;/a&gt;
  Fixing Frontmatter for the page
&lt;/h3&gt;

&lt;p&gt;Markdown documents can use the Markdown FrontMatter metadata fields, enclosed by a line --- on either side.(&lt;a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-docs#markdown-frontmatter"&gt;Docusaurus official page&lt;/a&gt;)&lt;br&gt;
I added the FrontMatter below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
sidebar_position: 5
title: Output Functions
id: output-functions
slug: modularity/output-functions
desctiption: This chapter on output functions is about invoking standard library procedures to stream data to users
---
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reviewed-from-other-students"&gt;
  &lt;/a&gt;
  Reviewed from other students
&lt;/h3&gt;

&lt;p&gt;I made a PR, other students reviewed it and gave me some requests.&lt;br&gt;
They were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Removing extra space I missed in the md file&lt;/li&gt;
&lt;li&gt;Adding a hyperlink to a related page&lt;/li&gt;
&lt;li&gt;Adding Description to the page(as a Frontmatter)&lt;/li&gt;
&lt;li&gt;Adding backticks to function names&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I thought there were a lot of tasks, but it wasn't too difficult. It was good to be able to contribute to the project that actually used Docusaurus and to experience the improvement of the page using Lighthouse and Web Hint. This time, my professor listed the tasks and provided them to us, which made the contribution easier, and I would like to use the task when working on external issues myself in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linklinks"&gt;
  &lt;/a&gt;
  ðŸ”—Links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneca-ICTOER/IPC144"&gt;IPC144 Project repo&lt;/a&gt; | &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/87"&gt;Issue&lt;/a&gt; | &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/100"&gt;Pull Request&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Photo by Glenn Carstens-Peters on Unsplash)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>c</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
