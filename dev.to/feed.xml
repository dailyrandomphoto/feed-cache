<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A beginner-friendly guide to get Tailwind CSS up and running in your first web development project</title>
      <author>Paridhi Agarwal</author>
      <pubDate>Tue, 09 Feb 2021 18:13:57 +0000</pubDate>
      <link>https://dev.to/paridhi/a-beginner-friendly-guide-to-get-tailwind-css-up-and-running-in-your-first-web-development-project-58l7</link>
      <guid>https://dev.to/paridhi/a-beginner-friendly-guide-to-get-tailwind-css-up-and-running-in-your-first-web-development-project-58l7</guid>
      <description>&lt;p&gt;I've been hearing about &lt;a href="https://twitter.com/dhh/status/1349722147845976065?s=20"&gt;how cool&lt;/a&gt; &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; is, for quite sometime now so I decided to use it in a project I wanted to work on. &lt;/p&gt;

&lt;p&gt;When I went to the &lt;a href="https://tailwindcss.com/docs/installation"&gt;installation&lt;/a&gt; page on the official Tailwind website, I realized that the guide could be a little overwhelming for people who are just starting out. With this guide, I aim to make the installation process a little simpler.&lt;/p&gt;

&lt;p&gt;Ways to get Tailwind CSS up and running in your project:&lt;/p&gt;

&lt;p&gt;1. &lt;a href="https://play.tailwindcss.com/"&gt;&lt;strong&gt;Tailwind Play&lt;/strong&gt;&lt;/a&gt; - If you want to dive straight into writing code without having to worry about integrating Tailwind on your machine, this is the best option for you. You can start tinkering with your code and see what it does simultaneously. Also, with this option you don't have to dread writing that first line of code(like I do), since it already has a sample code for you to play with.🙂&lt;/p&gt;

&lt;p&gt;2.  &lt;a href="https://tailwindcss.com/docs/installation#using-tailwind-via-cdn"&gt;&lt;strong&gt;Using Tailwind via CDN&lt;/strong&gt;&lt;/a&gt; -  This is a great option for setting up Tailwind locally in no time. You just have to write a single line of code under the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your &lt;em&gt;.html&lt;/em&gt; file and you can start working on your project straight away. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This does have a few &lt;a href="https://tailwindcss.com/docs/installation#using-tailwind-via-cdn"&gt;limitations&lt;/a&gt; to it though, and therefore the Tailwind website doesn't recommend using this method. However, this is a good option if you hate long installation processes that make you want to quit coding. &lt;/p&gt;

&lt;p&gt;3. &lt;a href="https://tailwindcss.com/docs/installation#installing-tailwind-css-as-a-post-css-plugin"&gt;&lt;strong&gt;Installing Tailwind CSS as a PostCSS plugin&lt;/strong&gt;&lt;/a&gt; - This is the method that you should go for if you want to work on a real-world project and hope to upload the code to your Github repo. Since in this method we install Tailwind CSS using npm, the first step would be to &lt;a href="https://nodejs.org/en/download/"&gt;install &lt;em&gt;Node.js&lt;/em&gt;&lt;/a&gt; on your machine. Next, you need to follow the steps over &lt;a href="https://tailwindcss.com/docs/installation#installing-tailwind-css-as-a-post-css-plugin"&gt;here&lt;/a&gt; to complete setting up Tailwind locally. Don't worry if you don't understand a lot of the terms used in the guide. Just follow the steps and you'll be good to go!&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Do let me know if this guide helped you or if you have some feedback.&lt;/p&gt;

&lt;p&gt;You can follow my journey on &lt;a href="https://twitter.com/__paridhi__"&gt;Twitter&lt;/a&gt; as I try to learn web development by building a project using Tailwind CSS.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>New Relic Hackathon Update: Doubling the Cash Prize!</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 09 Feb 2021 17:55:32 +0000</pubDate>
      <link>https://dev.to/devteam/new-relic-hackathon-update-doubling-the-cash-prize-26n5</link>
      <guid>https://dev.to/devteam/new-relic-hackathon-update-doubling-the-cash-prize-26n5</guid>
      <description>&lt;p&gt;Now this is an update you don’t want to miss 👀&lt;/p&gt;

&lt;p&gt;You might have noticed a few weeks back that an exciting new hackathon is currently underway in partnership with New Relic. If you’re interested in joining the fun, you’ll need to read the full announcement with instructions and guidelines &lt;a href="https://dev.to/devteam/announcing-the-new-relic-hack-the-planet-contest-on-dev-5d"&gt;here&lt;/a&gt;, but the TL;DR is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hack the Planet is your chance to build an app using New Relic’s free software observability tooling that’s focused around climate change and protecting the planet with data analysis and monitoring. You’ll submit your final project on New Relic’s new Forem-powered community called &lt;a href="https://therelicans.com"&gt;The Relicans&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Besides building fun software tools aimed at helping the planet, a major benefit to participating in Hack the Planet is the package of prizes, which include eco-friendly swag, DEV shop credits, and cash!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#today-were-excited-to-announce-that-our-friends-at-new-relic-have-doubled-the-cash-prizes-available-to-grand-prize-winners-and-runnersup-for-a-total-of-20000-were-now-awarding" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Today, we’re excited to announce that our friends at New Relic have &lt;em&gt;doubled&lt;/em&gt; the cash prizes available to Grand Prize winners and Runners-Up, for a total of $20,000! We’re now awarding:&lt;/strong&gt;

&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;del&gt;$2,500 USD&lt;/del&gt; &lt;strong&gt;$5,000 USD or equivalent to three Grand Prize Winners&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;del&gt;$250 USD&lt;/del&gt; &lt;strong&gt;$500 USD or equivalent to 10 Runners Up&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have until February 28th to submit your projects and be in the running to win a piece of this expanded cash prize pool. &lt;/p&gt;

&lt;p&gt;Read the rest of the hackathon details and guidelines in &lt;a href="https://dev.to/devteam/announcing-the-new-relic-hack-the-planet-contest-on-dev-5d"&gt;this post&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Happy coding and good luck! &lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#additional-rules" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Additional Rules&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;NO PURCHASE NECESSARY. Open only to ages 18+. Contest entry period ends March 8, 2021, 11:59 PM PST/ 8 AM UTC on March 9, 2021. Contest is void where prohibited or restricted by law or regulation. All entries must be new projects and created during the hackathon period. For Official Rules, see &lt;a href="https://dev.to/page/hack-the-planet-rules"&gt;Contest Announcement Page&lt;/a&gt; and &lt;a href="https://dev.to/page/official-hackathon-rules"&gt;General Contest Official Rules&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

</description>
      <category>hacktheplanet</category>
      <category>challenge</category>
      <category>meta</category>
      <category>newrelic</category>
    </item>
    <item>
      <title>The Promises guide I would have loved as a junior developper</title>
      <author>Chandelier Axel</author>
      <pubDate>Tue, 09 Feb 2021 17:29:37 +0000</pubDate>
      <link>https://dev.to/spartakyste/the-promises-guide-i-would-have-loved-as-a-junior-developper-3621</link>
      <guid>https://dev.to/spartakyste/the-promises-guide-i-would-have-loved-as-a-junior-developper-3621</guid>
      <description>&lt;p&gt;Do you remember stumbling on your first "Promise {pending}" ? Putting a .then just to see if it magically work ? This article is made for you, after our last article about &lt;a href="https://dev.to/spartakyste/the-npm-guide-i-would-have-loved-as-a-beginner-4i07"&gt;NPM&lt;/a&gt;, I'll take you with me in my process of re-learning the basics bricks of the JS ecosystem.&lt;/p&gt;

&lt;p&gt;The scope of this article is basically from understanding Promises, (how to write and recognize them), to an async/await dive. Fell free to skip to any parts with the table of contents below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer : We won't see the 'hidden' part of Promises. By hidden, I mean how the Javascript engine handle them inside the call stack.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#necessary-background-informations"&gt;Necessary background informations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-promises"&gt;So, what are Promises ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-we-need-them"&gt;Why do we need them ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#into-the-code"&gt;Let's dig into the code&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-use"&gt;How can I use them ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recognize-a-promise"&gt;How can I recognize a Promise I didn't write ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#additional-informations"&gt;Some additionnal informations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#async-await"&gt;Async / Await&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#necessary-background-informations" class="anchor"&gt;
  &lt;/a&gt;
  Necessary background informations
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;The MDN web documentation&lt;/a&gt; definition for promises is the following :&lt;br&gt;
&lt;strong&gt;A Promise is a proxy for a value not necessarily known when the promise is created.&lt;br&gt;
It allows you to associate handlers with an asynchronous action's eventual success value or failure reason&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If it's unclear to you as it is for me, stay with me, we'll clear everything up, I &lt;em&gt;promise&lt;/em&gt; 😉.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#so-what-are-promises-" class="anchor"&gt;
  &lt;/a&gt;
  So, what are Promises ?
&lt;/h3&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we let this bad joke behind, let's dive straigt into it.&lt;/p&gt;

&lt;p&gt;First, the basics. Javascript is a synchronous and mono-threaded language. It means that all your code will execute in the order it's write, and it only has one call stack. To keep it simple, we'll stand that JS is a language where eveything happen in order, without any external add-ons.&lt;/p&gt;

&lt;p&gt;Promises are a way to execute certain pieces of code &lt;em&gt;asynchronously&lt;/em&gt;, meaning they'll be executed behind the scenes, while the rest of the synchronous code is done.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-do-we-need-them-" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need them ?
&lt;/h3&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a real life exemple with two waiters. To keep it simple, our waiters are responsible from taking the orders, and delivering the dishes froms the kitchen to the clients.&lt;/p&gt;

&lt;p&gt;Our first waiter will be the synchronous one (like if Javascript promises never existed). He would take the order, give it to the kitchen, &lt;strong&gt;&lt;em&gt;wait&lt;/em&gt;&lt;/strong&gt; for the dishes to be ready, and finally serve them, and so on. Kinda awkward and inefficient.&lt;/p&gt;

&lt;p&gt;Our second waiter will handle things asynchronously. He'll take the orders from the clients and give it to the kitchen. By the time the dishes are ready, he will go &lt;strong&gt;&lt;em&gt;do something else&lt;/em&gt;&lt;/strong&gt; and come back later for the dishes whenever they are ready.&lt;/p&gt;

&lt;p&gt;This is exactly what's happening in JS. The kitchen will give a &lt;em&gt;promise&lt;/em&gt; to the waiter that the dishes will be ready &lt;strong&gt;sometime&lt;/strong&gt; in the future.&lt;/p&gt;

&lt;p&gt;If promises never existed, all our code that requires an external HTTP call will block the rest from executing until the call is over, just like our first waiter was stuck at the kitchen in between orders.&lt;/p&gt;

&lt;p&gt;Concretely, on a website, you couldn't see the text or the shape until everyting has been loaded, leading to enormous loading time, or weird-looking pages. And nowadays, nobody want to wait more than 2 or 3 seconds for a website to load, right ?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-dig-into-the-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's dig into the code
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-can-i-use-them-" class="anchor"&gt;
  &lt;/a&gt;
  How can I use them ?
&lt;/h3&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's write our first Promise. A very basic one would look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Your asynchronous code&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A promise always take a function with two arguments : &lt;strong&gt;resolve&lt;/strong&gt; and &lt;strong&gt;reject&lt;/strong&gt;. When the promise must return the result, we call resolve with the results. If something wrong happened, let's say we're missing some ingredients, the whole promise is compromised, we must cancel the order and get something different from the client, this is where we call reject.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Your promise can be stored in a variable, or returned within a function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preparingDishes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isIngredientMissing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dishes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// Everything that the client ordered, it would be filled up as soon as one is ready&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// But if an ingredient is missing, immedialty call back the waiter to inform the clients&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isIngredientMissing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;An ingredient is missing !&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We use setTimeout to mimic an HTTP call&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 10 seconds later, once the dishes are ready, send them to the waiter&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dishes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, what is the value of &lt;strong&gt;preparingDishes&lt;/strong&gt; ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preparingDishes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;---- What will appear in the console ?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you're already familiar with promises, you answered &lt;strong&gt;&lt;em&gt;"Promise {pending}"&lt;/em&gt;&lt;/strong&gt; and you're right.&lt;br&gt;
If you were expecting &lt;strong&gt;&lt;em&gt;[ ]&lt;/em&gt;&lt;/strong&gt; don't worry, we'll figure this out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preparingDishes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;---- Promise {pending}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Why ? If we keep with our waiter exemple, we say to the kitchen : &lt;strong&gt;Hey, I have a new order, prepare it&lt;/strong&gt;, and we didn't let the necessary preparation time, so the kitchen answer &lt;strong&gt;It's not ready ! We're still preparing it&lt;/strong&gt;. The promise is &lt;em&gt;pending&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How do we access the value then ?&lt;/p&gt;

&lt;p&gt;Do you remember the MDN definition ? &lt;strong&gt;It allows you to associate handlers&lt;/strong&gt;, the keywords here is handlers. Let's go back to our previous exemple, but let's get it to work for real this time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preparingDishes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// See the code above&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Now that our promise is created, let's trigger it, and then read the results&lt;/span&gt;
&lt;span class="nx"&gt;preparingDishes&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dishes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// dishes is a arbitrary name, usually it's called result&lt;/span&gt;

    &lt;span class="cm"&gt;/* Within this function, we can access the result of the promise. The parameter will be the value you gave to the resolve.
    You are guaranted that anything you put in here, will execute when the promise is fullfilled (succesfull) */&lt;/span&gt;
    &lt;span class="nx"&gt;callWaiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dishes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// In case an error happened, this handler will catch the return value inside your above reject or any error that could happen in your promise code&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;An ingredient is missing !&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sendWaiterBacktoClients&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This one will execute anything that you put inside, either the promise succeed or not&lt;/span&gt;

    &lt;span class="c1"&gt;// For example, wether the kitchen succeed preparing the dishes or not, they'll have to start the next one&lt;/span&gt;
    &lt;span class="nx"&gt;prepareNextDishes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you must have noticed by now, the &lt;em&gt;.then&lt;/em&gt;, &lt;em&gt;.catch&lt;/em&gt; and &lt;em&gt;.finally&lt;/em&gt; are the handlers MDN is talking about. Each will execute under different circumstances as stated above.&lt;br&gt;
Please take note that attaching all the handlers isn't mandatory, you could only attach a .then for exemple (but I wouldn't recommended it), or only a .then and a .catch, which is what you'll use most of the time.&lt;/p&gt;

&lt;p&gt;Nice ! Now that we write our first promise, and used it properly, let's go to the last part, where I personnaly struggled a lot with.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-can-i-recognize-a-promise-i-didnt-write-" class="anchor"&gt;
  &lt;/a&gt;
  How can I recognize a Promise I didn't write ?
&lt;/h3&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say you're onboarding on a new project, you must get used to the codebase, but you're not sure what is asynchronous or not. Or even better, you're trying to figure out how to use a thrid-party library without the documentation.&lt;/p&gt;

&lt;p&gt;You have 2 solutions to figure if a specific piece of code is a promise or not.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you're using VSC as your text editor, you can let your mouse over the piece of code you're interested in. In the pop-up that's appearing, you can analyse what is the value. If this is a promise, you will see it as :
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Don't let the 'any' keyword instill doubt, this is some fancy Typescript, and will be replace with any value the promise is returning.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a &lt;em&gt;.then&lt;/em&gt; is hanging around, the variable before it is 100% a promise (unless the code you're stepping in is already broke 😕).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#additional-informations" class="anchor"&gt;
  &lt;/a&gt;
  Additional informations
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we saw it, a promise is always followed by specific handlers. They are all &lt;strong&gt;meant&lt;/strong&gt; to be used with promises, using them with a string for example will lead to errors where JS will complain that &lt;em&gt;.then&lt;/em&gt; is not a function.&lt;/p&gt;

&lt;p&gt;Even if promises are very cool, nesting promises in promises can lead to what we call the &lt;strong&gt;callback hell&lt;/strong&gt;. Imagine that a specific piece of code result from a serie of promises, you'll have to wait the previous promises to be completed to access the value, and so on, leading to scary things like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gettingOrder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;giveOrderToKitchen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dishes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;serveClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dishes&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;startOver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I purposely omitted all the &lt;em&gt;.catch&lt;/em&gt; here, the readability already took a shoot. To solve this, we do have a powerful tool, &lt;strong&gt;async/await&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async-await" class="anchor"&gt;
  &lt;/a&gt;
  Async / Await
&lt;/h3&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, I would like to clarify something that took me a long time to understand, &lt;strong&gt;async/await is nothing more than syntactic sugar for promises&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's rewrite our first promise :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Your function must be async to use the await keyword&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;waiterJob&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dishes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;preparingDishes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle the error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, couple things changed here, we now have a function with the keyword &lt;em&gt;async&lt;/em&gt;, a &lt;em&gt;try/catch&lt;/em&gt; block, and the &lt;em&gt;await&lt;/em&gt; keyword. Even if we still don't get what happened here yet, we can already say that it's way cleaner.&lt;/p&gt;

&lt;p&gt;Here are the rules for using async/await :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The await keyword can &lt;strong&gt;only&lt;/strong&gt; be used within an async function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It &lt;strong&gt;replace&lt;/strong&gt; the .then, you &lt;strong&gt;must not&lt;/strong&gt; use it in conjuncution with .then/.catch. Exemple :
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// ☠️ Don't&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;preparingDishes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dishes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

  &lt;span class="c1"&gt;// Don't do this kind of no sense either, it would work, but it's way more readable as a full async/await&lt;/span&gt;
  &lt;span class="nx"&gt;preparingDishes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dishes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Making a function async will enforce it's return value to be a promise. In our exemple the waiterJob function is a promise that you'll have to await aswell when calling it.&lt;/li&gt;
&lt;li&gt;Using await is a bit more tricky than the .then. If you want, you could await in front of a string, JS won't complain unlike the .then. Be very careful of not using it everywhere.

&lt;ul&gt;
&lt;li&gt;Using await where you don't need to won't lead to bug in itself, but the async function around it can, because it can break you app if you don't handle it properly.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;To handle errors properly, you must wrap your promise call within a try/catch block. Our previous .catch will be handled here, and anything that break inside the try will be caught.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Hold on a second, you said that all async function must be awaited ? This is endless !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, not really. Most of the time in your real apps, you'll have a synchronous function upward which nobody depends on, like an initialization function.&lt;/p&gt;

&lt;p&gt;If you don't have any, you could write what we call &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;IIFE&lt;/a&gt;, it's basically a self-invoked function, allowing you to do this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// How can I achieve this ?&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prepareTable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prepareTable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;---- Error, it's not wrapped within an async function&lt;/span&gt;

&lt;span class="c1"&gt;// ----------------------------------------&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prepareTable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prepareTable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 👍&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is what would look like our last example refactored with async/await&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;waiterJob&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;gettingOrder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dishes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;giveOrderToKitchen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serveClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dishes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;startOver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle the error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We'll wrap up here, we saw everything that will help you start with promises. If you are a more experienced developper and you think something is missing, please feel free to add a comment for it.&lt;/p&gt;

&lt;p&gt;You can find the original article on the &lt;a href="https://othrys.dev/author/axel/"&gt;Othrys website&lt;/a&gt; and you can follow my &lt;a href="https://twitter.com/ChandelierAxel"&gt;Tweeter&lt;/a&gt; or tag me here to discuss about this article. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How do you think tech can better protect people from harassment? Answer for the chance to appear on the DevDiscuss podcast!</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 09 Feb 2021 17:28:16 +0000</pubDate>
      <link>https://dev.to/devteam/how-do-you-think-tech-can-better-protect-people-from-harassment-answer-for-the-chance-to-appear-on-the-devdiscuss-podcast-1e0k</link>
      <guid>https://dev.to/devteam/how-do-you-think-tech-can-better-protect-people-from-harassment-answer-for-the-chance-to-appear-on-the-devdiscuss-podcast-1e0k</guid>
      <description>&lt;p&gt;The &lt;a href="https://dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the actual &lt;em&gt;voices&lt;/em&gt; from our community!&lt;/p&gt;

&lt;p&gt;To enrich an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-think-tech-can-better-protect-people-from-harassment" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;“How do &lt;em&gt;you&lt;/em&gt; think tech can better protect people from harassment?”&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to appear on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Please send in your recordings by TOMORROW, Wednesday, February 10th at Midnight, ET (9 PM PT, 5 AM UTC)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Voice recordings will be given priority placement&lt;/strong&gt;&lt;/em&gt; 😉 &lt;/p&gt;




&lt;p&gt;Don't forget to check out the most recent season of DevDiscuss &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>React Hooks Cheatsheet: The 7 Hooks You Need To Know</title>
      <author>Reed Barger</author>
      <pubDate>Tue, 09 Feb 2021 16:35:34 +0000</pubDate>
      <link>https://dev.to/reedbarger/react-hooks-cheatsheet-the-7-hooks-you-need-to-know-42o7</link>
      <guid>https://dev.to/reedbarger/react-hooks-cheatsheet-the-7-hooks-you-need-to-know-42o7</guid>
      <description>&lt;p&gt;This new tutorial will show you everything you need to know about React Hooks from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I've put this cheatsheet together to help you become knowledgeable and effective with React Hooks as quickly as possible.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Plus, this tutorial is also an interactive video guide that will show you practical examples of how to use each hook in 30 seconds or less.&lt;/p&gt;

&lt;p&gt;Each example builds off of the previous one and it includes tons of patterns and best practices that will help you build apps with React Hooks for years to come.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-your-own-copy%E2%80%AC" class="anchor"&gt;
  &lt;/a&gt;
  Want Your Own Copy?‬
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/react-hooks-2021"&gt;Click here to download the cheatsheet in PDF format&lt;/a&gt;&lt;/strong&gt;(it takes 5 seconds).&lt;/p&gt;

&lt;p&gt;Here are 3 quick wins you get when you grab the downloadable version:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You'll get tons of copyable code snippets for easy reuse in your own projects.&lt;/li&gt;
&lt;li&gt;It is a great reference guide to strengthen your skills as a React developer and for job interviews.&lt;/li&gt;
&lt;li&gt;You can take, use, print, read, and re-read this guide literally anywhere that you like.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's a ton of great stuff to cover, so let's get started:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;useState Hook&lt;/li&gt;
&lt;li&gt;useEffect Hook&lt;/li&gt;
&lt;li&gt;useRef Hook&lt;/li&gt;
&lt;li&gt;useCallback Hook&lt;/li&gt;
&lt;li&gt;useMemo Hook&lt;/li&gt;
&lt;li&gt;useContext Hook&lt;/li&gt;
&lt;li&gt;useReducer Hook&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-usestate-hook" class="anchor"&gt;
  &lt;/a&gt;
  1. useState Hook
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#usestate-to-create-state-variables" class="anchor"&gt;
  &lt;/a&gt;
  useState to Create State Variables
&lt;/h3&gt;

&lt;p&gt;The useState hook allows us to create state variables in a React function component.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;State allows us to access and update certain values in our components over time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we create a state variable, we must provide it a default value (which can be any data type).&lt;/p&gt;

&lt;p&gt;We get that state variable as the first value in an array, which we can destructure and declare with &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6cGnG5Wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usestate-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6cGnG5Wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usestate-min.gif" alt="use state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-state-variables" class="anchor"&gt;
  &lt;/a&gt;
  Update State Variables
&lt;/h3&gt;

&lt;p&gt;useState also gives us a setter function to update the state after it is created.&lt;/p&gt;

&lt;p&gt;To update our state variable, we pass the setter function the new value we want our state to be.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you declare your setter function, in most cases you will prefix it with the word "set"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BVY6rA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-2-usestate-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BVY6rA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-2-usestate-min.gif" alt="use state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-be-used-once-or-many-times" class="anchor"&gt;
  &lt;/a&gt;
  Can Be Used Once Or Many Times
&lt;/h3&gt;

&lt;p&gt;useState can be used once or multiple times within a single component.&lt;/p&gt;

&lt;p&gt;Sometimes you will want to create multiple state variables and other times you may want to use a single variable with an object (see below).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyogLlzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-3-usestate-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyogLlzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-3-usestate-min.gif" alt="usestate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-state-based-on-previous-value" class="anchor"&gt;
  &lt;/a&gt;
  Update State based on Previous Value
&lt;/h3&gt;

&lt;p&gt;If the new state depends on the previous state, we can take the previous state variable and apply whatever changes we want to make.&lt;/p&gt;

&lt;p&gt;For example, as in the example below, add 1 to the current &lt;code&gt;years&lt;/code&gt; value to increment it.&lt;/p&gt;

&lt;p&gt;To guarantee the update is done reliably, we can use a function within the setter function that gives us the correct previous state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0QOqhvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-4-usestate-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0QOqhvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-4-usestate-min.gif" alt="usestate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manage-state-with-an-object" class="anchor"&gt;
  &lt;/a&gt;
  Manage State with an Object
&lt;/h3&gt;

&lt;p&gt;You can use an object with useState, which allows you to manage individual values as key-value pairs.&lt;/p&gt;

&lt;p&gt;As the example below shows, when you are updating state with an object, you need to spread in the previous state. &lt;/p&gt;

&lt;p&gt;Why? Because any properties other than the one you are updating will not be included in the new state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T0Id7D2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-5-usestate-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0Id7D2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-5-usestate-min.gif" alt="usestate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-useeffect-hook" class="anchor"&gt;
  &lt;/a&gt;
  2. useEffect Hook
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#useeffect-to-perform-side-effects" class="anchor"&gt;
  &lt;/a&gt;
  useEffect to Perform Side Effects
&lt;/h3&gt;

&lt;p&gt;useEffect lets us perform side effects in function components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Side effects are when we need to reach into the outside world. Such as fetching data from an API or working with the DOM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Side effects are actions that can change our component state in an unpredictable fashion (that have cause 'side effects').&lt;/p&gt;

&lt;p&gt;useEffect accepts a callback function (called the 'effect' function), which will by default run every time the component re-renders.&lt;/p&gt;

&lt;p&gt;In the example below, we are interacting with the DOM to change style properties of the document body:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GH37OWs7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-useeffect-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GH37OWs7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-useeffect-min.gif" alt="use effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-again-when-a-value-changes" class="anchor"&gt;
  &lt;/a&gt;
  Run Again when a Value Changes
&lt;/h3&gt;

&lt;p&gt;useEffect lets us conditionally perform effects with the dependencies array.&lt;/p&gt;

&lt;p&gt;The dependencies array is the second argument passed to useEffect. &lt;/p&gt;

&lt;p&gt;If any one of the values in the array changes, the effect function runs again.&lt;/p&gt;

&lt;p&gt;If no values are included in the dependencies array, useEffect will only run on component mount and unmount.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BX4Pxpzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-2-useeffect-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BX4Pxpzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-2-useeffect-min.gif" alt="use effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsubscribe-by-returning-a-function" class="anchor"&gt;
  &lt;/a&gt;
  Unsubscribe by Returning a Function
&lt;/h3&gt;

&lt;p&gt;useEffect lets us unsubscribe from listeners that we might have created by returning a function at the end.&lt;/p&gt;

&lt;p&gt;We want to unsubscribe from certain events, such as an event listener, because when the component unmounts (i.e. the user goes to a different page), React may attempt to update state that no longer exists, causing an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--napULF_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-3-useeffect-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--napULF_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-3-useeffect-min.gif" alt="use effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-data-from-an-api" class="anchor"&gt;
  &lt;/a&gt;
  Fetch Data from an API
&lt;/h3&gt;

&lt;p&gt;useEffect is the hook to use when you want to make an HTTP request (namely, a GET request when the component mounts)&lt;/p&gt;

&lt;p&gt;Note that handling promises with the more concise &lt;code&gt;async/await&lt;/code&gt; syntax requires creating a separate function.&lt;/p&gt;

&lt;p&gt;This is because the effect callback function cannot be async. &lt;/p&gt;

&lt;p&gt;In the example below, we resolve our promise (returned from &lt;code&gt;fetch&lt;/code&gt;) with a series of &lt;code&gt;.then()&lt;/code&gt; callbacks to get our data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--artnXxuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-4-useeffect-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--artnXxuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-4-useeffect-min.gif" alt="use effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-useref-hook" class="anchor"&gt;
  &lt;/a&gt;
  3. useRef Hook
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#useref-to-reference-react-elements" class="anchor"&gt;
  &lt;/a&gt;
  useRef to Reference React Elements
&lt;/h3&gt;

&lt;p&gt;Refs are a special attribute that are available on all React components. They allow us to create a reference to a given element / component when the component mounts.&lt;/p&gt;

&lt;p&gt;useRef allows us to easily use React refs. They are helpful (as in the example below) when we want to directly interact with an element, such as to clear its value or focus it, as with an input.&lt;/p&gt;

&lt;p&gt;We call useRef (at the top of a component) and attach the returned value to the element's ref attribute to refer to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qnFCvpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-useref-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qnFCvpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-useref-min.gif" alt="use ref"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-usecallback-hook" class="anchor"&gt;
  &lt;/a&gt;
  4. useCallback Hook
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#usecallback-prevents-callbacks-from-being-recreated" class="anchor"&gt;
  &lt;/a&gt;
  useCallback Prevents Callbacks from Being Recreated
&lt;/h3&gt;

&lt;p&gt;useCallback is a hook that is used for improving our component performance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Callback functions are the name of functions that are "called back" within a parent component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most common usage is to have a parent component with a state variable, but you want to update that state from a child component. &lt;/p&gt;

&lt;p&gt;What do you do? You pass down a callback function to the child from the parent. That allows us to update state in the parent component.&lt;/p&gt;

&lt;p&gt;useCallback memoizes our callback functions, so they not recreated on every re-render. Using useCallback correctly can improve the performance of our app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QakNgMQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usecallback-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QakNgMQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usecallback-min.gif" alt="use callback"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-usememo-hook" class="anchor"&gt;
  &lt;/a&gt;
  5. useMemo Hook
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#usememo-can-improve-expensive-operations" class="anchor"&gt;
  &lt;/a&gt;
  useMemo Can Improve Expensive Operations
&lt;/h3&gt;

&lt;p&gt;useMemo is very similar to useCallback and is for improving performance, but instead of being for callbacks, it is for storing the results of expensive operations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;useMemo allows us to memoize, or remember the result of expensive operations when they have already been made for certain inputs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Memoization means that if a calculation has been done before with a given input, there's no need to do it again, because we already have the stored result of that operation.&lt;/p&gt;

&lt;p&gt;useMemo returns a value from the computation, which is then stored in a variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYBe71nA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usememo-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYBe71nA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usememo-min.gif" alt="use memo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-usecontext-hook" class="anchor"&gt;
  &lt;/a&gt;
  6. useContext Hook
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#usecontext-helps-us-avoid-prop-drilling" class="anchor"&gt;
  &lt;/a&gt;
  useContext Helps Us Avoid Prop Drilling
&lt;/h3&gt;

&lt;p&gt;In React, we want to avoid the following problem of creating multiple props to pass data down two or more levels from a parent component.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In some cases, it is fine to pass props through multiple components, but it is redundant to pass props through components which do not need it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Context is helpful for passing props down multiple levels of child components from a parent component and sharing state across our app component tree.&lt;/p&gt;

&lt;p&gt;The useContext hook removes the unusual-looking render props pattern that was required in consuming React Context before. &lt;/p&gt;

&lt;p&gt;Instead, useContext gives us a simple function to access the data we provided on the &lt;code&gt;value&lt;/code&gt; prop of the Context Provider in any child component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xcdG56MS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usecontext-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcdG56MS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usecontext-min.gif" alt="use context"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-usereducer-hook" class="anchor"&gt;
  &lt;/a&gt;
  7. useReducer Hook
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#usereducer-is-another-powerful-state-management-tool" class="anchor"&gt;
  &lt;/a&gt;
  useReducer is (Another) Powerful State Management Tool
&lt;/h3&gt;

&lt;p&gt;useReducer is a hook for state management, much like useState and relies upon a kind of function called a reducer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reducers are simple, predictable (pure) functions that take a previous state object and an action object and return a new state object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;useReducer can be used in many of the same ways that useState can, but is more helpful for managing state across multiple components that may involve different operations or "actions".&lt;/p&gt;

&lt;p&gt;You will need to reach for useReducer less than useState around your app, but it is very helpful as powerful means of managing state in smaller applications, rather than having to reach for a third-party state management library like Redux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZcBIpCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usereducer-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZcBIpCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/02/clip-1-usereducer-min.gif" alt="use reducer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-keep-this-guide-for-future-reference" class="anchor"&gt;
  &lt;/a&gt;
  Want to keep this guide for future reference?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/react-hooks-2021"&gt;Download a complete PDF version of this cheatsheet here.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>7 Places to Host Your Jamstack Site</title>
      <author>Jeremy Morgan</author>
      <pubDate>Tue, 09 Feb 2021 16:33:34 +0000</pubDate>
      <link>https://dev.to/pluralsight/7-places-to-host-your-jamstack-site-39hc</link>
      <guid>https://dev.to/pluralsight/7-places-to-host-your-jamstack-site-39hc</guid>
      <description>&lt;p&gt;The Jamstack architecture is rapidly gaining popularity with web developers everywhere. Jam stands for “JavaScript, APIs and Markup.” Jamstack sites are static sites built with HTML, JavaScript and CSS; they’re text files, so they can be served up fast without requiring the overhead of traditional compiled or interpreted architectures.&lt;/p&gt;

&lt;p&gt;Tim Berners-Lee created the first static website in 1991—in fact, it was the first website ever built. In the decades after, developers moved to using interpreted and compiled code for websites and applications, requiring complicated configuration and additional overhead.&lt;/p&gt;

&lt;p&gt;Web developers aren’t returning to static sites because of shortcomings or problems with compiled or interpreted code; that’s how APIs and other Web Services are built. However, now we use HTML and JavaScript as a client to communicate with these systems. This allows us to decouple our web applications from APIs, and take advantage of blistering fast static hosting and CDNs for the front end of the web application.&lt;/p&gt;

&lt;p&gt;With that in mind, let’s look at some options for deploying our Jamstack websites.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9VM-_Ds3G74"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-github" class="anchor"&gt;
  &lt;/a&gt;
  1. GitHub
&lt;/h3&gt;

&lt;p&gt;One of the easiest ways to publish a static site is by using &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;. You can build your static site on your local machine, generate it, then commit the artifacts. It will be published at yourusername.github.io.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost (free)&lt;/li&gt;
&lt;li&gt;Git integration&lt;/li&gt;
&lt;li&gt;Great performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method is perfect for trying out different static site generators or experimenting with a project. You can &lt;a href="https://www.github.org/"&gt;signup at GitHub&lt;/a&gt; for free. Pluralsight also has a guide where you can learn &lt;a href="https://bit.ly/GitHubStaticPages"&gt;How to Host Your Static Webpages on GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-netlify" class="anchor"&gt;
  &lt;/a&gt;
  2. Netlify
&lt;/h3&gt;

&lt;p&gt;Netlify is a platform-as-a-service (PaaS) for building static websites. They provide static site hosting with content delivery networks (CDNs), which makes your site fast now matter where you are. Like GitHub Pages, you can build a static site from a repository. However, Netlify includes build services that run the build and deploy for you. So you can host your source in a repo like GitHub or Bitbucket, and Netlify will build your Gatsby, Jekyll or Hugo site for you as a part of the automated process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous integration&lt;/li&gt;
&lt;li&gt;Support for teams&lt;/li&gt;
&lt;li&gt;Fast edge servers&lt;/li&gt;
&lt;li&gt;Build servers for popular static site generators&lt;/li&gt;
&lt;li&gt;Branch deployments&lt;/li&gt;
&lt;li&gt;Split testing&lt;/li&gt;
&lt;li&gt;Lambda functions support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can sign up for Netlify and &lt;a href="https://www.netlify.com"&gt;try it out here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-vercel" class="anchor"&gt;
  &lt;/a&gt;
  3. Vercel
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt; is another PaaS solution that provides fast static site hosting for your Jamstack solutions. Like Netlify, it contains a “turnkey” solution from a repository to a fully functioning website. It includes build services for Next.js, Gatsby, Vue and other major static site frameworks. Vercel also has templates for common static site generators (31 at the time of this writing) that can help build your project the way you’d like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous integration&lt;/li&gt;
&lt;li&gt;Support for teams&lt;/li&gt;
&lt;li&gt;Fast edge servers&lt;/li&gt;
&lt;li&gt;Build servers and templates for popular static site generators&lt;/li&gt;
&lt;li&gt;Lambda functions support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-amazon-web-services" class="anchor"&gt;
  &lt;/a&gt;
  4. Amazon Web Services
&lt;/h3&gt;

&lt;p&gt;There are multiple ways you can host a Jamstack site on AWS, depending on your needs. They provide services to support everyone from the casual hobby blogger to a full enterprise. AWS Amplify combines these services into an easy-to-use interface for deploying Jamstack sites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small websites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/amplify/hosting/"&gt;AWS Amplify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Large websites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html"&gt;S3 hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/lightsail/"&gt;AWS Lightsail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ec2/"&gt;AWS EC2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous integration&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Integration with other AWS services&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-microsoft-azure" class="anchor"&gt;
  &lt;/a&gt;
  5. Microsoft Azure
&lt;/h3&gt;

&lt;p&gt;There are several ways to host Jamstack sites on Azure. This can be especially helpful if you have other applications living in the Azure ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small websites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-us/services/app-service/static/"&gt;Azure Static Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Large websites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website"&gt;Azure Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-us/blog/hosting-services-with-was-and-iis-on-windows-azure/"&gt;Azure IIS Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-us/services/app-service/"&gt;Azure App Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-us/services/virtual-machines/"&gt;Azure Virtual Machines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous integration&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Integration with other AWS services&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-google-cloud-platform" class="anchor"&gt;
  &lt;/a&gt;
  6. Google Cloud Platform
&lt;/h3&gt;

&lt;p&gt;GCP has some excellent services for tackling static site hosting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small websites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/storage/docs/hosting-static-website"&gt;Cloud Storage Bucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Large websites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/"&gt;App Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute"&gt;Compute Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/kubernetes-engine/"&gt;Container on GKE (Google Kubernetes Engine)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Compute Engines, Virtual Machines and Containers all require additional configuration.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous integration&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Integration with other GCP services&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-firebase-hosting" class="anchor"&gt;
  &lt;/a&gt;
  7. Firebase Hosting
&lt;/h3&gt;

&lt;p&gt;Though &lt;a href="https://firebase.google.com/docs/hosting"&gt;Firebase&lt;/a&gt; is a part of Google and ties into the GCP platform, it deserves specific mention because of its speed and simplicity. It provides a fast hosting service that’s easy to scale and ties in with GCP functions if you need it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous integration&lt;/li&gt;
&lt;li&gt;Mixed mode (static/dynamic) with GCP&lt;/li&gt;
&lt;li&gt;Powerful CLI&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-future-is-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  The Future is Jamstack
&lt;/h3&gt;

&lt;p&gt;The Jamstack architecture enables you to build lightning fast interfaces and host them anywhere. The services above specialize in hosting Jamstack sites, so you get features beyond simple HTML hosting.&lt;/p&gt;

&lt;p&gt;If you’re interested in learning more about building Jamstack sites, check out these Pluralsight courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pluralsight.com/courses/gatsbyjs-big-picture"&gt;GatsbyJS: The Big Picture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pluralsight.com/courses/static-websites-with-jekyll"&gt;Static Websites with Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/projects/deploying-static-site-on-aws"&gt;Project: Deploying a Static Site on AWS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>One second to read GitHub code with VS Code</title>
      <author>Camilo Martinez</author>
      <pubDate>Tue, 09 Feb 2021 16:24:16 +0000</pubDate>
      <link>https://dev.to/equiman/one-second-to-read-github-code-with-vs-code-5g6p</link>
      <guid>https://dev.to/equiman/one-second-to-read-github-code-with-vs-code-5g6p</guid>
      <description>&lt;p&gt;Exists a cool trick to visualize a repository code directly on VSCode and literally, you will only need &lt;strong&gt;one second&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Just add &lt;code&gt;1s&lt;/code&gt; between &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;.com&lt;/code&gt; and press &lt;code&gt;Enter&lt;/code&gt; in the browser address bar for any repository you want to read.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2DOAXDpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fvrls0pwlgy2uvgqf1bi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DOAXDpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fvrls0pwlgy2uvgqf1bi.gif" alt="GitHub1s"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be kind and don't forget to click ⭐ on &lt;a href="https://github.com/conwnet/github1s"&gt;GitHub1s&lt;/a&gt; repository.&lt;/p&gt;




&lt;p&gt;If one second it's too much for you, I have another cool trick up my sleeve.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A bookmarklet is a bookmark stored in a web browser that contains JavaScript commands that add new features to the browser.   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Drag and drop the &lt;a href="https://github.com/conwnet/github1s"&gt;GitHub1s&lt;/a&gt; to your bookmarks bar and edit his properties using these values:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name:&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GitHub1s&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URL:&lt;/td&gt;
&lt;td&gt;&lt;code&gt;javascript: window.open(location.href.replace('github.com', 'github1s.com'), '_self')&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To use it, just click the bookmarklet when visiting a GitHub repository and it will automatically add the mission &lt;code&gt;1s&lt;/code&gt; to the URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1lyJQJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ewvkz75xx0zypn69lgen.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1lyJQJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ewvkz75xx0zypn69lgen.gif" alt="Bookmarklet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, the keyboard shortcut to show or hide the bookmarks bar is &lt;code&gt;ctrl+shift+B&lt;/code&gt; (Windows/Linux) or &lt;code&gt;⌘+⇧+B&lt;/code&gt; (macOS).&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;That’s All Folks!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Happy Coding&lt;/strong&gt; 🖖&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/equiman"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbQqp7D6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/im18z7jhm102axyxiapk.png" alt="Buy me a cofee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>vscode</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to make a website like CodePen</title>
      <author>Stackfindover</author>
      <pubDate>Tue, 09 Feb 2021 16:04:52 +0000</pubDate>
      <link>https://dev.to/stackfindover/how-to-make-a-website-like-codepen-49oi</link>
      <guid>https://dev.to/stackfindover/how-to-make-a-website-like-codepen-49oi</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello, guys in this tutorial we will learn how to make a website like CodePen, How to create a live coding playground&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today we will try to solve the below-mentioned query.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to make a website like CodePen&lt;/li&gt;
&lt;li&gt;How to create Live Coding Playground&lt;/li&gt;
&lt;li&gt;How to create a live code editor for a website&lt;/li&gt;
&lt;li&gt;How to make a web-based compiler like code pen&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-a-website-like-codepen" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://blogs.stackfindover.com/how-to-make-a-website-like-codepen/" rel="dofollow"&gt;How to make a website like CodePen&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Click on the above link to want to learn more&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Rsbp-ZGKsn0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codepen</category>
    </item>
    <item>
      <title>A Hands-on Introduction to Fine-Grained Reactivity</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 09 Feb 2021 15:36:56 +0000</pubDate>
      <link>https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf</link>
      <guid>https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf</guid>
      <description>&lt;p&gt;Reactive Programming has existed for decades but it seems to come in and out of fashion. In JavaScript frontends, it has been on the upswing again for the last couple of years. It transcends frameworks and is a useful subject for any developer to be familiar with.&lt;/p&gt;

&lt;p&gt;However, it isn't always that easy. For starters, there are different types of reactivity. The terms and naming are often overloaded with the same word meaning different things to different people.&lt;/p&gt;

&lt;p&gt;Secondly, it sometimes looks like magic. It isn't, but it's harder not to get distracted by the "how" before understanding the "what". This makes it a challenge to teach by practical example and becomes a careful balance to prevent going too theoretical.&lt;/p&gt;

&lt;p&gt;This article is not going to focus on the "how". I will attempt to provide the most gentle introduction into the Fine-grained reactivity the approach used by libraries like &lt;a href="https://mobx.js.org/README.html"&gt;MobX&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;, &lt;a href="https://knockoutjs.com/"&gt;Knockout&lt;/a&gt;, and &lt;a href="https://github.com/ryansolid/solid"&gt;Solid&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This may be different than the reactivity you might be familiar with streams like RxJS. They are related and there are similarities but they are not quite the same thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While this an article aimed at people brand new to fine-grained reactivity or reactivity in general, it is still an intermediate level topic that assumes knowledge of JavaScript and familiarity with some introductory Computer Science topics. I will try my best to explain things in detail but feel free to leave questions in the comments.&lt;/p&gt;

&lt;p&gt;I will be posting code snippets and examples in Codesandbox. I will be using my library Solid to power these examples and syntax in this article will use its syntax. But it is more or less the same in all libraries. Follow the links to play with these examples in a fully interactive environment.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-players" class="anchor"&gt;
  &lt;/a&gt;
  The Players
&lt;/h1&gt;

&lt;p&gt;Fine-grained reactivity is built from a network of primitives. By primitives, I am referring to simple constructs like &lt;code&gt;Promises&lt;/code&gt; rather than JavaScript's primitive values like strings or numbers.&lt;/p&gt;

&lt;p&gt;Each act as nodes in a graph. You can think of it as an idealized electric circuit. Any change applies to all nodes at the same time. The problem being solved is synchronization at a single point in time. This is a problem space we often work in when building user interfaces.&lt;/p&gt;

&lt;p&gt;Let's get started by learning about the different types of primitives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signals" class="anchor"&gt;
  &lt;/a&gt;
  Signals
&lt;/h2&gt;

&lt;p&gt;Signals are the most primary part of a reactive system. They consist of a getter, setter, and a value. Although often referred to as Signals in academic papers, they also have been called Observables, Atoms, Subjects, or Refs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// read a value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="c1"&gt;// set a value&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Of course, that alone isn't very interesting. These are more or less just values that can store anything. The important detail is that both the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; can run arbitrary code. This will be important to propagate updates.&lt;/p&gt;

&lt;p&gt;Functions are the primary way to do this but you may have seen it done via object getters or proxies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Vue&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// read a value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="c1"&gt;// set a value&lt;/span&gt;
&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or hidden behind a compiler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Svelte&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// read a value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="c1"&gt;// set a value&lt;/span&gt;
&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At their heart Signals are event emitters. But the key difference is the way subscriptions are managed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactions" class="anchor"&gt;
  &lt;/a&gt;
  Reactions
&lt;/h2&gt;

&lt;p&gt;Signals alone are not very interesting without their partner in crime, Reactions. Reactions, also called Effects, Autoruns, Watches, or Computeds, observe our Signals and re-run them every time their value updates.&lt;/p&gt;

&lt;p&gt;These are wrapped function expressions that run initially, and whenever our signals update.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. Create Signal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. Create Reaction&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The count is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. Set count to 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4. Set count to 10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/reaction-5wyzu"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This looks a bit like magic at first, but it is the reason for our Signals to need getters. Whenever the signal is executed the wrapping function detects it and automatically subscribes to it. I will explain more about this behavior as we continue.&lt;/p&gt;

&lt;p&gt;The important thing is these Signals can carry any sort of data and the reactions can do anything with it. In the CodeSandbox examples I created a custom log function to append DOM elements to the page. We can coordinate any update with these.&lt;/p&gt;

&lt;p&gt;Secondly, the updates happen synchronously. Before we can log the next instruction the Reaction has already run.&lt;/p&gt;

&lt;p&gt;And that's it. We have all the pieces we need for fine-grained reactivity. The Signal and the Reaction. The observed and the observer. In fact, you create most behavior with just these two. However, there is one other core primitive we need to talk about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#derivations" class="anchor"&gt;
  &lt;/a&gt;
  Derivations
&lt;/h2&gt;

&lt;p&gt;More often than not we need to represent our data in different ways and use the same Signals in multiple Reactions. We can write this in our Reactions, or even extract a helper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. Create Signals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Creating/Updating fullName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. Create Reactions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your name is not&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. Set new firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jacob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/no-derivation-qq54h"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In this example &lt;code&gt;fullName&lt;/code&gt; is a function. This is because in order for the Signals to be read underneath the Effect we need to defer executing it until the Effect is running. If it were simply a value there would be no opportunity to track or for the Effect to re-run.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But sometimes the computational cost of our derived value is expensive and we don't want to redo the work. For that reason, we have a 3rd basic primitive that acts similar to function memoization to store intermediate computations as their own signal. These are known as Derivations but are also called Memos, Computeds, Pure Computeds.&lt;/p&gt;

&lt;p&gt;Compare what happens when we make &lt;code&gt;fullName&lt;/code&gt; a Derivation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. Create Signals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. Create Derivation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Creating/Updating fullName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. Create Reactions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your name is not&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4. Set new firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jacob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/derivation-j0nzm"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This time &lt;code&gt;fullName&lt;/code&gt; calculates its value immediately on creation and then does not re-run its expression when read by the Reactions. When we update its source Signal it does re-run again, but only once as that change propagates to the Reactions.&lt;/p&gt;

&lt;p&gt;While calculating a full name is hardly an expensive computation we can see how Derivations can save us work by caching the value in an independently executed expression, that is trackable itself.&lt;/p&gt;

&lt;p&gt;More so, as they are derived they are guaranteed to be in sync. At any point, we can determine their dependencies and evaluate whether they could be stale. Using Reactions to write to other Signals might seem equivalent but cannot bring that guarantee. Those Reactions are not an explicit dependency of the Signal (as Signals have no dependencies). We will look more at the concept of dependencies in the next section.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some libraries lazy evaluate Derivations as they only need to be calculated upon read and it allows for aggressive disposal of Derivations that are not currently being read. There are tradeoffs between these approaches that go beyond the scope of this article.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#reactive-lifecycle" class="anchor"&gt;
  &lt;/a&gt;
  Reactive Lifecycle
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1gcCr-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0xyevvaovzfpswhqsacc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1gcCr-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0xyevvaovzfpswhqsacc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fine-Grained reactivity maintains the connections between many reactive nodes. At any given change parts of the graph re-evaluate and can create and remove connections.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Precompiled libraries like Svelte or Marko don't use the same runtime tracking technique and instead statically analyze dependencies. In so they have less control over when reactive expressions re-run so they may over-execute but there is less overhead for management of subscriptions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider when a condition changes what data you use to derive a value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. Create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showFullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;showFullName&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. Set showFullName: false &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. Change lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Legend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4. Set showFullName: true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/conditional-dependency-hbjg6"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The thing to notice is that when we change the &lt;code&gt;lastName&lt;/code&gt; in step 3, we do not get a new log. This is because every time we re-rerun a reactive expression we rebuild its dependencies. Simply, at the time we change the &lt;code&gt;lastName&lt;/code&gt; no one is listening to it.&lt;/p&gt;

&lt;p&gt;The value does change, as we observe when we set &lt;code&gt;showFullName&lt;/code&gt; back to true. However, nothing is notified. This is a safe interaction since in order for &lt;code&gt;lastName&lt;/code&gt; to become tracked again &lt;code&gt;showFullName&lt;/code&gt; must change and that is tracked.&lt;/p&gt;

&lt;p&gt;Dependencies are the signals that a reactive expression reads to generate its value. In turn, these signals hold the subscription of many reactive expressions. When they update they notify their subscribers who depend on them.&lt;/p&gt;

&lt;p&gt;We construct these subscriptions/dependencies on each execution. And release them each time a reactive expression is  re-run or when they are finally released. You can see that timing using an &lt;code&gt;onCleanup&lt;/code&gt; helper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. Create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showFullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;### executing displayName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;onCleanup&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;### releasing displayName dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;showFullName&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. Set showFullName: false &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. Change lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Legend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4. Set showFullName: true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/conditional-dependency-cleanup-dr3re"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#synchronous-execution" class="anchor"&gt;
  &lt;/a&gt;
  Synchronous Execution
&lt;/h1&gt;

&lt;p&gt;Fine-grained reactive systems execute their changes synchronously and immediately. They aim to be &lt;em&gt;glitch-free&lt;/em&gt; in that it is never possible to observe an inconsistent state. This leads to predictability since in any given change code only runs once.&lt;/p&gt;

&lt;p&gt;Inconsistent state can lead to unintended behavior when we can't trust what we observe to make decisions and perform operations. &lt;/p&gt;

&lt;p&gt;The easiest way to demonstrate how this works is to apply 2 changes simultaneously that feed into a Derivation that runs a Reaction. We will use a &lt;code&gt;batch&lt;/code&gt; helper to demonstrate. &lt;code&gt;batch&lt;/code&gt; wraps the update in a transaction that only applies changes when it finishes executing the expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. Create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setB&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;### read c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;### run reaction&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The sum is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. Apply changes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/glitch-free-1e6dc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this example, the code runs top-down through creation like you'd expect. However, the batched update reverses the run/read logs.&lt;/p&gt;

&lt;p&gt;When we update the value even though A and B are applied at the same time, we need to start somewhere so we run A's dependencies first. So the effect runs first, but detecting that C is stale we immediately run it on read and everything executes once and evaluates correctly.&lt;/p&gt;

&lt;p&gt;Sure you can probably think of an approach to solve this static case in order, but remember dependencies can change on any run. Fined-grained reactive libraries use a hybrid push/pull approach to maintain consistency. They are not purely "push" like events/streams, nor purely "pull" like generators.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This article covered a lot. We introduced the core primitives and touched on the defining characteristics of fine-grained reactivity, including dependency resolution and synchronous execution.&lt;/p&gt;

&lt;p&gt;If the topics don't seem completely clear yet, that's ok. Review the article and try messing with the examples. These were meant to demonstrate the ideas in the most minimal way. But this is really most of it. With a little practice, you too will be able to see how to model data in a granular way.&lt;/p&gt;




&lt;p&gt;Further Reading:&lt;br&gt;
&lt;a href="https://hackernoon.com/the-fundamental-principles-behind-mobx-7a725f71f3e8"&gt;The fundamental principles behind MobX&lt;/a&gt;&lt;br&gt;
&lt;a href="https://indepth.dev/posts/1289/solidjs-reactivity-to-rendering"&gt;SolidJS: Reactivity to Rendering&lt;/a&gt;                                                                                                         &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>reactivity</category>
    </item>
    <item>
      <title>Generate Accessible UI Colors with a11y-color-tokens</title>
      <author>Stephanie Eckles</author>
      <pubDate>Tue, 09 Feb 2021 13:52:31 +0000</pubDate>
      <link>https://dev.to/5t3ph/generate-accessible-ui-colors-with-a11y-color-tokens-28m1</link>
      <guid>https://dev.to/5t3ph/generate-accessible-ui-colors-with-a11y-color-tokens-28m1</guid>
      <description>&lt;p&gt;I'm pleased to share with you the release of the &lt;a href="https://www.npmjs.com/package/a11y-color-tokens"&gt;a11y-color-tokens&lt;/a&gt; package:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Generate accessible complementary text or UI colors as Sass variables and/or CSS custom properties from your base color tokens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-do-i-need-this" class="anchor"&gt;
  &lt;/a&gt;
  Why do I need this?
&lt;/h2&gt;

&lt;p&gt;While many tools are available to &lt;em&gt;check&lt;/em&gt; contrast, efficiently picking an accessible palette can be time-consuming and frustrating. As someone with way too many side projects, I'll say that color contrast is always something that slows down my workflow. In fact, I built this precisely to speed up my own process!&lt;/p&gt;

&lt;p&gt;Additionally, everyone benefits from documentation about color token contrast to ensure tokens are &lt;em&gt;used&lt;/em&gt; accessibly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a11y-color-tokens&lt;/code&gt; lets you focus on just selecting the base colors while taking care of generating contrast-safe complementary tones to ensure you meet &lt;a href="https://www.w3.org/WAI/WCAG22/Understanding/contrast-minimum.html"&gt;this important success criterion&lt;/a&gt;. A unique feature of this project is that it scales the original color value for a more pleasing visual contrast vs only returning either white or black. (&lt;em&gt;Don't worry - you're able to override the contrast color if needed!&lt;/em&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 "Tokens" comes from the design system world terminology of "design tokens" which you can &lt;a href="https://www.smashingmagazine.com/2019/11/smashing-podcast-episode-3/"&gt;learn more about from the original creator, Jina Anne&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-box" class="anchor"&gt;
  &lt;/a&gt;
  What's in the box
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Example output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// `primary` name and value provided in your tokens&lt;/span&gt;
&lt;span class="nv"&gt;$color-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rebeccapurple&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// `on-primary` name and value generated by a11y-color-tokens&lt;/span&gt;
&lt;span class="c1"&gt;// and guaranteed to have at least 4.5 contrast with `primary`&lt;/span&gt;
&lt;span class="nv"&gt;$color-on-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ceb3e9&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The default options generate individual Sass variables, as well as a map of those variables and a mixin that contains the palette as CSS custom properties, ready for you to drop into &lt;code&gt;:root&lt;/code&gt; or another location of your choice.&lt;/p&gt;

&lt;p&gt;Sass variables and the map include the &lt;code&gt;!default&lt;/code&gt; flag as an additional way to extend, scale, and share your tokens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/5t3ph/a11y-color-tokens/blob/main/sass/_color-tokens.scss"&gt;View the sample default output &amp;gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, pass &lt;code&gt;"css"&lt;/code&gt; as the &lt;code&gt;tokenOutputFormat&lt;/code&gt; to only output CSS custom properties within the &lt;code&gt;:root&lt;/code&gt; selector.&lt;/p&gt;

&lt;p&gt;Additionally, &lt;a href="https://github.com/5t3ph/a11y-color-tokens/blob/main/sass/_color-token-contrast.md"&gt;an optional Markdown document&lt;/a&gt; is generated with contrast cross-compatibility between all available color tokens.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Review an example of &lt;a href="https://github.com/5t3ph/a11y-color-tokens/blob/main/sass/style.scss"&gt;using the generated Sass assets &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Install &lt;code&gt;a11y-color-tokens&lt;/code&gt; into any project using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;a11y-color-tokens &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can then add it to your scripts or call it directly from the command line, but first, you must prepare a color tokens file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-color-tokens-file" class="anchor"&gt;
  &lt;/a&gt;
  Create Color Tokens File
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Before the script will work&lt;/strong&gt;, you will need to prepare your color tokens as a module that exports the tokens array.&lt;/p&gt;

&lt;p&gt;The expected format is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example color-tokens.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*
     * `name` - Required
     * Any string, will be used for color reference
     */&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="cm"&gt;/*
     * `color` - Required
     * Any valid CSS color value
     */&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(56, 84, 230)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="cm"&gt;/*
     * `onColor` - Optional
     * enum: undefined | "[css color value]" | false
     *
     * If undefined, will be generated as relative tone of `color`
     * that meets contrast according to `ratioKey`
     *
     * If a color value provided, will still be checked for contrast
     * and a warning comment added if it doesn't pass
     *
     * Set to `false` to omit generation
     */&lt;/span&gt;
    &lt;span class="cm"&gt;/*
     * `ratioKey` - Optional
     * enum: undefined | "small" (default) | "large"
     *
     * Corresponds to mimimum contrast for either normal text ("small" = 4.5)
     * or large text/user interface components ("large" = 3)
     */&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;View &lt;a href="https://github.com/5t3ph/a11y-color-tokens/blob/main/color-tokens.js"&gt;color-tokens.js&lt;/a&gt; in the package repo for more full example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-setup" class="anchor"&gt;
  &lt;/a&gt;
  Recommended Setup
&lt;/h3&gt;

&lt;p&gt;Add as a standalone script, and then call prior to your build and start commands to ensure tokens are always fresh.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At minimum, be sure to pass an existing &lt;code&gt;outputDirPath&lt;/code&gt; (default: &lt;code&gt;"sass"&lt;/code&gt;) and point &lt;code&gt;colorTokensPath&lt;/code&gt; (default: &lt;code&gt;"color-tokens.js"&lt;/code&gt;) to your tokens file.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"color-tokens"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"a11y-color-tokens --outputDirPath='src/sass' --colorTokensPath='_theme/color-tokens.js'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm-run-all color-tokens [your other scripts]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm-run-all color-tokens [your other scripts]"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;strong&gt;Sass processing is not included&lt;/strong&gt;, you must add that separately. This package is a great companion to my &lt;a href="https://github.com/5t3ph/11ty-sass-skeleton"&gt;11ty-sass-skeleton template&lt;/a&gt; which is a barebones Eleventy static site&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-details" class="anchor"&gt;
  &lt;/a&gt;
  More Details
&lt;/h2&gt;

&lt;p&gt;For further config options and implementation examples, view:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/5t3ph/a11y-color-tokens"&gt;a11y-color-tokens on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/a11y-color-tokens"&gt;a11y-color-tokens on npm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#colophon" class="anchor"&gt;
  &lt;/a&gt;
  Colophon
&lt;/h2&gt;

&lt;p&gt;Hi! I'm &lt;a href="https://twitter.com/5t3ph"&gt;Stephanie Eckles - @5t3ph&lt;/a&gt; and I've been a front-end focused developer for over a decade. &lt;a href="https://thinkdobecreate.com"&gt;Check out more of my projects&lt;/a&gt; including in-depth tutorials to help you upgrade your CSS skills on &lt;a href="https://moderncss.dev"&gt;ModernCSS.dev&lt;/a&gt;, and my &lt;a href="https://5t3ph.dev/egghead"&gt;egghead video lessons&lt;/a&gt; on all kinds of front-end topics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you've found this project useful, I'd appreciate ☕️ &lt;a href="https://www.buymeacoffee.com/moderncss"&gt;a coffee to keep me coding&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>One tip that got me hired by Google, Microsoft, and Stripe</title>
      <author>Devinterview-io</author>
      <pubDate>Tue, 09 Feb 2021 12:20:33 +0000</pubDate>
      <link>https://dev.to/devinterview/one-tip-that-got-me-hired-by-google-microsoft-and-stripe-55a5</link>
      <guid>https://dev.to/devinterview/one-tip-that-got-me-hired-by-google-microsoft-and-stripe-55a5</guid>
      <description>&lt;p&gt;I've worked for &lt;em&gt;Microsoft&lt;/em&gt;, &lt;em&gt;Google&lt;/em&gt;, &lt;em&gt;Stripe&lt;/em&gt;, and received offers from many other companies. One thing I learned when I was interviewing myself is that standard interview tips are woefully inadequate.&lt;/p&gt;

&lt;p&gt;Why practicing problem solving for weeks if your head is completely blank at the interview? Everyone says you have to watch out for recruiters, but what if you don't? How can you perform at your best if you are too afraid?&lt;/p&gt;

&lt;p&gt;I've tested the answers to these questions several times (sometimes by accident). Popular wisdom has been shown to yield average results. But it is possible to pump up your interviewing skills.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For some reason, no one talks about some of the specific aspects of interviewing that have helped me many times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Key points:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use recruiters to your advantage&lt;/li&gt;
&lt;li&gt;Go on real interviews to practice&lt;/li&gt;
&lt;li&gt;Maintain the skill even when you're not looking for work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tip #1: Use recruiters to your advantage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the phone, they are so friendly and accommodating, "We look forward to hearing from you!" Clearly, it's all fake, I used to think. I was sure that after the call, they were secretly discussing my skills behind my back. Like whether or not he was a good fit for the company.&lt;/p&gt;

&lt;p&gt;And they do discuss. But not in the way you think.&lt;/p&gt;

&lt;p&gt;Recruiters don't assess your professional qualities, at least not after the phone call. Their decision about your professionalism was made long before that call. If you're offered an interview: congratulations, you've already passed that milestone.&lt;/p&gt;

&lt;p&gt;Now the recruiter wants to work with you. His job is to get you hired. They know that the average candidate has poor interview preparation skills and are happy to help correct that deficiency. Why discard strong candidates who can't interview well? They want to help everyone perform at their best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can you take advantage of that?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ask them questions! For example, questions like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"What should I do to prepare for the interview?"&lt;br&gt;
"What company values would be good to talk about during the interview?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And be frank about any problems you encounter.&lt;/p&gt;

&lt;p&gt;If you get sick the day before the interview, call the recruiter and ask him to reschedule the interview. He wants to schedule an interview when you're in better shape!&lt;br&gt;
A deadline at work leave you no time to prepare? It's still possible to schedule another date. Worst case scenario, they'll say, "Sorry, we can't do that." That won't make your chances any worse.&lt;/p&gt;

&lt;p&gt;Your insane technical skills no longer matter to them. Either way, being humble and open to learning will show you in the best light.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #2. Go to real interviews to practice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to brush up on your interviewing skills. Programming is great, but it's nowhere near enough in real interviews. Try to do real interviews as often as possible. And don't limit yourself to the companies you're interested in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn to deal with the pressure.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you get to a real meeting, the world changes: you're locked in a cage with a lion. Your heart is drumming in your chest. Your psyche explodes as your body goes into "hit or run" mode. Sticky hands struggle to write a semi-intelligible code on the board. Even the innocuous "Would you like something to drink?" seems a nefarious test of whether you'll choose a Coke or a coffee...&lt;/p&gt;

&lt;p&gt;That's the kind of experience you can only get in a real job interview. And only there will you learn how to deal with it. You'll get your ass kicked at your first interview. And at the second one. But once you get through a few, you'll get used to the adrenaline rush. You might even enjoy it. You'll become a bullfighter who confidently confronts an attacking bull. That's how you overcome fear.&lt;/p&gt;

&lt;p&gt;You may think these training interviews are much easier than the real thing! When the stakes are low, the lion looks less ferocious. I've found that I do best when I don't care about the outcome. I become much calmer and more at ease. I think faster, my brain considers more possibilities. Now even in important interviews, I try to convince myself that I don't care, as if it were a practice interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn to answer ambiguous questions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After each interview, write down all the questions you were asked. Review them the same evening while they are still fresh in your mind. Focus especially on the behavioral and architectural ones that don't have a specific right answer. Think about how to answer them better. Are there stories from your life that you can refer to? Wait a few days and look again at these questions. Then you'll find a better answer.&lt;/p&gt;

&lt;p&gt;Each answer you prepare is one stroke in the picture of your preparation. There's a good chance you'll run into similar questions again. Over time, you'll be able to mix up your palette of prepared sketches-and paint a terrific picture of how your abilities make you a valuable asset to the company.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think fast.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During practice interviews, you may find that the company is actually interesting. Recruiters count on this option. They offer to try for an interview even if you say the company isn't interesting. And I've had that happen more than once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #3. Maintain the skill even when you're not looking for a job&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's better to practice an interview every year, just to confirm that you can pass.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check 3800+ dev interview question here 👉 &lt;a href="https://devinterview.io/"&gt;Devinterview.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's an uplifting feeling to know that if you lose your job, you can find another one quickly. It takes a huge weight off your shoulders.&lt;/p&gt;

&lt;p&gt;I myself occasionally accept an invitation from a recruiter (it helps to have a LinkedIn account for that). I don't bother to prepare, at least not at first. These interviews allow me to see where I need to refresh my knowledge and where industry practices are changing.&lt;/p&gt;

&lt;p&gt;For example, in a technical interview last summer, I didn't immediately understand that they wanted to see actual working code. Instead of the usual pseudocode in Google Docs, the interviewer asked me to choose the right language in online IDE. And I don't have any particular language preferences. I use a lot of tools at work, and I change languages about every five months. So even simple things like "creating an array" usually have to be googled. So what to choose? Well, I chose C#.&lt;/p&gt;

&lt;p&gt;But I didn't think that Visual Studio's very verbose syntax automates just fine, and this online IDE doesn't. Even for a simple task like creating an array, I had to spend precious minutes searching for the right package to import and the exact syntax. Needless to say, I ran out of time. So I got burned... but it opened my eyes to how job interviews change and what to prepare for in the future.&lt;/p&gt;

&lt;p&gt;Four months later I was approached by a company called Stripe. They were also expecting a working code and even let me use their IDE. This time I was ready. And now I work there.&lt;/p&gt;

&lt;p&gt;These four strategies have helped me over and over again: using recruiters, practicing on real interviews, gaining new knowledge there, and maintaining the skill.&lt;/p&gt;

&lt;p&gt;What do all of these tactics have in common? They take out the fear. The fear that prevents you from maximizing your performance. Practice more often, and the interview rooms will turn into a playground for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks 🙌 for reading and good luck on your next tech interview!&lt;br&gt;
&lt;strong&gt;Explore 3800+ dev interview question here 👉 &lt;a href="https://devinterview.io/"&gt;Devinterview.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Good writing is simple writing. And simple writing is not easy.</title>
      <author>Nityesh Agarwal</author>
      <pubDate>Tue, 09 Feb 2021 10:52:34 +0000</pubDate>
      <link>https://dev.to/nityeshaga/good-writing-is-simple-writing-and-simple-writing-is-not-easy-1h60</link>
      <guid>https://dev.to/nityeshaga/good-writing-is-simple-writing-and-simple-writing-is-not-easy-1h60</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Simple writing is persuasive. A good argument in five sentences will sway more people than a brilliant argument in a hundred sentences."&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scott Adams&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good writing is simple writing. Simple writing is clear writing. And clear writing is not easy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"A clear sentence is no accident."&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On Writing Well, a classic writing guide&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-hurdles" class="anchor"&gt;
  &lt;/a&gt;
  The Hurdles
&lt;/h1&gt;

&lt;p&gt;In order to get good at writing, you must learn how to write simple paragraphs with clear sentences.&lt;/p&gt;

&lt;p&gt;This 3-minute lesson will help you get there.&lt;/p&gt;

&lt;p&gt;But keep in mind, the path to simplicity is a tricky one.&lt;/p&gt;

&lt;p&gt;That's because simplicity hides its own beauty. It's difficult to appreciate the beauty of a simple paragraph because you don't see the hardwork that goes into writing it.&lt;/p&gt;

&lt;p&gt;I want to help you navigate simplicity by telling you about 2 hurdles that often trip writers by creating unnecessary complexity in their writing:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hurdle-1-not-understanding-the-cost-of-being-thorough" class="anchor"&gt;
  &lt;/a&gt;
  HURDLE #1: Not understanding the cost of being thorough
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"What if the reader doesn't get my point?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This anxiety can lead you to be cautiously thorough in your writing.&lt;/p&gt;

&lt;p&gt;You run to cover all holes in order to make sure that the reader doesn't miss the point you're trying to make. You explain all your quip remarks and every interpretation of your sentences.&lt;/p&gt;

&lt;p&gt;What you don't understand is that by plugging holes so incessantly, you make your writing feel suffocating.&lt;/p&gt;

&lt;p&gt;The price of being thorough is losing the attention of your readers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-ycHXmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a0o3pv3ovyyw1sou1pr5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-ycHXmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a0o3pv3ovyyw1sou1pr5.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reader's willingness to continue reading decreases in proportion to the number of words you use.&lt;/p&gt;

&lt;p&gt;And if it's a choice between being thorough and keeping the attention of your reader, you are almost always better off choosing the latter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hurdle-2-unlearning-the-fanciness-of-fancy-words" class="anchor"&gt;
  &lt;/a&gt;
  HURDLE #2: Unlearning the fanciness of fancy words
&lt;/h2&gt;

&lt;p&gt;The peculiar genius always speaks the complicated tongue. Our culture loves to associate fancy words with exceptional people. From Sherlock Holmes to Tony Stark - a genius's default is incomprehensible garble of long, smart-sounding sentences.&lt;/p&gt;

&lt;p&gt;That's why, you associate impressive words with impressive ideas. &lt;/p&gt;

&lt;p&gt;You use a long, fancy word when a short, common synonym conveys the same information. You use "assistance" when "help" will do, "facilitate" when "ease" will do, "utilize" when "use" will do, "pertinent" when "relevant" will do.&lt;/p&gt;

&lt;p&gt;This creates needless friction for the reader. &lt;/p&gt;

&lt;p&gt;What's worse - writing complex sentences using fancy words gives you a false impression that you are saying more than you actually are. &lt;/p&gt;

&lt;p&gt;If you truly have something worthwhile to say, you should feel proud of telling it simply. You must resist the impulse of using a 2-dollar word when an everyday word works just fine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"If you can't explain it simply, you don't know it well enough."&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Richard Feynman, the celebrated Nobel prize winning physicist&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#overcoming-the-hurdles" class="anchor"&gt;
  &lt;/a&gt;
  Overcoming the hurdles
&lt;/h1&gt;

&lt;p&gt;I've got 2 pieces of advice for you:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-understand-the-8020-rule-of-writing" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Understand the 80/20 rule of writing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Good writers know what to write. Great writers know what to omit.&lt;/p&gt;

&lt;p&gt;Omission is an important but challenging skill. Understanding the 80/20 rule can help.&lt;/p&gt;

&lt;p&gt;"You can get 80% of the value by putting in 20% of the effort." - that's the famous 80/20 rule.&lt;/p&gt;

&lt;p&gt;There's little data backed evidence to support the rule but I still find it useful because it gives me a good mental model. It makes me focus on intelligently chosing where I put my effort.&lt;/p&gt;

&lt;p&gt;Here's an 80/20 rule for writing - you can convey 80% of the information using 20% of the words. You just need to find those 20% words and delete the rest. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gaJwLlhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wkda9j8j946j49qfqlwm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gaJwLlhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wkda9j8j946j49qfqlwm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Value your reader's time, fanatically - cut down what they need to read.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-embrace-constraints" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Embrace constraints&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Embracing constraints is a powerful way to unconciously improve your writing. It forces you to use simple, clear language that delivers the maximum impact.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"You should write it as if you were paying by the word to write it.”&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Neil Gaiman&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It works because constraints are advantages in disguise.&lt;/p&gt;

&lt;p&gt;Limited resources force you to make do with what you’ve got. There’s no room for waste. And that forces you to be creative.&lt;/p&gt;

&lt;p&gt;That's why it's a good idea to introduce arbitrary constraints in your writing like limiting yourself to a smaller number of words than you think you need.&lt;/p&gt;




&lt;p&gt;This lesson will get your through Level-3 of writing well.&lt;/p&gt;

&lt;p&gt;In the next few days, I'll publish lessons to take you through more levels. So, follow me on Dev.to and &lt;a href="https://twitter.com/nityeshaga"&gt;on Twitter&lt;/a&gt; to get the updates.&lt;/p&gt;

&lt;p&gt;You can also sign up for the &lt;a href="https://www.nityesh.com/introducing-clear-writing-clear-thinking/"&gt;Clear Writing, Clear Thinking email workshop&lt;/a&gt; to get everything over email.&lt;/p&gt;

&lt;p&gt;Along with the lessons, the workshop also contains small tasks that you can complete to practice what you learned.&lt;/p&gt;

&lt;p&gt;I'm giving it all away for free!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>career</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
