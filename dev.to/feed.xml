<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>It's my Birthday! Ask Me Anything about GitHub, DevOps, Azure DevOps (Live Q&amp;A)</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Tue, 13 Jul 2021 01:38:50 +0000</pubDate>
      <link>https://dev.to/n3wt0n/it-s-my-birthday-ask-me-anything-about-github-devops-azure-devops-live-q-a-29df</link>
      <guid>https://dev.to/n3wt0n/it-s-my-birthday-ask-me-anything-about-github-devops-azure-devops-live-q-a-29df</guid>
      <description>&lt;p&gt;Hey folks, &lt;strong&gt;it's my Birthday&lt;/strong&gt;! ü•≥&lt;/p&gt;

&lt;p&gt;To celebrate, I will host a live &lt;em&gt;Q&amp;amp;A&lt;/em&gt;/&lt;em&gt;Ask Me Anything&lt;/em&gt; next Thursday morning (Wednesday evening for the US folks) (&lt;strong&gt;&lt;em&gt;see below the time schedule&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Got any questions about &lt;strong&gt;DevOps&lt;/strong&gt;, &lt;strong&gt;GitHub&lt;/strong&gt;, &lt;strong&gt;Azure DevOps&lt;/strong&gt;, and/or ME?&lt;/p&gt;

&lt;p&gt;Join me for this live Q&amp;amp;A and I will try and answer all your questions!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/a9cpkf7ZMeA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/a9cpkf7ZMeA"&gt;Link to the video: https://youtu.be/a9cpkf7ZMeA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prepare your questions&lt;/strong&gt;, and I hope to see y'all live so we can celebrate together! And if you can't make it, &lt;strong&gt;post your questions or comments down below&lt;/strong&gt; so I can address them during the live!&lt;/p&gt;

&lt;p&gt;Thanks so very much again for your support and see y'all there!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#time-of-the-live"&gt;
  &lt;/a&gt;
  TIME OF THE LIVE:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Thursday, July 15, 10.00 am UTC+8&lt;/li&gt;
&lt;li&gt;Thursday, July 15, 7.30 am IST&lt;/li&gt;
&lt;li&gt;Thursday, July 15, 2.00 am UTC&lt;/li&gt;
&lt;li&gt;Wednesday, July 14, 10.00 pm ET&lt;/li&gt;
&lt;li&gt;Wednesday, July 14, 7.00 pm PT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/a9cpkf7ZMeA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>azuredevops</category>
      <category>live</category>
    </item>
    <item>
      <title>Data Engineering Roadmap For 2021 - 12 Steps To Help You Go From 0 To Data Engineering</title>
      <author>SeattleDataGuy</author>
      <pubDate>Tue, 13 Jul 2021 01:26:57 +0000</pubDate>
      <link>https://dev.to/seattledataguy/data-engineering-roadmap-for-2021-12-steps-to-help-you-go-from-0-to-data-engineering-2l7e</link>
      <guid>https://dev.to/seattledataguy/data-engineering-roadmap-for-2021-12-steps-to-help-you-go-from-0-to-data-engineering-2l7e</guid>
      <description>&lt;p&gt;Maybe it's the 6 figure salaries, the opportunity to work with cool technology or people are finally learning that data engineering is where everything starts in the data field.&lt;/p&gt;

&lt;p&gt;Whatever the reason, people are noticing.&lt;/p&gt;

&lt;p&gt;VCs are investing in data storage and ingestion platforms and &lt;a href="https://seattledataguy.substack.com/p/are-companies-hiring-fewer-data-scientists"&gt;companies are interviewing more data engineers&lt;/a&gt; compared to previous years.&lt;/p&gt;

&lt;p&gt;But how does one become a data engineer? If you were to Google data engineering roadmap, then you would find a very large image of an overwhelming roadmap that has been going around Linkedin for the past few weeks with over a decade of learning.&lt;/p&gt;

&lt;p&gt;It's too much.&lt;/p&gt;

&lt;p&gt;So in this article, we will provide the steps of how you can go from 0 to data engineer with a combination of free courses as well as paid that can help you gain the skills you need to be a data engineer.&lt;/p&gt;

&lt;p&gt;But before diving into that, let's make sure you know what a data engineer is.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-data-engineering"&gt;
  &lt;/a&gt;
  What Is Data Engineering
&lt;/h3&gt;

&lt;p&gt;Data engineers move, remodel, and manage data sets from 10s if not 100s of internal company applications so analysts and data scientists don't need to spend their time constantly pulling data sets.&lt;/p&gt;

&lt;p&gt;They may also create a core layer of data that lets different data sources connect to it to get more information or context.&lt;/p&gt;

&lt;p&gt;These specialists are usually the first people to handle data. They process the data so it's useful for everyone, not just the systems that store it.&lt;/p&gt;

&lt;p&gt;There are obvious reasons to become a data engineer‚Ää---‚Äälike a high salary and numerous opportunities due to limited competition within the job market‚Ää---‚Ääbut we're not focusing on those today. Instead, consider the following thoughts, which are a bit more relevant to the job description.&lt;/p&gt;

&lt;p&gt;Now before going to far on this data engineering roadmap. We need to answer a very important question.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#0-is-data-engineering-for%C2%A0you"&gt;
  &lt;/a&gt;
  0. Is Data Engineering For¬†You?
&lt;/h3&gt;

&lt;p&gt;For that, I have put together a video that may help you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nqc1aj08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w15sdic2k8m0nnqe5u8l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nqc1aj08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w15sdic2k8m0nnqe5u8l.jpeg" alt="data engineering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=jpzDA90EuQ8"&gt;Watch The Video Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will hopefully provide you some context on data engineering and if you would want to do it in the future.&lt;/p&gt;

&lt;p&gt;If you're still here, then let's break down the roadmap to become a data engineer.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-building-your-basesql-coding%C2%A0linux"&gt;
  &lt;/a&gt;
  1. Building Your Base(SQL, Coding,¬†Linux)
&lt;/h3&gt;

&lt;p&gt;Before getting deep into data engineering specifics you need a solid base.&lt;/p&gt;

&lt;p&gt;It can be tempting to start learning some of the concepts and skills that are further along the lines of distributed computing or streaming. But that's like learning words and sentences before you learn what letters are.&lt;/p&gt;

&lt;p&gt;That's why you need to start with SQL, programming, and some form of server/Linux basics.&lt;/p&gt;

&lt;p&gt;You need to be able to speak to computers in their language and these three skills will help you understand how to communicate with computers from various layers.&lt;/p&gt;

&lt;p&gt;Building this solid foundation will ensure that you reduce your future learning curves because to interact with many of the other technical components, you will need to understand some form of programming language or command line basics.&lt;/p&gt;

&lt;p&gt;Also, learning the basics in terms of servers such as SFTP, firewalls, PGP, and other technical components will go a long way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://www.khanacademy.org/computing/computer-programming/sql"&gt;SQL Cours On Khan Academy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=k9TUPpGqYTo&amp;amp;list=PL-osiE80TeTskrapNbzXhwoFUiLCjGgY7&amp;amp;index=2"&gt;Python On Youtube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.udemy.com/course/linux-tutorials/?ranMID=39197&amp;amp;ranEAID=GjbDpcHcs4w&amp;amp;ranSiteID=GjbDpcHcs4w-grM2QfFWOqVeKgCDDX12Fw&amp;amp;LSNPUBID=GjbDpcHcs4w&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;Linux On Udemy&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#2-try-building-your-first-project%E2%80%8A%E2%80%8Abuilding-a-flask%C2%A0api"&gt;
  &lt;/a&gt;
  2. Try Building Your First Project‚Ää---‚ÄäBuilding A Flask¬†API
&lt;/h3&gt;

&lt;p&gt;You will need to interact with APIs on a daily basis if you become a data engineer. Either to automate processes or pull data.&lt;/p&gt;

&lt;p&gt;In that way, building an API is a great first project because it will force you to use several layers of technology.&lt;/p&gt;

&lt;p&gt;You will need to understand concepts like ports, HTTP requests, coding, command line, and if you really want to make it interesting, maybe even play around with the cloud by spinning up a VM to run your API off of.\&lt;br&gt;
But that's a stretch goal. Let's start easy.&lt;/p&gt;

&lt;p&gt;Flask is a great python library that you can quickly spin up an API in no time. But I don't expect you to just know how to build your first API.&lt;/p&gt;

&lt;p&gt;I like &lt;a href="https://medium.com/u/8b318225c16a"&gt;freeCodeCamp&lt;/a&gt;'s Flask tutorial. Now, this is focused on building a site, but you can still use this tutorial to build out a lot of the backend infrastructure.&lt;/p&gt;

&lt;p&gt;So for this project, you can follow along with freeCodeCamp and then try to add in your own end-points for your &lt;a href="https://www.youtube.com/watch?v=Z1RJmh_OqeA"&gt;Flask API Project.&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-learn-about-data-warehousing-and-data-pipelinesetls-elts-and%C2%A0els"&gt;
  &lt;/a&gt;
  3. Learn About Data Warehousing And Data Pipelines(ETLs, ELTs, and¬†ELs)
&lt;/h3&gt;

&lt;p&gt;When you look at the skill sets of data engineers, software engineers, and data scientists, there is a lot of cross-over.&lt;/p&gt;

&lt;p&gt;All three tend to use Python, both data scientists and data engineers tend to use SQL pretty heavily and all three rely to some degree on some understanding of Linux.&lt;/p&gt;

&lt;p&gt;So what differentiates data engineers?&lt;/p&gt;

&lt;p&gt;One of the big differentiators is the focus on data warehouses and data pipelines.&lt;/p&gt;

&lt;p&gt;But what are these?&lt;/p&gt;

&lt;p&gt;Data warehouses and data pipelines. At least to start.&lt;/p&gt;

&lt;p&gt;Data warehouses and data pipelines are concepts that data engineers need to understand. They are the bread and butter of any good DE.&lt;/p&gt;

&lt;p&gt;Luckily there are tons of resources that cover these concepts. But let's start with the granddaddy of all data warehousing resources. &lt;a href="https://aatinegar.com/wp-content/uploads/2016/05/Kimball_The-Data-Warehouse-Toolkit-3rd-Edition.pdf"&gt;Kimball's Data Warehouse Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a book written by one of the people who built much of the foundation for data warehouses. There is a lot of history there, but we won't go into that now.&lt;/p&gt;

&lt;p&gt;If you need to go the paid route because otherwise, you won't take learning seriously. Then check out &lt;a href="https://bit.ly/3wg94E2"&gt;The Basics To Data Warehousing Udemy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These combined should cover most of the conceptual basics.&lt;/p&gt;

&lt;p&gt;Of course, now we need to apply it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-build-your-second-project%E2%80%8A%E2%80%8Aapplying-coding-and-data-warehousing"&gt;
  &lt;/a&gt;
  4. Build Your Second Project‚Ää---‚ÄäApplying Coding And Data Warehousing
&lt;/h3&gt;

&lt;p&gt;Now that you have learned about data pipelines and data warehouses, it would be a great idea to apply this knowledge.&lt;/p&gt;

&lt;p&gt;So let's build your second project, to solidify that knowledge. Let's aim to implement these 4 concepts below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Scrape an online data source&lt;/li&gt;
&lt;li&gt;  Store encrypted data into SFTP&lt;/li&gt;
&lt;li&gt;  Create dimensional model&lt;/li&gt;
&lt;li&gt;  Pull data from SFTP and load into Data Warehouse(Don't worry too much about Workflows just yet)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, this will bring many of the skills you have learned together. Whether it be learning about PGP encryption, SFTP, or data modeling.&lt;/p&gt;

&lt;p&gt;All of which will improve your overall skillsets and provide some form of the final project.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5a-learn-about%C2%A0testing"&gt;
  &lt;/a&gt;
  5a. Learn About¬†Testing
&lt;/h3&gt;

&lt;p&gt;Testing.&lt;/p&gt;

&lt;p&gt;You may have never even learned about testing in school or maybe you had that one course that had one unit for one week that just started to touch the surface of testing.&lt;/p&gt;

&lt;p&gt;Now in a world where QA engineers are few are far between and testing is just part of the CI/CD process.&lt;/p&gt;

&lt;p&gt;You need to know how to write test cases.&lt;/p&gt;

&lt;p&gt;You need to know the difference between unit tests and integration tests.&lt;/p&gt;

&lt;p&gt;To do so, Udemy has a great course on test-driven development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/unit-testing-and-tdd-in-python/?ranMID=39197&amp;amp;ranEAID=GjbDpcHcs4w&amp;amp;ranSiteID=GjbDpcHcs4w-KudpdnnpEA3QyjbxvMhcRg&amp;amp;LSNPUBID=GjbDpcHcs4w&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;Check out TDD Course Like Unit TDD For Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W02dlLwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/578dd6ybqf6nv9wqmdi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W02dlLwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/578dd6ybqf6nv9wqmdi7.png" alt="testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=eAPmXQ0dC7Q"&gt;Or if you want a free version you can use this Youtube tutorial&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5b-airflow-and%C2%A0docker"&gt;
  &lt;/a&gt;
  5b. Airflow And¬†Docker
&lt;/h3&gt;

&lt;p&gt;You will notice I have 2 step 5s. Well, that's because we are getting to the point where order matters a little less. Steps 6, 7, 8, and so on. Could probably get a little jumbled and you would be fine.&lt;/p&gt;

&lt;p&gt;At this point, you should have a solid enough base that any new technology that comes your way shouldn't have the same learning curve.&lt;/p&gt;

&lt;p&gt;That's why for this second step 5 I suggest you learn Airflow + Docker.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because you can apply both well together. Also, I really enjoy &lt;a href="https://www.youtube.com/watch?v=AHMm1wfGuHE"&gt;Tuan Vu's Playlist&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#subscribe-to-my-mailing-list-for-community-updates-and%C2%A0freebies"&gt;
  &lt;/a&gt;
  ‚úâÔ∏è &lt;a href="https://seattledataguy.substack.com/p/scaling-a-data-analytics-team-for"&gt;Subscribe to my Mailing List For Community Updates And¬†Freebies&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#6-cloud-and%C2%A0nosql"&gt;
  &lt;/a&gt;
  6. Cloud and¬†NoSQL
&lt;/h3&gt;

&lt;p&gt;At this point, you have probably already done a little on the Cloud and maybe even played around with a NoSQL database.&lt;/p&gt;

&lt;p&gt;But, let's round out that knowledge.&lt;/p&gt;

&lt;p&gt;How? Well, there are a few great options when it comes to rounding out knowledge. For example, now I think it would be a good time to take a certificate program.&lt;/p&gt;

&lt;p&gt;I don't often find certificates useful until you have some experience because I find certificates often help fill in the gaps of knowledge on a particular topic.&lt;/p&gt;

&lt;p&gt;One great certificate for data engineers is the &lt;a href="https://www.coursera.org/professional-certificates/gcp-data-engineering?ranMID=40328&amp;amp;ranEAID=GjbDpcHcs4w&amp;amp;ranSiteID=GjbDpcHcs4w-RRA2EvkPrSS.DRJYOcp3YQ&amp;amp;siteID=GjbDpcHcs4w-RRA2EvkPrSS.DRJYOcp3YQ&amp;amp;utm_content=10&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=GjbDpcHcs4w"&gt;Google Data Engineer Certificate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for NoSQL check out &lt;a href="https://medium.com/u/8b318225c16a"&gt;freeCodeCamp&lt;/a&gt;'s video on &lt;a href="https://www.youtube.com/watch?v=4cWkVbC2bNE&amp;amp;t=1s"&gt;database systems&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-streaming-and-distributed-systems"&gt;
  &lt;/a&gt;
  7. Streaming And Distributed Systems
&lt;/h3&gt;

&lt;p&gt;There are so many ways to process data in the modern world. More importantly, using more complex systems such as streaming or distributed systems is so much easier than it's ever been.&lt;/p&gt;

&lt;p&gt;You can spin up a fully managed service on AWS or GCP and you're off to the races. No need to spin up 5 other services just to try to wrangle and manage your streaming system.&lt;/p&gt;

&lt;p&gt;So, let's find some courses on this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/u/f28a432ce853"&gt;Andreas Kretz&lt;/a&gt; for example has a why video on &lt;a href="https://www.youtube.com/watch?v=hf5isv0gdUU"&gt;Spark and Kafka&lt;/a&gt; thats a great primer before you jump into taking courses.&lt;/p&gt;

&lt;p&gt;Once you have a good idea of Kafka and why you should learn it. Take, really, any of &lt;a href="https://medium.com/u/a34f6d8b7618"&gt;Frank Kane&lt;/a&gt;'s courses. &lt;a href="https://www.udemy.com/course/taming-big-data-with-apache-spark-hands-on/?ranMID=39197&amp;amp;ranEAID=GjbDpcHcs4w&amp;amp;ranSiteID=GjbDpcHcs4w-9Qd1UEq.pK04u1cGU4WhjQ&amp;amp;LSNPUBID=GjbDpcHcs4w&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;He has done a great job producing a whole host of courses that discuss Spark, Kafka and Hadoop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, if you need an example of someone using a streaming component. Check out StartDataEngineering.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.startdataengineering.com/post/data-engineering-project-for-beginners-stream-edition/"&gt;&lt;strong&gt;Data Engineering Project: Stream Edition&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8-start-studying-for-interviews"&gt;
  &lt;/a&gt;
  8. Start Studying for Interviews
&lt;/h3&gt;

&lt;p&gt;At some point, you need to go out into the real world and attempt to interview.&lt;/p&gt;

&lt;p&gt;For that, I have put together a data engineering interview guide. This guide helps breakdown what you will need to study and provides the questions so you don't have to waste time Googling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/the-data-engineering-interview-study-guide-6f09420dd972"&gt;&lt;strong&gt;The Data Engineering Interview Study Guide&lt;/strong&gt;\&lt;br&gt;
*For your FAANG and other technical interviews*betterprogramming.pub&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-build-your-third%C2%A0project"&gt;
  &lt;/a&gt;
  9. Build Your Third¬†Project
&lt;/h3&gt;

&lt;p&gt;At this point in your learning, you should have a broad knowledge of skills.&lt;/p&gt;

&lt;p&gt;You should know about distributed systems, streaming, programing, APIs and so much more.&lt;/p&gt;

&lt;p&gt;So now take all of that knowledge and apply it.&lt;/p&gt;

&lt;p&gt;But to what?&lt;/p&gt;

&lt;p&gt;Well, I put together a video where I discuss &lt;a href="https://www.youtube.com/watch?v=385mKftVr3I"&gt;5 different examples of projects that are real&lt;/a&gt;, that exist. You can find links to them on the video. There are tons of great examples of people using tons of technologies to build data engineering projects.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10learn-enough-uiux-and-dashboarding"&gt;
  &lt;/a&gt;
  10.Learn &lt;strong&gt;Enough&lt;/strong&gt; UI/UX and Dashboarding
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://medium.com/u/498aec590e1b"&gt;Taras Bakusevych&lt;/a&gt; still has my favorite article in terms of how to design a dashboard. The way it's broken down, even with the cliche "10 rules" title, really helps you understand how to develop a dashboard.&lt;/p&gt;

&lt;p&gt;Honestly, the article below has a course worth of info condensed into ten points.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxplanet.org/10-rules-for-better-dashboard-design-ef68189d734c"&gt;&lt;strong&gt;10 rules for better dashboard design&lt;/strong&gt;\&lt;br&gt;
*Practical guide*uxplanet.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Truthfully, UI/UX isn't always necessary for data engineers. However, for some of you out there, you will fall in love with designing dashboards and displaying data.&lt;/p&gt;

&lt;p&gt;And in general, there will always be a need to at least build a good enough dashboard. So take a moment to learn this skill.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#11-pick-your%C2%A0own"&gt;
  &lt;/a&gt;
  11. Pick Your¬†Own
&lt;/h3&gt;

&lt;p&gt;At this point in your learning, you have probably found areas you enjoy. Maybe you liked distributed computing or putting together an API.&lt;/p&gt;

&lt;p&gt;Dig into that.&lt;/p&gt;

&lt;p&gt;Figure out what you enjoy learning about and learn more.&lt;/p&gt;

&lt;p&gt;Technology is great that way in the sense that it is an overflowing set of learnings. There is always more to dig into always concepts, technologies, design practices that you know nothing about.&lt;/p&gt;

&lt;p&gt;So go learn.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#12-give-yourself-room-to%C2%A0grow"&gt;
  &lt;/a&gt;
  12. Give Yourself Room To¬†Grow
&lt;/h3&gt;

&lt;p&gt;Learning is a process and it should be both fun and frustrating.&lt;/p&gt;

&lt;p&gt;So let it be that way.&lt;/p&gt;

&lt;p&gt;When you get stuck, don't beat yourself up. Revel in the moment. Because once you solve that problem, its gone.&lt;/p&gt;

&lt;p&gt;You get a brief moment of excitement and dopamine for solving the riddle, but then there is just another riddle to solve.&lt;/p&gt;

&lt;p&gt;Another bug to fix.&lt;/p&gt;

&lt;p&gt;If you've gotten this far in your learning, then you have probably gotten past the "Hello World" phase. But if you recall, there was something magical about the first time you got code to run.&lt;/p&gt;

&lt;p&gt;So don't rush.&lt;/p&gt;

&lt;p&gt;And Good Luck!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#readwatch-these%C2%A0next"&gt;
  &lt;/a&gt;
  Read/Watch These¬†Next
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://betterprogramming.pub/the-data-science-interview-study-guide-c3824cb76c2e"&gt;&lt;strong&gt;Data Science Interview Study Guide&lt;/strong&gt;&lt;/a&gt;\
&lt;em&gt;121 resources to help you land your data science dream job&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=lGzh-QendJc"&gt;&lt;strong&gt;How I Went From Analyst To Data Engineer&lt;/strong&gt;&lt;/a&gt;\
&lt;em&gt;How to become a data engineer‚Ää---‚Ääand know if it's right for you&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=ZK-5yS7jJC8&amp;amp;t=1s"&gt;How To Start A Consulting Business As A Consultant&lt;/a&gt;\
&lt;em&gt;Getting Your First Client&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#subscribe-to-my-mailing-list-for-community-updates-and%C2%A0freebies"&gt;
  &lt;/a&gt;
  ‚úâÔ∏è &lt;a href="https://seattledataguy.substack.com/p/scaling-a-data-analytics-team-for"&gt;Subscribe to my Mailing List For Community Updates And¬†Freebies&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This article does contain affiliate links that provide me a small fee. Generally these are the udemy and coursera links.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About Me
&lt;/h3&gt;

&lt;p&gt;I have spent my career focused on all forms of data. I have focused on developing algorithms to detect fraud, reduce patient readmission and redesign insurance provider policy to help reduce the overall cost of healthcare. I have also helped develop analytics for marketing and IT operations in order to optimize limited resources such as employees and budget. I privately consults on data science and engineering problems both solo as well as with a company called Acheron Analytics. I have experience both working hands-on with technical problems as well as helping leadership teams develop strategies to maximize their data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-with-me-on-social%C2%A0network"&gt;
  &lt;/a&gt;
  Connect with Me on Social¬†Network
&lt;/h3&gt;

&lt;p&gt;‚úÖ YouTube:&lt;a href="https://www.youtube.com/channel/UCmLGJ3VYBcfRaWbP6JLJcpA"&gt;https://www.youtube.com/channel/SeattleDataGuy&lt;/a&gt;\&lt;br&gt;
‚úÖ Website: &lt;a href="https://www.theseattledataguy.com/"&gt;https://www.theseattledataguy.com/&lt;/a&gt;\&lt;br&gt;
‚úÖ LinkedIn: &lt;a href="https://www.linkedin.com/company/18129251"&gt;https://www.linkedin.com/company/18129251&lt;/a&gt;\&lt;br&gt;
‚úÖ Personal Linkedin: &lt;a href="https://www.linkedin.com/in/benjaminrogojan/"&gt;https://www.linkedin.com/in/benjaminrogojan/&lt;/a&gt;\&lt;br&gt;
‚úÖ FaceBook: &lt;a href="https://www.facebook.com/SeattleDataGuy"&gt;https://www.facebook.com/SeattleDataGu&lt;/a&gt;y&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>database</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Evolving From Dev to CEO w/ Stephen Magill</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 13 Jul 2021 00:16:33 +0000</pubDate>
      <link>https://dev.to/linearb/evolving-from-dev-to-ceo-w-stephen-magill-8n3</link>
      <guid>https://dev.to/linearb/evolving-from-dev-to-ceo-w-stephen-magill-8n3</guid>
      <description>&lt;p&gt;The most prolific companies of our time are run by former developers. &lt;/p&gt;

&lt;p&gt;That‚Äôs why on this week's episode of &lt;a href="https://devinterrupted.com/podcast/evolving-from-dev-to-ceo/"&gt;Dev Interrupted&lt;/a&gt; we bring in former-developer-turned-CEO, Stephen Magill of Muse.dev, to chat about what it takes to make the jump from developer to business leader.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2nFKZF3l9Ir2LcvlHzaqJ6"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Why more companies are being led by former developers&lt;/li&gt;
&lt;li&gt;The pros and cons of having a technical vs communication background&lt;/li&gt;
&lt;li&gt;What Stephen wishes he knew before taking on a leadership role&lt;/li&gt;
&lt;li&gt;Great advice for developers who aspire to become business leaders&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ceo</category>
      <category>devops</category>
      <category>leadership</category>
      <category>culture</category>
    </item>
    <item>
      <title>UNDERSTANDING CALLBACKS, PROMISES, GENERATORS AND ASYNC/AWAIT</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Tue, 13 Jul 2021 00:05:45 +0000</pubDate>
      <link>https://dev.to/mcube25/understanding-callbacks-promises-generators-and-async-await-j1c</link>
      <guid>https://dev.to/mcube25/understanding-callbacks-promises-generators-and-async-await-j1c</guid>
      <description>&lt;p&gt;There are few fields in JavaScript that provide an equal amount of possible solutions and tools to the handling of &lt;strong&gt;&lt;em&gt;asynchronous code&lt;/em&gt;&lt;/strong&gt;. There is a reason for the existence  of the vast amount of tools. Handling asynchronous code in a readable and manageable way has always been challenging in JavaScript. We are going to try to understand callbacks, promises, generators and async await so as to know when to use each tool and how they actually differ.&lt;br&gt;
By default JavaScript is a synchronous language. This means it executes one line of code at a time and hence the need for certain approaches and tools to handle asynchronous code. Let us look at this approaches.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#callbacks"&gt;
  &lt;/a&gt;
  CALLBACKS
&lt;/h4&gt;

&lt;p&gt;Callbacks are the oldest and simplest way to deal with asynchronous code in JavaScript. Callbacks are also known as higher order functions. They functions passed into functions and they are executed at some point. let us have a look at an example code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let x = function () {
    console.log("i am called from inside a function");
};

let y = function (callback) {
    console.log("do something here");
    callback();
};

y(x);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we have a function x and another function y. Function y has an argument called callback and it is being executed as a function callback() within the function y as shown in the image below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrxWDSRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125340800-c12a8e80-e307-11eb-8eaf-4924eee6971d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrxWDSRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125340800-c12a8e80-e307-11eb-8eaf-4924eee6971d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When function y is executed it passes function x as an argument and it will execute inside function y as an argument and a callback.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bzh_trO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125341925-0b603f80-e309-11eb-910c-3887b864893a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bzh_trO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125341925-0b603f80-e309-11eb-910c-3887b864893a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that we are passing function x into function y as a function body. We are not passing the result of function x. We are passing the function body itself into another function and it would be executed at some point. Let us run the code and see what happens&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--amd9uTZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125342923-53339680-e30a-11eb-9d7e-68c9eb416af0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--amd9uTZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125342923-53339680-e30a-11eb-9d7e-68c9eb416af0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we run the code as in above, the first line of code in function y&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; console.log("do something here");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;gets executed and the console prints the result. After this the function x gets executed printing to the console too. This is asynchronous behavior and a very simple way of executing callbacks.&lt;br&gt;
The problem with callbacks is that when the application gets bigger, we have to do a lot of nesting which can lead to what is called callback hell . Error handling becomes difficult in this situation. Hence JavaScript gave us a solution called promises introduced in ES6&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#promise"&gt;
  &lt;/a&gt;
  PROMISE
&lt;/h4&gt;

&lt;p&gt;A promise in JavaScript is like a promise in real life. The promise has two outcomes, which are either the promise is resolved or the promise fails. Let us look at the syntax for creating a promise&lt;br&gt;
We create a variable and set it to a new promise&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let p = new Promise
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This promise is an object and it takes a parameter which is a function. This function takes two parameters which are a resolve and a reject.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let p = new Promise((resolve, reject) =&amp;gt; {

});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to create a definition of the function. We need to define what the actual promise is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let p = new Promise((resolve, reject) =&amp;gt; {
    let x = 2 + 2;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let x = 2 + 2; is what the promise does. If it resolves to true, we resolve the promise&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let p = new Promise((resolve, reject) =&amp;gt; {
    let x = 2 + 2;
    if (x == 4) {
      resolve ('done')  // we can pass in anything we want
    }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if the promise does not resolve the promise rejects&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let p = new Promise((resolve, reject) =&amp;gt; {
    let x = 2 + 2;
    if (x == 4) {
        resolve('done')
    } else {
        reject('error'); //we can also pass anything we want
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is always going to resolve because 2 + 2 = 4 is always going to resolve. If we change the code to be 2 + 3 which will give us 5, the code is going to reject because then x will not be equal to 4. let us now look at how we interact with a promise. Below the code block we can now say&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p.then()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our promise and everything inside the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.then()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is going to run for a resolve. The&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.then()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is going to take a single parameter and in our case it is going to be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p.then(message =&amp;gt; {

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to decide what we want to do with our message, thus we can pass a message to resolve the promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p.then(message =&amp;gt; {
console.log("this is a message" + message);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To catch an error in a promise, we need to add the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.catch()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;method to the promise. It will catch any error in our promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p.then(message =&amp;gt; {
console.log("this is a message" + message);
}).catch(error=&amp;gt;console.log('error'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The promise is fulfilled from the above code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y08_AzUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125349997-099b7980-e313-11eb-9e90-20c7ef8f9b34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y08_AzUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125349997-099b7980-e313-11eb-9e90-20c7ef8f9b34.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is exactly how a promise is used. They are very similar to callbacks but they are a little bit cleaner way of doing callbacks.&lt;br&gt;
Promises are really great when something is to be done in the background.  The error can also be caught if it fails  and a message can be sent if it fails.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#generators"&gt;
  &lt;/a&gt;
  GENERATORS
&lt;/h4&gt;

&lt;p&gt;A generator is a function that can be paused. This will allow the writing of code in an asynchronous fashion. Let us go straight to the syntax. After defining a function, an asteryx is added to the function keyword&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function* car() {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;values can now be yielded and stored into a variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function* car() {
const variable = yield value;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essentially, once that value is resolved or returned from whatever computations performed, it will be stored in a variable. The yield keyword can be used multiple times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function* car() {
const numb2 = yield 2;
const numb3 = yield 3;
const numb4 = yield 4;
const numb5 = yield 5;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and so on. After defining the generator, it needs to be setup to be actually used. We do this by setting the function to a variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const gen = car();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function has been set and it is ready to get all values from the generator. To get the value from the generator we can use a series of methods like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gen.next()
gen.next().value
gen.next().done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;next()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is an object. The object contains a property called values which  represents whatever value that is yielded from the generator. The&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;next().done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is a Boolean that represents whether the generator has simply finished. Let us take an example in code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getNumber = function* () {
    yield 2;
    yield "hello";
    yield true;
    yield { name: "anna" }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use the above function we have created as a generator, assign it to a variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numberGen = getNumber();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the code is is executed, nothing really will happen because we invoked the function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getNumber()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;without traversing it line by line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numberGen = getNumber();
console.log(numberGen.next());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the above code is executed, we will get an object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R2ixbYQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125356662-5c792f00-e31b-11eb-868d-38624f479d74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R2ixbYQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125356662-5c792f00-e31b-11eb-868d-38624f479d74.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The object shows that line one of the generator and that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;next().done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is false. To get the whole value, we can duplicate the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;next()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;function a couple of times&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getNumber = function* () {
    yield 2;
    yield "hello";
    yield true;
    yield { name: "anna" }
};

const numberGen = getNumber();
console.log(numberGen.next());
console.log(numberGen.next());
console.log(numberGen.next());
console.log(numberGen.next());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zQchja2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125357510-95fe6a00-e31c-11eb-9959-a77b25cdc9a9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zQchja2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125357510-95fe6a00-e31c-11eb-9959-a77b25cdc9a9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see that we have a few objects and at the bottom we get a value done: true. which means that our generator has finished traversing the function. &lt;br&gt;
To get the actual value of our generator, we simply append&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.next()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(numberGen.next().value);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WG6BijiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125358570-eaeeb000-e31d-11eb-877d-c0c6f95d7120.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WG6BijiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125358570-eaeeb000-e31d-11eb-877d-c0c6f95d7120.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we get our values. To generate a value when done, simply add a return statement at the end of the function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getNumber = function* () {
    yield 2;
    yield "hello";
    yield true;
    yield { name: "anna" };
    return 'i am done'
};

const numberGen = getNumber();
console.log(numberGen.next().value);
console.log(numberGen.next().value);
console.log(numberGen.next().value);
console.log(numberGen.next().value);
console.log(numberGen.next().value);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Kg25fjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125359388-0b6b3a00-e31f-11eb-8330-25b9846617d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Kg25fjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125359388-0b6b3a00-e31f-11eb-8330-25b9846617d6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Promises can be used along with generators. It is an interesting feature. We will leave that for another day&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#asyncawait"&gt;
  &lt;/a&gt;
  ASYNC/AWAIT
&lt;/h4&gt;

&lt;p&gt;Async/await is JavaScript baking callbacks, promises and generators into a single function. Let us take a look at the async/await syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function logName(name) {
    console.log(name);
}
logName('Anna');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ucBYjiBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125366092-46269f80-e32a-11eb-821f-e62bef322a6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ucBYjiBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125366092-46269f80-e32a-11eb-821f-e62bef322a6b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we get a name 'Anna'. now remove the async keyword from the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; function logName(name) {
    console.log(name);
}
logName('Anna');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We still get the same exact response. We can see that when we have the async keyword appended to the function, we can yield promises inside the function body using the await keyword.&lt;br&gt;
The second thing is that the function returns a promise. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function logName(name) {
    console.log(name);
}
logName('Anna').then(res=&amp;gt; {
    console.log('hello from me' + res);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KBfHIThu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125366751-994d2200-e32b-11eb-9b3c-92effc3fefe9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBfHIThu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125366751-994d2200-e32b-11eb-9b3c-92effc3fefe9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we get a response which is a promise. If we remove the async keyword from the function, we most likely will get an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqDzTtjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125366879-e29d7180-e32b-11eb-96a2-0325e67537f6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqDzTtjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125366879-e29d7180-e32b-11eb-96a2-0325e67537f6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the async keyword let us go inside the function and create a new promise&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
async function logName(name) {
    console.log(name);
    const tranformName = new Promise(function (resolve, reject) {
        setTimeout(() =&amp;gt; {
            resolve(name.toUpperCase())
        }, 2000);
        return name
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can go ahead and use the promise. The way that we use the promise is we can use the keyword called await.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function logName(name) {
    //we can yield promises using await
    const transformName = new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; resolve(name.toUpperCase()), 2000);
    });
    const result = await transformName;
    console.log(result);
    //it returns a promise
    console.log(name);
    return result;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return the actual result after the setTimeout method runs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3vCMMLpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125368394-f5fe0c00-e32e-11eb-859a-3052a7a7b230.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3vCMMLpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/125368394-f5fe0c00-e32e-11eb-859a-3052a7a7b230.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So basically those are the two things you need to know when using the async/await. Whatever is returned from the function ends up being a promise. &lt;/p&gt;

</description>
      <category>callbacks</category>
      <category>promises</category>
      <category>generators</category>
      <category>async</category>
    </item>
    <item>
      <title>Free resources to master algorithms &amp; data structure</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 12 Jul 2021 23:38:37 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/free-resources-to-master-algorithms-data-structure-2nfj</link>
      <guid>https://dev.to/ayabouchiha/free-resources-to-master-algorithms-data-structure-2nfj</guid>
      <description>&lt;p&gt;Hi, this is #day_30 which is the end of the series of data structure and algorithms, we talked about many types of data strucutre (linear and non-linear) such as &lt;a href="https://dev.to/ayabouchiha/stack-data-structure-47ma"&gt;stacks&lt;/a&gt;, &lt;a href="https://dev.to/ayabouchiha/queue-data-structure-2hfg"&gt;queues&lt;/a&gt;, &lt;a href="https://dev.to/ayabouchiha/hash-table-data-structure-3gla"&gt;hash tables&lt;/a&gt;, &lt;a href="https://dev.to/ayabouchiha/your-complete-guide-to-heap-data-structure-20nl"&gt;heaps&lt;/a&gt; ,&lt;a href="https://dev.to/ayabouchiha/linked-list-data-structure-4g7k"&gt;linked list&lt;/a&gt;, additionnaly, we discussed not only sorting algorithms like &lt;a href="https://dev.to/ayabouchiha/merge-sort-algorithm-1l55"&gt;merge sort&lt;/a&gt; and &lt;a href="https://dev.to/ayabouchiha/quick-sort-algorithm-1k72"&gt;quick sort&lt;/a&gt;, but also searching algorithms such as &lt;a href="https://dev.to/ayabouchiha/binary-search-algorithm-32ki"&gt;binary search&lt;/a&gt;, &lt;a href="https://dev.to/ayabouchiha/linear-search-algorithm-31dn"&gt;linear search&lt;/a&gt;, as well as &lt;a href="https://dev.to/ayabouchiha/interpolation-search-algorithm-6nf"&gt;interpolation search&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In this post, I'm going to share with you the most useful and helpful resources to study &amp;amp; master data structure and algorithms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#books-to-learn-data-structure-and-algorithms"&gt;
  &lt;/a&gt;
  Books to learn data structure and algorithms
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The Algorithm Design Manual by Steve S. Skiena&lt;/li&gt;
&lt;li&gt;Introduction to Algorithm by Thomas H. Cormen&lt;/li&gt;
&lt;li&gt;Grokking Algorithms: An illustrated guide for programmers and other curious people by Aditya Bhargava&lt;/li&gt;
&lt;li&gt;Data Structure and Algorithms in Java by Robert Lafore&lt;/li&gt;
&lt;li&gt; Algorithms in a nutshell: A Practical Guide by George T.Heineman&lt;/li&gt;
&lt;li&gt;Data Structures and Algorithms Made Easy&lt;/li&gt;
&lt;li&gt;Algorithms by Sanjoy Dasgupta&lt;/li&gt;
&lt;li&gt;Advanced Data Structures by Peter Brass&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#platforms-and-websites-to-learn-data-structure-and-algorithms"&gt;
  &lt;/a&gt;
  Platforms and websites to learn data structure and algorithms
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/"&gt;Youtube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.edx.org/"&gt;EDx&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.geeksforgeeks.org/"&gt;Geeksforgeeks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.javatpoint.com/"&gt;Javatpoint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.programiz.com/dsa"&gt;Programiz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.tutorialspoint.com/index.htm"&gt;Tutorialspoint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerearth.com/"&gt;Hackerearth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#free-courses-to-learn-data-structure-and-algorithms"&gt;
  &lt;/a&gt;
  Free courses to learn data structure and algorithms
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=BBpAmxU_NQo&amp;amp;t=7s"&gt;Data structure &amp;amp; algorithms for beginners&lt;/a&gt; (1h)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/zg9ih6SVACc"&gt;Intro to data structure from freecodecamp&lt;/a&gt; (3h)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=8hly31xKli0"&gt;Introduction to data structure &amp;amp; algorithms by treehouse&lt;/a&gt; (5h)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=RBSGKlAvoiM"&gt;Data Structures Easy to Advanced Course - Full Tutorial from a Google Engineer&lt;/a&gt; (8h)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=B31LgI4Y4DQ&amp;amp;t"&gt;Data structure using C &amp;amp; C++&lt;/a&gt; (10h)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLBZBJbE_rGRV8D7XZ08LK6z-4zPoWzu5H"&gt;small introduction to data structure and algorithms by CS Dojo&lt;/a&gt; (13 video)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PL_c9BZzLwBRLpDEpYRFXKBN-2ZCsAx0ps"&gt;introduction to data structure and algorithms by Caleb Curry&lt;/a&gt; (17 video)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLIY8eNdw5tW_zX3OCzX7NJ8bL1p6pWfgG"&gt;data structure using C++&lt;/a&gt; (94 video)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtube.com/playlist?list=PLdo5W4Nhv31bbKJzrsKfMpo_grxuLl8LU"&gt;Data structure and algorithms playlist&lt;/a&gt; (112 video)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any additional resources to add to this post let us know in the comments section, please.&lt;/p&gt;

&lt;p&gt;Have an amazing day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.me/AyaBouchiha"&gt;telegram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Inject Javascript to a Site From Chrome Extension</title>
      <author>Gabriel Lazcano</author>
      <pubDate>Mon, 12 Jul 2021 23:23:04 +0000</pubDate>
      <link>https://dev.to/datsgabs/how-to-inject-javascript-to-a-site-from-chrome-extension-3aph</link>
      <guid>https://dev.to/datsgabs/how-to-inject-javascript-to-a-site-from-chrome-extension-3aph</guid>
      <description>&lt;p&gt;Link to original article (recommended): &lt;a href="https://gabriellazcano.com/blog/how-to-inject-javascript-to-a-site-from-chrome-extension/"&gt;https://gabriellazcano.com/blog/how-to-inject-javascript-to-a-site-from-chrome-extension/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I was watching a Twitch streamer struggle trying to do this. So I thought it might help someone out there.&lt;/p&gt;

&lt;p&gt;You can inject javascript code into any site with a chrome extension, with this you can do many things. Like creating new elements and adding them to the DOM or managing events of certain elements, what you can do in your application you can do it when injecting it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manifest-version-3"&gt;
  &lt;/a&gt;
  Manifest version 3
&lt;/h2&gt;

&lt;p&gt;If you want your script to run on a set of pages you have defined, the manifest for your chrome extension which is needed for it to work (you can have a look a the documentation), needs to have some additional elements. content_scripts and host_permissions&lt;/p&gt;

&lt;p&gt;Both the matches and host_permissions should specify match patterns. In this example inject.js only runs whenever the site is google.com, and you have permissions in all the urls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "inject",
    "version": "1.0",
    "manifest_version": 3,
    "content_scripts": [
        {
            "matches": ["*://*.google.com/*"],
            "js": ["inject.js"],
        }
    ],
    "host_permissions": ["&amp;lt;all_urls&amp;gt;"],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example of the code that can be injected. You can add event listeners, get and add elements from the DOM as I mentioned before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function init() {
    const el = document.createElement("input")
    el.setAttribute("type", "checkbox")
    document.body.appendChild(el)
    el.addEventListener("click", (event) =&amp;gt; {
        console.log(event.target.checked)
    })
}

init()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Docker Compose vs Kubernetes Development Tools</title>
      <author>Rich Burroughs</author>
      <pubDate>Mon, 12 Jul 2021 22:32:46 +0000</pubDate>
      <link>https://dev.to/loft/docker-compose-vs-kubernetes-development-tools-3n1f</link>
      <guid>https://dev.to/loft/docker-compose-vs-kubernetes-development-tools-3n1f</guid>
      <description>&lt;p&gt;By Kasper Siig&lt;/p&gt;

&lt;p&gt;When getting started with Docker, many developers quickly turn to &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; to run their applications. Compose offers many advantages, such as having your configuration stored as code, making it easy to maintain and expand upon. Unfortunately, although it &lt;em&gt;is&lt;/em&gt; possible to use Compose with Kubernetes, it's not the recommended approach.&lt;/p&gt;

&lt;p&gt;Devs will often bang their head against the wall trying to make this scenario work when they start using Kubernetes, without knowing that there's a better way. After all, they have become used to Compose and have integrated it deeply into their workflow. It can be hard to let go.&lt;/p&gt;

&lt;p&gt;This article will go over why it's best to leave Compose out of Kubernetes, and give resources to help you with improving your workflow without it. You'll be introduced to tools that will provide you with the same advantages as you would have with Compose traditionally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-docker-compose-in-kubernetes"&gt;
  &lt;/a&gt;
  Avoiding Docker Compose in Kubernetes
&lt;/h2&gt;

&lt;p&gt;So you've started to use Kubernetes with your project, and you're wondering what to do with all of your work in Docker Compose. Rather than having to abandon all of your work and start completely from scratch, it's possible to use a tool like &lt;a href="https://kompose.io/"&gt;Kompose&lt;/a&gt; as a way of converting your &lt;code&gt;docker-compose.yml&lt;/code&gt; files into Kubernetes manifests. Being familiar with Compose, this can give you great insights into how things are mapped into Kubernetes, and act as a starting point for your research into manifests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3iqTSoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af79kcit4hd0o43eykr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3iqTSoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af79kcit4hd0o43eykr6.png" alt='The output of running the "compose convert" command, and then applying that to a Kubernetes cluster with kubectl.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, when you start moving from the learning phase to the production phase, it's important to think about whether you want to keep Compose in your toolchain at all. Even though tools like Kompose exist to help bring Compose into a Kubernetes environment, it's still not considered best practice. Instead, you should consider switching over to using Kubernetes manifests.&lt;/p&gt;

&lt;p&gt;Using Compose in production can be fine initially, and if your goal is to get simple containers deployed, it's not a big deal. That being said, once your cluster starts maturing and your use cases become more complex, you will find that trying to define everything in a &lt;code&gt;docker-compose.yml&lt;/code&gt; is either tough or impossible.&lt;/p&gt;

&lt;p&gt;You'll likely get to a point where you're spending a significant amount of time developing and maintaining &lt;code&gt;docker-compose.yml&lt;/code&gt; files. So much so that it would have been easier to just start over with Kubernetes manifests. This is an important point to consider when deciding whether to use one tool over another. One may be easier initially but perhaps limits the possibilities in the future, or be harder to work with in complex scenarios. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#composes-consequences-and-risks"&gt;
  &lt;/a&gt;
  Compose's Consequences and Risks
&lt;/h2&gt;

&lt;p&gt;By using Compose in Kubernetes, you are limited in functionality. While Compose is a robust tool with a rich feature library, there are many things it cannot do. Objects like CRDs, Jobs, and StatefulSets cannot be created with Compose. Networking is possible, but it can quickly become unwieldy to define it in a &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;There are some technical downsides to the continuing use of Compose, but you will have to also consider the impact on your team, both current and future. Not many people are using Compose in production, so you'll likely struggle to find a new hire that's able to jump right in. There are also features of Compose that are not typically used, which you'll have to get familiar with to configure Kubernetes.&lt;/p&gt;

&lt;p&gt;If you manage to get your engineers to learn and use Compose efficiently, and you're fine with onboarding new people into the toolchain, you may still run into issues. Since not many teams use Compose in production, it can be tough to find guides and tutorials with examples. Many online resources will only include Kubernetes manifests as examples, and from here two things can happen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One option is that the engineer in the team will understand the tutorial and get everything defined in a &lt;code&gt;.yml&lt;/code&gt; file. This way, you'll continue to purely use Compose, but you'll have to carry the cost of engineering time spent converting the Kubernetes manifest. This also means that your engineers understand manifests well enough to convert them to another format, weakening the argument for using Compose. &lt;/li&gt;
&lt;li&gt;The other option is that the example manifest will be used as a Proof of Concept, but it will end up being used in production because of a deadline or other reasons. Now you have a mix of Compose files and Kubernetes manifests, which can quickly lead to confusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will have a tough time integrating with other tools on the market since many tools exist to expand upon existing Kubernetes manifests. Some of these tools help in easing deployment, like Helm. Other tools like Skaffold work with your manifests to run your application in Kubernetes as you work on it. You might find workarounds that allow you to use these tools, but you won't find any official documentation on setting them up. You'll have to maintain these workarounds, and it creates more room for error.&lt;/p&gt;

&lt;p&gt;Finally, you run the risk of having different teams using different tools. Developers may want to use Compose as it's more user-friendly on the surface, and they mostly care about getting the application to run and making optimizations through the code. Ops may want to get deeper into the roots of Kubernetes in ways only possible when using native Kubernetes tools. Typically they care about optimizations in the infrastructure, like networking and load balancing. Using Kubernetes manifests won't guarantee different teams using the exact same tools, but they will have the same common ground.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-options"&gt;
  &lt;/a&gt;
  Other Options
&lt;/h2&gt;

&lt;p&gt;As stated before, there are many tools available to help you work with Kubernetes. Many stick with Compose because it's easy to define containers, networking, and volumes, and that's a fair point. However, tools like &lt;a href="https://skaffold.dev/"&gt;Skaffold&lt;/a&gt;, &lt;a href="https://devspace.sh/"&gt;DevSpace&lt;/a&gt;, and &lt;a href="https://tilt.dev/"&gt;Tilt&lt;/a&gt; exist to make working on code that's meant to run in Kubernetes easier. These tools offer features such as watching your code, automatically building and deploying your application, and much more that's native to Kubernetes. &lt;/p&gt;

&lt;p&gt;These tools can help you transition from a Compose-based approach into something more akin to native Kubernetes. Their sole goal is to make life easier for developers while still using the basis of Kubernetes; manifests. Give them a try and see how they work for you, and whether you can find a way of getting them into your current toolchain. To get started, you can use Kompose as a way of converting your existing &lt;code&gt;docker-compose.yaml&lt;/code&gt; files into Kubernetes manifests. From here, you can either deploy them and get familiar with the deployment process, or you can look into the generated files and try to understand them.&lt;/p&gt;

&lt;p&gt;Whatever tool you choose to go with, the most important thing is that you know why you're using it. Many best practices exist because they're what suits most organizations. However, there will always be outliers, and you may be one of them. You may be in a situation where it indeed does make the most sense to use Compose as your only tool, and that is perfectly acceptable.&lt;/p&gt;

&lt;p&gt;You just need to know why you've chosen to go with the tool that you have, making it possible to reevaluate down the line whether it's still right for you or if you should consider switching to best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;On the surface, it can seem challenging to learn a new tool, and Kubernetes is quite heavy for new users. However, transitioning from Compose to native Kubernetes isn't as complicated as it may seem, and as you've now seen, there are many tools available to assist you with this. Switching to manifests will help you in many ways. Whether you make the switch is up to you, but consider whether it's the right choice and what advantages it can bring to you.&lt;/p&gt;

&lt;p&gt;You can start by converting your &lt;code&gt;docker-compose.yml&lt;/code&gt; to Kubernetes manifests with Kompose. That way you'll be using an application and definition that you're already familiar with instead of starting from scratch with an application you don't know.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@campful?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Campbell&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/train?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Filter array with multiple conditions</title>
      <author>Etamar</author>
      <pubDate>Mon, 12 Jul 2021 21:57:47 +0000</pubDate>
      <link>https://dev.to/itushthegiant/filter-array-with-multiple-conditions-5928</link>
      <guid>https://dev.to/itushthegiant/filter-array-with-multiple-conditions-5928</guid>
      <description>&lt;p&gt;Ive been working on my first "React" project and this project I build is a "Park Browser" which is basically an app that helps you search for a specific national park in USA either by address, city or state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycKjynVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx0aqnebtxw6b9za1u3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycKjynVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx0aqnebtxw6b9za1u3h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was really hard to understand how can I filter through an array with multiple conditions and also pass those conditions from a child component to parent.&lt;br&gt;
Of course I googled it right away and I found it on "stackoverflow" (credit to Narendra Jadhav from stackoverflow).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7IMPw6dF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0b0982gjj8lj9wcfpcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7IMPw6dF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0b0982gjj8lj9wcfpcf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Parent:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl0Lnk1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1twvqm0lzlf7bmjr53yw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl0Lnk1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1twvqm0lzlf7bmjr53yw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Child:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0D-0I2Ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41h71dun58epxhe3cus5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0D-0I2Ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41h71dun58epxhe3cus5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seemed like its working but there was another problem,&lt;br&gt;
If you searched for a park by one of the conditions it worked but if you wanted to use another condition or use a different one it will not change the search, Until i found the "continue" method in JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TyhTXPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxge2wwqwcpd0phjcdzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TyhTXPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxge2wwqwcpd0phjcdzs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is pretty simple what the "continue" method does,&lt;br&gt;
If there are no filters to filter "continue" to the next "if" statement that will show me the parks that I am looking for by filter and if there are no results just return and empty search.&lt;/p&gt;

&lt;p&gt;It helped me a-lot with understanding how to pass data from child to parent and how to use multiple conditions to filter and array.&lt;/p&gt;

&lt;p&gt;I hope this post helped you with your errors,&lt;br&gt;
Good Luck!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Build Java Applications Today: July 12, 2021</title>
      <author>Karsten Silz</author>
      <pubDate>Mon, 12 Jul 2021 21:54:32 +0000</pubDate>
      <link>https://dev.to/ksilz/how-to-build-java-applications-today-july-12-2021-4im4</link>
      <guid>https://dev.to/ksilz/how-to-build-java-applications-today-july-12-2021-4im4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;TIOBE Index July 2021, Spring blesses GraphQL, tuning Hibernate‚Äôs query plan cache, GitHub previews AI coding assistant, Quarkus 2.0.1, Spring Cloud Hoxton.SR12, and a terrible chart.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme"&gt;
  &lt;/a&gt;
  README
&lt;/h2&gt;

&lt;p&gt;This is¬†&lt;strong&gt;issue 44&lt;/strong&gt;¬†of my weekly newsletter, ‚ÄúHow To Build Java Applications Today‚Äù. I read all the Java newsletters, so¬†&lt;strong&gt;you&lt;/strong&gt;¬†don‚Äôt have to! And it‚Äôs ‚ÄúJava news with a smile‚Äù.&lt;/p&gt;

&lt;p&gt;If you like my newsletter, then &lt;a href="https://bpfnl.substack.com"&gt;subscribe to it on Substack&lt;/a&gt;! Or read it on &lt;a href="https://dev.to/ksilz/series/11995"&gt;dev.to&lt;/a&gt;,  the &lt;a href="https://thejavacafe.com/ksilz/series/1"&gt;Java Cafe&lt;/a&gt;, or &lt;a href="https://ksilz.medium.com"&gt;Medium&lt;/a&gt;. Even better: Share it with people who may be interested.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quote-of-the-week"&gt;
  &lt;/a&gt;
  Quote of the Week
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If everything seems under control, you're not going fast enough‚Äå.&lt;/em&gt;&lt;br&gt;
&lt;a href="http://www.quotationspage.com/quote/39999.html"&gt;Mario Andretti&lt;/a&gt;, American race car driver (&lt;a href="https://en.wikipedia.org/wiki/Mario_Andretti"&gt;born 1940&lt;/a&gt;), encourages us to release faster. Or so I think.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#standup"&gt;
  &lt;/a&gt;
  Stand-Up
&lt;/h2&gt;

&lt;p&gt;My host country England &lt;a href="https://www.bbc.co.uk/sport/football/51198762"&gt;lost the European Football Championship to Italy&lt;/a&gt; last night (that‚Äôs soccer for my US readers). Adding insult to injury: The final game &lt;a href="https://en.wikipedia.org/wiki/UEFA_Euro_2020#Final"&gt;was in London&lt;/a&gt;, and England lost in a penalty shoot-out, as they have so often in the past.&lt;/p&gt;

&lt;p&gt;And yes, the United Kingdom has four different football teams: England, Wales, Scotland, and Northern Ireland. Except for Northern Ireland, &lt;a href="https://en.wikipedia.org/wiki/UEFA_Euro_2020#Qualified_teams"&gt;all took part&lt;/a&gt; this time.&lt;/p&gt;

&lt;p&gt;I can relate to the pain: When Germany hosted the Football World Cup in 2006, &lt;a href="https://en.wikipedia.org/wiki/2006_FIFA_World_Cup#Semi-finals"&gt;Italy defeated us Germans&lt;/a&gt; in the semi-final and &lt;a href="https://en.wikipedia.org/wiki/2006_FIFA_World_Cup#Final"&gt;went on to win&lt;/a&gt; (against France, also in a penalty shoot-out). BTW: &lt;a href="https://en.wikipedia.org/wiki/2006_FIFA_World_Cup#Quarter-finals"&gt;England lost&lt;/a&gt; in a penalty shoot-out against Portugal back then‚Ä¶&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#code-review"&gt;
  &lt;/a&gt;
  Code Review
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#issue-42-from-june-28-2021"&gt;
  &lt;/a&gt;
  Issue 42 from June 28, 2021
&lt;/h3&gt;

&lt;p&gt;I &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-ff1"&gt;wrote about the Scala 3 release&lt;/a&gt; - eight years in the making - two weeks ago. Want to hear more? Then listen to &lt;a href="https://javapubhouse.libsyn.com/episode-97-hey-there-scala-3-looking-good-with-those-new-features"&gt;Java Pub House podcast episode 97&lt;/a&gt;! Dean Wampler, the author of the just-published O'Reilly book &lt;a href="https://deanwampler.github.io/books/programmingscala.html"&gt;‚ÄúProgramming Scala‚Äù book&lt;/a&gt;, explains what‚Äôs new in Scala 3.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-ff1"&gt;Two weeks ago&lt;/a&gt;, I also wrote about ‚ÄúJava Applications in the Windows 11 App Store‚Äù. And &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-b5c"&gt;last week&lt;/a&gt;, I told you that you can download a preview. What I forgot to mention is that The Verge, like many other sites, has a &lt;a href="https://www.youtube.com/watch?v=eSajMxAelcc"&gt;video preview of Windows 11&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#bookmarks"&gt;
  &lt;/a&gt;
  Bookmarks
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#tiobe-index-july-2021-java-strikes-back-for-now"&gt;
  &lt;/a&gt;
  TIOBE Index July 2021: Java Strikes Back - For Now
&lt;/h4&gt;

&lt;p&gt;When we last looked at the popular monthly programming language ranking, Python placed ahead of Java two months in a row (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-457"&gt;issue #40&lt;/a&gt;). Well, this month, Java recaptured second place with 11.17%, a hair ahead of Python at 10.95%. But C at the top is only ahead of Python by 0.67%, so expect frequent changes in the first three spots over the next few months.&lt;/p&gt;

&lt;p&gt;The good news: Java can bounce back! The bad news: The long-term trend for Java is ‚Äúdown‚Äù. Check this &lt;a href="https://www.tiobe.com/tiobe-index/java/"&gt;TIOBE graph&lt;/a&gt;: Java fell from 26.5% in June 2001 to 11.2% today, which is a loss of 58%. &lt;/p&gt;

&lt;p&gt;Good news again: Java has a &lt;strong&gt;shrinking&lt;/strong&gt; slice of a &lt;strong&gt;growing&lt;/strong&gt; pie because the number of software developers &lt;a href="https://www.daxx.com/blog/development-trends/number-software-developers-world"&gt;grows every year&lt;/a&gt;. And more good news: In a world of microservices, it‚Äôs easier for us to write our code in Java, even if another team writes their code in Python, TypeScript, or C#.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tiobe.com/tiobe-index/?20210704"&gt;TIOBE Index July 2021&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#frameworks-amp-libraries"&gt;
  &lt;/a&gt;
  Frameworks &amp;amp; Libraries
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#spring-blesses-graphql"&gt;
  &lt;/a&gt;
  Spring Blesses GraphQL
&lt;/h4&gt;

&lt;p&gt;GraphQL a statically typed query language for APIs that has &lt;a href="https://graphql.org/faq/#why-should-i-use-graphql"&gt;advantages over JSON REST APIs&lt;/a&gt;. Spring now integrates GraphQL with a project predictably named &lt;a href="https://spring.io/blog/2021/07/06/hello-spring-graphql"&gt;Spring GraphQL&lt;/a&gt;. It‚Äôs the successor of the &lt;a href="https://www.graphql-java.com"&gt;GraphQL Java project&lt;/a&gt; that has existed for six years.&lt;/p&gt;

&lt;p&gt;No matter if you use Spring or not: An official Spring project lends credibility to GraphQL. So if you already use GraphQL: Good for you! If not: Why not &lt;a href="https://graphql.org/learn/"&gt;learn it&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;A Spring GraphQL 1.0 milestone is available now. The 1.0 release will probably arrive early next year. That‚Äôs why Spring GraphQL will have to wait two more Spring Boot releases before it gets included there - in May 2022, if this year is any indication.&lt;/p&gt;

&lt;p&gt;Talking about Spring Boot: Given the expected version jump of the Spring framework from 5.3 to 6.0 this fall, I thought Spring Boot would follow suit and go from 2.5 to 3.0. Well, I was wrong: The announcement talks about Spring Boot 2.6 and 2.7. üòí&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/07/06/introducing-spring-graphql"&gt;Announcement&lt;/a&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#how-to-tune-hibernates-query-plan-cache"&gt;
  &lt;/a&gt;
  How to Tune Hibernate‚Äôs Query Plan Cache
&lt;/h4&gt;

&lt;p&gt;Chances are, our Java projects use Hibernate to access data sources. Did you know that Hibernate needs to compile queries and store them in a cache with a default size of 2048 entries? I didn‚Äôt either.&lt;/p&gt;

&lt;p&gt;Now, if our application uses more queries, then performance will suffer: Preparing &lt;a href="https://en.wikipedia.org/wiki/Jakarta_Persistence_Query_Language"&gt;JPQL&lt;/a&gt; queries from scratch takes five times as long as using a cached version. And preparing native SQL queries is 50% slower.&lt;/p&gt;

&lt;p&gt;We can fix this with the setting &lt;code&gt;hibernate.query.plan_cache_max_size&lt;/code&gt;. Read the article below for more details on the benchmarks and how you can check and measure Hibernate‚Äôs Query Plan Cache.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thorben-janssen.com/hibernate-query-plan-cache/"&gt;Article&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#github-previews-ai-coding-assistant"&gt;
  &lt;/a&gt;
  GitHub Previews AI Coding Assistant
&lt;/h4&gt;

&lt;p&gt;We humans can screw things up a lot. But if we believe in science-fiction movies like ‚ÄúTerminator 2‚Äù, then we need a machine to truly create a mess. Now here‚Äôs our chance to make a bigger mess in our code than usual: Use a machine to write code!&lt;/p&gt;

&lt;p&gt;The machine I‚Äôm talking about is GitHub Copilot, an ‚ÄúAI pair programmer‚Äù, as GitHub &lt;a href="https://copilot.github.com"&gt;calls it&lt;/a&gt;. In the example, a human enters this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Determine whether the sentiment of text is positive
// Use a web service
async function isPositive(text: string): Promise&amp;lt;boolean&amp;gt; {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the machine writes this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const response = await fetch(`http://text-processing.com/api/sentiment/`, {
    method: "POST",
    body: `text=${text}`,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
    },
  });
  const json = await response.json();
  return json.label === "pos";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Copilot works best with Python, JavaScript, TypeScript, Ruby, and Go. But I assume that Java is among the ‚Äúdozens of languages‚Äù that it also knows.&lt;/p&gt;

&lt;p&gt;So how the heck does this work?&lt;/p&gt;

&lt;p&gt;As the example suggests, the Copilot analyzes comments (English only for now) and method names and then creates the method body. GitHub trained it with - you guessed it - code from GitHub repositories. This works because if we developers excel at something, it‚Äôs expressing succinctly what our code is to do, writing comments, and naming things.&lt;/p&gt;

&lt;p&gt;Haha! Just kidding, of course: We developers typically suck at these three things. If that‚Äôs how the Copilot got trained, then our jobs are safe for now! üòÖ&lt;/p&gt;

&lt;p&gt;There are more questions beyond ‚ÄúDoes it work?‚Äù: Will Copilot add ‚Äú&lt;a href="https://mempko.wordpress.com/2021/06/30/bugs-faster-than-the-speed-of-thought/"&gt;bugs faster than the speed of thought&lt;/a&gt;‚Äù (nice heading)? Or is it the ‚Äú&lt;a href="https://twitter.com/monkchips/status/1410246942156861441"&gt;new Stack Overflow&lt;/a&gt;‚Äù (also a nice one)? Will it add open-source into proprietary projects? Or violate licensing notice requirements of open-source projects?&lt;/p&gt;

&lt;p&gt;I‚Äôm sure that this won‚Äôt be the last we hear of this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/news/2021/07/github-copilot-pair-programmming/"&gt;InfoQ article&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#releases"&gt;
  &lt;/a&gt;
  Releases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#quarkus-201"&gt;
  &lt;/a&gt;
  Quarkus 2.0.1
&lt;/h4&gt;

&lt;p&gt;This first maintenance release of Red Hat‚Äôs modern microservice framework comes one week after 2.0.0 (see last week‚Äôs issue). It‚Äôs a ‚Äúsafe upgrade for anyone already using 2.0.0.Final‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-0-1-final-released/"&gt;Announcement&lt;/a&gt;, &lt;a href="https://github.com/quarkusio/quarkus/releases/tag/2.0.1.Final"&gt;Release notes&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-cloud-hoxtonsr12"&gt;
  &lt;/a&gt;
  Spring Cloud Hoxton.SR12
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://spring.io/blog/2020/04/30/updates-to-spring-versions"&gt;Spring version scheme change&lt;/a&gt; can‚Äôt come soon enough! Why? Because I don‚Äôt want to write slightly bizarre-sounding sentences like ‚ÄúThis will be the last regularly scheduled release of the Hoxton Release Train‚Äù. &lt;/p&gt;

&lt;p&gt;Anyhow, this release is for Spring Boot 2.3.x and 2.2.x. 23 issues got closed this time around.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/07/07/spring-cloud-hoxton-sr12-has-been-released"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#and-now-for-something-completely-different"&gt;
  &lt;/a&gt;
  And Now For Something Completely Different
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#candidate-for-most-terrible-chart-of-the-year"&gt;
  &lt;/a&gt;
  Candidate for ‚ÄúMost Terrible Chart of The Year‚Äù
&lt;/h4&gt;

&lt;p&gt;Charts make it easier to spot important information in a sea of data and can highlight trends. Well, most do. Not &lt;a href="https://twitter.com/antumbral/status/1407861007209222151?s=21"&gt;this CNN one&lt;/a&gt;. Go ahead and spot what‚Äôs wrong with it.&lt;/p&gt;

&lt;p&gt;Did you &lt;a href="https://twitter.com/antumbral/status/1407861007209222151?s=21"&gt;look at it yet&lt;/a&gt;? I‚Äôm waiting.&lt;/p&gt;

&lt;p&gt;Ok, so what did you find?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Although the big title is ‚ÄúViolent crime is a very big problem‚Äù, it doesn‚Äôt report on crime &lt;strong&gt;rates&lt;/strong&gt;. The chart shows &lt;strong&gt;survey&lt;/strong&gt; responses: ‚Äú% of US adults who believe that violent crime is a ‚Äòvery big problem‚Äô‚Äù would have been the correct title.&lt;/li&gt;
&lt;li&gt;The chart goes from right to left.&lt;/li&gt;
&lt;li&gt;Different durations have the same length on the X-axis: 5 months (October 2018 - March 2019), 16 months (March 2019 - June 2020), and 10 months (June 2020 - April 2021).&lt;/li&gt;
&lt;li&gt;The Y-axis doesn‚Äôt start at 0 but at 35%, making the differences seem more significant than they are.&lt;/li&gt;
&lt;li&gt;The margin of error of survey responses is +/-3%, as the fine print below the survey reveals. So the ‚Äú52% in October 2018 vs. 48% in April 2021‚Äù could also be ‚Äú49% in October 2018 vs. 51% in April 2021‚Äù. In other words: Most differences are not statistically significant and don‚Äôt prove anything.&lt;/li&gt;
&lt;li&gt;The one statistically significant change was an 8% drop from 49% in March 2019 to 41% in June 2020. Maybe there is &lt;a href="https://en.wikipedia.org/wiki/COVID-19_pandemic#2020"&gt;an explanation for this&lt;/a&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://twitter.com/antumbral/status/1407861007209222151?s=21"&gt;Tweet with terrible chart&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;Karsten Silz is the author of this newsletter. He is a full-stack web &amp;amp; mobile developer with 22 years of Java experience, author, speaker, and &lt;a href="https://resultsbase.net/event/5809/results/3294285"&gt;marathon runner&lt;/a&gt;. Karsten got a Master's degree in Computer Science at the Dresden University of Technology (Germany) in 1996.&lt;/p&gt;

&lt;p&gt;Karsten has worked in Europe and the US. He co-founded a software start-up in the US in 2004. Karsten led product development for 13 years and left after the company was sold successfully. He co-founded the UK SaaS start-up "&lt;a href="https://yourhomeingoodhands.co.uk/"&gt;Your Home in Good Hands&lt;/a&gt;" as CTO in 2020. Since 2019, Karsten also works as a contractor in the UK.&lt;/p&gt;

&lt;p&gt;Karsten has¬†&lt;a href="https://bpfnl.substack.com/"&gt;this newsletter&lt;/a&gt;, a¬†&lt;a href="https://betterprojectsfaster.com/"&gt;developer website&lt;/a&gt;, and a¬†&lt;a href="https://ksilz.com/"&gt;contractor site&lt;/a&gt;. He's on¬†&lt;a href="https://www.linkedin.com/in/ksilz/"&gt;LinkedIn&lt;/a&gt;,¬†&lt;a href="https://twitter.com/karsilz"&gt;Twitter&lt;/a&gt;, and¬†&lt;a href="https://github.com/ksilz"&gt;GitHub&lt;/a&gt;. Karsten is also an &lt;a href="https://www.infoq.com/profile/Karsten-Silz"&gt;author at InfoQ&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>bpf</category>
    </item>
    <item>
      <title>Build a Chatbot with Vanilla JavaScript</title>
      <author>Emmanuel Ugwu</author>
      <pubDate>Mon, 12 Jul 2021 21:53:22 +0000</pubDate>
      <link>https://dev.to/ugwutotheeshoes/build-a-chatbot-with-vanilla-javascript-5akn</link>
      <guid>https://dev.to/ugwutotheeshoes/build-a-chatbot-with-vanilla-javascript-5akn</guid>
      <description>&lt;p&gt;Recently, I visited a website and while surfing through it, the website‚Äôs chatbot caught my attention. I had been looking for a new project to work on, so I got to researching how I could build a chatbot using vanilla JavaScript. While building this project from scratch I stumbled across a lot of difficulties based on the knowledge I had and when I say 'from scratch', I just mean I did not use any additional libraries or APIs while building. Part of this code is based on existing blog posts, articles, and YouTube videos. Also note that this project is more of an insight into JavaScript fundamentals, not any form of &lt;a href="https://en.wikipedia.org/wiki/Artificial_intelligence"&gt;artificial intelligence (AI)&lt;/a&gt; or machine learning. The main prerequisite for understanding this article is the knowledge of HTML, CSS, and vanilla JavaScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;p&gt;Let‚Äôs create a folder to house our project files, broadly divided into three parts ‚ÄîHTML, CSS and JavaScript. Then we build a barebone HTML file which contains all our HTML components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Chatbot&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Chatbot&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Say something..."&lt;/span&gt; &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôll do the same for our &lt;code&gt;style.css&lt;/code&gt; file to add styling to our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#listening-for-events"&gt;
  &lt;/a&gt;
  Listening for events
&lt;/h1&gt;

&lt;p&gt;First off, we‚Äôll have to check if the content of our page has loaded before our script has a chance to run and we‚Äôll also need a keycode to send a message to the chatbot using our &lt;code&gt;enter&lt;/code&gt; key.&lt;br&gt;
For this to work, an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"&gt;&lt;code&gt;addEventListener&lt;/code&gt;&lt;/a&gt; method is needed. It calls up a function whenever a specified event is delivered to the target. The two events our &lt;code&gt;addEventListener&lt;/code&gt; listens for are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event"&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;&lt;/a&gt; - this event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event"&gt;&lt;code&gt;keydown&lt;/code&gt;&lt;/a&gt; - this event is fired for all keys, regardless of whether they produce a character value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#keyboardevent-code"&gt;
  &lt;/a&gt;
  KeyboardEvent code
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;keydown&lt;/code&gt; event is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code"&gt;&lt;code&gt;KeyboardEvent.code&lt;/code&gt;&lt;/a&gt; property which provides a code indicating which of the user‚Äôs keyboard keys is pressed. For example, a lowercase "a" will be reported as 65 by &lt;code&gt;keydown&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt;. An uppercase "A" is reported as 65 by both events.&lt;br&gt;
With the help of our &lt;code&gt;keydown&lt;/code&gt; event, we can create an effective way of sending a message to the chatbot by pressing the &lt;code&gt;enter&lt;/code&gt; key. Our &lt;code&gt;addEventListener&lt;/code&gt; would listen and respond anytime the &lt;code&gt;enter&lt;/code&gt; key is pressed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet above, &lt;code&gt;e.code === "Enter"&lt;/code&gt; indicates the Keycode 13 directly assigned to the &lt;code&gt;Enter&lt;/code&gt; button. To know more about Keycodes, read up on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent"&gt;&lt;code&gt;KeyboardEvent&lt;/code&gt;&lt;/a&gt; object.&lt;br&gt;
The input value from the user is assigned to a variable which we‚Äôll make use of later on. One last thing to have in mind is to clear or reset our input once our message is sent, &lt;code&gt;.value = ""&lt;/code&gt; makes this possible. We can use &lt;code&gt;.reset()&lt;/code&gt; if our input field was a &lt;code&gt;form&lt;/code&gt; tag but sadly, it isn‚Äôt.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-user-and-chatbot-responses"&gt;
  &lt;/a&gt;
  Creating User and Chatbot responses
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#editing-user-text-input"&gt;
  &lt;/a&gt;
  Editing user text input
&lt;/h2&gt;

&lt;p&gt;Next, we‚Äôll create a function for our chatbot behaviour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//remove all characters except word characters, space, and digits &lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\w\s]&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\d]&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/ a /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;// replaces 'tell me a story' to 'tell me story'&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/i feel /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/whats/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// replaces "whats" to "what is"&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/please /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/ please/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/r u/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//replaces "r u" to "are you"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our user‚Äôs input value need to undergo some changes for our chatbot to understand the message sent by the user as shown above and by doing that we‚Äôll have to apply some JavaScript methods which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"&gt;toLowerCase()&lt;/a&gt; - Converting the input values to lowercase.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;Regex&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#:~:text=The%20replace()%20method%20returns,first%20occurrence%20will%20be%20replaced."&gt;replace()&lt;/a&gt; -  This removes a non word/space character and digit. For example it replaces certain things like &lt;code&gt;whats up&lt;/code&gt; to &lt;code&gt;what is up&lt;/code&gt; or &lt;code&gt;r u&lt;/code&gt; to &lt;code&gt;are you&lt;/code&gt;. If the user says &lt;code&gt;what is going on&lt;/code&gt;, &lt;code&gt;whats going on&lt;/code&gt;, or &lt;code&gt;what's going on&lt;/code&gt;, they will all lead to the same valid bot response.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim"&gt;trim()&lt;/a&gt; - To trim trailing whitespaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-set-of-arrays"&gt;
  &lt;/a&gt;
  Creating a set of arrays
&lt;/h2&gt;

&lt;p&gt;Now that we‚Äôve gotten a good idea of how the user‚Äôs text input would turn out, we‚Äôll have to create a set of arrays which include possible user texts and another array of appropriate chatbot responses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userTexts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;//0 &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;good morning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;good afternoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;good day&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//1&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how is life&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how are things&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how are you doing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you doing good&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you fine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how is your day going&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how is your day&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what's up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whats up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;you good&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//2&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what are you doing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what is going on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what is up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how is your day&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what's up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whats up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;you good&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//3&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how old are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you old&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//4&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;who are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you human&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you bot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you human or bot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//5&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;who created you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;who made you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;were you created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;//0&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Howdy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//1&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fine... and you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pretty well, and you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fantastic, and you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//2&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nothing much&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;About to go to sleep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Can you guess?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I don't know actually&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//3&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am infinite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//4&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am just a bot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a bot. What are you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//5&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The one true God, JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôll need to create an alternate set of arrays for a situation where the chatbot can not understand the message being sent by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alternative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Same&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Go on...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bro...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Try again&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I don't understand :/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can add extra user texts and reponses if needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compare-and-match-user-and-chatbot-responses"&gt;
  &lt;/a&gt;
  Compare and match User and Chatbot responses
&lt;/h2&gt;

&lt;p&gt;Our chatbot function still needs an  &lt;code&gt;IF/ELSE&lt;/code&gt; statement to compare and match our arrays for a suitable reply or produce an alternate reply if we get a user input that does not match our &lt;code&gt;userTexts&lt;/code&gt; array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="c1"&gt;// search for exact match in `userTexts`&lt;/span&gt;
      &lt;span class="nx"&gt;finalResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// if everything else fails, bot produces a random alternative reply&lt;/span&gt;
      &lt;span class="nx"&gt;finalResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;alternative&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;alternative&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// to update our HTML DOM element &lt;/span&gt;
    &lt;span class="nx"&gt;addToChat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;finalResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have to match the user and chatbot arrays to making it look like a conversation between a user and the chatbot. Notice in the code snippet above, if we get a user input that matches an option at userTexts[0] such as ‚Äòhi‚Äô or ‚Äòhello‚Äô, the bot will answer with a corresponding reply from its own set of options from botReplies[0] and so on. Now we‚Äôll add the function that matches these two set of arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;replies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function works like this, we‚Äôll first have to loop through the index of the userTexts array, then we‚Äôll apply another loop to check if our user‚Äôs input text matches any of the responses at that particular index. After checking to see if it matches, we‚Äôll randomly pick a corresponding reply from the set of  botReplies arrays available.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#updating-our-dom-element"&gt;
  &lt;/a&gt;
  Updating our DOM element
&lt;/h1&gt;

&lt;p&gt;Finally we‚Äôll update our HTML DOM (Document Object Model) so our messages can actually display for whenever the user or the chatbot sends a message. Making use of the &lt;code&gt;.appendChild&lt;/code&gt; method, we could create a thread of messages by updating the user and chatbot field every time a message is sent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addToChat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;finalResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;userDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;userDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;userDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/span&amp;gt;
    messagesContainer.appendChild(userDiv)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;botDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;botImg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;botText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;botImg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;avatar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bot response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;botText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Typing...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;botImg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;botText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;messagesContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://youtu.be/watch?feature=player_embedded&amp;amp;v=9RdafdAfS5Q&amp;lt;br&amp;gt;%0A"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1ldcDRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/9RdafdAfS5Q/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click on the image above to watch a demo of our application being tested&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;By following the steps in this article, you can build a chatbot with plain JavaScript.&lt;br&gt;
For better understanding and overview of the code base of this article, you can check it out on &lt;a href="https://github.com/ugwutotheeshoes/chatbot"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>fintech</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How can I run natively 'Big Commerce Stencil CLI' on Apple Silicon M1 Chip</title>
      <author>Caglar</author>
      <pubDate>Mon, 12 Jul 2021 21:45:00 +0000</pubDate>
      <link>https://dev.to/caglaroptimum7/how-can-i-run-natively-big-commerce-stencil-cli-on-apple-silicon-m1-chip-3m1h</link>
      <guid>https://dev.to/caglaroptimum7/how-can-i-run-natively-big-commerce-stencil-cli-on-apple-silicon-m1-chip-3m1h</guid>
      <description>&lt;p&gt;I am a front-end engineer who mostly works on a Bigcommerce platform. &lt;strong&gt;Bigcommerce&lt;/strong&gt; uses a handlebar with the 'stencil command line interface' and it requires 'node version manager' (nvm).&lt;/p&gt;

&lt;p&gt;I switched my Intel Macbook Pro with &lt;strong&gt;M1 Chip Macbook Pro&lt;/strong&gt; then I couldn't realize this migration will be a little bit &lt;strong&gt;ticky.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I installed homebrew then node and nvm packages then I followed the steps on &lt;a href="https://developer.bigcommerce.com/stencil-docs/installing-stencil-cli/installing-stencil"&gt;bigcommerce developer website.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;However, almost every project gives different errors but all of them are related to the 'node' version. I've gotten few-hour research on Google but these were not about BigCommerce 'stencil-cli',&lt;/p&gt;

&lt;p&gt;Jump to 'TL;DR'&lt;br&gt;
Here is the perfect version of the NVM for your delicious Stencil Templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# For ARM based macs // for bash
arch -x86_64 /bin/zsh

# For ARM based macs // for Fish Shell
arch -x86_64 /usr/local/bin/fish

brew install node
brew install nvm

# which is LTS for v12
nvm install 12.13.0
nvm alias default 12.13.0
npm install -g @bigcommerce/stencil-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then start your project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stencil start -o
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ8piFWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/cLqphHM/bigcommerce-stencil-apple-m1-chip-optimum7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ8piFWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/cLqphHM/bigcommerce-stencil-apple-m1-chip-optimum7.png" alt="Current Version Of my NVM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please check out &lt;a href="https://optimum7.com"&gt;our website&lt;/a&gt; to get more information about BigCommerce Development and Marketing.&lt;/p&gt;

&lt;p&gt;Thanks for reading, Happy hacking üß°&lt;/p&gt;

</description>
      <category>bigcommerce</category>
      <category>stencil</category>
      <category>applesilicon</category>
      <category>m1chip</category>
    </item>
    <item>
      <title>Preaction CMS - now with Bootstrap 5!</title>
      <author>Doug Elkin</author>
      <pubDate>Mon, 12 Jul 2021 21:44:15 +0000</pubDate>
      <link>https://dev.to/duhdugg/preaction-cms-now-with-bootstrap-5-5f4n</link>
      <guid>https://dev.to/duhdugg/preaction-cms-now-with-bootstrap-5-5f4n</guid>
      <description>&lt;p&gt;I just released the v5 Alpha of &lt;a href="https://duhdugg.github.io/preaction-cms/"&gt;Preaction CMS&lt;/a&gt;, which now comes with Bootstrap 5. It's an extensible Content Management System built with Express, React, and other simple javascript libraries.&lt;/p&gt;

&lt;p&gt;It should run on just about any environment with Node, Yarn, and Bash.&lt;/p&gt;

&lt;p&gt;Please check it out!&lt;/p&gt;

&lt;p&gt;Submit issues at &lt;a href="https://github.com/duhdugg/preaction-cms/issues"&gt;https://github.com/duhdugg/preaction-cms/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pull requests are welcome at &lt;a href="https://github.com/duhdugg/preaction-cms/pulls"&gt;https://github.com/duhdugg/preaction-cms/pulls&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>react</category>
    </item>
  </channel>
</rss>
