<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>DJANGO WEB DEVELOPMENT IN PYTHON.</title>
      <author>felix715</author>
      <pubDate>Sat, 20 Nov 2021 08:27:53 +0000</pubDate>
      <link>https://dev.to/felix715/django-web-development-in-python-3120</link>
      <guid>https://dev.to/felix715/django-web-development-in-python-3120</guid>
      <description>&lt;h1&gt;
  &lt;a href="#learn-about-the-basics-of-web-development-using-django-to-build-blog-applications-that-have-the-crud-create-read-update-delete-functionality"&gt;
  &lt;/a&gt;
  Learn about the basics of web development using Django to build blog applications that have the (CRUD) Create, Read, Update, Delete functionality.
&lt;/h1&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Django is a widely used free, open-source, and high-level 
  web development framework. It provides a lot of features to 
  the developers "out of the box," so development can be 
  rapid. However, websites built from it are secured, 
  scalable, and maintainable at the same time.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#aim-of-the-article-is-to-build-a-blog-application"&gt;
  &lt;/a&gt;
  Aim of the Article is to build a blog application.
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  The goal of this tutorial is to build a blog application 
  where the blog content can be created and updated through 
  an administration panel. Blog contents are displayed on the 
  page and can be deleted if needed.Overall application 
  provides CRUD(Create,Read,Update,Delete) functionality.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>github</category>
      <category>django</category>
    </item>
    <item>
      <title>Creating your First CRUD Restful API with Node.JS and Hoppscotch</title>
      <author>Unclebigbay</author>
      <pubDate>Sat, 20 Nov 2021 08:13:57 +0000</pubDate>
      <link>https://dev.to/unclebigbay/creating-your-first-crud-restful-api-with-nodejs-and-hoppscotch-4lc7</link>
      <guid>https://dev.to/unclebigbay/creating-your-first-crud-restful-api-with-nodejs-and-hoppscotch-4lc7</guid>
      <description>&lt;p&gt;This full package tutorial is initially posted on Aviyel, an open source community, you can continue reading from the site to support their open source community.  &lt;a href="https://aviyel.com/post/1393/creating-your-first-crud-restful-api-with-node-js-and-hoppscotch"&gt;Click here to read on Aviyel&lt;/a&gt; &lt;/p&gt;



&lt;br&gt;
Hello, my gorgeous friend on the internet üëã,

&lt;p&gt;If you're here and want to know how to build APIs, then you're most welcome, because, in this article, I'll show you the very importance of an API and how to create your first CRUD restful API using Node.JS, Express.js, and Hoppscotch.&lt;/p&gt;

&lt;p&gt;Hey buddy, this is a project-based article, so ensure to stick till the end üòâ.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-we-will-build"&gt;
  &lt;/a&gt;
  What we will build
&lt;/h1&gt;

&lt;p&gt;Straight to the point, we are building a Todo List Backend together!!!&lt;/p&gt;

&lt;p&gt;The reason for this is that todo list is a popular web development project that you might be familiar with, and there's a good chance you‚Äôve used one before or built a todo list interface with HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;So in this article, we'll build a backend API for the popular Todo List project, and at the end of this article, you'll have a basic understanding of how API works and how to build your own APIs.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;But before we get started buddy, let's quickly address the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do we really need APIs in our software?&lt;/li&gt;
&lt;li&gt;Why are we making use of Node JS?&lt;/li&gt;
&lt;li&gt;Why HoppScotch.io?&lt;/li&gt;
&lt;li&gt;What are the CRUD operations?&lt;/li&gt;
&lt;/ol&gt;


&lt;h1&gt;
  &lt;a href="#1-do-we-really-need-apis-in-our-software"&gt;
  &lt;/a&gt;
  1. Do we really need APIs in our Software?
&lt;/h1&gt;

&lt;p&gt;Yes, my friend! We do; an API is a software communication and data exchange interface that allows two applications to communicate and exchange data. For example, a frontend application such as a todo list interface written in React.js, Vue.js, Angular, or Plain HTML, CSS, and JavaScript, can connect and exchange data (such as user information and logic) with a backend application API written in C#, Python, or Node.js.&lt;/p&gt;

&lt;p&gt;One of my favorite importance of using an API for software development is that you can have multiple frontend interfaces for your project backends, such as a Web Version and a Mobile Version while making use of the same API and you don‚Äôt actually need to tamper with the frontend codebase when modifying the backend codebase or vice versa.&lt;/p&gt;



&lt;p&gt;In this tutorial, we'll focus on building the backend of our todo list application, where we'll make use of Node JS to provide a todo list functionality to any frontend technology and all this will be tested using Hoppscotch while Harperdb will serve as our todo list database.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#2-why-are-we-making-use-of-node-js"&gt;
  &lt;/a&gt;
  2. Why are we making use of Node JS?
&lt;/h1&gt;

&lt;p&gt;You must have been using the &lt;code&gt;console.log()&lt;/code&gt; and doing DOM manipulations in your JavaScript code like everyone else in the frontend on your browser, that's okay, that process is called the client-side, but you should know now that the backend application or our APIs does not run on the browser, it runs on the server-side, the question now is how do we execute JavaScript outside of the browser?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#node-to-the-rescue"&gt;
  &lt;/a&gt;
  Node to the rescue!!!
&lt;/h3&gt;

&lt;p&gt;Node or Node.js is an open-source JavaScript backend run-time environment that works outside a web browser, this means that with Node we can write and execute our JavaScript backend code on the server-side, and we can view our &lt;code&gt;console.log&lt;/code&gt; on the Node environment.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be confused, I had demonstrated it somewhere in this article.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-why-hoppscotch"&gt;
  &lt;/a&gt;
  3. Why Hoppscotch?
&lt;/h1&gt;

&lt;p&gt;While building a backend API, we sometimes need to test them in a simple way as possible without any frontend interface, this also allows us to catch bugs as early as possible before pushing to production, this also allows the developers which is us to work independently on the APIs until the frontend guys are ready to consume them.&lt;/p&gt;

&lt;p&gt;But how do we achieve this? Through what is known as API testing tools, these tools are applications that allow us to test if our APIs functionalities are performing as expected before pushing them to production, and one of the good testing tools for API is the HOPPSCOTCH.&lt;/p&gt;

&lt;p&gt;HOPPSCOTCH formally known as the POSTWOMAN is a free super light-weight, web-based, and a progressive web application that allows us to test our API endpoints at any time and from anywhere without any complex configurations.&lt;/p&gt;

&lt;p&gt;HOPPSCOTCH is our official testing tool for this tutorial and we will be using it to test our Todo List APIs throughout this article, you can proceed to checkout how Hoppscotch works by pasting the emoji endpoint below in the Hoppscotch URL box and sending a GET request to the emoji-api endpoint or click &lt;a href="https://emoji-api.com/emojis/grinning-squinting-face?access_key=703a1b02ca24b0c6be3e02a89abb83b61bf07dc1"&gt;here&lt;/a&gt; for a prefilled URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4B9J8MO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630735711052/rdVL6x9k9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4B9J8MO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630735711052/rdVL6x9k9.png" alt="hoppscotch.io homepage" width="880" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool üòé isn‚Äôt it?&lt;/p&gt;

&lt;p&gt;We got a response of a grinning-squinting-face üòÜ from the emoji-API endpoint, Hoppscotch has just saved us the stress of writing JavaScript &lt;code&gt;fetch()&lt;/code&gt; or &lt;code&gt;axios()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Well-done buddy, you‚Äôve now come a very long way already, let‚Äôs proceed to check out what the CRUD operation is all about, let‚Äôs go thereüèÉ‚Äç‚ôÄÔ∏è!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NoMealFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-k1ORhC6_IsE/XmdOqDVKX6I/AAAAAAAAAB4/3ZOOVJEoU9I4DMYXUtd1fh0efqxV-yY2gCLcBGAsYHQ/s1600/crud.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NoMealFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-k1ORhC6_IsE/XmdOqDVKX6I/AAAAAAAAAB4/3ZOOVJEoU9I4DMYXUtd1fh0efqxV-yY2gCLcBGAsYHQ/s1600/crud.jpg" alt="Photo Source: https://www.beta-labs.in/" width="856" height="452"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Before you continue, Aviyel is partnering with  &lt;a href="https://aviyel.com/search?term=hopscotch"&gt;Hoppscotch&lt;/a&gt; to scale open source projects within communities. You can consider continuing this article on  &lt;a href="https://aviyel.com/post/1393/creating-your-first-crud-restful-api-with-node-js-and-hoppscotch"&gt;Aviyel&lt;/a&gt; official website, to support their community. &lt;a href="https://aviyel.com/post/1393/creating-your-first-crud-restful-api-with-node-js-and-hoppscotch"&gt;Click here to continue reading on Aviyel&lt;/a&gt; &lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#4-what-is-the-crud-operations"&gt;
  &lt;/a&gt;
  4. What is the CRUD operations
&lt;/h1&gt;

&lt;p&gt;The CRUD acronym stands for the four main types of SQL commands which are the Create, Read, Update, and Delete commands. These are considered important for the development of a continuous storage application. &lt;/p&gt;

&lt;p&gt;This implies that the CRUD commands allows us to perform some basic operation that enables us to carry out  help us to manipulate data in the database, these operation includes the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creation of new records - Add To-do item&lt;/li&gt;
&lt;li&gt;Reading of existing records - View all To-do items&lt;/li&gt;
&lt;li&gt;Updating of an existing record - Update To-do item&lt;/li&gt;
&lt;li&gt;Deletion of an existing record - Delete Completed To-do item&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hey buddy, now that we know about these technologies and what we‚Äôre going to build with them, tighten your seat belt as we‚Äôre going to implement the above operations in our todo list backend, Now!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeWl-fSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1630826678523_fasten%2Byour%2Bseat%2Bbelt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeWl-fSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1630826678523_fasten%2Byour%2Bseat%2Bbelt.gif" alt="Source: Giphy" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#setting-up-your-node-environment"&gt;
  &lt;/a&gt;
  Setting up your Node environment
&lt;/h1&gt;

&lt;p&gt;In this section, we will be setting up the JavaScript runtime environment earlier on our computer, and to start with kindly ensure to have Node.js installed before you proceed with this section, you can get it installed quickly from here while I wait for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also run &lt;code&gt;node&lt;/code&gt; &lt;code&gt;--&lt;/code&gt;&lt;code&gt;version&lt;/code&gt; to check if you have the updated version installed already.&lt;/p&gt;

&lt;p&gt;Welcome back, now that you‚Äôve installed Node.js on your computer, follow the instructions below to get your Node.js project started.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new folder and name it &lt;code&gt;todo-list-backend&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Open your &lt;code&gt;cmd&lt;/code&gt; or &lt;code&gt;git bash&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install --global yarn&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then run &lt;code&gt;yarn init&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Ignore or provide answers to the questions in the command prompt like below
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JS2L0dS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632059206252_image.png" alt="" width="880" height="177"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can choose to ignore the questions next time by running &lt;code&gt;yarn init -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yarn is a faster alternative to NPM which is a package manager, that allows us to download packages through our &lt;code&gt;cmd&lt;/code&gt; or &lt;code&gt;git bash&lt;/code&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#setting-up-the-server"&gt;
  &lt;/a&gt;
  Setting up the Server
&lt;/h1&gt;

&lt;p&gt;Now that you have the runtime environment setup on your computer, let‚Äôs proceed to install a few more packages on our computer that will help get our server running&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-install-express"&gt;
  &lt;/a&gt;
  1. Install Express
&lt;/h2&gt;

&lt;p&gt;Express is a Node.js framework that provides us with lots of fast features, if Angular is a JavaScript framework, then express is a node.js framework.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add express&lt;/code&gt;  to install express in your project.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-install-nodemon"&gt;
  &lt;/a&gt;
  2. Install Nodemon
&lt;/h2&gt;

&lt;p&gt;Nodemon is a simple script monitoring package that helps us to automatically restart the runtime environment whenever there is a change in our project file, this is like an auto-refresh on a web browser.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add nodemon&lt;/code&gt; to install nodemon in your project.&lt;/p&gt;

&lt;p&gt;Open your &lt;code&gt;package.json&lt;/code&gt; and add the following code to enable &lt;code&gt;nodemon&lt;/code&gt; in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  "start": "nodemon index.js"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;package.js&lt;/code&gt; should look something like below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pkcmTEgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632085846549_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pkcmTEgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632085846549_image.png" alt="" width="880" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-install-cors"&gt;
  &lt;/a&gt;
  3. Install Cors
&lt;/h2&gt;

&lt;p&gt;Because API aids sharing of resources between two applications, we need to set up a mechanism called &lt;code&gt;cors&lt;/code&gt; which allows sharing of resources from two different domains.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add cors&lt;/code&gt; to install cors in your application&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hello-world-response"&gt;
  &lt;/a&gt;
  Hello, World Response
&lt;/h2&gt;

&lt;p&gt;Welcome to the interesting part, to this point we are good to write our first endpoint and to test our setup, we will write an endpoint that responds with the popular Hello, world text to the caller.&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;index.js&lt;/code&gt; file and copy-paste the code below inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import express
const express = require("express");
const app = express();
// set your preferred server port
const port = 3000;
// root endpoint response
app.get("/", (req, res) =&amp;gt; {
  res.send("Hello, World!");
});

app.listen(port, () =&amp;gt; {
  console.log(`Your server ‚ö° is running üèÉ‚Äç‚ôÇÔ∏è on http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;yarn start&lt;/code&gt; and If all goes well, visit or click &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; and you should have the console message in your terminal and Hello, World displayed on your browser screen like below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SulG_vMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632059496687_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SulG_vMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632059496687_image.png" alt="" width="880" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you encounter any error, trace your steps back to this point to figure out what you missed.&lt;/p&gt;

&lt;p&gt;If all works well you can proceed to play around with the code by changing the text response, I will wait for you üòâ.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#we-need-a-database"&gt;
  &lt;/a&gt;
  We need a Database
&lt;/h1&gt;

&lt;p&gt;Yes, we need a database to keep the todo items, and for this tutorial, we will be making use of the Harperdb cloud instance for our todo list application database.&lt;/p&gt;

&lt;p&gt;Follow the instruction below to set up your own Harperdb database&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Head to &lt;a href="https://studio.harperdb.io/sign-up"&gt;https://studio.harperdb.io/sign-up&lt;/a&gt; to create a free account&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJdPvEyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061101942_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJdPvEyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061101942_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On your dashboard click on create new Harperdb cloud instance card&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CtpkkvFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061753946_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtpkkvFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061753946_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fill the instance information form and ensure to keep them safe&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmdj1gTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061888140_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmdj1gTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061888140_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on instance details except you want to upgrade your database&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5rJChFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062167021_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5rJChFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062167021_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that your instance details are correct and proceed to click on the add instance button below the add coupon button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpEfwNDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062263308_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpEfwNDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062263308_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wait for Harperdb to fully create your new instance, it‚Äôs okay if it takes more than 10 minutes even after refreshing, just sip your coffee ‚òï.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3dF28txW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062733977_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dF28txW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062733977_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once it‚Äôs all done, click on the instance card and create a new schema named &lt;code&gt;todos&lt;/code&gt;&lt;br&gt;
Note: A schema is a collection of tables that is also similar to a database in SQL&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfR-Ny_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632063008956_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfR-Ny_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632063008956_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now create a table named &lt;code&gt;items&lt;/code&gt; with a hash attribute of id &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: hash attribute is the unique identifier of each item of todos we will be creating&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rktnKJnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632063166679_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rktnKJnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632063166679_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#connecting-to-harperdb-cloud-database"&gt;
  &lt;/a&gt;
  Connecting to Harperdb Cloud Database:
&lt;/h1&gt;

&lt;p&gt;At this point your Harperdb instance is ready for use, the next thing to do is to install the Node.js Client &lt;code&gt;harperive&lt;/code&gt; package which will allow you to communicate to your Harperdb cloud database from your Node.js application.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add harperive&lt;/code&gt; to install the package in your project.&lt;/p&gt;

&lt;p&gt;Now that you‚Äôve successfully installed &lt;code&gt;harperive&lt;/code&gt; , the next step is to set up Harperdb authentication in your Node.js application, do you remember the instance URL, the admin username, and the admin password you set up while creating your Harperdb instance? That‚Äôs exactly what we need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#securing-your-project-sensitive-details"&gt;
  &lt;/a&gt;
  Securing your project sensitive details
&lt;/h1&gt;

&lt;p&gt;Because of how sensitive these details are, you need to keep the instance URL, username, and password in a secure environment that cannot be accessible by unauthorized people when you push your code to GitHub, the &lt;code&gt;.env&lt;/code&gt; file will serve as a secure environment and the package which will grant you access to this secure details from the Node.js application is the &lt;code&gt;dotenv&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add dotenv&lt;/code&gt; to install the package in your project.&lt;/p&gt;

&lt;p&gt;With all this setup, I can now show you how to connect your Node.js application to your Harperdb cloud instance.&lt;/p&gt;

&lt;p&gt;The first thing to do is to create a &lt;code&gt;.env&lt;/code&gt; file and paste the following snippet inside&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTANCE_URL=YOUR_INSTANCE_URL
INSTANCE_USERNAME=YOUR_INSTANCE_USERNAME
INSTANCE_PASSWORD=YOUR_INSTANCE_PASSWORD
INSTANCE_SCHEMA=YOUR_INSTANCE_SCHEMA (todo)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get your instance URL from the config section on your dashboard, the instance schema is the collection of tables you created earlier, where the instance username and password are the credentials you used while creating your database instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acEbelwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632084125561_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acEbelwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632084125561_image.png" alt="" width="880" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a file name &lt;code&gt;dbconfig.js&lt;/code&gt;  and paste the code below into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('dotenv').config();
const harperive = require('harperive');
const DB_CONFIG = {
  harperHost: process.env.INSTANCE_URL,
  username: process.env.INSTANCE_USERNAME,
  password: process.env.INSTANCE_PASSWORD,
  schema: process.env.INSTANCE_SCHEMA,
};

const Client = harperive.Client;
const db = new Client(DB_CONFIG);
module.exports = db;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since you have dotenv installed then we can make use of &lt;code&gt;process.env&lt;/code&gt; to have access to the variables in the &lt;code&gt;.env&lt;/code&gt; files and also use the harperive package to connect to our Harperdb cloud instance, which you can use to communicate to the database anywhere in your application using the exported &lt;code&gt;db&lt;/code&gt;, I will show you how it‚Äôs done shortly.&lt;/p&gt;

&lt;p&gt;Proceed to import all the packages you have installed in your &lt;code&gt;index.js&lt;/code&gt;, it should look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   // import express
const express = require("express");
const app = express();

//Parse URL-encoded bodies - Allows us to retrieve data from submitted data
app.use(express.urlencoded({ extended: true }));

// import cors
var cors = require("cors");
app.use(cors());

// import the harperdb instance
const db = require("./dbconfig");

// your preferred server port
const port = 3000;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#building-the-todo-list-create-operation"&gt;
  &lt;/a&gt;
  Building the todo list Create Operation
&lt;/h1&gt;

&lt;p&gt;Welcome, this section is where you will learn how to develop the CRUD endpoints (routes) that will allow anyone to create a new todo item in your application.&lt;/p&gt;

&lt;p&gt;Let‚Äôs break this down; in order to achieve this, a user must submit an item through a form, and our todo list will have the following property&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;todo:&lt;/strong&gt; this is what the user wants to do i.e. ‚Äúbuy bread in the evening‚Äù&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;status:&lt;/strong&gt; this is the completion status of a todo item and it is pending by default&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-we-need-to-achieve-this"&gt;
  &lt;/a&gt;
  What we need to achieve this
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create a POST route, that the frontend can send data to, through a form,&lt;/li&gt;
&lt;li&gt;Find a way to retrieve the todo from the form,&lt;/li&gt;
&lt;li&gt;Validate the form submission,&lt;/li&gt;
&lt;li&gt;Prepare the todo and its completion status into a new object,&lt;/li&gt;
&lt;li&gt;Ensure to catch any errors and use asynchronous JavaScript,&lt;/li&gt;
&lt;li&gt;Send the new todo to the Harperdb cloud instance,&lt;/li&gt;
&lt;li&gt;And finally notify the frontend with success or error message&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let‚Äôs write some code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// 1. create your post route that handles creating new todo item
app.post("/add", async (req, res) =&amp;gt; {
  // 2. retrieve the todo from req.body
  // 3. Validate the todo to nsure the user does not submit an empty form
  if (!req.body.todo || req.body.todo === "") {
    res.status(400).send("Todo is required");
  } else {
    // 4. prepare the todo in an object
    const option = {
      todo: req.body.todo,
      status: "pending",
    };
    // 5. ensure to catch the error using try/catch
    try {
      // 6. if the todo is not empty
      const response = await db.insert({
        table: "items",
        records: [option],
      });
      // 7. notify the frontend or sender with the success response
      res.status(200).send(response);
    } catch (error) {
      // 7. notify the frontend or sender with the error response
      res.status(500).send(error);
    }
  }
});

// just a notification in the console
app.listen(port, () =&amp;gt; {
  console.log(`Your server ‚ö° is running üèÉ‚Äç‚ôÇÔ∏è on http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#building-the-todo-list-read-operation"&gt;
  &lt;/a&gt;
  Building the todo list Read Operation
&lt;/h1&gt;

&lt;p&gt;The READ operation is used to retrieve data from the database, and for our todo application, we are going to make use of it to retrieve all the available todo items that have been added from the Create operation endpoint.&lt;/p&gt;

&lt;p&gt;In order to retrieve all the todo items in our Harperdb cloud instance, we need to follow the steps below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a GET route&lt;/li&gt;
&lt;li&gt;Ensure to catch any errors and use asynchronous JavaScript&lt;/li&gt;
&lt;li&gt;Use the query method to select every data from a table&lt;/li&gt;
&lt;li&gt;And finally notify the frontend with success or error message
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// 1. route to retrieve all todos in the database
app.get("/todos", async (req, res) =&amp;gt; {
  // 2. use try/catch to control errors
  try {
    // 3. user query method to get all todo from the database table
    const response = await db.query("SELECT * FROM todos.items");
    // 4. send success message to the frontend
    res.status(200).send(response);
  } catch (error) {
    // 4. send error message to the frontend
    res.status(500).send("something went wrong");
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#building-the-todo-list-update-operation"&gt;
  &lt;/a&gt;
  Building the todo list Update Operation
&lt;/h1&gt;

&lt;p&gt;The UPDATE operation is used to modify or edit data in the database and for our todo list application, a user can decide to change their entry for a todo or update the status of any todo items say from &lt;code&gt;pending&lt;/code&gt; to &lt;code&gt;completed&lt;/code&gt; or as the case might be in the frontend design.&lt;/p&gt;

&lt;p&gt;In order to implement the update operation in our application, the following must be put into check:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a POST route,&lt;/li&gt;
&lt;li&gt;Setup the new todo details in an object (the hash attribute is required),&lt;/li&gt;
&lt;li&gt;Ensure to catch the errors and use async/await,&lt;/li&gt;
&lt;li&gt;Send the new todo to the backend using the update method,&lt;/li&gt;
&lt;li&gt;And finally notify the frontend with success or error message.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// 1. route to update a todo
app.post("/edit", async (req, res) =&amp;gt; {
  // 2. set the updated todo and specify the todo identifier - hash attribute
  const option = {
    id: req.body.id,
    todo: req.body.todo,
    status: req.body.status,
  };
  // 3. use try/catch to control errors
  try {
    // 4. send the updated todo
    const response = await db.update({
      table: "items",
      records: [option],
    });
    // 5. send success message to the frontend
    res.status(200).send(response);
  } catch (error) {
    // 5. send error message to the frontend
    res.status(500).send(error);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#building-the-todo-list-delete-operation"&gt;
  &lt;/a&gt;
  Building the todo list Delete Operation
&lt;/h1&gt;

&lt;p&gt;The DELETE operation allows users to remove unwanted data, and in our todo application, a user should be able to delete/remove completed items from their todo.&lt;/p&gt;

&lt;p&gt;Follow the instructions below to add a delete operation to your backend application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a POST route that expects a parameter in its URL,&lt;/li&gt;
&lt;li&gt;Get the parameter  from the URL parameter,&lt;/li&gt;
&lt;li&gt;Ensure to catch errors and use async/await,&lt;/li&gt;
&lt;li&gt;Use the Harperdb delete method to remove the todo from the database,&lt;/li&gt;
&lt;li&gt;And finally notify the frontend with success or error message.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 1. route to delete a todo using its id
app.post("/delete/:todo_id", async (req, res) =&amp;gt; {
  // 2. get the id from the url parameter
  const { todo_id } = req.params;
  // 3. use try/catch to control errors
  try {
    // 4. Send a delete request to the database
    const response = await db.delete({
      table: "items",
      hashValues: [todo_id],
    });
    // 5. send success message to the frontend
    res.status(200).send(response);
  } catch (error) {
    // 5. send error message to the frontend
    res.status(500).send(error);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-application-with-hoppscotchio"&gt;
  &lt;/a&gt;
  Testing Our Application With HoppScotch.io
&lt;/h2&gt;

&lt;p&gt;Congratulations on getting to the API testing section, you should be proud of yourself, I have created a GitHub git for the complete code of our todo list backend application HERE&lt;/p&gt;

&lt;p&gt;In this section, we will be testing our backend application using hoppscotch.io, head to hoppscotch.io, and follow the instruction below to test along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-add-todo-route-endpoint"&gt;
  &lt;/a&gt;
  Testing the Add Todo Route Endpoint
&lt;/h2&gt;

&lt;p&gt;To ensure that a new todo item sent from the frontend to our backend application will be stored successfully in the database, we need to test the endpoint URL first by pasting the add todo URL &lt;code&gt;http://localhost:3000/add&lt;/code&gt; in the Hoppscotch URL bar as shown below. You can visit here to launch Hoppscotch&lt;/p&gt;

&lt;p&gt;The add endpoint is a post request, select the &lt;code&gt;POST&lt;/code&gt; method from the dropdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-o8Cob9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407094286_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-o8Cob9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407094286_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to add a new todo, select the body menu and select &lt;code&gt;application/json&lt;/code&gt; from the dropdown menu.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;application/json&lt;/code&gt; allows us to send data to the Node.js application from Hoppscotch, which can be retrieved through &lt;code&gt;req.body&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKRunNqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407417240_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKRunNqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407417240_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can post a new todo item by writing an object of the todo item in the Raw Request Body and clicking on the Send button to make your request to the server as shown below.&lt;/p&gt;

&lt;p&gt;Ensure to add quotes around your object properties &lt;code&gt;"&lt;/code&gt;&lt;code&gt;todo&lt;/code&gt;&lt;code&gt;"&lt;/code&gt; and &lt;code&gt;"&lt;/code&gt;&lt;code&gt;Buy bread in the evening&lt;/code&gt;&lt;code&gt;"&lt;/code&gt;, else your test would fail. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Zg5PA5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407846973_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Zg5PA5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407846973_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If all goes well, you should get a success response from the server like this, this shows that our application is able to receive new data posted through the &lt;code&gt;http://localhost:3000/add&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gd5vy2Dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408039851_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gd5vy2Dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408039851_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try to add as many todo items as you want, but ensure that the object key is &lt;code&gt;"&lt;/code&gt;&lt;code&gt;todo&lt;/code&gt;&lt;code&gt;"&lt;/code&gt; or else you will get a 404 response, which is coming from our Node.js validation logic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sdzlWxel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408367544_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sdzlWxel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408367544_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-getread-todo-route-endpoint"&gt;
  &lt;/a&gt;
  Testing the Get/Read Todo Route Endpoint
&lt;/h2&gt;

&lt;p&gt;In this section, I will show you how to retrieve the todo items that are stored in the database. The endpoint URL to get all todo items from the database is &lt;code&gt;http://localhost:3000/todos&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Paste the URL in the Hoppscotch URL bar and send a &lt;code&gt;GET&lt;/code&gt; request to the server.&lt;/p&gt;

&lt;p&gt;You will get a success response with an array of all the todo items that you have added previously, you should also notice that our todo application has more properties than we added initially during the &lt;code&gt;POST&lt;/code&gt; request to the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snARqT9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408559216_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snARqT9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408559216_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;status&lt;/code&gt; property is set for new todo items in our Node.js &lt;code&gt;/add&lt;/code&gt; route while the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;__createdtime__&lt;/code&gt; and the &lt;code&gt;__updatedtime__&lt;/code&gt; are added by the Harperdb database, these are useful when you need to know when an item is been created or last updated, we will be using the &lt;code&gt;id&lt;/code&gt; property in the coming sections&lt;/p&gt;

&lt;p&gt;NOTE: If you encounter any error in this section, it is probably because you‚Äôre not sending a &lt;code&gt;GET&lt;/code&gt; request to the server.&lt;/p&gt;

&lt;p&gt;Testing the Update/Edit Route Endpoint&lt;/p&gt;

&lt;p&gt;In this section, I will show you how to update the record of an item from the database, the URL that we can use to update a todo item on our server is &lt;code&gt;http://localhost:3000/edit&lt;/code&gt; and it only accepts a &lt;code&gt;POST&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;We can update the &lt;code&gt;todo&lt;/code&gt; or its &lt;code&gt;status&lt;/code&gt; and to achieve updating a todo item record in the database, we need to specify in the Raw Request Body the &lt;code&gt;id&lt;/code&gt; of the todo item and which property we want to update.&lt;/p&gt;

&lt;p&gt;You can send a &lt;code&gt;GET&lt;/code&gt; request to the server and copy the &lt;code&gt;id&lt;/code&gt; of the todo you wish to update in the database.&lt;/p&gt;

&lt;p&gt;I will be updating the &lt;code&gt;status&lt;/code&gt; property of the todo item to &lt;code&gt;completed&lt;/code&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--knuF0MLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411091816_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knuF0MLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411091816_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ensure to send a valid &lt;code&gt;id&lt;/code&gt;, else nothing will be updated as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUB-5ceq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411265815_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUB-5ceq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411265815_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Proceed to send a &lt;code&gt;GET&lt;/code&gt; request on your own and see if the data is updated, if the todo item is not updated as expected, you should retrace your steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-delete-route-endpoint"&gt;
  &lt;/a&gt;
  Testing the Delete Route Endpoint
&lt;/h2&gt;

&lt;p&gt;In this section, I will show you how to remove an item from the database, and the URL to achieve this is &lt;code&gt;http://localhost:3000/delete/:id&lt;/code&gt;, this URL is quite different from other routes, it takes in a parameter called &lt;code&gt;id&lt;/code&gt;, which is the id of the todo item you wish to delete.&lt;/p&gt;

&lt;p&gt;The parameters in the route URL are retrieved in the Node.js routes with &lt;code&gt;req.params&lt;/code&gt;, your URL should look something like this &lt;br&gt;
&lt;code&gt;http://localhost:3000/delete/c7f032b1-a4a2-457b-ad50-8bb758a9fc10&lt;/code&gt;, paste the URL in the Hoppscotch URL bar and send a &lt;code&gt;POST&lt;/code&gt; request to the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pq_aof7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411821793_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pq_aof7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411821793_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The server will ignore the Raw Request Body as it only retrieves data sent through the URL parameter and the todo item with the specified &lt;code&gt;id&lt;/code&gt; will be deleted from the database.&lt;/p&gt;

&lt;p&gt;Send a &lt;code&gt;GET&lt;/code&gt; request to fetch the todo items in our database and check the updated items.&lt;/p&gt;

&lt;p&gt;I will receive an empty array in my case because I only have a single todo item which I have also deleted, you will receive other todo items if you have more than two.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oajmUnut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635412284723_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oajmUnut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635412284723_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, you have learned how to set up a Node.js backend project, connect it to a database, write your backend CRUD logic and test it using Hoppscotch an API testing tool, with this knowledge you‚Äôve gained from this reading, you are good to go to kickstart your personal project and also apply it in any other backend project.&lt;/p&gt;

&lt;p&gt;Thanks for reading, I hope to see your comments and the cool things you will build going forward.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-we-installed-for-this-project"&gt;
  &lt;/a&gt;
  What we installed for this project
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;express - Node.js fast framework&lt;/li&gt;
&lt;li&gt;harperive - Helps us to connect our Node.js to Harperdb&lt;/li&gt;
&lt;li&gt;nodemon - Helps us to restart our Node.js server when there‚Äôs a change&lt;/li&gt;
&lt;li&gt;dontenv - Allows us to have access to variables in the &lt;code&gt;dot.env&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;cors - Allows two origins to share resources&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>backend</category>
      <category>node</category>
      <category>express</category>
    </item>
    <item>
      <title>Click label  to choose radio button TailwindCSS's peer class</title>
      <author>thomasvanholder</author>
      <pubDate>Sat, 20 Nov 2021 08:08:20 +0000</pubDate>
      <link>https://dev.to/thomasvanholder/click-label-to-choose-radio-button-tailwindcsss-peer-class-39nb</link>
      <guid>https://dev.to/thomasvanholder/click-label-to-choose-radio-button-tailwindcsss-peer-class-39nb</guid>
      <description>&lt;p&gt;With Tailwind's release of its Just-In-Time compiler, the &lt;code&gt;peer&lt;/code&gt; class has been &lt;a href="https://tailwindcss.com/docs/just-in-time-mode#sibling-selector-variants"&gt;introduced&lt;/a&gt;. The peer class is practical when changing an HTML element's behavior based on a previous sibling's state. Radio buttons chosen by label click are such a use-case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-choose-radio-by-label-click"&gt;How to choose radio by label click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tailwind-peer-class"&gt;Tailwind Peer class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#single-radio-button"&gt;Single radio button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiple-radio-buttons"&gt;Multiple radio buttons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-radio-by-label-click"&gt;
  &lt;/a&gt;
  How to choose radio by label click
&lt;/h2&gt;

&lt;p&gt;A label click will select a radio by matching two attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;radio button: &lt;strong&gt;id&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;label: &lt;strong&gt;for&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-peer-class"&gt;
  &lt;/a&gt;
  Tailwind Peer class
&lt;/h2&gt;

&lt;p&gt;You can add peer behavior by adding two classes to the HTML.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the &lt;code&gt;peer&lt;/code&gt; class to the HTML tag you want to observe the state for.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;peer-checked&lt;/code&gt; class, followed by the desired behavior change, to a sibling element.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#single-radio-button"&gt;
  &lt;/a&gt;
  Single radio button
&lt;/h2&gt;

&lt;p&gt;Let's start with a single radio button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7FNmIyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhrongkmz8a0tz07j77u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7FNmIyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhrongkmz8a0tz07j77u.gif" alt="Single radio" width="800" height="632"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only peer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer_yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-5 bg-white border border-gray-300 rounded-lg cursor-pointer focus:outline-none hover:bg-gray-50 peer-checked:ring-green-500 peer-checked:ring-2 peer-checked:border-transparent"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"answer_yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute hidden w-5 h-5 peer-checked:block top-5 right-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 üëç
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the input radio with a class &lt;code&gt;peer&lt;/code&gt; is chosen, its sibling label and div will change:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The label gets a green border.
Due to &lt;code&gt;peer-checked:ring-green-500 peer-checked:ring-2 peer-checked:border-transparent&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The icon, initially hidden, appears.
Due to &lt;code&gt;peer-checked:block&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#multiple-radio-buttons"&gt;
  &lt;/a&gt;
  Multiple radio buttons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5DVuBq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e18y2g7eh1y6i2i6tgmg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5DVuBq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e18y2g7eh1y6i2i6tgmg.gif" alt="Multiple radio buttons" width="800" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A single radio button does not make much sense, so let's add in 2 other options and display the radio buttons in a grid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-3 gap-x-5 m-10 max-w-md mx-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only peer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer_yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-5 bg-white border border-gray-300 rounded-lg cursor-pointer focus:outline-none hover:bg-gray-50 peer-checked:ring-green-500 peer-checked:ring-2 peer-checked:border-transparent"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"answer_yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute hidden w-5 h-5 peer-checked:block top-5 right-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      üëç
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only peer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer_no"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-5 bg-white border border-gray-300 rounded-lg cursor-pointer focus:outline-none hover:bg-gray-50 peer-checked:ring-red-500 peer-checked:ring-2 peer-checked:border-transparent"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"answer_no"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute hidden w-5 h-5 peer-checked:block top-5 right-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      üëé
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only peer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"maybe"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer_maybe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-5 bg-white border border-gray-300 rounded-lg cursor-pointer focus:outline-none hover:bg-gray-50 peer-checked:ring-yellow-500 peer-checked:ring-2 peer-checked:border-transparent"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"answer_maybe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Maybe&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute hidden w-5 h-5 peer-checked:block top-5 right-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      ü§î
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can combine multiple peer classes into a single document as long as a parent class (in this case, the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) acts as a separator.&lt;/p&gt;

&lt;p&gt;That's it. &lt;/p&gt;

&lt;p&gt;Purposeful radio buttons without any JS or a custom CSS class.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Developing My Own Node CLI Tool! And YOU can Contribute</title>
      <author>The Unfactoring Guru</author>
      <pubDate>Sat, 20 Nov 2021 07:51:41 +0000</pubDate>
      <link>https://dev.to/the_unfactoring_guru/developing-my-own-node-cli-tool-and-you-can-contribute-2164</link>
      <guid>https://dev.to/the_unfactoring_guru/developing-my-own-node-cli-tool-and-you-can-contribute-2164</guid>
      <description>&lt;h2&gt;
  &lt;a href="#i-made-a-cli-tool-and-you-can-contribute"&gt;
  &lt;/a&gt;
  I made a CLI Tool and You Can contribute!
&lt;/h2&gt;

&lt;p&gt;Basically I'm really excited about writing packages. I just created this small tool called bring-me! This basic cli tool just brings you libraries to your current working directory directly from its cdn! You can also add libraries to the repertoir of libraries you have saved for downloading later!&lt;br&gt;
Examples: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;bring-me lib jquery -d /public/js&lt;/code&gt; you will have jquery already integrated in your project!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devasolutions"&gt;
        devasolutions
      &lt;/a&gt; / &lt;a href="https://github.com/devasolutions/bring-me"&gt;
        bring-me
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      NPM CLI tool for delivering common front-end libraries, frameworks, stylesheets, etc. for lightweight and easy development without needing them stored in node_modules or when internet connection could be a problem in the future.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
bring-me&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7c945076bd8d737b17e8ccfc5afc4ac97671a02b47a132bbc348ee68cf30a0b6/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4064657661736f6c7574696f6e732f6272696e672d6d65"&gt;&lt;img src="https://camo.githubusercontent.com/7c945076bd8d737b17e8ccfc5afc4ac97671a02b47a132bbc348ee68cf30a0b6/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4064657661736f6c7574696f6e732f6272696e672d6d65" alt="npm (scoped)"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e9662fa5103a0a1d2a5e6e282ba7cebc3da286ea7e09f68e09e8d8048f79a50f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f4064657661736f6c7574696f6e732f6272696e672d6d65"&gt;&lt;img src="https://camo.githubusercontent.com/e9662fa5103a0a1d2a5e6e282ba7cebc3da286ea7e09f68e09e8d8048f79a50f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f4064657661736f6c7574696f6e732f6272696e672d6d65" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NPM CLI tool for delivering common front-end libraries, frameworks, stylesheets, etc. for lightweight and easy development without needing them stored in node_modules or when internet connection could be a problem in the future.&lt;/p&gt;
&lt;h1&gt;
Install&lt;/h1&gt;
&lt;p&gt;Install globally with NPM
&lt;code&gt;npm install -g @devasolutions/bring-me&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or install in development
&lt;code&gt;npm install --save-dev @devasolutions/bring-me&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
Introduction&lt;/h1&gt;
&lt;p&gt;Bring-me is a CLI tool used to download popular frameworks from there CDNs so that you can use them offline when needed in mostly Front-End Development scenerios&lt;/p&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;p&gt;Bring-me scans a &lt;code&gt;bmconfig.json&lt;/code&gt; file inside the module's directory to get the most popular frameworks and libraries (bootstrap,bulma,jquery,lodash,phaser at the moment).&lt;/p&gt;
&lt;p&gt;bmconfig.json example:&lt;/p&gt;
&lt;div class="highlight highlight-source-json position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;[
  {
    &lt;span class="pl-ent"&gt;"url"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-ent"&gt;"file-name"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jquery.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-ent"&gt;"lib-name"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jquery&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-ent"&gt;"format"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-ent"&gt;"version"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3.6.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  },
  &lt;span class="pl-ii"&gt;...&lt;/span&gt;
]&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;bmconfig.json fields:&lt;/p&gt;
&lt;p&gt;url: (contains the url of the library from cdn)
file-name: (the‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/devasolutions/bring-me"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I need people to help with creating more basic commands, fefactoring, and improving documentation. So anybody is welcome to participate!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Regards&lt;/li&gt;
&lt;li&gt;The unfactoring guru&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>npm</category>
      <category>node</category>
      <category>cli</category>
    </item>
    <item>
      <title>Django RestApis example ‚Äì GET/POST/PUT/DELETE requests to MongoDb database
</title>
      <author>Harry Nguyen</author>
      <pubDate>Sat, 20 Nov 2021 07:44:12 +0000</pubDate>
      <link>https://dev.to/harrynguyen88/django-restapis-example-getpostputdelete-requests-to-mongodb-database-2pop</link>
      <guid>https://dev.to/harrynguyen88/django-restapis-example-getpostputdelete-requests-to-mongodb-database-2pop</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/django-restapis-mongodb-example-django-rest-framework-tutorial"&gt;https://ozenero.com/django-restapis-mongodb-example-django-rest-framework-tutorial&lt;/a&gt;&lt;br&gt;
In this tutorial, we‚Äôre gonna look at way to create Django RestAPIs with Get/Post/Put/Delete requests to interact with MongoDb Database using Django REST Framework.&lt;br&gt;
Read more&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Indefinite Arguments</title>
      <author>lizardkingLK</author>
      <pubDate>Sat, 20 Nov 2021 07:44:03 +0000</pubDate>
      <link>https://dev.to/lizardkinglk/indefinite-arguments-4lpe</link>
      <guid>https://dev.to/lizardkinglk/indefinite-arguments-4lpe</guid>
      <description>&lt;p&gt;When your program needs indefinite number of arguments, and let's say,&lt;/p&gt;

&lt;p&gt;i.  You are not allowed to pass a collection or an array. &lt;br&gt;
ii. You are not allowed to overload methods.&lt;/p&gt;

&lt;p&gt;Using varargs is the best option to use in this case.&lt;/p&gt;

&lt;p&gt;Before varargs was introduced in Java 5, the problem was solved by  allowing to use any of the mentioned two ways above.&lt;/p&gt;

&lt;p&gt;A varargs method can pass indefinite number of arguments with the following method definition. (In here the data type is String and args is the name of the argument)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void someMethod (String... args)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is an use-case that used varargs to solve a problem which involved printing the sum of numbers. &lt;br&gt;
Not allowing to use overloading or passing a collection or an array. &lt;br&gt;
So we use varargs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Add {
    public void add(int... nums) {
        int sum = 0;
        String label = " ";
        for (Integer n: nums) {
            label += n + " ";
            sum += n;
        }
        label = label.trim().replace(" ", "+");
        label += String.format("=%d", sum);
        System.out.println(label);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the context of C# language we change the syntax a little bit.&lt;br&gt;
We add the keyword 'params' to define it is a varargs method.&lt;/p&gt;

&lt;p&gt;It looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void add(params int[] nums)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the same code for above problem in C# language is as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Add {
    public void add(params int[] nums) {
        int sum = 0;
        String label = " ";
        foreach (int n in nums) {
            label += n + " ";
            sum += n;
        }
        label = label.Trim().Replace(" ", "+");
        label += String.Format("={0}", sum);
        Console.WriteLine(label);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Call to your method like below in your main method.&lt;br&gt;
And again -&amp;gt; use any number of arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static void main(String[] args) {
    new Add().add(1, 2, 3);
    new Add().add(1, 2, 3, 4, 5);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about varargs using the following links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/java-varargs"&gt;https://www.baeldung.com/java-varargs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>csharp</category>
      <category>oop</category>
    </item>
    <item>
      <title>Kotlin Array sort(), sortBy(), sortWith()

</title>
      <author>Harry Nguyen</author>
      <pubDate>Sat, 20 Nov 2021 07:28:34 +0000</pubDate>
      <link>https://dev.to/harrynguyen88/kotlin-array-sort-sortby-sortwith-5eop</link>
      <guid>https://dev.to/harrynguyen88/kotlin-array-sort-sortby-sortwith-5eop</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/kotlin-array-sort-sortby-sortwith"&gt;https://ozenero.com/kotlin-array-sort-sortby-sortwith&lt;/a&gt;&lt;br&gt;
In the tutorial, JavaSampleApproach will guide how to sort Kotlin Array by sort(), sortBy() with selector function, and sortWith() with a comparator.&lt;br&gt;
Read more &lt;/p&gt;

</description>
    </item>
    <item>
      <title>PHP isn't dead! Don't be afraid to use it and implement it in your projects...</title>
      <author>ManuTheCoder</author>
      <pubDate>Sat, 20 Nov 2021 07:24:31 +0000</pubDate>
      <link>https://dev.to/manuthecoder/php-isnt-dead-dont-be-afraid-to-use-it-and-implement-it-in-your-projects-2225</link>
      <guid>https://dev.to/manuthecoder/php-isnt-dead-dont-be-afraid-to-use-it-and-implement-it-in-your-projects-2225</guid>
      <description>&lt;p&gt;Ok. Let's get this straight. PHP is not dead. It's not going to die anytime soon. Why? PHP released a new version recently (actually just a few months ago). It exists in more than 80% of all websites. It‚Äôs also used actively by millions of developers. None of that will disappear out of thin air.&lt;/p&gt;

&lt;p&gt;Despite the fact that many new languages flourish every year, I would not hesitate to say that PHP (besides JS) is one of the safest languages in the world in terms of jobs, and will securely guarantee an enormous job market around the world for much longer than 5 years. Here is why.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP adopts new ideas slowly.&lt;/strong&gt; It may sound like a weird reason for a programming language to keep up with the contemporary development trends. In fact, what happens is only proven, polished and time-checked ideas find their way into PHP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP has low entry level.&lt;/strong&gt; This means that it is one of the easiest languages to start coding for newbies ever. Then, once it is adopted by newbies, it often turns out that this language is enough for a lot of people that do not need genius, complex, mathematical and scientific features. Result - they just keep using PHP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Big platforms and companies which use PHP make lots of money every day!&lt;/strong&gt; WordPress, for example, which is made in PHP, is a free framework, but WordPress.com is a commercial WordPress hosting and makes money out of it. Then, there are tens of others like it. Now multiply this business volume by the number of other big PHP projects, like shopping carts, CRMs, issue tracking systems, web analytics...&lt;/p&gt;

&lt;p&gt;And one of the biggest reasons...&lt;br&gt;
&lt;strong&gt;Servers accessibility.&lt;/strong&gt; The cheapest servers / VPS for web projects always support PHP. PHP has one of the lowest minimum requirements to the memory / processor speed.&lt;/p&gt;

&lt;p&gt;Is PHP on the decline? Yes. Is it a crappy programming language? Absolutely. But that doesn‚Äôt mean it‚Äôs going away any time soon.&lt;/p&gt;

&lt;p&gt;Consider COBOL. An almost sixty year old language that‚Äôs horrible by modern standards and has been on the decline for thirty years. Yet it runs our financial infrastructure, and there are still an estimated one million COBOL developers worldwide. Maybe that is what PHP will be like in a couple of decades.&lt;/p&gt;

</description>
      <category>php</category>
    </item>
    <item>
      <title>Adding Continuous Integration with GitHub Actions üõ†</title>
      <author>Luke Nguyen</author>
      <pubDate>Sat, 20 Nov 2021 07:23:33 +0000</pubDate>
      <link>https://dev.to/mqnguyen/adding-continuous-integration-with-github-actions-33hm</link>
      <guid>https://dev.to/mqnguyen/adding-continuous-integration-with-github-actions-33hm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;With &lt;a href="https://dev.to/mqnguyen/static-analysis-tooling-n55"&gt;static analysis tooling&lt;/a&gt; and &lt;a href="https://dev.to/mqnguyen/automated-testing-with-jest-4745"&gt;unit tests&lt;/a&gt; added to the project, it is time to increase the complexity of my project. At the moment, I have written several tests to check on the different functionalities of my program. However, they had to be manually run by executing "npm run test" in the terminal, which will be very tedious if there are a lot of files to test. Additionally, we also need to consider human errors, as there is no way to guarantee that all contributors remember to run the test before committing their code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-a-ci"&gt;
  &lt;/a&gt;
  Choosing a CI
&lt;/h2&gt;

&lt;p&gt;With this in mind, it is to introduce continuous integration (or CI, for short). It allows us to set up a workflow that listens to every time someone introduces new changes, builds the code, and automatically runs tests against it.&lt;/p&gt;

&lt;p&gt;While we have many CI services, such as Azure DevOps, Evergreen, or Jenkins, I'll choose GitHub Actions for this task. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-ci"&gt;
  &lt;/a&gt;
  Setting up the CI
&lt;/h2&gt;

&lt;p&gt;There are different options to set up GitHub Actions. You can either choose to do it manually or choose from numerous templates. My project, &lt;a href="https://github.com/mqnguyen5/mini-ssg"&gt;MINI&lt;/a&gt;, works just fine with the Node.js template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Title of the workflow&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Node.js CI&lt;/span&gt;

&lt;span class="c1"&gt;# Trigger this workflow on push and new PR&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# jobs to run inside this workflows&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# choose a platform to run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# options&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;14.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;16.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# use a preset step to checkout the code &lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="c1"&gt;# use a preset step to setup Node environment&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js ${{ matrix.node-version }}&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="c1"&gt;# preset options&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.node-version }}&lt;/span&gt;
          &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm'&lt;/span&gt;
      &lt;span class="c1"&gt;# command to run&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm test&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After setting up GitHub Actions, I made two pull requests to check if it worked as intended: &lt;a href="https://github.com/mqnguyen5/mini-ssg/actions/runs/1474720001"&gt;One&lt;/a&gt; containing an intentional error and the &lt;a href="https://github.com/mqnguyen5/mini-ssg/actions/runs/1474725084"&gt;other&lt;/a&gt; with the same error fixed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-test-for-others"&gt;
  &lt;/a&gt;
  Writing test for others
&lt;/h2&gt;

&lt;p&gt;After ensuring that the CI was working, I decided to file an issue to Tue's &lt;a href="https://github.com/TueNguyen2911/tue-1st-ssg"&gt;repo&lt;/a&gt; and asked if I could help him test his text to HTML conversion. We worked with each other through Slack and GitHub, with myself taking notes of what he wanted to check and what the expected results should be. After struggling with managing and rebase commits when changing the code based on Tue's review, I was able to merge my &lt;a href="https://github.com/TueNguyen2911/tue-1st-ssg/pull/30#event-5647003435"&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I intend to use continuous integration in additional projects in the future, and it was helpful to understand how it works and how to set it up. It makes collaboration considerably easier because it prevents unintended problems and code-breaking changes.&lt;/p&gt;

&lt;p&gt;Happy coding! üíª&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>How To Move an EBS volume to another region?</title>
      <author>Gurlal Sidhu</author>
      <pubDate>Sat, 20 Nov 2021 07:16:21 +0000</pubDate>
      <link>https://dev.to/gsidhu13/how-to-move-an-ebs-volume-to-another-region-5emd</link>
      <guid>https://dev.to/gsidhu13/how-to-move-an-ebs-volume-to-another-region-5emd</guid>
      <description>&lt;p&gt;Moving volumes across two regions is not permitted, however, creating a snapshot of a volume and then moving to another region is allowed. Let's see how it is done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Launch two instances in different regions( us-east-1 and us-west-1)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a volume in the first region (us-east-1)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to EC2, under Elastic Block Store (left pane), and click on Volumes&lt;/li&gt;
&lt;li&gt;Create volume. The size of this volume would be 10 GB&lt;/li&gt;
&lt;li&gt;Once it is successfully created, you will see its state set to available &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NW36I83V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5czott7gc34unegsyd3l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NW36I83V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5czott7gc34unegsyd3l.jpeg" alt="pic1" width="533" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhQHsaWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o78fjyq9czwc2t5fv2yd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhQHsaWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o78fjyq9czwc2t5fv2yd.jpeg" alt="pic2" width="491" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P7CPJDF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9k08tcdqlfsdra8bb0l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P7CPJDF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9k08tcdqlfsdra8bb0l.jpeg" alt="pic3" width="624" height="60"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Now right on newly created volume and select ‚Äòattach volume‚Äô&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select your instance, leave the device as it is - /dev/sdf and attach. It will take a couple of minutes to attach the volume.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YkDMSCmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb6rpbzvleq94nsfo8a5.jpeg" alt="pic4" width="437" height="130"&gt;
&lt;/li&gt;
&lt;li&gt;Now Connect to your EC2 Instance - either via SSH or connect directly from the portal. I will be connecting from the portal (it will open in another tab).&lt;/li&gt;
&lt;li&gt;First thing first, switch to root user - sudo su&lt;/li&gt;
&lt;li&gt;check if the attached volume is listed -  lsblk
&lt;/li&gt;
&lt;li&gt;New volumes don‚Äôt file system configure, set up a file system for this volume - mkfs -t xfs /dev/xvdf&lt;/li&gt;
&lt;li&gt;Create a mount point for your volume -mkdir gsdata and mount the volume - mount /dev/xvdf /gsdata&lt;/li&gt;
&lt;li&gt;Going to check if I can see all my buckets - aws s3 ls&lt;/li&gt;
&lt;li&gt;Copy files from Testing Vol folder in inpuutbuckgs bucket to /gsdata - aws s3 cp S3://inputbuckgs/TestingVol /gsdata --recursive &lt;/li&gt;
&lt;li&gt;Check moved files - ls -l /gsdata&lt;/li&gt;
&lt;li&gt;Now you could create directories upload files to this volume. I‚Äôll create a test folder and move some files from s3 bucket. &lt;/li&gt;
&lt;li&gt;Before you copy files from the s3 bucket, you will need to configure your AWS profile. I have it already configured.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCfp1Aqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdsn4j8zec02lxglkmsb.jpeg" alt="pic5" width="624" height="132"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uoa_n8zM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljt4jib9m8hei3enuwpw.jpeg" alt="pic6" width="498" height="392"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--353A39gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1ts23u2knrsu4qrx20c.jpeg" alt="pic7" width="498" height="392"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kq2LsfTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7nvgp34afker0h9atgc.jpeg" alt="pic8" width="417" height="155"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8PHvZ9es--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is1i4jlct8jo7kblupf3.jpeg" alt="pic9" width="624" height="117"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgFh19D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0w0mzlrzzs798mdtttg.jpeg" alt="pic10" width="417" height="155"&gt;
&lt;/li&gt;
&lt;li&gt;Now go back to the EC2 portal, and create a snapshot of the volume&lt;/li&gt;
&lt;li&gt;Right-click on the volume and select ‚Äòcreate a snapshot‚Äô, Type in the description on the prompted screen, and create Snapshot &lt;/li&gt;
&lt;li&gt;Go to Snapshots under Elastic Block Store, right-click on this new snapshot, and select copy&lt;/li&gt;
&lt;li&gt;Select the region where you want to copy, add a description, and copy 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-WXWNed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az87sbtonhxrxl2e082f.jpeg" alt="pic11" width="385" height="281"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uhzQ2woR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nflpxzch74y3r8g5pmi.jpeg" alt="pic12" width="445" height="206"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jAbHsAiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thjx2toscabynp7v3f0x.jpeg" alt="pic13" width="462" height="169"&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XuL2RnJ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izphvvuztxrmtxq4anlu.jpeg" alt="pic14" width="443" height="209"&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Go to another region, check your snapshot that you just copied, it could take depending on the size of your snapshot&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right-click on the snapshot and create Volume &lt;/li&gt;
&lt;li&gt;Select the size, type, and region on the prompted screen. Increasing size is ok, but if you try to reduce the size, you may experience data lose 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uB914og4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfiks0n93i78py3od9jz.jpeg" alt="pic15" width="624" height="105"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7GhM9VbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu9b0rkeukmloy75rk3x.jpeg" alt="pic16" width="351" height="243"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pkRKEV-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgxx5x0kd4yuz5rx5okv.jpeg" alt="pic17" width="446" height="263"&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EBS volume has been moved to another region. However, I am going to attach an instance in this region to show you that there was no data lost since the last snapshot &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Attach the volume like we did it above for an instance in us-east-1 region and connect to EC2 Instance &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Please don‚Äôt try to format the file system again, it will delete your data. Just mount the volume here. As you can see here, all the files that were uploaded in the us-east-1 region were available here.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVs9bBPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sc216lw8v8h50bxpmdl.jpeg" alt="pic18" width="536" height="172"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JsY52ueK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycj43xe6yqldptxyorch.jpeg" alt="pic19" width="602" height="161"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfWIKVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vevxdw5yms32932btlrp.jpeg" alt="pic20" width="548" height="85"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZfdHzKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbjmr92hf5adcl37z0fv.jpeg" alt="pic21" width="624" height="385"&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now detach your volumes in both regions, delete volumes and snapshot, and terminate your instance to avoid any charges from AWS&lt;/p&gt;

&lt;p&gt;Use case Scenarios of what we did above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perform a backup of your volume in another region.&lt;/li&gt;
&lt;li&gt;Restore volume in another region from snapshot&lt;/li&gt;
&lt;li&gt;Please Note: you could also create a Snapshot Lifecycle Policy that will create snapshots of your volume hourly, every two or four hours, or daily and retain those snapshots up to desired days. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Java ‚Äì A brief note.</title>
      <author>Mahadev K</author>
      <pubDate>Sat, 20 Nov 2021 07:14:44 +0000</pubDate>
      <link>https://dev.to/mahadev_k/java-a-brief-note-39hc</link>
      <guid>https://dev.to/mahadev_k/java-a-brief-note-39hc</guid>
      <description>&lt;p&gt;Hey everyone, this is just an article portraying some basics of Java. Those who are new to Java, welcome to Java club and those who already know Java just jog your memory üòÄ. &lt;/p&gt;

&lt;p&gt;Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let programmers write once, run anywhere (WORA) - Just Wikipedia stuff but makes sense thoughü§∑‚Äç‚ôÇÔ∏è. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLBq8hP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dew52hbzrhyk6betmo9o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLBq8hP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dew52hbzrhyk6betmo9o.gif" alt="Bored!!!" width="427" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlevel-language"&gt;
  &lt;/a&gt;
  High-Level Language
&lt;/h2&gt;

&lt;p&gt;Those who are new to programming will think what is a high-level language. &lt;br&gt;
So high-level language means a language that can be understood by a human being but not a machine. &lt;/p&gt;

&lt;p&gt;How can we relate this though. We can say like computer speaks language ‚Äúx‚Äù (Assembly language) and we humans speak language ‚Äúy‚Äù (We have so many languages and for programing we prominently use English). Now you might think how computer understands if we know English how will computer understand that?? Here comes our translator. Translator is basically a compiler that converts the high-level language to binaries or assembly languageüé∂. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--semJaZD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cefru87v52curpyw67hg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--semJaZD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cefru87v52curpyw67hg.gif" alt="Oh did you see that movie binaries of matrix" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oop"&gt;
  &lt;/a&gt;
  OOP
&lt;/h2&gt;

&lt;p&gt;Object-oriented programming is programing paradigm based on objects. This will help in increasing the modularity and reusability of code. It is the opposite of procedural programming. &lt;/p&gt;

&lt;p&gt;Basically, an object is a subway wrapper which wraps data(veggies) and methods(taste). So, if you want two types of taste you can order two different wrapper and so you can see the modularity here. This doesn‚Äôt convey the proper meaning but it does make some sense I guess at least for those who love wrappersüåØüåØüåØüåØü•≥ü•≥ü•≥. To be honest I haven't even tasted one of these üòÅ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iraEKCTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgmdlw5usupveqfdpnll.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iraEKCTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgmdlw5usupveqfdpnll.gif" alt="Wrap or not" width="600" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More about class and objects will be covered in the next articlesüí°. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-once-run-anywhere-wora"&gt;
  &lt;/a&gt;
  Write Once Run Anywhere (WORA)
&lt;/h2&gt;

&lt;p&gt;Java is a platform-independent language. But what does that mean?? Java hired an intermediate person who converts the written code to an intermediate code/ set of instructions rather than native machine code, these instructions are then converted to machine code with the help of JVM (Java Virtual Machine). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ztjkWFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7r3wmtzevpvjwfbpfuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ztjkWFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7r3wmtzevpvjwfbpfuc.png" alt="Javac" width="798" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But how this helps?? Once we compile our program usually it will convert to native machine code as I said earlier. So, the code has to be ran in each different machine to generate their specific machine codes for our program. But in case of java, we have to supply the bytecodes only. &lt;/p&gt;

&lt;p&gt;Irrespective of which machine we supply our bytecodes to and if the machine supports JVM it will convert them to native machine code and run the same. &lt;/p&gt;

&lt;p&gt;Now some genius might think what if we can manipulate the bytecode and run them so can we can get some advantages. Sorry man the code will get corrupted bytecode verifier will catch you üòé. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xliLqKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50hg1j87c4rom0m3u1mo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xliLqKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50hg1j87c4rom0m3u1mo.gif" alt="Caught You!!" width="400" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article is going endlessly, so will see you all in the next article until then good bye, take careüôå. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZZ-OMq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/560uozxy0wkrwvm3bciq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZZ-OMq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/560uozxy0wkrwvm3bciq.gif" alt="Happy End!!" width="160" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Code Reviews</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Sat, 20 Nov 2021 07:13:18 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/code-reviews-2n44</link>
      <guid>https://dev.to/okimotomizuho/code-reviews-2n44</guid>
      <description>&lt;p&gt;After I contributed to an internal project, I experienced reviewing 2 pull requests and they were in the repository I contributed to. This project is for an online note for C language in my college, and uses Docusaurus.&lt;br&gt;
üîóRepository: &lt;a href="https://github.com/Seneca-ICTOER/IPC144"&gt;IPC144&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I contributed to the project, I audited and fixed the markdown page and was familiar with each task, so I reviewed the Pull Requests of other students who did it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#review1"&gt;
  &lt;/a&gt;
  Review1.
&lt;/h3&gt;

&lt;p&gt;üîóIssue: &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/95"&gt;https://github.com/Seneca-ICTOER/IPC144/pull/95&lt;/a&gt;&lt;br&gt;
I reviewed Reza9472's work, where he worked on not only the markdown file but also modified css and package.json file. He did a good job but I found some extra spaces similar to how I did it, so I made a comment about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#review2"&gt;
  &lt;/a&gt;
  Review2.
&lt;/h3&gt;

&lt;p&gt;üîóIssue: &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/84"&gt;https://github.com/Seneca-ICTOER/IPC144/pull/84&lt;/a&gt;&lt;br&gt;
I read the markdown file line by line and found an extra comment, so I asked rclee91 to delete it. I wondered if we needed to delete extra indentations in the code blocks because I thought it wasn't user-friendly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjQd3EJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j6hxw9ujhit275hmfn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjQd3EJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j6hxw9ujhit275hmfn8.png" alt="code block and the mobile display" width="880" height="505"&gt;&lt;/a&gt;&lt;br&gt;
I checked C language code format, and the generator fixed the extra indentations, also some other students deleted the indentations in their PR. However, the original course note (&lt;a href="https://ict.senecacollege.ca/~ipc144/pages/content/valid.html"&gt;IPC144&lt;/a&gt;)has the same indentations so I just suggested him to change it.&lt;br&gt;
rclee91 said the indentations are the same for all of the code example in the md file. The owners of the repo didn't say anything, so I was driven by the desire to have all the formatting the same, but decided to overlook it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I experienced getting reviews and also reviewing through this assignment. By comparing what I did with what other people did along the same task, it was helpful to be able to know what I was missing.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>github</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
