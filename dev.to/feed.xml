<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I decided which languages to use for my tech startup</title>
      <author>Kalob Taulien</author>
      <pubDate>Mon, 08 Nov 2021 23:18:30 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/how-i-decided-which-languages-to-use-for-my-tech-startup-1ida</link>
      <guid>https://dev.to/kalobtaulien/how-i-decided-which-languages-to-use-for-my-tech-startup-1ida</guid>
      <description>&lt;p&gt;This is article numero dos (that means number 2) in the series about starting &lt;a href="https://arbington.com/"&gt;Arbington.com&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lets talk about how I decided which languages to use at my startup&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-boils-down-to"&gt;
  &lt;/a&gt;
  What it boils down to...
&lt;/h2&gt;

&lt;p&gt;Simplicity. Efficiency. Community support. And.. do I know it?&lt;/p&gt;

&lt;p&gt;It all boils down to these four things. And most startups probably say this, I get it. I ain't &lt;em&gt;that&lt;/em&gt; unique :P &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplicity"&gt;
  &lt;/a&gt;
  Simplicity
&lt;/h2&gt;

&lt;p&gt;Which language is the easiest to read, write and learn? &lt;/p&gt;

&lt;p&gt;Python. &lt;/p&gt;

&lt;p&gt;Even if you disagree, it's Python. Like, it's just a fact of programming. &lt;/p&gt;

&lt;p&gt;I need code to not become a crazy nest of curly brackets. Something I can hack away at and it maintains it's cleanliness (to some degree). &lt;/p&gt;

&lt;p&gt;It's easy for future developers to pick up and learn quickly, and easy to read through to understand the business logic. &lt;/p&gt;

&lt;p&gt;Plus, there are a lot of Python developers so I'll never be worried about finding a developer (it's the worlds most popular language, officially). &lt;/p&gt;

&lt;p&gt;And! It has an insane ecosystem of packages that lets you install awesome tools super fast. Need to make an API request? Use &lt;code&gt;requests&lt;/code&gt;. Need to parse HTML? Use BeautifulSoup4. This kind of "need &lt;em&gt;x&lt;/em&gt;, use &lt;em&gt;y&lt;/em&gt;" pattern goes on for AGES. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#efficiency"&gt;
  &lt;/a&gt;
  Efficiency
&lt;/h2&gt;

&lt;p&gt;Python is relatively fast. As is JavaScript. Both of which I use &lt;strong&gt;A LOT&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Are they the fastest out there? Heck no. But they are well supported, popular, and &lt;em&gt;fast enough&lt;/em&gt; for what I need. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-support"&gt;
  &lt;/a&gt;
  Community support
&lt;/h2&gt;

&lt;p&gt;I touched on this a little in the &lt;code&gt;Simplicity&lt;/code&gt; section. But having access to packages, libraries and frameworks is very important. &lt;/p&gt;

&lt;p&gt;Don't reinvent the wheel. &lt;/p&gt;

&lt;p&gt;And when you inevitably have questions, are there a sufficient amount of answers available on the web? &lt;/p&gt;

&lt;p&gt;Python ✔️ &lt;br&gt;
JavaScript ✔️ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-i-know-it"&gt;
  &lt;/a&gt;
  Do I know it?
&lt;/h2&gt;

&lt;p&gt;This is the most important part, to be honest. &lt;/p&gt;

&lt;p&gt;Build using languages you know. Don't learn a programming language just to build something new. That's how you write unmaintainable code. &lt;/p&gt;

&lt;p&gt;So, I built using what I know. But I also know other languages, so I also chose what was simple and easy for future developers to pick up after me. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-this-important-to-you"&gt;
  &lt;/a&gt;
  Why is this important to you?
&lt;/h2&gt;

&lt;p&gt;You're going to see lots of companies showing off their tech stacks and you'll be pulled in 100 different directions with no idea what to learn. &lt;/p&gt;

&lt;p&gt;Pick a language, learn it, then apply for those jobs (if you're looking for a job). You can't be the perfect dev for every company, ever. Just do what you can, and see which jobs exist for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-languages-and-other-things-do-we-use"&gt;
  &lt;/a&gt;
  So what languages (and other things) do we use?
&lt;/h2&gt;

&lt;p&gt;Remember the above because I'm going to blow your mind with one of these. &lt;/p&gt;

&lt;p&gt;Here is what we use: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML/CSS/JavaScript (because that's what 100% of all websites use) &lt;/li&gt;
&lt;li&gt;jQuery. Not React.js. React is awesome! But it's slow to code when your company is moving at the speed of light. Told you - mind blown yet!?&lt;/li&gt;
&lt;li&gt;Tailwind CSS. It's awesome once you learn about it and how it works. Truly, it's powerful. We wrote like 50 lines of custom CSS, the rest is all in the &lt;code&gt;class=""&lt;/code&gt; attribute. &lt;/li&gt;
&lt;li&gt;Python. Because it's powerful, simple, etc. &lt;/li&gt;
&lt;li&gt;Django. It's a batteries included framework that lets you get a lot done with very little code, and it's super secure (and open source!) &lt;/li&gt;
&lt;li&gt;PostgresQL. Just needed a database, and Postgres is a world class database and it's also the one Django devs prefer. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, we use jQuery. Why? It's simple, we know it inside and out, it's fast to develop with and the barrier to entry is incredibly low. And it's a wee bit less typing than vanilla JS with cross browser compatibility. But we'll eventually move to something else like Vue or React, I'm sure. &lt;/p&gt;

&lt;p&gt;In the next article I'll highlight which frameworks and libraries we use, and why. &lt;/p&gt;

</description>
      <category>startup</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Day 3 of #100daysofcode: React-bootstrap Components</title>
      <author>Ryan Whelchel</author>
      <pubDate>Mon, 08 Nov 2021 23:07:24 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-3-of-100daysofcode-react-bootstrap-components-49gn</link>
      <guid>https://dev.to/rydwhelchel/day-3-of-100daysofcode-react-bootstrap-components-49gn</guid>
      <description>&lt;p&gt;Have you ever been working in a new language and right when you start feeling confident, you realize that something you've been using does not function &lt;em&gt;at all&lt;/em&gt; the way you thought it did? Let me walk you through today's journey of how some capital letters caused me to forget React worked. Or maybe it was the lower-cased letters. It was probably a combination&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Today I played around with React-bootstrap components a bit like a kid in a sandbox. I threw some components at my app with no real thought for design, I just tried to see how they ticked.&lt;/p&gt;

&lt;p&gt;While messing around with components, I decided to fix my input method for &lt;code&gt;artist IDs&lt;/code&gt; in my song display app. The only problem was that I was trying to use React-bootstrap-styled input boxes, and that cause significantly more confusion than it probably should have. More on this later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learned-about-the-components"&gt;
  &lt;/a&gt;
  What I've learned about the components
&lt;/h2&gt;

&lt;p&gt;I think the biggest hurdle today was learning about how to pass arguments to the components. More specifically, it was learning which arguments you &lt;em&gt;can&lt;/em&gt; pass to them. As someone with limited React/JS experience, seeing React-components immediately made me think that I should try and figure out which arguments they expect to see. Components feel sort of like classes or methods from other languages; you import them because they have their own logic you want to use (and reuse) that logic. Classes and methods expect certain input or constructors, and &lt;em&gt;won't accept&lt;/em&gt; other types of input that they don't handle. While I think this is still probably the case for React components, what I didn't realize is that there are so many global arguments that are applicable. That is to say: just because it isn't explicitly listed in the React-bootstrap API for that component &lt;em&gt;doesn't mean&lt;/em&gt; it isn't applicable.&lt;/p&gt;

&lt;p&gt;Let me give you an example: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ev8_cbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bte7knm9q1s63neven11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ev8_cbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bte7knm9q1s63neven11.png" alt="React-bootstrap API example" width="880" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above is an example of &lt;code&gt;InputGroup&lt;/code&gt; from React-bootstrap's documentation. Being how I am, I decided to copy-paste this code and immediately jump into trying to use it to figure out its quirks. &lt;/p&gt;

&lt;p&gt;The very first question I decided to try and solve was: how do I access this input and make it useful? Looking at this component, it appears that the text value is stored in the &lt;code&gt;id&lt;/code&gt; &lt;code&gt;"basic-addon1"&lt;/code&gt;, because that's the ID of the InputGroup's Text! Wrong, it's just a decorator that is showing an &lt;code&gt;@&lt;/code&gt; before the text box. What else can it be?&lt;/p&gt;

&lt;p&gt;Unfortunately from here, I got really into the weeds and started messing with things that were not helpful. To not dwell on this too much, I'll just list them out real quick. I researched &lt;code&gt;aria-label&lt;/code&gt; and &lt;code&gt;aria-describedby&lt;/code&gt; hoping to be able to use them to reference the &lt;code&gt;input&lt;/code&gt; value. My conclusion on the &lt;code&gt;aria&lt;/code&gt; values is that you &lt;em&gt;may&lt;/em&gt; be able to use them to access the text input, but it really seemed like overkill for the scope of my project. Next I attempted using &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;inputRef&lt;/code&gt; to access the input values. Again, I ran into a lot of trouble implementing any sort of way to access the data, even though I found a &lt;a href="https://stackoverflow.com/questions/41085220/how-to-get-an-input-value-using-refs-in-react-bootstrap-form"&gt;bunch&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/45194498/get-value-of-input-text-with-react-bootstrap"&gt;of&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/45194498/get-value-of-input-text-with-react-bootstrap"&gt;Stackoverflow&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/60917459/react-bootstrap-how-to-get-value-of-form-control"&gt;answers&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;One answer would say that you should use &lt;code&gt;inputRef&lt;/code&gt; instead of &lt;code&gt;ref&lt;/code&gt; to access the data, others would say to use &lt;code&gt;ref&lt;/code&gt; instead of &lt;code&gt;inputRef&lt;/code&gt;. Many answers seemed sure that you should create a new component class to contain the &lt;code&gt;InputGroup&lt;/code&gt; and &lt;code&gt;FormControl&lt;/code&gt;, however it felt like a very odd way to handle accessing the input. Why would you import an &lt;code&gt;InputGroup&lt;/code&gt; component into another component, just to get the value of the text?&lt;/p&gt;

&lt;p&gt;So after stubbornly trying to get to the bottom of these React-bootstrap components and why they were so much more complicated, I decided to take a break and just read some more tutorials on general React.&lt;/p&gt;

&lt;p&gt;One of the very first things I found was using &lt;code&gt;getElementById&lt;/code&gt; and I nearly facepalmed. &lt;code&gt;getElementById&lt;/code&gt; was one of the very first things I learned about in React, I used it to retrieve data being sent up from my Python Flask server.&lt;/p&gt;

&lt;p&gt;I decided to stick with the tutorial a little bit longer, and they introduced an argument that I had not seen before:&lt;code&gt;onChange&lt;/code&gt;. In 10 minutes of learning about basics,I learned two solutions to a problem that I had spent the better part of an hour trying to solve.&lt;/p&gt;

&lt;p&gt;Quickly summarizing the solution, I can use &lt;code&gt;onChange={(e)=&amp;gt;...}&lt;/code&gt; to retrieve the text every time it changes, or I can simply set &lt;code&gt;id="uniqueId"&lt;/code&gt; and retrieve it elsewhere using `document.getElementById("uniqueId").value. &lt;/p&gt;

&lt;p&gt;What makes this worse is that I &lt;em&gt;already knew this&lt;/em&gt;. I have used them in the past on html-style forms in React. Whenever the React-bootstrap components entered the picture, its like I forgot everything I already learned! Doh.&lt;/p&gt;

&lt;p&gt;The bright-side of all of this is that I feel I have a much greater grasp of how these components resolve themselves in the bigger picture.&lt;/p&gt;

&lt;p&gt;The downside is that I think my app has gotten much uglier than it was before. It gets worse before it gets better I guess!&lt;/p&gt;

&lt;p&gt;On the way out, I'll quickly go over a list of the components I've implemented into my page so far: ListGroup, InputGroup, Form, Buttons and Alerts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here's a quick list of what I did today:&lt;br&gt;
Read through some of the React-bootstrap documentation&lt;br&gt;
Implemented a few React-bootstrap components into my app&lt;br&gt;
Struggled through some input and state shenanigans (above)&lt;br&gt;
Began creating the UI for a group project I'm working on&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I have much less time tomorrow to work on things, so I will likely have a much shorter update. I probably will look into some CSS styling tomorrow and see how to shape my page a little better. I was going to do that today, but I think learning the components that fit &lt;em&gt;into&lt;/em&gt; the shape makes more sense to learn first. I think I'm going to try to utilize Grid and Flexbox from CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm struggling on
&lt;/h2&gt;

&lt;p&gt;Right now I'm struggling on the crossroads between CSS and React. HTML and CSS feels fairly simple in comparison to React and CSS. There's odd syntax (such as &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;) and other interactions I'm not quite used to yet. I imagine it will make more sense once I try it out more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-of-this-challenge"&gt;
  &lt;/a&gt;
  Future of this challenge
&lt;/h2&gt;

&lt;p&gt;Following the first couple days of this challenge, I think it might be a good idea to have a quick section that's dedicated to briefly describing what I'm struggling on, hence above. I think in general, I'm going to shape my blogs as followed:&lt;br&gt;
In-depth Discussion (Optional)&lt;br&gt;
Today&lt;br&gt;
Tomorrow&lt;br&gt;
What I'm Struggling on&lt;/p&gt;

&lt;p&gt;I may not always have time to type out some kind of in-depth discussion, or maybe I won't always have something to say about what I worked on that day. So I won't try and force it, I'll just include it if I really have something to share. I imagine if things go perfectly, I probably won't be sharing a whole lot, so take no discussion as a good thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations?
&lt;/h2&gt;

&lt;p&gt;If you're reading this and you're thinking: "Hey this guy is missing this really obvious thing..." You're probably right! If that's you, please share it's greatly appreciated&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-and-suggested-readingwatching"&gt;
  &lt;/a&gt;
  Resources and Suggested Reading/Watching
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;React JS Crash Course 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="https://react-bootstrap.github.io/"&gt;React-bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.theodinproject.com/paths/full-stack-javascript/courses/javascript/lessons/state-and-props"&gt;React JS - The Odin Project&lt;/a&gt; (Thank you &lt;a class="mentioned-user" href="https://dev.to/rammina"&gt;@rammina&lt;/a&gt;
 for the suggestion!)&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Typescript Example #2.</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 08 Nov 2021 22:48:24 +0000</pubDate>
      <link>https://dev.to/baenencalin/typescript-example-2-42n1</link>
      <guid>https://dev.to/baenencalin/typescript-example-2-42n1</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// An example of using generics in a type union.&lt;/span&gt;
&lt;span class="c1"&gt;// A compact version of my Option&amp;lt;T&amp;gt; type from&lt;/span&gt;
&lt;span class="c1"&gt;// "Typescript Example #1." (https://dev.to/baenencalin/typescript-example-1-ia3).&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>programming</category>
      <category>watercooler</category>
      <category>typescript</category>
    </item>
    <item>
      <title>GitHub Actions: Build Your First Workflow</title>
      <author>Rizel Scarlett</author>
      <pubDate>Mon, 08 Nov 2021 22:37:46 +0000</pubDate>
      <link>https://dev.to/github/github-actions-build-your-first-workflow-2m34</link>
      <guid>https://dev.to/github/github-actions-build-your-first-workflow-2m34</guid>
      <description>&lt;h2&gt;
  &lt;a href="#github-actions-what-is-it"&gt;
  &lt;/a&gt;
  Github Actions: What is it?
&lt;/h2&gt;

&lt;p&gt;GitHub Actions is a tool that conveniently enables you to automate custom workflows inside of your GitHub repository. There is a marketplace filled with already-made actions created by developers around the world that you can use. However, if you’re not able to find an Action for your use-case, you can create your own. And if you want to, feel free to share it on GitHub Marketplace to improve the lives of other developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-workflow"&gt;
  &lt;/a&gt;
  What is a workflow?
&lt;/h2&gt;

&lt;p&gt;In the above paragraph, I mentioned that GitHub Actions allows you to automate custom workflows, but what is a workflow? A workflow is a configurable, automated process. Each workflow is written in a YAML (Yet Another Markup Language) file using YAML syntax. All workflows can be triggered by events that happen within or to your repository. Examples of events that happen within your repository include: a push or pull request. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actions-vs-workflow-whats-the-difference"&gt;
  &lt;/a&gt;
  Actions vs. Workflow: What's the difference?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The definitions seems pretty similar, so what is the difference?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer is that you can use an action &lt;em&gt;IN&lt;/em&gt; a workflow!&lt;/p&gt;

&lt;p&gt;Actions are standalone commands that are combined into steps to create a job. Actions are the smallest portable building block of a workflow. You can create your own actions, or use actions created by the GitHub community. To use an action in a workflow, you must include it as a step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-actions"&gt;
  &lt;/a&gt;
  Useful Actions
&lt;/h2&gt;

&lt;p&gt;Developers often find themselves doing tedious tasks that take away from their productivity. Here are some actions I've used in the past that helped me immensely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/marketplace/actions/deploy-to-github-pages"&gt;Deploying to GitHub Pages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/marketplace/actions/s3-sync"&gt;Syncing a directory to an AWS S3 bucket&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/marketplace/actions/npm-publish"&gt;Re-publishing NPM packages on release&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mtfoley/pr-compliance-action"&gt;Checking that a PR meets the basic requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-create-my-first-workflow"&gt;
  &lt;/a&gt;
  How do I create my first workflow?
&lt;/h2&gt;

&lt;p&gt;To write your own workflow for GitHub Actions, create a directory at the root of your project called &lt;code&gt;.github/workflows/&lt;/code&gt;. Inside the directory is where you will store your workflows. Each workflow file should end with the extension &lt;code&gt;.yml&lt;/code&gt; indicating that it's written using YAML syntax. &lt;/p&gt;

&lt;p&gt;Follow GitHub's written &lt;a href="https://docs.github.com/en/actions/quickstart"&gt;tutorial&lt;/a&gt; to build your very first action in 5 minutes. &lt;/p&gt;

&lt;p&gt;If you want to learn more, you can read about &lt;a href="https://blackgirlbytes.dev/how-to-sync-an-s3-bucket-with-github-actions"&gt;my personal experience&lt;/a&gt; setting up a workflow to sync a directory to an AWS S3 bucket.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-github-actions-hackathon"&gt;
  &lt;/a&gt;
  Join the GitHub Actions Hackathon
&lt;/h2&gt;

&lt;p&gt;From now until December 8th, GitHub is running a Hackathon. By participating, you have the chance to win gift cards and swag. The challenge is to create and submit a workflow leveraging already &lt;a href="https://github.com/marketplace?type=actions"&gt;existing actions&lt;/a&gt;. GitHub Marketplace currently has over &lt;a href="https://github.blog/2021-10-21-github-marketplace-welcomes-its-10000th-action/#:~:text=Celebrating%20the%20power%20of%2010%2C000%20actions&amp;amp;text=Linting%2C%20testing%2C%20and%20validating%20code,Connecting%20to%20third%2Dparty%20services"&gt;10,000 actions&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Read &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;here&lt;/a&gt; to learn more about participating in the hackathon.&lt;/p&gt;

&lt;p&gt;And if you need any help regarding actions, I'll be available to answer questions in this &lt;a href="https://dev.to/devteam/github-actions-hackathon-2021-help-thread-1lk0"&gt;thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Comment below and tell me some of your favorite actions! I'm curious!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Five common causes for flaky tests and what you can do about them</title>
      <author>Spriha B. Tucker</author>
      <pubDate>Mon, 08 Nov 2021 22:20:24 +0000</pubDate>
      <link>https://dev.to/sprihatucker/five-common-causes-for-flaky-tests-and-what-you-can-do-about-them-2ej7</link>
      <guid>https://dev.to/sprihatucker/five-common-causes-for-flaky-tests-and-what-you-can-do-about-them-2ej7</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hm2P5MgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4r245jnm7ttuiwn5hf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hm2P5MgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4r245jnm7ttuiwn5hf4.png" alt="FlakyBot Test History showing flaky test runs" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-flaky-tests-and-why-do-they-happen"&gt;
  &lt;/a&gt;
  What are flaky tests and why do they happen?
&lt;/h1&gt;

&lt;p&gt;Flaky tests are non-deterministic tests in your test suite. They may be intermittently passing or failing, making test results unreliable.&lt;/p&gt;

&lt;p&gt;Why are flaky tests bad?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developer productivity goes down as test results become inaccurate and trust in the test-suite decreases.&lt;/li&gt;
&lt;li&gt;Multiple, unrelated commits cause similar errors, making maintenance difficult.&lt;/li&gt;
&lt;li&gt;Legitimate issues may get ignored due to a high number of false positives.&lt;/li&gt;
&lt;li&gt;Repetitive work is required to determine if bugs exist at all.&lt;/li&gt;
&lt;li&gt;Diagnostics time increases as errors can be in the test or code.&lt;/li&gt;
&lt;li&gt;User dissatisfaction due to bugs ending up in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at five common causes for flaky tests showing up in your build pipeline and what you can do about them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-shared-state-resources-between-tests"&gt;
  &lt;/a&gt;
  1. Shared state resources between tests
&lt;/h1&gt;

&lt;p&gt;One of the common reasons why tests do not find bugs is concurrency. They occur because developers may have made incorrect assumptions about the ordering of operations between threads. One test thread might be assuming a state for shared resources like data or memory.&lt;/p&gt;

&lt;p&gt;For example, test 2 might assume test 1 passes and use test 1’s output as an input for itself. Or test 2 might assume that test 1 leaves a data variable in state x, but test 1 may not always do that – causing test 2 to fail. Tests can also be flaky if they do not correctly acquire and release shared resources between them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use synchronization blocks between tests.&lt;/li&gt;
&lt;li&gt;Change the test to accept a wider range of behaviors.&lt;/li&gt;
&lt;li&gt;Remove dependencies between tests.&lt;/li&gt;
&lt;li&gt;Explicitly set static variables to their default value.&lt;/li&gt;
&lt;li&gt;Use resource pools - your tests can acquire and return resources to the pool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-unreliable-3rd-party-apis"&gt;
  &lt;/a&gt;
  2. Unreliable 3rd party APIs
&lt;/h1&gt;

&lt;p&gt;Decreased control of your test environment increases the chances of test unpredictability. Flaky tests can occur when your test suite is dependent on unreliable third-party APIs or functionality maintained by another team. These tests may intermittently fail due to third-party system errors, unreliable network connections, or third-party contract changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use test stubs or test doubles to replace the third-party dependency. Your regular tests can talk to the double instead of the external source.&lt;/li&gt;
&lt;li&gt;Test doubles will not detect API contract changes. You will need to develop a separate suite of integration contract tests for this.&lt;/li&gt;
&lt;li&gt;Contract tests can be run separately and need not break the build the same as other tests. They can be run less frequently and be actioned independently of other bugs.&lt;/li&gt;
&lt;li&gt;Communicate with the third-party provider to discuss the impact of changes made by them on your system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#3-infrastructure-issues"&gt;
  &lt;/a&gt;
  3. Infrastructure issues
&lt;/h1&gt;

&lt;p&gt;Test infrastructure failure is one of the common causes for flaky tests. These include network outages, database issues, Continuous Integration Node Failure, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;These issues are typically easier to spot than others. Your debugging process can check these first before attempting to find other causes.&lt;/li&gt;
&lt;li&gt;Write fewer end-to-end tests and more unit tests.&lt;/li&gt;
&lt;li&gt;Run tests on real devices instead of emulators or simulators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-flaky-ui-tests"&gt;
  &lt;/a&gt;
  4. Flaky UI tests
&lt;/h1&gt;

&lt;p&gt;UI tests are used to test visual logic, browser compatibility, animation, etc. Since they start at the browser level, they can be very flaky due to a variety of reasons – from missing HTML elements, cookie changes, etc. to actual system issues. If you visualize your test suite as a pyramid, UI tests are at the top. They should only occupy a small portion of your test portfolio because they are brittle, expensive to maintain, and time-consuming to run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don’t use UI tests to test back-end logic.&lt;/li&gt;
&lt;li&gt;Capture the network layer using Chrome DevTools Protocol(CDP). CDP allows for tools to inspect, debug, and profile Chromium, Chrome, and other Blink-based browsers&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#5-badly-written-tests"&gt;
  &lt;/a&gt;
  5. Badly written tests
&lt;/h1&gt;

&lt;p&gt;Not following good test writing practices can result in a large number of flaky tests in your pipeline. Some common mistakes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not adopting a testing framework even as code complexity and team size increases.&lt;/li&gt;
&lt;li&gt;Caching data. Over time, cached data may become stale affecting test results.&lt;/li&gt;
&lt;li&gt;Using random number generators without accounting for the full range of possibilities.&lt;/li&gt;
&lt;li&gt;Using floating-point operations without paying attention to underflows and overflows.&lt;/li&gt;
&lt;li&gt;Making assumptions about the order of elements in an unordered collection.&lt;/li&gt;
&lt;li&gt;Using sleep statements to make your test wait for a state change. Sleep statements are imprecise and one of the biggest causes of flaky tests. It is better to replace them with the waitFor() function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Treat automation testing like any other software development effort. Make testing a shared responsibility between developers and analysts.&lt;/li&gt;
&lt;li&gt;Use tools to monitor test flakiness. If the flakiness is too high, the tool can quarantine the test, (removing it from the critical path) and help resolve issues faster.&lt;/li&gt;
&lt;li&gt;Start all tests in a known state.&lt;/li&gt;
&lt;li&gt;Avoid hardcoding test data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#is-there-a-way-to-eliminate-flaky-tests-completely"&gt;
  &lt;/a&gt;
  Is there a way to eliminate flaky tests completely?
&lt;/h1&gt;

&lt;p&gt;The unfortunate answer is, no, there is no silver bullet that entirely eliminates flakiness. Even &lt;a href="https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html"&gt;high-performing teams like Google&lt;/a&gt; have reported at least some flakiness in 16% of their test suite.&lt;/p&gt;

&lt;p&gt;The best way to deal with the issue is by monitoring test-health and having both short-term and long-term mitigation strategies in place. If flaky tests are a severe problem for your team, or if this is a general topic of interest, email us at &lt;a href="mailto:founders@flakybot.com"&gt;founders@flakybot.com&lt;/a&gt; to get an invite to our private beta group for &lt;a href="https://www.flakybot.com"&gt;Flaky Bot&lt;/a&gt;, a tool to help manage flaky test infrastructure better.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>testing</category>
      <category>devops</category>
    </item>
    <item>
      <title>3 reasons to use 'var' in JavaScript</title>
      <author>Paul Thompson</author>
      <pubDate>Mon, 08 Nov 2021 22:19:53 +0000</pubDate>
      <link>https://dev.to/paritho/3-reasons-to-use-var-in-javascript-1hoe</link>
      <guid>https://dev.to/paritho/3-reasons-to-use-var-in-javascript-1hoe</guid>
      <description>&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword was JavaScript's first way to declare a variable. It fits, right? Var, variable, it's in the name. But like the Joker, &lt;code&gt;var&lt;/code&gt; is more than pretty face -- it has some baggage. As a beginning programmer, or a seasoned one dipping your toe into the seedy underbelly of JavaScript development, you maybe be wondering when you should use &lt;code&gt;var&lt;/code&gt; to declare your JavaScript objects and functions.&lt;/p&gt;

&lt;p&gt;Never fear. I have 3 reasons for you to use &lt;code&gt;var&lt;/code&gt; in your next JavaScript project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-love-tradition-and-spurn-anything-new"&gt;
  &lt;/a&gt;
  You love tradition and spurn anything new
&lt;/h2&gt;

&lt;p&gt;Var maybe the oldest keyword to declare a variable, but it is by far the only one. It's younger cousins, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; exploded onto the scene with &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015"&gt;ES6&lt;/a&gt; (over 6 years ago as of this writing!). But if sticking to old norms fraught with perils is your thing, keep using &lt;code&gt;var&lt;/code&gt; and leave these upstart keywords to listen to their terrible pop music and complain about their parents.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-prefer-mutability-even-when-you-dont"&gt;
  &lt;/a&gt;
  You prefer mutability, even when you don't
&lt;/h2&gt;

&lt;p&gt;Var has the troubling distinction of creating a variable of any type, which can then be changed to a variable of any type later. That's right, the number you declared on line 4 just became a string on line 17 and a boolean on line 109. This type flexibility is a key feature of JavaScript, but it can be avoided. But if you too like to live dangerously, keep using var.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-like-leaky-scopes"&gt;
  &lt;/a&gt;
  You like leaky scopes
&lt;/h2&gt;

&lt;p&gt;Prior to ES6, JavaScript variables were always defined at the function scope. In a lot of cases, this meant variables were &lt;em&gt;global&lt;/em&gt;. JavaScript didn't enforce block-level scopes such as inside a &lt;code&gt;for&lt;/code&gt; loop or &lt;code&gt;if&lt;/code&gt; block. So a variable declared with &lt;code&gt;var&lt;/code&gt; would be &lt;em&gt;hoisted&lt;/em&gt; to the top of its function scope. In other words, the variable declaration moved to the top of the current lexical environment with a value of &lt;code&gt;undefined&lt;/code&gt;. A common issue arising from hoisting is that such variables are accessible outside the block scope, where the developer may not expect them to be. &lt;/p&gt;

&lt;p&gt;A subtler and more difficult to detect bug can happen here as well, &lt;a href="https://eloquentjavascript.net/1st_edition/chapter3.html#p468c043e14dd0d54"&gt;variable shadowing&lt;/a&gt;. Rarely this may be desired. If that is you, &lt;code&gt;var&lt;/code&gt; is your hero.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-must-be-a-better-way"&gt;
  &lt;/a&gt;
  There must be a better way
&lt;/h2&gt;

&lt;p&gt;If you made it this far, you're probably seconds away from pounding out a fierce comment about how I'm wrong about &lt;code&gt;var&lt;/code&gt;. The truth is, no one should be using &lt;code&gt;var&lt;/code&gt; in any JavaScript code except for a history lesson. Even then, it should come with a footnote that says something like, "please don't ever do this."&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; have been available in &lt;a href="https://caniuse.com/?search=let"&gt;every major browser for the last 6 years&lt;/a&gt;. This is really, really ancient in frontend years. &lt;code&gt;var&lt;/code&gt; isn't just the parent misunderstanding their teen, it's the great grandparent everyone loves but no one invites to the &lt;em&gt;fun&lt;/em&gt; parties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Let&lt;/code&gt; retains JavaScript's flexible type system while enabling block-scoping. &lt;code&gt;Const&lt;/code&gt; creates a -- you guessed it -- constant variable in block-scope. &lt;code&gt;Const&lt;/code&gt; creates a that cannot be reassigned, but similar to most other languages, &lt;code&gt;const&lt;/code&gt; objects can have their properties mutated. These two alternatives to &lt;code&gt;var&lt;/code&gt; should cover every use case you have. Even if you are in the tough spot of needing to support truly archaic browsers, don't use &lt;code&gt;var&lt;/code&gt;. Use a tool such as &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So please, please, do not use &lt;code&gt;var&lt;/code&gt;.  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>System Monitoring Commands 📈💻</title>
      <author>Seb </author>
      <pubDate>Mon, 08 Nov 2021 22:14:58 +0000</pubDate>
      <link>https://dev.to/linuxseb/system-monitoring-commands-4gc9</link>
      <guid>https://dev.to/linuxseb/system-monitoring-commands-4gc9</guid>
      <description>&lt;p&gt;Hey everyone! I am back with another Linux article!😊&lt;/p&gt;

&lt;p&gt;Today I will be going over basic commands you can use to monitor system performance! 📈📉💻&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-top"&gt;
  &lt;/a&gt;
  1. top 💻
&lt;/h4&gt;

&lt;p&gt;The 'top' command is used to display active processes and how much they are using system resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFJWMFZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n17hjqdillbfnhhbavy7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFJWMFZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n17hjqdillbfnhhbavy7.png" alt="Image description" width="726" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-lsof"&gt;
  &lt;/a&gt;
  2.  lsof 💻
&lt;/h4&gt;

&lt;p&gt;lsof stands for list of open files- basically shows you list of files and the processes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gzUpzHfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ue6rn9nld4aixjf63yf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gzUpzHfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ue6rn9nld4aixjf63yf.png" alt="Image description" width="732" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-tcpdump"&gt;
  &lt;/a&gt;
  3. tcpdump 💻
&lt;/h4&gt;

&lt;p&gt;'tcpdump' is used to analyze network traffic&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-htop"&gt;
  &lt;/a&gt;
  4. htop 💻
&lt;/h4&gt;

&lt;p&gt;'htop' is a lot like top - It's just allows you to monitor system resources or processes. As you can see, it's a bit more fancy than top&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PYp2Wob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ltfrfogvjaj2mebb0jz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PYp2Wob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ltfrfogvjaj2mebb0jz.png" alt="Image description" width="734" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-iostat"&gt;
  &lt;/a&gt;
  5. iostat 💻
&lt;/h4&gt;

&lt;p&gt;'iostat' is a command that is used to monitor input/output devices, by telling you how long the devices have been active.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9h1QRNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp9hq278mkobjnfj1va7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9h1QRNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp9hq278mkobjnfj1va7.png" alt="Image description" width="734" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-ps"&gt;
  &lt;/a&gt;
  6. ps 💻
&lt;/h4&gt;

&lt;p&gt;Displays the processes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqGUknjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln6t5yb92nam2axl5dej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqGUknjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln6t5yb92nam2axl5dej.png" alt="ps" width="286" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-uptime"&gt;
  &lt;/a&gt;
  7. uptime 💻
&lt;/h4&gt;

&lt;p&gt;Tells you how long the system has been up&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rn2HSSQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lnyfjc1n6b2d8z8qp6y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rn2HSSQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lnyfjc1n6b2d8z8qp6y.png" alt="Image description" width="638" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-free"&gt;
  &lt;/a&gt;
  8. free 💻
&lt;/h4&gt;

&lt;p&gt;'free' shows you the amount of available memory you have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYJz_V5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct8gmbzkmhyzyfis49py.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYJz_V5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct8gmbzkmhyzyfis49py.png" alt="Image description" width="730" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-pidstat"&gt;
  &lt;/a&gt;
  9. pidstat 💻
&lt;/h4&gt;

&lt;p&gt;Used to monitor individual tasks. Great for troubleshooting issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l1gUcII---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4b8fawt6vil4mymrpx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l1gUcII---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4b8fawt6vil4mymrpx6.png" alt="Image description" width="728" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-w"&gt;
  &lt;/a&gt;
  10. w 💻
&lt;/h4&gt;

&lt;p&gt;'w' tells you information about users logged on and their processes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QNGMpvVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znh4lf2828hkwmdtmlke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QNGMpvVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znh4lf2828hkwmdtmlke.png" alt="Image description" width="721" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thats-it-thank-you-for-reading-todays-article"&gt;
  &lt;/a&gt;
  That's it! Thank you for reading today's article🥳
&lt;/h5&gt;

&lt;p&gt;These commands can be vital for you to monitor your system, so I will be releasing a part 2 soon, as well!😆&lt;/p&gt;

&lt;p&gt;For future Linux and security content, please give me a follow &lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/linuxseb"&gt;@linuxseb&lt;/a&gt;
 &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thank-you-again"&gt;
  &lt;/a&gt;
  Thank you again!😊
&lt;/h5&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>systems</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Quick way to collapse/expand all files at once on a pull request on GitHub</title>
      <author>Dzhavat Ushev</author>
      <pubDate>Mon, 08 Nov 2021 22:11:17 +0000</pubDate>
      <link>https://dev.to/this-is-learning/quick-way-to-collapseexpand-all-files-at-once-on-a-pull-request-on-github-4pcp</link>
      <guid>https://dev.to/this-is-learning/quick-way-to-collapseexpand-all-files-at-once-on-a-pull-request-on-github-4pcp</guid>
      <description>&lt;p&gt;When I review pull requests on GitHub I usually start by collapsing all files and then expand them one at a time in order to focus on a single thing.&lt;/p&gt;

&lt;p&gt;This can be slightly annoying because GitHub by default shows all files in an expanded state and one needs to go through every single file header and click on the chevron icon to collapse all of them. Depending on the PR size this might take some time.&lt;/p&gt;

&lt;p&gt;Luckily, there’s a quicker way. I recently found this neat shortcut/trick that can collapse/expand all files at once. It’s &lt;code&gt;Alt + click&lt;/code&gt; on any chevron icon in the file’s header. Here’s a video:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FW7xRAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FBbddYgXoAEfdea.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--54EgR7Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1159369600053780480/MWhI9fwI_normal.jpg" alt="Dzhavat Ushev profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dzhavat Ushev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dzhavatushev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Recently needed (then discovered) a neat way to collapse all files at once in a pull request (PR) on &lt;a href="https://twitter.com/github"&gt;@github&lt;/a&gt; . It's `Alt + click` on the caret icon in the file header. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:40 PM - 11 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1447587912133054470" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1447587912133054470" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1447587912133054470" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Now you know it too. Happy PR reviewing 🎉&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@baconandbaileys?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Kelly Neil&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/many?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>DOM Selectors in JavaScript</title>
      <author>Christopher Ninman</author>
      <pubDate>Mon, 08 Nov 2021 21:50:26 +0000</pubDate>
      <link>https://dev.to/alternate_robot/dom-selectors-in-javascript-344i</link>
      <guid>https://dev.to/alternate_robot/dom-selectors-in-javascript-344i</guid>
      <description>&lt;p&gt;While creating interactive content with JavaScript, you will often find yourself needing to access various HTML elements in order to make changes to them. We'll go through some of the main ways you can grab elements in the DOM, and how you can make use of what they hold.&lt;/p&gt;

&lt;h1&gt;Different Types of Selectors&lt;/h1&gt;

&lt;h3&gt;ID&lt;/h3&gt;

&lt;p&gt;If you want to manipulate one single element, the easiest and most straight-forward approach is to find that element by &lt;code&gt;id&lt;/code&gt;. Only one HTML element can have a specific &lt;code&gt;id&lt;/code&gt; attribute, and each ID is unique to one element.&lt;/p&gt;

&lt;h3&gt;Class&lt;/h3&gt;

&lt;p&gt;Multiple elements can be grouped together when they are given the same &lt;code&gt;class&lt;/code&gt; name. An example would be if you have multiple buttons that serve the purpose of deleting content, and you want all of those buttons to be manipulated in the same manner.&lt;/p&gt;

&lt;h3&gt;Tag&lt;/h3&gt;

&lt;p&gt;Some common tags in HTML are &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;span&lt;/code&gt;, and &lt;code&gt;img&lt;/code&gt;, though there are numerous others. Another DOM selector is &lt;code&gt;tagName&lt;/code&gt;, which selects elements based on the type of element they are.&lt;/p&gt;

&lt;h1&gt;Accessing an Element by ID&lt;/h1&gt;

&lt;p&gt;In order to access an element with a specific &lt;code&gt;id&lt;/code&gt;, you have a few options. You can either use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('element-id')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector('#element-id')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Either option will search the entire document and return the element with a matching &lt;code&gt;id&lt;/code&gt; as an object. If no element with the given &lt;code&gt;id&lt;/code&gt; is found, &lt;code&gt;null&lt;/code&gt; will be returned. If you encounter a &lt;code&gt;TypeError: Cannot read properties of null&lt;/code&gt;, it is likely that no element with that &lt;code&gt;id&lt;/code&gt; was found.&lt;/p&gt;

&lt;p&gt;You can also use these methods to create a variable, and then manipulate the DOM by calling that variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let foundElement = document.getElementById('first-header')
foundElement.style.color = 'blue'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If an element does not exist in the HTML file and is created using JavaScript, you can still give that element an &lt;code&gt;id&lt;/code&gt; using JavaScript with the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let createdWithJsElement = document.createElement('p')
createdWithJsElement.id = 'js-element'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Accessing an Element by ClassName&lt;/h1&gt;

&lt;p&gt;Similar to accessing an element by &lt;code&gt;id&lt;/code&gt;, you have a few choices for selecting elements by &lt;code&gt;class&lt;/code&gt;. You can access elements by &lt;code&gt;class&lt;/code&gt; name with the following methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector('.element-class')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return only the &lt;strong&gt;first&lt;/strong&gt; element that matches the specified &lt;code&gt;class&lt;/code&gt; name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementsByClassName('element-class')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The use of &lt;code&gt;getElementsByClassName&lt;/code&gt; will return a live &lt;code&gt;HTMLCollection&lt;/code&gt; of all the elements matching that &lt;code&gt;class&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelectorAll('.element-class')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;querySelectorAll&lt;/code&gt; method will return a static &lt;code&gt;NodeList&lt;/code&gt; of all the elements matching that class. Distinguishing between a &lt;code&gt;NodeList&lt;/code&gt; and an &lt;code&gt;HTMLCollection&lt;/code&gt; is a whole other topic which you can explore &lt;a href="https://unicorntears.dev/posts/queryselectorall-vs-getelementsbyclassname/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note the use of a &lt;strong&gt;dot&lt;/strong&gt; prior to the &lt;code&gt;class&lt;/code&gt; name, as opposed to the &lt;strong&gt;hash-tag&lt;/strong&gt; prior to doing a query selector on an &lt;code&gt;id&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to manipulate every element that is returned from the &lt;code&gt;getElementsByClassName&lt;/code&gt; or &lt;code&gt;querySelectorAll&lt;/code&gt; methods, you'll need to run a &lt;code&gt;for loop&lt;/code&gt; to iterate the array-like object and make the desired changes to each element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let allButtons = document.getElementsByClassName('button')

function testButtons () {
  for (let i = 0; i &amp;lt; allButtons.length; i++) {
    console.log(`I am button ${[i+1]}`);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create or change an element's &lt;code&gt;class&lt;/code&gt;, or other &lt;code&gt;attribute&lt;/code&gt;, by accessing that element by its &lt;code&gt;[index]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;allButtons[5].className = 'delete-button'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Accessing an Element by TagName&lt;/h1&gt;

&lt;p&gt;Yet another way to select elements in the DOM is to select the elements by their &lt;code&gt;tag&lt;/code&gt; name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let allParagraphs = document.getElementsByTagName('p')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get even more specific with your search for specific elements based on &lt;code&gt;tag name&lt;/code&gt;. Suppose you want to change the color of the text in all the paragraphs of a "Skills" section. You can search for elements by &lt;code&gt;tag name&lt;/code&gt; within a specific div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mySkills = document.getElementById("skills-div");
const skillParagraphs = mySkills.getElementsByTagName("p");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like when the &lt;code&gt;getElementsByClassName&lt;/code&gt; method is called, &lt;code&gt;getElementsByTagName&lt;/code&gt; will return a live HTML collection of elements. This can be iterated over with a &lt;code&gt;for loop&lt;/code&gt; just like the list of elements gathered with the &lt;code&gt;getElementsByClassName&lt;/code&gt; method.&lt;/p&gt;

&lt;h1&gt;Wrapping It Up&lt;/h1&gt;

&lt;p&gt;If you can't precisely locate elements, you'll have difficulty making your JavaScript code come to life. These selectors are just the tip of the iceberg for making your creations dynamic.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@max_duz?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Max Duzij&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/programming?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>#100DaysOfCode Days 8-14</title>
      <author>Kim</author>
      <pubDate>Mon, 08 Nov 2021 21:49:12 +0000</pubDate>
      <link>https://dev.to/decodekim/100daysofcode-days-8-14-24nk</link>
      <guid>https://dev.to/decodekim/100daysofcode-days-8-14-24nk</guid>
      <description>&lt;p&gt;Week 2 has been a little shaky.  I missed a few days, because well, life happens.  I did learn some new things in CSS that I'm excited about!  &lt;/p&gt;

&lt;p&gt;Right now I'm using frontendpractice.com to practice my CSS skills.  They pick out some nicely designed websites and you can recreate them.  I think it's great for beginners to learn about different designs, but I definitely wouldn't add these to my portfolio.  These are actual websites and it might look like you were trying to pass as the designer of the site. &lt;/p&gt;

&lt;p&gt;Right now I'm working on the Ableton project.  It's fun and challenging to create these little collages on the website.  I like how they use these little collages to make a more subtle z-pattern on the site.    &lt;/p&gt;

&lt;p&gt;Things I learned this week:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I learned that I can use z-index to put an element behind another element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I can use overflow: hidden to basically hide the overflow of an element.  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm still learning how this platform works, but I'm assuming you can only add your main image to a post and not multiple ones throughout the post?  &lt;/p&gt;

&lt;p&gt;Edit:  now I can't get the main image to work, oh well, I'll have to figure it out later, gotta get back to coding!  &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to hash a password in Go</title>
      <author>Sam Newby</author>
      <pubDate>Mon, 08 Nov 2021 21:32:23 +0000</pubDate>
      <link>https://dev.to/nwby/how-to-hash-a-password-in-go-4jae</link>
      <guid>https://dev.to/nwby/how-to-hash-a-password-in-go-4jae</guid>
      <description>&lt;p&gt;When you're storing a password in a database the worst thing that you could do as a software developer is store that password in plain text. We have to store and treat sensitive data as what it is, sensitive!&lt;/p&gt;

&lt;p&gt;Luckily, in Go we can do this really easily using the &lt;a href="https://pkg.go.dev/golang.org/x/crypto/bcrypt"&gt;Bcrypt&lt;/a&gt; package. Once, we retrieved the package with &lt;code&gt;go get&lt;/code&gt; we can use it straight away. Hashing a can be done with one function, yes I'll repeat that, one function.&lt;/p&gt;

&lt;p&gt;Let's start by importing the package in the file we want to use it in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"golang.org/x/crypto/bcrypt"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have our package we can hash our package using the &lt;code&gt;GenerateFromPassword()&lt;/code&gt; function like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenerateFromPassword&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our example we have a hypothetical user struct which has a plain text password assigned to the &lt;code&gt;Password&lt;/code&gt; field, we was to use that to generate our password and then reassign our hashed password back to the struct field.&lt;/p&gt;

&lt;p&gt;So we pass the password as a byte array to the &lt;code&gt;GenerateFromPassword()&lt;/code&gt; function firstly and then pass the cost, which in this example we have set to an arbitrary value of &lt;code&gt;8&lt;/code&gt;. We get back the hashed password as a byte array and a possible error, which for the example we have ignored with the underscore. Finally, we convert the hashed password to a string and reassign it back to the password field on the user struct. Really simple, really nice, and a perfect solution for storing user passwords in a database.&lt;/p&gt;

&lt;p&gt;Thank you for reading! I'll be back with more Go tutorials in the future. &lt;/p&gt;

</description>
      <category>go</category>
      <category>hashing</category>
      <category>bcrypt</category>
    </item>
    <item>
      <title>How to create a Node bot that sends happy emails throughout the year</title>
      <author>Jessica Wilkins</author>
      <pubDate>Mon, 08 Nov 2021 21:08:18 +0000</pubDate>
      <link>https://dev.to/codergirl1991/how-to-create-a-node-bot-that-sends-happy-emails-throughout-the-year-25nj</link>
      <guid>https://dev.to/codergirl1991/how-to-create-a-node-bot-that-sends-happy-emails-throughout-the-year-25nj</guid>
      <description>&lt;p&gt;In this tutorial, I will show you how to make your very own email bot using Node, Express, &lt;a href="https://nodemailer.com/about/"&gt;Nodemailer&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/node-cron"&gt;node-cron&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;You will learn how to program the bot to send emails throughout the day to friends and family. You will also learn how to send messages for specific dates like a friend's birthday.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;It would help to have basic working knowledge of JavaScript.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-to-make-sure-node-is-installed"&gt;
  &lt;/a&gt;
  Checking to make sure Node is installed
&lt;/h2&gt;

&lt;p&gt;Before we can get started writing code, we need to first check and see if Node is installed on the computer.&lt;/p&gt;

&lt;p&gt;If you are using a Mac, then open up the Terminal app.&lt;br&gt;
If you are using Windows, then open up the Command Prompt. &lt;/p&gt;

&lt;p&gt;In the command line, run &lt;code&gt;node -v&lt;/code&gt;. If installed, it will come back with a version number like &lt;code&gt;v16.10.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If it is not installed, then you can install Node from the &lt;a href="https://nodejs.org/en/download/"&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-project-folder"&gt;
  &lt;/a&gt;
  Creating the project folder
&lt;/h2&gt;

&lt;p&gt;First, go to the location where you want to add the folder. I am going to choose the Desktop as my location.&lt;/p&gt;

&lt;p&gt;In the command line, use the &lt;code&gt;cd&lt;/code&gt; command to change directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd Desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then use the &lt;code&gt;mkdir&lt;/code&gt; command to create a new folder in that directory. I am going to name our project &lt;code&gt;email-bot&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir email-bot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the new folder show up in the computer. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vlqfUY0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv2q5vdt2dwgcauy9fq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vlqfUY0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv2q5vdt2dwgcauy9fq3.png" alt="project folder" width="270" height="94"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use the &lt;code&gt;cd&lt;/code&gt; command again to change directories into the &lt;code&gt;email-bot&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; cd email-bot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the command line, you should see that we have successfully changed to the &lt;code&gt;email-bot&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U52cepLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jql9msbymwkl97ag0cnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U52cepLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jql9msbymwkl97ag0cnc.png" alt="email bot folder" width="692" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-packagejson-file"&gt;
  &lt;/a&gt;
  Creating the package.json file
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;package.json&lt;/code&gt; file contains a lot of important information for our project including name, version, scripts and dependencies.  &lt;/p&gt;

&lt;p&gt;Run the command &lt;code&gt;npm init --yes&lt;/code&gt; or &lt;code&gt;npm init --y&lt;/code&gt;. That will create a default &lt;code&gt;package.json&lt;/code&gt; file that you can modify later.&lt;/p&gt;

&lt;p&gt;This is what the default &lt;code&gt;package.json&lt;/code&gt; file will look like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bdy_KDyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlv6co8cpp3v469e2h1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bdy_KDyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlv6co8cpp3v469e2h1e.png" alt="default package json" width="880" height="396"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-serverjs-file"&gt;
  &lt;/a&gt;
  Creating the server.js file
&lt;/h2&gt;

&lt;p&gt;This file will contain the bulk of our logic for sending emails. &lt;/p&gt;

&lt;p&gt;In the command line, use the &lt;code&gt;touch&lt;/code&gt; command to add a &lt;code&gt;server.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-an-env-file"&gt;
  &lt;/a&gt;
  Creating an .env file
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.env&lt;/code&gt; file will contain all of the information for the email addresses. &lt;/p&gt;

&lt;p&gt;This is a special type of file that contains sensitive information that you don't want getting into the wrong hands. &lt;/p&gt;

&lt;p&gt;That is why it is important to never commit your &lt;code&gt;.env&lt;/code&gt; file to GitHub.&lt;/p&gt;

&lt;p&gt;In the command line, run &lt;code&gt;touch .env&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-gitignore-file"&gt;
  &lt;/a&gt;
  Creating a .gitignore file
&lt;/h2&gt;

&lt;p&gt;In this file, you will list out the names of files and folder you want Git to ignore when pushing your changes to GitHub. &lt;/p&gt;

&lt;p&gt;Later on, we will be adding the &lt;code&gt;.env&lt;/code&gt; file to our &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To add a &lt;code&gt;.gitignore&lt;/code&gt; file, run the command &lt;code&gt;touch .gitignore&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-express-nodemailer-dotenv-and-nodecron"&gt;
  &lt;/a&gt;
  Installing Express, Nodemailer, dotenv and node-cron
&lt;/h2&gt;

&lt;p&gt;Express is a framework that is used with Node to help create server-side apps.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dotenv&lt;/code&gt; package, is used to load our environment variables into the &lt;code&gt;server.js&lt;/code&gt; file. Our environment variables will be the email addresses from the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodemailer.com/about/"&gt;Nodemailer&lt;/a&gt; will be used to send the emails.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.npmjs.com/package/node-cron"&gt;node-cron&lt;/a&gt; package, will be used to schedule the dates and times for the email delivery. &lt;/p&gt;

&lt;p&gt;In the command line, we can install all of these packages at once. &lt;/p&gt;

&lt;p&gt;Run this command in the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express nodemailer node-cron dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it is time to move to the code editor and start coding. I will be using Visual Studio Code, but you are free to use another code editor.&lt;/p&gt;

&lt;p&gt;Open up the project in your editor and check to make sure you have all of the files we created.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mzTzVq7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/np8lblhme2d8lywjzuvd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mzTzVq7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/np8lblhme2d8lywjzuvd.png" alt="folder structure" width="430" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;package-lock.json&lt;/code&gt; file and &lt;code&gt;node_modules&lt;/code&gt; folder were created when we installed the packages.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-to-the-gitignore-file"&gt;
  &lt;/a&gt;
  Adding to the .gitignore file
&lt;/h2&gt;

&lt;p&gt;You don't want to push the &lt;code&gt;node_modules&lt;/code&gt; folder to GitHub because it is a really large folder with many files and subfolders.&lt;/p&gt;

&lt;p&gt;You also don't want to push your &lt;code&gt;.env&lt;/code&gt; file to GitHub because it contains very sensitive information that you want to keep hidden. &lt;/p&gt;

&lt;p&gt;Open up the &lt;code&gt;.gitignore&lt;/code&gt; file and add the &lt;code&gt;node_modules&lt;/code&gt; folder and &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I am also going to add the &lt;code&gt;.DS_Store&lt;/code&gt; to the &lt;code&gt;.gitignore&lt;/code&gt; file. This &lt;code&gt;.DS_Store&lt;/code&gt; file was created when we created the &lt;code&gt;email-bot&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;This is what your &lt;code&gt;.gitignore&lt;/code&gt; file should look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.env
.node_modules
**/.DS_Store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-the-environment-variables-to-the-env-file"&gt;
  &lt;/a&gt;
  Adding the environment variables to the .env file
&lt;/h2&gt;

&lt;p&gt;The first variable we are going to add is for the port number. The number we will use is 3000.&lt;/p&gt;

&lt;p&gt;When naming environment variables, it is common practice to use all caps and underscores to separate words.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT = 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next variable will be for our personal email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PERSONAL_EMAIL = your personal email address goes here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will add the password for our personal email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;EMAIL_PASSWORD = your personal email password goes here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last variable will be the email address we want to send messages to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FRIEND_EMAIL = friend's email address will go here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what your &lt;code&gt;.env&lt;/code&gt; file should look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT = 3000
PERSONAL_EMAIL = your personal email address goes here
EMAIL_PASSWORD = your personal email password goes here
FRIEND_EMAIL = friend's email address will go here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-the-dotenv-module-to-the-serverjs"&gt;
  &lt;/a&gt;
  Adding the dotenv module to the server.js
&lt;/h2&gt;

&lt;p&gt;If you want to load modules into your file, then you will need to use the &lt;code&gt;require()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This is the code to load the dotenv module into the server.js file and configure it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('dotenv').config();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#loading-the-environment-variables-into-the-serverjs"&gt;
  &lt;/a&gt;
  Loading the environment variables into the server.js
&lt;/h2&gt;

&lt;p&gt;We now need to load all of the variables from the &lt;code&gt;.env&lt;/code&gt; file into the &lt;code&gt;server.js&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;To load the variables, we have to use &lt;code&gt;process.env&lt;/code&gt; followed by the name of the variable.&lt;/p&gt;

&lt;p&gt;This is what the code looks like for the &lt;code&gt;PORT&lt;/code&gt; variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;process.env.PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what the code will look like when we add all of the environment variables to the &lt;code&gt;server.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('dotenv').config();
const port = process.env.PORT || 3000;
const personalEmail = process.env.PERSONAL_EMAIL;
const emailPassword = process.env.EMAIL_PASSWORD;
const friendEmail = process.env.FRIEND_EMAIL;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the port variable, it is common to add a  logical OR (||) operator followed by the number for the port. &lt;/p&gt;

&lt;p&gt;The reason why we do this is because if our &lt;code&gt;process.env.PORT&lt;/code&gt; doesn't work, then we tell the computer to use 3000. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-express-server"&gt;
  &lt;/a&gt;
  Creating an Express server
&lt;/h2&gt;

&lt;p&gt;We first have to add express to our server.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create a new express application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we use the &lt;code&gt;listen()&lt;/code&gt; method which listens for connections on a given port. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;listen()&lt;/code&gt; method will take in a port number and a callback function.&lt;/p&gt;

&lt;p&gt;Our callback function will return a &lt;code&gt;console.log&lt;/code&gt; which displays the message "The server has started at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(port, () =&amp;gt; {
    console.log(`The server has started at http://localhost:${port}`)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-the-server"&gt;
  &lt;/a&gt;
  Starting the server
&lt;/h2&gt;

&lt;p&gt;Before we start the server, we will be adding one more package called &lt;a href="https://www.npmjs.com/package/nodemon"&gt;nodemon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The nodemon package detects changes made to the file and will automatically restart the server for us.&lt;/p&gt;

&lt;p&gt;In the command line for the project folder, run &lt;code&gt;npm i nodemon&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;package.json&lt;/code&gt; file under the &lt;code&gt;scripts&lt;/code&gt;, change the &lt;code&gt;"tests"&lt;/code&gt; to &lt;code&gt;"start"&lt;/code&gt;. Then change the &lt;code&gt;"echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"&lt;/code&gt; to &lt;code&gt;"nodemon server.js"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "scripts": {
    "start": "nodemon server.js"
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go back to the command line, and run &lt;code&gt;npm start&lt;/code&gt;.&lt;br&gt;
You should see this result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dE5ST7zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyts7b3wuo5zf2t5kyt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dE5ST7zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyts7b3wuo5zf2t5kyt1.png" alt="start server" width="730" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To stop the server, press &lt;code&gt;Ctrl-C&lt;/code&gt; on your keyboard.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-email-messages"&gt;
  &lt;/a&gt;
  Creating the email messages
&lt;/h2&gt;

&lt;p&gt;For our bot, we will create two different messages. One good morning message and one Happy Birthday message.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;server.js&lt;/code&gt; file, create a variable called &lt;code&gt;morningMsg&lt;/code&gt; and assign the string &lt;code&gt;"Good morning! Hope you have a beautiful day!"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const morningMsg = "Good morning! Hope you have a beautiful day!";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will then create a &lt;code&gt;birthdayMsg&lt;/code&gt; and assign the string &lt;code&gt;"Happy Birthday! You rock!!!!"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const birthdayMsg = "Happy Birthday! You rock!!!!";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-message-objects"&gt;
  &lt;/a&gt;
  Creating the message objects
&lt;/h2&gt;

&lt;p&gt;We will create two message objects which contain the information for the email sender, receiver, subject line and message.&lt;/p&gt;

&lt;p&gt;This is what the code looks like for the good morning message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let sendMorningMsg = {
    from: personalEmail,
    to: personalEmail,
    subject: "It's a beautiful morning",
    text: morningMsg
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what the code looks like for the birthday message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let sendBirthdayMsg = {
    from: personalEmail,
    to: personalEmail,
    subject: "Hooray it's your Birthday",
    text: birthdayMsg
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now, the messages will be sent to our personal email address since we are still just testing everything.&lt;/p&gt;

&lt;p&gt;When we are finished, we can change the &lt;code&gt;to&lt;/code&gt; field to have the friend's email address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-transporter"&gt;
  &lt;/a&gt;
  Creating the transporter
&lt;/h2&gt;

&lt;p&gt;The transporter in nodemailer is responsible for sending our messages from our email account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt;&lt;br&gt;
If you are using Gmail, there are extra steps required for setup because of the authentication and security with Google. &lt;/p&gt;

&lt;p&gt;To setup your Gmail account with Nodemailer, please read through &lt;a href="https://www.freecodecamp.org/news/use-nodemailer-to-send-emails-from-your-node-js-server/"&gt;this detailed tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are not using Gmail, then follow along with these steps.&lt;/p&gt;

&lt;p&gt;The first step is to add Nodemailer to the server.js file.&lt;br&gt;
You can add it with the rest of the imports at the top of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const nodeMailer = require('nodemailer');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will then use the &lt;code&gt;createTransport()&lt;/code&gt; method to add all of our information for the email provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let transporter = nodeMailer.createTransport({
    service: 'outlook',
    port: 587,
    secure: false,
    auth: {
        user: personalEmail,
        pass: emailPassword
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#verify-the-email-address"&gt;
  &lt;/a&gt;
  Verify the email address
&lt;/h2&gt;

&lt;p&gt;We can add a condition to test if there was an error connecting to our email address.&lt;/p&gt;

&lt;p&gt;I am going to use a ternary operator to check for an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;transporter.verify((error) =&amp;gt; {
    error ? console.log(`There was an error for the email connection: ${error}`) : console.log('Ready to send email')
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-the-email-function"&gt;
  &lt;/a&gt;
  Testing the email function
&lt;/h2&gt;

&lt;p&gt;Let's test out sending an email using the good morning message.&lt;/p&gt;

&lt;p&gt;We will first create an async function called &lt;code&gt;morningMessage&lt;/code&gt;. Inside that function we will use the &lt;code&gt;sendMail&lt;/code&gt; function to send the good morning message.&lt;/p&gt;

&lt;p&gt;We are also going to log a success message along with the &lt;code&gt;messageId&lt;/code&gt; inside the function.&lt;/p&gt;

&lt;p&gt;We will then call the &lt;code&gt;morningMessage&lt;/code&gt; function and add a catch for errors.&lt;/p&gt;

&lt;p&gt;This is what the complete code looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function morningMessage() {
    let info = await transporter.sendMail(sendMorningMsg)
    console.log(`Message send: ${info.messageId}`)
}
morningMessage().catch(console.error);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's go to the command line and start our server using &lt;code&gt;npm start&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Log into your email provider, and you should see the message in the inbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ozc7F2wq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7mqrt1oubj82okumgpp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozc7F2wq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7mqrt1oubj82okumgpp.png" alt="email message" width="762" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see this message in the console, &lt;code&gt;There was an error for the email connection&lt;/code&gt;, then that means you need to check the transporter object or the values for your email address and password.&lt;/p&gt;

&lt;p&gt;If everything checks out, you can stop the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-nodecron-to-send-emails-in-the-morning"&gt;
  &lt;/a&gt;
  Adding node-cron to send emails in the morning
&lt;/h2&gt;

&lt;p&gt;We first have to add the &lt;a href="https://www.npmjs.com/package/node-cron"&gt;node-cron&lt;/a&gt; module to our &lt;code&gt;server.js&lt;/code&gt; file. You can add it to the rest of the modules at the top of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const nodeCron = require('node-cron');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go back to our code for the &lt;code&gt;morningMessage&lt;/code&gt; function and place that inside a node-cron schedule function.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;schedule()&lt;/code&gt; function takes in a string representation for the scheduled times and a call back function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nodeCron.schedule("* * * * *", () =&amp;gt; {
    async function morningMessage() {
        let info = await transporter.sendMail(sendMorningMsg)
        console.log(`Message send: ${info.messageId}`)
    }
    morningMessage().catch(console.error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To better understand this syntax, &lt;code&gt;"* * * * *"&lt;/code&gt; let's take a look at this diagram.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; # ┌────────────── second (optional)
 # │ ┌──────────── minute
 # │ │ ┌────────── hour
 # │ │ │ ┌──────── day of month
 # │ │ │ │ ┌────── month
 # │ │ │ │ │ ┌──── day of week
 # │ │ │ │ │ │
 # │ │ │ │ │ │
 # * * * * * *
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a total of six &lt;code&gt;*&lt;/code&gt; you can use.&lt;br&gt;
The first one is optional and represents seconds.&lt;/p&gt;

&lt;p&gt;For example, if you wanted your message to be sent every minute, then you would use &lt;code&gt;* * * * *&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go ahead and try to test that and see if your message is sent every minute. Run &lt;code&gt;npm start&lt;/code&gt; in the command line, and you should see your message show up in your inbox. &lt;/p&gt;

&lt;p&gt;Then stop the server. &lt;/p&gt;

&lt;p&gt;If you want your message to be sent every two minutes then you would use &lt;code&gt;*/2 * * * *&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the morning message, we want to schedule a message to be sent every morning at 9am.&lt;/p&gt;

&lt;p&gt;This is the syntax for the scheduled time &lt;code&gt;"0 9 * * *"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The node-cron module uses military time. We are using the number 9 to represent 9am. &lt;/p&gt;

&lt;p&gt;Here is the complete code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nodeCron.schedule("0 9 * * *", () =&amp;gt; {
    async function morningMessage() {
        let info = await transporter.sendMail(sendMorningMsg)
        console.log(`Message send: ${info.messageId}`)
    }
    morningMessage().catch(console.error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-nodecron-to-send-birthday-messages"&gt;
  &lt;/a&gt;
  Using node-cron to send birthday messages
&lt;/h2&gt;

&lt;p&gt;Underneath the schedule for the &lt;code&gt;morningMessage&lt;/code&gt;, create a new schedule for the birthday message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nodeCron.schedule("* * * * *", () =&amp;gt; {
    async function birthdayMessage() {
        let info = await transporter.sendMail(sendBirthdayMsg)
        console.log(`Message send: ${info.messageId}`)
    }
    birthdayMessage().catch(console.error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the schedule, we want to see a message once a year on a friends birthday at 11am.&lt;/p&gt;

&lt;p&gt;For example, this is the syntax if your friends birthday is April 17th.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"0 11 17 April *"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will send once a year on their birthday.&lt;/p&gt;

&lt;p&gt;This is what the full birthday message looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nodeCron.schedule("0 11 17 April *", () =&amp;gt; {
    async function birthdayMessage() {
        let info = await transporter.sendMail(sendBirthdayMsg)
        console.log(`Message send: ${info.messageId}`)
    }
    birthdayMessage().catch(console.error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#changing-the-recipient-field-in-the-message-objects"&gt;
  &lt;/a&gt;
  Changing the recipient field in the message objects
&lt;/h2&gt;

&lt;p&gt;When you are finished testing your bot, remember to change the &lt;code&gt;to&lt;/code&gt; field to include your friend's email instead of your own.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;to: friendEmail,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test it out, make sure to start your local server a few minutes before the scheduled morning time.&lt;/p&gt;

&lt;p&gt;Then check in with your friend to see if they received it. &lt;br&gt;
You can also add a &lt;code&gt;cc&lt;/code&gt; field to the message object, so you get a copy of the email as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cc: personalEmail,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final code
&lt;/h2&gt;

&lt;p&gt;This is the complete code for our &lt;code&gt;server.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//imports for the env variables and packages
require('dotenv').config();
const port = process.env.PORT || 3000;
const personalEmail = process.env.PERSONAL_EMAIL;
const emailPassword = process.env.EMAIL_PASSWORD;
const friendEmail = process.env.FRIEND_EMAIL;
const express = require('express');
const app = express();
const nodeMailer = require('nodemailer');
const nodeCron = require('node-cron');

//messages for bot
const morningMsg = "Good morning! Hope you have a beautiful day!";
const birthdayMsg = "Happy Birthday! You rock!!!!";

//message objects
let sendMorningMsg = {
    from: personalEmail,
    to: friendEmail,
    cc: personalEmail,
    subject: "It's a beautiful morning",
    text: morningMsg
};

let sendBirthdayMsg = {
    from: personalEmail,
    to: friendEmail,
    cc: personalEmail,
    subject: "Hooray it's your Birthday",
    text: birthdayMsg
};

//transporter to send emails from our account 
let transporter = nodeMailer.createTransport({
    service: 'outlook',
    port: 587,
    secure: false,
    auth: {
        user: personalEmail,
        pass: emailPassword
    }
});


//verifies a proper email connection 
transporter.verify((error) =&amp;gt; {
    error ? console.log(`There was an error for the email connection: ${error}`) : console.log('Ready to send email')
});


//sends a morning message to our friend at 9am everyday
nodeCron.schedule("0 9 * * *", () =&amp;gt; {
    async function morningMessage() {
        let info = await transporter.sendMail(sendMorningMsg)
        console.log(`Message send: ${info.messageId}`)
    }
    morningMessage().catch(console.error);
});

// sends a message once a year to our friend on their birthday 
nodeCron.schedule("0 11 17 April *", () =&amp;gt; {
    async function birthdayMessage() {
        let info = await transporter.sendMail(sendBirthdayMsg)
        console.log(`Message send: ${info.messageId}`)
    }
    birthdayMessage().catch(console.error);
});

//listens for connections 
app.listen(port, () =&amp;gt; {
    console.log(`The server has started at http://localhost:${port}`)
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you so much for making it to the end of the tutorial. 😄&lt;/p&gt;

&lt;p&gt;To learn more about the features for node-cron, please visit the &lt;a href="https://www.npmjs.com/package/node-cron"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To learn more about the features for Nodemailer, please visit the &lt;a href="https://nodemailer.com/about/"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
