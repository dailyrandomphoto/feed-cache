<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Async code in useEffect is dangerous, how do we deal with it?</title>
      <author>Jae Anne Bach Hardie</author>
      <pubDate>Wed, 20 Oct 2021 23:07:53 +0000</pubDate>
      <link>https://dev.to/jbachhardie/async-code-in-useeffect-is-dangerous-how-do-we-deal-with-it-3p9m</link>
      <guid>https://dev.to/jbachhardie/async-code-in-useeffect-is-dangerous-how-do-we-deal-with-it-3p9m</guid>
      <description>&lt;p&gt;The introduction of async/await to Javascript has made it easy to express complex workflows that string together multiple asynchronous tasks. Let's take a look at the following code, which is a generalized example of code I've seen in real projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's easy to look at that and think it's all rosy. When we are passed a user we create a client for them and then whenever a client is disposed of through the user changing or the component unmounting, we disconnect the client.&lt;/p&gt;

&lt;p&gt;However, we have not considered that the asynchronous workflow in the first &lt;code&gt;useEffect&lt;/code&gt; is running concurrently to the rest of the application, which is independently responding to other effects and user actions. Any one of those other effects could unmount our component at any point!  If the component is unmounted before &lt;code&gt;setClient&lt;/code&gt; is called the client will still be created — Promises do not get cancelled just because their caller no longer exists — but without a component to manage the state setting or cleanup it will never disconnect. This is usually quite bad.&lt;/p&gt;

&lt;p&gt;So what do we do about it? Well, it's complicated. At first glance it looks like we can do the following and things will be OK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if the client has been created it will disconnect, without it needing to be saved to component state. Right?&lt;/p&gt;

&lt;p&gt;Wrong, unfortunately. If the cleanup function runs before &lt;code&gt;createClient&lt;/code&gt; resolves there will be no client to clean up. However, the promise is still resolving and the client will be created, once again putting it outside our reach!&lt;/p&gt;

&lt;p&gt;If we really want to be able to safely use async workflows inside &lt;code&gt;useEffect&lt;/code&gt; we need to make our workflow cancellable at any point. We also need to reason through what needs to be cleaned up depending on what stage the workflow was in when the interruption arrived. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled before we get to creating resources&lt;/span&gt;
      &lt;span class="c1"&gt;// it's ok, just don't create them&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled before we get to the client, we need&lt;/span&gt;
      &lt;span class="c1"&gt;// to make sure our connection isn't left hanging&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled after the client has been created, we&lt;/span&gt;
      &lt;span class="c1"&gt;// need to clean it up&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cancelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're struggling to understand where to put cancellation handlers, imagine you were writing this with promises instead of async/await. We have to handle cancellation at the beginning of every &lt;code&gt;.then&lt;/code&gt; callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cancelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is why I sometimes shy away from async/await in UI code entirely. The async/await syntax blurs the line between synchronous (not interruptible) and asynchronous (interruptible) code. That's the point! It is very helpful in contexts where synchronous and asynchronous code should be treated similarly — like in a backend server executing a linear workflow — but dangerously misleading in contexts where interruptions are common and handling them explicitly becomes necessary.&lt;/p&gt;

&lt;p&gt;There are, of course, more sophisticated ways of dealing with the problem of resource management that make the implicit state machine above more explicit and controllable. I will leave an implementation in &lt;a href="https://xstate.js.org/"&gt;xstate&lt;/a&gt; as an exercise for the reader but it's one example of a useful tool to reason through and model these multi-step interruptible processes. However, it's good to have a barebones, just-React solution in your back pocket in case you find yourself unexpectedly facing a dangerous Promise in a foreign project.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>VS Code + Live Share: Putting the "We" back in "Web"</title>
      <author>Jonathan Carter</author>
      <pubDate>Wed, 20 Oct 2021 23:02:31 +0000</pubDate>
      <link>https://dev.to/lostintangent/putting-the-we-back-in-web-1hc2</link>
      <guid>https://dev.to/lostintangent/putting-the-we-back-in-web-1hc2</guid>
      <description>&lt;p&gt;When we first released &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt; three years ago, our goal was to enable developer collaboration to become more &lt;a href="https://twitter.com/LostInTangent/status/1450868941056720899"&gt;enjoyable&lt;/a&gt;, &lt;a href="https://aka.ms/vsls-modality"&gt;flexible&lt;/a&gt;, and &lt;a href="https://aka.ms/vsls-platform"&gt;extensible&lt;/a&gt;, across a diverse set of &lt;a href="https://aka.ms/vsls-usecases"&gt;use cases&lt;/a&gt;. Screen sharing had served us well, but as teams and classrooms were becoming more geo-distributed, it was clearly time for a fresh take on remote pair programming.&lt;/p&gt;

&lt;p&gt;Since then, Live Share has become a key part of many developer's workflow, and it's been amazing to build it alongside the community. However, in order for us to support collaboration to happen from anywhere, and on any device, we've been missing a fundamental part of the story: a web client.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6HqUz3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCJ3c67VkAAJfiV.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8p_8E6Z1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1410632439370641409/Pt-7RucE_normal.jpg" alt="Visual Studio Code profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Visual Studio Code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Wanna see something cool? 😎 Go to "&lt;a href="https://t.co/k0d9MtptVW"&gt;vscode.dev&lt;/a&gt;" and start coding with Visual Studio Code entirely in your browser. Anywhere, anytime, on any device and tablet, with no install required 🧑‍💻🪄&lt;br&gt;Read the announcement 👉 &lt;a href="https://t.co/XpTxjfVENL"&gt;aka.ms/vscode-dev-blog&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:56 PM - 20 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;With the introduction of &lt;a href="https://vscode.dev"&gt;Visual Studio Code for the Web&lt;/a&gt; (and &lt;a href="https://aka.ms/githubdev-fun"&gt;github.dev&lt;/a&gt;), developers now have a world-class editor, that's simply a URL away. And with this powerful foundation in place, we were able to port Live Share to run entirely in your browser, so that collaboration can be as opportunistic and lightweight as possible. Got an iPad? Sweet! Working on a new machine and don't want to install any tools? Awesome! VS Code and Live Share have got your back, no matter where/when you want to collaborate 🔥&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyVCpDhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCKC4arVIAcJ_mX.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      📣 To celebrate the release of &lt;a href="https://t.co/leLmoM8lLT"&gt;vscode.dev&lt;/a&gt;, we also shipped Live Share support for the web. Simply install the extension, start a session, and then co-edit, review and chat about code, entirely from the browser 🔥 Developer collaboration may never be the same! 🥰 &lt;a href="https://t.co/vATZCblUgw"&gt;twitter.com/code/status/14…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:58 PM - 20 Oct 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Visual Studio Code
          &lt;/span&gt;
          @code
        &lt;/div&gt;
        Wanna see something cool? 😎 Go to "https://t.co/k0d9MtptVW" and start coding with Visual Studio Code entirely in your browser. Anywhere, anytime, on any device and tablet, with no install required 🧑‍💻🪄
Read the announcement 👉 https://t.co/XpTxjfVENL https://t.co/eOxK5gSoiE
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Even cooler, the Live Share web client is fully interoperable with both Visual Studio and Visual Studio Code, which allows you to collaborate with other developers, and ensure that everyone can work in their most comfortable and convenient environment. At the moment, the Live Share web experience supports the majority of features that the desktop client does (e.g. co-editing, shared cursors, text chat, inline commenting), and we'll be iterating on it in the coming weeks to fill in some of the remaining gaps (e.g. notebooks).&lt;/p&gt;

&lt;p&gt;That said, we think that Live Share's new web support is complete enough for folks to start giving it a spin, and letting us know where and how we can improve. We're extremely excited to remove these setup and device barriers, and looking forward to hearing if/how it's making developer collaboration more enjoyable 💖&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing xrpl.js</title>
      <author>Mayukha Vadari</author>
      <pubDate>Wed, 20 Oct 2021 22:02:18 +0000</pubDate>
      <link>https://dev.to/ripplexdev/introducing-xrpljs-37p7</link>
      <guid>https://dev.to/ripplexdev/introducing-xrpljs-37p7</guid>
      <description>&lt;p&gt;&lt;a href="https://ripple.com/ripplex/"&gt;RippleX&lt;/a&gt; and the &lt;a href="https://xrplf.org/"&gt;XRP Ledger Foundation (XRPLF)&lt;/a&gt; are excited to announce xrpl.js &lt;strong&gt;version 2.0.0&lt;/strong&gt;, a JavaScript/TypeScript library for interacting with the XRP Ledger (XRPL). Formerly known as ripple-lib, the library was renamed to better represent its role in the XRPL ecosystem and overhauled to take advantage of modern JavaScript features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;JavaScript is one of the most widely-used programming languages, and as such has a massive community of active developers. Maintaining a JavaScript SDK enables these developers to seamlessly interact with the XRP Ledger, both in the browser and in Node.js. In addition, the JavaScript libraries (xrpl.js, ripple-binary-codec, ripple-keypairs, and ripple-address-codec) power many &lt;a href="https://github.com/XRPLF/xrpl.js/blob/develop/APPLICATIONS.md"&gt;apps&lt;/a&gt; in the XRPL ecosystem, as well as &lt;a href="https://www.npmjs.com/browse/depended/ripple-lib"&gt;packages&lt;/a&gt; from companies such as BitGo and Ledger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes"&gt;
  &lt;/a&gt;
  Changes
&lt;/h2&gt;

&lt;p&gt;With this release of xrpl.js, the JavaScript, &lt;a href="https://github.com/XRPLF/xrpl4j"&gt;Java&lt;/a&gt;, and &lt;a href="https://github.com/XRPLF/xrpl-py/"&gt;Python&lt;/a&gt; libraries provided by the XRPLF now have parallel structures and systems. This enables developers to easily work with their preferred programming language depending on their specific needs, without having to learn an entirely new interface.&lt;/p&gt;

&lt;p&gt;xrpl.js will continue to support all ripple-lib features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serializing, signing, and submitting transactions to the XRPL&lt;/li&gt;
&lt;li&gt;Retrieving information from the XRPL&lt;/li&gt;
&lt;li&gt;Helpful utility functions (such as converting between &lt;a href="https://xrpl.org/xrp.html#xrp-properties"&gt;drops&lt;/a&gt; and XRP)&lt;/li&gt;
&lt;li&gt;Support for Node.js, web browsers, and React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also introduces a number of new features, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript types for all transaction types and WebSocket requests&lt;/li&gt;
&lt;li&gt;A Wallet class to make it easier to work with key pairs&lt;/li&gt;
&lt;li&gt;Protections against the &lt;a href="https://xrpl.org/partial-payments.html#partial-payments-exploit"&gt;partial payment attack vector&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An additional submit implementation that returns the transaction's final outcome after validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In version 2.0, the library is now much more aligned with the core XRP Ledger interface. This means XRPL developers—whether new or experienced—can refer to multiple sources of documentation instead of needing to rely solely on the library-specific documentation. There are also a number of general architecture improvements, such as simplifying code, making user interfaces more intuitive (especially in relation to the core ledger), and revamping the testing structure. For a detailed list of changes, visit the &lt;a href="https://github.com/XRPLF/xrpl.js/blob/develop/HISTORY.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-building"&gt;
  &lt;/a&gt;
  Start Building
&lt;/h2&gt;

&lt;p&gt;To get started using xrpl.js, see &lt;a href="https://xrpl.org/get-started-using-javascript.html"&gt;this tutorial on xrpl.org&lt;/a&gt;, or check out the &lt;a href="https://github.com/XRPLF/xrpl.js"&gt;project repo&lt;/a&gt; or &lt;a href="https://js.xrpl.org/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you already have a project that uses ripple-lib, migrate today! We have a &lt;a href="https://xrpl.org/xrpljs2-migration-guide.html"&gt;migration guide for moving your code from ripple-lib v1.10 to xrpl.js v2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope you enjoy building the Internet of Value, and feel welcome to reach out to the XRP Ledger developer community if you have any questions!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>blockchain</category>
      <category>xrpl</category>
    </item>
    <item>
      <title>Stored Procedures - love or leave 'em?</title>
      <author>Jim Hatcher</author>
      <pubDate>Wed, 20 Oct 2021 21:52:33 +0000</pubDate>
      <link>https://dev.to/jhatcher9999/stored-procedures-love-or-leave-em-5amh</link>
      <guid>https://dev.to/jhatcher9999/stored-procedures-love-or-leave-em-5amh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A stored procedure is a set of SQL statements that is stored on the database server and is available to be executed by name.  Stored procedures are the cause of “religious wars” in the world of relational databases where some DB users live and die by them and other DB users consider them an anti-pattern.  They are certainly a tool that has the potential to be mis-used and create performance issues and blockers to scalability.  As a DBA/Developer/Architect, should you be using them or not?  Let’s dive in and try to answer that question.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-usage-patterns"&gt;
  &lt;/a&gt;
  Common Usage Patterns
&lt;/h2&gt;

&lt;p&gt;When I see stored procedures used in databases, they fall into one of the following categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A stored procedure is used for every single CRUD operation against the DB&lt;/li&gt;
&lt;li&gt;Stored procedures are used in certain situations for special handling, including:

&lt;ul&gt;
&lt;li&gt;Running multi-statement transactions so that commit/rollback logic can be controlled at the DB level&lt;/li&gt;
&lt;li&gt;Running operations that involve chatty transactions so that round-trips between the app and DB can be avoided&lt;/li&gt;
&lt;li&gt;Centralization of logic that is called by several systems&lt;/li&gt;
&lt;li&gt;Encapsulation of operations to which highly granular security permissions need to be granted&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;10,000-line monsters containing business reams of logic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#potential-pros-and-cons"&gt;
  &lt;/a&gt;
  Potential Pros and Cons
&lt;/h2&gt;

&lt;p&gt;There are various arguments for and against the use of stored procedures.  Let’s examine a few:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-caching-of-execution-plans"&gt;
  &lt;/a&gt;
  Pro: Caching of Execution Plans
&lt;/h3&gt;

&lt;p&gt;When you write a stored procedure, the query execution plan is stored/cached on the server which saves time when the stored proc is executed.  This has become less of a factor over the years as DB technology has progressed.  SQL optimizers have gotten better at storing plans for “dynamic” SQL and storing those plans for re-use.  By making use of prepared statements in data access code, the same benefit of execution plan caching can often be gained.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-granular-permission-grants"&gt;
  &lt;/a&gt;
  Pro: Granular Permission Grants
&lt;/h3&gt;

&lt;p&gt;There are opportunities to grant an application or user permissions to execute a stored procedure but restrict access to the underlying table(s).  Or, you could grant access to a procedure that INSERTs data into a table but deny access to a procedure that UPDATEs or DELETEs data from a table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-query-pattern-tracking"&gt;
  &lt;/a&gt;
  Pro: Query Pattern Tracking
&lt;/h3&gt;

&lt;p&gt;If every CRUD operation performed against the database is contained in stored procedures, it’s relatively easy to have an understanding of the query patterns used in the database.  As a DBA, getting your arms around the query patterns (both reads and writes) that are being executed against a database is a huge step in being able to manage and optimize a database -- especially when inheriting a new system with which you have little familiarity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-protection-against-sql-injection-attacks"&gt;
  &lt;/a&gt;
  Pro: Protection against SQL Injection Attacks
&lt;/h3&gt;

&lt;p&gt;SQL Injection Attacks are a  classic security vulnerability.  If you’re not familiar with them, google “little bobby tables” and check out the famous XKCD comic that pokes fun at them.  Because stored procedures are typically parameterized, they provide a level of protection against unsanitized SQL inputs.  To be fair, I have also seen stored procedures exploited with SQL Injection attacks; they’re not a magic fix for SQL injection attacks, and smart developers still take precautions to sanitize data and use parameterization correctly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-cutting-down-on-roundtrips-from-the-app-layer"&gt;
  &lt;/a&gt;
  Pro: Cutting down on Roundtrips from the app layer
&lt;/h3&gt;

&lt;p&gt;For certain database operations that require several roundtrips from the app to the database, there can be a performance boost by planting all the necessary logic within a stored procedure to handle the entire operation without ever “leaving the database.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-making-reuse-of-logic-possible"&gt;
  &lt;/a&gt;
  Pro: Making re-use of logic possible
&lt;/h3&gt;

&lt;p&gt;By storing SQL statements together in an encapsulated, named element which can be executed by various processes, there is an opportunity to re-use logic by application code, reporting services, and other DB clients that may be simpler than encapsulating that logic in an application tier (for example, in a microservice).  In a system that is embracing microservices, this argument becomes largely irrelevant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#con-business-logic-in-the-db"&gt;
  &lt;/a&gt;
  Con: Business Logic in the DB
&lt;/h3&gt;

&lt;p&gt;There is a subtle temptation when writing stored procedures to add little bits of logic that really don’t belong in the database.  When there is business logic shared between the services code and the database (in stored procedures), it is harder to have a holistic view of a software system’s business logic; things can easily be missed which can lead to unexpected bugs.&lt;/p&gt;

&lt;p&gt;In the case of 10,000-line monsters mentioned above, this embedding of business logic is taken to an extreme.  This leads to highly unwieldy and difficult to maintain code.  This is probably the most infamous use of stored procedures and one of the anti-patterns dissenters love to cite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#con-loss-of-database-portability"&gt;
  &lt;/a&gt;
  Con: Loss of Database Portability
&lt;/h3&gt;

&lt;p&gt;The code used in stored procedures often moves away from standard ANSI-SQL and into implementation-specific syntax.  This makes it harder to move between DB systems.  If the interaction between applications and databases is all plain-vanilla SQL, it is relatively easy to migrate an app from using any database system to any other database system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#con-dependencies-between-stored-procedures-and-app-code"&gt;
  &lt;/a&gt;
  Con: Dependencies between stored procedures and app code
&lt;/h3&gt;

&lt;p&gt;While it is good practice to keep database schemas (tables, indexes, views, etc.) in source control, when the schema contains stored proc definitions, the management of the schema becomes much more complex.  Often, changes to stored procedures are tightly bound to Data Access code, so managing versions of schemas and their appropriate code builds can be challenging.  And, doing seamless upgrades of applications can cause complexities as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#con-orm-integration"&gt;
  &lt;/a&gt;
  Con: ORM Integration
&lt;/h3&gt;

&lt;p&gt;An ORM (Object Relational Mapper) is a piece of software designed to abstract away the manual mapping of domain objects (used in code) with the corresponding table structures (used in databases).  By employing an ORM, you (in theory) save yourself a lot of trouble writing boring, repetitive data access layer code.  ORMs typically write SQL statements dynamically and execute them directly.  It is often hard, or at least involves a decent investment in time and effort, to get ORMs to use stored procedures which subtracts from their intended utility.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I’m not actually a huge fan of ORMs, but I understand their value.  My personal rule when deploying ORMs is to do so in a way where it’s easy to let the ORM do the data mapping when it’s efficient, but to allow the insertion of manual data-access logic for cases when the ORM is making poor choices.  In other words, if the ORM makes your life easier 80% of the time, then leverage it for that 80% -- but don’t tie yourself to the ORM for that other painful 20%. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I admit that in the part of my career where I was writing apps using the Microsoft stack and SQL Server that I was a huge proponent and user of stored procs.  I was also a huge Microsoft snob and had no plans of moving off of SQL Server to any other database platform.  Fifteen years later, with a more mellow attitude and a little more hard-won experience under my belt, I am much more of a believer in building systems that use the right tools for the right jobs.  The database is there to provide durability, handle concurrency, provide consistency, and generally take away the stress of storing data.  Put the data in the database.  Put logic that surrounds the data access in a data API and expose that to your applications.&lt;/p&gt;

&lt;p&gt;In general, I believe that the trend regarding stored procedures is to move away from them -- especially when architecting systems that need to be highly available and massively scalable.  The trends you will find around these types of architectures are the use of microservices, the adoption of various types of horizontally scalable data platforms (Distributed SQL, NoSQL, ElasticSearch, Spark, Snowflake, etc.), and a general desire to decouple business logic from data operations.&lt;/p&gt;

&lt;p&gt;I also believe that the potential pros that can be gained from the use of stored procedures can also be gained in other ways -- through the use of microservices and through good coding practices; however, the potential cons are much harder to overcome.&lt;/p&gt;

&lt;p&gt;I am hesitant to go so far as to call stored procedures a “crutch.”  But I do think that if a system architect were to adopt a policy of explicitly barring the use of stored procedures in favor of other mechanisms that support reuse and decoupling of data and logic concerns that it would be a decision I would consider healthy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; I work for Cockroach Labs and in CockroachDB, we don’t support stored procedures.  The discussion around whether we should support stored procedures comes up fairly often.  It would certainly make data migrations easier.  And, for some of the reasons noted above in this article, stored procedures can certainly add some value.  But for the most part, we seem to take the stance that most modern systems are not adopting stored procedures, and so, this feature never seems to get high enough prioritization to get done.  Instead, we seem to take on features that enable adoption of the more forward-thinking trends (cloud native, microservices, containerization, serverless).  We may support them in the future, and if we do, I hope we will put some guardrails around their usage to gently nudge users away from using them in potentially limiting ways.&lt;/p&gt;

&lt;p&gt;Since the use of stored procedures is, as noted above, a bit of a religious war, I’d love to hear any comments you have on the pros and cons of stored procs and whether you think they are a tool that has a place in modern application architectures.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>storedprocs</category>
      <category>decoupling</category>
      <category>database</category>
    </item>
    <item>
      <title>Build times in a statically generated site</title>
      <author>Anvil Engineering</author>
      <pubDate>Wed, 20 Oct 2021 21:26:44 +0000</pubDate>
      <link>https://dev.to/useanvil/build-times-in-a-statically-generated-site-2fl8</link>
      <guid>https://dev.to/useanvil/build-times-in-a-statically-generated-site-2fl8</guid>
      <description>&lt;p&gt;Web development has grown into something unrecognizable from its inception. Instead of hosting your own server, web developers don't host or even pay for their own server. Sending static files to the server via FTP is ancient history. None of the files we write as web developers are truly static anymore; instead we have a build step that generates files into something incoherent to the human reader. This blog post will cover the good, the bad, and some tips to navigate this new era of compilation in web development using a &lt;a href="https://www.cloudflare.com/learning/performance/static-site-generator/"&gt;Static Site Generator&lt;/a&gt; and a host for the statically generated site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h3&gt;

&lt;p&gt;There are a variety of options for choosing a Static Site Generator and a host for your site. For reference, I will list some options below, but for the purposes of this blog post I will refer to &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; hosted on &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, as that's what we use for &lt;a href="https://dev.to/"&gt;this site&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;SSGs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatsby&lt;/li&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Nuxt.js&lt;/li&gt;
&lt;li&gt;11ty&lt;/li&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hosts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatsby Cloud&lt;/li&gt;
&lt;li&gt;Vercel (native host for Next.js)&lt;/li&gt;
&lt;li&gt;Netlify&lt;/li&gt;
&lt;li&gt;GitHub Pages&lt;/li&gt;
&lt;li&gt;GitLab Pages&lt;/li&gt;
&lt;li&gt;AWS Amplify&lt;/li&gt;
&lt;li&gt;Host yourself!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#build-times-the-good"&gt;
  &lt;/a&gt;
  Build Times: The Good
&lt;/h2&gt;

&lt;p&gt;Your website 'build' does a lot of really awesome things, all of which are meant to deliver a more performant website and drive better user experience. While each build varies between companies and developers, there are a few standard optimizations that SSGs like Gatsby do automatically. Optimizations such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minified JS&lt;/li&gt;
&lt;li&gt;Remove unused CSS&lt;/li&gt;
&lt;li&gt;Minified CSS&lt;/li&gt;
&lt;li&gt;Transpile JS to old browser syntax&lt;/li&gt;
&lt;li&gt;Prebuild HTML pages and upload them to CDN (this is what ‘Static Site Generation' is!)&lt;/li&gt;
&lt;li&gt;Asset processing &amp;amp; bundling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can do all of these things yourself, without a static site generator. They are all customizable as well, but letting a static site generator take care of these will save you immense time and provide your site users with a great experience.&lt;/p&gt;

&lt;p&gt;SSGs also automatically solve issues for you, ones that are inherently annoying and/or not directly related to building your site. By solving these problems for developers, we are able to spend more of our time building out product features and styles for our site, A.K.A. what we all would much rather do than configuration :). A few of these problems automatically solved for us are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching strategy and caching headers&lt;/li&gt;
&lt;li&gt;Web crawlability: by serving static HTML, web crawlers can index our site optimally and our SEO is already great&lt;/li&gt;
&lt;li&gt;Asset processing &amp;amp; bundling: yes, this is an optimization above. But this is a huge performance problem that is solved out of the box for us!&lt;/li&gt;
&lt;li&gt;Development and production builds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lastly, using SSGs also opens the door for optional plugins and libraries designed for those SSGs. There are many plugins on Netlify that are incredibly easy to install and set up, oftentimes just one-click installs. Some helpful ones from Netlify include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cypress-io/netlify-plugin-cypress#readme"&gt;Cypress&lt;/a&gt; - run your cypress tests as part of your build process; prevent a deploy if tests fail&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/netlify/netlify-plugin-gatsby#readme"&gt;Essential Gatsby&lt;/a&gt; (including caching) - Speed up builds with a cache and other essential Gatsby helpers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aka-raccoon/netlify-plugin-gmail#readme"&gt;Gmail&lt;/a&gt; - send an email after a deploy succeeds/fails&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/netlify-labs/netlify-plugin-lighthouse#readme"&gt;Lighthouse&lt;/a&gt; - generate a lighthouse report for the build, and configure to fail a deploy if your score is below a certain threshold&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cdeleeuwe/netlify-plugin-submit-sitemap#readme"&gt;Submit sitemap&lt;/a&gt; - automatically submit your sitemap to search engines after a successful deploy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many more plugins from Netlify as well, and as you can tell they do some magic to make the household chores of web development disappear. I highly encourage checking out the rest of the plugins from Netlify (and Gatsby's plugins too) to see what is possible. There is one huge downside to adding plugins: increasing your build time, the real reason we're writing this blog post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-times-the-bad"&gt;
  &lt;/a&gt;
  Build Times: The Bad
&lt;/h2&gt;

&lt;p&gt;Before I get into the dark side of SSGs &amp;amp; build times, let me come out and say, unequivocally, &lt;strong&gt;longer build times are worth it for your site to perform exceptionally well&lt;/strong&gt;. While all the reasons below are painful, the magic that happens during build time greatly outweighs that pain.&lt;/p&gt;

&lt;p&gt;There are 3 main pain points behind build times:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Waiting sucks&lt;/li&gt;
&lt;li&gt;Wasting resources (&amp;amp; money)&lt;/li&gt;
&lt;li&gt;Build timeouts&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#waiting-sucks"&gt;
  &lt;/a&gt;
  Waiting sucks
&lt;/h3&gt;

&lt;p&gt;Besides the fact you are sitting around waiting for a build to complete, with long build times you are also destroying the immediate feedback loop that most developers enjoy nowadays with things like &lt;a href="https://webpack.js.org/concepts/hot-module-replacement/"&gt;Hot Module Replacement&lt;/a&gt;. Most development happens locally, but for times where you need to test a live site, do you really want to wait more than 5 minutes to see how things went? Netlify's default timeout is 15 minutes, and if you are waiting that long just for a timeout to occur, you are not getting much done that day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wasting-resources-amp-money"&gt;
  &lt;/a&gt;
  Wasting resources (&amp;amp; money)
&lt;/h3&gt;

&lt;p&gt;Building your site from Gatsby takes computing resources: a server needs to run the build process and memory needs to be allocated. A 45-minute build certainly beats running your own server 24/7, but Netlify charges by build minute. Those 45-minute builds will add up quickly, especially compared to &amp;lt;10 or &amp;lt;5 minute builds.&lt;/p&gt;

&lt;p&gt;At Anvil, we're on a mission to eliminate paperwork, for many reasons. One of which is to help the environment. What's another way to help the environment? You guessed it: keep those build times low! Together, we can save the 🌴🎄🌳 and some ⚡️🔋🔌, all while saving some 💰🤑💸.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-timeouts"&gt;
  &lt;/a&gt;
  Build timeouts
&lt;/h3&gt;

&lt;p&gt;Build timeouts and wasting resources are two reasons that go hand in hand. Timeouts are there specifically for preventing excessive resource usage and so you don't get charged 10x what you normally pay when your deploy is accidentally stuck in an infinite loop.&lt;/p&gt;

&lt;p&gt;But doesn't that make timeouts a good thing? Yes. Except in the case where your site doesn't loop infinitely (I hope most of the time) and you are in a time crunch to get features out. Local development with SSGs like Gatsby relaxes the optimizations so you can develop faster. It's likely you made lots of changes that worked locally, only for the build to timeout when deploying to production. Incredibly frustrating and potentially release-ruining, yet build timeouts are still helpful and critical to have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-your-build-timeout"&gt;
  &lt;/a&gt;
  Avoiding your build timeout
&lt;/h2&gt;

&lt;p&gt;Now let's dive into actually resolving the issue of long builds. This blog post was inspired by an urgent need to reduce our build time for this very site (useanvil.com), and all the tips below were the things we did to reduce our bloated build time &lt;strong&gt;from 55+ minutes down to &amp;lt;5 minutes&lt;/strong&gt;, plus some others we might do in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#audit-your-site"&gt;
  &lt;/a&gt;
  Audit your site
&lt;/h3&gt;

&lt;p&gt;Before you significantly change any configuration, code, or assets, review your codebase and site and remove dead code.&lt;/p&gt;

&lt;p&gt;Part of the magic that Gatsby provides is creating a page template for pages like blog posts, documentation, and other article-based pages. Then, you supply the data for each article (usually in Markdown) and Gatsby builds each page with that template. So it might seem like removing 1 JS file and a few lines of code won't make a big difference, but in reality that could be tens, hundreds or even thousands of pages that are built statically.&lt;/p&gt;

&lt;p&gt;In our case, we removed an outdated template of the site and all the articles with it. A 1-minute change in our codebase yielded a 15+ minute build time reduction, &lt;strong&gt;from 55+ minutes to ~40 minutes&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-caching"&gt;
  &lt;/a&gt;
  Enable caching
&lt;/h3&gt;

&lt;p&gt;We had caching enabled with &lt;a href="https://github.com/jlengstorf/netlify-plugin-gatsby-cache#readme"&gt;this deprecated plugin&lt;/a&gt; already, but we did upgrade to the &lt;a href="https://github.com/netlify/netlify-plugin-gatsby#readme"&gt;Essential Gatsby Plugin&lt;/a&gt;. Since we already had caching enabled, there wasn't a huge improvement in build times. But if your site is image heavy, your build time will be dramatically reduced after the first build to load the cache with pages and assets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compress-images"&gt;
  &lt;/a&gt;
  Compress images
&lt;/h3&gt;

&lt;p&gt;I'm not talking about gzipping your images to be sent to the client when they visit your site. Gatsby (and all the other SSG's) take care of that for you.&lt;/p&gt;

&lt;p&gt;I'm referring to before your build process even starts. There are two kinds of image compression: &lt;a href="https://www.sciencedirect.com/topics/engineering/lossless-compression#:~:text=Lossless%20compression%20is%20a%20compression,shorthand%20to%20signify%20redundant%20data."&gt;lossless&lt;/a&gt; and &lt;a href="https://www.sciencedirect.com/topics/computer-science/lossy-compression#:~:text=Lossy%20compression%20is%20a%20method,image%2C%20thereby%20reducing%20its%20size."&gt;lossy&lt;/a&gt;. Lossless reduces file size without reducing image quality, and lossy reduces file size while reducing image quality (supposed to be imperceptible to the human eye, but that is for you to determine).&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://trimage.org/"&gt;trimage&lt;/a&gt;, a cross platform lossless image compression tool, we reduced the images for ~120 different articles, totalling 20MB+ reduced. We can squeeze more out of our images if we use lossy compression, and run it on all images on our site. But in the short term we targeted the heavy hitters on our article-based pages.&lt;/p&gt;

&lt;p&gt;I'd like to highlight that for this blog post and to meet our deadline, I only ran the compression tool on 2 directories with ~120 articles worth of images. To prevent us from getting into a build time hole again, I've set up the following bash script in a GitHub action, so we automatically compress png and jpg files as pull requests come in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# example usage: ./compress-images.sh -q src .exiftool.config&lt;/span&gt;

&lt;span class="c"&gt;# to be used in GH action - need to install trimage &amp;amp; exiftool to use&lt;/span&gt;

&lt;span class="c"&gt;# run this script on a directory or file to compress all pngs, jpgs, and jpegs&lt;/span&gt;
&lt;span class="c"&gt;# if run on a directory, this will recurse to subdirectories&lt;/span&gt;

&lt;span class="c"&gt;# this script will only attempt compression once on an image,&lt;/span&gt;
&lt;span class="c"&gt;# afterwards the script will not run again -- this is done by adding a meta flag&lt;/span&gt;
&lt;span class="c"&gt;# to the image file itself that signifies trimage compression was already run&lt;/span&gt;

&lt;span class="nv"&gt;VERBOSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true

&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; True &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"--quiet"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-q"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;VERBOSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false
    shift &lt;/span&gt;1
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;break
&lt;/span&gt;&lt;span class="k"&gt;fi
done

&lt;/span&gt;&lt;span class="nv"&gt;EXIFTOOL_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;filename &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;/&lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;$VERBOSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Entering directory &lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="nv"&gt;$EXIFTOOL_CONFIG&lt;/span&gt;
  &lt;span class="k"&gt;fi

  &lt;/span&gt;&lt;span class="nv"&gt;TRIMMED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;exiftool &lt;span class="nt"&gt;-trimmed&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$TRIMMED&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;".png"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;".jpg"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;".jpeg"&lt;/span&gt;&lt;span class="o"&gt;)]]&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;$VERBOSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Trimming &lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    trimage &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt;
    exiftool &lt;span class="nt"&gt;-config&lt;/span&gt; &lt;span class="nv"&gt;$EXIFTOOL_CONFIG&lt;/span&gt; &lt;span class="nt"&gt;-trimmed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="nt"&gt;-overwrite_original&lt;/span&gt;
  &lt;span class="k"&gt;fi
done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;compress-images.sh: bash script to compress all images in a given directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Besides running trimage on all files, the script also uses a tool called &lt;a href="https://exiftool.org/"&gt;exiftool&lt;/a&gt; that adds a meta flag to the compressed image. This is so we don't run trimage again on already compressed files. This doesn't have any impact on the build time for Gatsby/Netlify (the one this blog post is on), but this will save immense time (I'm talking hours, especially if your project has a lot of images) on pull requests that run this GitHub Action by avoiding compressing images twice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#------------------------------------------------------------------------------
# File:         example.config
#
# Description:  configuration to enable trimmed flag for png and jpeg
#
# Notes:        See original example @ https://exiftool.org/config.html
#------------------------------------------------------------------------------

# NOTE: All tag names used in the following tables are case sensitive.

# The %Image::ExifTool::UserDefined hash defines new tags to be added
# to existing tables.
%Image::ExifTool::UserDefined = (
    # new PNG tags are added to the PNG::TextualData table:
    'Image::ExifTool::PNG::TextualData' =&amp;gt; {
        trimmed =&amp;gt; { },
    },
    'Image::ExifTool::XMP::Main' =&amp;gt; {
        trimmed =&amp;gt; {
            SubDirectory =&amp;gt; {
                TagTable =&amp;gt; 'Image::ExifTool::UserDefined::trimmed',
            },
        },
    }
);

%Image::ExifTool::UserDefined::trimmed = (
    GROUPS        =&amp;gt; { 0 =&amp;gt; 'XMP', 1 =&amp;gt; 'XMP-trimmed', 2 =&amp;gt; 'Image' },
    NAMESPACE     =&amp;gt; { 'trimmed' =&amp;gt; 'http://ns.myname.com/trimmed/1.0/' },
    WRITABLE      =&amp;gt; 'string',
    trimmed =&amp;gt; { },
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;.exiftool.config: config file to enable custom meta tag (trimmed) on PNGs and JPEGs&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's a video I sped up of MBs dropping as I ran the above script with trimage and exiftool, something to the delight of developers everywhere:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_XwVoco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmkm4gov7ygitt1kxues.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_XwVoco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmkm4gov7ygitt1kxues.gif" alt="trimmed-images"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;First 1/4 of all files in &lt;code&gt;src&lt;/code&gt;. You'll notice that it hangs around 106.4MB (and actually slightly goes higher in bytes). That is because the script is running on all files in &lt;code&gt;src&lt;/code&gt;, including the blog-posts I already ran trimage on ad-hoc. The slight bump in bytes is exiftool adding the compression flag to metadata on the image.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#query-only-for-what-you-need"&gt;
  &lt;/a&gt;
  Query only for what you need
&lt;/h3&gt;

&lt;p&gt;Gatsby uses GraphQL to get data from Markdown-based articles, and for various other parts of your site. Each query takes time during your build so make sure you do 2 things to mitigate query time during your build:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Only query for data you need&lt;/em&gt; - in our case, we had 1-2 fields on each article being queried (on over 100 articles)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Only query for data once&lt;/em&gt; - we adhere to this one well, but avoid calling the same query in a different place. If possible, pass down the data via props to components that need it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enabling the upgraded Essential Gatsby plugin, compressing ~120 pages worth of images, and removing fields from GraphQL queries brought the build time down by another ~15 minutes, &lt;strong&gt;from ~40 minutes to ~25 minutes&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#keep-up-to-date-with-package-versions"&gt;
  &lt;/a&gt;
  Keep up to date with package versions
&lt;/h3&gt;

&lt;p&gt;This just in: technology gets better with time. It's true! Just like how the Mesopotamians invented the wheel to revolutionize their lives, we upgraded Gatsby from v2.x to v3.x (3.14.1 to be specific) and upgraded to the latest versions of our plugins which revolutionized our build time by another ~15 minutes! Just by upgrading major versions, we went from &lt;strong&gt;~25 minutes to ~10 minutes&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-compression-on-all-the-things"&gt;
  &lt;/a&gt;
  Image compression on all the things
&lt;/h3&gt;

&lt;p&gt;The above section was aimed at the first pass on our biggest directories of images. The second time around, running on our &lt;em&gt;entire &lt;code&gt;src&lt;/code&gt; directory&lt;/em&gt;, got us down &lt;strong&gt;from ~10 minutes to ~6m minutes&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#gatsbys-experimental-flags"&gt;
  &lt;/a&gt;
  Gatsby's experimental flags
&lt;/h3&gt;

&lt;p&gt;The last hurdle is actually one we have yet to deploy to this site—I'm still playing around with the configuration, but using Gatsby's "experimental" flags has &lt;strong&gt;our site building in &amp;lt;5 minutes&lt;/strong&gt; locally &amp;amp; in test environments. The ones I'm currently using and testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES=true&lt;/code&gt; - environment variable to turn on incremental page build, which only builds pages that have changed since the last build instead of building all the pages again. This is shipped as part of Gatsby V3, so if you are using it V3, you have this baked in.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY=32&lt;/code&gt; - environment variable that controls how many GraphQL queries are run in parallel. The default is 4.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GATSBY_CPU_COUNT=logical_cores&lt;/code&gt; - environment variable that controls how many cores are used while building. The default is &lt;code&gt;physical_cores&lt;/code&gt;, and you can supply a definitive number like &lt;code&gt;2&lt;/code&gt; instead of letting Gatsby calculate your physical or logical cores.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PARALLEL_SOURCING: true&lt;/code&gt; - gatsby-config flag to run sourcing plugins in parallel. Requires Node v14.10 or higher.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PARALLEL_QUERY_RUNNING&lt;/code&gt; - gatsby-config flag to run GraphQL queries in parallel. I would recommend using this over &lt;code&gt;GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY&lt;/code&gt;, since this is managed/optimized by the Gatsby team. Requires Node v14.10 or higher.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FAST_DEV: true&lt;/code&gt; - won't help with your build timeouts, but will help speed up your dev build and dev page loading.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#extra-stuff-we-didnt-do-yet"&gt;
  &lt;/a&gt;
  Extra stuff we didn't do (yet)
&lt;/h3&gt;

&lt;p&gt;Gatsby has an entire page dedicated to all the different ways they recommend improving your build performance, which you can find &lt;a href="https://www.gatsbyjs.com/docs/how-to/performance/improving-build-performance/"&gt;here&lt;/a&gt;. The steps I've taken in this blog post and what Gatsby recommends are great ways to reduce your build time, but they are not the only ways! If you exhaust both lists, think outside the box about how you can effectively improve your build and site performance.&lt;/p&gt;

&lt;p&gt;There are two actions from the Gatsby recommendations that I like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.netlify.com/blog/2020/02/25/gatsby-build-speed-improvements-with-parallel-image-processing/"&gt;&lt;em&gt;Parallelize your image processing&lt;/em&gt;&lt;/a&gt; - this is done natively on Gatsby Cloud; if you are like us and host your site on Netlify, this is the plugin to (experimentally) parallelize image processing as well.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gatsbyjs.com/docs/how-to/performance/improving-site-performance/#reduce-your-javascript-bundle-cost"&gt;&lt;em&gt;Optimize your bundle(s)&lt;/em&gt;&lt;/a&gt; - we have not had the need to do this yet, but auditing and optimizing your JS bundle(s) will help bring the build time down, as well as improve your site performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#gatsby-specific-problem-node-out-of-memory"&gt;
  &lt;/a&gt;
  Gatsby specific problem - Node out of memory
&lt;/h3&gt;

&lt;p&gt;One problem we did run into while hitting our timeout was Node running out of memory. We likely hit this problem since we pushed &lt;em&gt;a lot&lt;/em&gt; of changes all at once. In reality this isn't a Gatsby problem, more of a Node problem. It just happens to affect a lot of Gatsby users, as you can find &lt;a href="https://github.com/gatsbyjs/gatsby/issues/15190"&gt;the issue and solution here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, if you run into something similar and get a stack trace like this while trying to build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⠦ Building production JavaScript and CSS bundles

&amp;lt;--- Last few GCs ---&amp;gt;

[19712:0x2dbca30]    45370 ms: Scavenge 1338.2 (1423.9) -&amp;gt; 1337.3 (1423.9) MB, 2.9 / 0.0 ms  (average mu = 0.163, current mu = 0.102) allocation failure
[19712:0x2dbca30]    45374 ms: Scavenge 1338.4 (1423.9) -&amp;gt; 1337.5 (1423.9) MB, 2.8 / 0.0 ms  (average mu = 0.163, current mu = 0.102) allocation failure
[19712:0x2dbca30]    45378 ms: Scavenge 1338.6 (1423.9) -&amp;gt; 1337.7 (1424.4) MB, 2.6 / 0.0 ms  (average mu = 0.163, current mu = 0.102) allocation failure


&amp;lt;--- JS stacktrace ---&amp;gt;

==== JS stack trace =========================================

    0: ExitFrame [pc: 0x34eb54adbe1d]
    1: StubFrame [pc: 0x34eb54a875c2]
Security context: 0x2caa7a21e6e9 &amp;lt;JSObject&amp;gt;
    2: /* anonymous */(aka /* anonymous */) [0x23804dd52ac9] [/home/derek/dev/project1/node_modules/@babel/core/lib/transformation/file/merge-map.js:~155] [pc=0x34eb5534b963](this=0x01389b5022b1 &amp;lt;null&amp;gt;,m=0x1c2e6adbae29 &amp;lt;Object map = 0x11c6eb590b11&amp;gt;)
    3: arguments adaptor frame: 3-&amp;gt;1
    4: forEach...

FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need to increase your node heap size by setting the &lt;code&gt;NODE_OPTIONS&lt;/code&gt; environment variable during build time to &lt;code&gt;--max_old_space_size=4096&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For Netlify users, that means doing one of the following (based on how you configure your project):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you configure your project yourself, in your &lt;code&gt;netlify.toml&lt;/code&gt; add this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build.environment]&lt;/span&gt;
  &lt;span class="py"&gt;NODE_OPTIONS&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"--max_old_space_size=4096"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If you use the Netlify dashboard to configure, go to &lt;code&gt;Build &amp;amp; Deploy &amp;gt; Environment&lt;/code&gt;. Add a variable called &lt;code&gt;NODE_OPTIONS&lt;/code&gt;, set it's value to literally &lt;code&gt;--max_old_space_size=4096&lt;/code&gt;, with no quotations. Like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouhDRRJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxriv2o0pdy409t3zu4w.png" alt="node options"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-quest-for-sub-minute-build-times"&gt;
  &lt;/a&gt;
  The quest for sub minute build times
&lt;/h2&gt;

&lt;p&gt;Believe it or not, sub minute build times do exist. And for sites with an immense number of pages too. The easiest way to get there is to throw more computing power at it: &lt;a href="https://www.gatsbyjs.com/docs/how-to/performance/improving-build-performance/#run-builds-on-a-machine-with-more-and-higher-powered-cpus"&gt;Gatsby even mentions it as one of their tips to reduce build time&lt;/a&gt;. But for most of us, we don't have infinite compute resources at our disposal, and as we learned earlier we want to save some power and money!&lt;/p&gt;

&lt;p&gt;I hope you learned something in this post, so you take heed and avoid your build timeout in advance of your big releases. Continue on for that sub minute build time, and even if it doesn't come today—remember that technology is getting better and more efficient everyday. If you have any questions or want to share your build optimization tips, let us know at &lt;a href="//mailto:developers@useanvil.com"&gt;developers@useanvil.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt;derivatives (none of which are the topic of this blog post) such as:&lt;br&gt;
  &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;SSR: Server Side Rendering&lt;/li&gt;
    &lt;li&gt;ISG: Incremental Static (Re)Generation&lt;/li&gt;
    &lt;li&gt;DSG: Deferred Static Generation&lt;/li&gt;
  &lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>gatsby</category>
      <category>css</category>
    </item>
    <item>
      <title>A Development Project With Awesome Graph Algorithm Implementation And PWA</title>
      <author>Souvik Roy</author>
      <pubDate>Wed, 20 Oct 2021 20:17:16 +0000</pubDate>
      <link>https://dev.to/souvik1406/a-development-project-with-awesome-graph-algorithm-implementation-and-pwa-4lhk</link>
      <guid>https://dev.to/souvik1406/a-development-project-with-awesome-graph-algorithm-implementation-and-pwa-4lhk</guid>
      <description>&lt;p&gt;So in this single project I chose to sharpen my skills both as a developer and a coder and what better way could be there than to create a website to showcase easy but cool games made from scratch. In this one project I learned javaScript from basic to advanced level and also mastered the art of creating PWA. &lt;/p&gt;

&lt;p&gt;The fact that I had challenged myself to learn graph algorithms took another level of a turn when I was able to understand the minimax algorithm and use beginner friendly JavaScript code to make it come to life. &lt;/p&gt;

&lt;p&gt;The code for the project is in the repo link given below, be sure to download and clone and edit it and commit necessary UI changes as per your need I so wanted to do this in react but then again I wanted a project to be created in native JavaScript and focus more on logic building. Therefore the UI is obviously not great for that completely beats the purpose of the project. The App has a link to redirect you to my blog's PWA and that thing has my front-end skills showcased well. Let me link down both of them below: &lt;/p&gt;

&lt;p&gt;This PWA Gaming App Code : &lt;a href="https://github.com/Souvik1406/gaming-project-minimaxalgo-setservicePWA-implementaion-L_Heaven"&gt;https://github.com/Souvik1406/gaming-project-minimaxalgo-setservicePWA-implementaion-L_Heaven&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Portfolio Page Code : &lt;a href="https://github.com/Souvik1406/advancedblog"&gt;https://github.com/Souvik1406/advancedblog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the hosted versions of the project on the following links : &lt;/p&gt;

&lt;p&gt;Blog : &lt;a href="https://souvikblog2-0new.netlify.app/"&gt;https://souvikblog2-0new.netlify.app/&lt;/a&gt;&lt;br&gt;
Game : &lt;a href="https://minimax-based-game-pwa-by-souvik-roy.netlify.app/"&gt;https://minimax-based-game-pwa-by-souvik-roy.netlify.app/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>webdev</category>
      <category>pwa</category>
    </item>
    <item>
      <title>Day 35/100 Personal Hotspot</title>
      <author>Rio Cantre</author>
      <pubDate>Wed, 20 Oct 2021 20:03:21 +0000</pubDate>
      <link>https://dev.to/riocantre/day-35100-personal-hotspot-bd3</link>
      <guid>https://dev.to/riocantre/day-35100-personal-hotspot-bd3</guid>
      <description>&lt;p&gt;There was a silver-lining of the internet connections I had this past few days. Though all of my schedule got interupted, I found that once you got disturb, something is not working well. It's either the other party to disturb your inner peace. I got my Personal Hotspot for emergency purposes. Though it's costly at least I secure the future for straight flow of learning to code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Crfsp7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34lkplzgrd33fwhdgo92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Crfsp7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34lkplzgrd33fwhdgo92.png" alt="new lesson"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>codereview</category>
    </item>
    <item>
      <title>The Holy Grail of UIKit: Delegate Pattern</title>
      <author>Tarik Dahic</author>
      <pubDate>Wed, 20 Oct 2021 19:15:00 +0000</pubDate>
      <link>https://dev.to/daholino/the-holy-grail-of-uikit-delegate-pattern-1den</link>
      <guid>https://dev.to/daholino/the-holy-grail-of-uikit-delegate-pattern-1den</guid>
      <description>&lt;p&gt;When I started learning to develop apps for iOS I stumbled upon the delegate pattern for the first time. Adopting &lt;em&gt;UITableViewDataSource&lt;/em&gt; and &lt;em&gt;UITableViewDelegate&lt;/em&gt; protocols felt very strange and confusing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why am I doing this? Is this really how to do these things? I asked myself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a couple of weeks of learning and reading materials, I clicked and really started to enjoy using this pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;According to Apple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Delegation is a simple and powerful pattern in which one object in a program acts on behalf of, or in coordination with, another object. The delegating object keeps a reference to the other object—the delegate—and at the appropriate time sends a message to it. The message informs the delegate of an event that the delegating object is about to handle or has just handled. The delegate may respond to the message by updating the appearance or state of itself or other objects in the application, and in some cases, it can return a value that affects how an impending event is handled. The main value of delegation is that it allows you to easily customize the behavior of several objects in one central object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a very good definition. But let’s take it step by step by following the illustration below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XUJ1eMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/delegate-illustration.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XUJ1eMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tarikdahic.com/images/delegate-illustration.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Someone creates a &lt;strong&gt;Worker&lt;/strong&gt;. A Worker is someone who does the work and then notifies us when the work is &lt;em&gt;completed&lt;/em&gt; or when something is &lt;em&gt;needed&lt;/em&gt; to continue the work.&lt;/li&gt;
&lt;li&gt;We tell the worker: “&lt;em&gt;This is your delegate. Ask it for something or notify it when you are done.&lt;/em&gt;”. That depends on the language that is known between the worker and its delegate. This is always known upfront.&lt;/li&gt;
&lt;li&gt;The Worker starts to work.&lt;/li&gt;
&lt;li&gt;While the Worker is working it needs some data to continue its work. The worker asks its delegate “&lt;em&gt;How should I do this or that?&lt;/em&gt;” and the delegate knowing what the worker needs provides it. When the Worker finishes the work it can tell its delegate “&lt;em&gt;I finished the work and here are the results!&lt;/em&gt;”.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how the delegate pattern works. The communication flow is always 1-to-1 between the delegate and the worker.&lt;/p&gt;

&lt;p&gt;The worker is always doing the same job, but by providing different data and reacting differently on work completions we can reuse the worker in a lot of places where we need to handle the different cases.&lt;/p&gt;

&lt;p&gt;Delegation works great when there is a clear relationship between the owner and the “&lt;em&gt;Worker&lt;/em&gt;”. For other cases, you will want to resort to other patterns.&lt;/p&gt;

&lt;p&gt;I would also like to repeat that the worker knows what to send or request from the delegate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translating-this-into-code"&gt;
  &lt;/a&gt;
  Translating this into code
&lt;/h2&gt;

&lt;p&gt;After we’ve covered the basics with the theory we will try to translate this into code. I will be using Swift to implement this pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-protocol"&gt;
  &lt;/a&gt;
  Define the protocol
&lt;/h3&gt;

&lt;p&gt;We should always start with the delegate protocol, the interface or the language that will the delegate adopt and that the worker will know in advance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;WorkerDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didFinishWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I declared &lt;em&gt;WorkerDelegate&lt;/em&gt; protocol that has one method for this example and that is &lt;em&gt;didFinishWork()&lt;/em&gt;. When the worker completes the work it will use the delegate that has conformance to &lt;em&gt;WorkerDelegate&lt;/em&gt; protocol and will call the &lt;em&gt;didFinishWork()&lt;/em&gt; method on it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#anyobject"&gt;
  &lt;/a&gt;
  AnyObject
&lt;/h4&gt;

&lt;p&gt;You can notice that the &lt;em&gt;WorkerDelegate&lt;/em&gt; protocol conforms to another one and that is &lt;strong&gt;AnyObject&lt;/strong&gt;. We use AnyObject to limit that only class types can inherit our delegate protocol. Only class objects can be weak because they are passed by reference and we want weak delegates so that we don’t create &lt;strong&gt;retain cycles&lt;/strong&gt; while using delegates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-worker"&gt;
  &lt;/a&gt;
  Define the worker
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Worker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;WorkerDelegate&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;startWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Start some work..&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="c1"&gt;// .. and when it is completed, notify the delegate:&lt;/span&gt;
        &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;didFinishWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Worker class has a property &lt;strong&gt;delegate&lt;/strong&gt; that is of type &lt;em&gt;WorkerDelegate&lt;/em&gt;. It has a weak reference to something that will be stored in this variable and that is, as I mentioned above to avoid creating potential retain cycles. The delegate is also optional so by default it is &lt;strong&gt;nil&lt;/strong&gt;. This is useful in some cases where setting the delegate is not mandatory.&lt;/p&gt;

&lt;p&gt;The Worker has a &lt;em&gt;startWork()&lt;/em&gt; method that will start some work and when the work is completed it will notify its delegate by invoking the &lt;em&gt;didFinishWork()&lt;/em&gt; method if the delegate is set.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-worker-and-adopt-the-workerdelegate"&gt;
  &lt;/a&gt;
  Create the worker and adopt the WorkerDelegate
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;// It is always important to set the delegate before we invoke the worker to start doing something.&lt;/span&gt;
        &lt;span class="c1"&gt;// Better alternative could be to pass the delegate in the initializer of the Worker.&lt;/span&gt;
        &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

        &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;startWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;WorkerDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didFinishWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Worker finished the work. Now we can react to it by fetching some data or updating the UI.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;ViewController&lt;/em&gt; has a &lt;strong&gt;worker&lt;/strong&gt; property. In the &lt;em&gt;viewDidLoad()&lt;/em&gt; lifecycle method of the &lt;em&gt;ViewController&lt;/em&gt;, we set the delegate of the worker to &lt;em&gt;self&lt;/em&gt;, so that when the worker is done it will notify the &lt;em&gt;ViewController&lt;/em&gt; instance. After setting the delegate, we invoke the &lt;em&gt;startWork&lt;/em&gt;() method of the worker and we wait for it to complete to notify us via the &lt;em&gt;didFinishWork()&lt;/em&gt; method that we conformed to via &lt;em&gt;WorkerDelegate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I always like to conform to different protocols in the extensions of the classes because it improves the organisation and the readability of the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples-from-uikit"&gt;
  &lt;/a&gt;
  Examples from UIKit
&lt;/h2&gt;

&lt;p&gt;While working with UIKit we use delegates on daily basis so this is why it is very important to understand this pattern. A good tip for you is when you need to conform to some delegate protocol is to open the protocol definition and see what it has to offer.&lt;/p&gt;

&lt;p&gt;Here are a couple of examples:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uitableviewdatasource"&gt;
  &lt;/a&gt;
  UITableViewDataSource
&lt;/h4&gt;

&lt;p&gt;We use &lt;em&gt;UITableViewDataSource&lt;/em&gt; to provide the &lt;em&gt;UITableView&lt;/em&gt; with data. A data source object responds to data-related requests from the table. The minimum for every &lt;em&gt;UITableView&lt;/em&gt; that we need to do is to provide it with the numbers of rows per section and to provide &lt;em&gt;UITableViewCell&lt;/em&gt; for every row. We do that by implementing methods from the &lt;em&gt;UITableViewDataSource&lt;/em&gt; protocol:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return the number of rows for the table. We'll assume that the table has only one section.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class="nv"&gt;section&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Provide a cell object for each row&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cellForRowAt&lt;/span&gt; &lt;span class="nv"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IndexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;UITableViewCell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Fetch a cell of the appropriate type&lt;/span&gt;
   &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;cell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dequeueReusableCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;withIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"cellTypeIdentifier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="c1"&gt;// Configure the cell using items[indexPath.row]&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we can see how the &lt;em&gt;UITableView&lt;/em&gt; asks us (the data source delegate) for data that it will display.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uitableviewdelegate"&gt;
  &lt;/a&gt;
  UITableViewDelegate
&lt;/h4&gt;

&lt;p&gt;With &lt;em&gt;UITableViewDelegate&lt;/em&gt; we can react to some interactions with the &lt;em&gt;UITableView&lt;/em&gt;. In the example below we can override the &lt;em&gt;didSelectRowAt&lt;/em&gt; delegate method so that we get notified when user presses the &lt;em&gt;UITableView&lt;/em&gt; row.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didSelectRowAt&lt;/span&gt; &lt;span class="nv"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IndexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// React to the selection of the cell at the indexPath&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;UITableViewDelegate&lt;/em&gt; can also be used for more advanced &lt;em&gt;UITableView&lt;/em&gt; customization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mfmailcomposeviewcontrollerdelegate"&gt;
  &lt;/a&gt;
  MFMailComposeViewControllerDelegate
&lt;/h4&gt;

&lt;p&gt;If we want to use native system UI and configuration to send an email we can use &lt;em&gt;MFMailComposeViewController&lt;/em&gt;. We will create the instance of &lt;em&gt;MFMailComposeViewController&lt;/em&gt;, configure it, adopts its delegate and send the email. The email completion will be delegated to us in the delegate method below that we implemented by overriding &lt;em&gt;MFMailComposeViewControllerDelegate&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;mailComposeController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;MFMailComposeViewController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didFinishWith&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;MFMailComposeResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// React to mail sending completion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here we can see if the email sending was successful or not and react according to that information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uiimagepickercontrollerdelegate"&gt;
  &lt;/a&gt;
  UIImagePickerControllerDelegate
&lt;/h4&gt;

&lt;p&gt;If you want to use some images or videos from the Photos app you possibly implemented &lt;em&gt;UIImagePickerController&lt;/em&gt; and conformed to its protocol so that you know when the user picked the media files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;imagePickerController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIImagePickerController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didFinishPickingMediaWithInfo&lt;/span&gt; &lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;UIImagePickerController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;InfoKey&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use picked images or videos&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The delegate pattern is very popular in the iOS world and it is very present in UIKit. I like this pattern and I use it in my work but it has some limitations. The communication is always 1-to-1 and that is not practical in some cases so we need to resort to something like an Observer pattern. The amount of code that needs to be added is not small if we are developing something trivial and the testing is harder.&lt;/p&gt;

&lt;p&gt;Alternative to using delegates can be passing functions to “&lt;em&gt;Workers&lt;/em&gt;” and invoking them when we need something or when we want to notify someone. This can result in fewer lines of code but can complicate things if we overuse it. We would also need to be careful not to create retain cycles with this approach.&lt;/p&gt;

&lt;p&gt;I hope that this article helped you to understand or to strengthen your knowledge with this pattern.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to Mine Shiba Inu SHIB with Your Computer in Under 5 Minutes in 2021</title>
      <author>Course Probe</author>
      <pubDate>Wed, 20 Oct 2021 18:35:44 +0000</pubDate>
      <link>https://dev.to/courseprobe/how-to-mine-shiba-inu-shib-with-your-computer-in-under-5-minutes-in-2021-4e13</link>
      <guid>https://dev.to/courseprobe/how-to-mine-shiba-inu-shib-with-your-computer-in-under-5-minutes-in-2021-4e13</guid>
      <description>&lt;p&gt;A Step by Step Guide to Pool Mining Shiba Inu SHIB Coin in 2021 with a CPU!&lt;/p&gt;

&lt;p&gt;Sometimes mining can seem to be too complex for the average computer user, so I thought about putting together a quick guide to get you excited about mining cryptocurrency and Shiba SHIB in particular.&lt;/p&gt;

&lt;p&gt;Anyone can start mining Shiba Inu with any computer in under 5 minutes with this guide, regardless of your technical skill level you will be able to increase your crypto knowledge and start mining SHIB with your CPU today!!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;STEP 1:&lt;/strong&gt; Get yourself a Wallet.&lt;/p&gt;

&lt;p&gt;I recommend you installing Metamask as a Chrome extension, you can get it at metamask.io&lt;/p&gt;

&lt;p&gt;Make sure you connect the Binance Smart Chain network to metamask (Google the instructions...) or get them from this link: &lt;a href="https://academy.binance.com/en/articles/connecting-metamask-to-binance-smart-chain"&gt;Binance Academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could also get Exodus or Atomic Wallet for you to get some other coin addresses without any hassle.&lt;/p&gt;

&lt;p&gt;Select the Binance Smart Chain in Metamask and copy your address. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2:&lt;/strong&gt; Download XMRIg from Github&lt;/p&gt;

&lt;p&gt;You could go to the xmrig site to download the latest version or from the oficial github repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xmrig/xmrig/releases"&gt;https://github.com/xmrig/xmrig/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you download the latest version you would have to edit a file named "pool_mine_example.bat" Inside this file you need to modify 2 lines.&lt;/p&gt;

&lt;p&gt;It could look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd %~dp0
xmrig.exe -o rx.unmineable.com:3333 -u SHIB:0xe1b2456a2Ad227b93D7a7421f1E9Cc57908cC37c.wini3#e4xd-wmzl -p x
pause
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second line after the -o you can see the Pool URL, in this case all you have to do depending on your location is to use one of the following URLs (select the one closer to your location).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USA:&lt;/strong&gt; rx-us.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Europe:&lt;/strong&gt; rx-eu.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Asia:&lt;/strong&gt; rx-asia.unmineable.com:3333&lt;/p&gt;

&lt;p&gt;Then, the third line is where you will enter your wallet's public address (copied in STEP 1), place it after the SHIB: and before the first dot "." .&lt;/p&gt;

&lt;p&gt;The general structure of the address needs to be:&lt;/p&gt;

&lt;p&gt;[COIN]:[Wallet address].[workerID]#[Code to lower mining fee]&lt;/p&gt;

&lt;p&gt;The workerID is any name you want to give to each computer where you are running the miner so it can easily be identified later on under the pool stats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The code after the # is important&lt;/strong&gt; because mining with that code will drop the Mining Fee from 1% to 0.75% (it makes a difference). You can start mining using that code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Run the file as an administrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" alt="XMRig Mining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, you are now running XMRig and are mining. Congrats !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Log into Unmineable to check your stats&lt;/p&gt;

&lt;p&gt;Unmineable.com is a mining Pool which allows you to mine with your CPU using RandomX and pay you in any coin you select. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" alt="Unmineable Site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you set up the address inside the XMRig config file ? &lt;/p&gt;

&lt;p&gt;Well, there you just let Unmineable know the coin you want to be paid in, in this example SHIB and then the address where they will transfer the mined coins.&lt;/p&gt;

&lt;p&gt;In order to check your balance, log into &lt;a href="https://unmineable.com"&gt;Unmineable&lt;/a&gt; and then select the coin you want to mine. In this example, SHIB.&lt;/p&gt;

&lt;p&gt;Then you can select the Tab that reads RandomX and enter your address in the box that reads "Enter your address to check your stats:". &lt;/p&gt;

&lt;p&gt;After doing this you will see the balance on your account and you will even be able to request a payment.&lt;/p&gt;




&lt;p&gt;Congrats, you are a miner now! &lt;/p&gt;

&lt;p&gt;I recommend downloading some software to monitor the running temperature of your CPU, a good and free one is Hardware Monitor.&lt;/p&gt;

&lt;p&gt;Try not to exceed the temperature more than 90 degrees celsius. In case you are mining with a laptop, change the thermal paste of your CPU, get it cleaned inside, and get some heat extractors for laptops.&lt;/p&gt;

&lt;p&gt;If you take care of the temperature your computer should work very well, the amount of coins you can mine will depend on the hashrate of your CPU. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to use a valid address for each coin, for example if you want to be paid in ADA then you need a valid Cardano blockchain address. In this example Binance Smart Chain is used and you would receive a SHiba Inu token on the BSC blockchain.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;If you are looking for more information, there's a good guide in a PDF ebook and is Free, get it at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" alt="Mining with CPU"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/how-to-start-mining-crypto-with-cpu"&gt;Start Mining with CPU&lt;/a&gt;&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>blockchain</category>
      <category>shiba</category>
    </item>
    <item>
      <title>Cool minecraft plugin! ITEMSADDER</title>
      <author>Dima Gashuk</author>
      <pubDate>Wed, 20 Oct 2021 18:26:27 +0000</pubDate>
      <link>https://dev.to/damfler/cool-minecraft-plugin-itemsadder-2cji</link>
      <guid>https://dev.to/damfler/cool-minecraft-plugin-itemsadder-2cji</guid>
      <description>&lt;h3&gt;
  &lt;a href="#this-is-all-serious"&gt;
  &lt;/a&gt;
  This is all serious!
&lt;/h3&gt;

&lt;p&gt;I got acquainted with the wonderful ItemsAdders plugin, this plugin allows you to make new items, blocks, weapons, potions on yml markup, in general, anything you want, even planes and cars!!!&lt;/p&gt;

&lt;p&gt;This plugin is like a framework that helps us do wonderful things. Everything we want can be done effortlessly, without any problems, just by prescribing the type of object, its properties, if desired, enchantment and texture (taken from your texture pack, about this separately).&lt;/p&gt;

&lt;p&gt;To begin with, I will show you screenshots of images from the plugin page and a link to this plugin:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pGK0iy8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m874pxuchv32r0f1modk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pGK0iy8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m874pxuchv32r0f1modk.png" alt="Preview"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3x_4kKo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k2omm8fldfu3jlxvmxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3x_4kKo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k2omm8fldfu3jlxvmxt.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-cost-of-the-plugin"&gt;
  &lt;/a&gt;
  The cost of the plugin
&lt;/h3&gt;

&lt;p&gt;The main problem of the plugin is its cost, it costs h 16.95 EUR, although I can say it's not very expensive for such a cool plugin, and I can say from hearsay that it's like 1-2 times to go to McDonald's :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opportunities"&gt;
  &lt;/a&gt;
  Opportunities
&lt;/h3&gt;

&lt;p&gt;I repeat, everything is possible here, from the usual sword texture, to cars, planes and new workbenches with their own mechanics.&lt;br&gt;
This plugin is well optimized, it can even compete with a huge number of mods, and the big plus is that it works without mods, and the server does not load from the word at all (for all the time of my game I have never experienced discomfort).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#texture-pack"&gt;
  &lt;/a&gt;
  Texture pack
&lt;/h3&gt;

&lt;p&gt;I mentioned that you use your own texture pack, this is not a joke, you will need to make ready-made textures or models, but do not rush to form them into a ready-made pack, because the texture pack structure of the ItemsAdder is different.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lessons-on-youtube"&gt;
  &lt;/a&gt;
  Lessons on YouTube
&lt;/h3&gt;

&lt;p&gt;I will teach lessons on this wonderful plugin on my YouTube channel, unfortunately they will be in Russian, for many it will be a minus:(&lt;br&gt;
But I also created a repository on github, where I will post ready-made templates of all types of items, I will attach the link later, as soon as everything is ready and I will be able to make sure that I put only allowed materials on display!&lt;/p&gt;

</description>
      <category>minecraft</category>
      <category>yml</category>
      <category>news</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deep Dive into CodeCast's Studio</title>
      <author>CodeCast</author>
      <pubDate>Wed, 20 Oct 2021 18:22:54 +0000</pubDate>
      <link>https://dev.to/codecast/deep-dive-into-codecasts-studio-3f68</link>
      <guid>https://dev.to/codecast/deep-dive-into-codecasts-studio-3f68</guid>
      <description>&lt;p&gt;We previously wrote about our Player in an earlier blog post, speaking about how it is the heart and soul of CodeCast. Following that analogy, our Studio is every other system in the body that keeps the heart pumping and alive. &lt;/p&gt;

&lt;p&gt;Without the Studio, there would be no Casts to watch. The Studio, &lt;a href="https://info.codecast.io/download"&gt;available to download&lt;/a&gt; on Mac, Windows &amp;amp; Linux, is how the users create Casts. The goal of this blog post is to take a deep dive into the Studio to show you exactly how it works, and exactly why you should be using it to teach code.&lt;/p&gt;

&lt;p&gt;Firstly, it’s free. That may sound like a gimmick or a catch, but currently, our entire community and software are entirely free to use. The goal of CodeCast is to allow people to teach code in a way that is intuitive, simple, and using software that does all the work for them. So let’s see how that works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-account"&gt;
  &lt;/a&gt;
  Creating An Account
&lt;/h3&gt;

&lt;p&gt;Before you can get started with making your &lt;a href="https://info.codecast.io/blog/how-to-make-your-first-cast"&gt;first ever Cast&lt;/a&gt;, you need to create an account. You can either use your email to sign up or you can authorize an account using your preexisting GitHub account.&lt;/p&gt;

&lt;p&gt;You can do this either by signing up directly on the Studio or signing up on &lt;a href="http://codecast.io/signup"&gt;our website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2lGU0Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/029i0a598qojw90lvqxo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2lGU0Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/029i0a598qojw90lvqxo.png" alt="Studio Sign Up View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note, you will be required to log in to the Studio and the website separately, as logging into one doesn’t automatically log you into the other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-studio-view"&gt;
  &lt;/a&gt;
  The Studio View
&lt;/h3&gt;

&lt;p&gt;Now that you’ve made an account (and logged in), we will begin to go over the Studio. This is the view you see now that you’re logged in:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iI-QTOFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh5prdjohk47yahytt39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iI-QTOFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh5prdjohk47yahytt39.png" alt="Studio View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-folder"&gt;
  &lt;/a&gt;
  Project Folder
&lt;/h3&gt;

&lt;p&gt;Clicking on Add another Project Folder allows you to add directories to your Cast. Anything inside the directory (with some limitations like node_modules) will be available to anyone watching your Cast. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InbxQ9E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98ek7nnaqh5t2jj4f2mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InbxQ9E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98ek7nnaqh5t2jj4f2mb.png" alt="Add Project Folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are able to add multiple directories and you can add directories once a Cast is live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRUPo3fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vrinmteojx783r58sf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRUPo3fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vrinmteojx783r58sf1.png" alt="Add folders while live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the Cast is live, any edits you make within that directory will reflect live on the Player. This means that you can write new lines of code in any existing files on your local machine (in the code editor of your choice), or you can create new files, folders, etc. all within the directory you uploaded, and it will be available to your audience.&lt;/p&gt;

&lt;p&gt;You’re also able to change the name of your directories within the studio by clicking on the pencil next to the uploaded directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgGpRYj3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yq8gwd77k00pck3qeqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgGpRYj3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yq8gwd77k00pck3qeqm.png" alt="Change folder name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding in any directories is encouraged, but completely optional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screen-sharing"&gt;
  &lt;/a&gt;
  Screen Sharing
&lt;/h3&gt;

&lt;p&gt;You’re able to add media to your videos via screen sharing, or with your webcam. You can also choose individual windows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XiDoHcNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4gkv10r7hal5nn8onhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XiDoHcNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4gkv10r7hal5nn8onhd.png" alt="Screen sharing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just click Select a Screen Sharing to select which screen or window you want to share.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhT39UO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcxne9bojx9f6aete33j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhT39UO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcxne9bojx9f6aete33j.png" alt="Select A Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can deactivate a screen during a live Cast by hitting the green window button to the left of the screen name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1WrgCYu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8l8jzdy02fek1tcjcw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WrgCYu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8l8jzdy02fek1tcjcw5.png" alt="Deactivate a screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also select which audio input you wish to include alongside your screen share. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#casting-details"&gt;
  &lt;/a&gt;
  Casting Details
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TpTOpv-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ang45ou44nsq6sg3ou3d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpTOpv-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ang45ou44nsq6sg3ou3d.png" alt="Casting Details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can enter casting details here before starting the Cast, or after the Cast is finished. Casting details, including the cover, can be edited at any point after the Cast has ended by going to the Cast on the website and hitting edit, or editing it on the Player directly after the Cast has ended.&lt;/p&gt;

&lt;p&gt;If you’re going to be sharing your Cast with people while it’s live, it’s highly recommended that you fill this out before casting. It can also be altered in the middle of a live Cast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permissions"&gt;
  &lt;/a&gt;
  Permissions
&lt;/h3&gt;

&lt;p&gt;Permissions by default will publish the Cast to your personal account with private access. Remember to change this to public if you’re doing a live Cast that you want others to view. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7YA_nd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0mfxiqo3zl4hsoz4wnz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7YA_nd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0mfxiqo3zl4hsoz4wnz.png" alt="Permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Permissions can be changed in the middle of a live Cast, or anytime after the Cast is published.&lt;/p&gt;

&lt;p&gt;If you belong to an organization, making the Cast private will still make it accessible to anyone else that is part of the organization, but not the general public. This is a great way for people to communicate with Casts across workplaces!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-view"&gt;
  &lt;/a&gt;
  Live View
&lt;/h3&gt;

&lt;p&gt;When you’re reading to start a Cast, hit the big green ‘Start Streaming” button and a countdown will appear like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iy9ySOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adjwuyope4wel55d2vo3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iy9ySOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adjwuyope4wel55d2vo3.gif" alt="Live view gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the countdown is finished, it will then look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Obc7bZTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxt7vr1zegbv1ykwbz3y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Obc7bZTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxt7vr1zegbv1ykwbz3y.png" alt="Live Studio View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It shows you that it’s live, gives you a live view count of people currently watching, as well as showcases the length that the Cast has been on for. &lt;/p&gt;

&lt;p&gt;Below that you can access the Cast URL by clicking the copy button directly to the right of the URL, or clicking on the new window button to open the Player. If you’re doing a live Cast, it is recommended that you keep the Player open to keep up with the chat!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKeNMENO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpdcj1103x41wyniqv8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKeNMENO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpdcj1103x41wyniqv8q.png" alt="Cast Url"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cast-ended"&gt;
  &lt;/a&gt;
  Cast Ended
&lt;/h3&gt;

&lt;p&gt;Once you’re done with the Cast, hit “End Streaming”. You’ll then see a summary of the Cast, including length. You’re also given the URL to access the recorded version of the Cast.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hC_ETeP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omp2rk4z82q2rvbmgedx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hC_ETeP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omp2rk4z82q2rvbmgedx.png" alt="Cast Ended Studio View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s important to note that it does take some time for any media to upload, so you’ll see a “preparing media” banner on the Player when opening the Cast right away after ending it. This will go away once the media has finished being uploaded.&lt;/p&gt;

&lt;p&gt;All in all, the Studio is an incredibly useful tool that combines both live streaming media and code, making it a stand-out product in the development world.&lt;/p&gt;

&lt;p&gt;Prefer a video tutorial? Watch the video below for a follow-along tutorial!‍&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dzlKc6rr0LU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>startup</category>
    </item>
    <item>
      <title>React/Webpack: From MB to KB. How we solved our bundling problem</title>
      <author>Georgios Kampitakis</author>
      <pubDate>Wed, 20 Oct 2021 17:50:54 +0000</pubDate>
      <link>https://dev.to/gkampitakis/reactwebpack-from-mb-to-kb-how-we-solved-our-bundling-problem-156e</link>
      <guid>https://dev.to/gkampitakis/reactwebpack-from-mb-to-kb-how-we-solved-our-bundling-problem-156e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was first posted on &lt;a href="https://tech.sovrn.com/2021/02/22/react-webpack-bundling.html"&gt;Sovrn Tech Blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article I am going to describe the mistakes we made in bundling our UI application written in React.&lt;/p&gt;

&lt;p&gt;The reasons we reached serving a bundle &amp;gt; &lt;code&gt;11.0mb&lt;/code&gt; for a relative small application and the steps we took in order to minimize and split that bundle for better loading performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-context"&gt;
  &lt;/a&gt;
  Some Context
&lt;/h2&gt;

&lt;p&gt;Our UI is a React application where we use &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; for bundling our application, &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; as a design system for our components and an internal library which is a wrapper of &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; that we use across the company for creating a cohesive and consistent brand identity in the UI. Finally we have split our application to smaller independent npm modules which we pull into our main UI like “plugins”.&lt;/p&gt;

&lt;p&gt;Bundling never has been an issue or at least noticeable enough that we had to take action. But after a extensive updates in all of our dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Webpack v4&lt;/code&gt; to &lt;code&gt;Webpack v5&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;React 16.8.x&lt;/code&gt; to &lt;code&gt;React 16.14.x&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Material-UI v3&lt;/code&gt; to &lt;code&gt;Material-UI v4&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;… and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;we started noticing our application was taking more time to load and was slower in a “cold start”.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With the term “cold start” I mean we haven’t used the application for a long time and when we visit our browser doesn’t have any resources cached.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Our first action was to visit Chrome Devtools and inspect what was slowing us down&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lG2Il5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c88np4fu6q2x51t1r45o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lG2Il5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c88np4fu6q2x51t1r45o.png" alt="Chrome Devtools Network Tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Time here is not representative as the screenshot is from local served instance&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we noticed the bundle was much bigger but we couldn’t understand what was different as our implementation remained the same so we should not be pulling more dependencies into our bundle.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solutions"&gt;
  &lt;/a&gt;
  The solution(s)
&lt;/h2&gt;

&lt;p&gt;We started by analyzing our bundle and understanding what exactly was delivered to the user. We found a webpack plugin that helped us to do this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;Webpack Bundle Analyzer&lt;/a&gt; - “Visualize size of webpack output files with an interactive zoomable treemap.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDkONQyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7pcblcxnzprq6x1ezj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDkONQyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7pcblcxnzprq6x1ezj4.png" alt="Webpack Bundle Analyzer TreeMap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;From this image we could right away understand that multiple things were wrong&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As you can see we were having multiples instances of the same library being pulled from different dependencies. For example &lt;code&gt;underground-ui-whitespace-sovrn-content&lt;/code&gt;, &lt;code&gt;underground-ui-sync-skys-services-content&lt;/code&gt;, etc, all those modules are the “plugins” I mentioned above, and they all have a copy of the &lt;code&gt;Material-UI&lt;/code&gt; even if &lt;code&gt;Material-UI&lt;/code&gt; is present in the main application. The same thing happened with React as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another issue was some “heavy” libraries we were not really utilizing to excuse relying on them, e.g. &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt;, &lt;a href="http://bluebirdjs.com/docs/getting-started.html"&gt;Bluebird&lt;/a&gt;, &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last mistake that was noticeable just from this view was that we were not tree shaking. It’s evident from &lt;code&gt;Material-UI&lt;/code&gt; icons section we were importing &lt;strong&gt;all&lt;/strong&gt; the icons. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we had a plan.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#peer-dependencies-and-versioning"&gt;
  &lt;/a&gt;
  Peer dependencies and versioning
&lt;/h3&gt;

&lt;p&gt;For the first issue we reviewed all of our internal UI “plugins” and we found that in our dependencies most of the duplicated libraries were locked in specific versions. By doing so, mistakenly were declaring that our “plugin” could only work with this specific version so we ended with different versions of the same library.&lt;/p&gt;

&lt;p&gt;The solution was using &lt;code&gt;peerDependencies&lt;/code&gt; and using ^ syntax in our versions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;^ in semantic versioning means we accept all minor releases ( e.g 1.x ) and not a specific one.&lt;/p&gt;

&lt;p&gt;Peer dependency means that your package needs a dependency that is the same exact dependency as the person installing your package.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now the main application was responsible for providing the dependencies to the “plugins” for running.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heavy-libraries"&gt;
  &lt;/a&gt;
  "Heavy" libraries
&lt;/h3&gt;

&lt;p&gt;Second step was removing the “heavy” libraries, it was easy removing &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt;, &lt;a href="http://bluebirdjs.com/docs/getting-started.html"&gt;Bluebird&lt;/a&gt;. We replaced the first with &lt;a href="https://date-fns.org/"&gt;date-fns&lt;/a&gt; and &lt;a href="http://bluebirdjs.com/docs/getting-started.html"&gt;Bluebird&lt;/a&gt; with native promises. &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt; unfortunately because of time constraints we could not refactor into moving out from some “handy” utilities it provides but we are planning to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tree-shaking"&gt;
  &lt;/a&gt;
  Tree shaking
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tree shaking is a term commonly used in the JavaScript context for dead-code elimination.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Third step was tree shaking and needed more investigation. So we started by reading for &lt;a href="https://mui.com/guides/minimizing-bundle-size/"&gt;Material-UI Minimizing Bundle Size&lt;/a&gt; and how to &lt;code&gt;import&lt;/code&gt; for shaking &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; components and icons but we could not find something wrong there. So our next option was &lt;a href="https://webpack.js.org/guides/tree-shaking/"&gt;Webpack Tree Shaking&lt;/a&gt;. Lot’s of interesting points there but the one we needed was this&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It relies on the static structure of ES2015 module syntax, i.e. import and export.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;but we were compiling our own modules and the main UI to &lt;code&gt;module: commonjs&lt;/code&gt; and &lt;code&gt;target: es5&lt;/code&gt; so Webpack was not able to understand what was “dead code” and should be tree shaken. So we changed to compile into &lt;code&gt;module: esnext&lt;/code&gt; and &lt;code&gt;target: es2017&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RYGBZKnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjtxt8c10pug7felw36f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYGBZKnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjtxt8c10pug7felw36f.png" alt="TreeMap after changes"&gt;&lt;/a&gt;&lt;em&gt;The results were &lt;strong&gt;amazing&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We dropped from the &lt;code&gt;11.0mb&lt;/code&gt; to &lt;code&gt;4.67mb&lt;/code&gt; without losing any functionality but still something was not right. The module in the screenshot &lt;code&gt;@sovrn/platform-ui-core&lt;/code&gt; is the wrapper we use around &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; and we could see some components that we were clearly not using. We went back did some reading and found the &lt;code&gt;sideEffects&lt;/code&gt; property in &lt;code&gt;package.json&lt;/code&gt; that &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; has adopted for - &lt;em&gt;denoting which files in a project are “pure” and therefore safe to prune if unused&lt;/em&gt;. &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; uses it but we didn’t so we were not able to tree shake our internal &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt; wrapper.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more information about &lt;code&gt;sideEffects&lt;/code&gt; &lt;a href="https://webpack.js.org/guides/tree-shaking/#clarifying-tree-shaking-and-sideeffects"&gt;Clarifying tree shaking and sideEffects&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKPdJhnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxxua8vhuezxyyu5n171.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKPdJhnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxxua8vhuezxyyu5n171.png" alt="Final TreeMap"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;So the bundle after this change was &lt;code&gt;3.34mb&lt;/code&gt; and &lt;code&gt;269kb&lt;/code&gt; Gzipped&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonuses"&gt;
  &lt;/a&gt;
  Bonuses
&lt;/h2&gt;

&lt;p&gt;Of course after so much investigation we identified other places were we could improve our application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-splitting"&gt;
  &lt;/a&gt;
  Code Splitting
&lt;/h3&gt;

&lt;p&gt;Our application is structured in a way that can be code split ( “plugin” components ). So we leveraged &lt;a href="https://webpack.js.org/guides/code-splitting/"&gt;Webpack Code Splitting&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/code-splitting.html"&gt;React Code Splitting&lt;/a&gt; with &lt;code&gt;lazy loading&lt;/code&gt; so we load the bundles for the plugins only when we need them.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFPT1rQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqiks0ki8pxrpzbc1dnf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFPT1rQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqiks0ki8pxrpzbc1dnf.png" alt="TreeMap with codesplitting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;the final bundle looks like this&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now on our initial load we only pull dependencies and bundles used for the initial scene meaning we are pulling a bundle of &lt;code&gt;~1.9mb&lt;/code&gt; or &lt;code&gt;~173kb&lt;/code&gt; Gzipped.&lt;/p&gt;

&lt;p&gt;All the colorful modules are our “plugins” that can be dynamically loaded on request.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-keep-track"&gt;
  &lt;/a&gt;
  How to keep track
&lt;/h3&gt;

&lt;p&gt;Last but not least, we wanted to make sure we could keep track of our bundle and make sure that every time we introduce a new change we can see how it affects our bundle.&lt;/p&gt;

&lt;p&gt;There are many tools you can use and integrate to your CI/CD pipeline. We use &lt;a href="https://www.npmjs.com/package/bundlesize"&gt;Bundlesize&lt;/a&gt;, which you can configure it and set limits for your bundlesize and if the build isn’t below those limits it will fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
 PASS  dist/static/js/140.39a3af3a.js: 171.73KB &amp;lt; maxSize 244KB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

 PASS  dist/static/js/201.e6df94bb.chunk.js: 3.33KB &amp;lt; maxSize 244KB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

 PASS  dist/static/js/218.9e0f9972.chunk.js: 2.47KB &amp;lt; maxSize 244KB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

 PASS  dist/static/js/246.1c66cc41.chunk.js: 3.49KB &amp;lt; maxSize 244KB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in conjunction with &lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;Webpack Bundle Analyzer&lt;/a&gt; we can know what’s wrong in our bundle or not.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt;If you liked or found the post useful leave a ❤️&lt;/p&gt;

</description>
      <category>react</category>
      <category>webpack</category>
      <category>javascript</category>
      <category>c</category>
    </item>
  </channel>
</rss>
