<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Wed, 17 Nov 2021 02:30:36 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-4cee</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-4cee</guid>
      <description>&lt;h2&gt;
  &lt;a href="#day-22"&gt;
  &lt;/a&gt;
  --DAY 22--
&lt;/h2&gt;

&lt;p&gt;Hi, I am going to make #100DaysOfCode Challenge. Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;Now let's solve problem today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem: Excel Sheet Column Title&lt;/li&gt;
&lt;li&gt;Detail: &lt;a href="https://leetcode.com/problems/excel-sheet-column-title/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Idea: it's pretty similar to convert number to binary&lt;/li&gt;
&lt;li&gt;My solution(javascript):
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;convertToTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ZABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt;&lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>100daysofcode</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>One of my first proyect!</title>
      <author>DanyVeneno</author>
      <pubDate>Wed, 17 Nov 2021 01:22:19 +0000</pubDate>
      <link>https://dev.to/danyveneno/one-of-my-first-proyect-3n70</link>
      <guid>https://dev.to/danyveneno/one-of-my-first-proyect-3n70</guid>
      <description>&lt;p&gt;&lt;a href="https://jvstore.netlify.app/"&gt;https://jvstore.netlify.app/&lt;/a&gt;&lt;br&gt;
This is a demonstration of an online store developed with React.js / Commerce.js / Stripe React is a Facebook Library based on the web language that is JavaScript Commerce.js is a platform that provides administration services for your store Through a control panel it is paid and a payment gateway such as Stripe, which are the most renowned in 2020 and are totally recent technologies, it only takes a little interface design and usability to have a totally store modern, functional to create a user experience that generates value for your clients or users in addition to being safe.&lt;br&gt;
For security reasons, the final purchase section is disabled since it is not to work, it is like a real project, it is simply a demonstration although that part is also already developed. I will tell you at the end of your payment, it automatically sends you an email with which you registered with the purchase number and a description and prints a thank you screen.&lt;br&gt;
To finish, feel free to browse it and see all its functionality. Click on it&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 16 Nov 2021 23:40:27 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-2jg3</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-2jg3</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-the-wheel-with-copilot"&gt;
  &lt;/a&gt;
  Sharing the wheel with Copilot
&lt;/h2&gt;

&lt;p&gt;GitHub Copilot, that is! Thanks to &lt;a class="mentioned-user" href="https://dev.to/thenomadevel"&gt;@thenomadevel&lt;/a&gt;
 for sharing this breakdown of what this tool does... and doesn't do (i.e. steal your job). &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenomadevel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xe6TcOEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MGMv-zC7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/746775/8262390b-d183-40a1-8bc7-39e183617459.jpg" alt="thenomadevel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenomadevel/what-is-github-copilot-will-it-take-your-jobs--33p5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is Github Copilot? Will it take your jobs !?&lt;/h2&gt;
      &lt;h3&gt;Nomadev💻🔱 ・ Nov 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#once-more-with-feeling"&gt;
  &lt;/a&gt;
  Once more with feeling
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/lorena"&gt;@lorena&lt;/a&gt;
 built a machine learning model that detects emotions from speech in a data science bootcamp. Pretty incredible, right? Read all about it here. 👇 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lorena" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SnVSYrO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fKT8YDvT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/588430/92d73134-1ac8-4446-a204-474833d21332.jpg" alt="lorena"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lorena/detecting-emotions-from-speech-with-neural-networks-in-python-3ioe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Detecting emotions from speech with neural networks in Python&lt;/h2&gt;
      &lt;h3&gt;Lorena Ciutacu ・ Nov 12 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#making-the-leap"&gt;
  &lt;/a&gt;
  Making the leap
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/maxritter"&gt;@maxritter&lt;/a&gt;
 wrote about making the move from being employed by a corporation to working independently as a freelancer. If you've ever considered doing the same, check this out!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/maxritter" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNJtYK95--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B7fa0MAH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/455701/75cccdca-0b49-4ec9-99e8-e704f5428e16.jpg" alt="maxritter"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/maxritter/becoming-self-employed-a-personal-journey-and-best-practices-for-making-the-leap-1phm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Becoming self-employed: A personal journey and best-practices for making the leap&lt;/h2&gt;
      &lt;h3&gt;Max Ritter ・ Nov 13 ・ 14 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#we-are-paid-to-solve-problems-not-to-write-code"&gt;
  &lt;/a&gt;
  We are paid to solve problems not to write code.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dvddpl"&gt;@dvddpl&lt;/a&gt;
 explains why we need to learn how to love problems and not mistake our own ego as the entire point as programmers.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dvddpl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UboDmADM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JXv2xuBV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/132615/9bcf8385-383b-4b64-b5cc-d8a9f4f675b8.jpeg" alt="dvddpl"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dvddpl/the-screw-and-the-hammer-love-the-problems-not-your-solutions-2i0a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The screw and the hammer: Love the problems, not your solutions. &lt;/h2&gt;
      &lt;h3&gt;Davide de Paolis ・ Nov 11 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#personaldevelopment&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-art-of-the-possible"&gt;
  &lt;/a&gt;
  The art of the possible
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/0shuvo0"&gt;@0shuvo0&lt;/a&gt;
 created a pretty amazing app that allows you to draw on a canvas in multiple colors, clear it, and save your creation as an image. Best of all, they provide the code so you can build the same app yourself!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/0shuvo0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/0shuvo0/lets-create-a-drawing-app-with-js-4ej3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Lets create a Drawing APP with JS&lt;/h2&gt;
      &lt;h3&gt;Shuvo ・ Nov 10 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#which-conditional-statement-to-use-when"&gt;
  &lt;/a&gt;
  Which conditional statement to use when
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/sumusiriwardana"&gt;@sumusiriwardana&lt;/a&gt;
 took a problem they used to frequently encounter and turned it into a helpful resource for others. Great stuff, Sumudu.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sumusiriwardana" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T8FYshfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XrIqHL4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/640110/b9b56633-cfb5-44d9-a248-09eef7341767.jpg" alt="sumusiriwardana"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sumusiriwardana/if-else-or-switch-case-which-one-to-pick-4p3h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;If-Else or Switch-Case: Which One to Pick?&lt;/h2&gt;
      &lt;h3&gt;Sumudu Siriwardana ・ Nov 10 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-nocode-movement"&gt;
  &lt;/a&gt;
  The No-Code Movement
&lt;/h2&gt;

&lt;p&gt;"To reach an age of absolute no-code," writes &lt;a class="mentioned-user" href="https://dev.to/study_web_dev"&gt;@study_web_dev&lt;/a&gt;
 "we need to outdo ourselves with artificial intelligence before anything else." More fantastic insights into where we're headed with "no-code" and the factors involved in that trajectory in this post. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/study_web_dev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKdo7NKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jSR1ZgGz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386817/aed39147-6fa7-4797-b08d-9dcd96a6aad5.jpg" alt="study_web_dev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/study_web_dev/is-no-code-the-future-of-creating-websites-4pjn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Is No-Code the Future of Creating Websites?&lt;/h2&gt;
      &lt;h3&gt;Kyle Prinsloo ・ Nov 9 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>GREYOS - World's first Meta-OS</title>
      <author>George Delaportas (ViR4X)</author>
      <pubDate>Tue, 16 Nov 2021 23:36:48 +0000</pubDate>
      <link>https://dev.to/g0d/greyos-worlds-first-meta-os-37jd</link>
      <guid>https://dev.to/g0d/greyos-worlds-first-meta-os-37jd</guid>
      <description>&lt;p&gt;Hello all, it's been too long but this is the time to tell you about GreyOS!&lt;/p&gt;

&lt;p&gt;GreyOS is an open source Meta-OS (nothing related to metaverse, facebook, etc.). I have been developing this since 2013.&lt;/p&gt;

&lt;p&gt;GreyOS introduces the new computing era with the Cloud Computer (CC), which is always on, available, fast and secure.&lt;/p&gt;

&lt;p&gt;Please check the details at &lt;a href="https://github.com/g0d/GreyOS"&gt;https://github.com/g0d/GreyOS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am looking for contributors, developers and testers to do so much more, create new integrated apps and reshape the computing landscape into something fresh!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ki93MXgC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awwzi81zfcboah2bt9q7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ki93MXgC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awwzi81zfcboah2bt9q7.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>php</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to Rename an AWS S3 Bucket in Terraform</title>
      <author>Kuba Martin</author>
      <pubDate>Tue, 16 Nov 2021 23:00:05 +0000</pubDate>
      <link>https://dev.to/spacelift/how-to-rename-an-aws-s3-bucket-in-terraform-step-by-step-3cb4</link>
      <guid>https://dev.to/spacelift/how-to-rename-an-aws-s3-bucket-in-terraform-step-by-step-3cb4</guid>
      <description>&lt;p&gt;Occasionally you might want to rename an AWS S3 bucket you are managing with Terraform. However, names of S3 buckets are immutable, which means you can’t change them directly. If you tried, Terraform would destroy the old one and then create a new one, resulting in data loss.&lt;/p&gt;

&lt;p&gt;To avoid this, you need to &lt;strong&gt;create a new bucket with the desired name&lt;/strong&gt;, move the data over to it, make the relevant Terraform state replacements, and finally delete the old bucket.&lt;/p&gt;

&lt;p&gt;In this post you will learn how to rename an AWS S3 bucket in Terraform. First things first – let’s say you have a bucket definition in your Terraform code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;aws_s3_bucket&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;my_bucket&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;bucket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you want to change the name of the bucket to &lt;code&gt;new-name&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-create-the-new-bucket"&gt;
  &lt;/a&gt;
  Step 1 - Create the new bucket
&lt;/h1&gt;

&lt;p&gt;Firstly, we’ll need to create a new bucket. You can do this using the AWS CLI or the &lt;a href="https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/console-help-gsg.pdf"&gt;AWS console&lt;/a&gt;. Just make sure to properly replicate the old settings, especially the ACL (so that your data doesn’t accidentally become public).&lt;/p&gt;

&lt;p&gt;Now, we can copy all the files from the old to the new bucket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt; &lt;span class="nx"&gt;sync&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//old-name s3://new-name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-modify-the-state"&gt;
  &lt;/a&gt;
  Step 2 - Modify the State
&lt;/h1&gt;

&lt;p&gt;Now that we have our new bucket, we need to remove the old one from our Terraform state and import the new one in its place:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;terraform&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="nx"&gt;aws_s3_bucket&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_bucket&lt;/span&gt;
&lt;span class="nx"&gt;terraform&lt;/span&gt; &lt;span class="nx"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;aws_s3_bucket&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_bucket&lt;/span&gt; &lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you tried to run Terraform now, it would show you that there’s drift—and yes, there would be! We’ve just imported a bucket into a resource which still has &lt;code&gt;old-name&lt;/code&gt; in the config.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-change-the-code"&gt;
  &lt;/a&gt;
  Step 3 - Change the Code
&lt;/h1&gt;

&lt;p&gt;That’s why we now have to finally change the name of the bucket in our Terraform config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;aws_s3_bucket&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;my_bucket&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;bucket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run Terraform now, you’ll see that there are no changes to be made.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-4-do-a-cleanup"&gt;
  &lt;/a&gt;
  Step 4 - Do a Cleanup
&lt;/h1&gt;

&lt;p&gt;If you want to, you can now delete your old bucket using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt; &lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//old-name --recursive&lt;/span&gt;
&lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt; &lt;span class="nx"&gt;rb&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//old-name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure all the data has successfully been copied over to the new bucket.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-5-run-the-above-arbitrary-aws-cli-commands-if-youre-using-spacelift"&gt;
  &lt;/a&gt;
  Step 5 - Run the Above Arbitrary AWS CLI Commands if You’re Using Spacelift
&lt;/h1&gt;

&lt;p&gt;If you’re using Spacelift then you can use &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;tasks&lt;/a&gt; to run the above arbitrary AWS CLI commands. The default runner image already contains the AWS CLI, so no changes are necessary there.&lt;/p&gt;

&lt;p&gt;One additional thing you can do is &lt;a href="https://docs.spacelift.io/concepts/stack/stack-locking"&gt;lock the Stack&lt;/a&gt; while you’re running the migration, this way nobody will accidentally run Terraform or make any other changes while you’re moving the data.&lt;/p&gt;

&lt;p&gt;And that’s it! If you have any questions about how to rename an AWS S3 bucket, drop me a line in the comments and I’ll get back to you straight away.&lt;/p&gt;

&lt;p&gt;You will find more Terraform Tutorials on our website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/importing-exisiting-infrastructure-into-terraform"&gt;How to Import Existing Infrastructure into Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/what-are-terraform-modules-and-how-do-they-work"&gt;How to Use Terraform Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/how-to-use-terraform-variables"&gt;How to Use Terraform Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/terraform-functions-expressions-loops"&gt;How to Use Terraform Functions, Expression and Loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/how-to-destroy-terraform-resources"&gt;How to Destroy Resources from Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/terraform-version-upgrade"&gt;How to Upgrade Terraform to the Latest Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/terraform-ansible"&gt;Terraform vs. Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>terraform</category>
      <category>aws</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to style markdown with Tailwind CSS</title>
      <author>Oz Ertas</author>
      <pubDate>Tue, 16 Nov 2021 22:51:58 +0000</pubDate>
      <link>https://dev.to/oerts/how-to-style-markdown-with-tailwind-css-12m9</link>
      <guid>https://dev.to/oerts/how-to-style-markdown-with-tailwind-css-12m9</guid>
      <description>&lt;p&gt;Tailwind CSS comes with "an opinionated set of base styles" called Preflight. A helpful CSS reset built on top of &lt;a href="https://github.com/sindresorhus/modern-normalize"&gt;modern-normalize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Margins, headings, lists, and many others get stripped from their defaults. Thus, achieving cross-browser consistency and an easier adaptation of your design system.&lt;/p&gt;

&lt;p&gt;It all sounds helpful, until you need those defaults to style a markdown post.&lt;/p&gt;

&lt;p&gt;In comes &lt;code&gt;@tailwindcss/typography&lt;/code&gt;, a plugin with sensible typographic styles. It adds a set of &lt;code&gt;prose&lt;/code&gt; classes to style content blocks like the one you are reading.&lt;/p&gt;

&lt;p&gt;You can install it via npm or yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Using npm
npm install @tailwindcss/typography

# Using Yarn
yarn add @tailwindcss/typography
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the plugin to your &lt;code&gt;tailwind.config.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tailwindcss/typography&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, you can use the &lt;code&gt;prose&lt;/code&gt; class to apply the markdown styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prose lg:prose-xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to Mars!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Although life on Mars is perfect in every single way, you might have some questions.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Of course there’s air! Just don’t breathe it. And, with the crazy gravity situation, everyone can dunk!
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information about the &lt;code&gt;prose&lt;/code&gt; class and its modifiers can be found at the &lt;a href="https://github.com/tailwindlabs/tailwindcss-typography"&gt;repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why is `this` a pointer and not an rvalue reference in C++?</title>
      <author>Calin Baenen</author>
      <pubDate>Tue, 16 Nov 2021 22:32:46 +0000</pubDate>
      <link>https://dev.to/baenencalin/why-is-this-a-pointer-and-not-an-rvalue-reference-in-c-33a7</link>
      <guid>https://dev.to/baenencalin/why-is-this-a-pointer-and-not-an-rvalue-reference-in-c-33a7</guid>
      <description>&lt;p&gt;What was the thought behind making &lt;code&gt;this&lt;/code&gt; a pointer of &lt;code&gt;T&lt;/code&gt;, instead of &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;?&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>discuss</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to deploy your Python Flask projects</title>
      <author>Adam Miedema</author>
      <pubDate>Tue, 16 Nov 2021 21:58:14 +0000</pubDate>
      <link>https://dev.to/armiedema/how-to-deploy-your-python-flask-projects-3nme</link>
      <guid>https://dev.to/armiedema/how-to-deploy-your-python-flask-projects-3nme</guid>
      <description>&lt;p&gt;Python's popularity continues to sore and has consistently been one of the top programming languages for web development over the last several years. Python's powerful simplicity is easy-to-learn and easy-to-apply.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/"&gt;Flask&lt;/a&gt; is a straightforward framework for Python web development that makes it easy to get started on your web applications.&lt;/p&gt;

&lt;p&gt;Since Python3 is pre-packaged on Ubuntu 20.04, we can leverage this fact to easily deploy an example Flask framework application using &lt;a href="https://cleavr.io"&gt;Cleavr.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before proceeding, you'll need to have an active &lt;a href="https://cleavr.io"&gt;Cleavr.io&lt;/a&gt; account and have a server provisioned and ready-to-go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-add-a-nodejs-ssr-app"&gt;
  &lt;/a&gt;
  Step 1 - Add a NodeJS SSR app
&lt;/h2&gt;

&lt;p&gt;Add a new NodeJS SSR site to your server in Cleavr.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---nV27qaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uldlxbnyw8hw49y37qd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---nV27qaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uldlxbnyw8hw49y37qd1.png" alt="add new nodejs ssr site to cleavr managed server" width="660" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're using NodeJS SSR as the site's app type as it will install Node AND PM2 to the server. PM2 manages more than just node applications, so we'll take advantage of this to serve our Flask app and keep it alive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-configure-app-repo"&gt;
  &lt;/a&gt;
  Step 2 - Configure app repo
&lt;/h2&gt;

&lt;p&gt;Once the site has successfully been added to the server, click the &lt;strong&gt;Setup and deploy&lt;/strong&gt; link to configure the web app.&lt;/p&gt;

&lt;p&gt;On the settings &amp;gt; repo tab, add &lt;code&gt;armgitaar/flask-example&lt;/code&gt; to the repo and keep branch as &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HVFkBYa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fe28wuhi6gp98eerkli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVFkBYa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fe28wuhi6gp98eerkli.png" alt="configure project git repository" width="819" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we're using a Flask repo originally by &lt;a href="https://github.com/XD-DENG"&gt;XD&lt;/a&gt; that I've modified a bit to make the port number use the one automatically assigned by Cleavr. &lt;a href="https://github.com/armgitaar/flask-example"&gt;View the example repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To view the modification, open the &lt;a href="https://github.com/armgitaar/flask-example/blob/master/app.py"&gt;app.py&lt;/a&gt; file and scroll to the very bottom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=os.environ.get('PORT', 5000))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Flask apps default to run on port &lt;code&gt;5000&lt;/code&gt;. However, the following allows the app to run on the server assigned port: &lt;code&gt;port=os.environ.get('PORT', 5000)&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-configure-entry-and-pm2-ecosystem"&gt;
  &lt;/a&gt;
  Step 3 - Configure entry and PM2 ecosystem
&lt;/h2&gt;

&lt;p&gt;On the &lt;strong&gt;Build&lt;/strong&gt; tab, set &lt;strong&gt;Entry Point&lt;/strong&gt; to &lt;code&gt;app.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the PM2 ecosystem, we'll need to set the interpreter to Python3 as well as remove a couple of configs that aren't compatible with Python apps.&lt;/p&gt;

&lt;p&gt;Add interpreter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"interpreter": "/usr/bin/python3",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "instances": "max",
 "exec_mode": "cluster_mode",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ecosystem should look similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "your.domain.com",
  "script": "app.py",
  "args": "",
  "log_type": "json",
  "cwd": "/home/cleavr/your.domain.com/current",
  "interpreter": "/usr/bin/python3",
  "env": {
    "PORT": assigned port number,
    "CI": 1,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-configure-deployment-hooks"&gt;
  &lt;/a&gt;
  Step 4 - Configure deployment hooks
&lt;/h2&gt;

&lt;p&gt;On the deployment hooks page,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Disable &lt;strong&gt;Install NPM Packages&lt;/strong&gt; hook&lt;/li&gt;
&lt;li&gt;Disable &lt;strong&gt;Build Assets&lt;/strong&gt; hook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a new hook to install Python dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Order the above hook to run before the activation deployment hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-deploy"&gt;
  &lt;/a&gt;
  Step 5 - deploy!
&lt;/h2&gt;

&lt;p&gt;Once all of the above is complete, deploy the app!&lt;/p&gt;

&lt;p&gt;You should see a page that looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dvEijdRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9la19sr7ngz9b9hdxr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvEijdRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9la19sr7ngz9b9hdxr4.png" alt="flask example web app" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>The newest Docker VS Code extension feature you’re not using</title>
      <author>Uche Nkadi</author>
      <pubDate>Tue, 16 Nov 2021 21:54:19 +0000</pubDate>
      <link>https://dev.to/uche_nkadi/the-newest-docker-vs-code-extension-feature-youre-not-using-68n</link>
      <guid>https://dev.to/uche_nkadi/the-newest-docker-vs-code-extension-feature-youre-not-using-68n</guid>
      <description>&lt;p&gt;As Docker usage has grown, Docker Compose has become the leader in running multi-service applications locally. Unfortunately, as your application expands and more services must communicate, we’ve found authoring these Compose files can become arduous, time consuming, and mistake prone. We want to make writing Compose files with volumes, ports, and multiple services much easier. &lt;/p&gt;

&lt;p&gt;Today, we’d like to announce the Docker Compose Language Service in the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker"&gt;Docker Extension for VS Code&lt;/a&gt;. That’s right, the Docker Extension will now provide Docker Compose files with IntelliSense, Tooltips, and syntax validation. Here are a few of the incoming features in our 1.18 release: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IntelliSense tab completions (i.e. volumes, ports)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQUP7Vwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx20ekb3zpw0gsn5d9fn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQUP7Vwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx20ekb3zpw0gsn5d9fn.gif" alt="Gif showing tab completions" width="880" height="589"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tooltips for Compose keywords (i.e. services, image)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPi1dPng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26ed2z6qx3it34vc54l6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPi1dPng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26ed2z6qx3it34vc54l6.png" alt="Gif showing a tooltip from hovering" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right-click to format a Compose file (Shift + Alt + F) &lt;/li&gt;
&lt;li&gt;YAML Syntax Validation &lt;/li&gt;
&lt;li&gt;Hyperlinks for Docker Images &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our 1.18 release, this feature will be on by default, so we hope you enjoy it!&lt;/p&gt;

&lt;p&gt;There are more improvements to come! Stay tuned for these features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More tab completions&lt;/li&gt;
&lt;li&gt;Docker Compose schema validation &lt;/li&gt;
&lt;li&gt;… and much more! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We love your feedback! If you have any comments or ideas on our Compose language support, feel free to submit an issue to the &lt;a href="https://github.com/microsoft/compose-language-service"&gt;Compose Language Service Repo&lt;/a&gt; or the &lt;a href="https://github.com/microsoft/vscode-docker/issues"&gt;VS Code Docker Repo&lt;/a&gt; for general feedback. &lt;/p&gt;

</description>
      <category>docker</category>
      <category>vscode</category>
      <category>microservices</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Developer Team Work Best Practices (Git, Agile/Scrum/Kanban, CI/CD)</title>
      <author>Alex Merced</author>
      <pubDate>Tue, 16 Nov 2021 21:39:34 +0000</pubDate>
      <link>https://dev.to/alexmercedcoder/developer-team-work-best-practices-git-agilescrumkanban-cicd-j46</link>
      <guid>https://dev.to/alexmercedcoder/developer-team-work-best-practices-git-agilescrumkanban-cicd-j46</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-why"&gt;
  &lt;/a&gt;
  The Why?
&lt;/h2&gt;

&lt;p&gt;So you've been learning how to code whether in college, in a bootcamp or self-taught and your thinking... "When I get hired... how do I work with other developers?". This article aims to help clear up a lot of the mystery around this topic with on caveat, the practices and standards can vary widely from workplace to workplace but this article should give you an idea of what to expect.&lt;/p&gt;

&lt;p&gt;Here are some other resources I've created that should help you in understanding this topic.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tuts.alexmercedcoder.com/2021/1/guidetogit/"&gt;Understand Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=llDIbfSrRB8"&gt;Group Developer Workflow Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=n1AfM6fuc9M&amp;amp;t=5s"&gt;Group Developer Workflow Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-two-main-branches"&gt;
  &lt;/a&gt;
  The Two Main Branches
&lt;/h2&gt;

&lt;p&gt;Generally there should be two primary branches in any git repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;main/master/prod/production: This branch is the code that actually used for the application that is served to the end user. A continuous deployment pipeline should be setup for this branch that auto deploys when updated. The only code that should be pulled/merge into this branch is complete, reviewed and tested code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dev/development/staging: This branch should be where completed but not yet released code should be collected. Often this branch has a staging deployment to have staging deploy of the application to see the unreleased code in action in a similar environment as the main/master branch.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#your-ticket-branch"&gt;
  &lt;/a&gt;
  Your Ticket Branch
&lt;/h2&gt;

&lt;p&gt;Everytime you take on a ticket (a unit of deliverable work) you should create a branch, the naming of the branch should follow some convention to make it easy to understand the scope of the branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;examples&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;feature/chat&lt;/code&gt; may be the name of a branch creating a new chat feature&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fix/new-form-button&lt;/code&gt; may be a branch where I'm fixing a bug with a button on a form for adding new items&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One ticket, one branch. Once that work is done, you make the pull request so it can be reviewed and make a fresh branch for the next piece of work.&lt;/p&gt;

&lt;p&gt;The question then becomes should the new branch be made from the dev or main branch, that will probably be best answered by the Agile methodology that you undertake.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agile"&gt;
  &lt;/a&gt;
  Agile
&lt;/h2&gt;

&lt;p&gt;Agile is just an approach to project management where we move away from the old paradigm of a project starting and completing when all features have been added (leaving little room for intermediate feedback and lot of room for wasted time) to a paradigm of incremental releases. By first releasing the minimum viable product we take the advantage of getting to market faster, can receive feedback which can be used for future releases and can generate revenue earlier in the products lifecycle. With in the Agile umbrello there are many sub-paradigms (that of course also differ in application at different establishments).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  SCRUM
&lt;/h4&gt;

&lt;p&gt;When taking a scrum approach you work in sprints which cover a set period of time to complete a set amount of work (a handful of features/fixes you want to add). You do not release early, you do not do more work if done early. The reason this is important is that at the end of the sprint when the features are released you assess the result to see how the process can be improved for the next sprint (take on more or less work, improve processes). In this case you have releases happening on a set schedule and the goal is to optimize the quantity and quality of work during a sprint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this situation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you get assigned a ticket&lt;/li&gt;
&lt;li&gt;you pull down any changes made to the dev branch&lt;/li&gt;
&lt;li&gt;make your ticket branch off of the dev branch&lt;/li&gt;
&lt;li&gt;work on your code locally, then push up branch when complete (or at end of each day)&lt;/li&gt;
&lt;li&gt;before pull request pull down any changes to dev and update your ticket branch with a local merge&lt;/li&gt;
&lt;li&gt;make pull request from your ticket branch to dev, await review of pull&lt;/li&gt;
&lt;li&gt;more on to next ticket&lt;/li&gt;
&lt;li&gt;at end of sprint, changes collected in dev will be pulled into main and deployed&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#kanban"&gt;
  &lt;/a&gt;
  Kanban
&lt;/h4&gt;

&lt;p&gt;When taking a kanban approach there are no sprints as features are released when completed. In this situation you aren't comparing the execution of several tickets within a sprint but the lifecycle of one ticket/feature. As each feature is released you assess the time it took to get done and how to improve the timeframe for a ticket to be completed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this situation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get assigned a ticket&lt;/li&gt;
&lt;li&gt;pull all updates to main branch&lt;/li&gt;
&lt;li&gt;make a ticket branch off of main&lt;/li&gt;
&lt;li&gt;complete work&lt;/li&gt;
&lt;li&gt;push up ticket branch when complete and/or periodically&lt;/li&gt;
&lt;li&gt;pull updates to main, merge into ticket branch&lt;/li&gt;
&lt;li&gt;push final updates then pull into dev for review in staging&lt;/li&gt;
&lt;li&gt;when complete make a pull from your branch to main (to release that one feature in isolation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cicd-continuous-integrationcontinuous-deployment"&gt;
  &lt;/a&gt;
  CI/CD (Continuous Integration/Continuous Deployment)
&lt;/h2&gt;

&lt;p&gt;A CI/CD pipeline should hopefully be setup which will speed up the productivity of the team, what is CI/CD? CI/CD is automating tasks like linting/testing/formatting/deployment in response to events like pull request or branch pushes.&lt;/p&gt;

&lt;p&gt;This is usually done with the use of tools like Jenkins, CircleCI, Github Actions and so forth. An example would be setting up the following automation:&lt;/p&gt;

&lt;p&gt;Trigger: making a pull request to the main branch&lt;/p&gt;

&lt;p&gt;Actions Taken:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;auto-format code using prettier&lt;/li&gt;
&lt;li&gt;check for syntax and style errors using ESLint (reject push if errors/warnings found)&lt;/li&gt;
&lt;li&gt;run several unit tests (reject push if any test fails)&lt;/li&gt;
&lt;li&gt;assuming the push isn't rejected, deploy the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be a boon to the speed at which new code can be added to the codebase, but requires good tests and good test coverage to be effective.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lab.github.com/githubtraining/devops-with-github-actions"&gt;Github Lab Lessons on using Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLY6oTPmKnKbbRBom0Txvg28C6EySkR6Vq"&gt;Playlist on Testing and Debugging Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-important-teamwork-habits"&gt;
  &lt;/a&gt;
  Other Important Teamwork Habits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Daily Stands: Daily meetings where everyone stands and expresses 1. What they've been working on, 2. what they will be working on 3. Any blockers or opportunities&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scrum/Kanban Board: A board often with a list of tasks in a backlog, that get assigned to a team member and moves to "in progress", then to "in review", then to "complete". The goal always is to move the tickets from the far left (backlog) to the far right (complete)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Templates you can use in your team&lt;/strong&gt;&lt;br&gt;
-&lt;a href="https://airtable.com/shr60SohWPoKMqKSg"&gt;AIRTABLE&lt;/a&gt;&lt;br&gt;
-&lt;a href="https://docs.google.com/spreadsheets/d/1EkEDhjxSP-dncgimZ_C1QKKrsIwY4vPXk9lFkhWdvGY/edit?"&gt;Google Sheets&lt;/a&gt;usp=sharing&lt;br&gt;
-&lt;a href="https://trello.com/templates/project-management/project-management-1x4Uql2u"&gt;Trello&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully this helps understand a little more about working on a developer team. There are also several tools you should familiarize yourself with (bash, git, docker, etc.). Here is a playlist of videos to help you with that.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLY6oTPmKnKbYjGEm9nLowExbgkI-epIgg"&gt;Playlist of Programmer Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>ci</category>
      <category>cd</category>
    </item>
    <item>
      <title>Going Cloud Native - The problem with two-speed-IT</title>
      <author>David Schmitz</author>
      <pubDate>Tue, 16 Nov 2021 21:06:18 +0000</pubDate>
      <link>https://dev.to/koenighotze/going-cloud-native-the-problem-with-two-speed-it-1k0e</link>
      <guid>https://dev.to/koenighotze/going-cloud-native-the-problem-with-two-speed-it-1k0e</guid>
      <description>&lt;p&gt;At the beginning of November a client asked me to join their Cloud Panel and talk on the topic of cloud transformation. You can find the slides on Slideshare. &lt;/p&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/2hcs5MLvQoNEWx" alt="2hcs5MLvQoNEWx on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;This article is based on that presentation. So, let's talk about cloud native development and its impact on organisations. Most of my clients are large insurance or financial companies. And the are considering a migration to the cloud. And they are asking for help. The discussions are either based on FUD (fear uncertainty and doubt) or snake-oil.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VrpnJOf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wedxxs0taa97v5sbaz0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VrpnJOf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wedxxs0taa97v5sbaz0u.png" alt="Snake-oil vendor" width="804" height="720"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is not surprising that the truth lies in between.&lt;/p&gt;

&lt;p&gt;This is the first of a two part series. Each introduces things we learnt while moving companies into the public cloud.  I focus on culture and organisation. Not because tech is boring. Rather most discussions focus on technology and architecture without ever touching the more social aspects.&lt;/p&gt;

&lt;p&gt;Keep in mind that what worked for me and for my clients may not work for you. Context matters.&lt;/p&gt;

&lt;p&gt;This first article probes the questions around the organisation and effective collaboration. The follow up text looks at the mythical platform team and its implications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#efficiency-the-reason-to-adopt-the-cloud"&gt;
  &lt;/a&gt;
  Efficiency - the reason to adopt the cloud
&lt;/h2&gt;

&lt;p&gt;Before we go into the details let's talk about why we migrate into the cloud.&lt;/p&gt;

&lt;p&gt;In a nutshell, it's all about &lt;em&gt;efficiency&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yWHN5BIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slnoyz5m1r6li5ogg1hy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yWHN5BIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slnoyz5m1r6li5ogg1hy.jpg" alt="Photo by Thomas Kelley on Unsplash" width="600" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to be efficient because we &lt;em&gt;do not&lt;/em&gt; know what our customers want. Nobody can specify in detail what is needed. Nobody can predict the future and especially our clients cannot. They don't even know what they want until they see it.&lt;/p&gt;

&lt;p&gt;That means the only way to build the correct products, is to implement our ideas as fast as possible and to iterate on them. Improving our products step-by-step. &lt;/p&gt;

&lt;p&gt;This leads to the conclusion that our businesses are only as efficient as our IT is. No longer can we treat our IT as a cost-centre. We have to move IT into the heart of our organisation, if we want to be and stay competitive.&lt;/p&gt;

&lt;p&gt;And this is where the public cloud enters the game. &lt;/p&gt;

&lt;p&gt;The cloud allows us to focus on the essentials. We use &lt;a href="https://azure.microsoft.com/en-us/overview/what-is-saas/"&gt;SaaS&lt;/a&gt; where possible. We do not build our own load-balancers or start hosting a SQL database ourselves. We replace hand-crafted assets with cloud products. E.g., use &lt;a href="https://cloud.google.com/sql"&gt;Google’s Cloud SQL&lt;/a&gt; instead of our own &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; instance. This reduces complexity and allows us to put more energy into our products. We are more efficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#marie-kondo-your-it"&gt;
  &lt;/a&gt;
  &lt;em&gt;Marie Kondo&lt;/em&gt; your IT
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://konmari.com/"&gt;Marie Kondo&lt;/a&gt; is a Japanese organising consultant. She specializes in tidying up and reducing superfluous clutter. We can do the same to our IT. There are many strategies for transforming our IT to the cloud. The following four approaches are pretty common:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTjTv65Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnalzem459ifxxoob7zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTjTv65Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnalzem459ifxxoob7zx.png" alt="Options for cloud transformation" width="686" height="1470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lift-and-Shift&lt;/strong&gt;: we take an asset and host it more or less 1:1 onto the cloud. E.g., taking a monolithic &lt;a href="https://www.oracle.com/java/technologies/java-ee-glance.html"&gt;JEE&lt;/a&gt; application and move it to &lt;a href="https://cloud.google.com/compute"&gt;Google Cloud Compute VMs&lt;/a&gt;. We get rid of the underlying operations components and machines. But do not enjoy other cloud capabilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8rFFMcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfzx2eyf7325whoncr81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8rFFMcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfzx2eyf7325whoncr81.png" alt="Lift-and-Shift" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Re-architect&lt;/strong&gt;: The prime example in every microservice book. We take an existing asset, such as a monolithic &lt;a href="https://www.oracle.com/java/technologies/java-ee-glance.html"&gt;JEE&lt;/a&gt; application, and redesign it from the ground up. Effectively replacing it for example with a series of new cloud-native microservices. We can use all cloud capabilities, because we are rebuilding and redesigning everything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9EkjnCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uj8bakcaksw5k33yk1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9EkjnCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uj8bakcaksw5k33yk1b.png" alt="Re-architect" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retire&lt;/strong&gt;: My favourite. We identify assets and processes that we and our customers no longer need. We remove these assets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LE-DwvnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fbzl7sje7rmhvjahedb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LE-DwvnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fbzl7sje7rmhvjahedb.png" alt="Retire" width="880" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Replace&lt;/strong&gt;: Remember efficiency? "Replace" is all about efficiency. We replace something we took care of ourselves and use a SaaS offering instead. One example could be to replace a self-hosted Kafka with a managed version, e.g., using &lt;a href="https://aws.amazon.com/de/msk/"&gt;AWS MSK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2dwuG8J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n78007zsehwn1ywjhvof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2dwuG8J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n78007zsehwn1ywjhvof.png" alt="Replace" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The effort and efficiency of each approach depends on the strategy for moving into cloud. “Lift-and-Shift” might be the best approach, if the goal is replacing a datacenter. If we want to reduce complexity and use SaaS as much as possible, then “Replace” would be the appropriate approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hybrid-landscape"&gt;
  &lt;/a&gt;
  The hybrid landscape
&lt;/h2&gt;

&lt;p&gt;In the end, we will end up with a hybrid architecture. We build some assets for the cloud and some assets will stay on-premise, at least for some time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXR0i6vZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4boaoj483gbk0c1oaeq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXR0i6vZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4boaoj483gbk0c1oaeq2.png" alt="Hybrid approach" width="880" height="618"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can draw two conclusions from this fact:&lt;/p&gt;

&lt;p&gt;Firstly, we will have more complexity, at least temporarily. The original datacenter is still around. Maybe smaller and with fewer assets, but still a burden. Operations has to support the original environments and the new cloud environment. This increases effort and cost and we must take this into account from the start.&lt;/p&gt;

&lt;p&gt;Secondly, the cloud-hosted assets usually depend on the on-premise assets. More often than not, the cloud-hosted assets need changes to the existing on-premise assets. Firewalls need to be changed, APIs need to be exposed or extended. And so on. This dependency leads to the first potential cultural and organisational trap.&lt;/p&gt;

&lt;p&gt;The fact that we have two areas, that can move at different speeds led to something called the two-speed-IT, which we'll discuss next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-twospeedit-trap"&gt;
  &lt;/a&gt;
  The two-speed-IT trap
&lt;/h2&gt;

&lt;p&gt;The idea of a two-speed-IT is not new. It has been around since circa 2014.&lt;/p&gt;

&lt;p&gt;McKinsey &lt;a href="https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/a-two-speed-it-architecture-for-the-digital-enterprise"&gt;describes&lt;/a&gt; the goal of a two-speed-IT as &lt;em&gt;"A two-speed IT architecture will help companies develop their customer-facing capabilities at high speed while decoupling legacy systems for which release cycles of new functionality stay at a slower pace."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The underlying premise is that you can run your organisation in two different ways. One shiny, great and new. And the other rusty, dusty and old. I will not delve into all the aspects why this is problematic. I concentrate on the organisational part. But to give you a picture, two-speed-IT is like attaching extra rooms to your house because you cannot be bothered to clean up. Not a very sustainable approach, in my eyes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#language-is-the-smoking-gun"&gt;
  &lt;/a&gt;
  Language is the smoking gun
&lt;/h2&gt;

&lt;p&gt;Going back to the softer, non-technical aspects. With two-speed-IT the language around the transformation changes in an interesting way.&lt;/p&gt;

&lt;p&gt;The cloud-assets are usually associated with a modern and lean technology stack. We use Go-lang, Node and Docker. The development process uses an agile process, such as &lt;a href="https://basecamp.com/shapeup"&gt;Shape-Up&lt;/a&gt;. We speak of forward-leaning teams. We use "Speed Boats" as metaphors for teams working on these cloud-products.&lt;/p&gt;

&lt;p&gt;On the other side of the fence lies the on-premise country. Here are the technologies of days-gone, Corba, Cobol, SOAP and EBCDIC. The process is heavy-weight, maybe even a waterfall with one or two releases per year. We speak of slow-moving tankers, with no ability to either change or react quickly. We even call this "legacy".&lt;/p&gt;

&lt;p&gt;Why is this problematic?&lt;/p&gt;

&lt;p&gt;As we have seen, the cloud-products usually need access or even changes to the existing assets. That means, we need collaboration between the different areas of engineering. Also let’s not forget the expertise of the people working on these systems. Documentation is outdated the moment it was written. The only way to understand systems is to have the human experts available.&lt;/p&gt;

&lt;p&gt;Things become difficult, if the "on-premise-people" are not part of the cloud-transformation.&lt;/p&gt;

&lt;p&gt;If people feel left behind and sidetracked, then we don’t get collaboration. Instead we get resentment. People may not be willing to help as much as we need their help. Or - in the worst case - people may end up sabotaging the cloud-transformation. Either knowingly or more often due to negligence. Why should someone support our efforts, if the person is going to be replaced by our project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#participation-brings-collaboration"&gt;
  &lt;/a&gt;
  Participation brings collaboration
&lt;/h2&gt;

&lt;p&gt;The solution to this dilemma is pretty straightforward. First we need to realise that nobody actually means to do harm or a bad job. &lt;em&gt;Assume Best Intent&lt;/em&gt; is often the best way to operate. With this in place, we see that the root of our problem lies in fear. &lt;/p&gt;

&lt;p&gt;Fear of being obsolete.&lt;br&gt;
Fear of being left behind.&lt;br&gt;
Fear of losing a job or importance.&lt;/p&gt;

&lt;p&gt;We have to get rid of that unfounded fear. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transparency and communication are key to removing fear.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bring everybody on board. Mix cloud-product teams with on-premise experts into one end-to-end team. We retrain the staff, offer courses for people willing to learn. We create new roles and positions for our new engineering culture. We offer people a perspective for growing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sh7d0Wyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6gsycy7jg00v08tbzk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sh7d0Wyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6gsycy7jg00v08tbzk3.png" alt="Team work is key" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we need to be transparent. We should communicate our rationale for the cloud transformation in clear terms. If we want to get rid of our self-hosted datacenter, then what is the plan for the people operating that datacenter now? How will they be retrained and up-skilled? Who hires the new skills we need? And so on. If we tackle these difficult topics openly, then we stop fear and gossip in their tracks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jumping-the-mountain"&gt;
  &lt;/a&gt;
  Jumping the mountain?
&lt;/h2&gt;

&lt;p&gt;If you want to silence the doubters and fear-mongers, delivery is the only option. Only working software in production will prove that the cloud journey is possible. But, one may ask, even if we bring everybody together and work on this, how can we bring an entire company into the cloud?&lt;/p&gt;

&lt;p&gt;Well, one takes one step at a time.&lt;/p&gt;

&lt;p&gt;Instead of trying to jump onto the mountain, we take the scenic route and enjoy the journey. We do not need to go all-in-serverless in the first couple of months. We can decide step-by-step what our realistic target actually is. Let's consider the following illustration. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---efY2yRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ikatog870dri1ua3qvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---efY2yRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ikatog870dri1ua3qvn.png" alt="A step-by-step approach" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We want to be opportunistic in some areas but full on cloud-native in others. Again, transparency is key. Everybody should understand why we move some areas to the cloud, while others are not.&lt;/p&gt;

&lt;p&gt;I cannot stress this enough. We must find a thin-slice of business proving the technology and especially the new way of collaboration. The people will form a band of trust and cooperation that will act as a radiator in our organisation. The thin-slice should be something that adds to our area of business. Not a technical spike, not a proof-of-concept. Rather something essential. Only then will people feel committed and get involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Moving into the cloud involves architecture, technology but also organisation and culture. The concrete approach does not change the implications. Whether we lift-and-shift, re-architect, retire or replace, we will end up with a hybrid landscape of new and pre-existing assets.&lt;/p&gt;

&lt;p&gt;Two-speed-IT was brought up as a concept around 2014 but has lost its footing in the last couple of years. Reality has caught up with the ideas. Organisations have seen the downsides and implications, some of which I mentioned in this text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;People are key.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Engineers will learn new technology and new architectures anyway. But learning to trust, to work together, to collaborate is so much harder. Especially during a pandemic, when you cannot go around the corner and grab a cup of tea.&lt;/p&gt;

&lt;p&gt;Allowing people to take part and to get involved helps building bridges. We do not want any walls in our organisation. Not on a social level and not on a communication level.  Software development is a team effort and teams need to trust each other.&lt;/p&gt;

&lt;p&gt;The next article examines the question around the concrete teams. Like which skills are needed and how can we scale this in a reasonable way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-references"&gt;
  &lt;/a&gt;
  Image references
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/photos/xVptEZzgVfo"&gt;https://unsplash.com/photos/xVptEZzgVfo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://unsplash.com/photos/IM8ZyYaSW6g"&gt;https://unsplash.com/photos/IM8ZyYaSW6g&lt;/a&gt;&lt;br&gt;
&lt;a href="https://de.wikipedia.org/wiki/Schlangen%C3%B6l"&gt;https://de.wikipedia.org/wiki/Schlangen%C3%B6l&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>team</category>
      <category>organisation</category>
    </item>
    <item>
      <title>Migrate from react-native-unimodules to Expo modules</title>
      <author>Wouter van den Broek</author>
      <pubDate>Tue, 16 Nov 2021 20:48:04 +0000</pubDate>
      <link>https://dev.to/wbroek/migrate-from-react-native-unimodules-to-expo-modules-25c6</link>
      <guid>https://dev.to/wbroek/migrate-from-react-native-unimodules-to-expo-modules-25c6</guid>
      <description>&lt;p&gt;Expo has upgraded their modules strategy, why you can &lt;a href="https://blog.expo.dev/whats-new-in-expo-modules-infrastructure-7a7cdda81ebc"&gt;read here&lt;/a&gt; and replace the package react-native-unimodules with expo package. In this article you can read how to migrate from the old react-native-unimodules to the brand new Expo modules wth the expo package.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; that the react-native-unimodules had some evolution in the past as well, some code changes could look a little but different. Your app name could be different; myapp is used in the examples below&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-reactnativeunimodules"&gt;
  &lt;/a&gt;
  Remove react-native-unimodules
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Remove react-native-unimodules from the package.json (&lt;code&gt;npm uninstall&lt;/code&gt; or &lt;code&gt;yarn remove&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ios"&gt;
  &lt;/a&gt;
  iOS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remove the import and use of react-native-unimodules in &lt;code&gt;ios/Podfile&lt;/code&gt; and run &lt;code&gt;npx pod-install&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
&lt;/span&gt;&lt;span class="gd"&gt;- require_relative '../node_modules/react-native-unimodules/cocoapods.rb'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;target 'MyApp' do
&lt;/span&gt;&lt;span class="gd"&gt;-  use_unimodules!
&lt;/span&gt;  config = use_native_modules!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove react-native-unimodules references from &lt;code&gt;ios/MyApp/AppDelegate.h&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- #import &amp;lt;UMCore/UMAppDelegateWrapper.h&amp;gt;
&lt;/span&gt;
- @interface AppDelegate : UMAppDelegateWrapper &amp;lt;UIApplicationDelegate, RCTBridgeDelegate, UNUserNotificationCenterDelegate&amp;gt;
&lt;span class="gi"&gt;+ @interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate, RCTBridgeDelegate, UNUserNotificationCenterDelegate&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove react-native-unimodules references from &lt;code&gt;ios/MyApp/AppDelegate.m&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- #import &amp;lt;UMCore/UMModuleRegistry.h&amp;gt;
- #import &amp;lt;UMReactNativeAdapter/UMNativeModulesProxy.h&amp;gt;
- #import &amp;lt;UMReactNativeAdapter/UMModuleRegistryAdapter.h&amp;gt;
&lt;/span&gt;
- @interface AppDelegate () &amp;lt;RCTBridgeDelegate&amp;gt;
&lt;span class="gd"&gt;-  @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;
- @end
&lt;/span&gt;
@implementation AppDelegate
    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
&lt;span class="err"&gt;{&lt;/span&gt;
- self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];

- [super application:application didFinishLaunchingWithOptions:launchOptions];
  return YES;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="gd"&gt;- - (NSArray&amp;lt;id&amp;lt;RCTBridgeModule&amp;gt;&amp;gt; *)extraModulesForBridge:(RCTBridge *)bridge
-{
-  NSArray&amp;lt;id&amp;lt;RCTBridgeModule&amp;gt;&amp;gt; *extraModules = [_moduleRegistryAdapter extraModulesForBridge:bridge];
-  // If you'd like to export some custom RCTBridgeModules that are not Expo modules, add them here!
-  return extraModules;
-}
&lt;/span&gt;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#android"&gt;
  &lt;/a&gt;
  Android
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remove react-native-unimodules from &lt;code&gt;android/app/build.gradle&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;apply plugin: "com.android.application"
&lt;/span&gt;&lt;span class="gd"&gt;- apply from: '../../node_modules/react-native-unimodules/gradle.groovy'
&lt;/span&gt;
dependencies {

- addUnimodulesDependencies()

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove link to react-native-unimodules from &lt;code&gt;android/settings.gradle&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;rootProject.name = 'MyApp'
&lt;/span&gt;&lt;span class="gd"&gt;- apply from: '../node_modules/react-native-unimodules/gradle.groovy';
- includeUnimodulesProjects()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove reference of react-native-unimodules in &lt;code&gt;android/app/src/main/java/com/myapp/MainApplication.java&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- import com.myapp.generated.BasePackageList;
&lt;/span&gt;
- import java.util.Arrays;

- import org.unimodules.adapters.react.ModuleRegistryAdapter;
&lt;span class="gd"&gt;- import org.unimodules.adapters.react.ReactModuleRegistryProvider;
&lt;/span&gt;
public class MainApplication extends Application implements ReactApplication {
&lt;span class="gd"&gt;-   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(new BasePackageList().getPackageList(), null);
&lt;/span&gt;
    private final ReactNativeHost mReactNativeHost =
      new ReactNativeHost(this) {

        @Override
        protected List&amp;lt;ReactPackage&amp;gt; getPackages() {
            @SuppressWarnings("UnnecessaryLocalVariable")
             List&amp;lt;ReactPackage&amp;gt; packages = new PackageList(this).getPackages();
            // Packages that cannot be autolinked yet can be added manually here, for example:
            // packages.add(new MyReactNativePackage());

-            // Add unimodules
&lt;span class="gd"&gt;-            List&amp;lt;ReactPackage&amp;gt; unimodules = Arrays.&amp;lt;ReactPackage&amp;gt;asList(
-                new ModuleRegistryAdapter(mModuleRegistryProvider)
-            );
-            packages.addAll(unimodules);
&lt;/span&gt;
            return packages;
        }

      };
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove the generated package list file located at &lt;code&gt;android/app/src/main/java/com/myapp/generated/BasePackageList.java&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#update-expo-sdk-packages"&gt;
  &lt;/a&gt;
  Update Expo SDK packages
&lt;/h2&gt;

&lt;p&gt;If you already have Expo SDK packages installed like &lt;code&gt;expo-calendar&lt;/code&gt;, as I had, you need to update those to the latest version as well. Check your &lt;code&gt;package.json&lt;/code&gt; to see which Expo SDK packages are there, set them to the latest version and run npm or yarn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-expo-modules"&gt;
  &lt;/a&gt;
  Add Expo modules
&lt;/h2&gt;

&lt;p&gt;Now we removed the old react-native-unimodules and updated the Expo SDK packages we can install the new Expo modules. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-install"&gt;
  &lt;/a&gt;
  Automatic install
&lt;/h3&gt;

&lt;p&gt;Expo made a great tool to add the Expo package and adjust all the native files: &lt;code&gt;npx install-expo-modules&lt;/code&gt;&lt;br&gt;
I would recommend this to use for adding the Expo modules. Beacuse we removed the old react-native-unimodules it should work for most projects. If not and it fails or you cannot build the project you can try the manual instalation &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#manual-install"&gt;
  &lt;/a&gt;
  Manual install
&lt;/h3&gt;

&lt;p&gt;Expo has an in &lt;a href="https://docs.expo.dev/bare/installing-expo-modules/#manual-installation"&gt;detailed description&lt;/a&gt; how to add Expo modules the manual way. Just modify all the named files and it should be ok.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#update-imports-in-typescriptjavascript"&gt;
  &lt;/a&gt;
  Update imports in Typescript/Javascript
&lt;/h2&gt;

&lt;p&gt;The old react-native-unimodules, and the new Expo moduels as well, included some Expo SDK packages like &lt;code&gt;expo-application&lt;/code&gt;, &lt;code&gt;expo-constants&lt;/code&gt; and 'expo-file-system'.&lt;br&gt;
You need to migrate the one you imported from react-native-unimodules to now use the real Expo SDK package name and imports. For example if we used Expo constants we need to change the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- import { Constants } from 'react-native-unimodules';
&lt;/span&gt;&lt;span class="gi"&gt;+ import Constants from 'expo-constants';
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>reactnative</category>
      <category>expo</category>
    </item>
  </channel>
</rss>
