<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Javascript runtime interview question</title>
      <author>Adrian Matei </author>
      <pubDate>Sat, 14 Aug 2021 18:56:59 +0000</pubDate>
      <link>https://dev.to/codever/javascript-runtime-interview-question-5bo8</link>
      <guid>https://dev.to/codever/javascript-runtime-interview-question-5bo8</guid>
      <description>&lt;p&gt;I would definitely put the following question in an interview, if am interested in knowing if the candidate knows a bit about the &lt;strong&gt;Javascript runtime&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;What is the order in which the following texts are logged via &lt;code&gt;console.log&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 - start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2 - setTimeout1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3 - promise1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4 - promise2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5 - setTimeout2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6 - end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you are not sure about the answer read this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth"&gt;In depth: Microtasks and the JavaScript runtime environment&lt;/a&gt; article before&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="c1"&gt;// statement is executed directly in the script (first "Run script" task)&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="c1"&gt;// part of the first "Run script" task gets executed too&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt; &lt;span class="c1"&gt;// placed in microTasks queue and executed between tasks, after first "Run script" task is ready&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="c1"&gt;// microtask added  during previous microtask execution  and executed immediately&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;setTimeout1&lt;/span&gt; &lt;span class="c1"&gt;// callback execution scheduled in another task in the "macroTasks" queue (also task queue), executed in the next interation of the event-loop&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;setTimeout2&lt;/span&gt; &lt;span class="c1"&gt;// callback execution scheduled in another task in the task queue, executed in the next iteration of event-loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Shared ‚ù§Ô∏è from &lt;a href="https://www.codever.land/snippets/61169574f520065311390cd9/details"&gt;Codever&lt;/a&gt;. ¬† üëâ  ¬† use the &lt;a href="https://www.codever.land/snippets/61169574f520065311390cd9/details"&gt;&lt;strong&gt;copy to mine&lt;/strong&gt;&lt;/a&gt; functionality to add it to your personal snippets collection. &lt;/p&gt;


&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>runtime</category>
      <category>codever</category>
      <category>snippets</category>
    </item>
    <item>
      <title>When you need Database per Service ?</title>
      <author>Danyson</author>
      <pubDate>Sat, 14 Aug 2021 18:33:32 +0000</pubDate>
      <link>https://dev.to/danyson/when-you-need-database-per-service-2710</link>
      <guid>https://dev.to/danyson/when-you-need-database-per-service-2710</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Imagine opening a food ordering app.
                ||
                \/
       Selecting Dosai to eat.
                ||
                \/
       Three services spawns 
       //        ||        \\
      \/         \/         \/
   Ordering   Preparing   Delivery
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In a regular monolithic architecture three of these services share a single Food database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once the we select the food it arrives to Ordering service which intimates the hotel and updates the Food DB's Order table or collection.&lt;/p&gt;

&lt;p&gt;Next( ), Food is been prepared at Preparing service (cooking &amp;amp; packaging) and updates the Food DB's Prepare table or collection.&lt;/p&gt;

&lt;p&gt;Next( ), Food is been Delivered by Delivery service and updates the Food DB's Delivery table or collection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-a-delivery-app-is-not-that-simple-to-serve-few-hotels"&gt;
  &lt;/a&gt;
  But a delivery app is not that simple to serve few hotels.
&lt;/h3&gt;

&lt;p&gt;Thousands of hotels will be there.&lt;/p&gt;

&lt;p&gt;Ordering has varities of style.&lt;/p&gt;

&lt;p&gt;Preparing has lots of sub process in itself.&lt;/p&gt;

&lt;p&gt;Delivery has lots of modes with communicating different people.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Putting all these data in to single DB with several tables or collections, managing huge amount of data on these several tables and collections is sort of a pain when you want to scale and manage the service with less complexity.&lt;/p&gt;

&lt;p&gt;The main Complexity arises to whoever developes these services in the backend, also when finding bugs and fixing issues.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-about-each-service-has-its-own-database-"&gt;
  &lt;/a&gt;
  How about each service has its own database ?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Ordering service has its own Order DB.&lt;/li&gt;
&lt;li&gt;Preparing service has its own Prepare DB.&lt;/li&gt;
&lt;li&gt;Delivery service has its own Delivery DB.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#lets-wrap-them-up-in-a-container"&gt;
  &lt;/a&gt;
  Lets wrap them up in a container.
&lt;/h3&gt;

&lt;p&gt;After wrapping OrderDB with Docker --&amp;gt; connect to&lt;/p&gt;

&lt;p&gt;--&amp;gt; OrderingService&lt;/p&gt;

&lt;p&gt;After wrapping PrepareDB with Docker --&amp;gt; connect to&lt;/p&gt;

&lt;p&gt;--&amp;gt; PreparingService&lt;/p&gt;

&lt;p&gt;After wrapping DeliveryDB with Docker --&amp;gt; connect to&lt;/p&gt;

&lt;p&gt;--&amp;gt; DeliveryService&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --name OrderDB -d mongo:tag
docker run -it --network OrderingService-network mongo --host OrderDB

docker run --name PrepareDB -d mongo:tag
docker run -it --network PreparingService-network mongo --host PrepareDB

docker run --name DeliveryDB -d mongo:tag
docker run -it --network DeliveryService-network mongo --host DeliveryDB


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ok-wait-now-how-do-you-synchronize-these-services-"&gt;
  &lt;/a&gt;
  Ok wait, now how do you synchronize these services ?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The flow of process is not asynchronous.&lt;/p&gt;

&lt;p&gt;They need to be synchronized like,&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Order
  ||
  \/
Prepare
  ||
  \/
Deliver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Somebody has to tell Preparing Service about the arrived Order. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next( )&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Somebody has to tell Delivery service about the food been prepared.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this we need &lt;a href="https://redis.io/topics/pubsub"&gt;Redis PUB/SUB&lt;/a&gt; to build a message broker between our OrderDB --&amp;gt; PrepareDB --&amp;gt; DeliveryDB.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Order arrives, Ordering Service places order and updates OrderDB and says to the Preparing Service about the arrived order.&lt;/p&gt;

&lt;p&gt;After hearing about the Order, Preparing service prepares food and updates the PrepareDB and says to the Delivery Service about the Prepared food.&lt;/p&gt;

&lt;p&gt;After hearing about the prepared food, Delivery Service delivers food and updates DeliveryDB.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now thats how Database per service will be utilized.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>docker</category>
      <category>redis</category>
      <category>database</category>
    </item>
    <item>
      <title>My üÖ∞ngular FREE Course is almost done ! </title>
      <author>The Nerdy Dev</author>
      <pubDate>Sat, 14 Aug 2021 18:17:06 +0000</pubDate>
      <link>https://dev.to/thenerdydev/my-ngular-free-course-is-almost-done-34lg</link>
      <guid>https://dev.to/thenerdydev/my-ngular-free-course-is-almost-done-34lg</guid>
      <description>&lt;p&gt;Hey guys, &lt;/p&gt;

&lt;p&gt;Recently, I just finished working on a full &lt;strong&gt;Angular&lt;/strong&gt; FREE Course that will cover all of the major topics that we have in Angular. We will be covering topics like : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEbbq8iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvhi8sayaq8kc4b1xmz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEbbq8iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvhi8sayaq8kc4b1xmz2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-that-we-will-be-covering"&gt;
  &lt;/a&gt;
  TOPICS THAT WE WILL BE COVERING
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-what-is-angular-"&gt;
  &lt;/a&gt;
  1. What is Angular ?
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#2-angular-basics"&gt;
  &lt;/a&gt;
  2. Angular Basics
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#3-angular-components"&gt;
  &lt;/a&gt;
  3. Angular Components
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#4-event-handling-in-angular"&gt;
  &lt;/a&gt;
  4. Event Handling in Angular
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#5-services-in-angular"&gt;
  &lt;/a&gt;
  5. Services in Angular
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#6-input-and-output-decorators-in-angular"&gt;
  &lt;/a&gt;
  6. Input and Output decorators in Angular
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#7-angular-forms-template-driven-forms-reactive-forms"&gt;
  &lt;/a&gt;
  7. Angular Forms (Template Driven Forms + Reactive Forms)
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#8-angular-pipes"&gt;
  &lt;/a&gt;
  8. Angular Pipes
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#9-angular-directives"&gt;
  &lt;/a&gt;
  9. Angular Directives
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#10-angular-routing"&gt;
  &lt;/a&gt;
  10. Angular Routing
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#11-route-guards-in-angular"&gt;
  &lt;/a&gt;
  11. Route Guards in Angular
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#12-understanding-http-and-rxjs-observables"&gt;
  &lt;/a&gt;
  12. Understanding HTTP and Rxjs Observables
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#13-rxjs-operators"&gt;
  &lt;/a&gt;
  13. RxJS Operators
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#14-the-real-difference-between-promises-and-observables"&gt;
  &lt;/a&gt;
  14. The Real Difference between Promises and Observables
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#15-styling-in-angular"&gt;
  &lt;/a&gt;
  15. Styling in Angular
&lt;/h3&gt;

&lt;p&gt;and a lot more.. &lt;/p&gt;

&lt;p&gt;If you want to understand my teaching style, feel free to check out my other videos on the channel. Here is the link for the channel : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Go subscribe to the channel now to get the notification for the video when it comes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>angular</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Twitter, Grifters, DevRels, and the end of everything as we know it</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sat, 14 Aug 2021 18:10:25 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/twitter-grifters-devrels-and-the-end-of-everything-as-we-know-it-24pa</link>
      <guid>https://dev.to/alvaromontoro/twitter-grifters-devrels-and-the-end-of-everything-as-we-know-it-24pa</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is going a rant. More of an "old man yells at cloud" type of moment... So, feel free to leave the article now before suffering it üòã&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#dev-twitter"&gt;
  &lt;/a&gt;
  Dev Twitter
&lt;/h2&gt;

&lt;p&gt;Let me start by saying &lt;strong&gt;I'm not too fond of the concept of Dev/Tech Twitter. I find it ridiculous.&lt;/strong&gt; It makes it look like all the developers on Twitter think and behave in the same way when, in reality, it is an incredibly diverse group, often divergent and contradictory. Yet, for simplicity, I will use the term Dev Twitter many times in this article.&lt;/p&gt;

&lt;p&gt;In my time browsing Dev Twitter, I found many types of developers that could be classified based on what/how they post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People who mostly read and rarely share about development.&lt;/li&gt;
&lt;li&gt;People who talk about dev and share original content.&lt;/li&gt;
&lt;li&gt;People who share original content (but mostly not theirs).&lt;/li&gt;
&lt;li&gt;People who talk about programming (but don't share dev content).&lt;/li&gt;
&lt;li&gt;People who mostly don't talk about programming, mainly feel-good and current topics (aka memes).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's not a strict classification, and many users jump from one to another. But in general, at any given moment, most users fall into one of those five groups.&lt;/p&gt;

&lt;p&gt;I will talk about people who fall in the last two categories: Twitter users who speak about programming, but mostly they don't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter-grifters"&gt;
  &lt;/a&gt;
  Twitter Grifters
&lt;/h2&gt;

&lt;p&gt;Twitter Grifters are people that are on Twitter to build an audience. They don't care about what, who, or how. They mostly care about numbers (and how to make money out of it). There are grifters everywhere, but Dev Twitter has a ton of them.&lt;/p&gt;

&lt;p&gt;They could talk about software development or about the growth of sugar cane in the Himalayas, but they picked software development because it is far more profitable.&lt;/p&gt;

&lt;p&gt;Grifters prey on people new to development. Learning programming is not easy, and it can be confusing at times: there are too many resources from too many places. It is difficult to find the right thing and easy to get lost. A person that combines feel-good messages with apparently well-curated information is appealing. Grifters take advantage of that. They present themselves as teachers and educators, but nothing further from the truth.&lt;/p&gt;

&lt;p&gt;Here are some clues that you may be in front of a Twitter Grifter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They post a lot. Like nonstop. At a rate that is &lt;em&gt;unhealthy&lt;/em&gt; for an account.&lt;/li&gt;
&lt;li&gt;Most of their posts are lists or threads that start with "üëáüßµ."&lt;/li&gt;
&lt;li&gt;Most of their content is not original, but &lt;em&gt;refried&lt;/em&gt; content from various sources (often without proper attribution.)&lt;/li&gt;
&lt;li&gt;Their content ratio of trending memes is incredibly high (they love these things and surf them like champs.)&lt;/li&gt;
&lt;li&gt;They love open-ended questions that have a subjective answer and generate many responses (same idea as above).&lt;/li&gt;
&lt;li&gt;They like and retweet (and re-retweet, and re-re-retweet several times more) their own content.&lt;/li&gt;
&lt;li&gt;Their content ratio of inspirational messages is considerably high.&lt;/li&gt;
&lt;li&gt;They may (or may not) talk a lot about development, but they don't actually share any development they do.&lt;/li&gt;
&lt;li&gt;They talk more about their number of followers than about any other thing. This one has many variants:

&lt;ul&gt;
&lt;li&gt;"I'll do X when I get to Y followers."&lt;/li&gt;
&lt;li&gt;"I'm X followers short to Y."&lt;/li&gt;
&lt;li&gt;"I'll share X if this gets to Y likes/retweets."&lt;/li&gt;
&lt;li&gt;"I made it to X followers! Now off to Y!"&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My personal favorite is "&lt;em&gt;I'll share more videos when I get to 1,000 subscribers on Youtube&lt;/em&gt;." Why 1,000 and not 100, 250, or 500? (which would be more realistic expectations). The answer is simple: a Youtuber willing to serve ads must have ‚Äìyou guessed right‚Äì at least 1,000 subscribers. It was never about the message or the audience. It's always about the money.&lt;/p&gt;

&lt;p&gt;Some readers may say now, "&lt;em&gt;I know a bunch of people that check most of those things, but they definitely are not grifters&lt;/em&gt;." And you are definitely right. Some are "regular people," and some others are DevRels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devrels"&gt;
  &lt;/a&gt;
  DevRels
&lt;/h2&gt;

&lt;p&gt;I call them DevRel for shorts, but they go by many names: Dev Relations, Evangelists, Advocates, etc. And it has been a trendy &lt;em&gt;new&lt;/em&gt; position for companies to influence developers.&lt;/p&gt;

&lt;p&gt;But DevRels are not "Dev influencers." Their role goes beyond writing about development or sharing inspirational quotes on Twitter. DevRels are a bridge between external developers and company developers. They need to engage with the audience, but not in the same way a Twitter Grifter does it.&lt;/p&gt;

&lt;p&gt;Still, &lt;strong&gt;the fine line separating a DevRel and a Twitter Grifter is really thin&lt;/strong&gt; and blurry. Some people jump between the two often: they build a large audience as Grifters, then they are hired as DevRels by companies trying to take advantage of the big number of followers as a promotion stunt.&lt;/p&gt;

&lt;p&gt;DevRels post about programming, but many times without actually coding. They share encouragement and inspiring quotes, but mostly targeted and tailored to their audience, not developers in general, but some tool users in particular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-of-everything-as-we-know-it"&gt;
  &lt;/a&gt;
  The end of everything as we know it
&lt;/h2&gt;

&lt;p&gt;Dev Twitter has evolved through this last decade. Ten years ago, there was no Dev Twitter. Then, it was a nebulous idea that now concentrates on a group of people (call them Dev influencers) who talk and define the topics.&lt;/p&gt;

&lt;p&gt;The problem is that the &lt;strong&gt;Twitter Grifters are hoarding the conversation, but they are not really contributing much to its progress: their topics are repetitive, their messages are void of meaning or depth, and they don't really care about their audience&lt;/strong&gt; (as long as it grows). And that causes the Dev Twitter ecosystem to become stale.&lt;/p&gt;

&lt;p&gt;DevRels could help, they are better, and they are active too. But many of them are not on Dev Twitter for the sake of being around other developers, but because it is part of their job at company XYZ. So they work with developers but ultimately for a company, presenting a (not always clear) bias in their interactions.&lt;/p&gt;

&lt;p&gt;So, how do we prevent Dev Twitter from falling into the hands of the Grifters? I don't know, and maybe we can't. It's how the system was built. But, unfortunately, larger audiences mean higher reach to new audiences too. It's a vicious cycle.&lt;/p&gt;

&lt;p&gt;Maybe, we could break this system by getting other (better) developers more involved and focusing on them. But that's not always possible. The best developers I've known are not too active on Twitter. They read and comment here or there, but they don't participate in the conversations that much. The actual development and teaching are not done on Twitter but in their jobs. They don't have the time or interest to play a role online.&lt;/p&gt;

&lt;p&gt;I don't know what needs to be done. But whatever it is, we cannot pin it on individuals. It should be a collective effort from the whole community. The Grifters could be helpful given their high audience. But will they want to change their ways and move forward?&lt;/p&gt;

</description>
      <category>opinion</category>
      <category>rant</category>
      <category>twitter</category>
      <category>discuss</category>
    </item>
    <item>
      <title>React Native Taxi App: Booking Information. Places API</title>
      <author>Cristian Echeverria</author>
      <pubDate>Sat, 14 Aug 2021 18:01:41 +0000</pubDate>
      <link>https://dev.to/cecheverri4/react-native-taxi-app-booking-information-24op</link>
      <guid>https://dev.to/cecheverri4/react-native-taxi-app-booking-information-24op</guid>
      <description>&lt;p&gt;Let's continue working with the Booking process. We're going to use the same UserScreen component for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Departure Information&lt;/li&gt;
&lt;li&gt;Booking Information&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We already worked on Departure Information on previous parts of this tutorial. For the Booking Information let's start creating a new file for the component inside &lt;strong&gt;src/components/BookingInformation.js&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/BookingInformation.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components/native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-vector-icons/Feather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;formatPlaceName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;usePlace&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../context/PlacesManager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="s2"&gt;`
  flex: 1.5;
  background-color: #fff;
  padding-vertical: 20px;
  padding-horizontal: 20px;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="s2"&gt;`
  flex-direction: row;
  align-items: center;
`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocationPlaceholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #717171;
  font-size: 14px;
  margin-left: 5px;
  font-weight: 600;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #000;
  font-size: 16px;
  font-weight: 600;
  margin-left: 5px;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BookingInformation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentPlace&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePlace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map-pin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current-place-description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formatPlaceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Location&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;more-vertical&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;marginTop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;more-vertical&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LocationPlaceholder&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;destination-label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Destination&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/LocationPlaceholder&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Location&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created a couple of Styled components also imported &lt;code&gt;usePlace&lt;/code&gt; custom hook from PlacesManager Context Provider to show the selected currentPlace description. The main idea is to show the &lt;code&gt;BookingInformation&lt;/code&gt; component from UserScreen when we toggle the &lt;code&gt;Book Now&lt;/code&gt; button from the DepartureInformation component.&lt;/p&gt;

&lt;p&gt;I'm going to create another custom hook component for show/hide functionality in our App. For that, let's create a new folder, &lt;code&gt;taxiApp/src/hooks/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// taxiApp/src/hooks/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useShowState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialOpen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's use &lt;code&gt;useShowState&lt;/code&gt; custom hook inside our UserScreen component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// taxiApp/src/screens/UserScreen.js&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow strict-local
 */&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components/native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MapView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PROVIDER_GOOGLE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-maps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RESULTS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-permissions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Geolocation&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-geolocation-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;customStyleMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MenuButtonLeft&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-vector-icons/Feather&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DepartureInformation&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/DepartureInformation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Geocoder&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-geocoding&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;usePlace&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../context/PlacesManager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;GOOGLE_MAPS_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/constants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;marker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../assets/icons-marker.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Import BookingInformation and useShowState custom hook&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BookingInformation&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/BookingInformation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useShowState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Geocoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GOOGLE_MAPS_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SafeAreaView&lt;/span&gt;&lt;span class="s2"&gt;`
  flex: 1;
  background-color: #fff;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FixedMarker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="s2"&gt;`
  left: 50%;
  margin-left: -16px;
  margin-top: -125px;
  position: absolute;
  top: 50%;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markerStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatchPlace&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePlace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a local state using the custom Hook&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showBooking&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleShowBookingViews&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useShowState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleLocationPermission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;permissionCheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;permissionCheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IOS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOCATION_WHEN_IN_USE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;permissionCheck&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;RESULTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DENIED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;permissionRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IOS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOCATION_WHEN_IN_USE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;permissionRequest&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;RESULTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GRANTED&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Location permission granted.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Location perrmission denied.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;android&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;permissionCheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ANDROID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACCESS_FINE_LOCATION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;permissionCheck&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;RESULTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DENIED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;permissionRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ANDROID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACCESS_FINE_LOCATION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;permissionRequest&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;RESULTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GRANTED&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Location permission granted.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Location perrmission denied.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleLocationPermission&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;Geocoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;formatted_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;place_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="nx"&gt;dispatchPlace&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_CURRENT_PLACE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;formatted_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;placeId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;place_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;enableHighAccuracy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;maximumAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dispatchPlace&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onRegionChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Geocoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;formatted_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;place_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="nx"&gt;dispatchPlace&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_CURRENT_PLACE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;formatted_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;placeId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;place_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;headerLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MenuButtonLeft&lt;/span&gt;
          &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Menu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-menu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MenuButtonLeft&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="nx"&gt;barStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MapView&lt;/span&gt;
          &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;mapContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PROVIDER_GOOGLE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;initialRegion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
            &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;latitudeDelta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0922&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;longitudeDelta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0421&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;onRegionChangeComplete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onRegionChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;showsUserLocation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;customMapStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;customStyleMap&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;paddingAdjustmentBehavior&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;automatic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;showsMyLocationButton&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;showsBuildings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;maxZoomLevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;17.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;loadingEnabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;loadingIndicatorColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fcb103&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;loadingBackgroundColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#242f3e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FixedMarker&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fixed-marker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;markerStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/FixedMarker&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Logic to when to show BookingInformation or DepartureInformation */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showBooking&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BookingInformation&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DepartureInformation&lt;/span&gt; &lt;span class="nx"&gt;toggleShowBookingViews&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleShowBookingViews&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* See that we pass toggleShowBookingViews as prop */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserScreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see, we imported &lt;code&gt;BookingInformation&lt;/code&gt; component and &lt;code&gt;useShowState&lt;/code&gt; custom hook to &lt;code&gt;UserScreen&lt;/code&gt;. The custom hook will create a local state that will handle when we show/hide &lt;code&gt;BookingInformation&lt;/code&gt; and &lt;code&gt;DepartureInformation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also passed &lt;code&gt;toggleShowBookingViews&lt;/code&gt; function as prop to DepartureInformation. The reason is to toggle the &lt;code&gt;Book Now&lt;/code&gt; button and update the &lt;code&gt;showBooking&lt;/code&gt; state.&lt;/p&gt;

&lt;p&gt;Now let's move to &lt;code&gt;DepartureInformation&lt;/code&gt; and handle the new prop we just passed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// taxiApp/src/components/DepartureInformation.js&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;DepartureInformation&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;toggleShowBookingViews&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="nx"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BookNow&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BookNowButton&lt;/span&gt;
          &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleShowBookingViews&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-now-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ButtonText&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ButtonText&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BookNowButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BookNow&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;DepartureInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;toggleShowBookingViews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We receive the passed prop &lt;code&gt;toggleShowBookingViews&lt;/code&gt; and then replace the console.log() function with the new prop function in the &lt;code&gt;BookNowButton&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;So, if everything is fine when you press the &lt;code&gt;Book Now&lt;/code&gt; button, you should see &lt;code&gt;BookingInformation&lt;/code&gt; component UI, as shown in the gif below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3IBnQxtzGntrzhodF7/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3IBnQxtzGntrzhodF7/giphy.gif" alt="Book Now Button Toggle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-booking-information-input"&gt;
  &lt;/a&gt;
  Add a Booking Information Input
&lt;/h2&gt;

&lt;p&gt;We need to add an input where the user can type the Destination Place. The idea is to have a &lt;code&gt;Modal&lt;/code&gt; where we display a &lt;code&gt;TextInput&lt;/code&gt;. Before that, let's add a &lt;code&gt;Pressable&lt;/code&gt; component that will open the Modal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// taxiApp/src/components/BookingInformation.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components/native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-vector-icons/Feather&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formatPlaceName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;usePlace&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../context/PlacesManager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Import custom hook for show/hide elements.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useShowState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="s2"&gt;`
  flex: 1.5;
  background-color: #fff;
  padding-vertical: 20px;
  padding-horizontal: 20px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="s2"&gt;`
  flex-direction: row;
  align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocationPlaceholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #717171;
  font-size: 14px;
  margin-left: 5px;
  font-weight: 600;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #000;
  font-size: 16px;
  font-weight: 600;
  margin-left: 5px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// New Pressable component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocationPressable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pressable&lt;/span&gt;&lt;span class="s2"&gt;`
  flex-direction: row;
  align-items: center;
  margin-bottom: 10px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// New styled component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddDestinationText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #000;
  font-size: 20px;
  font-weight: 600;
  margin-left: 5px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// New styled component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TextRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  margin-left: auto;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BookingInformation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add destinationPlace from PlacesManager&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;destinationPlace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePlace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a local state for toggle a Modal&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglePlaceModal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useShowState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map-pin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current-place-description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formatPlaceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Location&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;more-vertical&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;marginTop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;more-vertical&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LocationPlaceholder&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;destination-label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Destination&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/LocationPlaceholder&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Location&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add new components for toggle a Modal */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LocationPressable&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;togglePlaceModal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddDestinationText&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;destination-place-description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formatPlaceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destinationPlace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Add destination&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/AddDestinationText&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextRight&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TextRight&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/LocationPressable&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We import the custom hook for handle show/hide Modal. Add a couple of new Styled Components, including &lt;code&gt;Pressable&lt;/code&gt; from React Native. Also, add &lt;code&gt;destinationPlace&lt;/code&gt; from PlacesManager Context Provider.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#destination-address-modal"&gt;
  &lt;/a&gt;
  Destination Address Modal
&lt;/h3&gt;

&lt;p&gt;Alright, we need to create a new component called &lt;code&gt;SearchAddressModal&lt;/code&gt;, inside that Modal we will have a TextInput for search the user destination place. &lt;code&gt;SearchAddressModal&lt;/code&gt; will be called from the &lt;code&gt;BookingInformation&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-native-modal"&gt;
  &lt;/a&gt;
  React Native Modal
&lt;/h4&gt;

&lt;p&gt;We'll use a new package called &lt;code&gt;react-native-modal&lt;/code&gt; for our Modal component, let's install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;native&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;exact&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new file inside &lt;code&gt;taxiApp/src/components/SearchAddressModal.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// taxiApp/src/components/SearchAddressModal.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components/native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Modal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-modal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-vector-icons/Feather&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SafeAreaView&lt;/span&gt;&lt;span class="s2"&gt;`
  flex: 1;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BackButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;&lt;span class="s2"&gt;`
  margin-top: 10px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ModalChildrenView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="s2"&gt;`
  flex-direction: row;
  align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="s2"&gt;`
  flex-direction: row;
  align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ClearDestinationButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;&lt;span class="s2"&gt;`
  margin-left: auto;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #000000;
  font-size: 20px;
  font-weight: 600;
  height: 50px;
  width: 90%;
  padding: 10px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Modal&lt;/span&gt;
      &lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;backdropColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;backdropOpacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;animationIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slideInUp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search-address-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="nx"&gt;barStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BackButton&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;back-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arrow-left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BackButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ModalChildrenView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SearchContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map-pin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;
              &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add destination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;placeholderTextColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ClearDestinationButton&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clear-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x-circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ClearDestinationButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SearchContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ModalChildrenView&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Modal&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see now, we have a new component that uses Modal from &lt;code&gt;react-native-modal&lt;/code&gt;. For now, this component doesn't have a local state; instead, we receive a couple of props from the &lt;code&gt;BookingInformation&lt;/code&gt; component to check the Modal's state and close the Modal.&lt;/p&gt;

&lt;p&gt;We added a &lt;code&gt;TextInput&lt;/code&gt; that for now doesn't work because it doesn't have a state. The local state for the &lt;code&gt;Input&lt;/code&gt; component will come as prop from &lt;code&gt;BookingInformation&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#open-the-modal-from-booking-information"&gt;
  &lt;/a&gt;
  Open the Modal from Booking Information
&lt;/h4&gt;

&lt;p&gt;Move into &lt;code&gt;BookingInformation&lt;/code&gt; and import the new component, also pass the props the new Modal component need to be visible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// taxiApp/src/components/BookingInformation.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SearchAddressModal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BookingInformation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglePlaceModal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useShowState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Import the new Modal component */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt;
        &lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;togglePlaceModal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we imported the new Modal component we created and we are rendering outside our &lt;code&gt;&amp;lt;Container&amp;gt;&amp;lt;/Container&amp;gt;&lt;/code&gt; component, that's why we use &lt;code&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/code&gt; before and after Container component. &lt;/p&gt;

&lt;p&gt;We also pass the two props &lt;code&gt;&amp;lt;SearchAddressModal /&amp;gt;&lt;/code&gt; component is expecting in order to show/hide.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt;
        &lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;togglePlaceModal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is fine, when you press the "Add destination" component, you should see that the Modal is visible. Inside the Modal, you can close it by pressing the back arrow button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/92QSKHKht9qfIO1YRh/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/92QSKHKht9qfIO1YRh/giphy.gif" alt="Show/Hide Modal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-local-state-for-modal-input"&gt;
  &lt;/a&gt;
  Add local state for Modal Input
&lt;/h4&gt;

&lt;p&gt;Let's add a local state that will make the Input component work, as I mentioned above. This local state will come from &lt;code&gt;BookingInformation&lt;/code&gt; and passed to the Modal component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// taxiApp/src/components/BookingInformation.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BookingInformation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;destinationPlace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePlace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglePlaceModal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useShowState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="c1"&gt;// Input Modal state&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt;
        &lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;togglePlaceModal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have to move into &lt;code&gt;SearchAddressModal&lt;/code&gt; component and receive the two props and use them for the &lt;code&gt;Input&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// taxiApp/src/components/SearchAddressModal.js&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Modal&lt;/span&gt;
      &lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;backdropColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;backdropOpacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;animationIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slideInUp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search-address-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="nx"&gt;barStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BackButton&lt;/span&gt; &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;back-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arrow-left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BackButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ModalChildrenView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SearchContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map-pin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;
              &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add destination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;placeholderTextColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="o"&gt;+&lt;/span&gt;          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;+&lt;/span&gt;          &lt;span class="nx"&gt;onChangeText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ClearDestinationButton&lt;/span&gt;
              &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clear-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="o"&gt;+&lt;/span&gt;          &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FeatherIcon&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x-circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ClearDestinationButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ClearDestinationButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SearchContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ModalChildrenView&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Modal&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we should be able to type inside the Input component. Also, we should be able to clear what we type when we press the "x-circle" button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-places-api"&gt;
  &lt;/a&gt;
  Google Places API
&lt;/h3&gt;

&lt;p&gt;We will use Places API from Google to search for our destination place when we type using the Input component on the Modal screen.&lt;/p&gt;

&lt;p&gt;There's a good package for React Native called &lt;code&gt;react-native-google-places-autocomplete&lt;/code&gt; that you can use, I tested it, and it works fine. It already comes with an Input component.&lt;/p&gt;

&lt;p&gt;But, for this project to have more control, I decided to do it step by step.&lt;/p&gt;

&lt;p&gt;We'll need to enable &lt;em&gt;Places API&lt;/em&gt; in our Google Console Cloud project, the same steps we followed for enabling Geocoding API and Maps SDK for Android and iOS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJVUNBps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sxvWbA9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJVUNBps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sxvWbA9.png" alt="Places API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The process is quite simple, we need to fetch from and endpoint passing the Google Maps API Key and the destination. We'll create a new function utility for that inside our &lt;code&gt;src/utils/index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;GOOGLE_MAPS_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./constants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// This function receive two arguments&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;APIPlaceAutocomplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://maps.googleapis.com/maps/api/place/autocomplete/json?key=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;GOOGLE_MAPS_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;input=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;location=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;radius=2000`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No destination Address provided&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we are fetching from &lt;code&gt;https://maps.googleapis.com/maps/api/place/autocomplete/json&lt;/code&gt; passing a couple of parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;key&lt;/li&gt;
&lt;li&gt;input&lt;/li&gt;
&lt;li&gt;location&lt;/li&gt;
&lt;li&gt;radius&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have to call this function from the &lt;code&gt;SearchAddressModal&lt;/code&gt; component passing the parameters it needs to make the successful call to the endpoint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-places-api-using-lodash-debounce"&gt;
  &lt;/a&gt;
  Fetch Places API using Lodash Debounce
&lt;/h3&gt;

&lt;p&gt;If we call the Google Places API while we type using the Input component from the Modal, we will make the call every time we type any single word, which is useless and unsuitable for optimization.&lt;/p&gt;

&lt;p&gt;That's why we're going to use Debounce from the Lodash library. Install Lodash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;lodash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open SearchAddressModal component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;APIPlaceAutocomplete&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;debounceSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;debounceSearch&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;debounceSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;APIPlaceAutocomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Modal&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Modal&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We first import &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt; from React. We also import &lt;code&gt;debounce&lt;/code&gt; from &lt;code&gt;lodash&lt;/code&gt; and the recent created function utility &lt;code&gt;APIPlaceAutocomplete&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also receive a new prop, &lt;code&gt;currentPlace&lt;/code&gt;. This prop we could inject into the Modal component using the custom hook from PlacesManager, but I decided to receive it from BookingInformation.&lt;/p&gt;

&lt;p&gt;Using useState, we create a local state called &lt;code&gt;predictions&lt;/code&gt;, which is an empty array, here we will display the list of predictions from Google Places API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;debounceSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;debounceSearch&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we have a &lt;code&gt;newAddress&lt;/code&gt;, we call the function &lt;code&gt;debounceSearch&lt;/code&gt; with the &lt;code&gt;newAddress&lt;/code&gt;. Otherwise, we call setPredictions with an empty array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;debounceSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;APIPlaceAutocomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use useCallback with debounce, which means that every 1 second, we will call the &lt;code&gt;APIPlaceAutocomplete&lt;/code&gt; function, passing the two parameters the function needs.&lt;/p&gt;

&lt;p&gt;So, let's pass &lt;code&gt;currentPlace&lt;/code&gt; from BookingInformation as prop to SearchAddressModal component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BookingInformation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt;
        &lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;togglePlaceModal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;+&lt;/span&gt;    &lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#render-list-of-predictions-with-flatlist"&gt;
  &lt;/a&gt;
  Render List of Predictions with Flatlist
&lt;/h4&gt;

&lt;p&gt;We need to render the list of predictions that we stored inside the &lt;code&gt;predictions&lt;/code&gt; local state. First, let's create a new component inside &lt;code&gt;src/components/Predictions.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components/native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 5px;
  font-size: 14px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Prediction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;place_id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;
      &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;place_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;testID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`prediction-row-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;place_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TouchableOpacity&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now let's move into SearchAddressModal and start using it along with Flatlist component from React Native.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Prediction&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Prediction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="s2"&gt;`
  margin-bottom: 20px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SearchAddressModal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;isModalVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setNewAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;debounceSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;debounceSearch&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;debounceSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;APIPlaceAutocomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentPlace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPredictions&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderPredictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Prediction&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Modal&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ModalChildrenView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ModalChildrenView&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Predictions&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FlatList&lt;/span&gt;
              &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;renderItem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderPredictions&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;keyExtractor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;place_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Predictions&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Modal&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/Je0Tor1TtBDgDfL1fb/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Je0Tor1TtBDgDfL1fb/giphy.gif" alt="Flatlist with predictions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üõë Stop!&lt;/p&gt;

&lt;p&gt;That's it from me for now. I hope you're doing good by now and learning a thing or two. We'll continue working on the Booking Information component in the next post.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>testing</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>#100daysofcode [Day - 04] </title>
      <author>Al Siam</author>
      <pubDate>Sat, 14 Aug 2021 17:54:30 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-04-kna</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-04-kna</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-04-"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 04] ;
&lt;/h1&gt;

&lt;p&gt;Today I have gained some knowledge about JS DOM (Document Object Model). Also, read some documentation about machine language and high-level programming language. also completed some real-time practice on DOM.&lt;/p&gt;

&lt;p&gt;From the next day, I will share my daily practice via the GitHub link. Thank you all so much for supporting me.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Javascript concept handbook for interviews</title>
      <author>Pratik Tiwari</author>
      <pubDate>Sat, 14 Aug 2021 17:44:07 +0000</pubDate>
      <link>https://dev.to/pratikcodes/javascript-concept-handbook-for-interviews-b0j</link>
      <guid>https://dev.to/pratikcodes/javascript-concept-handbook-for-interviews-b0j</guid>
      <description>&lt;p&gt;This series of questions and answers is all you need for all the concept and theory-based questions for your javascript interviews.&lt;/p&gt;

&lt;p&gt;Various resources have been used for the reference of the answers of the following question and are mentioned as well for further reference.&lt;/p&gt;

&lt;p&gt;Various forms/places you can get this blog.&lt;/p&gt;

&lt;p&gt;PDF: &lt;a href="https://drive.google.com/file/d/1MzoN4QZsSTOAY8naHCAQM47OTVlhe2E9/view?usp=sharing"&gt;https://drive.google.com/file/d/1MzoN4QZsSTOAY8naHCAQM47OTVlhe2E9/view?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notion:&lt;br&gt;
&lt;a href="https://pratiktiwari.notion.site/Javascript-Questions-debadba90cf44b508f6553c444243945"&gt;https://pratiktiwari.notion.site/Javascript-Questions-debadba90cf44b508f6553c444243945&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>interview</category>
    </item>
    <item>
      <title>If being inaccessible was a crime, would you be arrested?</title>
      <author>Harsh Joshi</author>
      <pubDate>Sat, 14 Aug 2021 17:07:52 +0000</pubDate>
      <link>https://dev.to/josharsh/if-being-inaccessible-was-a-crime-would-you-be-arrested-3jj5</link>
      <guid>https://dev.to/josharsh/if-being-inaccessible-was-a-crime-would-you-be-arrested-3jj5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOqqHbSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zv0qdzje509f33pgdzdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOqqHbSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zv0qdzje509f33pgdzdl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sure, you had the right color scheme, a consistent theme and a UX backed by some thrilling research on where to place a UI element, or even used SSR-like principles for other fronts of user experience but &lt;strong&gt;will your web app be able to befriend a screen reader?&lt;/strong&gt; Being accessible is somehow left out of the comprehension of many designers and developers in the webspace. Although naturally, the concepts this blog sets to address are meant for web-based projects, application development should round the circle even better. A few of these will strike you the tallest if you have, maybe, some experience in app development.&lt;br&gt;
Find out and answer, &lt;strong&gt;"If being inaccessible was a crime, would you be arrested?"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Accessible websites are crucial to the health of the internet. The more accessible a site is, the more people can reach it, use it, and enjoy it. The more people can reach, use, and enjoy a site, the more likely it is to be successful. The more successful the site is, the more likely it is to become a successful business.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-is-that-all-accessibility-means"&gt;
  &lt;/a&gt;
  But is that all accessibility means?
&lt;/h3&gt;

&lt;p&gt;The problem is that, if you are not aware of how to design your website in such a way that it becomes accessible for all, you might end up providing an inadequate experience to some users. Today‚Äôs world is &lt;strong&gt;‚Äúexperience first‚Äù&lt;/strong&gt;. Many designers, developers, and web admins just are able to capture the essence of the experience for the general public. To add to it, there are many web design and development tools which abstract these for you. But the question is whether this is ‚Äúcaptured‚Äù to an extent that the application running on the web is equally accessible to all?&lt;/p&gt;

&lt;p&gt;Sure, you had the right color scheme, a consistent theme and a UX backed by some thrilling research on where to place a UI element, or even used SSR-like principles for other fronts of user experience but will your web app be able to befriend a screen reader for a user who has visual challenges?&lt;/p&gt;

&lt;p&gt;The fundamental questions you can ask yourself to begin evaluation of accessibility in your application could be, "Will the app provide a smooth experience using a screen reader?", "Can someone navigate the application using keyboard only?". There are many other amazing ways people use the web.&lt;/p&gt;

&lt;p&gt;Here is an example - Some HTML elements have semantic meaning but no dedicated functionality. These include aside, footer, header, etc. This semantics serves the screen reader.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that elements can be described using the ARIA spec or a simple tabindex can help a user tab to an element? Another interesting concept is focus management which provides a necessary clue about the currently active item to the user. To learn more about such examples, and the foundation of web accessibility, this resource by Jon Kuperman might be a good starting point.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The matter, in many cases, is that being accessible is somehow left out of the comprehension of many designers and developers in the webspace. Although naturally, the concepts this blog sets to address are meant for web-based projects, application development should round the circle even better. A few of them will strike you the tallest if you have, maybe, some experience in app development.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you dream of that fancy loader for your website? Yes, it has got animations, colors that flicker in and out. Or do you have the next idea for an animated 404 page?&lt;/p&gt;

&lt;p&gt;MDN says, "Content that flickers, flashes, or blinks can trigger photosensitive epilepsy. Web technologies that use video, animated gifs, animated png, animated SVGs, Canvas, and CSS or JavaScript animations are all capable of content that can induce seizures or other incapacitating physical reactions".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-accessibility-anyway"&gt;
  &lt;/a&gt;
  What is Accessibility anyway?
&lt;/h3&gt;

&lt;p&gt;Accessibility is the responsibility of everyone involved in the development process. It is the responsibility of the designer, the developer, and the webmaster to make sure that the product is accessible. It is a moral and ethical issue as well as a legal one. Addressing accessibility in your processes and making it inclusive from the beginning serves more than one purpose.&lt;/p&gt;

&lt;p&gt;The Web is for everyone. Why shouldn't it be designed to be accessible to people with disabilities, including blindness and low vision, deafness and hearing loss, learning disabilities, cognitive limitations, limited movement, speech disabilities, photosensitivity, and many others?&lt;/p&gt;

&lt;p&gt;Accessibility is a combination of design, development, and strategy. A well-designed site can be easily made accessible, and an inaccessible site can be made accessible. It is a matter of the right processes and the right attitude. Accessibility is a commitment to a set of standards and guidelines that will ensure your content is visible to users with disabilities.&lt;/p&gt;

&lt;p&gt;To make your site accessible, you need to ensure that all the information you present can be accessed and used by anyone, regardless of any disability. You may need to include alternative text for images, provide text alternatives for audio and video content, and ensure that your site works with assistive technologies such as screen readers. &lt;/p&gt;

&lt;p&gt;Accessibility (Accessible Design) is a set of principles and practices that help make web content accessible to everyone including people with disabilities. It is also known as inclusive design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-standards"&gt;
  &lt;/a&gt;
  Which Standards?
&lt;/h3&gt;

&lt;p&gt;World Wide Web Consortium (W3C) aims to lead the Web to its full potential by developing standards and guidelines that ensure the long-term growth of the Web. Accessibility is one of the core values of the W3C. The W3C's Web Accessibility Initiative (WAI) is the largest international industry consortium focused on improving the accessibility of the Web for people with disabilities.&lt;/p&gt;

&lt;p&gt;The WAI guides developers of websites and software, information architects, site designers, and others to make the Web accessible to people with disabilities. The WAI also provides education, outreach, testing tools, and resources to help developers make their products and services accessible to a wide range of people with disabilities&lt;/p&gt;

&lt;p&gt;There are several levels of conformance to accessibility guidelines. The most basic level is called "Level A". Level A conformance requires that your site can be used with a keyboard only. Achieving this level of conformance requires that all of the functionality of your site can be accessed with the keyboard and the page is readable. For example, if the user is required to click a link to access a page, the link must be keyboard accessible. The user must be able to navigate to the link and activate it using the keyboard.&lt;/p&gt;

&lt;p&gt;The next level is called "Level AA". Level AA conformance is a significant extension of Level A. Level AA conformance requires that all of the functionality of the site and any of the content can be used with the keyboard. This includes any images or buttons on the page. In addition, the page must be readable when using a screen reader. The page must also provide a way to navigate to any links on the page. This ensures that the page can be easily navigated using a screen reader.&lt;/p&gt;

&lt;p&gt;The third level is called "Level AAA". Level AAA conformance is the most stringent level of conformance. Level AAA requires that all of the functionality of the site can be used with the keyboard. This includes any images or buttons on the page. In addition, the page must be readable when using a screen reader. The page must also provide a way to navigate to any links on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-how-do-i-evaluate-my-app"&gt;
  &lt;/a&gt;
  But how do I evaluate my app?
&lt;/h3&gt;

&lt;p&gt;There are a lot of free tools available over the internet which run some automated tests on your web app and return an accessibility score. While this can be step zero to get started on evaluation but adherence and compliance to different levels of standardized accessibility levels ensure that your app does well on accessibility.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>javascript</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Laravel for Beginners : a Quick Guide - 6</title>
      <author>Kartik Bhat</author>
      <pubDate>Sat, 14 Aug 2021 16:54:14 +0000</pubDate>
      <link>https://dev.to/kartikbhat/laravel-for-beginners-a-quick-guide-6-4pl5</link>
      <guid>https://dev.to/kartikbhat/laravel-for-beginners-a-quick-guide-6-4pl5</guid>
      <description>&lt;p&gt;Blade Files !!!!&lt;/p&gt;

&lt;p&gt;what are these blade files ?&lt;/p&gt;

&lt;p&gt;Cool; simply these are just HTML files, styled using CSS and made interactive using JavaScript; yes that simple.&lt;/p&gt;

&lt;p&gt;Then, Why these are called as blade files ?&lt;/p&gt;

&lt;p&gt;Ok, before that I think you already know how to infuse PHP values/variables into our html file... I suppose...&lt;/p&gt;

&lt;p&gt;using&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;?php echo $value; ?&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Correct  ?&lt;/p&gt;

&lt;p&gt;then, how to add php's logical statements in html; you suppose to know this too :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
   &amp;lt;?php
       if(a&amp;gt;b) { 
   ?&amp;gt;
      &amp;lt;b&amp;gt;&amp;lt;?php 
          echo "a is bigger" ; 
      ?&amp;gt;&amp;lt;/b&amp;gt;
      &amp;lt;?php 
       } else { 
      ?&amp;gt;
      &amp;lt;b&amp;gt;&amp;lt;?php 
        echo "b is bigger" ; 
      ?&amp;gt;&amp;lt;/b&amp;gt;
  &amp;lt;?php 
     } 
   ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Correct ?&lt;/p&gt;

&lt;p&gt;Don't you think these looks somewhat messy !!!&lt;br&gt;
I think it is too messy :)&lt;/p&gt;

&lt;p&gt;that's why laravel provides us a great solution, that is nothing but &lt;strong&gt;blade&lt;/strong&gt; , to make user interface development more cleaner and easier.&lt;/p&gt;

&lt;p&gt;Now, technically I can define this 'blade' as 'a template engine'; Laravel says it as 'Blade template engine', clear ?&lt;/p&gt;

&lt;p&gt;Let's see how to write above piece of code using blade engine,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.blade.php file holds any html code in it, and no need to enclose anything within &lt;strong&gt;&amp;lt;?php ?&amp;gt;&lt;/strong&gt; syntax, laravel handles it automatically.&lt;/li&gt;
&lt;li&gt;any php variable can be printed using

&lt;code&gt;{{  }}&lt;/code&gt;

syntax, add any php variable in between double flower brackets. it works similar to the &lt;strong&gt;echo&lt;/strong&gt; .&lt;/li&gt;
&lt;li&gt;logical statements such as 'if' and other statements can be infused by adding '@' before it, 
Eg:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'@if', '@elseif', '@endif', '@for', '@foreach', etc 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;any php logical statements can added similarly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;?php ?&amp;gt;&lt;/strong&gt; can be replaced by

&lt;code&gt;@php @endphp&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, Ok let's see about code;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
   @if(a&amp;gt;b)
     &amp;lt;b&amp;gt;{{ 'a is bigger' }}&amp;lt;/b&amp;gt;
   @elseif
     &amp;lt;b&amp;gt;{{ 'b is bigger' }}&amp;lt;/b&amp;gt;
   @endif
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks easy right ?&lt;/p&gt;

&lt;p&gt;these blade files reside inside a &lt;strong&gt;view&lt;/strong&gt; folder located under &lt;strong&gt;resources&lt;/strong&gt; folder (Go and check them once)&lt;/p&gt;

&lt;p&gt;from controller's method just we need to &lt;strong&gt;return&lt;/strong&gt; name of the blade file, it is enough to load that respective blade file on browser when we call that controller's method using one of the route;&lt;/p&gt;

&lt;p&gt;laravel provides a method called &lt;strong&gt;view()&lt;/strong&gt; to load a blade file on the browser, and optionally we can pass php array (key - value pair) as a second parameter to the view function, that array can be accessed in our blade file.&lt;/p&gt;

&lt;p&gt;Eg:&lt;br&gt;
assume there is a file called &lt;strong&gt;viewData.blade.php&lt;/strong&gt; present inside a &lt;strong&gt;resources-&amp;gt;views&lt;/strong&gt; folder; then we can load it from controller's method as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return view('viewData');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if we wish to pass a php array to it, then it looks like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$data = [
   'name'=&amp;gt;'kartik'
];
return view('viewData',$data);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is to  simple one.. correct ?&lt;/p&gt;

&lt;p&gt;Come On, Lets create a blade file and try its interaction with the controller; &lt;/p&gt;

&lt;p&gt;create a file called &lt;strong&gt;viewData.blade.php&lt;/strong&gt; inside a &lt;strong&gt;resources -&amp;gt; views&lt;/strong&gt; folder&lt;/p&gt;

&lt;p&gt;copy and paste this simple html code in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;Hi, Hello&amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets create a controller's method to load it,&lt;br&gt;
Open our DataController file the add this method to it;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function loadPage() {
  return view('viewData');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, create a &lt;strong&gt;route&lt;/strong&gt; to call this method, &lt;br&gt;
I am sure you know that where to create it :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('loadPage', [DataController::class,'loadPage']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;again to make things easy I am keeping route name and controller method's name as same, it is not mandatory to do it every time, you are free to use any words of your wish.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#be-remember-route-name-should-be-unique-you-cannot-use-same-route-to-call-different-methods-of-the-controller-"&gt;
  &lt;/a&gt;
  be remember route name should be unique, you cannot use same 'route' to call different methods of the controller :)
&lt;/h4&gt;

&lt;p&gt;now call 'loadPage' route from your browser; you know this one too right ?&lt;/p&gt;

&lt;p&gt;Ok, hit this url&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#http1270018000loadpage"&gt;
  &lt;/a&gt;
  &lt;a href="http://127.0.0.1:8000/loadPage"&gt;http://127.0.0.1:8000/loadPage&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;you can see this;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yKYOyfOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2uh90tbkxuwscijyt7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yKYOyfOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2uh90tbkxuwscijyt7x.png" alt="loadPage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;seems to be a simple process right ? you just rendered a simple html file from Controller... is it ?; its a static data loading ; i.e you are not controlling the data to be displayed on browser window, its loading a string defined in a blade file itself.&lt;/p&gt;

&lt;p&gt;Let's pass a php value from our loadPage() function and display it on browser window; say a dynamic data loading ;&lt;br&gt;
you can control/customize the data to be displayed on browser window, below code says how to do it,&lt;/p&gt;

&lt;p&gt;edit your loadPage() function as ;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function loadPage() {
    $data = [
        'name' =&amp;gt; "kartik"
    ];
    return view('loadPage',$data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;strong&gt;loadPage.blade.php&lt;/strong&gt; file and remove that 'Hi , Hello' and add&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;{{ $name }}&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
  index/key of an array $data that we have passed from loadPage() method. 'name' index of array $data can be referred as $name variable in our blade file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;{{ $name }}&amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now, hit the same URL again;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kei4LUe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e27war24bomke412zp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kei4LUe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e27war24bomke412zp6.png" alt="DynamicData"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;what you are seeing ? index value that you have mentioned in loadPage() method... Correct ?&lt;/p&gt;

&lt;p&gt;Interaction between controller and blade file is not so difficult right ? I Suppose :)&lt;/p&gt;

&lt;p&gt;I hope you grasped it, in my next article let's learn about saving data to database that we will add from blade file and show them in a different page, OK&lt;/p&gt;

&lt;p&gt;Bye :)&lt;/p&gt;

</description>
      <category>laravel8</category>
      <category>mvc</category>
      <category>php</category>
    </item>
    <item>
      <title>On Being A Mature Engineer</title>
      <author>Marcos Rezende</author>
      <pubDate>Sat, 14 Aug 2021 16:31:28 +0000</pubDate>
      <link>https://dev.to/rezende79/on-being-a-mature-engineer-143m</link>
      <guid>https://dev.to/rezende79/on-being-a-mature-engineer-143m</guid>
      <description>&lt;p&gt;While reading the great article &lt;a href="https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/"&gt;On Being A Senior Engineer&lt;/a&gt; of John Allspaw, I felt a desire to make notes, and this current &lt;em&gt;post&lt;/em&gt; is a way to turn those notes public.&lt;/p&gt;

&lt;p&gt;First of all, instead of using the word "senior" to reference experienced engineers, John used the word "mature" because (as he said):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I expect a ‚Äúsenior‚Äù engineer to be a mature engineer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To be a senior engineer is more to develop engineering skills than soft skills. On the other hand, to be a mature engineer is more to develop soft skills than engineering skills.&lt;/p&gt;

&lt;p&gt;For me, engineering skills is easier to learn than soft skills because these last need time, patience and reflection from whom desire to have them. While engineering skills are just a matter of study.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-seek-out-constructive-criticism-of-their-designs"&gt;
  &lt;/a&gt;
  Mature engineers seek out constructive criticism of their designs.
&lt;/h3&gt;

&lt;p&gt;John mentioned four questions which are asked by mature engineers to their peers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;‚ÄúWhat could I be missing?‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúHow will this not work?‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúWill you please shoot as many holes as possible into my thinking on this?‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúEven if it‚Äôs technically sound, is it understandable enough for the rest of the organization to operate, troubleshoot, and extend it?‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mature engineers know that they are not the best and that good peer review is what makes better design decisions. They ‚Äúbeg for the bad news.‚Äù completed, John said.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-do-not-shy-away-from-making-estimates-and-are-always-trying-to-get-better-at-it"&gt;
  &lt;/a&gt;
  Mature engineers do not shy away from making estimates and are always trying to get better at it.
&lt;/h3&gt;

&lt;p&gt;Mature engineers are capable to make estimates and to make them better one after another. They don't avoid commitment. They know what they are doing and if not, they find a way to know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-have-an-innate-sense-of-anticipation-even-if-they-dont-know-they-do"&gt;
  &lt;/a&gt;
  Mature engineers have an innate sense of anticipation, even if they don‚Äôt know they do.
&lt;/h3&gt;

&lt;p&gt;Mature engineers see problems coming. Rather than being taken by surprise, mature engineers present their views on likely problems as soon as they realize they might happen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-understand-that-not-all-of-their-projects-are-filled-with-rockstaronstage-work"&gt;
  &lt;/a&gt;
  Mature engineers understand that not all of their projects are filled with rockstar-on-stage work.
&lt;/h3&gt;

&lt;p&gt;Work is work, even if it is bug fixing, a mature engineer always knows that is possible to deliver great results independently of what kind work they are doing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-lift-the-skills-and-expertise-of-those-around-them"&gt;
  &lt;/a&gt;
  Mature engineers lift the skills and expertise of those around them.
&lt;/h3&gt;

&lt;p&gt;The base code is something built and maintained by the entire team, not only by the most seniors. With that principle in mind, mature engineers always work looking for what they can do better but also what their peers can do better too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-understand-the-difference-between-mentorship-and-sponsorship-and-develop-a-habit-of-the-latter"&gt;
  &lt;/a&gt;
  Mature engineers understand the difference between mentorship and sponsorship, and develop a habit of the latter.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What members of underrepresented groups in tech often need most is opportunity and visibility, not advice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of advising, mature engineers give to each person on their group the opportunity and visibility bringing those who have less seniority of them to the same level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-make-their-tradeoffs-explicit-when-making-judgments-and-decisions"&gt;
  &lt;/a&gt;
  Mature engineers make their trade-offs explicit when making judgments and decisions.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://erikhollnagel.com/onewebmedia/ETTO.pdf"&gt;The ETTO Principle - Efficiency-Thoroughness Trade-Off&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúPremature optimization is the root of all evil.‚Äù&lt;br&gt;
Understanding what is and isn‚Äôt ‚Äúpremature‚Äù is what separates senior engineers from junior engineers.‚Äô&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-dont-practice-cyae-cover-your-ass-engineering"&gt;
  &lt;/a&gt;
  Mature engineers don‚Äôt practice CYAE (‚ÄúCover Your Ass Engineering‚Äù)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Mature engineers stand up and accept the responsibility given to them. If they find they don‚Äôt have the requisite authority to be held accountable for their work, they seek out ways to rectify that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-are-empathetic"&gt;
  &lt;/a&gt;
  Mature engineers are empathetic.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Goal conflicts are inherent in all engineering work, and complaining about them (instead of embracing them as requirements for success) is a sign of a less mature engineer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-dont-make-empty-complaints"&gt;
  &lt;/a&gt;
  Mature engineers don‚Äôt make empty complaints.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Instead, they express judgments based on empirical evidence and bring with those judgments options for solving the problem which they‚Äôve identified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-are-aware-of-cognitive-biases"&gt;
  &lt;/a&gt;
  Mature engineers are aware of cognitive biases
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Culturally, engineers work day-to-day in empirical evidence in research. Basically: show me the data. The issue with cognitive biases is that we can be blissfully unaware of when we are interpreting data with our own brains in ways that defy empirical data and can have a surprising effect on how we get work done and work on teams.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#mature-engineers-know-the-importance-of-feelings-people-have"&gt;
  &lt;/a&gt;
  Mature engineers know the importance of feelings people have.
&lt;/h3&gt;

&lt;p&gt;Mature engineers know they're not just dealing with code. The code that a company produces is the end result of teamwork done by people (your team) for people (your customers). Learning to deal with the feelings of others is essential to being desirable to a company that depends on people to deliver software.&lt;/p&gt;

</description>
      <category>senior</category>
      <category>engineering</category>
      <category>career</category>
      <category>developer</category>
    </item>
    <item>
      <title>Day 1: 100 days of code</title>
      <author>Gaurav-Shekhawat</author>
      <pubDate>Sat, 14 Aug 2021 16:07:57 +0000</pubDate>
      <link>https://dev.to/gauravshekhawat/day-1-100-days-of-code-4jao</link>
      <guid>https://dev.to/gauravshekhawat/day-1-100-days-of-code-4jao</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-how-to-center-an-div-element-vertically-or-horizontally"&gt;
  &lt;/a&gt;
  1. How to center an div element vertically or horizontally.
&lt;/h2&gt;

&lt;p&gt;There are many ways to center an div element, few of them are:-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method1-using-marginauto-for-horizontal-centering"&gt;
  &lt;/a&gt;
  Method-1: Using margin:auto (For horizontal centering)
&lt;/h3&gt;

&lt;p&gt;In this method, if the width of our element is less than 100%, we can just set its margin value to auto, and this will automatically center the element horizontally.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/yLbrLBQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#method2-using-cssflexbox-both-horizontal-and-vertical-centering"&gt;
  &lt;/a&gt;
  Method-2: Using css-flexbox (both horizontal and vertical centering)
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/YzVMzYQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#method3-using-cssgrids-both-horizontal-and-vertical-centering"&gt;
  &lt;/a&gt;
  Method-3: Using css-grids (both horizontal and vertical centering)
&lt;/h3&gt;

&lt;p&gt;The below example is for horizontal centering, similarly we can center the element vertically.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/gOWyOee?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;or&lt;br&gt;&lt;br&gt;
The other method for both horizontal and vertical centering at the same time is using:-&lt;br&gt;&lt;br&gt;
&lt;code&gt;place-items: center;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
which is a shorthand for &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-items&lt;/code&gt; in order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.center-inside-of-me {
  display: grid;
  place-items: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#method4-using-transform-translate-property-both-horizontal-and-vertical-centering"&gt;
  &lt;/a&gt;
  Method-4: Using transform: translate property( both horizontal and vertical centering)
&lt;/h3&gt;

&lt;p&gt;See the below codepen by Gabriel Laroche for the example. Although using this method is not recommended and must be used only when the other methods are not working.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/ExmJarE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#method5-using-inset-and-marginauto"&gt;
  &lt;/a&gt;
  Method-5: using inset and margin:auto
&lt;/h3&gt;

&lt;p&gt;This is almost similar to the previous method. The inset property is defined in the notes section below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/rNmbOeE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#method6-abusing-margin-and-padding"&gt;
  &lt;/a&gt;
  Method-6: abusing margin and padding
&lt;/h3&gt;

&lt;p&gt;First we can remove the height from our parent element, so that it will become the same height as the child. Now, we horizontally center the child it using &lt;code&gt;margin: 0 auto&lt;/code&gt; , then we increase the top and the bottom padding, so that the element seems centered.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/XWRQmeW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#difference-between-position-relative-and-position-absolute"&gt;
  &lt;/a&gt;
  Difference between position relative and position absolute
&lt;/h2&gt;

&lt;p&gt;Summary:-   &lt;/p&gt;

&lt;p&gt;The relative property defines the behaviour with respect to the element's current position. The element is not removed from the normal flow of the document.  &lt;/p&gt;

&lt;p&gt;In absolute positioning, the element is removed from the normal flow of the webpage, and is positioned with reference to its first ancestor having position: absolute/relative (very imp)(like if you want to center an div2 inside a div1, then first you have to set the display property of div1 to be relative, then the display property of div2 to be absolute, and then this will work), otherwise with respect to the viewport.&lt;/p&gt;

&lt;p&gt;See this &lt;a href="https://leannezhang.medium.com/difference-between-css-position-absolute-versus-relative-35f064384c6"&gt;article&lt;/a&gt; of medium to understand the concept in full detail.&lt;/p&gt;

&lt;p&gt;Also see this standford &lt;a href="http://stanford.edu/group/csp/cs03/week5/text6.html"&gt;slide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/absolute-relative-fixed-positioining-how-do-they-differ/"&gt;css-tricks&lt;/a&gt; article.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css-raw-position-sticky-endraw-property"&gt;
  &lt;/a&gt;
  Css &lt;code&gt;position: sticky&lt;/code&gt; property
&lt;/h2&gt;

&lt;p&gt;This property is mostly used to make a sticky navigation bar at the top of your website.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Best guide:- &lt;a href="https://elad.medium.com/css-position-sticky-how-it-really-works-54cd01dc2d46"&gt;medium&lt;/a&gt; article.&lt;/li&gt;
&lt;li&gt;See this &lt;a href="https://css-tricks.com/position-sticky-2/"&gt;css-tricks&lt;/a&gt; article.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky_positioning"&gt;MDN&lt;/a&gt; complete guide to position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Summary:- Sticky positioning is a hybrid of relative and fixed positioning. The element is treated as relative positioned until it crosses a specified threshold, at which point it is treated as fixed positioned.  &lt;/p&gt;

&lt;p&gt;The threshold must be defined in the form of top/bottom/right/left.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#all-background-properties"&gt;
  &lt;/a&gt;
  All background properties
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#background-image"&gt;
  &lt;/a&gt;
  Background image
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/almanac/properties/b/background-image/"&gt;css-tricks article on background image&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Short Summary:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  background: url(sweettexture.jpg);
  background: linear-gradient(black, white);
  background: radial-gradient(circle, black, white);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting a Fallback-color:- If the background image is not supported, then the fallback color will be loaded instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  background: url(sweettexture.jpg) blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple Background Images:- The image that you want on the top should be listed first. These may be used to put logo on top of a background, after changing some of the properties, as given in the second code block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  background: url(logo.png), url(background-pattern.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  background:
    url(logo.png) bottom center no-repeat,
    url(background-pattern.png) repeat;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The codepens of each of these are:-&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/poPBgRj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#background-gradients"&gt;
  &lt;/a&gt;
  Background Gradients
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/a-complete-guide-to-css-gradients/"&gt;css-trick's&lt;/a&gt; guide.&lt;br&gt;&lt;br&gt;
Please make sure that you go through the above guide, it is wonderfully made. I left the tricks section for later. Also cannot understand anything below the pie chart example. &lt;br&gt;
Points that I noticed:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The default value of the angle in the &lt;code&gt;linear-gradient (angle, color1, color2)&lt;/code&gt; is not 0deg, but it is 180deg. Play with the below codepen to understand more.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/eYWoJrW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background-position"&gt;
  &lt;/a&gt;
  Background position
&lt;/h3&gt;

&lt;p&gt;The first value is the horizontal position, while the next value is the vertical position. The lengths and pertencages are measured from the top left.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The percentages have special meaning:- moving a background image by X% means it will align the X% point in the image to the X% point in the container. For example, 50% means it will align the middle of the image with the middle of the container. 100% means it will align the last pixel of the image with the last pixel of the container, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When four/three(this just means that the remaining one value is 0) are given, then they are interpreted as:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.three-values {
  background-position: right 45px bottom;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This positions the background image 45px from the right and 0px from the bottom of the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.four-values {
  background-position: right 45px bottom 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This puts the background image 45px from the right and 20px from the bottom of the container.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/BaREzZr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#multiline-underline-textgradient-animation"&gt;
  &lt;/a&gt;
  Multiline underline text-gradient animation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_1vEGYWaaQY"&gt;KevinPowell&lt;/a&gt; video link.  &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/mdmgeKp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#background-size"&gt;
  &lt;/a&gt;
  Background size
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/almanac/properties/b/background-size/"&gt;css-tricks&lt;/a&gt; article&lt;/p&gt;

&lt;p&gt;The various ways are:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Keywords:- cover full covering the entire container, even if it has to cut some parts of the image, or expand the image. contain respects the aspect ratio of the image, and shows the whole image, even if it has to leave some empty space.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One Value:- Example: 400px, this will be considered as width, and the height will be set to auto. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two values:- First is the width, second is the height. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multiple Images:- We can specify their sizes individually. Example: -&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html { background:url(greatimage.jpg),url(wonderfulimage.jpg);
  background-size: 300px 100px, cover;
  /* first image is 300x100, second image covers the whole area */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will follow the background stacking order.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#background-repeat"&gt;
  &lt;/a&gt;
  Background repeat
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/almanac/properties/b/background-repeat/"&gt;css-tricks&lt;/a&gt; article  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#few-notes"&gt;
  &lt;/a&gt;
  Few Notes:-
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In the padding property, the values are written in the clockwise order starting from top.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;padding: 25px 50px 75px 100px;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. top padding is 25px
2. right padding is 50px
3. bottom padding is 75px
4. left padding is 100px
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If position: sticky; - the top property behaves like its position is relative when the element is inside the viewport, and like its position is fixed when it is outside.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS element+element Selector:- Example:-&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;div + p {
  background-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Select and style the first &lt;/p&gt;
&lt;p&gt; element that are placed immediately after &lt;/p&gt; elements. This was used in the above medium article for sticky position so the space between two rows can be 20px, while the most upper and the most bottom space be 10px.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The property top/bottom/right/left are measured with reference to its nearest positioned ancestor(just parent).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding some shadow to a div element makes it look much much better. You will also learn some bad way to center an element inside its container. Also, we can put variables inside a CSS file!!!!.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/VwbNLOe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;inset&lt;/code&gt; CSS property is a shorthand that corresponds to the top, right, bottom, and/or left properties. It has the same multi-value syntax of the &lt;code&gt;margin&lt;/code&gt; shorthand.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#points-that-i-still-need-to-work-upon"&gt;
  &lt;/a&gt;
  Points that I still need to work upon
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Background gradient (things left from the article).&lt;/li&gt;
&lt;li&gt;Background repeat (round and space(some))&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>‚úÖ Top Facebook Behavioral Interview Questions (Part 2) | Facebook Jedi Interview Round üî•</title>
      <author>The Interview Sage</author>
      <pubDate>Sat, 14 Aug 2021 16:03:01 +0000</pubDate>
      <link>https://dev.to/theinterviewsage/top-facebook-behavioral-interview-questions-part-2-facebook-jedi-interview-round-3ghg</link>
      <guid>https://dev.to/theinterviewsage/top-facebook-behavioral-interview-questions-part-2-facebook-jedi-interview-round-3ghg</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Hr5UJnKxwyg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This article is the second part of the series on Top Facebook Behavioral Interview Questions. In the first part, we discussed the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=4s"&gt;Introduction to Facebook Behavioral Interview (Jedi Round)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=155s"&gt;Tell me about a time you disagreed with someone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=457s"&gt;Tell me about a time you showed leadership&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=712s"&gt;Tell me about a time you failed or made a mistake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=873s"&gt;Tell me about the project that you are most proud of&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=1032s"&gt;Tell me about a time you had to manage conflicting priorities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=1320s"&gt;Tell me about yourself?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=1478s"&gt;Why do you want to leave your current role?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=1632s"&gt;Do you have any questions for me?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4nj2EAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfzypq1lfshckzv4m7sf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4nj2EAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfzypq1lfshckzv4m7sf.png" alt="Top Facebook Behavioral Interview Questions (Part 1) | Facebook Jedi Interview Round" title="Top Facebook Behavioral Interview Questions (Part 1) | Facebook Jedi Interview Round"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let us review the next top behavioral questions, which are usually asked at Facebook.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-1-tell-me-about-a-time-you-had-to-handle-pressure"&gt;
  &lt;/a&gt;
  Question 1: Tell Me About A Time You Had To Handle Pressure
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7614MME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzsfuu4aupr90rm67i4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7614MME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzsfuu4aupr90rm67i4j.png" alt="Tell Me About A Time You Had To Handle Pressure" title="Tell Me About A Time You Had To Handle Pressure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=53s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Never Worked Under Pressure".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Handling work pressure and stressful situations is a crucial part of everyone's career journey. Interviewers often ask candidates to tell about a time they had to handle pressure at their workplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TkzFVgbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ysjci4cyntgfv1p6z3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TkzFVgbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ysjci4cyntgfv1p6z3r.png" alt="Evaluation Criteria for Tell Me About A Time You Had To Handle Pressure" title="Evaluation Criteria for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke0R6l2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3t26r3449d1cumhyao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke0R6l2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3t26r3449d1cumhyao.png" alt="Evaluation Criteria for Tell Me About A Time You Had To Handle Pressure" title="Evaluation Criteria for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everyone faces stressful situations and comes under pressure once in a while at their jobs. Through this question, the interviewer's goal is to assess whether you can perform in challenging situations or unstructured environments and distinguish between the urgent and the important.&lt;/p&gt;

&lt;p&gt;They are trying to understand if you can stay calm, exercise judgment, and act responsibly in such unexpected high-pressure scenarios. They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication,&lt;/li&gt;
&lt;li&gt;Time management,&lt;/li&gt;
&lt;li&gt;Problem-solving, and&lt;/li&gt;
&lt;li&gt;Decision-making skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Employers want to know if you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handle competing priorities,&lt;/li&gt;
&lt;li&gt;Shift gears when needed, and&lt;/li&gt;
&lt;li&gt;Understand the implications of missing deadlines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are looking to see if your coworkers can rely on you to get the work done.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-2-tell-me-about-a-time-you-worked-with-a-difficult-person"&gt;
  &lt;/a&gt;
  Question 2: Tell Me About A Time You Worked With A Difficult Person
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkPSqpbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64c4uyzn2nl8o7ysetj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkPSqpbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64c4uyzn2nl8o7ysetj6.png" alt="Tell Me About A Time You Worked With A Difficult Person" title="Tell Me About A Time You Worked With A Difficult Person"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=452s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Never worked with a difficult person".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;"Tell me about a time you worked with a difficult person" is one of the most frequent questions asked in behavioral interviews. Interviewers sometimes phrase this question as "Tell me about a time you worked with someone challenging".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rktvsb4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzt6w0jikazap38ea4g8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rktvsb4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzt6w0jikazap38ea4g8.png" alt="Evaluation Criteria for Tell Me About A Time You Worked With A Difficult Person" title="Evaluation Criteria for 'Tell Me About A Time You Worked With A Difficult Person'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzrIIWRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ubiny7f8s4c1qmejre3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzrIIWRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ubiny7f8s4c1qmejre3.png" alt="Evaluation Criteria for Tell Me About A Time You Worked With A Difficult Person" title="Evaluation Criteria for 'Tell Me About A Time You Worked With A Difficult Person'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once in a while, in every workplace, you will face a situation where you have to work with a colleague who has a difficult personality. By asking this question, the interviewer's goal is to assess how you work in difficult situations or unstructured environments.&lt;/p&gt;

&lt;p&gt;They are trying to judge your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maturity level,&lt;/li&gt;
&lt;li&gt;Communication skills, and&lt;/li&gt;
&lt;li&gt;Willingness to speak up irrespective of your coworkers' seniority.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also evaluating whether you are empathetic and respectful towards your colleagues while understanding your coworker's motivations and viewpoints behind the conflict.&lt;/p&gt;

&lt;p&gt;A crucial element to this question is that the interviewer is looking for a positive resolution of the conflict that benefits the company and not just an individual. They are trying to see if you are flexible to compromise and open to learning from challenging experiences.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-3-tell-me-about-a-time-when-the-project-was-ambiguous"&gt;
  &lt;/a&gt;
  Question 3: Tell Me About A Time When The Project Was Ambiguous
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uKTQTY81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcrphex5gj8rjl7g9lcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uKTQTY81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcrphex5gj8rjl7g9lcn.png" alt="Tell Me About A Time When The Project Was Ambiguous" title="Tell Me About A Time When The Project Was Ambiguous"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=874s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Never Worked On Ambiguous Projects".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;"Tell me about a time when the project was ambiguous" is one of the tough questions asked in the behavioral interview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srzZ4LbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2m25amm2tnkktu7dg6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--srzZ4LbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2m25amm2tnkktu7dg6h.png" alt="Evaluation Criteria for Tell Me About A Time When The Project Was Ambiguous" title="Evaluation Criteria for 'Tell Me About A Time When The Project Was Ambiguous'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kwzQ0S4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g60o0njhhtk2w9tv0gwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kwzQ0S4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g60o0njhhtk2w9tv0gwg.png" alt="Evaluation Criteria for Tell Me About A Time When The Project Was Ambiguous" title="Evaluation Criteria for 'Tell Me About A Time When The Project Was Ambiguous'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In everyone's career journey, they face a challenging situation where they need to work on a task that is ambiguous, uncertain, and does not have a clear path forward. By this question, the interviewer's goal is not to trick you but to assess how well you can adapt and perform in challenging situations and unstructured environments.&lt;/p&gt;

&lt;p&gt;They are trying to understand your ability to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proactive,&lt;/li&gt;
&lt;li&gt;Stay calm,&lt;/li&gt;
&lt;li&gt;Exercise judgment, and&lt;/li&gt;
&lt;li&gt;Act responsibly in such unexpected scenarios.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are assessing your perseverance to explore the ambiguity and learn new things, despite the challenges. They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication,&lt;/li&gt;
&lt;li&gt;Time management,&lt;/li&gt;
&lt;li&gt;Problem-solving, and&lt;/li&gt;
&lt;li&gt;Decision-making skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Employers want to know if you can handle competing priorities, shift gears when needed, and understand the implications of missing deadlines. They are looking to see if your coworkers can rely on you to get the work done.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-4-tell-me-about-a-time-you-worked-on-something-outside-your-okr"&gt;
  &lt;/a&gt;
  Question 4: Tell Me About A Time You Worked On Something Outside Your OKR
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VvZu188t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpb9xwfg7o56n7uwcing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvZu188t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpb9xwfg7o56n7uwcing.png" alt="Tell Me About A Time You Worked On Something Outside Your OKR" title="Tell Me About A Time You Worked On Something Outside Your OKR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=1301s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Don't Have Any Work Experience".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;"Tell me about a time when you worked on something outside your OKR" is a popular open-ended question asked in behavioral interviews.&lt;/p&gt;

&lt;p&gt;OKR stands for Objectives and Key Results, which is a goal-setting framework for defining and tracking objectives and their outcomes.&lt;/p&gt;

&lt;p&gt;Interviewers also tend to ask this famous question in the following ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tell me about a time when you went above and beyond.&lt;/li&gt;
&lt;li&gt;Tell me about a time when you exceeded your coworkers' or manager's expectations.&lt;/li&gt;
&lt;li&gt;Describe a time you went beyond the expectations of a customer.&lt;/li&gt;
&lt;li&gt;Have you ever exceeded expectations in one of your previous jobs?&lt;/li&gt;
&lt;li&gt;Have you ever worked on a side-project at your workplace?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CuUjuGf8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixnhxmqap3n1qlkd8s0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CuUjuGf8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixnhxmqap3n1qlkd8s0i.png" alt="Evaluation Criteria for Tell Me About A Time You Worked On Something Outside Your OKR" title="Evaluation Criteria for 'Tell Me About A Time You Worked On Something Outside Your OKR'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKamdITV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5vhsbvut1gi16fp4ita.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKamdITV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5vhsbvut1gi16fp4ita.png" alt="Evaluation Criteria for Tell Me About A Time You Worked On Something Outside Your OKR" title="Evaluation Criteria for 'Tell Me About A Time You Worked On Something Outside Your OKR'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To grow in Software Engineering careers, employers expect developers to exceed expectations for promotions to the next level. By this question, the interviewer is trying to assess your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work ethic,&lt;/li&gt;
&lt;li&gt;Personality, and&lt;/li&gt;
&lt;li&gt;Motivation to take on new challenges with a positive attitude.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are trying to understand your ability to be proactive and your perseverance to learn new things continuously. Employers want to know if you are independent in your thought process and have the willingness to do more than what is expected from you.&lt;/p&gt;

&lt;p&gt;They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication,&lt;/li&gt;
&lt;li&gt;Time management,&lt;/li&gt;
&lt;li&gt;Problem-solving, and&lt;/li&gt;
&lt;li&gt;Decision-making skills.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#question-5-tell-me-about-a-time-you-had-to-learn-something-quickly"&gt;
  &lt;/a&gt;
  Question 5: Tell Me About A Time You Had To Learn Something Quickly
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2n-_BZ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m50d51dccn16aylgnw70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2n-_BZ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m50d51dccn16aylgnw70.png" alt="Tell Me About A Time You Had To Learn Something Quickly" title="Tell Me About A Time You Had To Learn Something Quickly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=1750s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Don't Have Any Work Experience".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another popular behavioral interview question is "Tell me about a time you had to learn something quickly".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WsNCaqAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsqgktozebh99m85m5tl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WsNCaqAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsqgktozebh99m85m5tl.png" alt="Evaluation Criteria for Tell Me About A Time You Had To Learn Something Quickly" title="Evaluation Criteria for 'Tell Me About A Time You Had To Learn Something Quickly'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YkoMqJUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ajablz5je6f1le0xmuj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YkoMqJUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ajablz5je6f1le0xmuj.png" alt="Evaluation Criteria for Tell Me About A Time You Had To Learn Something Quickly" title="Evaluation Criteria for 'Tell Me About A Time You Had To Learn Something Quickly'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In everyone's career journey, they face a situation when they have to learn something quickly to succeed at their job. By this question, the interviewer's goal is not to trick you but to assess how well you can adapt and perform in challenging situations and unstructured environments.&lt;/p&gt;

&lt;p&gt;They are trying to understand your enthusiasm to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn new things,&lt;/li&gt;
&lt;li&gt;Exercise judgment under pressure, and&lt;/li&gt;
&lt;li&gt;Shift gears when needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication skills,&lt;/li&gt;
&lt;li&gt;Ability to self-identify the gaps in your skills, and&lt;/li&gt;
&lt;li&gt;The willingness to improve yourself continuously.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are looking to see if you understand the implications of missing deadlines and can your coworkers rely on you to get the work done.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-6-tell-me-about-a-time-you-received-constructive-feedback"&gt;
  &lt;/a&gt;
  Question 6: Tell Me About A Time You Received Constructive Feedback
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6-6gzcQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty1seij05oa3ne3vopdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6-6gzcQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty1seij05oa3ne3vopdy.png" alt="Tell Me About A Time You Received Constructive Feedback" title="Tell Me About A Time You Received Constructive Feedback"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=2189s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Don't Have Any Work Experience".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;"Tell me about a time you received constructive feedback" is one of the most challenging questions asked in the behavioral interview. Interviewers sometimes also ask this question as "What is your greatest weakness?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clShXJlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2qtm1wa9ds9vl1csmim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clShXJlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2qtm1wa9ds9vl1csmim.png" alt="Evaluation Criteria for Tell Me About A Time You Received Constructive Feedback" title="Evaluation Criteria for 'Tell Me About A Time You Received Constructive Feedback'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHRCtd3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u00yrf1c38ad3xipo74s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHRCtd3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u00yrf1c38ad3xipo74s.png" alt="Evaluation Criteria for Tell Me About A Time You Received Constructive Feedback" title="Evaluation Criteria for 'Tell Me About A Time You Received Constructive Feedback'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everyone makes mistakes in their careers and has received constructive feedback from their managers or peers. By this question, the interviewer's goal is not to trick you but to assess how you react when you receive feedback from others.&lt;/p&gt;

&lt;p&gt;They want to get a handle on how well you can adapt and perform in challenging situations and unstructured environments. They are trying to judge your ability to stay calm and composed with the right attitude when receiving criticism of any type, whether constructive or negative.&lt;/p&gt;

&lt;p&gt;Employers want to understand your enthusiasm to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn new things,&lt;/li&gt;
&lt;li&gt;Exercise judgment under pressure, and&lt;/li&gt;
&lt;li&gt;Shift gears when needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication skills,&lt;/li&gt;
&lt;li&gt;Ability to identify the gaps in your skills, and&lt;/li&gt;
&lt;li&gt;The willingness to improve yourself continuously.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#question-7-tell-me-about-a-time-a-project-took-longer-than-expected"&gt;
  &lt;/a&gt;
  Question 7: Tell Me About A Time A Project Took Longer Than Expected
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1TWndgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgj1spw5141jtyckg99c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1TWndgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgj1spw5141jtyckg99c.png" alt="Tell Me About A Time A Project Took Longer Than Expected" title="Tell Me About A Time A Project Took Longer Than Expected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=2609s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Don't Have Any Work Experience".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software Engineering projects usually take longer time than planned. As a result, interviewers often ask the candidates to tell about a time when their project took longer than expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hWQp_OFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yaxe0lgc6r407obre8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hWQp_OFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yaxe0lgc6r407obre8o.png" alt="Evaluation Criteria for Tell Me About A Time A Project Took Longer Than Expected" title="Evaluation Criteria for 'Tell Me About A Time A Project Took Longer Than Expected'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BL6A-0R8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teozp6kvqbql5llpya8n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BL6A-0R8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teozp6kvqbql5llpya8n.png" alt="Evaluation Criteria for Tell Me About A Time A Project Took Longer Than Expected" title="Evaluation Criteria for 'Tell Me About A Time A Project Took Longer Than Expected'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everyone in their career journey has worked on a project which has taken more time than initially planned. By asking this question, the interviewer's goal is to assess whether you can adapt and perform in challenging situations or unstructured environments.&lt;/p&gt;

&lt;p&gt;They want to get a handle on how well you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage competing priorities,&lt;/li&gt;
&lt;li&gt;Understand the implications of missing deadlines, and&lt;/li&gt;
&lt;li&gt;Shift gears when needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are trying to see if you can distinguish between the urgent and the important.&lt;/p&gt;

&lt;p&gt;Employers want to know your ability to stay calm, exercise judgment, and act responsibly in such unexpected high-pressure situations. They are assessing your perseverance to explore the ambiguity and learn new things, despite the challenges.&lt;/p&gt;

&lt;p&gt;Interviewers are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication,&lt;/li&gt;
&lt;li&gt;Time management,&lt;/li&gt;
&lt;li&gt;Problem-solving, and&lt;/li&gt;
&lt;li&gt;Decision-making skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are looking to see if your coworkers can rely on you to get the work done.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#preparation-material"&gt;
  &lt;/a&gt;
  Preparation Material
&lt;/h1&gt;

&lt;p&gt;Learn more about the Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, and Sample Answers (Examples) to effectively prepare and answer the top questions asked in the Behavioral Interviews at Facebook. Certain special cases are also discussed which are usually faced by the candidates during these interviews.&lt;/p&gt;

&lt;p&gt;‚¨áÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Detailed Notes on Top Facebook Behavioral Interview Questions - Part 1&lt;/a&gt;&lt;br&gt;
‚¨áÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/40678"&gt;Detailed Notes on Top Facebook Behavioral Interview Questions - Part 2&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-behavioral-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook Behavioral Interview
&lt;/h1&gt;

&lt;p&gt;If you have not read our first article on Top Facebook Behavioral Interview Questions, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-behavioral-interview-questions-part-1-2a0o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;‚úÖ Top Facebook Behavioral Interview Questions (Part 1) | Facebook Jedi Interview Round üî•&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage „Éª May 15 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-system-design-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook System Design Interview
&lt;/h1&gt;

&lt;p&gt;In case if you have not read our series on Cracking the Facebook System Design Interview, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-system-design-interview-questions-31np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Facebook System Design Interview Questions (Part 1) | Facebook Pirate Interview Round&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage „Éª Jan 4 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h1&gt;

&lt;p&gt;‚úÖ &lt;a href="https://bit.ly/Educative-Unlimited"&gt;Educative.io Unlimited Plan [üí∞ 10% off for first 100 users]&lt;/a&gt;&lt;br&gt;
‚úÖ &lt;a href="https://bit.ly/Try-Exponent"&gt;TryExponent.com Membership [üí∞ Limited Time 10% offer]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚úÖ &lt;a href="https://instagr.am/TheInterviewSage"&gt;Follow for Daily Coding Problem&lt;/a&gt;&lt;br&gt;
‚úÖ &lt;a href="https://bit.ly/Join-Membership"&gt;Join our membership for exclusive benefits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë©‚Äçüíª &lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=KQZl"&gt;Best System Design Interview Course&lt;/a&gt;&lt;br&gt;
üöÄ &lt;a href="https://bit.ly/SWE-Interview-Course"&gt;Complete SWE Interview Course [üí∞ Limited Time 10% offer]&lt;/a&gt;&lt;br&gt;
üôã‚Äç‚ôÄÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Behavioral Interview Guide [üí∞ Special Discount]&lt;/a&gt;&lt;br&gt;
üìö &lt;a href="https://smarturl.it/InterviewPrepBook"&gt;Recommended Interview Preparation Book (on Amazon)&lt;/a&gt;&lt;/p&gt;




&lt;center&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--121vjxPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2l00b1bt3nl8fdfb0nn.png" alt="Buy Me a Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òïÔ∏è Buy us a Coffee at &lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;BuyMeACoffee.com/InterviewSage&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;




&lt;center&gt;

&lt;p&gt;To stay updated about new posts, Subscribe &amp;amp; Follow Us!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://www.youtube.com/TheInterviewSage?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRCmz2gQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uqifmelnuenxiik8pwx.png" alt="Subscribe to our YouTube channel" title="Subscribe to our YouTube channel"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.instagram.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OADCpudp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovhcxjpg0v5z2tidtydk.png" alt="Follow us on Instagram" title="Follow us on Instagram"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.facebook.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zohyoISu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyy3kyo44tmv645vvrqw.png" alt="Like &amp;amp; Follow us on Facebook" title="Like &amp;amp; Follow us on Facebook"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="http://twitter.com/intent/follow?source=followbutton&amp;amp;variant=1.0&amp;amp;screen_name=InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoV_1sI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwcu44k00a0a8hpfbmf.png" alt="Follow us on Twitter" title="Follow us on Twitter"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.linkedin.com/in/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QaEiEG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcrwzwc9tnv0q3zmkih8.png" alt="Follow &amp;amp; Connect on LinkedIn" title="Follow &amp;amp; Connect on LinkedIn"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;/center&gt;



&lt;blockquote&gt;
&lt;p&gt;This article is part of the series on Behavioral Interviews at Facebook. So, follow us to get notified when our next article in this series is published. Thanks for reading! &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__553012"&gt;
  
    .ltag__user__id__553012 .follow-action-button {
      background-color: #3b49df !important;
      color: #f9fafa !important;
      border-color: #3b49df !important;
    }
  
    &lt;a href="/theinterviewsage" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/theinterviewsage"&gt;The Interview Sage&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/theinterviewsage"&gt;Our goal is to create Software Eng Interview tutorials to help you get a job at companies like Facebook, Google, Apple, &amp;amp; Amazon. We will deep-dive into System Design, Coding, &amp;amp; Behavioral interviews.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;üì∏ Some images used are from free&lt;span&gt;pik&lt;/span&gt;.com: Freepik, pch.vector, vectorjuice, pikisuperstar, raw&lt;span&gt;pixel&lt;/span&gt;.com, slidesgo, stories, Upklyak, jcomp, macrovector_official, syarifahbrit, redgreystock&lt;/p&gt;

&lt;p&gt;&lt;a href="https://disclosureanddisclaimer.theinterviewsage.com/"&gt;Full Disclosure &amp;amp; Disclaimer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
