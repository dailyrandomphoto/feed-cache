<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>75🔥 Awesome Web Resources That Make Web Development Easy</title>
      <author>Kiran Raj R</author>
      <pubDate>Fri, 14 May 2021 06:18:22 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/75-awesome-web-resources-that-make-web-development-easy-2pff</link>
      <guid>https://dev.to/kiranrajvjd/75-awesome-web-resources-that-make-web-development-easy-2pff</guid>
      <description>&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/the-ultimate-web-developer-resources-list-200-resources-2gf5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Ultimate Web Developer Resources List 🔥Awesome 200+ Resources&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ May 6 ・ 21 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I have listed 75 web resources that will help you in your web designing and development process. I did not go through what each website is providing, which will make the post too big but I grouped based on the resources they provide in common. Go through the list and bookmark the one that will be useful to you. The list contain resources based on&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-design-inspirations"&gt;
  &lt;/a&gt;
  Web Design Inspirations
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#css-layout-flexbox-and-grid"&gt;
  &lt;/a&gt;
  CSS Layout (Flexbox And Grid)
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#free-stock-images"&gt;
  &lt;/a&gt;
  Free Stock Images
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#free-stock-videos"&gt;
  &lt;/a&gt;
  Free Stock Videos
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#color-palette"&gt;
  &lt;/a&gt;
  Color Palette
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#color-gradients"&gt;
  &lt;/a&gt;
  Color Gradients
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  -------------------------------
&lt;/h1&gt;

&lt;p&gt;When a client approach you for a web design for his product, sometimes we may have no idea where to start, what design to use. The below listed resources will help you, it will give ideas that can be used to produce a good design that will satisfy the customer. Some listed sites also have freebies like web design of components, ui kits, web templates etc. that can be used in our projects.&lt;/p&gt;

&lt;p&gt;
  Web Design Inspirations
  &lt;h4&gt;
  &lt;a href="#1-behance"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.behance.net/"&gt;Behance&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v2_cR2PO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb4rsooawpf175ajzbll.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v2_cR2PO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb4rsooawpf175ajzbll.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-dribble"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://dribbble.com/"&gt;Dribble&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRGdG2Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsnk950dpa6wpvpleptx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRGdG2Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsnk950dpa6wpvpleptx.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-muzli"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://muz.li/"&gt;Muz.li&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ckAgOcdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rojagd42oaltizb8hmgw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckAgOcdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rojagd42oaltizb8hmgw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-awwwards"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.awwwards.com/"&gt;Awwwards&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxtyOYg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djrwtj85c0u8jt0y5n4f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxtyOYg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djrwtj85c0u8jt0y5n4f.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-onepagelove"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://onepagelove.com/"&gt;OnePageLove&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3sUR3i9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayq4dit3rt4dsa47pp9p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sUR3i9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayq4dit3rt4dsa47pp9p.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-dailycss-design"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://dailycssdesign.com/"&gt;DailyCSS Design&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSPeosAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkfmtys82tvfk5d3qyvy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSPeosAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkfmtys82tvfk5d3qyvy.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7-sitesee"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://sitesee.co/"&gt;SiteSee&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R74Dd8_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jld63gto7m47a4xy29nk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R74Dd8_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jld63gto7m47a4xy29nk.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#8-bestwebsitegallery"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://bestwebsite.gallery/"&gt;BestWebSite.Gallery&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nn2sBm5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asf73xrkcxxv6csl12sg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nn2sBm5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asf73xrkcxxv6csl12sg.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#9-css-nectar"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://cssnectar.com/"&gt;CSS Nectar&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dx4-hQyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ds9j9ksd4w596ta5ehe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dx4-hQyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ds9j9ksd4w596ta5ehe.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#10-siteinspire"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.siteinspire.com/"&gt;SiteInspire&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zd5j-6bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epdbudoodkpw36ypp7hn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zd5j-6bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epdbudoodkpw36ypp7hn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#11-collectui"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://collectui.com"&gt;CollectUI&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xVOHC3Wq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0n994yafr8vnrwpu366.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xVOHC3Wq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0n994yafr8vnrwpu366.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#12-httpster"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://httpster.net/2021/apr/"&gt;Httpster&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nt9IrNFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydo4vuprkfxyhk4hhxsr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nt9IrNFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydo4vuprkfxyhk4hhxsr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#13-uplabs"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://www.uplabs.com/templates/web"&gt;UpLabs&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xqf01vso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcz6ncdp0qlet0z0u9jw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xqf01vso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcz6ncdp0qlet0z0u9jw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;One of the import aspect of the web development is the layout. We can develop the layout the designer give us using many ways, some time we may not know which CSS property to use to create the layout. The below mentioned list help you to create various layouts using different CSS properties like flexbox, grid etc. You can create layouts quickly with the layout generators based on your requirements, they generate CSS codes for the layouts you designed you can copy the codes directly into your CSS file, which save time and help to avoid complexities. Some listed website contains prebuilt layout examples which can be copied directly into your web projects.&lt;br&gt;

  CSS Layout Resources
  &lt;h4&gt;
  &lt;a href="#css-grid-based-layout-generator"&gt;
  &lt;/a&gt;
  CSS Grid Based Layout Generator
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#1-layoutit"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://grid.layoutit.com/"&gt;Layoutit&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRZFt17H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3gu9fwf9r7o149zjpzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRZFt17H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3gu9fwf9r7o149zjpzm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-css-grid-generator-by-sarah"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://cssgrid-generator.netlify.app/"&gt;CSS Grid Generator by Sarah&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlKhPrGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvqt7kbkl9uj0efa9h2b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlKhPrGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvqt7kbkl9uj0efa9h2b.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-griddyio"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://griddy.io/"&gt;Griddy.io&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_IFmZm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9x5uifncaa598pufdbk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_IFmZm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9x5uifncaa598pufdbk.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-css-grid-layout-generatorpw"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://css-grid-layout-generator.pw/"&gt;CSS Grid Layout Generator.PW&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--waXzxQGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7su8kkmm8gtncqnzozg7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--waXzxQGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7su8kkmm8gtncqnzozg7.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-css-portalcom"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.cssportal.com/layout-generator/"&gt;CSS Portal.Com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oaAwcpRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umyxh3eczuij7gcxsha8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oaAwcpRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umyxh3eczuij7gcxsha8.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-gridcss"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.gridcss.com/"&gt;GridCSS&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfY0wmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4e8boo1nk2dqdk3o43b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfY0wmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4e8boo1nk2dqdk3o43b.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7-cssgr"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://cssgr.id/"&gt;CSSgr&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2lEAf4mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n32iaxcgz0bkp7uwrjd2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lEAf4mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n32iaxcgz0bkp7uwrjd2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flexbox-based-layout-generator"&gt;
  &lt;/a&gt;
  Flexbox based Layout Generator
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#1-loadingio"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://loading.io/flexbox/"&gt;Loading.io&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEkt8I1o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1c2fjzk804g2t55sqsx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEkt8I1o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1c2fjzk804g2t55sqsx.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-flexboxbuildwithreactcom"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://flexbox.buildwithreact.com/"&gt;Flexbox.Buildwithreact.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xcsdYbKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdjeitfwvnonxoidp0r8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcsdYbKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdjeitfwvnonxoidp0r8.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-my-css-builder"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.mycssbuilder.com/"&gt;My CSS Builder&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ThNkE2r---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b66n0j7f46uhv1ohqbr6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ThNkE2r---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b66n0j7f46uhv1ohqbr6.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4code-pen-by-anchorideas-a-flexbox-visualizer-with-code-generator"&gt;
  &lt;/a&gt;
  4.&lt;a href="https://codepen.io/AnchorIdeas/full/GQbrgp/"&gt;Code Pen By AnchorIdeas&lt;/a&gt; : A flexbox visualizer with code generator.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqEur2fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocj0gzz6ng7c3xhc2u0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqEur2fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocj0gzz6ng7c3xhc2u0j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#layout-example-collections-with-code"&gt;
  &lt;/a&gt;
  Layout Example Collections With Code
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#1-purecss"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://purecss.io/layouts/"&gt;Purecss&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOHxRT0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkjjlkzcxyl8l2t841l1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOHxRT0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkjjlkzcxyl8l2t841l1.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-grid-by-example"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://gridbyexample.com/examples/page-layout/"&gt;Grid By Example&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIaFHPm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7iplwxll778osj2cnav.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIaFHPm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7iplwxll778osj2cnav.PNG" alt="Alt Text"&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#3-quackitcom"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.quackit.com/html/templates/css_grid_templates.cfm"&gt;Quackit.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwLHHtH2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhgxd2bh85pzubiums8q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwLHHtH2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhgxd2bh85pzubiums8q.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-css-layoutio"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://csslayout.io/"&gt;CSS Layout.io&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VWA_3mhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts2m9nkd3pmft8ve8o9q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWA_3mhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts2m9nkd3pmft8ve8o9q.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-thenoodleincident"&gt;
  &lt;/a&gt;
  5. &lt;a href="http://www.thenoodleincident.com/tutorials/box_lesson/boxes.html"&gt;thenoodleincident&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AaEU6t2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgo0r3lzxzx0dgsalj28.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AaEU6t2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgo0r3lzxzx0dgsalj28.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Using images without license in you web project will land you in trouble, here is the list of sites which provide free stock image that you can use in your personal or in commercial web projects.  Please check the license before you download some of the websites listed here contain both free and paid version, also the license may differ, so make sure the license is apt for your project.&lt;br&gt;

  Free Stock Images
  &lt;h4&gt;
  &lt;a href="#1-pexels"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQhYdmrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz5n45xjcwfqfjmsjb54.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQhYdmrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz5n45xjcwfqfjmsjb54.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-pixabay"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://pixabay.com/"&gt;Pixabay&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1L3KWxCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf3j34cezhrvqm9hfyvr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1L3KWxCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf3j34cezhrvqm9hfyvr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-unsplash"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lU3BZQDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jvnioastqzvewc6dc75.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lU3BZQDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jvnioastqzvewc6dc75.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-stocksnap"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://stocksnap.io/"&gt;Stocksnap&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wkB0GDtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f62ty9vk700iy9hvuo7y.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wkB0GDtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f62ty9vk700iy9hvuo7y.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-gratisography"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://gratisography.com/"&gt;Gratisography&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pKMDDl0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jylgr33z516i8c31jke4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pKMDDl0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jylgr33z516i8c31jke4.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-lifeofpix"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.lifeofpix.com/"&gt;LifeOfPix&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bKwBFCyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5g3upr6ocyygj7adde5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bKwBFCyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5g3upr6ocyygj7adde5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7-picjumbo"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://picjumbo.com/"&gt;Picjumbo&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UmBV9p65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gclqjewu4onfnokj21kp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UmBV9p65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gclqjewu4onfnokj21kp.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#8-freeimages"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.freeimages.com/"&gt;FreeImages&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUEY5yYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5om4ho9mmsb1joptbpz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUEY5yYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5om4ho9mmsb1joptbpz.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#9-negativespace"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://negativespace.co/"&gt;NegativeSpace&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juzRCZBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8u3zbjygdpfylnb7tdg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juzRCZBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8u3zbjygdpfylnb7tdg.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#10-burst"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://burst.shopify.com/"&gt;Burst&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNH9arpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpq50gezono1qhsze3xn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNH9arpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpq50gezono1qhsze3xn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#11-picography"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://picography.co/"&gt;Picography&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--00VEXl0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgge8lg3u4c5bmq4c5j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00VEXl0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgge8lg3u4c5bmq4c5j.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#12-reshot"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://www.reshot.com/"&gt;Reshot&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMt9UGsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02p782hsdcn9c9j8rj28.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMt9UGsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02p782hsdcn9c9j8rj28.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#13-foodiesfeed"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://www.foodiesfeed.com/"&gt;Foodiesfeed&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M34ZfGlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q0l15rsvpyvxivgocyo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M34ZfGlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q0l15rsvpyvxivgocyo.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#14-freestock"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://freestocks.org/"&gt;FreeStock&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUWw2jeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdyt85d8k48k0ldureqh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUWw2jeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdyt85d8k48k0ldureqh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#15-foca"&gt;
  &lt;/a&gt;
  15. &lt;a href="https://focastock.com/"&gt;Foca&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GLgSnJyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh2l0g2goyp2v1waj613.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLgSnJyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh2l0g2goyp2v1waj613.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#16-kaboompics"&gt;
  &lt;/a&gt;
  16. &lt;a href="https://kaboompics.com/"&gt;KaboomPics&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fdaaXTPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4ah1w4go2agwvqzf4jy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fdaaXTPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4ah1w4go2agwvqzf4jy.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Here is a list of stock videos that can be used in your projects. Please check the license of the video before you download, some may have restriction, that it can be used only for personal purpose or may require attribution.&lt;br&gt;

  Free Stock Video
  &lt;h4&gt;
  &lt;a href="#1-pexels-video"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.pexels.com/videos/"&gt;Pexels Video&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-dLUlSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzung2x4ysu63z0zrt3y.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-dLUlSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzung2x4ysu63z0zrt3y.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-videvo"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.videvo.net/"&gt;Videvo&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2gJfsjSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53u3iba1ecc2ibcsykyd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2gJfsjSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53u3iba1ecc2ibcsykyd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-videezy"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.videezy.com/"&gt;Videezy&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8d0nw8ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50h9tpff2t0xkuxkcioe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8d0nw8ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50h9tpff2t0xkuxkcioe.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-coverr"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://coverr.co/"&gt;Coverr&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YaMBZkEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3mbx1obgc0g66vjcpc0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaMBZkEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3mbx1obgc0g66vjcpc0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-mazwai"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://mazwai.com/"&gt;Mazwai&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTVFqY-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8wmnxwslo2hso911not.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTVFqY-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8wmnxwslo2hso911not.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-mixkit"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://mixkit.co/free-stock-video/"&gt;Mixkit&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DSMP3hSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zurcr8hl0kawqd1wmerr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DSMP3hSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zurcr8hl0kawqd1wmerr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7-pixabay-video"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://pixabay.com/videos/"&gt;Pixabay Video&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktvh7fBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kgvrylcor71zft9k2lm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktvh7fBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kgvrylcor71zft9k2lm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#8-vidsplay"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.vidsplay.com/"&gt;Vidsplay&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1J7ytufP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3pd8qyr2gjzs4w6826t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1J7ytufP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3pd8qyr2gjzs4w6826t.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#9-librestock"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://video.librestock.com/"&gt;LibreStock&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UDZWbMdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kh6knfm53elbohqatz2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UDZWbMdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kh6knfm53elbohqatz2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#10-cutestock"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://cutestockfootage.com/"&gt;CuteStock&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0_meE3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2upsuq3d5d0k2fqcm7st.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0_meE3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2upsuq3d5d0k2fqcm7st.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#11-wave"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://wave.video/assets/stock/free-videos"&gt;Wave&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F4ocjgQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/219rp7p5q7ouk44h57f1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F4ocjgQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/219rp7p5q7ouk44h57f1.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#12-ignitemotion"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://www.ignitemotion.com/"&gt;IgniteMotion&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W4Xj0In5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clqgoedsi07ztva82w8z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4Xj0In5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clqgoedsi07ztva82w8z.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#13-naturestock"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://www.naturestockvideos.com/"&gt;NatureStock&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TV8NTdXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yctodvxwpm1uklgrjksw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TV8NTdXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yctodvxwpm1uklgrjksw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#14-splitshire"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://www.splitshire.com/"&gt;SplitShire&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RLMTh2Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vna4khp6euur5i1x7o2r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RLMTh2Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vna4khp6euur5i1x7o2r.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Here is a list of color palettes which will help you to pick color for your next web project. The list also contain contrast checker, correct contrast value between the foreground and background will help in better accessibility.&lt;br&gt;

  Color Palette And Tools For Web Development
  &lt;h4&gt;
  &lt;a href="#1-learnui"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://learnui.design/tools/data-color-picker.html#palette"&gt;LearnUI&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kei0BGF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iscc54xperwp1l7g7xa4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kei0BGF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iscc54xperwp1l7g7xa4.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-colorslol"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://colors.lol/"&gt;Colors.lol&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swcC6gmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cr6w7yhgn0xkm9jej2mi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swcC6gmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cr6w7yhgn0xkm9jej2mi.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-tinyeye"&gt;
  &lt;/a&gt;
  3. &lt;a href="http://labs.tineye.com/multicolr/"&gt;TinyEye&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raH0YNN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wm6rr5z751qoa3s5wpp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raH0YNN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wm6rr5z751qoa3s5wpp.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-accessible-color-matrix"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://toolness.github.io/accessible-color-matrix/"&gt;Accessible Color Matrix&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DG1ZZAMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1184j8rl6f8xjgc2wcac.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DG1ZZAMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1184j8rl6f8xjgc2wcac.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-bootflat"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://bootflat.github.io/color-picker.html"&gt;BootFlat&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c24TqUFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvt010m8ykkoz3uck8sm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c24TqUFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvt010m8ykkoz3uck8sm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-colorsui"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://colorsui.com/"&gt;ColorsUI&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrIoSyLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eie8teoke4q22fw1ljv0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrIoSyLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eie8teoke4q22fw1ljv0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7-colorsupplyy"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://colorsupplyyy.com/app/"&gt;ColorSupplyy&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDQNjDSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t83c45r1pt085te0n8ae.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDQNjDSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t83c45r1pt085te0n8ae.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#8-open-color"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://yeun.github.io/open-color/"&gt;Open Color&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcZhY-Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iry4iewl4g3v5dy5ljrx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcZhY-Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iry4iewl4g3v5dy5ljrx.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#9-contrast-checker"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://contrastchecker.com/"&gt;Contrast Checker&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ5Q9hmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk1vbakr9zr0oehsxodd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ5Q9hmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk1vbakr9zr0oehsxodd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#10-button-contrast-checker"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.aditus.io/button-contrast-checker/"&gt;Button Contrast Checker&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FXz_staD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp053q2qaaw75r4arjwa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FXz_staD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp053q2qaaw75r4arjwa.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The below listed websites help you to generate color gradients for your web projects.&lt;br&gt;

  CSS Color Gradient
  &lt;h4&gt;
  &lt;a href="#1larsenwork"&gt;
  &lt;/a&gt;
  1.&lt;a href="https://larsenwork.com/easing-gradients/"&gt;LarsenWork&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2y-5dsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxggsbvk0tio8z8cacgg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2y-5dsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxggsbvk0tio8z8cacgg.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2gradient-magic"&gt;
  &lt;/a&gt;
  2.&lt;a href="https://www.gradientmagic.com/collection/popular/gradient/1587510852621"&gt;Gradient Magic&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y_t8YffY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rls79vq27uwm13w6fx3c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y_t8YffY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rls79vq27uwm13w6fx3c.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3virtuosoft"&gt;
  &lt;/a&gt;
  3.&lt;a href="https://www.virtuosoft.eu/tools/css-gradient-generator/"&gt;Virtuosoft&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SCq5kCDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmfxjxu8lvqk23v9fxn5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SCq5kCDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmfxjxu8lvqk23v9fxn5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4learnui"&gt;
  &lt;/a&gt;
  4.&lt;a href="https://learnui.design/tools/gradient-generator.html"&gt;LearnUI&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqoNJEvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2grf59dzuborn0e3vza.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqoNJEvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2grf59dzuborn0e3vza.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5cssgradient"&gt;
  &lt;/a&gt;
  5.&lt;a href="https://www.css-gradient.com/"&gt;CSS-Gradient&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYu2Lp0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o21l47r6r2zsvpqg0uo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYu2Lp0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o21l47r6r2zsvpqg0uo.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6mesh"&gt;
  &lt;/a&gt;
  6.&lt;a href="https://meshgradient.com/"&gt;Mesh&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7Xea1ZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fcitp55hu17ijsaenrv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7Xea1ZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fcitp55hu17ijsaenrv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7hypercolor"&gt;
  &lt;/a&gt;
  7.&lt;a href="https://hypercolor.dev/"&gt;HyperColor&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cM8CrTy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52bltsbde2pwvzpkbtux.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cM8CrTy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52bltsbde2pwvzpkbtux.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Hope you like the resources, and was helpful to you. Last time I posted a resource list which contained more than &lt;a href="https://dev.to/kiranrajvjd/the-ultimate-web-developer-resources-list-200-resources-2gf5"&gt;200 web resources&lt;/a&gt;, many felt that it was too long and they did not go through all the resources. So this time I limit to 75, and this list does not contain resources from the previous post. I did not explain about each resources, from next time onwards I will try to post resources based on a particular topic and explain what the resources has to offer, currently I am working on it hope to post some in next week. If you like this, please share, so that others can use the resources, if you found any broken links or errors please comment. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/24-html-tags-you-may-not-know-37be" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;24 HTML Tags you may not know.&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ May 4 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/25-awesome-fonts-from-google-fonts-40im" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;25 Awesome Fonts From Google Fonts&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 14 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/10-simple-toggle-switch-animation-using-css-and-javascript-3gpn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Simple Toggle Switch Animation Using CSS And JavaScript&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 29 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/7-simple-menu-icon-animation-for-beginners-25oa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Simple Menu Icon Animation For Beginners &lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 24 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Psychological theories that are used in UI/UX Design</title>
      <author>Akila Maithripala</author>
      <pubDate>Fri, 14 May 2021 05:49:00 +0000</pubDate>
      <link>https://dev.to/ucscmozilla/5-psychological-theories-that-are-used-in-ui-ux-design-4kgl</link>
      <guid>https://dev.to/ucscmozilla/5-psychological-theories-that-are-used-in-ui-ux-design-4kgl</guid>
      <description>&lt;p&gt;Designing is an art. When a good design is used on top of a good interface, it creates a beautiful harmony between the two layers of technology. Same way, no good design is valued if the backend is non-functional and vice versa. &lt;/p&gt;

&lt;p&gt;Keeping the backend aside, let's see how to use science to arrange designing elements we use every day to please the human brain.&lt;/p&gt;

&lt;p&gt;Here are such design principles which were derived from psychological principles,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-isolation-effect"&gt;
  &lt;/a&gt;
  1. Isolation Effect
&lt;/h2&gt;

&lt;p&gt;The isolation effect states that when many similar objects are present, the object that differs from the rest is the one that's mostly likely to be remembered by the user.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4taqdAXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.psdrepo.com/images/2x/1423db9e-3bfa-4694-bb89-559a794ccca6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4taqdAXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.psdrepo.com/images/2x/1423db9e-3bfa-4694-bb89-559a794ccca6.jpg" alt="YouTube Video Playback screen with subscribe button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take YouTube video playback window for an example, apart from the video itself, what's the first thing you see in that screen? Yes, the subscribe button. The only red elements in the screen are the YouTube logo itself and the Subscribe button. &lt;/p&gt;

&lt;p&gt;It's like they both have an equal value. Moreover, it sort of gives an idea of what this service is and how it works, by highlighting the most important function of the service. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-hickss-law"&gt;
  &lt;/a&gt;
  2. Hicks's law
&lt;/h2&gt;

&lt;p&gt;Hick's law states that the time it takes for a person to make a derision depends on the number of choices available to choose from. Pretty obvious right? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYBadgV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marvel7077.wpengine.com/wp-content/uploads/2017/06/1WLT8LMUF7RqozfG38TIL3A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYBadgV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marvel7077.wpengine.com/wp-content/uploads/2017/06/1WLT8LMUF7RqozfG38TIL3A.png" alt="Hick's Law explained in lists"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lesser the number of answers there is for a MCQ question, easier for a student to guess the correct answer. Same way, if the number of choices increases, the time to make a choice increases logarithmically.&lt;/p&gt;

&lt;p&gt;So, the number of checkboxes, radio buttons you use on your interface can affect the overall experience of a user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-serial-position-effect"&gt;
  &lt;/a&gt;
  3. Serial Position Effect
&lt;/h2&gt;

&lt;p&gt;Ever wondered why Hamberg menus are slowly becoming extinct? It's all bottom navigation now. Why? The serial position effect may have caught the eye of the designers.&lt;/p&gt;

&lt;p&gt;It states that there's a tendency of a user to best remember the first and last items in a series. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Gf5Ckii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.dribbble.com/users/7856/screenshots/2635508/spotify-tab-bar-ios-app.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Gf5Ckii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.dribbble.com/users/7856/screenshots/2635508/spotify-tab-bar-ios-app.gif" alt="Spotify bottom nav bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So instead of making a vertical list, designers go for a horizontal series of elements while placing more important functions in left and right ends of the series. Like the Home and Message pages in Twitter app for an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---R2jw3Pg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.androidpolice.com/wp-content/uploads/2018/07/Screenshot_20180713-113125.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---R2jw3Pg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.androidpolice.com/wp-content/uploads/2018/07/Screenshot_20180713-113125.png" alt="Twitter Bottom Navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-cognitive-load-theory"&gt;
  &lt;/a&gt;
  4. Cognitive Load Theory
&lt;/h2&gt;

&lt;p&gt;Cognitive load is the amount of thought someone need to exercise in order to complete a specific task. The theory also suggests that if the cognitive load exceeds our processing capacity, we will struggle to complete the task successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---c1PfFzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.aytech.ca/wp-content/uploads/2017/01/Barriers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---c1PfFzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.aytech.ca/wp-content/uploads/2017/01/Barriers.png" alt="Cognitive Load"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three types of Cognitive Load,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Intrinsic cognitive load
        - The effort associated with a specific topic&lt;/li&gt;
&lt;li&gt;Extraneous cognitive load
        - The way information or tasks are presented to a learner&lt;/li&gt;
&lt;li&gt;Germane Cognitive load
        - The work put into creating a permanent store of knowledge (a schema)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSG8YpXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://uxmag.com/sites/default/files/uploads/julien-cognition/Cognitive_Full1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSG8YpXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://uxmag.com/sites/default/files/uploads/julien-cognition/Cognitive_Full1.jpg" alt="Cognitive load in UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considering Cognitive Load mean that you always care about the amount of information a user has to keep in mind, and also if there's a process involving routine of tasks, make it a pattern that's available everywhere in the application, so users get more familiar with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-proximity-law"&gt;
  &lt;/a&gt;
  5. Proximity Law
&lt;/h2&gt;

&lt;p&gt;The law of proximity states that objects that are near, or proximate to each other, tend to be grouped together. &lt;/p&gt;

&lt;p&gt;It means that our brain can easily associate objects that are placed together, rather than objects that are placed far apart. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnqEhC6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marvel7077.wpengine.com/wp-content/uploads/2017/06/1Jn2VR9U2bNj8Nh2d8zf5ug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnqEhC6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marvel7077.wpengine.com/wp-content/uploads/2017/06/1Jn2VR9U2bNj8Nh2d8zf5ug.png" alt="Proximity Law"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are 72 circles in the image above. We tend to recognise the circles in groups based on the distance between them.  &lt;em&gt;Categorically&lt;/em&gt;, we can also see that there is a group of 36 circles on the left side of the image, and 3 groups of 12 circles on the right side of the image.&lt;/p&gt;

&lt;p&gt;So, there is a scientific way to approaching in grouping things together when designing a UI, and also, be mindful when grouping elements together since users may naturally think they are associated with each other.&lt;/p&gt;

&lt;p&gt;Finally, this has been a brief introduction to how psychological findings can be used to enhance usability and visual look of a user interface. Dig more into these theories to get a good idea of them and also, you'll find many more scientific discoveries that might be beneficial in effective UI designing.&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>psychology</category>
    </item>
    <item>
      <title>How To Build e-Learning App Like Coursera- Everything You Need To Know</title>
      <author>GrowthWalt Techsolutions</author>
      <pubDate>Fri, 14 May 2021 04:14:26 +0000</pubDate>
      <link>https://dev.to/growthwalt/how-to-build-e-learning-app-like-coursera-everything-you-need-to-know-4754</link>
      <guid>https://dev.to/growthwalt/how-to-build-e-learning-app-like-coursera-everything-you-need-to-know-4754</guid>
      <description>&lt;p&gt;It is safe to say that you are intending to build up an e-Learning mobile app or website like upGrad or KhanAcademy, or perhaps you even have an aggressive plan to get up to speed and contend with market players like Coursera and Udemy?&lt;/p&gt;

&lt;p&gt;Digital learning or e-Learning is a huge and fascinating world with massive monetization models. Forbes anticipated the growth of e-Learning industry in 2018, and the development has been skyrocketing ever since.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hb843l3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah79yulwdqdvhuivbgbk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hb843l3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah79yulwdqdvhuivbgbk.png" alt="How To Build e-Learning App Like Coursera"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How would you build e-learning app like Coursera that will find its positionin this highly competitive market and succeed? How much does it cost to build e-learning app like Coursera? &lt;/p&gt;

&lt;p&gt;This article will assist you with understanding what you need unequivocally and how to accomplish it with modern innovations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature Listing of e-Learning Web App:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admin Panel&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Admin Login&lt;/li&gt;
&lt;li&gt;Manage tutor and students profile&lt;/li&gt;
&lt;li&gt;Admin can manage certifications of colleges/universities&lt;/li&gt;
&lt;li&gt;Manage sales and marketing&lt;/li&gt;
&lt;li&gt;Get statistics reports&lt;/li&gt;
&lt;li&gt;Manage Content (Audio/Video)&lt;/li&gt;
&lt;li&gt;Admin can approve/reject tutor request&lt;/li&gt;
&lt;li&gt;Modify courses&lt;/li&gt;
&lt;li&gt;Help with change in subscription plan&lt;/li&gt;
&lt;li&gt;Manage newsletter and notification&lt;/li&gt;
&lt;li&gt;Manage payment&lt;/li&gt;
&lt;li&gt;Manage offer/subscription&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tutor Panel&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tutor/College/Universities login&lt;/li&gt;
&lt;li&gt;Manage profile&lt;/li&gt;
&lt;li&gt;Personal and payment information&lt;/li&gt;
&lt;li&gt;Create and Submit audio &amp;amp; video based content for student&lt;/li&gt;
&lt;li&gt;Dashboard with details of interest shown in their course&lt;/li&gt;
&lt;li&gt;Tutor can schedule online test&lt;/li&gt;
&lt;li&gt;Chat with students&lt;/li&gt;
&lt;li&gt;Can check their progress report&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Student Panel&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Student registration &amp;amp; login&lt;/li&gt;
&lt;li&gt;Student courses selection&lt;/li&gt;
&lt;li&gt;Students can browse courses with the advanced search features&lt;/li&gt;
&lt;li&gt;Students can access courses by categories like author name, courses, colleges and Universities.&lt;/li&gt;
&lt;li&gt;Free and Premium Account Subscription Management&lt;/li&gt;
&lt;li&gt;Students can access online lectures (Both Audio/Video)&lt;/li&gt;
&lt;li&gt;Online Question Papers &amp;amp; Online Exams&lt;/li&gt;
&lt;li&gt;In-App Chat Feature&lt;/li&gt;
&lt;li&gt;Student Progress Tracking&lt;/li&gt;
&lt;li&gt;Online competitive exam preparation for students &lt;/li&gt;
&lt;li&gt;Adaptive learning feature for students &lt;/li&gt;
&lt;li&gt;Online student community&lt;/li&gt;
&lt;li&gt;Student can provide Review &amp;amp; Rating to the course as well as to the tutor.&lt;/li&gt;
&lt;li&gt;Students can earn rewards for every course they finish through which they can buy another course for a lower cost or free.&lt;/li&gt;
&lt;li&gt;Student can pay for the subscription through Advanced Payment Gateways like PayPal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Team and the Technology Stack to Develop an E-learning App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To succeed in the mobile education industry, you need to hire mobile app developer or renowned &lt;strong&gt;&lt;a href="https://www.growthwalt.com/mobile-app-development-company-jaipur.html"&gt;mobile app development company in Jaipur&lt;/a&gt;&lt;/strong&gt;. The following team structure you require to build advanced, easy-to-use, and appealing mobile app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project Manager&lt;/li&gt;
&lt;li&gt;UI/UX Designer&lt;/li&gt;
&lt;li&gt;Graphic Designer&lt;/li&gt;
&lt;li&gt;iOS/Android Developers&lt;/li&gt;
&lt;li&gt;Front-end and Back-end Developers&lt;/li&gt;
&lt;li&gt;2-3 Programmers&lt;/li&gt;
&lt;li&gt;QA Tester&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;As for the tech stack, the following list is required for smooth functioning:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Data Storage-&lt;/strong&gt; AWS&lt;br&gt;
&lt;strong&gt;Database-&lt;/strong&gt; MySQL, Amazon RDS, PostgreSQL, MongoDB&lt;br&gt;
&lt;strong&gt;Frontend (iOS and Android) Development-&lt;/strong&gt; Swift, React Native, Android studio (Java)&lt;br&gt;
&lt;strong&gt;UI/UX-&lt;/strong&gt; HTML, CSS, Photoshop, Adobe Illustrator&lt;br&gt;
&lt;strong&gt;Real-Time Analytics-&lt;/strong&gt; Google Analytics, IBM, Big Data, Apache/Hadoop/Spark&lt;br&gt;
&lt;strong&gt;Push Notifications-&lt;/strong&gt; Push.IO, Amazon SNS, Twilio, AdPushup&lt;br&gt;
Email Registration and Communication-   Mandrill, Amazon SES, Twilio, Mailgun&lt;br&gt;
&lt;strong&gt;Email Verification via SMS and Voice-&lt;/strong&gt; Nexmo, Twilio&lt;br&gt;
&lt;strong&gt;Payment Integration-&lt;/strong&gt; PayPal, Stripe, Twilio, Braintree, credit/debit card, e-wallet&lt;br&gt;
&lt;strong&gt;Streaming System-&lt;/strong&gt; LiveStream, Agora.io, Twilio, webRTC, Dacast&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Monetize your E-learning Platform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have discussed a number of factors and features for e-learning app like Coursera, now you must be thinking about how to earn money through the app or what is the monetize model? As a leading education app development company in India, we have created some ways through which you can make money for your e-learning business.&lt;/p&gt;

&lt;p&gt;So, as a parting note let us see how to get back and grow the money you had put into the development of your MOOC application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In-app advertisement&lt;/li&gt;
&lt;li&gt;e-Commerce&lt;/li&gt;
&lt;li&gt;Subscription Plan&lt;/li&gt;
&lt;li&gt;Paid Certificate&lt;/li&gt;
&lt;li&gt;Affiliate Marketing&lt;/li&gt;
&lt;li&gt;Corporate Learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How Much Does It Cost to Create an App Like Coursera?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Keeping in the mind the feature list, technology stack, mobile app platform, and team of technical experts discussed, the estimated cost to build eLearning app like Coursera is estimated to be anywhere between USD 30,00 to USD 40,000.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;E-Learning is a growing industry where setting up positions is very easy. Following the business model of popular e-learning apps, you can build your own mobile app and can come in competition among them. To &lt;strong&gt;&lt;a href="https://www.growthwalt.com/mobile-app-development-company-india.html"&gt;build education app like Coursera&lt;/a&gt;&lt;/strong&gt;, you can hire an experienced mobile app developer or partner with the best &lt;strong&gt;&lt;a href="https://www.growthwalt.com/mobile-app-development-company-india.html"&gt;mobile app development company in India&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>applikecoursera</category>
      <category>mobileappdevelopment</category>
      <category>appdeveloper</category>
    </item>
    <item>
      <title>GitHub Community: your place to learn, discuss, and ask questions</title>
      <author>Davide Benvegnù</author>
      <pubDate>Fri, 14 May 2021 04:14:07 +0000</pubDate>
      <link>https://dev.to/n3wt0n/github-community-your-place-to-learn-discuss-and-ask-questions-ma8</link>
      <guid>https://dev.to/n3wt0n/github-community-your-place-to-learn-discuss-and-ask-questions-ma8</guid>
      <description>&lt;p&gt;The &lt;a href="https://github.community"&gt;GitHub Community&lt;/a&gt; is the place where you can talk and find answers about GitHub, DevOps, Programming languages, and much more!&lt;/p&gt;

&lt;p&gt;I've teamed up with &lt;a href="https://www.youtube.com/MickeyGousset"&gt;Mickey Gousset&lt;/a&gt; (DevOps Architect @ GitHub) to bring you all the information you need on what it is, how to use it, and what you can find there.&lt;/p&gt;

&lt;p&gt;Watch the full video here 🤓&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8SS6I63LCW0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Full link: &lt;a href="https://youtu.be/8SS6I63LCW0"&gt;https://youtu.be/8SS6I63LCW0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>codenewbie</category>
      <category>community</category>
    </item>
    <item>
      <title>Distributed Persistent Rendering: A new Jamstack approach for faster builds</title>
      <author>Matt Biilmann</author>
      <pubDate>Fri, 14 May 2021 04:14:05 +0000</pubDate>
      <link>https://dev.to/biilmann/distributed-persistent-rendering-a-new-jamstack-approach-for-faster-builds-1d5f</link>
      <guid>https://dev.to/biilmann/distributed-persistent-rendering-a-new-jamstack-approach-for-faster-builds-1d5f</guid>
      <description>&lt;p&gt;I’d like to share a new concept we’ve been exploring for the &lt;a href="https://jamstack.org"&gt;Jamstack&lt;/a&gt; at Netlify, born out of our work with large enterprise dev teams deploying hundreds of thousands of pages at a time.&lt;/p&gt;

&lt;p&gt;We wanted a way to make those deployments faster—without introducing unwanted complexity for Jamstack developers. Some solutions have come up before now, but they tend to lock you into a specific framework or break some of the most compelling reasons to use Jamstack in the first place. A Jamstack-focused approach was needed that would work across the ecosystem. After discussion both within Netlify and some members of the Jamstack community, we feel we’ve landed the right concept—something we’ve dubbed “Distributed Persistent Rendering” or “DPR” for short.&lt;/p&gt;

&lt;p&gt;This post is designed as an early introduction to the approach we’re proposing as well as an invitation for the entire community to offer feedback and collaboration. Our hope is to create a new standard that maintains the core principles and benefits of Jamstack and works across a wide variety of site generators and frameworks, bringing an even wider range of websites and use cases to the Jamstack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-power-of-atomic-deploys"&gt;
  &lt;/a&gt;
  The power of atomic deploys
&lt;/h2&gt;

&lt;p&gt;We think the very best tools are built around a simple mental model that helps you easily reason about the state of your application as you build it. Modern frontend libraries (like React and Vue) make a simple, powerful contract with the developer: UI becomes a function of state. Change the state, and the UI will rerender in response.&lt;/p&gt;

&lt;p&gt;The Jamstack has thrived because it too centers around an intuitive mental model: every git push runs a build process to create its own atomic deployment. This approach keeps it incredibly easy to reason about the current state of your site or application, even as many changes are committed daily from around your team. It makes both new deploys and rollbacks painless. It keeps you always confident in what any visitor will see at any given URL. And, most importantly, it avoids all the deep layers of caching, complexity, and infrastructure that came out of scaling the legacy web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-fight-against-complexity"&gt;
  &lt;/a&gt;
  The fight against complexity
&lt;/h2&gt;

&lt;p&gt;For any technology, the hardest part is not establishing simplicity, but protecting it over time.&lt;/p&gt;

&lt;p&gt;As the Jamstack evolves, new features like dynamic server side rendering, rehydration, tiered CDN caching, and stale while revalidate seem to be creeping us back towards all the complexity we fought to escape. Can you still be confident in a rollback? Do you really know how your site will behave if you push deploy preview #110?&lt;/p&gt;

&lt;p&gt;Of course the momentum to add features to a platform is the desire to solve real challenges. And one of the challenges of the atomic deployment model is the time it takes to rebuild an entire site each for each deploy. Larger teams and projects are feeling this impact, especially now that Jamstack sites are scaling to 100,000 pages and beyond.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speeding-up-deployments-without-weighing-down-the-jamstack"&gt;
  &lt;/a&gt;
  Speeding up deployments... without weighing down the Jamstack
&lt;/h2&gt;

&lt;p&gt;Netlify would like to work with the entire Jamstack community to help bring a solution for faster large site deployments—but importantly an approach that stays true to the atomic deployment model of the Jamstack. We’re calling our proposal Distributed Persistent Rendering, and today we’ve posted details about the approach in a &lt;a href="https://www.netlify.com/dpr-rfc"&gt;Request For Comments (RFC)&lt;/a&gt;. Our hope is that community members and site generator authors will weigh in and help us build something that is easily adoptable by multiple frameworks. Already, we’ve seen early engagement from Nuxt and 11ty and we hope many more will join the collaboration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DS6j6fLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/dpr-blog-post-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DS6j6fLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/dpr-blog-post-image.png" alt="Distributed Persistent Rendering" title="Distributed Persistent Rendering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Distributed Persistent Rendering (or DPR) allows developers to defer rendering any given URL or asset until it’s first requested. With DPR, you can (and should) still prerender critical pages at build time—perhaps your homepage or recent blog posts. But that huge archive containing years of older posts? Using DPR, those pages can be rendered only when and if they are requested. And once rendered, they remain as a persistent asset until the next deploy—just as if they had been part of the initial build. It brings the benefit of faster builds without introducing the complexity of scaling and caching server-side rendering. And unlike a caching-based strategy, there’s no risk of confusion from stale assets or fallback pages.&lt;/p&gt;

&lt;p&gt;We think DPR strikes the right balance—new capabilities without new complexities. We’re so excited we’ve even built a new service offering to help accelerate us towards DPR and &lt;a href="https://www.netlify.com/blog/2021/04/14/faster-builds-for-large-sites-on-netlify-with-on-demand-builders-now-in-early-access/"&gt;we’re announcing today&lt;/a&gt; that any Netlify customer can gain early access to explore the approach and the simple API behind it.&lt;/p&gt;

&lt;p&gt;Please let us know what you think in the &lt;a href="https://www.netlify.com/dpr-rfc"&gt;RFC&lt;/a&gt; and show us what you build!&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>dpr</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Angular : How to use *ngIf else? [Including NgIf, ngIfThen and ngIfElse with Live Demo]</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Fri, 14 May 2021 04:10:36 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/angular-how-to-use-ngif-else-5gcp</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/angular-how-to-use-ngif-else-5gcp</guid>
      <description>&lt;p&gt;Simple form with shorthand syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div *ngIf="condition"&amp;gt;Content to render when condition is true.&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple form with expanded syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ng-template [ngIf]="condition"&amp;gt;&amp;lt;div&amp;gt;Content to render when condition is
true.&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Form with an "else" block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div *ngIf="condition; else elseBlock"&amp;gt;Content to render when condition is true.&amp;lt;/div&amp;gt;
&amp;lt;ng-template #elseBlock&amp;gt;Content to render when condition is false.&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shorthand form with "then" and "else" blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div *ngIf="condition; then thenBlock else elseBlock"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;ng-template #thenBlock&amp;gt;Content to render when condition is true.&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #elseBlock&amp;gt;Content to render when condition is false.&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Form with storing the value locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div *ngIf="condition as value; else elseBlock"&amp;gt;{{value}}&amp;lt;/div&amp;gt;
&amp;lt;ng-template #elseBlock&amp;gt;Content to render when value is null.&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For case if with else, we can use &lt;code&gt;ngIf&lt;/code&gt; and &lt;code&gt;ngIfElse&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ng-template [ngIf]="condition" [ngIfElse]="elseBlock"&amp;gt;
  Content to render when condition is true.
&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #elseBlock&amp;gt;
  Content to render when condition is false.
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For case if with then, we can use &lt;code&gt;ngIf&lt;/code&gt; and &lt;code&gt;ngIfThen&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ng-template [ngIf]="condition" [ngIfThen]="thenBlock"&amp;gt;
  This content is never showing
&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #thenBlock&amp;gt;
  Content to render when condition is true.
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For case if with then and else, we can use &lt;code&gt;ngIf&lt;/code&gt;, &lt;code&gt;ngIfThen&lt;/code&gt;, and &lt;code&gt;ngIfElse&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ng-template [ngIf]="condition" [ngIfThen]="thenBlock" [ngIfElse]="elseBlock"&amp;gt;
  This content is never showing
&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #thenBlock&amp;gt;
  Content to render when condition is true.
&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #elseBlock&amp;gt;
  Content to render when condition is false.
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/angular-ivy-gzfafh?embed=1&amp;amp;&amp;amp;file=src%2Fapp%2Fapp.component.html" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Node.js : Asynchronously Read from Files</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Fri, 14 May 2021 03:54:10 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/node-js-asynchronously-read-from-files-1hb1</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/node-js-asynchronously-read-from-files-1hb1</guid>
      <description>&lt;p&gt;Use the filesystem module for all file operations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fs = require('fs');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#with-encoding"&gt;
  &lt;/a&gt;
  With Encoding
&lt;/h1&gt;

&lt;p&gt;In this example, read &lt;code&gt;hello.txt&lt;/code&gt; from the directory /tmp. This operation will be completed in the background and the callback occurs on completion or failure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fs.readFile('/tmp/hello.txt', { encoding: 'utf8' }, (err, content) =&amp;gt; {
 // If an error occurred, output it and return
 if(err) return console.error(err);
 // No error occurred, content is a string
 console.log(content);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#without-encoding"&gt;
  &lt;/a&gt;
  Without Encoding
&lt;/h1&gt;

&lt;p&gt;Read the binary file &lt;code&gt;binary.txt&lt;/code&gt; from the current directory, asynchronously in the background. Note that we do not set the 'encoding' option - this prevents Node.js from decoding the contents into a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fs.readFile('binary', (err, binaryContent) =&amp;gt; {
 // If an error occurred, output it and return
 if(err) return console.error(err);
 // No error occurred, content is a Buffer, output it in
 // hexadecimal representation.
 console.log(content.toString('hex'));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#relative-paths"&gt;
  &lt;/a&gt;
  Relative paths
&lt;/h1&gt;

&lt;p&gt;Keep in mind that, in general case, your script could be run with an arbitrary current working directory. To address&lt;br&gt;
a file relative to the current script, use &lt;code&gt;__dirname&lt;/code&gt; or &lt;code&gt;__filename&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fs.readFile(path.resolve(__dirname, 'someFile'), (err, binaryContent) =&amp;gt; {
 //Rest of code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Dynamic Dev.to Blog Posts On GitHub</title>
      <author>Attentive Aryan</author>
      <pubDate>Fri, 14 May 2021 03:39:59 +0000</pubDate>
      <link>https://dev.to/attentivearyan/dynamic-dev-to-blog-posts-on-github-211p</link>
      <guid>https://dev.to/attentivearyan/dynamic-dev-to-blog-posts-on-github-211p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this"&gt;
  &lt;/a&gt;
  What is this?
&lt;/h2&gt;

&lt;p&gt;Want to show dynamic posts that update with the posts that you right on dev.to? This post is going to share a simple yet easy way to add dev.to posts dynamically to your github profile. Here is a example as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzCWj7XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8397274/88047382-29b8b280-cb6f-11ea-9efb-2af2b10f3e0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzCWj7XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8397274/88047382-29b8b280-cb6f-11ea-9efb-2af2b10f3e0c.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Leave some reactions to this repository 😉&lt;/li&gt;
&lt;li&gt;Create a repository with the same name as your username
For example if my username is &lt;strong&gt;AttentiveAryan&lt;/strong&gt; the repo will be &lt;strong&gt;AttentiveAryan/AttentiveAryan&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eq63k-04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrpke1gwfniouk234mdd.png" alt="Message To Verify"&gt;
&lt;/li&gt;
&lt;li&gt;Create a readme.md file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hi 👋🏻, I'm Aryan Gupta&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A passionate learner from India&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &amp;lt;a href="https://twitter.com/attentivearyan" 
target="blank"&amp;gt;&amp;lt;img 
src="https://img.shields.io/twitter/follow/attentivearyan? 
logo=twitter&amp;amp;style=for-the-badge" alt="attentivearyan" /&amp;gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;
  -&lt;/span&gt; 🔭 I’m currently working on &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;learning html &amp;amp; css&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://freecodecamp.org/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;
  -&lt;/span&gt; 💻 All of my projects are available at &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;attentivearyan.github.io&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://attentivearyan.github.io&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;
  -&lt;/span&gt; 📝 I regularly write articles on &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;attentivearyan.github.io/blog/&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://attentivearyan.github.io/blog/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;
  -&lt;/span&gt; 📫 How to reach me &lt;span class="gs"&gt;**attentivearyan@gmail.com**&lt;/span&gt;
&lt;span class="p"&gt;
  -&lt;/span&gt; 📄 Know about my experiences &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;attentivearyan.github.io/resume/&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://attentivearyan.github.io/resume/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  ### Blogs posts
  &lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Make sure to include the comment tag cause the post will be placed in this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;  &lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now let us come to the logic, We are going to use blog-post-workflow action:
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gautamkrishnar"&gt;
        gautamkrishnar
      &lt;/a&gt; / &lt;a href="https://github.com/gautamkrishnar/blog-post-workflow"&gt;
        blog-post-workflow
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Show your latest blog posts from any sources or StackOverflow activity or Youtube Videos on your GitHub profile/project readme automatically using the RSS feed
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;For that create a file in &lt;code&gt;.github/workflows/&lt;/code&gt; called &lt;code&gt;blog-post-workflow.yml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Latest blog post workflow&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Run workflow automatically&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt; &lt;span class="c1"&gt;# Runs every hour, on the hour&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Run workflow manually (without waiting for the cron to be called), through the Github Actions Workflow page directly&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;update-readme-with-blog&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update this repo's README with latest blog posts&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gautamkrishnar/blog-post-workflow@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;feed_list&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://dev.to/feed/{username}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Replace {username} with your username&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check the repo for more configuration options:
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gautamkrishnar"&gt;
        gautamkrishnar
      &lt;/a&gt; / &lt;a href="https://github.com/gautamkrishnar/blog-post-workflow"&gt;
        blog-post-workflow
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Show your latest blog posts from any sources or StackOverflow activity or Youtube Videos on your GitHub profile/project readme automatically using the RSS feed
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Blog post workflow  &lt;a href="https://github.com/gautamkrishnar/blog-post-workflow/actions?query=workflow%3A%22Build+and+test%22"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07TfAXIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gautamkrishnar/blog-post-workflow/workflows/Build%2520and%2520test/badge.svg%3Fbranch%3Dmaster" alt="Build and test"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/8397274/88047382-29b8b280-cb6f-11ea-9efb-2af2b10f3e0c.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzCWj7XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8397274/88047382-29b8b280-cb6f-11ea-9efb-2af2b10f3e0c.png" alt="preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
How to use&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Star this repo 😉
&lt;/li&gt;
&lt;li&gt;Go to your repository&lt;/li&gt;
&lt;li&gt;Add the following section to your &lt;strong&gt;README.md&lt;/strong&gt; file, you can give whatever title you want. Just make sure that you use &lt;code&gt;&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;&lt;/code&gt; in your readme. The workflow will replace this comment with the actual blog post list:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-gfm position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-mh"&gt;&lt;span class="pl-mh"&gt;#&lt;/span&gt;&lt;span class="pl-mh"&gt; &lt;/span&gt;Blog posts&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;&amp;lt;!--&lt;/span&gt; BLOG-POST-LIST:START &lt;span class="pl-c"&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;&amp;lt;!--&lt;/span&gt; BLOG-POST-LIST:END &lt;span class="pl-c"&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;div class="zeroclipboard-container position-absolute right-0 top-0"&gt;
  
    

    
    

  
&lt;/div&gt;



&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Create a folder named &lt;code&gt;.github&lt;/code&gt; and create a &lt;code&gt;workflows&lt;/code&gt; folder inside it if it doesn't exist.&lt;/li&gt;
&lt;li&gt;Create a new file named &lt;code&gt;blog-post-workflow.yml&lt;/code&gt; with the following contents inside the workflows folder:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-source-yaml position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;Latest blog post workflow&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;
  &lt;span class="pl-ent"&gt;schedule&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Run workflow automatically&lt;/span&gt;
    - &lt;span class="pl-ent"&gt;cron&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;0 * * * *&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Runs every hour, on the hour&lt;/span&gt;
  &lt;span class="pl-ent"&gt;workflow_dispatch&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Run workflow manually (without waiting for the cron to be called), through the Github Actions Workflow page directly&lt;/span&gt;
&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;update-readme-with-blog&lt;/span&gt;:
    &lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gautamkrishnar/blog-post-workflow"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy Coding! If you face any issues comment here down below! Make sure to link your profile repo once you're done!&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/krishdevdb"&gt;@krishdevdb&lt;/a&gt;
 for this article&lt;/p&gt;

</description>
      <category>github</category>
      <category>githunt</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A new Password Rule object from Laravel 8.39</title>
      <author>TRUNG VU</author>
      <pubDate>Fri, 14 May 2021 03:38:42 +0000</pubDate>
      <link>https://dev.to/vumanhtrung/a-new-password-rule-object-from-laravel-8-39-5cil</link>
      <guid>https://dev.to/vumanhtrung/a-new-password-rule-object-from-laravel-8-39-5cil</guid>
      <description>&lt;p&gt;In previous versions, to define a custom validation rule, you must to implement the &lt;code&gt;Illuminate\Contracts\Validation\Rule&lt;/code&gt; interface or use a Closure.&lt;/p&gt;

&lt;p&gt;As below code, a custom rule &lt;code&gt;StrongPassword&lt;/code&gt; like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Rules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Contracts\Validation\Rule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StrongPassword&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Rule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;preg_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@()$%^&amp;amp;*=_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;}[\]:;\"'|\\&amp;lt;&amp;gt;,.\/~`±§+-]).{12,30&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;$/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'The :attribute must be 12–30 characters, and include a number, a symbol, a lower and a upper case letter'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use it in your controller or request validation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Requests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Rules\StrongPassword&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Foundation\Http\FormRequest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AccountRequest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;FormRequest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StrongPassword&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From version 8.39, Nuno Maduro created a new Password Rule object in this framework with below methods:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;min()&lt;/code&gt;: Makes minimum size of the password.&lt;br&gt;
&lt;code&gt;mixedCase()&lt;/code&gt;: Makes the password require at least one uppercase and one lowercase letter.&lt;br&gt;
&lt;code&gt;letters()&lt;/code&gt;: Makes the password require at least one letter.&lt;br&gt;
&lt;code&gt;numbers()&lt;/code&gt;: Makes the password require at least one number.&lt;br&gt;
&lt;code&gt;symbols()&lt;/code&gt;: Makes the password require at least one symbol.&lt;br&gt;
&lt;code&gt;uncompromised()&lt;/code&gt;: Ensures the password has not been compromised by checking the password against a verification API to see if the password appears in data leaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;mixedCase&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;uncompromised&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can use them all combined like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;mixedCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;uncompromised&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks Nuno Maduro.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href="https://github.com/laravel/framework/pull/36960"&gt;https://github.com/laravel/framework/pull/36960&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to transfer data from your Existing Server to Aws S3</title>
      <author>Lakhveer Bawa</author>
      <pubDate>Fri, 14 May 2021 03:34:56 +0000</pubDate>
      <link>https://dev.to/bawa_geek/how-to-transfer-data-from-your-existing-server-to-aws-s3-4p8g</link>
      <guid>https://dev.to/bawa_geek/how-to-transfer-data-from-your-existing-server-to-aws-s3-4p8g</guid>
      <description>&lt;p&gt;Amazon S3 is a pretty good and inexpensive choice for website data storage. You can save a lot of money uploading website data such as user uploads to S3 instead of your hosting server.&lt;/p&gt;

&lt;p&gt;I found it a little difficult to understand how s3 migration works and did not find any simple tutorial on that. So here I am sharing the steps that can help you to migrate data to the S3 bucket.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Aws Cli on your existing Server
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="s2"&gt;"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"awscliv2.zip"&lt;/span&gt;
unzip awscliv2.zip
&lt;span class="nb"&gt;sudo&lt;/span&gt; ./aws/install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reference: &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html"&gt;https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to the IAM section in your AWS console and create a user will full administration access. Note down the Access Key Id and Access key secret provided to you after creating the user account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the Aws Cli on your Server using&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;command, and provide Access Key Id and secret that you created before.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;aws s3 list&lt;/code&gt; to see the list of s3 buckets created inside your account( create one if you haven't done so).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the following command to copy the files to s3 bucket&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws s3 &lt;span class="nb"&gt;cp &lt;/span&gt;directory-to-be-uploaded s3://bucket-name-here &lt;span class="nt"&gt;--recursive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>linux</category>
      <category>aws</category>
      <category>s3</category>
    </item>
    <item>
      <title>What is Execution context </title>
      <author>Denis Woldemariam</author>
      <pubDate>Fri, 14 May 2021 03:24:04 +0000</pubDate>
      <link>https://dev.to/wolde_ai/what-is-execution-context-3dkb</link>
      <guid>https://dev.to/wolde_ai/what-is-execution-context-3dkb</guid>
      <description>&lt;p&gt;Things to know or be aware of before diving into execution context.&lt;/p&gt;

&lt;p&gt;JavaScript is the language of the browsers. It has the following characteristics:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript is a single thread language. This means that javaScript engine reads and runs the code one line at a time. And it reads the code from top to bottom and from left to right just like how you read a book in English.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript is synchronous for the most part. This means that it works in sequence. It waits for each line to run and complete before it can move on to the next.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these in mind let’s get into execution context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is execution context?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Execution context is a conceptual description of the environment in which codes are run, read and executed by JavaScript engine. It comprise of memory &amp;amp; the thread of execution. There are three types of execution context. These are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Global execution context&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the default or base execution context when the file loads in the browser. There is only one global context and all the codes outside of the functions within are in the global context. It is within the window object.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Function execution context&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the execution context created when functions are invoked or called upon during the execution phase.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Eval execution context&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the execution context created inside eval functions.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;How is the execution context created?&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;The execution context is created in two phases. These are the creation and execution phase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Creation phase&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During the creation phase the Js engine only reads the code and sets up the variable environment, lexical environment and the value of this(keyword) as it goes through the thread of execution.&lt;/p&gt;

&lt;p&gt;During this phase the following happens:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It parses the code line by line &amp;amp; identifies variable and function declarations&lt;/li&gt;
&lt;li&gt;It stores the variable and function declaration identifiers in live memory&lt;/li&gt;
&lt;li&gt;If the variable is declared with var it will be assigned the value of undefined and function declaration will be assigned function definition&lt;/li&gt;
&lt;li&gt;If the variable is declared with let and const then it won’t get assigned any value but will be stored in live memory/variable environment &lt;/li&gt;
&lt;li&gt;If the function gets invoked or called it will create a local execution context in which it goes through the same process&lt;/li&gt;
&lt;li&gt;The value of this(keyword) gets assigned
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;totalDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;26.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runningMiles&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runningDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;runningDistance&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runnerName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Denis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the JS engine parses the code line by line and stores the variable identifiers totalDistance &amp;amp; runnerName as well as function runningMiles in live memory. This is what results in hoisting. A situation in which &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the variable and function declarations are put into memory during the compile phase, but stay exactly where you typed them in your code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It then assigns totalDistance the value of undefined since it was declared with var. And function definition was assigned to function runningMiles while variable runnerName is left uninitialized during creation or compiling phase. This is because variables declared with let and const don't get assigned values or get initialized until the execution phase. That is the reason why we are able to access or reference variable declaration with var &amp;amp; function declarations before initialization or execution.&lt;/p&gt;

&lt;p&gt;The variable runnerName was declared with const so does not have a value assigned to it during this phase.The variable runnerName will only be initialized in execution phase unlike totalDistance that was declared with var. This is why if we try to access it, Js will throw the following error.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TvShU-UN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fry0dcfbe16x5dpm5ebd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TvShU-UN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fry0dcfbe16x5dpm5ebd.png" alt="Alt Text"&gt;&lt;/a&gt;This means you can't access runnerName or any variable declared with either let or const before JS engine evaluates it at the line it was declared. This is what is called "Temporal Dead Zone". &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;let variables cannot be read/written until they have been fully initialized, which happens when they are declared (if no initial value is specified on declaration, the variable is initialized with a value of undefined). Accessing the variable before the initialization results in a ReferenceError.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IujNISC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll4kbfl3jze391ah1eoi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IujNISC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll4kbfl3jze391ah1eoi.png" alt="Alt Text"&gt;&lt;/a&gt;The JS engine did not get inside the function because it was not invoked or called. As a result local execution context was not created which means the code is only being run in the Global execution context as you can see above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Execution phase&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In execution phase Js engine execute the code line by line assigning values to variables and executing function calls. &lt;/p&gt;

&lt;p&gt;During this phase the following happens:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Js engine will look for the value of variables inside the variable environment &amp;amp; then the lexical environment up in the scope chain and resolve them&lt;/li&gt;
&lt;li&gt;When it gets to a line where a  function is invoked it creates a local execution context for that function &amp;amp; that function gets pushed onto the call stack &lt;/li&gt;
&lt;li&gt;It then gets inside the local function and starts executing the code line by line&lt;/li&gt;
&lt;li&gt;If it finds another call to a function, it will pause on that line &amp;amp; create a local execution context for that function &amp;amp; that function gets pushed up the call stack&lt;/li&gt;
&lt;li&gt;If there is no other function called inside that local context it’s currently in, then it will go ahead &amp;amp; execute all the code inside the function on top of the call stack first and keep going down until it gets to the global context at the bottom. So it executes with last one in first order.
&lt;/li&gt;
&lt;li&gt;The function gets executed and resolved with a return value and get popped off the call stack&lt;/li&gt;
&lt;li&gt;If the return is not written explicitly then it will return undefined for the function&lt;/li&gt;
&lt;li&gt;And the JS engine goes back where it left off  and execute the rest of the codes in the  local context it is in&lt;/li&gt;
&lt;li&gt;It keeps the process down the call stack until all codes are executed and resolved including the ones in the global context&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is what happens in the execution phase using the same example above.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v9VZ3m-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6d8p1jy9layfbg0663o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9VZ3m-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6d8p1jy9layfbg0663o.png" alt="Alt Text"&gt;&lt;/a&gt;Js engine executed the code line by line &amp;amp; resolved the values of variable identifiers. &lt;/p&gt;

&lt;p&gt;Let's see what happens when the function above is invoked or called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;totalDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;26.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runningMiles&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runningDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;runningDistance&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runnerName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Denis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;runningMiles&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;u&gt;Creation phase&lt;/u&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgOO2HB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppdde9il30ac1lbeljt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgOO2HB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppdde9il30ac1lbeljt2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the creation phase the JS engine will parse the code line by line. It will store variables totalDistance, runningMiles and runnerName in the live Memory. The JS engine will assign undefined for totalDistance. And assign function definition for runningMiles while runnerName &amp;amp; output are left uninitialized. But when the JS engine reaches output it will pause where it is at and create a local execution context. It will then store variables age &amp;amp; runningDistance in the local memory. Both will not get initialized with a value during this phase.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Execution phase&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcZ6ff5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2hvwmhra8bsa9ei7c7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcZ6ff5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2hvwmhra8bsa9ei7c7s.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The Js engine will then start evaluating variables and resolving the variables age &amp;amp; runningDistance in the local memory. It will then execute the function runningMiles and return the runningDistance value. Once the Js engine resolves the function runningMiles &amp;amp; returns the runningDistance value, and the local context of runningMiles gets popped off the call stack. It will then continue where it left off. It will finally resolve the value of output by storing the returned value in it.&lt;/p&gt;

&lt;p&gt;Did I miss anything? Please let me know what you think. Feedbacks &amp;amp; questions are all welcome. I would love to hear your thoughts, discuss &amp;amp; exchange ideas. If you would love more writing like this please follow my blog or me on twitter &lt;a class="mentioned-user" href="https://dev.to/wolde_ai"&gt;@wolde_ai&lt;/a&gt;
 .✌🏾😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>writing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Journey to the real world by cloning DEV.to backend server(part 5)</title>
      <author>Harsh Mangalam</author>
      <pubDate>Fri, 14 May 2021 02:38:56 +0000</pubDate>
      <link>https://dev.to/harshmangalam/journey-to-the-real-world-by-cloning-dev-to-backend-server-part-5-4aad</link>
      <guid>https://dev.to/harshmangalam/journey-to-the-real-world-by-cloning-dev-to-backend-server-part-5-4aad</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In the last post we have created our first model user model and started our development server.&lt;br&gt;
In this post we will work on jwt authentication using jsonwebtoken package.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#authentication-workflow-in-our-platform"&gt;
  &lt;/a&gt;
  Authentication workflow in our platform
&lt;/h2&gt;

&lt;p&gt;when users will visit our platform first time they do not have any token so they will be unauthenticated and unauthorized.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Simple term UnAuthenticated user means they have not loggedin in our platform and UnAuthorized means they may or may not be login but definitely not  allowed for specific pieces of actions.&lt;br&gt;
For example: In our Platform any one can read posts no required for login but to create post they must have to login. If someone is moderator then it have some specific role for that. Normal reader cannot make an action which are specially designed for moderators.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When user will login then from backed they will get a jwt token. Then from next request they will provide that jwt token in Authentication header and backend will decode that and recognise who is the user in this token.&lt;/p&gt;

&lt;p&gt;We knew that HTTP is stateless they have no idea how to manage user session because our backend is on localhost:4000 nodejs server and frontend may be on localhost:3000  React  client it will not possible for http to remember user. &lt;br&gt;
Hence we have a way to handle this kind of problems&lt;/p&gt;

&lt;p&gt;We will generate a jwt token for every loggedin user and will send to him they will put this token in localstorage and for further request they will send the token inside http headers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can found more about jwt &lt;a href="https://jwt.io/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setup-schema-and-resolvers-for-authentication"&gt;
  &lt;/a&gt;
  Setup schema and resolvers for authentication
&lt;/h3&gt;

&lt;p&gt;create some directory to chunk our logic in different file and folder&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create &lt;code&gt;graphql&lt;/code&gt; dir in &lt;code&gt;src/&lt;/code&gt; dir&lt;/li&gt;
&lt;li&gt;create &lt;code&gt;util&lt;/code&gt; dir in &lt;code&gt;src/&lt;/code&gt; dir&lt;/li&gt;
&lt;li&gt;create dir &lt;code&gt;typeDefs&lt;/code&gt; in &lt;code&gt;graphql&lt;/code&gt; dir&lt;/li&gt;
&lt;li&gt;create dir &lt;code&gt;resolvers&lt;/code&gt; in &lt;code&gt;graphql&lt;/code&gt; dir&lt;/li&gt;
&lt;li&gt;create file &lt;code&gt;index.js&lt;/code&gt; in &lt;code&gt;typeDefs&lt;/code&gt; dir&lt;/li&gt;
&lt;li&gt;create file &lt;code&gt;index.js&lt;/code&gt; in &lt;code&gt;reslovers&lt;/code&gt; dir&lt;/li&gt;
&lt;li&gt;create file &lt;code&gt;auth.util.js&lt;/code&gt; in &lt;code&gt;util&lt;/code&gt; dir&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;when we will proceed in this series then we will see how we will break schema and resolvers in multiple file with ease&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;devblog_server/src/typeDefs/index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This file will contain all the query, mutation and subscription .&lt;/p&gt;

&lt;p&gt;For authentication we will use &lt;code&gt;jsonwebtoken&lt;/code&gt; and for password hashing we will use &lt;code&gt;bcrypt&lt;/code&gt; library which is freely available in npm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pnpm add jsonwebtoken bcrypt

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets create authentication query and mutation&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/graphql/typeDefs/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-server-express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  type AuthResponse {
    token: String!
    user: User!
  }

   type Mutation {
    login(email: String!, password: String): AuthResponse!
    register(name: String!, email: String!, password: String!): AuthResponse!
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now create add resolvers for above query &lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/graphql/resolvers/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserInputError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AuthenticationError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-server-errors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;generateHash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;generateUsername&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;matchPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;generateJwtToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../utils/auth.util&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="na"&gt;Mutation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// login user&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserInputError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USER_NOT_FOUND&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Account with this email does not found create new one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchPass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;matchPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;matchPass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserInputError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCORRECT_PASSWORD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password is incorrect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateJwtToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// create new account&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkEmail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserInputError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;EMAIL_ALREADY_EXISTS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Account with this email is already exists &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;generateHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateJwtToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;above we have implemented registration and login for users when we will proceed in series i will show you how easily we will create admin user from environment variable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/util/auth.util.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bcrypt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jsonwebtoken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateUsername&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9990&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hashPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasMatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hashPassword&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hasMatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateJwtToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JWT_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;expiresIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10h&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decodeJwtToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JWT_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is utility file which contain utility function related to authentication.&lt;/p&gt;

&lt;p&gt;Last thing to do is update &lt;code&gt;src/server.js&lt;/code&gt; by typeDefs and resolvers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typeDefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./graphql/typeDefs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./graphql/resolvers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;....&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save all the stuff and go to graphql playground at &lt;code&gt;localhost:4000/graphql&lt;/code&gt; and start hacking around authentication&lt;/p&gt;

&lt;p&gt;register query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mutation {
  register(name:"Harsh Mangalam",email:"harshdev@dev.com",password:"123456"){
    token
   user {
    id
    name
    username
    createdAt
    role

  } 
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give you result like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "data": {
    "register": {
      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEwLCJpYXQiOjE2MjA5NTk1MjQsImV4cCI6MTYyMDk5NTUyNH0.xmdJYVpZUxcUhr5CBQwR1C7yLjKSEvAmjt7gr2sjsNw",
      "user": {
        "id": "10",
        "name": "Harsh Mangalam",
        "username": "harshdev5301",
        "createdAt": "1620959524586",
        "role": "USER"
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;login query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mutation {
  login(email:"harshdev@dev.com",password:"123456"){
    token
   user {
    id
    name
    username
    createdAt
    role

  } 
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;login query result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "data": {
    "login": {
      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEwLCJpYXQiOjE2MjA5NTk2MjcsImV4cCI6MTYyMDk5NTYyN30.59OHuy3L5F_0Oes-3kYQwNcsl9vJnTXx-63h0aiVHvc",
      "user": {
        "id": "10",
        "name": "Harsh Mangalam",
        "username": "harshdev5301",
        "createdAt": "1620959524586",
        "role": "USER"
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In our next post we will break our graphql schema and resolvers into chunk so that development will easier and we will work more on user and profile sections.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>node</category>
      <category>apollo</category>
      <category>express</category>
      <category>prisma</category>
    </item>
  </channel>
</rss>
