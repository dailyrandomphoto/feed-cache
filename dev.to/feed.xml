<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Extending third-party APIs in different languages</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 07 Nov 2021 17:58:23 +0000</pubDate>
      <link>https://dev.to/nfrankel/extending-third-party-apis-in-different-languages-4fii</link>
      <guid>https://dev.to/nfrankel/extending-third-party-apis-in-different-languages-4fii</guid>
      <description>&lt;p&gt;The need for shorter and shorter Time-To-Market requires to integrate more and more third-party libraries. There's no time for the &lt;a href="https://en.wikipedia.org/wiki/Not_invented_here"&gt;NIH syndrom&lt;/a&gt; anymore if it ever was. While most of the time, the library's API is ready to use, it happens that one needs to "adapt" it to the codebase sometimes. How easy the adaptation is depends a lot on the language.&lt;/p&gt;

&lt;p&gt;For example, in the JVM, there are a couple of Reactive-Programming libraries: RxJava, Project Reactor, Mutiny, and coroutines. You might need a library that uses types of one library, but you based your project on another.&lt;/p&gt;

&lt;p&gt;In this post, I'd like to describe how to add new behavior to an existing object/type. I won't use any reactive type to make it more general but add &lt;code&gt;toTitleCase()&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt;. When it exists, inheritance is &lt;strong&gt;not&lt;/strong&gt; a solution as it creates a new type.&lt;/p&gt;

&lt;p&gt;I apologize in advance that the below implementations are pretty simple: they are meant to highlight my point, not to handle corner cases, &lt;em&gt;e.g.&lt;/em&gt;, empty strings, non-UTF 8, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is an interpreted dynamically- and weakly-typed language, which runs the World Wide Web - until WASM takes over? As far as I know, its design is unique, as it's prototype-based. A prototype is a mold for new "instances" of that type.&lt;/p&gt;

&lt;p&gt;You can easily add properties, either state or behavior, to a prototype.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toTitleCase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toTitleCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\w\S&lt;/span&gt;&lt;span class="sr"&gt;*/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OncE upOn a tImE in thE WEst&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toTitleCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that objects created from this prototype &lt;em&gt;after&lt;/em&gt; the call to &lt;code&gt;defineProperty&lt;/code&gt; will offer the new property; objects created &lt;em&gt;before&lt;/em&gt; won't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ruby"&gt;
  &lt;/a&gt;
  Ruby
&lt;/h2&gt;

&lt;p&gt;Ruby is an interpreted dynamically- and strongly-typed language. While not as popular as it once was with the Ruby On Rails framework, I still use it with the Jekyll system that powers this blog.&lt;/p&gt;

&lt;p&gt;Adding methods or attributes to an existing class is pretty standard in the Ruby ecosystem. I found two mechanisms to add a method to an existing type in Ruby:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="https://apidock.com/ruby/Module/class_eval"&gt;class_eval&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Evaluates the string or block in the context of mod, except that when a block is given, constant/class variable lookup is not affected. This can be used to add methods to a class&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just implement the method on the existing class.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the code for the second approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_camel_case&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\w\S*/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"OncE upOn a tImE in thE WEst"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_camel_case&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h2&gt;

&lt;p&gt;Python is an interpreted dynamically- and strongly-typed language. I guess every developer has heard of Python nowadays.&lt;/p&gt;

&lt;p&gt;Python allows you to add functions to existing types - with limitations. &lt;a href="https://www.online-python.com/yv52IK4Mux"&gt;Let's try&lt;/a&gt; with the &lt;code&gt;str&lt;/code&gt; built-in type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_title_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'\w\S*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'to_title_case'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_title_case&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OncE upOn a tImE in thE WEst"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_title_case&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, the above code fails during execution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "&amp;lt;string&amp;gt;", line 9, in &amp;lt;module&amp;gt;
TypeError: can't set attributes of built-in/extension type 'str'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because &lt;code&gt;str&lt;/code&gt; is a &lt;em&gt;built-in&lt;/em&gt; type, we cannot dynamically add behavior. We can update &lt;a href="https://www.online-python.com/w4G0We7EYh"&gt;the code&lt;/a&gt; to cope with this limitation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_title_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'\w\S*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'to_title_case'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_title_case&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OncE upOn a tImE in thE WEst"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;to_title_case&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It now becomes possible to extend &lt;code&gt;String&lt;/code&gt;, because it's a class we have created. Of course, it defeats the initial purpose: we had to extend &lt;code&gt;str&lt;/code&gt; in the first place. Hence, it works with third-party libraries.&lt;/p&gt;

&lt;p&gt;With interpreted languages, it's reasonably easy to add behavior to types. Yet, Python already touches the limits because the built-in types are implemented in C.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h2&gt;

&lt;p&gt;Java is a compiled statically- and strongly-typed language that runs on the JVM. Its static nature makes it impossible to add behavior to a type.&lt;/p&gt;

&lt;p&gt;The workaround is to use &lt;code&gt;static&lt;/code&gt; methods. If you've been a Java developer for a long time, I believe you probably have seen custom &lt;code&gt;StringUtils&lt;/code&gt; and &lt;code&gt;DateUtils&lt;/code&gt; classes early in your career. These classes look something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringUtils&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toCamelCase&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// The implementation is not relevant&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Other string transformations here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope that by now, using Apache Commons and Guava have replaced all those classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;WordUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;capitalize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OncE upOn a tImE in thE WEst"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both cases, &lt;em&gt;the usage of static methods prevents fluent API usage&lt;/em&gt; and thus impairs developer experience. But other JVM languages do offer exciting alternatives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scala"&gt;
  &lt;/a&gt;
  Scala
&lt;/h2&gt;

&lt;p&gt;Like Java, Scala is a compiled, statically- and strongly-typed language that runs on the JVM. It was initially designed to bridge between Object-Oriented Programming and Functional Programming. Scala provides many powerful features. Among them, &lt;em&gt;implicit&lt;/em&gt; classes allow adding behavior and state to an existing class. &lt;a href="https://scastie.scala-lang.org/razUhHKRRcqamn9qlA0mhw"&gt;Here&lt;/a&gt; is how to add the &lt;code&gt;toCamelCase()&lt;/code&gt; function to &lt;code&gt;String&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Utils.StringExtensions&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Utils&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringExtensions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thiz&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toCamelCase&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\\w\\S*"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;replaceAllIn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;thiz&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;group&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="py"&gt;toLowerCase&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="py"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OncE upOn a tImE in thE WEst"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;toCamelCase&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Though I dabbled a bit in Scala, I was never a fan. As a developer, I've always stated that a big part of my job was to make &lt;em&gt;implicit&lt;/em&gt; requirements &lt;em&gt;explicit&lt;/em&gt;. Thus, I frowned upon the on-purpose usage of the &lt;code&gt;implicit&lt;/code&gt; keyword. Interestingly enough, it seems that I was not alone. Scala 3 keeps the &lt;a href="https://scastie.scala-lang.org/18abIFMKSvWiz8gpbVx2gg"&gt;same capability&lt;/a&gt; using a more appropriate syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="nf"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thiz&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toCamelCase&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\\w\\S*"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;replaceAllIn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;thiz&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;group&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="py"&gt;toLowerCase&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="py"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;em&gt;bytecode&lt;/em&gt; is somewhat similar to Java's &lt;em&gt;static&lt;/em&gt; method approach in both cases. Yet, API usage is fluent, as you can chain method calls one after another.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kotlin"&gt;
  &lt;/a&gt;
  Kotlin
&lt;/h2&gt;

&lt;p&gt;Like Java and Scala, Kotlin is a compiled, statically- and strongly-typed language that runs on the JVM. Several other languages, including Scala, inspired its design.&lt;/p&gt;

&lt;p&gt;My opinion is that Scala is more powerful than Kotlin, but the trade-off is an additional cognitive load. On the opposite, Kotlin has a lightweight approach, more pragmatic. Here's the &lt;a href="https://pl.kotl.in/b67HIw06t"&gt;Kotlin version&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toCamelCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\\w\\S*"&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toRegex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;replaceFirstChar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;titlecase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Locale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefault&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OncE upOn a tImE in thE WEst"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toCamelCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you wonder why the Kotlin code is more verbose than the Scala one despite my earlier claim, here are two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I don't know Scala well enough, so I didn't manage corner cases (empty capture, etc.), but Kotlin leaves you no choice&lt;/li&gt;
&lt;li&gt;The Kotlin team removed the &lt;code&gt;capitalize()&lt;/code&gt; function from the &lt;code&gt;stdlib&lt;/code&gt; in Kotlin 1.5&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h2&gt;

&lt;p&gt;Last but not least in our list, Rust is a compiled language, statically and strongly typed. It was initially designed to produce native binaries. Yet, with the relevant configuration, it also allows to generate Wasm. In case you're interested, I've taken link:/focus/start-rust/[a couple of notes] while learning the language.&lt;/p&gt;

&lt;p&gt;Interestingly enough, though statically-typed, Rust also allows extending third-party APIs as &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=8d1daecd7bd46d6352c131cbf8186839"&gt;the following code shows&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;StringExt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                  &lt;span class="c"&gt;// 1&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;to_camel_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;StringExt&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                           &lt;span class="c"&gt;// 2&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;to_camel_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;w&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;S*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="nf"&gt;.captures_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.to_lowercase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="nf"&gt;.to_owned&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"OncE upOn a tImE in thE WEst"&lt;/span&gt;&lt;span class="nf"&gt;.to_camel_case&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create the abstraction to hold the function reference. It's known as a &lt;em&gt;trait&lt;/em&gt; in Rust.&lt;/li&gt;
&lt;li&gt;Implement the trait for an existing structure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Trait implementation has one limitation: our code must declare at least one of either the trait or the structure. You cannot implement an existing trait for an existing structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Before writing this post, I thought that interpreted languages would allow extending external APIs, while compiled languages wouldn't - with Kotlin the exception. After gathering the material, my understanding has changed drastically.&lt;/p&gt;

&lt;p&gt;I realized that all mainstream languages provide such a feature. While I didn't include a C# section, it also does. My conclusion is sad, as Java is the only language that doesn't offer anything in this regard.&lt;/p&gt;

&lt;p&gt;I've regularly stated that Kotlin's most significant benefit over Java is extension properties/methods. While the Java team continues to add features to the language, it still doesn't offer a developer experience close to any of the above languages. As I've used Java for two decades, I find this conclusion a bit sad, but it's how it is, unfortunately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To go further:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.scala-lang.org/scala3/reference/contextual/extension-methods.html"&gt;Scala 3 language reference: extension methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kotlinlang.org/docs/extensions.html"&gt;Kotlin extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://blog.frankel.ch/extending-third-party-apis/"&gt;A Java Geek&lt;/a&gt; on November 7&lt;sup&gt;th&lt;/sup&gt;, 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>api</category>
      <category>language</category>
      <category>design</category>
      <category>extension</category>
    </item>
    <item>
      <title>What You Must Do Before Starting A Programming Project</title>
      <author>Aimen Zairi</author>
      <pubDate>Sun, 07 Nov 2021 17:38:27 +0000</pubDate>
      <link>https://dev.to/zairiaimendev/what-you-must-do-before-starting-a-programming-project-19p5</link>
      <guid>https://dev.to/zairiaimendev/what-you-must-do-before-starting-a-programming-project-19p5</guid>
      <description>&lt;p&gt;We’ve all been there, you started to code your next million dollar idea and then you find yourself needing to add functionalities you haven’t thought of, classes that might not have been needed and even working with the wrong database for this project needs.&lt;/p&gt;

&lt;p&gt;That’s a very big problem that not only beginners face but even moderately experienced developers struggle with. That problem is skipping the analysis and conception phase of a project.&lt;/p&gt;

&lt;p&gt;Though planning a project may seem like a daunting task at first but having a guideline to follow is so much better than just blindly coding and hoping that the project comes out like the idea you have planned in mind.&lt;br&gt;
What To Do ?&lt;/p&gt;

&lt;p&gt;Plan your projects ahead, it is simple right ?, maybe.&lt;/p&gt;

&lt;p&gt;The best way of doing it is writing an SRS ( Software Requirement Specification ) Document.&lt;/p&gt;

&lt;p&gt;Writing that document is a world of its own but I’ll borrow many elements from it.&lt;/p&gt;

&lt;p&gt;We’ll be using UML a lot so if you don’t know it already, it is really necessary for you as a developer if you want to work on big projects. I’m not going to talk about each diagram in detail but you can find some very good explanations of it in YouTube.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-00-have-an-idea"&gt;
  &lt;/a&gt;
  Step 00 : Have an idea
&lt;/h2&gt;

&lt;p&gt;You may already have one, but if you don’t then start searching for a problem that you face in your everyday life.&lt;/p&gt;

&lt;p&gt;This maybe something small that you don’t notice or something big that you think you can’t fix.&lt;/p&gt;

&lt;p&gt;Anyway once you find that problem think how you can fix it using programming.&lt;/p&gt;

&lt;p&gt;Small things like repeating certain commands when creating a new project, so what you do is you create a terminal command of your own that creates the project in a programming language that you choose and executes all the other commands automatically.&lt;/p&gt;

&lt;p&gt;Or having a hard time remembering passwords, so you can create a tool that saves your passwords locally … etc.&lt;/p&gt;

&lt;p&gt;Ideas are always there you just have to find them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-01-analysis"&gt;
  &lt;/a&gt;
  Step 01 : Analysis
&lt;/h2&gt;

&lt;p&gt;What do you want your project to do ?.&lt;/p&gt;

&lt;p&gt;Write down the list of people you think are going to use your app/software/project and the list of actions that they can do in it.&lt;/p&gt;

&lt;p&gt;After that make a “Use-case Diagram“. it is objectively easier to read a diagram than reading a bunch of text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0wKW5Bix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hletzr8efpqccrbuc6l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0wKW5Bix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hletzr8efpqccrbuc6l.png" alt="Use Case Diagram" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to do a use-case description where you fill in the details like the sequence that must happen when the use wants to do this action, the requirements for it and everything in between.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7PA5ZG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/908qxlu9nz4c4h755h81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7PA5ZG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/908qxlu9nz4c4h755h81.png" alt="Use Case Description" width="850" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as i said before reading a diagram is better than reading a bunch of text and that’s where the sequence diagram comes in, but we will talk about it later as it involves database models and controllers.&lt;/p&gt;

&lt;p&gt;So now that you know what your program will do, you have to know what the data will look like so think about the classes that might exist in your system and put them in a class diagram.&lt;/p&gt;

&lt;p&gt;This diagram will help us later when we need to know what tables to have in our database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EuEwLy19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzxtr934fpbz4xm7dago.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EuEwLy19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzxtr934fpbz4xm7dago.png" alt="Class Diagram" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that our analysis step is finished with creating the Use-case and class diagram we jump to our second step The conception phase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-02-conception"&gt;
  &lt;/a&gt;
  Step 02 : Conception
&lt;/h2&gt;

&lt;p&gt;In this phase you go into a little more detail about the functions of your system, in this step we plan the “Code” aspect of our project.&lt;/p&gt;

&lt;p&gt;Use-case description don’t explain how the system works internally and that’s where sequence diagram comes into play. Firstly it is a diagram so it’s “easier” to understand and explains how the components of our system interact with each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVupke3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz9q6eo4devnfwng4fp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVupke3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz9q6eo4devnfwng4fp9.png" alt="Sequence Diagram" width="812" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using this diagram each case will make the coding part way easier knowing what components we need and what elements to use for each step.&lt;/p&gt;

&lt;p&gt;Now that we have our most important diagrams we’ll turn the class diagram into what i call a “Database Diagram” that can be easily implemented in your project.&lt;/p&gt;

&lt;p&gt;With All these done, you can finally jump to the final step and that is implementation.&lt;/p&gt;

&lt;p&gt;PS : In this step you could also make UI Prototypes of how your website will function, but that's out of my scope as I really suck at design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-03-implementation"&gt;
  &lt;/a&gt;
  Step 03 : Implementation
&lt;/h2&gt;

&lt;p&gt;Though if you have written an SRS before you know that we skipped quite a lot of things, but our goal here is not to write an SRS but for us to get our next side project to the finish line like all our other side projects (sarcasm). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-04-supporting-your-fellow-developers"&gt;
  &lt;/a&gt;
  Step 04 : Supporting Your Fellow Developers
&lt;/h2&gt;

&lt;p&gt;I will be doing a video about this with animation and stuff so be ready : &lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC757WHzy1Fv6aMG593fmLjQ"&gt;My YouTube Channel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://zairiaimen.com"&gt;My Personal Blog Where You Can Read this First&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I Really want to see what you think i should cover as I'm lacking ideas but definitely not in motivation to help others.&lt;/p&gt;

&lt;p&gt;Thanks For Reading. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is NFT And Why You Should Pay Attention to It</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Sun, 07 Nov 2021 17:32:19 +0000</pubDate>
      <link>https://dev.to/abstract/what-is-nft-and-why-you-should-pay-attention-to-it-mk9</link>
      <guid>https://dev.to/abstract/what-is-nft-and-why-you-should-pay-attention-to-it-mk9</guid>
      <description>&lt;p&gt;NFT stands for Non-Fungible Token, which means that something can't be exchanged or substituted. In other words, fungible tokens are Dollar, Gold, Bitcoin. Because you can easily change one $10 bill by two $5 bills or by another one $10 bill, the value won't change, and no one will lose anything. However, with Non-Fungible tokens, everything is a little bit harder. You can't just take the "Mona Lisa" and exchange it by its fabrication. The value that holds the original "Mona Lisa" is much bigger than the fake "Mona Lisa" value. Actually, you can call NFT every picture Art, Music, 3D Model, Cover of this article and even first Twitter. I'm not joking; the founder of Twitter - Jack Dorsey, sold his photo of the first tweet for over $2,9M. The picture by Mike Winkelmann is called "Everydays: The First 5000 Days" and was sold for $69M. Can you dream it? Also, a project contains exactly 10,000 CryptoPanks Characters, and the lowest price for one NFT is 20ETH, and the price of the rarest characters can be up to $7.57M.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-even-you-can-do-it-right%C2%A0now"&gt;
  &lt;/a&gt;
  Why Even You Can Do it Right Now
&lt;/h2&gt;

&lt;p&gt;You may say that it's the Co-Founder of Twitter and you can't do the same because you aren't a famous person or a great painter, and I'll prove that you're wrong.&lt;br&gt;
You can go to the most popular platform OpenSea.io and see that there're thousands of sketches that LITERALLY EVERYONE in the world can draw and sell for 0,1ETH or even for a greater price. For instance, a GIF animation called "THE SUN" was sold for 1ETH. Or you can take a look at this "Unnamed Foal", and as you might have noticed, the author of it didn't even care about the title, and when I say the author didn't care, then NFT Marketplace is the author best place for you to notice it. Personally, I have seen that someone was selling his NFT without even a nickname. There are many other examples like these, and I want you to see them yourself. Just start making something from scratch, and in the end, it will bring you what you want.&lt;br&gt;
if you want to make your own NFT and sell it for the price that you want then nothing can stop you and everything that you need is just to do it&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-trend-of%C2%A0market"&gt;
  &lt;/a&gt;
  What is The Trend of Market
&lt;/h2&gt;

&lt;p&gt;Except for "CryptoPanks", which I talked about earlier, there're many other projects with a similar idea. I mean that not only CryptoPunks has the idea of making thousands of characters that are almost similar, but one may have a blue shirt, and the other may have red.&lt;br&gt;
CryptoKitties is a prime example of this; it also has many Kitties different from each other. And by this, I say to you that everyone can make their own collection of characters or something else, and probably it will be popular. Because if you go to the NFT Marketplace, you will instantly notice that almost everyone want to build their own universe with their own heroes and weapons&lt;br&gt;
Try to make your own world with your own Rules and Characters. Remember it doesn't need to be perfect&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nft-main%C2%A0features"&gt;
  &lt;/a&gt;
  NFT Main Features
&lt;/h2&gt;

&lt;p&gt;What is so unusual in NFT, and why everyone is talking about it? The key difference between some NFT Marketplaces and platforms like Shutterstock is that on Shutterstock, you can buy the same photo or illustration millions of times; However, You cannot do it with NFT because it has only one copy. NFT exactly digitizes usual art and allow you to draw and buy it from any place in the world.&lt;br&gt;
You may think that it probably has many theft cases if it's so easy to buy art. But NFT has one of the greatest features called Smart Contract that works on Etherium (not only) and bring its own blockchain world without any robbery or something like that. You conclude a contract that no one can't break, and no one can cheat.&lt;br&gt;
It builds its own world without any theft or something like that. And allows you to use it in any place in the world&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-actually-need-to-draw%C2%A0it"&gt;
  &lt;/a&gt;
  You Don't Actually Need to Draw It
&lt;/h2&gt;

&lt;p&gt;I said you need to pay attention and integrate into this NFT world, but not actually make NFT itself. If you don't understand me, let me explain to you.&lt;br&gt;
You can participate in auctions and buy NFTs, and then you can easily sell them for a greater price. You don't even need to sell it because sometimes exactly this NFT can be one of the rarest, and you'll be the only holder of it.&lt;br&gt;
Also, by integrating into this sphere, I mean you can even build your own NFT Marketplace that will be better than others. If you think that it's useless and no one is actually doing it, then I can say that nowadays, almost every company wants to open its own NFT Marketplace. For example, look at Instagram, Binance, Crypto.com, Enjin Marketplace and many others.&lt;br&gt;
It's a great opportunity to start doing something with NFT right now. And if you think that it's late, then you're absolutely wrong. Because it's only the start&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of%C2%A0nft"&gt;
  &lt;/a&gt;
  The Future of NFT
&lt;/h2&gt;

&lt;p&gt;NFT is a part of a new era, the era of web 3.0, where you can do what you want a where you want in the global network. Where you can easily buy stuff without any thoughts about fraud, it's stupidly to ignore this new world that is only in the state of borning. I'm currently building my own NFT Marketplace, and my sister has drawn me this cover for my article in this too.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My final thought is that it will only grow and grow and will make our world only better. I hope you enjoyed this article; if you have some advice or just wanna talk then add me at Discord: MarkFusion#2903 &lt;/p&gt;

</description>
      <category>news</category>
      <category>programming</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>A Git Guide for Beginners</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Sun, 07 Nov 2021 17:26:27 +0000</pubDate>
      <link>https://dev.to/abstract/a-git-guide-for-beginners-2amb</link>
      <guid>https://dev.to/abstract/a-git-guide-for-beginners-2amb</guid>
      <description>

&lt;p&gt;In this article, I'll tell you about VCS (Version Control System), about Git itself, why you should learn it, and other cool stuff that even advanced users among you could not know. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is%C2%A0vcs"&gt;
  &lt;/a&gt;
  What is VCS?
&lt;/h2&gt;

&lt;p&gt;In a nutshell, Version Control System is a system that records changes to a file or a set of files over time and allows you to return later to a specific version of your project. It means that even if you or your co-worker made a mistake you can easily return to the latest version of your project and start from there again. It makes everything easier and gives you chances to experiment&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of%C2%A0vcs"&gt;
  &lt;/a&gt;
  Types of VCS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Local (RCS)&lt;/li&gt;
&lt;li&gt;Centralized (CVS, Subversion)&lt;/li&gt;
&lt;li&gt;Distributed (Git, Mercurial, BitKeeper)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#local"&gt;
  &lt;/a&gt;
  Local
&lt;/h3&gt;

&lt;p&gt;Local VCS deployed on one machine and works as a backup of a specific machine. Pictures or diffs (difference between two versions of your project) do not go beyond a certain computer. Just like you made a copy of the folder on your computer.&lt;br&gt;
Local VCSCentralized&lt;br&gt;
The centralized VCS is installed on a local server within the same network. And it can store snapshots or diffs from all computers from this network on the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#centralized-vcsdistributed"&gt;
  &lt;/a&gt;
  Centralized VCSDistributed
&lt;/h3&gt;

&lt;p&gt;And distributed VCS is a vivid example of GitHub, when from anywhere in the world via the Internet you can store your versions in one cloud storage regardless of what network you are in or from what computer. Also, it allows copies to be moved not only from parent to storage and back but also between different parents.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distributed-vcsadvantages-of%C2%A0git"&gt;
  &lt;/a&gt;
  Distributed VCSAdvantages of GIT
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Speed.&lt;/li&gt;
&lt;li&gt;Simple design.&lt;/li&gt;
&lt;li&gt;Strong support for non-linear development (thousands of parallel branches).&lt;/li&gt;
&lt;li&gt;Fully distributed.&lt;/li&gt;
&lt;li&gt;Able to handle large projects like the Linux kernel efficiently (speed and data size).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-ideas"&gt;
  &lt;/a&gt;
  Basic ideas
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Versions are snapshots, not diff.&lt;/li&gt;
&lt;li&gt;Almost all operations are performed locally&lt;/li&gt;
&lt;li&gt;Integrity. The SHA-1 hash is calculated for everything.&lt;/li&gt;
&lt;li&gt;After adding data to the git, it is hard (but possible) to lose them.&lt;/li&gt;
&lt;li&gt;Full git support is available only in the terminal.&lt;/li&gt;
&lt;li&gt;All files can be in one of the following states - committed, modified, staged&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#differences-between-snapshots-and%C2%A0diffs"&gt;
  &lt;/a&gt;
  Differences Between Snapshots and Diffs
&lt;/h2&gt;

&lt;p&gt;SnapshotsDiffsEach project file in Git/Mercurial indexing process can have one of the three possible states:&lt;br&gt;
modified, but not staged: This is when a project file is modified by the user, but Git/Mercurial has no track of the file changes at the moment. If the file is lost or removed unexpectedly, then Git cannot recover the file.&lt;br&gt;
staged for commit to the repository: When a file is modified it can be added to the Git staging area to be later committed permanently to the repository. The staging area is a file, generally contained in the project's repository ( directory), that stores information about what will go into the next commit to the repository. The staging area is also sometimes referred to as the index. .git&lt;br&gt;
committed to the repository: Once the staged files are committed to the repository, they become a permanent part of it and can be later extracted (checked out) for review or further development.&lt;br&gt;
These three file states comprise an important integral part of Git and Mercurial. The following figure illustrates the three file states.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I tried to describe almost all aspects of VCS and GIT and why you should pay attention to them, the next part will be with the smaller features and I hope will be interesting.&lt;br&gt;
You can add me at Discord: MarkFusion#2903&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Playing with Django Model Objects - CheatSheet</title>
      <author>Priyanshu Panwar</author>
      <pubDate>Sun, 07 Nov 2021 17:18:40 +0000</pubDate>
      <link>https://dev.to/priyanshupanwar/playing-with-django-model-objects-cheatsheet-g6k</link>
      <guid>https://dev.to/priyanshupanwar/playing-with-django-model-objects-cheatsheet-g6k</guid>
      <description>&lt;p&gt;One must know how to play with Django models in their views in order to create efficient and short functions.&lt;/p&gt;

&lt;p&gt;Let's take a model for example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Teacher(models.Model):
    name = models.CharField(max_length=100)

class Student(models.Model):
    name = models.CharField(max_length=100)
    roll = models.CharField(max_length=100)
    mentor = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    reg_date = models.DateTimeField(auto_add_now=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extracting-all-objects-of-a-model"&gt;
  &lt;/a&gt;
  Extracting all objects of a model
&lt;/h3&gt;

&lt;p&gt;Let's extract all the students.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;students = Student.objects.all()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extracting-a-student-by-id"&gt;
  &lt;/a&gt;
  Extracting a student by ID
&lt;/h3&gt;

&lt;p&gt;ID is the primary key in every model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.shortcuts import get_object_or_404

def my_view(request):
    obj = get_object_or_404(MyModel, pk=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or there is another way to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stud = Student.objects.get(pk=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last one returns a error in case a student doesn't exist with the following id.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering-the-objects"&gt;
  &lt;/a&gt;
  Filtering the objects
&lt;/h3&gt;

&lt;p&gt;Simple filtering can be done with equating like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;studs = Student.objects.filter(name='Ram Kapoor')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return the list of students whose name is Ram Kapoor.&lt;br&gt;
We can also refer to the details of an attribute with the symbol &lt;code&gt;__&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stud_2006 = Student.objects.filter(reg_date__year=2006)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return all the students registered in 2006.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stud_p = Student.objects.filter(name__startswith='P')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return all the students whose names start with 'P'.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-q-very-powerful"&gt;
  &lt;/a&gt;
  Using Q() - Very Powerful
&lt;/h3&gt;

&lt;p&gt;This is used to add many filters in a single filter using | (or), &amp;amp; (and).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stud = Student.objects.filter(Q(name__startswith='P') | Q(reg_date__year=2006))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return both the students whose names start with 'P' or who are registered in year 2006.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  THANK YOU
&lt;/h2&gt;

&lt;p&gt;Find me on &lt;a href="http://priyanshu-panwar.github.io/"&gt;Priyanshu Panwar&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/priyanshu-panwar"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Learning Svelte </title>
      <author>Alessandro</author>
      <pubDate>Sun, 07 Nov 2021 17:10:01 +0000</pubDate>
      <link>https://dev.to/alessandrogiuzio/learning-svelte-2enb</link>
      <guid>https://dev.to/alessandrogiuzio/learning-svelte-2enb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#input-data-binding"&gt;
  &lt;/a&gt;
  Input Data Binding
&lt;/h1&gt;

&lt;p&gt;Hello friends, this is my third blog post ever, and to tell the truth it's quite difficult for me keeping this challenge up and running, the big problem, i think it's that my mother language it's italian but every day i speak spanish!&lt;/p&gt;

&lt;p&gt;But i am here, and i need to do it, it's help me on my journey to become web developer one day soon.&lt;/p&gt;

&lt;p&gt;This is post it's very short, i will publish another one about Data Binding, next week to complete my "lesson".&lt;/p&gt;

&lt;p&gt;As you now, Svelte is a “radical new approach to building user interfaces”, according to the official documentation. &lt;/p&gt;

&lt;p&gt;In practice, Svelte is quite similar to JavaScript frameworks like React, Vue etc.&lt;/p&gt;

&lt;p&gt;Today i will write about Input data binding.&lt;/p&gt;

&lt;p&gt;Input bindings are essentially just a way you can keep variables inside your components in sync with input fields.&lt;/p&gt;

&lt;p&gt;They are very handy when design forms  or having any form of data entry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bind:property&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with the most common form of binding you’ll often use, which you can apply using bind:value. You take a variable from the component state, and you bind it to a form field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;script&amp;gt;

 Let name = “Alessandro”

 &amp;lt;/script&amp;gt;

 &amp;lt;p&amp;gt; Your name is: {name}

 &amp;lt;input bind:value = {name}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if name changes the input field will update its value. And the opposite is true, as well: if the form is updated by the user, the name variable value changes.&lt;/p&gt;

&lt;p&gt;We successfully binded name variable to the input field, when the user makes change to the input field it is going to update the data within your components, this is the most basic example .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bind:value&lt;/strong&gt; works on all flavors of input fields (type="number", type="email" and so on), but it also works for other kind of fields, like &lt;strong&gt;textarea&lt;/strong&gt; and &lt;strong&gt;select&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Let's see an example:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

&amp;lt;script&amp;gt;
let coffeeOrigins = ["Ethiopia","Colombia","Sumatra","India","Nicaragua"];
let selected;
&amp;lt;/script&amp;gt;

&amp;lt;main&amp;gt;

&amp;lt;p&amp;gt; Your have choose: {selected || 'nothing'}&amp;lt;/p&amp;gt;

{#each coffeeOrigins as origin}

&amp;lt;label&amp;gt;
&amp;lt;input type="radio" bind:group={selected} value={origin}/&amp;gt;
{origin}
&amp;lt;/label&amp;gt;
{/each}

&amp;lt;/main&amp;gt;


Thank you for reading, see you next sunday!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Wrapping a Ruby Method</title>
      <author>Burdette Lamar</author>
      <pubDate>Sun, 07 Nov 2021 17:09:33 +0000</pubDate>
      <link>https://dev.to/burdettelamar/wrapping-a-ruby-method-1jf8</link>
      <guid>https://dev.to/burdettelamar/wrapping-a-ruby-method-1jf8</guid>
      <description>&lt;p&gt;You can "wrap" an instance (or singleton) method so that your wrapping method gets to act both before and after the wrapped method is called:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;
     &lt;span class="mi"&gt;2&lt;/span&gt;
     &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="c1"&gt;# Save the existing method.&lt;/span&gt;
     &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="ss"&gt;:old_initialize&lt;/span&gt; &lt;span class="ss"&gt;:initialize&lt;/span&gt;
     &lt;span class="mi"&gt;5&lt;/span&gt;
     &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="c1"&gt;# Define the wrapper method.&lt;/span&gt;
     &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;8&lt;/span&gt;      &lt;span class="c1"&gt;# Here's where we get to do a prelude.&lt;/span&gt;
     &lt;span class="mi"&gt;9&lt;/span&gt;      &lt;span class="n"&gt;block_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'no block'&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Creating an array from &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;block_s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
    &lt;span class="mi"&gt;11&lt;/span&gt;      &lt;span class="c1"&gt;# Make the call, saving the result.&lt;/span&gt;
    &lt;span class="mi"&gt;12&lt;/span&gt;      &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old_initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="mi"&gt;13&lt;/span&gt;      &lt;span class="c1"&gt;# Here's where we get to do a postlude.&lt;/span&gt;
    &lt;span class="mi"&gt;14&lt;/span&gt;      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Created &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
    &lt;span class="mi"&gt;15&lt;/span&gt;      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="mi"&gt;16&lt;/span&gt;      &lt;span class="c1"&gt;# And of course return the new array.&lt;/span&gt;
    &lt;span class="mi"&gt;17&lt;/span&gt;      &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="mi"&gt;18&lt;/span&gt;    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="mi"&gt;19&lt;/span&gt;
    &lt;span class="mi"&gt;20&lt;/span&gt;  &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="mi"&gt;21&lt;/span&gt;
    &lt;span class="mi"&gt;22&lt;/span&gt;  &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="mi"&gt;23&lt;/span&gt;  &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
    &lt;span class="mi"&gt;24&lt;/span&gt;  &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="mi"&gt;25&lt;/span&gt;  &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'nosuch'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="mi"&gt;26&lt;/span&gt;  &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"Element &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Creating an array from [] and no block.
Created [].

Creating an array from [[]] and no block.
Created [].

Creating an array from [4] and no block.
Created [nil, nil, nil, nil].

Creating an array from [4, "nosuch"] and no block.
Created ["nosuch", "nosuch", "nosuch", "nosuch"].

Creating an array from [4] and #&amp;lt;Proc:0x000001e256eb3ab8 t.rb:26&amp;gt;.
Created ["Element 0", "Element 1", "Element 2", "Element 3"].

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ruby</category>
      <category>metaprogramming</category>
    </item>
    <item>
      <title>Ideas for an Open Metaverse</title>
      <author>The Open Coder</author>
      <pubDate>Sun, 07 Nov 2021 16:33:58 +0000</pubDate>
      <link>https://dev.to/opencoder/ideas-for-an-open-metaverse-4pmh</link>
      <guid>https://dev.to/opencoder/ideas-for-an-open-metaverse-4pmh</guid>
      <description>&lt;p&gt;With all of the new changes Facebook is making, I think it's important to talk about this topic. I've been a long time fan of VR, and I would consider myself an early adopter of the technology. You can never forget that first experience you have in a VR headset where you realize how amazing the possibilities are. But not much has changed since I bought my Oculus Rift in 2018. There's been some hardware upgrades from HTC and Oculus, and some new players entering the space with nice headsets like the Valve Index. However, the only application for this technology has largely been gaming and very few productivity applications. Now that Facebook (Meta) has announced there new direction with the "metaverse", I think it's important to talk about what that should look like beyond just Meta's products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-metaverse"&gt;
  &lt;/a&gt;
  The Metaverse
&lt;/h2&gt;

&lt;p&gt;The metaverse has been described as a place where you can virtually meet, work and play using a VR headset, glasses or your device. The easiest way to catch up on what that really means is to watch this video of Meta's recent announcements:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gElfIo6uw4g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;From what we've been shown, it seems like they want to focus on social experiences through virtual meetings and work. Because they own Oculus, the largest player in the VR space, it's obvious they will be making the first machines that make this stuff possible. However, what empowers this technology is the world we build around it, which should not be left up to the largest corporations in America.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-open-metaverse"&gt;
  &lt;/a&gt;
  An Open Metaverse
&lt;/h2&gt;

&lt;p&gt;If you've read any of my other posts, you'll know that I believe in open-source technology and its ability to innovate properly. From what Meta has shown us, they seem to already be starting to build the applications that will power the metaverse. Although their announcements will push for more developers to invest in the metaverse, there are some large implications for 1 company developing what could end up being our day to day lives. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-and-privacy"&gt;
  &lt;/a&gt;
  Security and Privacy
&lt;/h3&gt;

&lt;p&gt;In the couple decades that open-source software has existed, it has been obvious that security and privacy has been an overarching benefit. We all know Microsoft and Apple don't have our best interests in mind when we use their operating systems. When it comes to security, Linux has dominated every other operating system, because the code is openly available to anyone. That means more people see the code, understand the problems, and fix it. It's quite possibly the most simple and effective benefit of open-source.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#protocols"&gt;
  &lt;/a&gt;
  Protocols
&lt;/h3&gt;

&lt;p&gt;A few parallels to the early days of the internet can be made here. Contrary to public belief, the metaverse will create more ways for humans to collaborate and socialize. A lot of the comments I've seen are along the lines of "This is sad. No one will talk to each other in person anymore." If the past two years have shown us anything it's that more and more people don't care about working in-person for the "social benefits". Additionally, we live in a world where we can take our computers anywhere and interact with other people wherever we want. This technology will only make this interaction more realistic and normal than it already is. There's no evidence for us to think this will be any different than the introduction of computers to the masses. &lt;/p&gt;

&lt;p&gt;Beyond the social aspect of the internet, we can compare the current vision of the metaverse to the early days of the internet. The internet was really nothing without protocols. There's no way we could have come this far without things like TCP/UDP and HTTP. Similarly, we need protocols for how experiences in the metaverse will be served. What file formats to support? How do we ensure a secure connection? What software will act as the "browser" between virtual worlds? These types of questions need to be tackled before a bunch of large corporations start making their own incompatible versions of the metaverse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;p&gt;This is something Meta addressed, but I want to change the way they are looking at this piece of the puzzle. We shouldn't rely on Meta to create the tools for developers to create virtual experiences. I would look more towards technology like Unreal Engine or Unity which are freely available to anyone. If we take this a step further, we should create open-source tools for us to create virtual experiences, so that there is the same standard for quality and security at every point in the pipeline. The internet could have never succeeded if there were not some level of agreement on how to develop websites that are compatible with browsers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-we-invest-in-the-open-metaverse"&gt;
  &lt;/a&gt;
  Why Should We Invest in the Open Metaverse?
&lt;/h2&gt;

&lt;p&gt;Well for starters, a couple massive corporations are investing billions of dollars into the metaverse. If developers standby and let them call the shots for too long, there is a possibility for our virtual experiences to be flooded with ads and privacy invasion. &lt;/p&gt;

&lt;p&gt;Beyond the dystopian commentary, let's think about how national governments have regulated technology. We've been shown that corporations will unethically use their power over our social networks and devices in order to sell our data for profit. Whether that data has larger implications in other parts of society never mattered to these companies. All the while, our governments have done nothing to stop it. If we build the metaverse upon the foundations of open-source technology, we can largely prevent corporations from invading our privacy.&lt;/p&gt;

&lt;p&gt;My belief is that the metaverse is inevitable. It's only a matter of time before people adopt this technology, which I think will benefit society for the most part. However, I think it's important that developer communities take some time to deliberate over how the metaverse should work, so we can get around some of the mistakes that have been made before.&lt;/p&gt;

&lt;p&gt;Personally, I want to contribute to building the metaverse. Ever since I first used VR, I understood how far the technology could go, and I'm sure there are many other applications we cannot begin to understand yet. I believe this technology could empower new ways of working together that would drastically increase productivity and collaboration in the workplace. It has the power to change how we socialize on the internet and bring more empathy into the conversations we have with strangers. My hope is that the metaverse will make us understand that there's someone behind a profile picture, and they are worth more than just their data. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-more-info"&gt;
  &lt;/a&gt;
  Some More Info
&lt;/h3&gt;

&lt;p&gt;If you're looking for more information about this topic, check out this &lt;a href="https://spectrum.ieee.org/open-metaverse?utm_campaign=post-teaser&amp;amp;utm_content=1kp270f8"&gt;article&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>DOM (Document Object Model) is really easy to understand!!! 
 
</title>
      <author>Riyad Mahmud</author>
      <pubDate>Sun, 07 Nov 2021 16:30:03 +0000</pubDate>
      <link>https://dev.to/riyadmahmud2021/-what-is-dom-what-is-d-o-m-for-5g44</link>
      <guid>https://dev.to/riyadmahmud2021/-what-is-dom-what-is-d-o-m-for-5g44</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-what-is-dom"&gt;
  &lt;/a&gt;
   1. What is DOM?
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#2-what-is-d-o-m-for"&gt;
  &lt;/a&gt;
   2. What is “D” “O” “M” for?
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#3-is-dom-same-as-html"&gt;
  &lt;/a&gt;
   3. Is DOM same as HTML?
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#4-what-is-the-relation-between-dom-and-html"&gt;
  &lt;/a&gt;
   4. What is the relation between DOM and HTML?  
&lt;/h2&gt;




&lt;p&gt;Today, we will know 4 queries solution. These are above.&lt;br&gt;
Lets learn...&lt;/p&gt;

&lt;p&gt;DOM contains Document Object Model.&lt;br&gt;&lt;br&gt;
D for Document. &lt;br&gt;
It Means: HTML doc file &lt;/p&gt;

&lt;p&gt;O for Object.&lt;br&gt;&lt;br&gt;
It Means: HTML element(body,head,p,h1,etc) / javascript object) &lt;br&gt;
We can say, HTML element(body,head,p,h1,etc) = javascript object.&lt;/p&gt;

&lt;p&gt;M for Model. &lt;br&gt;
It Means: HTML doc’s “element/ javascript object” Model&lt;/p&gt;

&lt;p&gt;DOM works as a “javascript object model”. Here, “javascript object” is known as  HTML element(body,head,p,h1,etc). Actually, DOM is an HTML element(body,head,p,h1) model. &lt;/p&gt;

&lt;p&gt;Best of luck.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Datta Able - Free Starters for Flask, Django, React, and Firebase</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 07 Nov 2021 16:28:54 +0000</pubDate>
      <link>https://dev.to/sm0ke/datta-able-free-starters-for-flask-django-react-and-firebase-fc4</link>
      <guid>https://dev.to/sm0ke/datta-able-free-starters-for-flask-django-react-and-firebase-fc4</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents a few open-source seed project crafted on top of &lt;a href="https://www.admin-dashboards.com/datta-able-free-react-firebase-django-flask/"&gt;Datta Able&lt;/a&gt;, a colorful design in different technologies like &lt;code&gt;React&lt;/code&gt;, &lt;code&gt;Django&lt;/code&gt;, &lt;code&gt;Flask&lt;/code&gt; plus full-stack versions powered by &lt;code&gt;NodeJS&lt;/code&gt; and &lt;code&gt;Firebase&lt;/code&gt;. All projects, released under the MIT license on Github, can be used as a starting point for a new product or simply for eLearning activities. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/product/react-node-js-datta-able"&gt;Datta Able React NodeJS&lt;/a&gt; - Full-stack project&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/admin-dashboards/django-datta-able"&gt;Datta Able Django&lt;/a&gt; - simple Django starter&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/admin-dashboards/flask-datta-able"&gt;Datta Able Flask&lt;/a&gt; - open-source project&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/product/react-firebase-datta-able"&gt;Datta Able React Firebase&lt;/a&gt; - full-stack, also free&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://bit.ly/3qFyzgm"&gt;Datta Able Bootstrap&lt;/a&gt; - HTML template version&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#datta-able-react-nodejs"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://appseed.us/product/react-node-js-datta-able"&gt;Datta Able React NodeJS&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This project is an open-source full-stack project that uses the React version of Datta Able for the UI and a simple, yet powerful Node JS API that manages the users. Datta Able React is a complete game-changer React Dashboard Template with an easy and intuitive responsive design as on retina screens or laptops.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/product/react-node-js-datta-able"&gt;React Node JS Datta Able&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://react-node-js-datta-able.appseed-srv1.com/"&gt;React Node JS Datta Able&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React is an open-source front-end JavaScript library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTFJSKiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmxz9pf7hqwfinllpvss.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTFJSKiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmxz9pf7hqwfinllpvss.gif" alt="Datta Able React NodeJS - Full-stack version." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#datta-able-django"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://appseed.us/admin-dashboards/django-datta-able"&gt;Datta Able Django&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Open-source dashboard generated by the AppSeed platform with basic modules, database, authentication, and deployment scripts on top of Datta Able (free version).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/admin-dashboards/django-datta-able"&gt;Datta Able Django&lt;/a&gt; - Product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://django-datta-able.appseed-srv1.com/"&gt;Datta Able Django&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It’s free and open source.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCX_KLvl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8mfd31dmrl4hb8p08p9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCX_KLvl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8mfd31dmrl4hb8p08p9.png" alt="Datta Able - Django Version." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#datta-able-flask"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://appseed.us/admin-dashboards/flask-datta-able"&gt;Datta Able Flask&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Simple dashboard coded in Flask Framework. Datta Able Bootstrap Lite is the most stylized Bootstrap 4 Lite Admin Template, around all other Lite/Free admin templates in the market. It comes with high feature-rich pages and components with fully developer-centric code. Before developing Datta Able our key points were performance and design.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/admin-dashboards/flask-datta-able"&gt;Datta Able Flask&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-datta-able.appseed-srv1.com/"&gt;Datta Able Flask&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. Classified as a microframework, Flask is written in Python and it does not require particular tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lEEZqlHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqv3flvkggyoetc0blpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lEEZqlHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqv3flvkggyoetc0blpz.png" alt="Datta Able - Flask Version." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#datta-able-firebase"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://appseed.us/product/react-firebase-datta-able"&gt;Datta Able Firebase&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In the current tech world, Firebase is one of the most trending technologies that help you to make a super cool web app or mobile apps in a short span of time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/product/react-firebase-datta-able"&gt;React Firebase Datta Able&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://react-firebase-datta-able.appseed-srv1.com/"&gt;React Firebase Datta Able&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firebase is a B-A-S-S ( backend as a service ) provided by Google, by means of the backend as a service means that you don’t have to think about how to store the data in the backend and how to configure your service.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKZWzdo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3y99d6oz4l26lbvinj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKZWzdo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3y99d6oz4l26lbvinj0.png" alt="Datta Able - React Firebase Version." width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#datta-able-bootstrap"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://bit.ly/3qFyzgm"&gt;Datta Able Bootstrap&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Datta Able Bootstrap Lite is the most stylized Bootstrap 4 Lite Admin Template, around all other Lite/Free admin templates in the market. It comes with high feature-rich pages and components with fully developer-centric code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://bit.ly/3qFyzgm"&gt;Datta Able Bootstrap&lt;/a&gt; - product page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With performance, Datta Able rendering is fast in all major browsers. It is passed through a good score in Google Page Speed, Pingdom, GT Metrix. Code passed via w3 validators with all w3 standards.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1FSnGBcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs0hxjokbbs2vo4ogbbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1FSnGBcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs0hxjokbbs2vo4ogbbs.png" alt="Datta Able - Boostrap Version." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;👉 More &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - index provided by AppSeed&lt;/li&gt;
&lt;li&gt;👉 Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated index published on Dev.to
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>react</category>
      <category>dashboards</category>
    </item>
    <item>
      <title>muffon - Desktop music browser</title>
      <author>Aleksey Shpakovsky</author>
      <pubDate>Sun, 07 Nov 2021 15:56:31 +0000</pubDate>
      <link>https://dev.to/staniel359/muffon-desktop-music-browser-5a55</link>
      <guid>https://dev.to/staniel359/muffon-desktop-music-browser-5a55</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k3TGUt3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n80hjbi8kfodx9h8d68b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k3TGUt3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n80hjbi8kfodx9h8d68b.png" alt="muffon" width="640" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;muffon&lt;/strong&gt; is a desktop music browser / streaming service that retrieves info and audio/video from &lt;strong&gt;Last.FM&lt;/strong&gt;, &lt;strong&gt;Discogs&lt;/strong&gt;, &lt;strong&gt;VK&lt;/strong&gt;, &lt;strong&gt;YouTube&lt;/strong&gt;, &lt;strong&gt;Deezer&lt;/strong&gt;, &lt;strong&gt;Yandex Music&lt;/strong&gt;, &lt;strong&gt;Odnoklassniki&lt;/strong&gt;, &lt;strong&gt;Spotify&lt;/strong&gt;, &lt;strong&gt;SoundCloud&lt;/strong&gt;, &lt;strong&gt;Bandcamp&lt;/strong&gt;, &lt;strong&gt;Genius&lt;/strong&gt; and &lt;strong&gt;Rate Your Music&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;listen to tracks/artists/whole albums&lt;/li&gt;
&lt;li&gt;watch videos&lt;/li&gt;
&lt;li&gt;view tracks' lyrics&lt;/li&gt;
&lt;li&gt;view tags and their top artists/albums/tracks&lt;/li&gt;
&lt;li&gt;view top artists/tracks/tags&lt;/li&gt;
&lt;li&gt;create music library&lt;/li&gt;
&lt;li&gt;get personal recommendations (based on your library)&lt;/li&gt;
&lt;li&gt;create playlists&lt;/li&gt;
&lt;li&gt;add to favorites&lt;/li&gt;
&lt;li&gt;add to bookmarks&lt;/li&gt;
&lt;li&gt;add to listened&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It has &lt;strong&gt;no ads&lt;/strong&gt; and it's &lt;strong&gt;absolutely free&lt;/strong&gt; to use.&lt;/p&gt;

&lt;p&gt;It's built with &lt;strong&gt;Vue&lt;/strong&gt; and &lt;strong&gt;Electron&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It's tested on &lt;strong&gt;Windows 10&lt;/strong&gt; and &lt;strong&gt;Linux&lt;/strong&gt;, but there is &lt;strong&gt;Mac&lt;/strong&gt; version as well.&lt;/p&gt;

&lt;p&gt;It's currently in &lt;strong&gt;alpha&lt;/strong&gt;, so not everything's perfect and much to be done.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vue</category>
      <category>electron</category>
    </item>
    <item>
      <title>Cómo estructurar un proyecto de React</title>
      <author>Adrián Guillén Bermúdez</author>
      <pubDate>Sun, 07 Nov 2021 15:51:45 +0000</pubDate>
      <link>https://dev.to/adriangube/como-estructurar-un-proyecto-de-react-4b77</link>
      <guid>https://dev.to/adriangube/como-estructurar-un-proyecto-de-react-4b77</guid>
      <description>&lt;p&gt;En los anteriores artículos de esta serie de &lt;strong&gt;fundamentos de React&lt;/strong&gt; &lt;a href="https://dev.to/adriangube/como-crear-tu-primer-proyecto-de-react-113h"&gt;expliqué&lt;/a&gt; las tres mejores formas de crear un proyecto de React** **y también &lt;a href="https://dev.to/adriangube/que-hay-en-un-proyecto-de-react-creado-con-create-react-app-3b8a"&gt;analicé&lt;/a&gt; minuciosamente cada uno de los archivos y carpetas en un proyecto de React generado con Create React App. &lt;/p&gt;

&lt;p&gt;Ahora que ya sabemos cómo crear un proyecto y qué elementos contiene, el siguiente paso es empezar a programar nuestra propia app. En este artículo se va a explicar &lt;strong&gt;qué estrategias seguir paso a paso para empezar a programar una aplicación sencilla&lt;/strong&gt;. También dejaré a vuestra disposición el link a un &lt;a href="https://github.com/adriangube/article-cra"&gt;repositorio de github&lt;/a&gt; que he creado para la ocasión, donde se puede ver el resultado del proyecto que he usado como referencia en este artículo. &lt;/p&gt;

&lt;p&gt;Antes de entrar en detalle sobre la estructura de proyecto que propongo, me gustaría aclarar que me he basado en una &lt;strong&gt;estructura simplificada de Domain Driven Design&lt;/strong&gt;, que sea fácilmente escalable y que permita adaptarse con algunos ajustes a casi cualquier proyecto, sin embargo con el objetivo de &lt;strong&gt;simplificar el contenido de este post&lt;/strong&gt;, no explico en detalle qué es el DDD ni en qué conceptos se basa este tipo de arquitectura. En futuros artículos pretendo cubrir en profundidad sobre DDD entre otros temas. &lt;/p&gt;

&lt;p&gt;En este post vamos a trabajar principalmente dentro de la carpeta src, ya que es donde reside el código fuente de nuestra aplicación. En este artículo no se va a explicar qué hace cada uno de los archivos y directorios que existen inicialmente puesto que eso ya se cubrió en el artículo &lt;a href="https://dev.to/adriangube/que-hay-en-un-proyecto-de-react-creado-con-create-react-app-3b8a"&gt;anterior&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psqsp8ko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s76xjtl9phh2vg18k8lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psqsp8ko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s76xjtl9phh2vg18k8lm.png" alt="projecto inicial" width="410" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lo primero que me gusta hacer cuando creo un nuevo proyecto de React es crear una &lt;strong&gt;estructura básica de carpetas&lt;/strong&gt; que me permita tener el código** organizado** para que sea &lt;strong&gt;fácil encontrar lo que estoy buscando&lt;/strong&gt; en cada momento una vez el proyecto va creciendo. &lt;/p&gt;

&lt;p&gt;Si no se genera una &lt;strong&gt;buena estructura&lt;/strong&gt; desde un principio, es posible que con el paso del tiempo el proyecto &lt;strong&gt;vaya creciendo en tamaño&lt;/strong&gt;, creándose componentes nuevos, archivos con lógica de negocio y utilidades y poco a poco, de forma casi imperceptible, &lt;strong&gt;será más difícil añadir mejoras y corregir bugs&lt;/strong&gt;, porque el proyecto que inicialmente eran unos pocos componentes, &lt;strong&gt;se ha convertido en un monstruo&lt;/strong&gt; con cientos archivos en los que nunca se encuentra a la primera lo que se busca.  &lt;/p&gt;

&lt;p&gt;Para** evitar que esto ocurra*&lt;em&gt;, me gusta hacer una **estructura inicial de carpetas&lt;/em&gt;* muy básica que me &lt;strong&gt;permita ir ampliando conforme el proyecto se hace más grande&lt;/strong&gt; y que se adapte tanto a proyectos pequeños, medianos o (con un poco de trabajo) a proyectos grandes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#estructura-de-carpetas-b%C3%A1sica"&gt;
  &lt;/a&gt;
  Estructura de carpetas básica
&lt;/h2&gt;

&lt;p&gt;La estructura básica de proyecto que propongo es la siguiente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iChEIb2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpq2hossnfi2tviskoup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iChEIb2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpq2hossnfi2tviskoup.png" alt="basic structure" width="403" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En primer lugar, he creado la carpeta &lt;strong&gt;components&lt;/strong&gt; que será la encargada de contener los componentes React de nuestra aplicación. En este caso, como el proyecto parte de cero, tan solo tenemos el componente App, pero en el futuro, conforme vayamos ampliando el proyecto y creando más componentes, este será el directorio en el que irán contenidos.&lt;/p&gt;

&lt;p&gt;El segundo directorio que he creado es el &lt;strong&gt;domain&lt;/strong&gt; que es el directorio encargado de c*&lt;em&gt;ontener la lógica de negocio&lt;/em&gt;* de la aplicación. La lógica de negocio es toda aquella que es única del funcionamiento** concreto de nuestro proyecto*&lt;em&gt;, y que **no depende de ningún framework&lt;/em&gt;* ni librería. Por ejemplo, si estamos creando una aplicación de calculadora, la función "suma", "resta"... forman parte de la lógica de negocio de nuestra aplicación.&lt;/p&gt;

&lt;p&gt;Es posible que te estés preguntando si tiene sentido crear este directorio desde un punto tan temprano del desarrollo, si el proyecto ahora mismo no es más que apenas un par de componentes sin lógica ninguna. La respuesta a esta pregunta es un rotundo &lt;strong&gt;"sí, es necesario",&lt;/strong&gt; el motivo es bien simple, &lt;strong&gt;si no creas este directorio desde el principio&lt;/strong&gt;, es fácil ir añadiendo esta lógica dentro de los componentes, lo que provocará que &lt;strong&gt;la lógica dependa de la librería de componentes que estés usando&lt;/strong&gt;, en este caso React. Por lo tanto,** la lógica de negocio será más difícil de testear** y &lt;strong&gt;de reutilizar&lt;/strong&gt;. Si no tienes claro qué es la lógica de negocio, y porque es importante que no esté relacionada con React, no te preocupes, escribiré futuros artículos hablando sobre el tema. &lt;/p&gt;

&lt;p&gt;Por último he creado el directorio &lt;strong&gt;pages&lt;/strong&gt;, que será el encargado de** contener las diferentes páginas de nuestra aplicación &lt;strong&gt;en caso de que nuestra app tenga routing. **Si nuestra aplicación&lt;/strong&gt; &lt;strong&gt;no tiene routing, es posible que no necesitemos este directorio,&lt;/strong&gt; en ese  caso es totalmente válido dejar el &lt;strong&gt;index.css y el index.js en la raíz del directorio src&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Como nuestro proyecto no va a tener rutas no vamos a utilizar el directorio pages, sin embargo es recomendable que en caso de tener una aplicación con routing lo utilices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refinando-la-estructura-de-carpetas"&gt;
  &lt;/a&gt;
  Refinando la estructura de carpetas
&lt;/h2&gt;

&lt;p&gt;Esta estructura de carpetas que se ha propuesto es muy básica y se puede mejorar un poco más. Para ello lo primero que recomiendo es &lt;strong&gt;crear una carpeta por cada componente&lt;/strong&gt;, de forma que &lt;strong&gt;contenga todos los archivos de javascript, css y test&lt;/strong&gt; de ese componente. Por ejemplo he creado el directorio App que contiene lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kn4Dy9-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85hxk3v8tsym8wrodgoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kn4Dy9-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85hxk3v8tsym8wrodgoa.png" alt="component example" width="410" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;De la misma forma, dentro de &lt;strong&gt;pages&lt;/strong&gt; es recomendable crear &lt;strong&gt;un directorio por cada página&lt;/strong&gt; de nuestra aplicación, en los que se &lt;strong&gt;incluirán los archivos de javascript, css y tes&lt;/strong&gt;t.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0rMiq9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0zeheinl3k0m1wktmo3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0rMiq9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0zeheinl3k0m1wktmo3.png" alt="page example" width="408" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El directorio &lt;strong&gt;domain&lt;/strong&gt; es ligeramente diferente, porque al contener archivos con lógica de negocio, &lt;strong&gt;no tiene sentido crear una carpeta por cada archivo&lt;/strong&gt;, puesto que cada archivo ya contendrá las funciones, clases y métodos relacionados con una funcionalidad o grupo de funcionalidades. Por lo tanto &lt;strong&gt;la clasificación de archivos y carpetas debe estar relacionado a los diferentes elementos de dominio&lt;/strong&gt;. Un elemento de dominio es una &lt;strong&gt;entidad&lt;/strong&gt; que puede ser del mundo real o del dominio de la aplicación. &lt;/p&gt;

&lt;p&gt;Por ejemplo, si tenemos una aplicación de gestión de usuarios, un elemento de dominio es "usuario", y si en esta aplicación se gestionan roles de usuario, otro elemento de dominio podría ser "roles de usuario". En este caso hipotético crearíamos la carpeta &lt;strong&gt;usuario&lt;/strong&gt; dentro del &lt;strong&gt;domain&lt;/strong&gt; y dentro de esta carpeta crearíamos los diferentes archivos de lógica relacionados con el usuario. De la misma forma crearíamos la carpeta roles-de-usuario y dentro de esta escribiríamos los archivos relacionados con los roles. &lt;/p&gt;

&lt;p&gt;Si pese a estos ejemplos no ves claro que son los elementos de dominio en futuros artículos explicaré en profundidad qué son y cómo utilizarlos en tus proyectos. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#siguientes-pasos-a-seguir"&gt;
  &lt;/a&gt;
  Siguientes pasos a seguir
&lt;/h2&gt;

&lt;p&gt;La estructura de proyecto que he propuesto es válida para un proyecto muy sencillo, y a la que empieces a crear varios componentes, hacer llamadas al backend, etc &lt;strong&gt;deberás crear nuevos archivos y carpetas&lt;/strong&gt;. Una buena forma de continuar evolucionando tu proyecto es generar los directorios &lt;strong&gt;application e infrastructure&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;En el directorio &lt;strong&gt;application&lt;/strong&gt; puedes incluir los** casos de us**o de tu aplicación, por ejemplo llamadas api rest, las actions para actualizar tus reducers, y los selectores que te permiten escuchar los cambios en el estado de tu aplicación. &lt;/p&gt;

&lt;p&gt;En el directorio &lt;strong&gt;infrastructure&lt;/strong&gt; puedes incluir clases o funciones que hagan &lt;strong&gt;abstracciones&lt;/strong&gt; de librerías de fetching, de forma que tu proyecto no esté acoplado a librerías de terceros, etc&lt;/p&gt;

&lt;p&gt;Si no tienes claro qué es el acoplamiento, ni porqué es necesario trabajar con abstracciones en futuros artículos cubriré con detenimiento estos conceptos. &lt;/p&gt;

&lt;p&gt;O*&lt;em&gt;tros directorios&lt;/em&gt;* que se pueden añadir según se vayan necesitando son los directorios &lt;strong&gt;static, theme y config.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;El directorio &lt;strong&gt;static&lt;/strong&gt; es un directorio &lt;strong&gt;opcional&lt;/strong&gt;, que no está en todos los proyectos ya que hay proyectos en los que no es necesario, pero los proyectos que lo utilizan suele incluir todos los archivos estáticos que necesitan estar dentro del directorio src pero que no contienen código fuente, como por ejemplo** imágenes o fuentes.** En el caso de nuestra aplicación podríamos crear el directorio static y poner dentro el archivo &lt;strong&gt;logo.svg&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En el directorio &lt;strong&gt;config&lt;/strong&gt; es un directorio &lt;strong&gt;opcional,&lt;/strong&gt; en el que incluiremos todos los archivos de &lt;strong&gt;configuración de librerías&lt;/strong&gt;. En nuestra aplicación incluiríamos los archivos &lt;strong&gt;reportWebVitals.sj y setupTest.js&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Por último hay** aplicaciones** &lt;strong&gt;grandes&lt;/strong&gt; que contienen muchos estilos css, y algunos de estos &lt;strong&gt;estilos son generales y compartidos&lt;/strong&gt; a lo largo de toda la aplicación. Para incluir estos archivos es común crear el directorio &lt;strong&gt;theme&lt;/strong&gt;, en el que se incluyen &lt;strong&gt;archivos con variables de css&lt;/strong&gt;, la configuración de las fuentes, variables de media queries etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrtfhc89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6g4i3gjn08c5q8p2wbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrtfhc89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6g4i3gjn08c5q8p2wbr.png" alt="next steps" width="403" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por último me gustaría animarte a que cometas errores, ya que una de las mejores formas de aprender qué estructura de proyecto funciona mejor para ti es equivocarte y aprender de tus errores. &lt;/p&gt;

&lt;p&gt;Foto de la cabecera por Antonio Batinić from Pexels&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
