<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Career Development Tips to Help You Keep Ahead of the Curve</title>
      <author>Krowser Web Services </author>
      <pubDate>Wed, 23 Jun 2021 16:56:07 +0000</pubDate>
      <link>https://dev.to/krowser/career-development-tips-to-help-you-keep-ahead-of-the-curve-2957</link>
      <guid>https://dev.to/krowser/career-development-tips-to-help-you-keep-ahead-of-the-curve-2957</guid>
      <description>&lt;p&gt;In the creative industry, everything can change in the blink of an eye – or the click of a mouse. So, how do you ensure your skills keep up with the latest technologies, trends and standards? That's the million-dollar question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure out what you stink at&lt;/strong&gt;&lt;br&gt;
While this isn't groundbreaking career advice, it is important. If you have a professional weak point, fix it. Take it upon yourself to identify your skill gaps and work to fill them day in and day out. Once you correct one issue, move on to the next. As a creative professional, if you're not willing to constantly improve your skill set, you're in the wrong field. It takes passion to succeed in this industry and when you don't have it, your weaknesses become more apparent as the days wear on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn something new every day&lt;/strong&gt;&lt;br&gt;
In addition to getting better at what you know, it's important to understand the things you don't. For instance, if you are a web content writer and aren't grasping why account services keeps pushing for more social content, ask them. Get the inside scoop on what the client is looking for. Not only will it help you deliver more targeted work in the next round, but it also can help you better understand the needs of future clients.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Become indispensable&lt;/strong&gt;&lt;br&gt;
Did you hear through the office grapevine that your boss is looking for a writer who is familiar with video game culture? Offer to take up the task. When you can do something that no one else on the team can, like coding or optimizing content for the Web, you have an undeniable advantage, which helps to keep your position in tact. The more of these "added benefits" you can master, the more valuable you become as an employee. The bottom line is if you want to get ahead in your career, you have to be willing to continually learn, adapt and improve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Engage those around you&lt;/strong&gt;&lt;br&gt;
Are you a big fan of a fellow copywriter's work? Invite that person to lunch so you can pick her brain. Are you fascinated with the impressive output of a particular graphic designer? Shoot him an email and ask about his process. When you engage with other creative professionals, you open yourself up to new ways of thinking.&lt;/p&gt;

&lt;p&gt;They could share a nugget of information that completely redefines your process or alters your method of delivery. Plus, you never know when the opportunity for collaboration may arise. That's how some of the world's most lucrative companies got their start – two people throwing their ideas at one another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read more&lt;/strong&gt;&lt;br&gt;
Whether it's bookmarking a few blogs or picking up a new novel from your favorite author, we can all benefit from reading more. Don't limit yourself to a specific field or specialty or you'll miss out on a (literal) world full of information. As a writer, I always benefit from keeping up with the industries I'm writing for – from finance and healthcare to consumer goods and advertising. You never know when a new piece of knowledge might click to help you create a million-dollar campaign.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maintain a good work-life balance&lt;/strong&gt;&lt;br&gt;
This one is a little harder because it's not always in your control. However, a healthy work-life balance can make all the difference between a good career and a great one. Sure, you could stay an extra hour at the office and churn out work that isn't due until tomorrow night. Or you could spend it with your family, get plenty of sleep and produce even better work the next morning.&lt;/p&gt;

&lt;p&gt;Too many of us have come to believe that "the brass" favor workaholics. However, I've come to find that many managers prefer individuals who keep work in check because employees who enjoy a life outside the office are often happier and more creative.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be yourself, always&lt;/strong&gt;&lt;br&gt;
No matter what field you work in or what job title you have, you should always be yourself. The minute you start pretending to be something you're not is when your career development begins to descend. In most cases, a company hires you because they like your work and enjoy your personality. So don't feel pressure to be someone you're not. A strong work ethic and a good personality and eagerness to learn will often transcend any shortcomings you may have.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Kirby</title>
      <author>Saba Alikhani</author>
      <pubDate>Wed, 23 Jun 2021 16:28:40 +0000</pubDate>
      <link>https://dev.to/fydsa/kirby-2ch3</link>
      <guid>https://dev.to/fydsa/kirby-2ch3</guid>
      <description>&lt;p&gt;Cute little Kirby using css and html&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fydsa/embed/eYvwVKm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Welcome Thread - v130</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 23 Jun 2021 16:27:59 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v130-8kd</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v130-8kd</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/Jsy4fltgRzBunW9Nk9/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Jsy4fltgRzBunW9Nk9/giphy.gif" alt="jello saying hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>CSS Positioning</title>
      <author>Divyanshu Soni</author>
      <pubDate>Wed, 23 Jun 2021 16:16:24 +0000</pubDate>
      <link>https://dev.to/dcssoni/css-positioning-2360</link>
      <guid>https://dev.to/dcssoni/css-positioning-2360</guid>
      <description>&lt;p&gt;In this article, I'll discuss what is CSS position property, how you can use it to create a variety of styling solutions on the webpage. And of course with some use cases to practice. &lt;/p&gt;

&lt;p&gt;Let's dive in! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction-html-document-flow"&gt;
  &lt;/a&gt;
  Introduction :  HTML Document Flow
&lt;/h3&gt;

&lt;p&gt;The HTML elements in a webpage that are described higher in the HTML file will be rendered in the browser earlier than the elements that are described lower as the HTML documents are displayed on the webpage from top to bottom.&lt;/p&gt;

&lt;p&gt;The order in which the elements are displayed on a page by default is called normal flow. According to MDN :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Elements on a webpage layout are in the normal flow, if you have not applied any CSS to change the way they behave. And, as we began to discover, you can change how elements behave either by adjusting their position in that normal flow, or removing them from it altogether. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Refer &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Changing the values of the &lt;code&gt;position&lt;/code&gt; property will change the flow of the document, which is a process called positioning. Let's learn different types of positioning and understand how to work with them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#absolute-positioning"&gt;
  &lt;/a&gt;
  &lt;em&gt;Absolute Positioning&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This refers to positioning relative to the bounds of the parent element, out of the normal flow.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
  position: absolute;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is no parent element, then it is set relative to the bounds of the browser viewport. So, with absolute positioning, the browser window will act as a parent from whose borders the distance is set:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIgRMr3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624354764917/LNDiSeIsn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIgRMr3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624354764917/LNDiSeIsn.png" alt="Browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's consider an example, in the picture below four blocks are positioned in normal flow i.e. their position is set to static by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ClKeMC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624355989078/wW9v6MH9Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ClKeMC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624355989078/wW9v6MH9Y.png" alt="Blocks in Browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's change the positioning of the element 3 to absolute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nw4fiTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/bGqyMPK" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nw4fiTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/bGqyMPK" alt="Codepen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What happened here?? Basically the absolute positioning pulls the element out of the normal flow and all the blocks other than the block 3 in the normal flow neatly follow each other and occupy their space on the webpage. Here block 3 rises to the absolute level and since it is not in the plane between the blocks 1, 2 and 4 they shift towards each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LF3eLx3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624359075725/tQR5t2Cp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LF3eLx3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624359075725/tQR5t2Cp7.png" alt="Screenshot 2021-06-22 162055.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;So, it can be said that the absolute plane lies on the top of the static plane. Keep this feature in mind while working with Absolute positioning.&lt;br&gt;
*&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#relative-positioning"&gt;
  &lt;/a&gt;
  &lt;em&gt;Relative Positioning&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;A relatively positioned element is set relative to its original position on the page. Here is the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see it, let's consider the same four blocks, but this time, only block 3 will be &lt;code&gt;position: relative&lt;/code&gt;, and the rest will remain in the normal flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t7uwNPOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624359928095/5FJOZaq-L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7uwNPOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624359928095/5FJOZaq-L.png" alt="Block-3 Position relative"&gt;&lt;/a&gt;&lt;br&gt;
As expected, block-3 moved up by the distance that was indicated, but pay attention to the empty space where the third element had been earlier.&lt;/p&gt;

&lt;p&gt;What happened here?? The block-3 exists on the page materially (the display of other elements around this block is calculated based on the space it occupies), but it still rises to a higher plane as an absolutely positioned element would. That's why the block-3 overlapped with block-2 and block-4 stayed in the place and did not move up.&lt;/p&gt;

&lt;p&gt;What's the use of it ? &lt;br&gt;
This property of CSS allows you to move the elements on the page anywhere without breaking the layout of the site because the occupied space remains duly occupied.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fixed-positioning"&gt;
  &lt;/a&gt;
  &lt;em&gt;Fixed Positioning&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Fixed positioning locks the element on the page relative to the visible part of the browser's viewport and maintains that position during vertical scrolling. Here is the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
  position: fixed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRirLu4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/xxqNzJd%3Feditors%3D1100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRirLu4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/xxqNzJd%3Feditors%3D1100" alt="Codepen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sticky-positioning"&gt;
  &lt;/a&gt;
  &lt;em&gt;Sticky Positioning&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;In terms of functionality, the element on which sticky positioning is applied, it is between fixed positioning and relative positioning. The element is positioned relatively until the page is scrolled to a certain point, after which the positioning will be fixed.&lt;/p&gt;

&lt;p&gt;Here is the syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
  position: sticky;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8EEfm1bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/gOmJQoY%3Feditors%3D1100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8EEfm1bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/gOmJQoY%3Feditors%3D1100" alt="Codepen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;em&gt;Conclusion&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Thanks to positioning, we can flexibly control the position of the elements on&lt;br&gt;
 the page. It is used to create a variety of styling solutions for page &lt;br&gt;
interfaces smoothly.&lt;/p&gt;

&lt;p&gt;That's all for now. Thank you for reading! Do share your comments here.&lt;/p&gt;

&lt;p&gt;Follow me for more such blogs and express your thoughts about the article on &lt;a href="https://twitter.com/divyanshu_soni_"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further Resources -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"&gt;CSS Positioning on MDN&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/almanac/properties/p/position/"&gt;CSS Tricks&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>20 Web Monetized Projects to Inspire You</title>
      <author>Didicodes</author>
      <pubDate>Wed, 23 Jun 2021 16:07:52 +0000</pubDate>
      <link>https://dev.to/coil/20-web-monetized-projects-to-inspire-you-2k3o</link>
      <guid>https://dev.to/coil/20-web-monetized-projects-to-inspire-you-2k3o</guid>
      <description>&lt;p&gt;Until recently, the only way content creators could make money was through advertising or other business models that take advantage of a user's privacy.&lt;/p&gt;

&lt;p&gt;But with the proposed W3C &lt;a href="https://webmonetization.org/"&gt;Web Monetization API&lt;/a&gt;, creators now have a revenue model that empowers them to make money from their users without advertising, forcing them to subscribe, or invading their privacy. Amazing right? 😍&lt;/p&gt;

&lt;p&gt;There are a ton of developers across the world who are experimenting with Web Monetization. Want to see them? You are in the right place. 😀&lt;/p&gt;

&lt;p&gt;In this article, I collated a list of projects using Web Monetization to make money and offer their users exciting perks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cinnamon"&gt;
  &lt;/a&gt;
  &lt;a href="https://cinnamon.video/"&gt;Cinnamon&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dIpibcHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/ZsSQ_YAKv-y9vFO83kwxSgxlt8vJfF3QGVTuWFLW5dMSFRq_NzJ43dabn1YOMWF2p9ojmGBl6ghVU30RXo5A1LDacp-C6FT5s7pOBXB-B0REK6VZ9WyqyBB3bh4LzpQpG1afTuUb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dIpibcHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/ZsSQ_YAKv-y9vFO83kwxSgxlt8vJfF3QGVTuWFLW5dMSFRq_NzJ43dabn1YOMWF2p9ojmGBl6ghVU30RXo5A1LDacp-C6FT5s7pOBXB-B0REK6VZ9WyqyBB3bh4LzpQpG1afTuUb" alt="Cinnamon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cinnamon is a community-driven content creation platform that allows users to view and create videos while providing native cross-app sharing.&lt;/p&gt;

&lt;p&gt;It uses web monetization to allow video creators to earn from their content without bugging the viewers with unnecessary advertisements.&lt;/p&gt;

&lt;p&gt;With a fee of only $5, Cinnamon grants viewers ad-free access to all videos available on the platform. Then pays the video creators in real-time.&lt;/p&gt;

&lt;p&gt;This means that creators do not have to wait until the end of the month to be paid like traditional video streaming platforms because Cinnamon uses Web monetization to redistribute funds based on the time viewers spend on video content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simmer"&gt;
  &lt;/a&gt;
  &lt;a href="https://simmer.io/"&gt;Simmer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P1OUE7d1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/zdVy2Wy53i0gxp4E3c3HdNvlgr-QORDM5W1Woa_duNi9PgD5wpdpzsVTdtFX-aeWN8Qc99UYyVYl9iCerhihqr-aULHHB2YffwjX81fdzl0Fb805MOe_sjefz8yzyTTyG0Z9sfMh" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1OUE7d1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/zdVy2Wy53i0gxp4E3c3HdNvlgr-QORDM5W1Woa_duNi9PgD5wpdpzsVTdtFX-aeWN8Qc99UYyVYl9iCerhihqr-aULHHB2YffwjX81fdzl0Fb805MOe_sjefz8yzyTTyG0Z9sfMh" alt="Simmer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simmer is a platform for Indie game developers to host their creations in the browser for free with a single drag and drop mechanism.&lt;/p&gt;

&lt;p&gt;Simmer was one of the first game portals to integrate with the Web Monetization API. Through this integration, creators can &lt;a href="https://community.webmonetization.org/erikad/how-to-create-a-payment-pointer-4joi"&gt;generate their payment pointer from Coil&lt;/a&gt;, paste it into Simmer's game editor UI to make their games monetized automatically.&lt;/p&gt;

&lt;p&gt;If you are a game developer, you should take advantage of the engaging audience on Simmer by uploading your games and making money at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitch"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.twitch.tv"&gt;Twitch&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FlTe5F-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/01sGuLo4CcYqqfNnntbArfBZCizL6CiwD_IuiwpFjYNqOqI8eXmC5zJ4_tLh8EC9CSyGC8UdZ-35ikVZLEUev5EhY3wkxWGRkVwd87M1jgfIFKSWArbahnrsWk91ifqrOZV1UmaE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FlTe5F-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/01sGuLo4CcYqqfNnntbArfBZCizL6CiwD_IuiwpFjYNqOqI8eXmC5zJ4_tLh8EC9CSyGC8UdZ-35ikVZLEUev5EhY3wkxWGRkVwd87M1jgfIFKSWArbahnrsWk91ifqrOZV1UmaE" alt="Twitch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitch is a live streaming service that allows users to create channels, run broadcasts, and interact with their viewers.&lt;/p&gt;

&lt;p&gt;Thanks to the automatic Web Monetization support on twitch, viewers can support their favorite Twitch Partners and Affiliates by simply watching their streams.&lt;/p&gt;

&lt;p&gt;Then Coil keeps track of how much each streamer has earned and then purchases Twitch Bits when the minimum purchase threshold is reached for that particular streamer. Pretty cool, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hashnode%C2%A0"&gt;
  &lt;/a&gt;
  &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt; 
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMJNVS3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/8_MEeGJR2jpHAQ9YJgALbRgJuFT0YldQ2cfdjCKyaxfh_0q7QL7t8QvJ7Mb-earNgKJ6KvHf0SlRRptNhPSD-w9shsDls0lEMBMpAXQ-YcjXXP8iUVnM3CK6VRrV3FM6sGhhGhOj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMJNVS3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/8_MEeGJR2jpHAQ9YJgALbRgJuFT0YldQ2cfdjCKyaxfh_0q7QL7t8QvJ7Mb-earNgKJ6KvHf0SlRRptNhPSD-w9shsDls0lEMBMpAXQ-YcjXXP8iUVnM3CK6VRrV3FM6sGhhGhOj" alt="Hashnode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hashnode enables developers to create a blog mapped to their domain for free. So they can focus on developing and sharing content on their blogs while we take care of the rest - customization, readership, visibility, web monetization, and so much more.&lt;/p&gt;

&lt;p&gt;As a reader, you'll get access to all the tech articles for free without any ads or restrictions. On the other hand, the creators get to make money based on the amount of time any Coil subscriber spends on their blog.&lt;/p&gt;

&lt;p&gt;Web Monetization has changed a lot of things. Gone are those days where we thought the only way to make money as a blogger was through ads or adding a paywall. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#imgur-emerald"&gt;
  &lt;/a&gt;
  &lt;a href="https://imgur.com/emerald"&gt;Imgur Emerald&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjB3q09I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/zL2HX3nid1NzzpbUA62khyiB7oqE_9q4IaOLr8JcKpJRwPWmdBpUaTL1srkHkL8BqItYbJCAVRBCbkHrrOIU-La1o2Wb4vuApatJD1y9LW_1NWF-9hHdbeslk-tW7Z1qgdq-9p09" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjB3q09I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/zL2HX3nid1NzzpbUA62khyiB7oqE_9q4IaOLr8JcKpJRwPWmdBpUaTL1srkHkL8BqItYbJCAVRBCbkHrrOIU-La1o2Wb4vuApatJD1y9LW_1NWF-9hHdbeslk-tW7Z1qgdq-9p09" alt="Imgur Emerald"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imgur is the easiest way to discover and enjoy the magic of the Internet. It's where you'll find the funniest, most informative, and inspiring images, memes, GIFs, and visual stories served up in an endless stream of bite-sized fun.&lt;/p&gt;

&lt;p&gt;Powered by a passionate community of people worldwide, anyone can join to share cool stuff and vote the best to the top. You'll always find something on Imgur that brightens your day. 😀&lt;/p&gt;

&lt;p&gt;Yes, Imgur uses the Web Monetization API as well. So, Coil will distribute the micropayments to the creators according to the amount of time Coil subscribers spend looking at content on Imgur.&lt;/p&gt;

&lt;p&gt;Subscribers also get access to unlimited uploads, community features, and, most importantly, an ad-free browsing experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#permanent"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.permanent.org/"&gt;Permanent&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wReIde9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/_XqnQnz9nQZe-ud2PH5jxoGh_7dmDqi5vhmcBFGv7wjx53OSxzPXeAXb2EKSZ_cmiFBRAOYIudnK5sOETGzFLp0PfFO-LvrfGbMkk5ktJG1oXzIvs5CSp3vwKXVJFnqoBbYfnrPR" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wReIde9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/_XqnQnz9nQZe-ud2PH5jxoGh_7dmDqi5vhmcBFGv7wjx53OSxzPXeAXb2EKSZ_cmiFBRAOYIudnK5sOETGzFLp0PfFO-LvrfGbMkk5ktJG1oXzIvs5CSp3vwKXVJFnqoBbYfnrPR" alt="Permanent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you ever thought about your digital legacy? By digital legacy, I mean an accumulation of the different text, pictures, and videos you've posted online over the years.&lt;/p&gt;

&lt;p&gt;The truth is our digital legacy is disappearing because we've not had a central place to store it. And each time it disappears, a glimpse of who we were vanishes as well.&lt;/p&gt;

&lt;p&gt;To solve this, Permanent enables you to create, curate, and collaborate on living archives for yourself, your family, and your community.&lt;/p&gt;

&lt;p&gt;Thanks to the power of the Web Monetization API, the owners of Permanent.org are &lt;a href="https://community.webmonetization.org/storagetothepeople/storage-to-the-people-grant-report-1-4idp"&gt;prototyping and building an Open Source API&lt;/a&gt; that allows users to easily store data with a storage provider using a one-time micropayment, with no need for storage provider or frontend service accounts and financial commitments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#she-code-africa"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.shecodeafrica.org/"&gt;She Code Africa&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDbnKL3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/504wiaggft1u9d7obs1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDbnKL3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/504wiaggft1u9d7obs1h.png" alt="She Code Africa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;She Code Africa is a non-profit organization focused on celebrating and empowering young girls and women in tech across Africa.&lt;/p&gt;

&lt;p&gt;They champion exceptional programs and initiatives to improve the tech skills of their members and keep the community engaged, amongst other things.&lt;/p&gt;

&lt;p&gt;She Code Africa recently integrated Web Monetization into their website as a means to earn revenue. This revenue is used to continue the fantastic work they are doing in the developer community. You should &lt;a href="//%24ilp.uphold.com/kkd4KdPQwqJM"&gt;support them&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#csstricks"&gt;
  &lt;/a&gt;
  &lt;a href="https://css-tricks.com/"&gt;CSS-Tricks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQ1zqKKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/IqxBn6iKiqtfQksOAAbAJHfr4LcCSxRJR4zkUOLjEbPeYJ4dxaX2rtKGZmt5J4XsxUYJbafCyGfP7Qrjv45otyE3VOPuL6Jx00qkLAAKcUlsPXNApb4zedltpHXmSxoCgO37i-b6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQ1zqKKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/IqxBn6iKiqtfQksOAAbAJHfr4LcCSxRJR4zkUOLjEbPeYJ4dxaX2rtKGZmt5J4XsxUYJbafCyGfP7Qrjv45otyE3VOPuL6Jx00qkLAAKcUlsPXNApb4zedltpHXmSxoCgO37i-b6" alt="CSS-Tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS-Tricks is one of the best websites to find insightful articles about frontend development.&lt;/p&gt;

&lt;p&gt;Keeping in mind that it is one of the best websites for frontend content, many devs worldwide have benefitted from it tremendously. Meaning that some of them may have wanted to tip the writers or tell them "thanks" financially.&lt;/p&gt;

&lt;p&gt;With Coil as CSS-Tricks web monetization provider, the website now receives micropayments from readers who have an active Coil subscription and the browser extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ushahidi"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ushahidi.com/"&gt;Ushahidi&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3hMS2k73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/Nk0cjREtTGCOWdz-O0AwWw0LXJRSAdpzA8gth12C7YFCPCaeak-sanivRfo2uCvZq5d0oFq_x-FTLSYfqWhavinatamUcSTHnfAD1885SK3L_LI9lWB8cYE_6F0szQ11LPG78f9J" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3hMS2k73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/Nk0cjREtTGCOWdz-O0AwWw0LXJRSAdpzA8gth12C7YFCPCaeak-sanivRfo2uCvZq5d0oFq_x-FTLSYfqWhavinatamUcSTHnfAD1885SK3L_LI9lWB8cYE_6F0szQ11LPG78f9J" alt="Ushahidi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ushahidi is a crowdsource-driven data platform that enables people to raise their voices, inform their decisions, and influence change in their communities.&lt;/p&gt;

&lt;p&gt;Being a non-profit, integrating web monetization on Ushahidi was an excellent way to gain revenue without running ads, especially during the pandemic. So, if any Coil user visits Ushahidi, Coil will calculate the amount of time you've spent on the website and credit the non-profit team. And most importantly, your data is safe!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#akita"&gt;
  &lt;/a&gt;
  &lt;a href="https://akitaproject.site/"&gt;Akita&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3u8beKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/B4dAkTIjEIRedMeJbMNbbZgULoqTWTGV6SMOor0-1W5oxNomY7hjXWQG0ahcfRB9TxBNjHeS_2rdavWU-XCm8AxtMuLu8Cw4T3Ez8WMpUL3SXr11vEFkQ8PxgfoBF2TgW5rSZY0C" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3u8beKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/B4dAkTIjEIRedMeJbMNbbZgULoqTWTGV6SMOor0-1W5oxNomY7hjXWQG0ahcfRB9TxBNjHeS_2rdavWU-XCm8AxtMuLu8Cw4T3Ez8WMpUL3SXr11vEFkQ8PxgfoBF2TgW5rSZY0C" alt="Akita"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Akita is a free and Open Source project that displays your top-visited monetized sites, how much time you're spending on them, and how much you're contributing (or could contribute) to them.&lt;/p&gt;

&lt;p&gt;They also create diverse resources that will help you understand Web Monetization through &lt;a href="https://esse-dev.github.io/a-web-monetization-story/#page-5"&gt;storytelling&lt;/a&gt;, easy-to-use tools, and community outreach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#puma-browser"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.pumabrowser.com/"&gt;Puma Browser&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AeJHx2F9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/TvB7uF4UzfAyFljBQ5AOOnvoLFrHKijv314wz4FUy_HbuEcBFNeWTEvWD0saCT3V_JYyQe_tIKGlxcDepI5U_sa6-Y5UbReGo2_TeHbTOH9CxeWWBWMB1zm88XbXJiuyyqRgSfYx" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AeJHx2F9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/TvB7uF4UzfAyFljBQ5AOOnvoLFrHKijv314wz4FUy_HbuEcBFNeWTEvWD0saCT3V_JYyQe_tIKGlxcDepI5U_sa6-Y5UbReGo2_TeHbTOH9CxeWWBWMB1zm88XbXJiuyyqRgSfYx" alt="Puma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Puma is a new way to pay for content through a privacy-focused web browser!&lt;/p&gt;

&lt;p&gt;It provides a fast and private mobile Web3 browser that makes it easy to support creators, game &amp;amp; app developers, and charities of your choice.&lt;/p&gt;

&lt;p&gt;The platform uses Coil and the Web Monetization API to create an ad-free user experience and send payment(s) for the content directly from the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flood-escape"&gt;
  &lt;/a&gt;
  &lt;a href="https://flood.enclavegames.com/"&gt;Flood Escape&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Du2p0nx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/1XFJfrFokdLiLHO1mejqJBE1gcK0n7_P1pMyrbV47B9UWtKwaNar0GyHNKWV2o1Ap8LfB934swSQThz8pUEaJd8k_-g9uN9c0-nnV2M7MII4VKsRxubtqP7jFKUdJQxEoF_cm1vK" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Du2p0nx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/1XFJfrFokdLiLHO1mejqJBE1gcK0n7_P1pMyrbV47B9UWtKwaNar0GyHNKWV2o1Ap8LfB934swSQThz8pUEaJd8k_-g9uN9c0-nnV2M7MII4VKsRxubtqP7jFKUdJQxEoF_cm1vK" alt="Flood Escape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flood Escape is an action-packed rush to get out of danger!&lt;/p&gt;

&lt;p&gt;You have to build your way up to escape the flood and be rescued in time in the game. You can also customize your experience with flames, get rewarded, and have a good time. 😀&lt;/p&gt;

&lt;p&gt;Flood Escape uses web monetization to generate revenue from its game without the need for bugging users with unnecessary advertisements. They also give web monetization subscribers a bonus of 100 plus coins and a faster cooldown time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/"&gt;Dev&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PvvK6K2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/_B0ufUB7NjP_DyvwqNT61C2vxhbc8mucx8Jzkyv9R9rzuYGUnm5dEiJsmcYTzkjL1xnDLkHZUQxKmTZW5J3cKNDO-WWMM6TKLhF6uNG_NFY5WOQ50pJ6cN8e1Gnrx1IAeDzPY9zg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PvvK6K2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/_B0ufUB7NjP_DyvwqNT61C2vxhbc8mucx8Jzkyv9R9rzuYGUnm5dEiJsmcYTzkjL1xnDLkHZUQxKmTZW5J3cKNDO-WWMM6TKLhF6uNG_NFY5WOQ50pJ6cN8e1Gnrx1IAeDzPY9zg" alt="Dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dev is an Open Source software that powers a community of software developers who write articles and build relationships with other developers.&lt;/p&gt;

&lt;p&gt;The platform allows individual authors to add their Coil Payment pointer to their blogs right through their settings. So, every time a Coil subscriber reads your article, micropayments will be sent to your payment wallet by Coil.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ballet-rising"&gt;
  &lt;/a&gt;
  &lt;a href="https://balletrising.com/"&gt;Ballet Rising&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CziI7pDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/dK5EXLJNXPgzHo1Ti9GIVSHT4HyMgT52hos3maAtvLmvyojfuMigN8tTXbKstNl061x3xzx2IH0-4UXxrQgDRZr_D9PB9e920O2duP6NOCoyika5GPvufskzn_H7Y5IqNWvX4cxM" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CziI7pDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/dK5EXLJNXPgzHo1Ti9GIVSHT4HyMgT52hos3maAtvLmvyojfuMigN8tTXbKstNl061x3xzx2IH0-4UXxrQgDRZr_D9PB9e920O2duP6NOCoyika5GPvufskzn_H7Y5IqNWvX4cxM" alt="Ballet Rising"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ballet Rising is a non-profit organization focused on the stories of people worldwide whose passion for classical ballet is redefining its culture and elevating ballet as a truly global art form.&lt;/p&gt;

&lt;p&gt;It highlights communities where there is an interest in ballet to drive and build positive relationships with local arts organizations so that the global ballet community grows in harmony with local customs.&lt;/p&gt;

&lt;p&gt;Their website is monetized using Coil. So, you can support them by signing up for a coil membership.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-with-catalin"&gt;
  &lt;/a&gt;
  &lt;a href="https://catalins.tech/"&gt;Tech with Catalin&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEv9hh-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/EpBX2ilPT-Q4MtE7i-gxYV9TbYX_hf6min5ik8B5QpAHTkkGfmzkWh5kswuOfNrli5GaJlXwG2UNDqQ5QHdFjsBDKqfYwtjxNizudSVKYzOoE8TLzW29n4-x8unrFNF7ffL-h6Gv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEv9hh-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/EpBX2ilPT-Q4MtE7i-gxYV9TbYX_hf6min5ik8B5QpAHTkkGfmzkWh5kswuOfNrli5GaJlXwG2UNDqQ5QHdFjsBDKqfYwtjxNizudSVKYzOoE8TLzW29n4-x8unrFNF7ffL-h6Gv" alt="Tech with Catalin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tech with Catalin is a blog owned by Catalin Pit, a Software Engineer specializing in JavaScript technologies and AWS.&lt;/p&gt;

&lt;p&gt;The blog covers content about NodeJS, backend development, Open Source contributions, and growing as a developer.&lt;/p&gt;

&lt;p&gt;Thanks to web monetization, Tech with Catalin generates revenue without displaying ads to its readers or adding a paywall.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#techdirt"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.techdirt.com/"&gt;Techdirt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asPq2t1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/LbGSwhRrkOGTJYY0JzarUGQpses3z9gQwjucHe1PhYt5DRmej7GBYtEmA0-CZbL772_wPXB0tlk6wolMWXuCHg7tfmNOHxdap1ZnfBBpu0gyyf6G_PYgbNUa5y9j4axjUfpKRo1u" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asPq2t1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/LbGSwhRrkOGTJYY0JzarUGQpses3z9gQwjucHe1PhYt5DRmej7GBYtEmA0-CZbL772_wPXB0tlk6wolMWXuCHg7tfmNOHxdap1ZnfBBpu0gyyf6G_PYgbNUa5y9j4axjUfpKRo1u" alt="Techdirt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Techdirt is an American Internet blog that reports on technology's legal challenges and related business &amp;amp; economic policy issues in the context of the digital revolution. It focuses on intellectual property, patents, information privacy, and copyright reform in particular.&lt;/p&gt;

&lt;p&gt;While other websites have resorted to paywalls, registration requirements, and increasingly annoying/intrusive advertising, Techdirt has made their site open and available to anyone, thanks to Web Monetization.&lt;/p&gt;

&lt;p&gt;As a Coil subscriber, you'll get to support Techdirt anytime you read content on their website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-the-chain"&gt;
  &lt;/a&gt;
  &lt;a href="https://onthechain.io/"&gt;On The Chain&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3_i9o8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/RUvppvPI3Ur4ALRydCQKUqRgXEzexkips0ySl633aDg-UzX-w2-vLYUUVIGRWjAVKq4KAXPCm9tNA6KzBFX67HbvTliZsMxBKQrTBwkbDF1IYLxZuoC8j0iYKt5w7b6Nyl5-nRRv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3_i9o8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/RUvppvPI3Ur4ALRydCQKUqRgXEzexkips0ySl633aDg-UzX-w2-vLYUUVIGRWjAVKq4KAXPCm9tNA6KzBFX67HbvTliZsMxBKQrTBwkbDF1IYLxZuoC8j0iYKt5w7b6Nyl5-nRRv" alt="On The Chain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OnTheChain promotes everything cryptocurrency-related. It has many podcasts, Youtube videos, newsletters, and a channel where they share tips and encourage people to join the cryptocurrency community.&lt;/p&gt;

&lt;p&gt;OnTheChain uses the XRP TipBots wallet to receive bits of streaming payments from subscribers via Coil's Web Monetization API.&lt;/p&gt;

&lt;p&gt;This allows them to give their users an incredible ad-free experience and not invade their privacy to make money.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#short-film-web"&gt;
  &lt;/a&gt;
  &lt;a href="https://shortfilmweb.com"&gt;SHORT FILM WEB&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5FWEg1S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/wG6x5z4v6nPKB7yGpajPEIXusUlYCNN9JLfZcO1cIxJmnMzvp7tbp_0aCR8cN0p8RQa32vQvXTyeYoscryRNu4w-hwmV5JymcERQhSiF6KkDn1PUOmqYdC2OaL0vTQmV28GQZJPf" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5FWEg1S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/wG6x5z4v6nPKB7yGpajPEIXusUlYCNN9JLfZcO1cIxJmnMzvp7tbp_0aCR8cN0p8RQa32vQvXTyeYoscryRNu4w-hwmV5JymcERQhSiF6KkDn1PUOmqYdC2OaL0vTQmV28GQZJPf" alt="ShortFilmWeb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ShortFilmWeb is a directory of some of the best short films freely available online carefully handpicked by the team.&lt;/p&gt;

&lt;p&gt;ShortFilmWeb uses Coil to monetize its content, giving them an edge to continue posting quality films and reviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hackernoon"&gt;
  &lt;/a&gt;
  &lt;a href="https://hackernoon.com/"&gt;Hackernoon&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6bwi73tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/6bvZfDLQVxOlc1x6I6eNOUjsNcjW4ZZ0cx0gv39KUm6SqNcZ7Ri9x4LDxMVc92Rj63ua9Xesav57iOIo46Nsun7UP3yETbdzQA4ZF95eMLIFNxXk2z1bMmiBXjA096M42S9l8ash" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6bwi73tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/6bvZfDLQVxOlc1x6I6eNOUjsNcjW4ZZ0cx0gv39KUm6SqNcZ7Ri9x4LDxMVc92Rj63ua9Xesav57iOIo46Nsun7UP3yETbdzQA4ZF95eMLIFNxXk2z1bMmiBXjA096M42S9l8ash" alt="Hackernoon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hackernoon is a community of over 12,000+ contributing writers publishing free high-quality tech stories. The platform supports writers by proofreading their articles before it is published on the platform.&lt;/p&gt;

&lt;p&gt;Hackernoon believes that advertising is not the best way to generate revenue, so they use Web Monetization instead.&lt;/p&gt;

&lt;p&gt;Because of this, writers on the platform can accept a stream of micro-tips from their readers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-bin"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsbin.com/"&gt;JS Bin&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sw1JJSlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/2pHvFXK-XUpNUR9kJfbQRO7EXbmdHuQtCO34KC82ATThvyAS4njEuR3b_n8bLS07E7MMTHaBbZ9BJX35h7OKrmkkrGu80H43BRcSrOFJ_T826jQdfZcHEGw4E2u_FJKSS_0dx83B" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sw1JJSlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/2pHvFXK-XUpNUR9kJfbQRO7EXbmdHuQtCO34KC82ATThvyAS4njEuR3b_n8bLS07E7MMTHaBbZ9BJX35h7OKrmkkrGu80H43BRcSrOFJ_T826jQdfZcHEGw4E2u_FJKSS_0dx83B" alt="JS Bin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JS Bin is a free and Open Source code-sharing website for web developers. It enables developers to create and share code snippets or web pages with their colleagues or anyone in the developer community.&lt;/p&gt;

&lt;p&gt;Being a free platform, JS Bin uses Coil and the Web Monetization API to generate revenue to keep the website running without ads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Web monetization paves the way for a more open, fair, and inclusive web to better support users and creators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creators&lt;/strong&gt; make money, and &lt;strong&gt;users&lt;/strong&gt; finally experience their favorite websites without annoying advertisements or the invasion of their privacy.&lt;/p&gt;

&lt;p&gt;Now that you've seen a couple of projects and people using the Web Monetization API by Coil go ahead and become a &lt;a href="https://help.coil.com/docs/membership/get-membership/index.html"&gt;Coil Subscriber&lt;/a&gt; or integrate the &lt;a href="https://webmonetization.org/docs/api/"&gt;Web Monetization API&lt;/a&gt; into your projects, blog, or website. You will find everything you need to get started &lt;a href="https://webmonetization.org/docs/getting-started/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading this article. If you have any questions, share them in the comment section below, and I'll reply to every comment. 💛&lt;/p&gt;

</description>
      <category>webmonetization</category>
      <category>coil</category>
      <category>programming</category>
    </item>
    <item>
      <title>The History of the Cloud with Jeffery Meyerson &amp;	Kelsey Hightower</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 23 Jun 2021 15:53:59 +0000</pubDate>
      <link>https://dev.to/devteam/the-history-of-the-cloud-with-jeffery-meyerson-kelsey-hightower-91a</link>
      <guid>https://dev.to/devteam/the-history-of-the-cloud-with-jeffery-meyerson-kelsey-hightower-91a</guid>
      <description>&lt;p&gt;This week, I'm joined by my friend &lt;a href="http://twitter.com/vaidehijoshi"&gt;Vaidehi Joshi&lt;/a&gt;, software engineer, creator of the Base.cs blog series, and co-host of the Base.cs podcast. &lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/vaidehijoshi"&gt;@vaidehijoshi&lt;/a&gt;
 joins me to catch up with &lt;a href="https://twitter.com/kelseyhightower"&gt;Kelsey Hightower&lt;/a&gt;, staff developer advocate for the Google Cloud Platform, and &lt;a href="https://dev.to/software_daily"&gt;Jefferey Meyerson&lt;/a&gt;, founder of Software Daily and the host of the &lt;a href="https://dev.to/sedaily"&gt;Software Engineering Daily podcast&lt;/a&gt;, as we delve into the history of the Cloud. &lt;/p&gt;

&lt;p&gt;From the origins of AWS (for better or worse) to the gravitas of Microsoft, we discuss one of my favourite topics: culture, the birth of DevOps, and why Kelsey learned Java.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s5-e7-the-history-of-the-cloud"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E7 - The History of the Cloud&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e7-the-history-of-the-cloud" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e7-the-history-of-the-cloud" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e7-the-history-of-the-cloud" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e7-the-history-of-the-cloud" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e7-the-history-of-the-cloud"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s5-e7-the-history-of-the-cloud"&gt;
      &lt;img id="episode-profile-image" alt="S5:E7 - The History of the Cloud" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#our-guests-this-week-were"&gt;
  &lt;/a&gt;
  Our guests this week were...
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://devpods.herokuapp.com/profiles/6"&gt;Kelsey Hightower&lt;/a&gt; is a staff developer advocate at Google. Find Kelsey on Twitter &lt;a href="http://twitter.com/kelseyhightower"&gt;@kelseyhightower&lt;/a&gt; and GitHub &lt;a href="http://github.com/kelseyhightower"&gt;kelseyhightower&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://devpods.herokuapp.com/profiles/217"&gt;Jefferey Meyerson&lt;/a&gt; is the founder of Software Daily and the host of the Software Engineering Daily podcast. Find Jeffrey on Twitter &lt;a href="http://twitter.com/@the_prion"&gt;@the_prion&lt;/a&gt; and GitHub &lt;a href="http://github.com/crablar"&gt;crablar&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tune into S5E7 of DevDiscuss for more answers to the eternal question: where do clouds come from?&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e7-the-history-of-the-cloud/id1513053883?i=1000526573975"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/5sQF2ySnFaLPEnZWo78kq3"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzQw?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjQhrim0a3xAhUAAAAAHQAAAAAQAg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s5e6-home-automation-nerd-out-dHfmCZM-nK6/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=163957839"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/172"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season five sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt;, &lt;a href="https://www.cloudways.com/en/?id=893892"&gt;Cloudways&lt;/a&gt;, &amp;amp; &lt;a href="https://rudderstack.com/?utm_source=devto&amp;amp;utm_medium=podcast&amp;amp;utm_campaign=CMPGN_3_PS&amp;amp;utm_content=None&amp;amp;utm_term=%7Bkeyword%7D&amp;amp;raid=6dbc05eeb293b421f68d02ce12648240"&gt;Rudderstack&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🗣️🗣️🗣️
&lt;/h1&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Recursion explained 🎉</title>
      <author>Ben Matt, Jr.</author>
      <pubDate>Wed, 23 Jun 2021 15:12:35 +0000</pubDate>
      <link>https://dev.to/jrmatanda/recursion-explained-1d45</link>
      <guid>https://dev.to/jrmatanda/recursion-explained-1d45</guid>
      <description>&lt;p&gt;In this article we will break down all the concept you need to know before saying that you fully understand recursion. The goal is to talk about those concepts so that you can come up with your own definition of what recursion is 😋.&lt;/p&gt;

&lt;p&gt;Definition : Recursion is mostly described as a process that calls it self.&lt;br&gt;
It can also be described by a function that calls it self.&lt;/p&gt;

&lt;p&gt;Call Stack : In case we're calling a function or more multiple times in a program, &lt;br&gt;
their is a thing called "Call Stack" that is an actual stack in witch functions are placed &lt;br&gt;
on top of each other in terms of execution,&lt;br&gt;
so the call stack can hold informations about all the functions that are placed on it.&lt;/p&gt;

&lt;p&gt;So when using a recursive function what happen is we keep pushing the same function onto the "Call Stack".&lt;/p&gt;

&lt;p&gt;What's the main structure of a recursive function ? :&lt;/p&gt;

&lt;p&gt;A recursive function has two essential parts wich are the base case and a different input (or function argument). &lt;/p&gt;

&lt;p&gt;1) The base case :&lt;br&gt;
For the base case you can, think of it as a condition that causes the function to stop calling it self, in other words it stops the recursion.&lt;/p&gt;

&lt;p&gt;2) Different input : Everytime a recursive function is being called, we need to make sure that the input aren't the same.&lt;/p&gt;

&lt;p&gt;If one of the two or both are missing the process can resolve in what called a&lt;br&gt;
"Stack overflow" forcing you to spend hours looking for answers on stackoverflow.com 😉.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Introduction To Solidity, Ethereum’s Programming Language</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Wed, 23 Jun 2021 15:09:41 +0000</pubDate>
      <link>https://dev.to/grayhat/introduction-of-solidity-ethereum-s-programming-language-257m</link>
      <guid>https://dev.to/grayhat/introduction-of-solidity-ethereum-s-programming-language-257m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkKNvkAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.opensourceforu.com/wp-content/uploads/2021/01/Solidity-programming-blockchain-featured-image-osfy-Jan-21.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkKNvkAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.opensourceforu.com/wp-content/uploads/2021/01/Solidity-programming-blockchain-featured-image-osfy-Jan-21.jpg" alt="Introduction of Solidity, Ethereum’s Programming Language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solidity is an object-oriented programming language that is used for writing smart contracts on various blockchain platforms.&lt;/p&gt;

&lt;p&gt;Solidity is mostly associated with Ethereum as it is developed by some core authors of the coin. It was first proposed in August 2014 by computer scientist Gavin Wood and later acquired by the Ethereum project’s Solidity team. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNyFvA_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://r48z5eeksx9s2hyas5b71c69-wpengine.netdna-ssl.com/blog/wp-content/uploads/2017/11/solidity-101-intro-to-ethereum-smart-contracts-and-solidit-1170x508.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNyFvA_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://r48z5eeksx9s2hyas5b71c69-wpengine.netdna-ssl.com/blog/wp-content/uploads/2017/11/solidity-101-intro-to-ethereum-smart-contracts-and-solidit-1170x508.png" alt="Introduction of Solidity, Ethereum’s Programming Language"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-solidity"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Solidity?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Solidity is a statically-typed programming language designed for developing smart contracts that run on the EVM. &lt;/p&gt;

&lt;p&gt;Solidity is compiled to bytecode that is executable on the EVM. With Solidity, developers can write applications that implement self-enforcing business logic embodied in smart contracts, leaving a non-repudiable and authoritative record of transactions. Writing smart contracts in contract-specific languages such as Solidity is claimed to be easy if you have prior programming experience.&lt;/p&gt;

&lt;p&gt;Its syntax is very similar to that of scripting languages like JavaScript, and it was influenced by existing languages such as C++, Python, and JavaScript.&lt;/p&gt;

&lt;p&gt;Solidity uses a vast number of programming concepts from other coding languages. For example, it has variables, string manipulation, classes, functions, arithmetic operations, and so on. While in a language like C, a programmer would be likely to create some form of a function, like ‘int main’ and ‘main,’ Solidity works with a ‘contract’ that is created analogously.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-solidity-worth-learning-it"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Is Solidity worth learning it?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;While jobs for blockchain are on the rise learning a programing language for said blockchains, it’s a huge bonus. You won’t be without a job, but if you haven’t mastered another language before, you’ll find challenges in the learning process. If you are committed to spending a few years learning it, then go ahead and do it since it’s not a bad opportunity to start now.&lt;/p&gt;

&lt;p&gt;You can use Solidity for several things, like creating your decentralized app or smart contracts. Decentralized applications, dApps are on the rise now, and it’s a good skill to know how to write them since the job market is going to need a lot more coders in the future specialized in this specific thing.&lt;/p&gt;

&lt;p&gt;More Sources: &lt;/p&gt;

&lt;p&gt;Check Out &lt;a href="https://www.amazon.com/Solidity-Programming-Essentials-beginners-blockchain/dp/1788831381"&gt;these books from amazon&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>solidity</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>6 ways to configure Webpack</title>
      <author>Benny Neugebauer</author>
      <pubDate>Wed, 23 Jun 2021 15:04:47 +0000</pubDate>
      <link>https://dev.to/typescripttv/6-ways-to-configure-webpack-5a33</link>
      <guid>https://dev.to/typescripttv/6-ways-to-configure-webpack-5a33</guid>
      <description>&lt;p&gt;&lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; is a build tool to make code, which was not primarily written for execution in browsers, executable in web browsers. With special plugins, webpack can manage many types of code, for example JavaScript, TypeScript, and Rust-generated WebAssembly.&lt;/p&gt;

&lt;p&gt;There are webpack plugins to also compile, minify, shim, chunk, and bundle code. However, webpack was not designed to execute tasks such as linting, building, or testing your app. For this purpose, there are task runners such as &lt;a href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;, &lt;a href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt; or &lt;a href="https://docs.npmjs.com/cli/v7/commands/npx"&gt;npx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to manage the functionality of webpack, it must be configured. Here are six different ways, in which webpack's configuration can be written.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-zero-config"&gt;
  &lt;/a&gt;
  1. Zero Config
&lt;/h2&gt;

&lt;p&gt;As of webpack version 4, you are not required to specify a configuration. By default, webpack assumes that your code starts at &lt;code&gt;src/index.js&lt;/code&gt; and will be bundled to &lt;code&gt;dist/main.js&lt;/code&gt;. This is very convenient and promotes &lt;a href="https://en.wikipedia.org/wiki/Convention_over_configuration"&gt;convention over configuration&lt;/a&gt; but it does not use webpack's full potential.&lt;/p&gt;

&lt;p&gt;Without a configuration, webpack does not know whether code should be compressed for faster execution or bundled with source maps for better tracking of errors. Webpack expresses its confusion with the following warning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WARNING in configuration&lt;/p&gt;

&lt;p&gt;The 'mode' option has not been set, webpack will fallback to 'production' for this value.&lt;/p&gt;

&lt;p&gt;Set 'mode' option to 'development' or 'production' to enable defaults for each environment.&lt;/p&gt;

&lt;p&gt;You can also set it to 'none' to disable any default behavior. Learn more: &lt;a href="https://webpack.js.org/configuration/mode/"&gt;https://webpack.js.org/configuration/mode/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's have a look at options to tell webpack how it should be configured.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-command-line-interface"&gt;
  &lt;/a&gt;
  2. Command Line Interface
&lt;/h2&gt;

&lt;p&gt;To see all available commands and options to configure webpack from the command line interface, you can run &lt;code&gt;webpack --help&lt;/code&gt;. This command will show you a list of arguments and how to use them. The following execution mimics the default (zero config) behaviour of webpack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;webpack &lt;span class="nt"&gt;--entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./src/index.js &lt;span class="nt"&gt;--output-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./dist &lt;span class="nt"&gt;--output-filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;main.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, CLI configurations can become quite long. In order to minimize the writing effort, there is also a shorthand version of the above command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;webpack ./src/index.js &lt;span class="nt"&gt;-o&lt;/span&gt; ./dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The simplified notation is at the expense of comprehensibility, which is why we will look at configuration files in the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-commonjs-configuration-file"&gt;
  &lt;/a&gt;
  3. CommonJS Configuration File
&lt;/h2&gt;

&lt;p&gt;Webpack can be instructed to read in a configuration file. By default, a file named &lt;code&gt;webpack.config.js&lt;/code&gt; is being used. You can create it by using the &lt;code&gt;npx webpack init&lt;/code&gt; command or by writing it yourself:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;js|jsx&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration uses the CommonJS module syntax with &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt;. Make sure that your &lt;code&gt;package.json&lt;/code&gt; does not define &lt;code&gt;"type": "module"&lt;/code&gt;, otherwise you will receive the following error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[webpack-cli] ReferenceError: require is not defined&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The configuration file should also be in the root of your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-esm-configuration-file"&gt;
  &lt;/a&gt;
  4. ESM Configuration File
&lt;/h2&gt;

&lt;p&gt;If your &lt;code&gt;package.json&lt;/code&gt; file specifies &lt;code&gt;"type": "module"&lt;/code&gt; and you want to make use of ECMAScript modules, then you can also modernize your webpack configuration:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;js|jsx&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-typescript-configuration-file"&gt;
  &lt;/a&gt;
  5. TypeScript Configuration File
&lt;/h2&gt;

&lt;p&gt;For those of you who like to work with TypeScript, webpack offers the possibility to use a configuration file written in TypeScript. &lt;/p&gt;

&lt;p&gt;Webpack v5 already ships with TypeScript definitions, so you don't have to install &lt;a href="https://www.npmjs.com/package/@types/webpack"&gt;@types/webpack&lt;/a&gt; but you need to install &lt;a href="https://www.npmjs.com/package/typescript"&gt;typescript&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/ts-node"&gt;ts-node&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/@types/node"&gt;@types/node&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because the extension &lt;code&gt;.ts&lt;/code&gt; does not correspond to the standard &lt;code&gt;.js&lt;/code&gt; extension, webpack has to be informed about this via the &lt;code&gt;--config&lt;/code&gt; argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;webpack &lt;span class="nt"&gt;--config&lt;/span&gt; webpack.config.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also have to make sure that the test patterns of your "rules" and your "resolve" definitions include the TypeScript extension:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.[&lt;/span&gt;&lt;span class="sr"&gt;tj&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;sx&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;☝️ Because the exemplary webpack configuration loads &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;, we can still point to a JavaScript entry file as Babel makes it possible to use JavaScript and TypeScript code simultaneously.&lt;/p&gt;

&lt;p&gt;⚠️ Please note that TypeScript configuration files cannot be used with ESM (see &lt;a href="https://github.com/webpack/webpack-cli/issues/2458"&gt;ESM in webpack.config.ts isn't supported&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-node-interface"&gt;
  &lt;/a&gt;
  6. Node Interface
&lt;/h2&gt;

&lt;p&gt;In addition to the execution via &lt;code&gt;webpack-cli&lt;/code&gt;, webpack also supports a programmatic interface. This allows you to compile your frontend code on a Node.js server. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;webpackConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;webappDir&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../webpack.config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useWebpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpackCompiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpackDevMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-dev-middleware&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpackHotMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-hot-middleware&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackDevMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackCompiler&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackHotMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackCompiler&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webappDir&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of consuming your existing &lt;code&gt;webpack.config.js&lt;/code&gt; file, you can also pass a configuration object to the &lt;code&gt;webpack&lt;/code&gt; API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-more"&gt;
  &lt;/a&gt;
  Want more?
&lt;/h2&gt;

&lt;p&gt;If you liked this post, then subscribe to &lt;a href="https://www.youtube.com/c/typescripttv"&gt;TypeScript TV&lt;/a&gt; on YouTube. Alternatively, you can follow me on &lt;strong&gt;DEV&lt;/strong&gt; to learn about best practices with TypeScript &amp;amp; JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>La relación entre una Lambda de Python y los Simpsons</title>
      <author>Ale Sánchez</author>
      <pubDate>Wed, 23 Jun 2021 15:00:39 +0000</pubDate>
      <link>https://dev.to/alesanchez/la-relacion-entre-una-lambda-de-python-y-los-simpsons-5797</link>
      <guid>https://dev.to/alesanchez/la-relacion-entre-una-lambda-de-python-y-los-simpsons-5797</guid>
      <description>&lt;p&gt;Pues, aparentemente, has leído bien. Hace aproximadamente un mes empecé un Bootcamp de Big Data y Machine Learning en &lt;a href="https://www.corecode.school/bootcamp/big-data-machine-learning"&gt;Core Scool&lt;/a&gt; que está siendo una pasada (casi no se ha notado la publicidad). El caso es que en una de las clases se nos presentó el siguiente código cuando hablábamos de &lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;currying&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;potencias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Todos en clase pensamos (ilusos de nosotros...) que el resultado de ese print iba a ser 16 (

&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;242^4&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
) pero cuál fue nuestra sorpresa (y la tuya si pruebas ese código) al ver que el resultado era nada más y nada menos que 65536. Pero... ¿por qué?&lt;/p&gt;

&lt;p&gt;Para resolver esa cuestión tengo que hablar del &lt;code&gt;scope&lt;/code&gt; y, para eso, voy a usar a Los Simpons. Vamos al lío.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-por-las-met%C3%A1foras"&gt;
  &lt;/a&gt;
  A por las metáforas
&lt;/h2&gt;

&lt;p&gt;Podría hacerte una definición técnica de lo que es el scope, cómo funciona y cómo afecta, pero la verdad es que ese no es mi estilo en absoluto, así voy con una metáfora.&lt;/p&gt;

&lt;p&gt;Como definición súper general, simplificada y (si la analizas con detalle) parcialmente incorrecta, puedo decir que el scope es una forma que tiene python (y prácticamente cualquier lenguaje) de compartimentar los accesos a las variables.&lt;/p&gt;

&lt;p&gt;Dicho esto, imagina que el código es una casa. Concretamente, la casa de los Simpsons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5tAZhcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ezahlpg9ckariyakk3b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5tAZhcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ezahlpg9ckariyakk3b.jpg" alt="Plano simpsons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En esa casa hay distintas habitaciones e incluso distintas plantas. Imagina también (por simplificar) que todas las estancias son independientes entre sí y que, lo único común a todas ellas son los pasillos y las escaleras.&lt;/p&gt;

&lt;p&gt;Y, por último, imagina que si tú estás en una habitación y necesitas algo, solo puedes ir a buscarlo &lt;strong&gt;saliendo&lt;/strong&gt; de habitaciones.&lt;/p&gt;

&lt;p&gt;Con esto vas a entender el scope perfectamente. Trasladando esto a código, podríamos decir que cada habitación de la casa es un scope distinto. Por simplicidad, vamos a quedarnos solo con la planta de arriba. Si pinto los scopes que habría en la casa de Los Simpsons, quedaría algo como:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7imA_XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwjx7hqxutlqewjbt0io.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7imA_XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwjx7hqxutlqewjbt0io.png" alt="Plano de la casa con scopes superpuestos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si te fijas, cada habitación tiene su propio color, porque es un scope distinto. Incluso las habitaciones que están dentro de otras (el baño que está dentro de la habitación de Homer y Marge), ¡tienen su propio color!&lt;/p&gt;

&lt;p&gt;Una cosa más es que todo el pasillo y las escaleras tienen el mismo scope, el rojo intenso.&lt;/p&gt;

&lt;p&gt;Si yo te digo que como tienes una cama en la habitación de Bart y otra en la de Lisa, tienes 2 camas juntas, me llamarías loco, ¿verdad? Porque no están juntas, están en habitaciones (scopes) diferentes. Pues con las variables es lo mismo.&lt;/p&gt;

&lt;p&gt;Vamos a detallar esto un poco más, colocando objetos en algunas habitaciones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_dQUBky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oznc6kitfmkmoirwc50r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_dQUBky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oznc6kitfmkmoirwc50r.png" alt="Plano de la casa con objetos superpuestos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Puedes ver que he colocado una bici en el cuarto de Homer y Marge, un jarrón (ánfora) en el de Bart y un tambor en el pasillo.&lt;/p&gt;

&lt;p&gt;Ahora imagina que, como dijimos antes, no puedes ir a buscar nada entrando a otra habitación, solo saliendo. Si estuvieses en el cuarto de Lisa y necesitases un jarrón, ¿podrías ir al cuarto de Bart a por él? Veamos...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sales de la habitación de Lisa al pasillo ✔&lt;/li&gt;
&lt;li&gt;Entras al cuarto de Bart ❌&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Has tenido que entrar en una habitación, así que no puedes ir. Por lo tanto podemos decir que, estando en el cuarto de Lisa, no tienes ningún jarrón.&lt;/p&gt;

&lt;p&gt;Vamos a intentar lo mismo, desde le baño de la habitación de Homer y Marge, pero con la bici.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sales del baño a la habitación de Homer y Marge ✔&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ya tienes la bici!! Y, una vez que la tienes, puedes usarla todo lo que necesites.&lt;/p&gt;

&lt;p&gt;Una última prueba! Vamos a intentar ir a por el tambor desde el baño de Homer y Marge:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sales del baño a la habitación de Homer y Marge ✔&lt;/li&gt;
&lt;li&gt;Sales de la habitación al pasillo ✔&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pues también puedes! Entonces, como regla general puedo decir que, desde cualquier habitación, puedes coger lo que esté en el pasillo.&lt;/p&gt;

&lt;p&gt;Sin embargo no al contrario. Desde el pasillo, no puedes coger nada de ninguna habitación (porque no puedes entrar).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#qu%C3%A9-tiene-todo-esto-que-ver-con-python"&gt;
  &lt;/a&gt;
  ¿Qué tiene todo esto que ver con Python?
&lt;/h2&gt;

&lt;p&gt;Lo bonito de todo esto es que es aplicable a Python y a (prácticamente) cualquier lenguaje moderno.&lt;/p&gt;

&lt;p&gt;Si el lenguaje solo tuviese un único scope, desde cualquier parte del código podrías modificar cualquier variable y sería un poco caótico y difícil de depurar.&lt;/p&gt;

&lt;p&gt;En Python hay 4 scopes distintos y hay un acrónimo para recordarlos: LEGB. Son las siglas (en inglés) de:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local&lt;/li&gt;
&lt;li&gt;Envoltura (Enclosing)&lt;/li&gt;
&lt;li&gt;Global&lt;/li&gt;
&lt;li&gt;Incorporado (Built-in)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-se-crea-un-scope-en-python"&gt;
  &lt;/a&gt;
  Cómo se crea un scope en python
&lt;/h3&gt;

&lt;p&gt;Python crea scopes cuando se define:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Una función &lt;code&gt;lambda&lt;/code&gt;: Cuando haces &lt;code&gt;lambda x: print(x)&lt;/code&gt; esa lambda está definiendo un scope local en el que existe la variable &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Una función: Cuando creas una función con la palabra &lt;code&gt;def&lt;/code&gt;, estás creando un scope. En el siguiente código:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;param_1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;param_2&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Estás creando una función que define un scope en el que se definen las variables &lt;code&gt;param_1&lt;/code&gt;, &lt;code&gt;param_2&lt;/code&gt; y &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clases: Al definir una clase con la palabra reservada &lt;code&gt;class&lt;/code&gt;, también se crea un scope. En este caso es un poco especial porque desde fuera sí puedes acceder al scope de la clase (más o menos). Así que vamos a dejar este caso aparte.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En cualquiera de estos 3 casos, estarás creando un scope local y, por tanto, un código como este:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;local_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hola"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt;&amp;gt; "Hola"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Funciona perfectamente y estaría creando un scope local en &lt;code&gt;local_scope&lt;/code&gt; que contendría la variable &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: Un scope se crea EN LA LLAMADA a la función y NO en su definición. Por eso, si llamas 100 veces a la función &lt;code&gt;local_scope&lt;/code&gt;, tendrás 100 scopes diferentes. Esto es así incluso si haces llamadas recursivas.&lt;/p&gt;

&lt;p&gt;Otra cosa importante es que, cuando tú defines una variable en la cabecera de una función, esa variable &lt;strong&gt;ya existirá&lt;/strong&gt; en el scope de esa función. O lo que es lo mismo, ya está definida y puedes usarla en el scope local de esa función todo lo que necesites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scope-local"&gt;
  &lt;/a&gt;
  Scope local
&lt;/h3&gt;

&lt;p&gt;Es el que acabas de ver. Equivalente a una habitación. Defines una función (lambda o normal), y ahí tienes tu scope. Todo lo que definas en la cabecera o en el cuerpo de la función formará parte de tu scope local.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#envoltura"&gt;
  &lt;/a&gt;
  Envoltura
&lt;/h3&gt;

&lt;p&gt;Esto no es más que un scope dentro de un scope. Lo mismo que pasaba con el baño en el cuarto de Homer y Marge. Para hacer esto, lo único que tienes que hacer es crear un scope dentro de otro. Por ejemplo, anidando funciones:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enclosing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_out&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;other_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"HI"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enclosed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_in&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;enclosed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos a ver los scopes de este código de una manera un poco más gráfica:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8JAvWuzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mriwxb3gylylv4wpx8pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JAvWuzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mriwxb3gylylv4wpx8pf.png" alt="Código con scopes superpuestos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La función &lt;code&gt;enclosing&lt;/code&gt; estaría definiendo el scope naranja y la &lt;code&gt;enclosed&lt;/code&gt; un scope dentro del anterior.&lt;/p&gt;

&lt;p&gt;Por lo tanto, si ejecutamos ese código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; function_in = enclosing("Out") 
&amp;gt;&amp;gt;&amp;gt; function_in("In") 
HI
Out
In
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pero sin embargo, si intentamos acceder directamente a la función interna:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; enclosed&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"In"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;, line 1, &lt;span class="k"&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
NameError: name &lt;span class="s1"&gt;'enclosed'&lt;/span&gt; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se queja porque no podemos entrar en habitaciones, solo salir de ellas!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global"&gt;
  &lt;/a&gt;
  Global
&lt;/h3&gt;

&lt;p&gt;El scope global sería el pasillo. Es un scope que está disponible para todos, es el mas general y también se le llama scope de módulo (module scope). Es el scope general que tienes en tu archivo de Python. Un ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;super_global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuera de todo"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;super_global&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function_enclosing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function_enclosed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;super_global&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;my_function_enclosed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(super_global)
Estoy fuera de todo
&amp;gt;&amp;gt;&amp;gt; my_function()
Estoy fuera de todo
&amp;gt;&amp;gt;&amp;gt; my_function_enclosing()
Estoy fuera de todo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Todas tienen acceso a la variable &lt;code&gt;super_global&lt;/code&gt; porque sólo tienen que salir de habitaciones para ir a buscarla.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#incorporado-builtin"&gt;
  &lt;/a&gt;
  Incorporado (Built-in)
&lt;/h3&gt;

&lt;p&gt;Este es un scope especial, es un scope en el que hay cosas que vienen por defecto con python y que no es necesario declarar, importar ni nada. Un ejemplo de lo que hay en este scope son las funciones &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;sorted&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;Por eso podemos hacer cosas como:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sin necesidad de definir ni importar &lt;code&gt;len&lt;/code&gt; en ninguna parte.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-podemos-a%C3%B1adir-elementos-a-un-scope"&gt;
  &lt;/a&gt;
  ¿Cómo podemos añadir elementos a un scope?
&lt;/h3&gt;

&lt;p&gt;Hay varias maneras de hacer esto. La primera y la más evidente es declarando una nueva variable. Al hacer &lt;code&gt;my_var = "Hola"&lt;/code&gt; estás añadiendo una nueva variable &lt;code&gt;my_var&lt;/code&gt; a tu scope.&lt;/p&gt;

&lt;p&gt;Otra manera es usar un &lt;code&gt;import&lt;/code&gt;. Cuando tú haces &lt;code&gt;import math&lt;/code&gt; estás trayendo todo lo que haya en el scope global del módulo &lt;code&gt;math&lt;/code&gt; a tu scope. Por eso puedes usar funciones como &lt;code&gt;sqrt&lt;/code&gt; en tu scope solo si importas primero &lt;code&gt;math&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por último, me gustaría remarcar que la única forma de declarar una nueva variable en un scope no es con la forma &lt;code&gt;var = "algo"&lt;/code&gt;. Cuando haces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Estás añadiendo la variable &lt;code&gt;param&lt;/code&gt; al scope de la función &lt;code&gt;func&lt;/code&gt; aunque no estés asignándola a nada en ese momento. En el momento de la llamada se creará un scope para esa función y esa variable se creará automáticamente en el scope con el valor que haya recibido el parámetro.&lt;/p&gt;

&lt;p&gt;Un último apunte es que al hacer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;También estás añadiendo la variable &lt;code&gt;number&lt;/code&gt; a scope global (si el &lt;code&gt;for&lt;/code&gt; lo tienes dentro de una función, lo añadirías a esa función).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#y-qu%C3%A9-leches-es-eso-del-shadowing"&gt;
  &lt;/a&gt;
  ¿Y qué leches es eso del shadowing?
&lt;/h3&gt;

&lt;p&gt;El &lt;em&gt;shadowing&lt;/em&gt; no es más que "eclipsar" una variable de un scope externo con una variable de un scope interno. Vamos a verlo con un ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy globalísima"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy localísima"&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Párate un minuto y piensa qué debería imprimir ese código...&lt;/p&gt;

&lt;p&gt;Te pongo la respuesta:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(var)
Soy globalísima
&amp;gt;&amp;gt;&amp;gt; modify()
Soy localísima
&amp;gt;&amp;gt;&amp;gt; print(var)
Soy globalísima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Un momento, un momento... ¿no debería aparecer "Soy localísima" dos veces? Porque estoy modificando la variable del scope global en la función, ¿cierto?&lt;/p&gt;

&lt;p&gt;Lo cierto es que no. Lo que estoy haciendo es &lt;strong&gt;definir&lt;/strong&gt; una variable nueva en el scope local que eclipsa (hace &lt;em&gt;shadowing&lt;/em&gt;) a la del scope global.&lt;/p&gt;

&lt;p&gt;De la misma manera, con scopes de envoltura, si hago esto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuerísima"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy dentro del tó"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y ejecuto esa función, habrá un comportamiento similar al anterior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; outter()
Estoy fuerísima
Estoy dentro del tó
Estoy fuerísima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al re-asignar la variable &lt;code&gt;var&lt;/code&gt; en la función &lt;code&gt;inner&lt;/code&gt;, lo que estoy haciendo es declarar una variable nueva que hace &lt;code&gt;shadowing&lt;/code&gt; a la externa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pero-todo-esto-no-iba-de-una-lambda"&gt;
  &lt;/a&gt;
  ¿Pero todo esto no iba de una lambda?
&lt;/h2&gt;

&lt;p&gt;Pues sí!! Y ahora puedes entender perfectamente por qué pasaba aquello en nuestro código. Vamos a volver al código inicial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;potencias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Según nuestra intuición eso debería dar 16, pero da 65535. Vamos a analizar el código con los conocimientos que tenemos ahora.&lt;/p&gt;

&lt;p&gt;Sabes que tenemos un scope global que envuelve a todo el código.&lt;/p&gt;

&lt;p&gt;Además sabes que una lambda, como buena función, crea otro scope.&lt;/p&gt;

&lt;p&gt;Pero sabes una cosa más... Que los scopes de una función se crean &lt;strong&gt;en el momento de su llamada&lt;/strong&gt; y no en su definición.&lt;/p&gt;

&lt;p&gt;Eso significa que, cuando creas la primera lambda, el &lt;code&gt;number&lt;/code&gt; que tiene como exponente será 2, en la segunda lambda será 4 y en la tercera 16.&lt;/p&gt;

&lt;p&gt;Pero una vez que termina el bucle, &lt;code&gt;number&lt;/code&gt; permanece definido como 16, pues es el último valor de la lista. Entonces cuando llamas a &lt;code&gt;potencias[2]&lt;/code&gt; se llama la primera lambda, &lt;strong&gt;en ese momento&lt;/strong&gt; se crea un scope, y se busca number en el scope superior (el global) y, como es 16, al hacer &lt;code&gt;potencias[2](4)&lt;/code&gt; estamos haciendo 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;16416^4&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;1&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;6&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
, que es nada más y nada menos que nuestro resultado, 65535.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-solucionarlo"&gt;
  &lt;/a&gt;
  ¿Cómo solucionarlo?
&lt;/h3&gt;

&lt;p&gt;Sabes que necesitas que &lt;code&gt;number&lt;/code&gt;, el exponente, quede &lt;strong&gt;definida&lt;/strong&gt; en el scope de la lambda en el momento de la creación, en vez de acceder a la del scope global.&lt;/p&gt;

&lt;p&gt;Para eso sanes que si defines esa variable como argumento de la lambda y la igualamos a la superior, esa variable quedará definida y fijada con ese valor al crearla, incluso si la llamamos igual (por el shadowing).&lt;/p&gt;

&lt;p&gt;Si cambias el código a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;potencias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Estás definiendo una variable &lt;code&gt;number&lt;/code&gt; dentro de ese scope, que tomará por defecto el valor que tenga la variable del bucle homónima en ese momento. Por eso cuando llames a &lt;code&gt;potencias[2](4)&lt;/code&gt;, se creará un scope para esa función, pero con la variable number prefijada al valor que tenía en el momento de la creación de la lambda, pues ese valor por defecto es fijo.&lt;/p&gt;

&lt;p&gt;Ahora sí, el resultado de esa ejecución es:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#c%C3%B3mo-modificar-el-scope"&gt;
  &lt;/a&gt;
  Cómo modificar el scope
&lt;/h2&gt;

&lt;p&gt;Hay un par de opciones para modificar el scope de Python y, aunque útiles, debemos tratarlas con mucho cuidado.&lt;/p&gt;

&lt;p&gt;Imagina que tienes, como en el ejemplo del shadowing, este código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy globalísima"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy localísima"&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y tú necesitas irremediablemente modificar la variable &lt;code&gt;var&lt;/code&gt; dentro de la función. Hay una forma de modificar el scope de esa función para que esa variable se "enlace" bidireccionalmente con la del scope global.&lt;/p&gt;

&lt;p&gt;Esto significa que tanto si la lees como si la modificas estarás modificando la del global. Para esto se usa la palabra &lt;code&gt;global&lt;/code&gt; seguida del nombre de la variable que queremos enlazar con una global. Si bien vimos que el código anterior devolvía:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(var)
Soy globalísima
&amp;gt;&amp;gt;&amp;gt; modify()
Soy localísima
&amp;gt;&amp;gt;&amp;gt; print(var)
Soy globalísima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al cambiar el código a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy globalísima"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy localísima"&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado de ejecutarlo nuevamente será:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(var)
Soy globalísima
&amp;gt;&amp;gt;&amp;gt; modify()
Soy localísima
&amp;gt;&amp;gt;&amp;gt; print(var)
Soy localísima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hemos modificado la variable global satisfactoriamente!&lt;/p&gt;

&lt;p&gt;Ahora imagina, por otro lado, el siguiente código que vimos también en el shadowing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuerísima"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy dentro del tó"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y, de nuevo, necesitas irremediablemente modificar la variable &lt;code&gt;var&lt;/code&gt; dentro de la función &lt;code&gt;inner&lt;/code&gt;. En este caso &lt;code&gt;global&lt;/code&gt; no nos sirve, pues estaríamos enlazando &lt;code&gt;var&lt;/code&gt; a una variable del scope global llamada &lt;code&gt;var&lt;/code&gt;, que no existe. Si intentamos hacer esto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuerísima"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy dentro del tó"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado es:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; outter()
Estoy fuerísima
Estoy dentro del tó
Estoy fuerísima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Que es lo mismo que antes, solo que ahora en el scope global, tendremos una variable &lt;code&gt;var&lt;/code&gt; con el valor "Estoy dentro del tó", que no es lo que queremos.&lt;/p&gt;

&lt;p&gt;En este caso python nos ofrece otra palabra que se usa exactamente igual que la anterior y es &lt;code&gt;nonlocal&lt;/code&gt;. Esto lo que hace es buscar la variable etiquetada como &lt;code&gt;nonlocal&lt;/code&gt; en el scope superior (y en el superior de ese, y así sucesivamente) y enlazarla de manera bidireccional igual que se hacía con global. Por tanto, si cambiamos el código a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuerísima"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy dentro del tó"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Estaremos enlazando la variable &lt;code&gt;var&lt;/code&gt; de inner, con la variable &lt;code&gt;var&lt;/code&gt; de outter y el resultado será:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; outter()
Estoy fuerísima
Estoy dentro del tó
Estoy dentro del tó
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora sí, una modificación de la variable exterior desde la función interior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importante&lt;/strong&gt;: &lt;code&gt;nonlocal&lt;/code&gt; busca en los scopes superiores de manera sucesiva hasta llegar al global. Si cuando llega al global no ha encontrado esa variable, dará un error. &lt;code&gt;nonlocal&lt;/code&gt; no permite enlazar una variable interna con una global, para eso tenemos la palabra &lt;code&gt;global&lt;/code&gt;. Un ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hola"&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Adios"&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  File "&amp;lt;stdin&amp;gt;", line 3
SyntaxError: no binding for nonlocal 'var' found
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dice que no hay ninguna variable &lt;code&gt;var&lt;/code&gt; a la que enlazar. Sin embargo al cambiar por &lt;code&gt;global&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hola"&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Adios"&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El código funciona sin problemas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algunas-curiosidades-de-python"&gt;
  &lt;/a&gt;
  Algunas curiosidades de Python
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#el-scope-en-los-bucles"&gt;
  &lt;/a&gt;
  El scope en los bucles
&lt;/h3&gt;

&lt;p&gt;Ni un bucle &lt;code&gt;for&lt;/code&gt; ni un bucle &lt;code&gt;while&lt;/code&gt; definen un nuevo scope. Por tanto, cualquier variable que definas dentro de ellos seguirá viva fuera del bucle. Incluso la variable que definas en el bucle en sí!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado de esa ejecución será:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0
1
2
3
4
&amp;gt;&amp;gt;&amp;gt; print(number)
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La variable &lt;code&gt;number&lt;/code&gt; sigue existiendo incluso después del bucle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#el-scope-en-los-bloques-if"&gt;
  &lt;/a&gt;
  El scope en los bloques if
&lt;/h3&gt;

&lt;p&gt;Pasa exactamente igual que en los bucles, toda variable que definas dentro de un bloque if, estará disponible después.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hola"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado será:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hola
Hola
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Algo muy similar a lo que pasaba en el anterior caso.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#el-scope-de-los-listdict-comprehension"&gt;
  &lt;/a&gt;
  El scope de los list/dict comprehension
&lt;/h3&gt;

&lt;p&gt;Sin embargo, en los list comprehension el scope se comporta ligeramente distinto. Al ejecutar el código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si luego intentamos acceder a &lt;code&gt;number&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [number for number in range(5)]
[0, 1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; number
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
NameError: name 'number' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Porque en un list/dict comprehension, las variables no se crean en el scope en el que estén, sino que solo existen durante el comprehesion concreto.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scope-en-un-tryexcept"&gt;
  &lt;/a&gt;
  Scope en un try/except
&lt;/h3&gt;

&lt;p&gt;Cuando tenemos un bloque &lt;code&gt;try/except&lt;/code&gt; podemos pensar que se van a comportar igual que un &lt;code&gt;if&lt;/code&gt;, pero hay una particularidad. Imagina el siguiente código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si intentamos acceder a &lt;code&gt;a&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a
1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La tenemos disponible en el scope sin problema. Pero ahora mira este código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si ahora intentamos acceder a &lt;code&gt;e&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; e
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
NameError: name 'e' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La variable &lt;code&gt;e&lt;/code&gt;, aunque se define en el except y se entra por ahí, no se crea en el scope.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusiones"&gt;
  &lt;/a&gt;
  Conclusiones
&lt;/h2&gt;

&lt;p&gt;Pues básicamente has entendido cómo funcionan los scopes en Python, cómo puedes usarlos a tu favor y qué cosas debes tener en cuenta.&lt;/p&gt;

&lt;p&gt;Además, has aprendido qué estructuras crean scopes en Python, cómo traer variables nuevas a tu scope e incluso cómo modificar el comportamiento de los scopes en Python con &lt;code&gt;global&lt;/code&gt; y &lt;code&gt;nonlocal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para cualquier duda que tengas te leo en los comentarios y, para aprender cosas como estas y &lt;strong&gt;mucho&lt;/strong&gt; más molonas, no dejes de mirar los cursos de &lt;a href="https://www.corecode.school/bootcamp/big-data-machine-learning"&gt;Core Scool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nos vemos en el próximo post!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Accordion Tabs with pure CSS</title>
      <author>Sergiy Babich</author>
      <pubDate>Wed, 23 Jun 2021 14:31:52 +0000</pubDate>
      <link>https://dev.to/sergiybabich/accordion-tabs-with-pure-css-35ji</link>
      <guid>https://dev.to/sergiybabich/accordion-tabs-with-pure-css-35ji</guid>
      <description>&lt;p&gt;Yep, this is yet another “article” about how amazing pure CSS is and how you can do something cool without a line of JavaScript. Why am I bothering to write it?&lt;/p&gt;

&lt;p&gt;Because I am still fascinated by how amazing pure CSS is and how you can do something cool without a line of JavaScript.&lt;/p&gt;

&lt;p&gt;Before we start — you can find demo of this code hosted &lt;a href="https://sergiybabich.github.io/html-accordion-tabs/"&gt;here&lt;/a&gt; and the code itself hosted &lt;a href="https://github.com/sergiybabich/html-accordion-tabs"&gt;here&lt;/a&gt;. Feel free to explore and play around!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Final tiny disclaimer — all this is just for fun and to show you how amazing CSS is.&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-structure"&gt;
  &lt;/a&gt;
  HTML structure
&lt;/h2&gt;

&lt;p&gt;We will use very simple HTML markup to define our accordion tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.tabs-container&lt;/code&gt; — wrapper element to host all tab related elements;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;input.tab-actor&lt;/code&gt; — hidden radio-button to control tab content visibility;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;label.tab-button&lt;/code&gt; — label linked to input, serving as tab button;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.tab-content&lt;/code&gt; — wrapper for any content you’ll feel worth putting into;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tiniest example ever will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tab-1"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tabs"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-actor"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"tab-1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;…&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-this-works"&gt;
  &lt;/a&gt;
  How this works
&lt;/h2&gt;

&lt;p&gt;The main idea is to use the very simple yet powerful ability of HTML form controls to have a state and the ability to access this state with CSS pseudo-classes. To be more precise, I’ll use &lt;code&gt;:checked&lt;/code&gt; pseudo-class here. This means I can style adjacent siblings of checked input using + combinator.&lt;/p&gt;

&lt;p&gt;To emulate tabs behaviour I need to be able to display only active tab content, and by active I mean one that is the closest adjacent to checked radio.&lt;/p&gt;

&lt;p&gt;Radio-button itself also should be hidden, leaving only the linked label to be visible and interactive. Long story short, this is how these tabs are intended to work. Let’s write some basic CSS code for our tabs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-basic-code"&gt;
  &lt;/a&gt;
  Some basic code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--tab-button-order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--tab-content-order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-actor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--tab-button-order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--tab-content-order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s go through each rule to understand what happens.&lt;/p&gt;

&lt;p&gt;First of all, I decided to create some CSS variables for order property, so this is what is inside &lt;code&gt;:root&lt;/code&gt; rule. We’ll get back to this a bit later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using flex layout as it’ll allow us to use an unknown amount of tabs because flex layout distributes its children automatically against fixed-width values we’ll need to put manually otherwise.&lt;/p&gt;

&lt;p&gt;By default all flex items are cramped in one line, but we need our tab buttons to be placed at top and content at bottom. Using flex-wrap: wrap will allow flex layout to put large elements to next row.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tab-1"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tabs"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-actor"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"tab-1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we link label to input — using &lt;code&gt;id&lt;/code&gt; attribute for input and for attribute for label. When &lt;em&gt;input-label&lt;/em&gt; pair has same value for these attributes, clicking on label will activate input as we would click directly on input. This will allow us hide input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-actor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will add some black flex magic to achieve layout we want.&lt;/p&gt;

&lt;p&gt;HTML we wrote would result in next:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tab]
[content]
[tab]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what we need is following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tab][tab]
[content]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To achieve our goal we will use an &lt;code&gt;order&lt;/code&gt; CSS property which orders (no puns intended) elements inside flex layout despite actual position in DOM-tree. The following code sets the order for &lt;code&gt;.tab-button&lt;/code&gt; elements to be at the start of layout and &lt;code&gt;.tab-content&lt;/code&gt; to be at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--tab-button-order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--tab-content-order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.tab-content&lt;/code&gt; is hidden by default. We will unhide active tab content using following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s a big selector, for sure, but it does all the magic. All content is hidden and we want to display only content corresponding to the activated tab button. This selector literally says following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Display content after button which follows checked input&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;+&lt;/code&gt; combinator selects immediately adjacent elements, this is why our HTML code should follow this exact order.&lt;/p&gt;

&lt;p&gt;There is another approach, using &lt;code&gt;~&lt;/code&gt; combinator, which is also adjacent, but not strict and selects &lt;strong&gt;all&lt;/strong&gt; matching adjacent elements. Using &lt;code&gt;~&lt;/code&gt; at first glance will shorten the selector to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but in this case first tab will activate all adjacent content, and to avoid this we’ll need to specify which tab displays which content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Don't write code like this. Please. */&lt;/span&gt;
&lt;span class="nc"&gt;.tab-actor.tab-1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content.tab-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.tab-actor.tab-2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content.tab-2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.tab-actor.tab-3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content.tab-3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.tab-actor.tab-4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content.tab-4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not that much optimization, to be honest.&lt;/p&gt;

&lt;p&gt;Ok, now we have not that pretty, but actually working tabs with pure CSS and HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-time"&gt;
  &lt;/a&gt;
  Music time!
&lt;/h2&gt;

&lt;p&gt;Or, to be precise — time to convert tabs to the accordion.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;On small screens tabs can be not the best approach to display content and exactly same layout we were trying to avoid at the beginning can come in handy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Desktop:
[tab][tab]
[content]

Mobile:
[tab]
[tab]
[content]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do is just revert flex order and adjust button width for small screens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.tab-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it. It just works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-wait-there-is-more"&gt;
  &lt;/a&gt;
  But wait! There is more!
&lt;/h2&gt;

&lt;p&gt;It’s all cool and great, but these tabs are booooring. Let’s give them a bit of fanciness.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1280px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;margin-inline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-bottom-color&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;136&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added some paddings, colours and a bit of animation. Nice! Looks great now! But, as you can notice, content in «mobile» mode is switching extremely boring, without a spark of joy. Let’s add this spark then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;ivory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here? We added a &lt;code&gt;.full-height&lt;/code&gt; class to our &lt;code&gt;.tab-container&lt;/code&gt; and sprinkled some fun CSS over it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right here we are telling our accordion to occupy exactly full-screen height and order all children in column flex layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are casting some magic on &lt;code&gt;.tab-content&lt;/code&gt;, allowing it to expand and collapse with a neat animation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#epilogue"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h2&gt;

&lt;p&gt;That’s, my friends, is how I met… Ah, sorry, it is how we can make responsive tabs which switch to accordion layout on the fly without a single line of JS.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Bash cheat sheet: Top 28 commands for you to learn 🤺</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Wed, 23 Jun 2021 14:30:15 +0000</pubDate>
      <link>https://dev.to/ankit01oss/bash-cheat-sheet-top-28-commands-for-you-to-learn-15ee</link>
      <guid>https://dev.to/ankit01oss/bash-cheat-sheet-top-28-commands-for-you-to-learn-15ee</guid>
      <description>&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;Today I want to bring you a summary of top Bash commands. Bash is a very popular shell program. It stands for 'Bourne Again Shell'. There are also other types of shells, but Bash is the most widely available and used shell.&lt;/p&gt;

&lt;p&gt;Anything inside [ ] means that it's optional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-ls-endraw-list-directory-contents"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;ls&lt;/code&gt; - List directory contents
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; is one of the most common commands. It is used to list the contents of a directory.&lt;/p&gt;

&lt;p&gt;Syntax: ls [options][files]&lt;br&gt;
Common options: -a, -l&lt;br&gt;&lt;br&gt;
&lt;code&gt;ls -a&lt;/code&gt; shows hidden(dot) files&lt;br&gt;
&lt;code&gt;ls -l&lt;/code&gt; shows file details&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-raw-echo-endraw-prints-text-to-the-terminal-window"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;echo&lt;/code&gt; - Prints text to the terminal window
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; prints text to the terminal window. It is used widely for printing status texts and values of environment variables.&lt;br&gt;
Syntax: echo [option(s)] [string(s)]&lt;br&gt;
Common options: -e, -n&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash-3.2$ echo "hello"
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#3-raw-touch-endraw-creates-a-file"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;touch&lt;/code&gt; - Creates a file
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; can be used to create an empty file quickly. It can also be used to modify file timestamps.&lt;br&gt;
Syntax: touch [option(s)] file_name(s)&lt;br&gt;
Common options: -a, -m, -r, -d&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash-3.2$ touch a b
bash-3.2$ ls
a     b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-raw-mkdir-endraw-create-a-directory"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;mkdir&lt;/code&gt; - Create a directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; is used to create new directories. You can create multiple directories simultaneously.&lt;br&gt;
Syntax: mkdir [option(s)] directory_name(s)&lt;br&gt;
Common options: -m, -p, -v&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash-3.2$ ls
a     b
bash-3.2$ mkdir c
bash-3.2$ ls
a     b    c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#5-raw-grep-endraw-search-for-particular-pattern"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;grep&lt;/code&gt; - Search for particular pattern
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; is used for finding text in files. It comes in handy when you're tasked to find a particular string or pattern within a file.&lt;br&gt;
Syntax: &lt;code&gt;grep&lt;/code&gt; [option(s)] pattern [file(s)]&lt;br&gt;
Common options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-i&lt;/code&gt; performs a case-insensitive search&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-n&lt;/code&gt; displays the lines containing the pattern along with the line numbers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-c&lt;/code&gt; displays the count of the matching patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#6-raw-man-endraw-print-manual-or-get-help-for-a-command"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;man&lt;/code&gt; - Print manual or get help for a command
&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;man&lt;/code&gt; command to bring up a manual for any command. For example, if you don't know what &lt;code&gt;mkdir&lt;/code&gt; does, then use the &lt;code&gt;man&lt;/code&gt; command to see its manual.&lt;br&gt;
Syntax: man [option(s)] keyword(s)&lt;br&gt;
Common options: -w, -f, -b&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash-3.2$ man mkdir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#7-raw-pwd-endraw-print-working-directory"&gt;
  &lt;/a&gt;
  7. &lt;code&gt;pwd&lt;/code&gt; - Print working directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; command prints the working directory you are currently in.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#8-raw-cd-endraw-change-directory"&gt;
  &lt;/a&gt;
  8. &lt;code&gt;cd&lt;/code&gt; - Change directory
&lt;/h3&gt;

&lt;p&gt;You can change to a different directory with &lt;code&gt;cd&lt;/code&gt; command. Use &lt;code&gt;cd ..&lt;/code&gt; to go to the parent directory.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-raw-mv-endraw-move-or-rename-directory"&gt;
  &lt;/a&gt;
  9. &lt;code&gt;mv&lt;/code&gt; - Move or rename directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; is used to move or rename directories. Without this command, you would have to individually rename each file which is tedious.&lt;br&gt;
Syntax: mv [option(s)] argument(s)&lt;br&gt;
Common options: -i, -b&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10-raw-rmdir-endraw-remove-directory"&gt;
  &lt;/a&gt;
  10. &lt;code&gt;rmdir&lt;/code&gt; - Remove directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rmdir&lt;/code&gt; will remove empty directories. This can help clean up space on your computer and keep files and folders organized. There are two ways to remove directories: rm and rmdir. &lt;code&gt;rm&lt;/code&gt; will remove directories and files even if it's not empty whereas &lt;code&gt;rmdir&lt;/code&gt; will only delete empty directories.&lt;br&gt;
Syntax: rmdir [option(s)] directory_names&lt;br&gt;
Common options: -p&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#11-raw-locate-endraw-locate-a-specific-file-or-directory"&gt;
  &lt;/a&gt;
  11. &lt;code&gt;locate&lt;/code&gt; - Locate a specific file or directory
&lt;/h3&gt;

&lt;p&gt;It is the simplest way to find a file or directory. It searches a cached list of files to find the location of a specified file.&lt;br&gt;
Syntax: locate [option(s)] file_name(s)&lt;br&gt;
Common options: -q, -n, -i&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#12-raw-less-endraw-view-the-contents-of-a-text-file"&gt;
  &lt;/a&gt;
  12. &lt;code&gt;less&lt;/code&gt; - view the contents of a text file
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;less&lt;/code&gt; command allows you to view files without opening an editor. It’s faster to use, and there’s no chance of you inadvertently modifying the file.&lt;br&gt;
Syntax: less file_name&lt;br&gt;
Common options: -e, -f, -n&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#13-raw-compgen-endraw-shows-all-available-commands-aliases-and-functions"&gt;
  &lt;/a&gt;
  13. &lt;code&gt;compgen&lt;/code&gt; - Shows all available commands, aliases, and functions
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;compgen&lt;/code&gt; is a bash built-in command which is used to list all the commands that could be executed in the Linux system.&lt;br&gt;
Syntax: compgen [option(s)]&lt;br&gt;
Common options: -a, -c, -d&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#14-raw-gt-endraw-redirect-stdout"&gt;
  &lt;/a&gt;
  14. &lt;code&gt;&amp;gt;&lt;/code&gt; - Redirect stdout
&lt;/h3&gt;

&lt;p&gt;This takes the output from the preceding command that you’d normally see in the terminal and sends it to a file that you give it. As an example, take echo “test” &amp;gt; dev1. Here it creates a file called dev1 and puts the echoed string into it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#15-raw-head-endraw-read-the-start-of-a-file"&gt;
  &lt;/a&gt;
  15. &lt;code&gt;head&lt;/code&gt; - Read the start of a file
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;head&lt;/code&gt; command allows you to read the first few lines of a file. The default number is 10.&lt;br&gt;
Syntax: head [option(s)] file(s)&lt;br&gt;
Common options: -n, can be used to specify the number of lines to show&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#16-raw-tail-endraw-read-the-end-of-a-file"&gt;
  &lt;/a&gt;
  16. &lt;code&gt;tail&lt;/code&gt; - Read the end of a file
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;tail&lt;/code&gt; outputs the last few lines of a file. And, just like the &lt;code&gt;head&lt;/code&gt; command, the default is 10. &lt;br&gt;
Syntax: tail [option(s)] file_names&lt;br&gt;
Common options: -n&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#17-raw-cat-endraw-read-a-file-create-a-file-and-concatenate-files"&gt;
  &lt;/a&gt;
  17. &lt;code&gt;cat&lt;/code&gt; - Read a file, create a file, and concatenate files
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cat&lt;/code&gt;, short for concatenate, is one of the most commonly used commands. It allows you to create single or multiple files, view file inclusions, concatenate files and redirect output in a terminal or file.&lt;br&gt;
Syntax: cat [option(s)] [file_name(s)] [-] [file_name(s)]&lt;br&gt;
Common options: -n&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#18-raw-endraw-pipe"&gt;
  &lt;/a&gt;
  18. &lt;code&gt;|&lt;/code&gt; - Pipe
&lt;/h3&gt;

&lt;p&gt;A pipe takes the standard output of one command and passes it as the input to another.&lt;br&gt;
Syntax: &lt;code&gt;|&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#19-raw-chmod-endraw-sets-the-file-permissions-flag-on-a-file-or-folder"&gt;
  &lt;/a&gt;
  19. &lt;code&gt;chmod&lt;/code&gt; - Sets the file permissions flag on a file or folder
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;chmod&lt;/code&gt; command is used to change the access mode of a file. The name is an abbreviation of change mode. &lt;br&gt;
Syntax: chmod [reference][operator][mode] file... &lt;br&gt;
Common options: -f, -v&lt;br&gt;
References are used to distinguish the users to whom the permissions apply. Operator is used to specify how the modes of a file should be adjusted. The modes indicate which permissions are to be granted or removed from the specified classes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#20-raw-exit-endraw-exit-out-of-a-directory"&gt;
  &lt;/a&gt;
  20. &lt;code&gt;exit&lt;/code&gt; - Exit out of a directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;exit&lt;/code&gt; command is used to exit any kind of shell.&lt;br&gt;
Syntax: &lt;code&gt;exit&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#21-raw-history-endraw-list-your-most-recent-commands"&gt;
  &lt;/a&gt;
  21. &lt;code&gt;history&lt;/code&gt; - List your most recent commands
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;history&lt;/code&gt; command prints out your recent commands, one command per line. It also prints the history number for each command. Each command is associated with a number for easy reference. You can truncate the output by specifying a number after the command.&lt;br&gt;
Syntax: &lt;code&gt;history&lt;/code&gt;&lt;br&gt;
Common options: -c, -d&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#22-raw-clear-endraw-clear-your-terminal-window"&gt;
  &lt;/a&gt;
  22. &lt;code&gt;clear&lt;/code&gt; - Clear your terminal window
&lt;/h3&gt;

&lt;p&gt;This command is used to clear all previous commands and output from consoles and terminal windows. This keeps your terminal clean and removes the clutter so you can focus on subsequent commands and their output.&lt;br&gt;
Syntax: &lt;code&gt;clear&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#23-raw-cp-endraw-copy-files-and-directories"&gt;
  &lt;/a&gt;
  23. &lt;code&gt;cp&lt;/code&gt; - Copy files and directories
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cp&lt;/code&gt; stands for copy. This command is used to copy files or groups of files or directory. &lt;br&gt;
Syntax: cp [option(s)] current_name new_name&lt;br&gt;
Common options: -r, -i, -b&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#24-raw-kill-endraw-terminate-stalled-processes"&gt;
  &lt;/a&gt;
  24. &lt;code&gt;kill&lt;/code&gt; - Terminate stalled processes
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;kill&lt;/code&gt; command allows you to terminate a process from the command line. You do this by providing the process ID (PID) of the process to kill. You can use the &lt;code&gt;ps&lt;/code&gt; command to find the PID. &lt;code&gt;kill&lt;/code&gt; is a built-in command of the bash shell.&lt;br&gt;
Syntax: kill [option(s)] PID(s)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#25-raw-sleep-endraw-delay-a-process-for-a-specified-amount-of-time"&gt;
  &lt;/a&gt;
  25. &lt;code&gt;sleep&lt;/code&gt; - Delay a process for a specified amount of time.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sleep&lt;/code&gt; command is used in shell scripts to take a pause before the execution of the next command. For example, it can be used inside a script to pause before retrying a failed operation or inside a loop.&lt;br&gt;
Syntax: sleep number [suffix]&lt;br&gt;
Suffix is used to specify the unit of time and can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; - seconds(default)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;m&lt;/code&gt; - minutes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h&lt;/code&gt; - hours&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;d&lt;/code&gt; - days&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#26-raw-passwd-endraw-change-account-password"&gt;
  &lt;/a&gt;
  26. &lt;code&gt;passwd&lt;/code&gt; - Change account password
&lt;/h3&gt;

&lt;p&gt;You can change your account password using &lt;code&gt;passwd&lt;/code&gt; command. It will ask for your old password and then ask to enter your new password twice.&lt;br&gt;
Syntax: &lt;code&gt;passwd&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#27-raw-df-endraw-check-disk-space"&gt;
  &lt;/a&gt;
  27. &lt;code&gt;df&lt;/code&gt; - Check Disk Space
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;df&lt;/code&gt; command is used to get a detailed report on the system’s disk space usage. When used without any argument, the df command will display information about all mounted file systems.&lt;br&gt;
Syntax: df [options]... filesystem...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#28-raw-comm-endraw-compare-two-files"&gt;
  &lt;/a&gt;
  28. &lt;code&gt;comm&lt;/code&gt; - Compare two files
&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;comm&lt;/code&gt; command to compare two sorted files line by line. To compare two sorted files using 'comm', you have to pass their names as arguments.&lt;br&gt;
Syntax: comm [OPTION]... FILE1 FILE2&lt;/p&gt;



&lt;p&gt;I hope you enjoyed this summary and learned something new. I will be coming up with more such notes soon.&lt;/p&gt;

&lt;p&gt;Please give me a follow if you liked it. 🙌&lt;/p&gt;



&lt;p&gt;Currently building &lt;a href="https://bit.ly/35G7QXU"&gt;SigNoz&lt;/a&gt; - an open-source APM &amp;amp; observability tool 💙&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;
&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;
&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
👇 Features:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>devops</category>
      <category>linux</category>
      <category>bash</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
