<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🗿 Stoicism and the Software Interview</title>
      <author>Randall</author>
      <pubDate>Thu, 19 Aug 2021 16:48:33 +0000</pubDate>
      <link>https://dev.to/mistval/stoicism-and-the-software-interview-4h75</link>
      <guid>https://dev.to/mistval/stoicism-and-the-software-interview-4h75</guid>
      <description>&lt;p&gt;Interviewing is hard, and software engineers have it especially bad. In what other profession is your fate determined by how well you solve random brainteasers on camera? &lt;/p&gt;

&lt;p&gt;Last week I had ten interviews with eight different companies, plus two automatically timed and scored tests and two take-home coding projects on top of that. It was not easy, but I did have some new tools that helped a lot, and I would like to share some of those in this article.&lt;/p&gt;

&lt;p&gt;These are tools that I acquired while learning about &lt;a href="https://en.wikipedia.org/wiki/Stoicism"&gt;Stoicism&lt;/a&gt;, an ancient Greek school of philosophy, which, among other things, provides guidance on how to react to stressful, frightening, or depressing situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-reserve-clause"&gt;
  &lt;/a&gt;
  The Reserve Clause
&lt;/h2&gt;

&lt;p&gt;Taking a &lt;strong&gt;reserve clause&lt;/strong&gt; essentially means putting in the effort and then accepting the outcome. Here's an example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will study as hard as I can and then, &lt;em&gt;fate permitting&lt;/em&gt;, I will receive a job offer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;em&gt;fate permitting&lt;/em&gt; clause is the reserve clause. What you are doing here is taking responsibility for your &lt;em&gt;efforts&lt;/em&gt; while leaving the responsibility for the &lt;em&gt;outcome&lt;/em&gt; in the hands of fate.&lt;/p&gt;

&lt;p&gt;Framing the goal in this way, you succeed as long as you put in the effort. Even if you do not get the job!&lt;/p&gt;

&lt;p&gt;There are a million reasons why you might not get the job even if you put in the effort. They might by chance ask questions you had not prepared for, or maybe they liked you fine but there was another candidate who knocked their socks off, or maybe they thought you were amazing but someone accidentally entered 0 points instead of 10.&lt;/p&gt;

&lt;p&gt;We control little beyond our efforts, and fortune is fickle. If we limit our concept of success to the things we &lt;em&gt;do&lt;/em&gt; control, we can be more focused in our efforts and more equanimous when set back by forces beyond us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maybe-they-did-you-a-favor"&gt;
  &lt;/a&gt;
  Maybe They Did You a Favor
&lt;/h2&gt;

&lt;p&gt;Try to be grateful for rejection. Maybe by rejecting you, they are doing you a great favor! Your "dream job" could have turned into a nightmare, and your "backup plan" could turn out to be the greatest job you will ever have. We just cannot know.&lt;/p&gt;

&lt;p&gt;(The most fun I have ever had at a job was working as a cashier in a convenience store. I will spare you the details, but it was a million times more fun than I could have expected! The pay could have been a little better though...)&lt;/p&gt;

&lt;p&gt;By rejecting you, they are helping to write a chapter of your story. They are giving you direction. That is something to be grateful for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-locality-of-anxiety"&gt;
  &lt;/a&gt;
  The Locality of Anxiety
&lt;/h2&gt;

&lt;p&gt;Anxiety is often described as "butterflies in your stomach", and indeed when you feel anxious, you will notice some interesting things if you focus on &lt;strong&gt;where&lt;/strong&gt; you feel anxious.&lt;/p&gt;

&lt;p&gt;It is a physical sensation, often in your chest, your stomach, maybe even your legs. It is not mental. It may not even be in your head!&lt;/p&gt;

&lt;p&gt;We seem to be hardwired to launch into &lt;a href="https://www.psychologytoday.com/us/blog/in-the-face-adversity/201103/catastrophic-thinking"&gt;catastrophic thinking&lt;/a&gt; when we feel such sensations, but we actually have a lot of control over the extent of that. If you recognize anxiety as a benign physical feeling, it can help you prevent it from commandeering your emotional state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-suffering-before-it-is-necessary"&gt;
  &lt;/a&gt;
  Avoid Suffering Before it is Necessary
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;To suffer before it is necessary is to suffer more than is necessary - Seneca&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In addition to observing &lt;em&gt;where&lt;/em&gt; anxiety happens, be mindful about &lt;em&gt;when&lt;/em&gt; it happens.&lt;/p&gt;

&lt;p&gt;You might find that you are freaking out hours before you even step onto the stage! That is hours of suffering and it is completely unnecessary.&lt;/p&gt;

&lt;p&gt;Recognizing that the thing you are so afraid of is &lt;em&gt;not even happening right now&lt;/em&gt; can help calm your nerves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-view-from-above"&gt;
  &lt;/a&gt;
  The View From Above
&lt;/h2&gt;

&lt;p&gt;This is a really simple and practical technique that Stoics use to decatastrophize a situation and make it not-so-bad.&lt;/p&gt;

&lt;p&gt;The idea is just to imagine looking down on yourself from above. Imagine you can see your entire block, or maybe your city, or maybe your country, and everyone in it. None of them care about what happens in your interview. It is just not that important.&lt;/p&gt;

&lt;p&gt;A lot of the time, this might sound like a depressing activity. But anxiety is caused to some extent by an inflated feeling of self-importance! Reframing the situation in a way that trivializes it, and yourself, can help to temper your emotions towards it.&lt;/p&gt;

&lt;p&gt;You can do this activity in an instant, or you can spend more time on it. &lt;a href="https://blog.stoameditation.com/the-view-from-above/"&gt;Here&lt;/a&gt; is a meditation plan you could follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-next"&gt;
  &lt;/a&gt;
  What Happens Next?
&lt;/h2&gt;

&lt;p&gt;What are you going to do after the interview?&lt;/p&gt;

&lt;p&gt;Go for a run? Make a sandwich? Play a game?&lt;/p&gt;

&lt;p&gt;Remember that there &lt;em&gt;is&lt;/em&gt; an after. You are going to pick up the phone, spend an hour on it, and then it is over. No matter what happens in an interview, it will end, and after it does, it will feel like it took a mere instant.&lt;/p&gt;

&lt;p&gt;Just remember that you still have the rest of your day ahead of you. The world is not ending.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I bet some of this sounded excessively mystical to some readers, but the proof is in the pudding. Try it out! Using these techniques and perspectives during the interview process helped me to maintain my composure before, during, and after interviews, and to be more satisfied even with negative outcomes.&lt;/p&gt;

&lt;p&gt;For anyone going through the interview process now, good luck! It may not be easy, but you will get through it.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Center an image with css on responsive without distorting</title>
      <author>dgloriaweb</author>
      <pubDate>Thu, 19 Aug 2021 16:25:27 +0000</pubDate>
      <link>https://dev.to/dgloriaweb/center-an-image-with-css-on-responsive-without-distorting-4mj4</link>
      <guid>https://dev.to/dgloriaweb/center-an-image-with-css-on-responsive-without-distorting-4mj4</guid>
      <description>&lt;p&gt;Hi, &lt;br&gt;
If my designer wants to see the middle of the image on the middle of any device screen, I take the height of the image, and calculate the left margin from it. I use an image that's near to rectangle, to be able to handle the wildest aspect ratio, in this case my app is portrait only. In this example my image is h=1000px w=776px. (Heads up, if your image might not be wide enough for some devices, also be prepared for landscape view. Better to use square image and decide if you use height or width as baseline.)&lt;/p&gt;

&lt;p&gt;I position the image to the corner like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;position: fixed;
top: 0;
left: 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I set the height to 100vh&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;height: 100vh;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I can calculate my offset for the image from the left, by adjusting the left-margin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;margin-left: calc((-77.6vh / 2) + 50vw);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;briefly my image is 77.6vh wide (that's calculated from 100vh *77.6, because this is the aspect ratio), so I get half of that value, and move the whole thing 50vw to the right. That is where my image will start. I don't need to mess about with pixels, it's calculated for me.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Adios ../../../.. relative imports JS</title>
      <author>Israel Moreno 💀</author>
      <pubDate>Thu, 19 Aug 2021 16:15:41 +0000</pubDate>
      <link>https://dev.to/israeldev_/adios-relative-imports-4m2e</link>
      <guid>https://dev.to/israeldev_/adios-relative-imports-4m2e</guid>
      <description>&lt;p&gt;Cada vez que creamos componentes, funciones, constantes o cualquier otra cosa en nuestro proyecto en React o cualquier otro framework, solemos hacerlo en la carpeta &lt;strong&gt;src&lt;/strong&gt; , y cuando importamos estos archivos solemos hacerlo con las rutas relativas.&lt;/p&gt;

&lt;p&gt;Suponiendo que tenemos nuestro proyecto de la siguiente manera:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - src /
   - components /
      - Avatar /
         index.js
      - RoundedButton /
         index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al importar nuestros componentes y/o funciones o cualquier archivo dentro de nuestra carpeta src, solemos hacerlos de la siguiente manera:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RoundedButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../components/RoundedButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Avatar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../components/Avatar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hacerlo de esta manera no implica una mala practica o que estes haciendo mal, el detalle es que entre mas crecen nuestros imports se ve mas sucio nuestro codigo en la parte superior. Que tal se verian nuestros imports de esta manera ? :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RoundedButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/RoundedButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Avatar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/Avatar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se veria mas limpio no ? &lt;/p&gt;

&lt;p&gt;Hacer estas importaciones es demasiado sencillo. En tu proyecto crea o edita el archivo &lt;strong&gt;jsconfig.json&lt;/strong&gt; si usas Javascript o &lt;strong&gt;tsconfig.json&lt;/strong&gt; si usas Typescript, y agrega las siguientes lineas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"compileOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are Ready ! Ahora puedes dejar de usar las rutas relativas y hacer las importaciones de tus archivos mas facil&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Avatar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/Avatar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RoundedButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/RoundedButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Panel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RoundedButton&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Avatar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Asi de sencillo es olvidarnos de las rutas relativas...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Esto funciona perfectamente sin hacer mas modificaciones en VSCode, para WebStorm e IntelliJ existe una configuracion para que funcione. Espero pronto actualizar este articulo y compartir como seria la configuracion en los IDE's de JetBrains&lt;/p&gt;

&lt;p&gt;Este tip lo aprendi de Nilanth... Puedes ver su articulo original en el siguiente enlace:&lt;br&gt;
&lt;a href="https://dev.to/nilanth/no-more-import-in-react-2mbo"&gt;https://dev.to/nilanth/no-more-import-in-react-2mbo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>begginers</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Array methods in JavaScript: when to use which 🤔?</title>
      <author>Mohd Shahid</author>
      <pubDate>Thu, 19 Aug 2021 15:55:12 +0000</pubDate>
      <link>https://dev.to/sidmirza4/array-methods-in-javascript-when-to-use-which-2ehp</link>
      <guid>https://dev.to/sidmirza4/array-methods-in-javascript-when-to-use-which-2ehp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey-guys"&gt;
  &lt;/a&gt;
  Hey guys 👋
&lt;/h2&gt;

&lt;p&gt;There are a lot of array methods in JavaScript and often we get confused 😕 about which to use when.&lt;br&gt;&lt;br&gt;
In this article I will summarise these methods and do my best to clear about which method should we use according to our needs.   &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started 🚀
&lt;/h3&gt;

&lt;p&gt;As I said we will study the array methods according to our needs, so just think what do you want...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#i-want"&gt;
  &lt;/a&gt;
  I want...
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#1-to-mutate-the-original-array"&gt;
  &lt;/a&gt;
  1. to mutate the original array
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#a-add-to-original-array"&gt;
  &lt;/a&gt;
  a) add to original array
&lt;/h4&gt;

&lt;p&gt;i) &lt;code&gt;.push&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
this method adds an element to the &lt;strong&gt;&lt;em&gt;end&lt;/em&gt;&lt;/strong&gt; of the original array and returns &lt;strong&gt;&lt;em&gt;the new length of the array&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1,2,3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ii) &lt;code&gt;.unshift&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
 this method is like &lt;code&gt;.push&lt;/code&gt; method, except it adds the element at the &lt;strong&gt;&lt;em&gt;start&lt;/em&gt;&lt;/strong&gt; of the original array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1,2,3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#b-remove-from-the-original-array"&gt;
  &lt;/a&gt;
  b) remove from the original array
&lt;/h4&gt;

&lt;p&gt;i) &lt;code&gt;.pop&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
this method remove the &lt;strong&gt;&lt;em&gt;last&lt;/em&gt;&lt;/strong&gt; element of the array and &lt;strong&gt;&lt;em&gt;returns the removed element&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Marty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removedName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['Sid', 'Marty']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 'John'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ii) &lt;code&gt;.shift&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
&lt;code&gt;.shift&lt;/code&gt; is just like &lt;code&gt;.pop&lt;/code&gt; except it removes the element from the &lt;strong&gt;&lt;em&gt;start&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;iii) &lt;code&gt;.splice&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
this method is bit tricky, it can &lt;strong&gt;&lt;em&gt;remove&lt;/em&gt;&lt;/strong&gt; and/or &lt;strong&gt;&lt;em&gt;add&lt;/em&gt;&lt;/strong&gt; the element(s) to the original array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mango&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// At position 2, remove 1 element and add 2 elements:&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lemon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kiwi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["Banana", "Orange", "Lemon", "Kiwi"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other mutating array methods which I do not use so frequently are :&lt;br&gt;&lt;br&gt;
i)  &lt;code&gt;.reverse&lt;/code&gt;&lt;br&gt;&lt;br&gt;
ii) &lt;code&gt;.sort&lt;/code&gt;&lt;br&gt;&lt;br&gt;
iii) &lt;code&gt;.fill&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#2-a-new-array"&gt;
  &lt;/a&gt;
  2. a new array
&lt;/h3&gt;

&lt;p&gt;If you want a new array, please look at the following array methods:  &lt;/p&gt;

&lt;p&gt;i) &lt;code&gt;.map&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
As a react developer, &lt;code&gt;.map&lt;/code&gt; is the most used array method for me. It loops over the array and perform a certain action on each element then returns the &lt;strong&gt;&lt;em&gt;new array of the same length&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberSqr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberSqr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1,4,9,16]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.map&lt;/code&gt; receives a callback function, which accepts the following arguments:&lt;br&gt;&lt;br&gt;
i) The current &lt;code&gt;element&lt;/code&gt;  being processed in the array.&lt;br&gt;&lt;br&gt;
ii) &lt;code&gt;index&lt;/code&gt; of the current &lt;code&gt;element&lt;/code&gt; being processed in the array.&lt;br&gt;&lt;br&gt;
iii) &lt;code&gt;array&lt;/code&gt; on which &lt;code&gt;.map&lt;/code&gt; was called.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;value returned from the callback function will be mapped the corresponding element in the array. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ii) &lt;code&gt;.filter&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This methods &lt;strong&gt;&lt;em&gt;creates a new array&lt;/em&gt;&lt;/strong&gt; with all the elements that passed the condition given in the callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spray&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;limit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;elite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exuberant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;destruction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;present&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ["exuberant", "destruction", "present"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;iii) &lt;code&gt;.slice&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This method returns a copy of the &lt;strong&gt;&lt;em&gt;portion&lt;/em&gt;&lt;/strong&gt; of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bison&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;camel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;duck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;elephant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// ["camel", "duck", "elephant"]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// ["camel", "duck"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;iv) &lt;code&gt;.concat&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// result is ['a', 'b', 'c', 1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-an-array-index"&gt;
  &lt;/a&gt;
  3. an array index
&lt;/h3&gt;

&lt;p&gt;i) &lt;code&gt;.indexOf&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This method &lt;strong&gt;&lt;em&gt;returns the first index&lt;/em&gt;&lt;/strong&gt; at which a given element can be found in the array, or &lt;strong&gt;&lt;em&gt;-1&lt;/em&gt;&lt;/strong&gt;   if it is not present.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kiwi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ii) &lt;code&gt;.findIndex&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This method &lt;strong&gt;returns the index of the first element&lt;/strong&gt; that passed a given condition. Otherwise &lt;strong&gt;-1&lt;/strong&gt; indicating that no element passed the condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-an-array-element"&gt;
  &lt;/a&gt;
  4. an array element
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.find&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This method returns the first element which satisfies a provided condition. &lt;code&gt;undefined&lt;/code&gt; otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-to-know-if-the-array-includes"&gt;
  &lt;/a&gt;
  5. to know if the array includes
&lt;/h3&gt;

&lt;p&gt;i) &lt;code&gt;.includes&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This methods returns &lt;code&gt;true&lt;/code&gt; (if the array contains the element) or &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ii) &lt;code&gt;.some&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
Name of this method sometimes confuse me 😣. This method returns &lt;code&gt;true&lt;/code&gt; if at least one element passes the given condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// checks whether an element is even&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;iii) &lt;code&gt;.every&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This method returns &lt;code&gt;true&lt;/code&gt; if all the elements in the array pass the given condition, &lt;code&gt;false&lt;/code&gt; otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isBigEnough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isBigEnough&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isBigEnough&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-a-new-string"&gt;
  &lt;/a&gt;
  6. a new string
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.join&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This methods &lt;strong&gt;&lt;em&gt;joins&lt;/em&gt;&lt;/strong&gt; all the element of the array by a given string separator and &lt;strong&gt;&lt;em&gt;return the string&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// joining the words by space&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 'JS is amazing'&lt;/span&gt;

&lt;span class="c1"&gt;// joining by dash ('-')&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 'JS-is-amazing'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-to-just-loop-over-an-array"&gt;
  &lt;/a&gt;
  7. to just loop over an array
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This method executes a provided function once for each array element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// 'a'&lt;/span&gt;
&lt;span class="c1"&gt;// 'b'&lt;/span&gt;
&lt;span class="c1"&gt;// 'c'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-to-transform-the-array-to-a-single-value"&gt;
  &lt;/a&gt;
  8. to transform the array to a single value
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.reduce&lt;/code&gt;:&lt;br&gt;&lt;br&gt;
This methods reduces the array to a &lt;strong&gt;single&lt;/strong&gt; &lt;code&gt;value&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
This &lt;code&gt;value&lt;/code&gt; can be of any type: &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt;.   &lt;/p&gt;

&lt;p&gt;The reducer function takes four arguments:&lt;br&gt;&lt;br&gt;
a) Accumulator&lt;br&gt;&lt;br&gt;
b) Current Value&lt;br&gt;&lt;br&gt;
c) Current Index&lt;br&gt;&lt;br&gt;
d) Source Array  &lt;/p&gt;

&lt;p&gt;Reducer function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// sum of the elements of the array using .reduce&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Phew, this was a lot to take in  😅.  &lt;/p&gt;

&lt;p&gt;I hope you guys found this article helpful, if you did please leave a like.&lt;br&gt;&lt;br&gt;
If you need explanation of any particular method, please let me know in the comment section or message me on &lt;a href="https://www.twitter.com/sidmirza4"&gt;twitter&lt;/a&gt;.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading. 💚
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy coding.
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>My Software Development Journey</title>
      <author>Okolo Daniel Kelechi</author>
      <pubDate>Thu, 19 Aug 2021 15:42:50 +0000</pubDate>
      <link>https://dev.to/gitdan42/my-software-development-journey-2c4a</link>
      <guid>https://dev.to/gitdan42/my-software-development-journey-2c4a</guid>
      <description>&lt;p&gt;&lt;strong&gt;Scope:&lt;/strong&gt; This short article stipulates my training goals in HNG Internship 8.0 Program. It is rather a documentation of a young developer's journey in software development. Read it, enjoy it and don't fail to drop your comments below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Journey of a Thousand Miles Starts with a Step&lt;/strong&gt;&lt;br&gt;
The Journey of a thousand miles always start with one step in the right direction. My quest for software development has been on the increase since I discovered how robust software applications can make life more easy and enjoyable.&lt;/p&gt;

&lt;p&gt;I commenced my journey in software development some months ago. Indeed, it has been very exciting one. One interesting thing to know is that there is no limit to what one can achieve in the field of software development. I have always searched for a training opportunity where I can learn more about software development. Finally, I enrolled for Zuri HNG 8.0 internship program. At the end of the 8 weeks training, I hope to achieve the following:&lt;/p&gt;

&lt;p&gt;1).Design good software interfaces using tools like Figma.&lt;/p&gt;

&lt;p&gt;2).Design good website templates.&lt;/p&gt;

&lt;p&gt;3).Develop functional and dynamic websites as a Front End Developer using HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;4).Use modern technologies such as React Js, Angular and Vue to build robust websites.&lt;/p&gt;

&lt;p&gt;5). Be comfortable in using Python, GO and Flutter in developing Applications&lt;/p&gt;

&lt;p&gt;** Tutorials and Sources**&lt;br&gt;
As a beginner in the journey of software development, I have been able to go through some tutorials that has made my learning process very easy and interesting. Feel free to consult these sources&lt;/p&gt;

&lt;p&gt;GIT - Git and GitHub for Beginners - Crash Course By freecodecamp. See the &lt;a href="https://www.youtube.com/watch?v=RGOj5yH7evk&amp;amp;t=5s"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript - The Web Developer Bootcamp by Colt Steele. See the &lt;a href="https://www.udemy.com/user/coltsteele/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node Js - The complete JavaScript Course by Jonas Schmedtmann. See the &lt;a href="https://www.youtube.com/watch?v=fTXNlfmA7W8"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML,CSS and Python  - W3Schools.com. See the &lt;a href="https://www.w3schools.com/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Point of my Journey&lt;/strong&gt;&lt;br&gt;
The first point in my software development journey is to learn HTML. HTML means Hyper Text Markup Language. It is the Skeleton or frame on which every other programming language is built on in order to have a wonderful website.&lt;/p&gt;

&lt;p&gt;HTML deals primarily with tags(&amp;lt;&amp;gt;). Below are some of the commonly used HTML5 tags and their functions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;&lt;/code&gt; - &lt;em&gt;Used to describe the dominant content of the document.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;nav&amp;gt;&amp;lt;/nav&amp;gt;&lt;/code&gt; - &lt;em&gt;Used to describe the part of navigation links.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;article&amp;gt;&amp;lt;/article&amp;gt;&lt;/code&gt; -&lt;em&gt;Used to describe an article in the document.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&amp;lt;/aside&amp;gt;&lt;/code&gt; - &lt;em&gt;Used to describe a contents that are slightly related to the main content of the document.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&amp;lt;/footer&amp;gt;&lt;/code&gt; - &lt;em&gt;Used to describe footer section of a document.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working with Cascading Style Sheet&lt;/strong&gt;&lt;br&gt;
CSS stands for cascading style sheet. It is used to create design of how the web page will look like. It is also used to make your interface and template colorful and beautiful.There are three key ways to include CSS in your document.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Approach:&lt;/strong&gt; This involves insertion of CSS styles inside HTML tags. This is also called &lt;strong&gt;&lt;em&gt;Inline Styling.&lt;/em&gt;&lt;/strong&gt; Example is done below where we want the color of h1 tag to become 'red'.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h1 style ='color:red';&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Approach:&lt;/strong&gt; This involves the inclusion of style tag in the head section of the HTML document. The element to be styled is called by its tag name, id or class name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document || Styling&amp;lt;/title&amp;gt;

&amp;lt;style&amp;gt;
#idName{ background-color: green; }

.className{ color: yellow;}

p{font-size: 20px; }
&amp;lt;/style&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1 id="idName"&amp;gt;I contain ID&amp;lt;/h1&amp;gt;

&amp;lt;div class="className"&amp;gt;I contain Class &amp;lt;/div&amp;gt;

&amp;lt;p&amp;gt;I am a Paragraph Tag &amp;lt;/p&amp;gt; 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code Explanation&lt;/strong&gt;&lt;br&gt;
In the body tag, the code above contains h1 tag with an id of value "idName". It also contains a div tag with a class of value "className" and a paragraph tag ("p").&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling The Tags&lt;/strong&gt;&lt;br&gt;
In the head tag, open and close style tag as indicated in the code.&lt;br&gt;
&lt;code&gt;&amp;lt;style&amp;gt;&lt;br&gt;
styling code Here ...&lt;br&gt;
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next,between the style tag where you have "styling code here", call the h1 tag by its id value "idName" and include "#" in front of the id value. i.e you will have "#idName".&lt;/p&gt;

&lt;p&gt;Next, insert open and close curly braces in front of "#idName". Between the curly braces, include the attribute you want the tag to have and its value separated by a colon (:).Finally, put a semi-colon (;). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Repeat the procedure explained above for other two examples involving class of value "className". Ensure that you include "." instead of "#" for class and "p" for paragraph as shown in the codes above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Approach:&lt;/strong&gt; The third approach is to create a different CSS file. Then, include all your styles there and link it to head section of the HTML file using the format below:&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
This is part of my journey so far, I will keep updating you on the progress.I am very optimistic that after this training, I will be well exposed to carryout robust front end development projects. I am open to collaboration and mentorship. Connect to me on Github and Figma via the link below:&lt;/p&gt;

&lt;p&gt;Github:&lt;br&gt;
&lt;a href="https://github.com/gitdan42"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figma:&lt;br&gt;
&lt;a href="https://www.figma.com/files/recent?fuid=965858778218708080"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connet to Zuri Team&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://training.zuri.team"&gt;https://training.zuri.team&lt;/a&gt; &lt;br&gt;
&lt;a href="https://internship.zuri.team"&gt;https://internship.zuri.team&lt;/a&gt; &lt;br&gt;
&lt;a href="https://zuri.team"&gt;https://zuri.team&lt;/a&gt; &lt;/p&gt;

</description>
      <category>angular</category>
      <category>react</category>
      <category>javascript</category>
      <category>docker</category>
    </item>
    <item>
      <title>AWS Certified DevOps Engineer DOP-C01 Exam Questions Part 5</title>
      <author>awslagi.com</author>
      <pubDate>Thu, 19 Aug 2021 15:32:04 +0000</pubDate>
      <link>https://dev.to/iam_awslagi/aws-certified-devops-engineer-dop-c01-exam-questions-part-5-c40</link>
      <guid>https://dev.to/iam_awslagi/aws-certified-devops-engineer-dop-c01-exam-questions-part-5-c40</guid>
      <description>&lt;p&gt;Source:&lt;/p&gt;

&lt;p&gt;For AWS: &lt;a href="https://www.awslagi.com"&gt;https://www.awslagi.com&lt;/a&gt; \&lt;br&gt;
For GCP: &lt;a href="https://www.gcp-examquestions.com"&gt;https://www.gcp-examquestions.com&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are hired as the new head of operations for a SaaS company. Your CTO has asked you to make debugging any part of your entire operation simpler and as fast as possible. She complains that she has no idea what is going on in the complex, service-oriented architecture, because the developers just log to disk, and it’s very hard to find errors in logs on so many services. How can you best meet this requirement and satisfy your CTO?&lt;/p&gt;

&lt;p&gt;A. Copy all log files into AWS S3 using a cron job on each instance. Use an S3 Notification Configuration on the PutBucket event and publish events to AWS Lambda. Use the Lambda to analyze logs as soon as they come in and flag issues.&lt;br&gt;
B. Begin using CloudWatch Logs on every service. Stream all Log Groups into S3 objects. Use AWS EMR cluster jobs to perform ad-hoc MapReduce analysis and write new queries when needed.&lt;br&gt;
C. Copy all log files into AWS S3 using a cron job on each instance. Use an S3 Notification Configuration on the PutBucket event and publish events to AWS Kinesis. Use Apache Spark on AWS EMR to perform at-scale stream processing queries on the log chunks and flag issues.&lt;br&gt;
D. Begin using CloudWatch Logs on every service. Stream all Log Groups into an AWS Elasticsearch Service Domain running Kibana 4 and perform log analysis on a search cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When thinking of AWS Elastic Beanstalk’s model, which is true?&lt;/p&gt;

&lt;p&gt;A. Applications have many deployments, deployments have many environments.&lt;br&gt;
B. Environments have many applications, applications have many deployments.&lt;br&gt;
C. Applications have many environments, environments have many deployments.&lt;br&gt;
D. Deployments have many environments, environments have many applications.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You work for a company that automatically tags photographs using artificial neural networks (ANNs), which run on GPUs using C++. You receive millions of images at a time, but only 3 times per day on average. These images are loaded into an AWS S3 bucket you control for you in a batch, and then the customer publishes a JSON-formatted manifest into another S3 bucket you control as well. Each image takes 10 milliseconds to process using a full GPU. Your neural network software requires 5 minutes to bootstrap. Image tags are JSON objects, and you must publish them to an S3 bucket. Which of these is the best system architecture for this system?&lt;/p&gt;

&lt;p&gt;A. Create an OpsWorks Stack with two Layers. The first contains lifecycle scripts for launching and bootstrapping an HTTP API on G2 instances for ANN image processing, and the second has an always-on instance which monitors the S3 manifest bucket for new files. When a new file is detected, request instances to boot on the ANN layer. When the instances are booted and the HTTP APIs are up, submit processing requests to individual instances.&lt;br&gt;
B. Make an S3 notification configuration which publishes to AWS Lambda on the manifest bucket. Make the Lambda create a CloudFormation Stack which contains the logic to construct an autoscaling worker tier of EC2 G2 instances with the ANN code on each instance. Create an SQS queue of the images in the manifest. Tear the stack down when the queue is empty.&lt;br&gt;
C. Deploy your ANN code to AWS Lambda as a bundled binary for the C++ extension. Make an S3 notification configuration on the manifest, which publishes to another AWS Lambda running controller code. This controller code publishes all the images in the manifest to AWS Kinesis. Your ANN code Lambda Function uses the Kinesis as an Event Source. The system automatically scales when the stream contains image events.&lt;br&gt;
D. Create an Auto Scaling, Load Balanced Elastic Beanstalk worker tier Application and Environment. Deploy the ANN code to G2 instances in this tier. Set the desired capacity to 1. Make the code periodically check S3 for new manifests. When a new manifest is detected, push all of the images in the manifest into the SQS queue associated with the Elastic Beanstalk worker tier.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are designing a system which needs, at minimum, 8 m4.large instances operating to service traffic. When designing a system for high availability in the us-east-1 region, which has 6 Availability Zones, your company needs to be able to handle death of a full availability zone. How should you distribute the servers, to save as much cost as possible, assuming all of the EC2 nodes are properly linked to an ELB? Your VPC account can utilize us-east-1’s AZ’s through f, inclusive.&lt;/p&gt;

&lt;p&gt;A. 3 servers in each of AZ’s a through d, inclusive.&lt;br&gt;
B. 8 servers in each of AZ’s a and b.&lt;br&gt;
C. 2 servers in each of AZ’s a through e, inclusive.&lt;br&gt;
D. 4 servers in each of AZ’s a through c, inclusive.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to create a Route53 record automatically in CloudFormation when not running in production during all launches of a Template. How should you implement this?&lt;/p&gt;

&lt;p&gt;A. Use a Parameter for environment, and add a Condition on the Route53 Resource in the template to create the record only when the environment is not production.&lt;br&gt;
B. Create two templates, one with the Route53 record value and one with a null value for the record. Use the one without it when deploying to production.&lt;br&gt;
C. Use a Parameter for environment, and add a Condition on the Route53 Resource in the template to create the record with a null string when environment is production.&lt;br&gt;
D. Create two templates, one with the Route53 record and one without it. Use the one without it when deploying to production.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What is web identity federation?&lt;/p&gt;

&lt;p&gt;A. Use of an identity provider like Google or Facebook to become an AWS IAM User.&lt;br&gt;
B. Use of an identity provider like Google or Facebook to exchange for temporary AWS security credentials.&lt;br&gt;
C. Use of AWS IAM User tokens to log in as a Google or Facebook user.&lt;br&gt;
D. Use of AWS STS Tokens to log in as a Google or Facebook user.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have been asked to de-risk deployments at your company. Specifically, the CEO is concerned about outages that occur because of accidental inconsistencies between Staging and Production, which sometimes cause unexpected behaviors in Production even when Staging tests pass. You already use Docker to get high consistency between Staging and Production for the application environment on your EC2 instances. How do you further de-risk the rest of the execution environment, since in AWS, there are many service components you may use beyond EC2 virtual machines?&lt;/p&gt;

&lt;p&gt;A. Develop models of your entire cloud system in CloudFormation. Use this model in Staging and Production to achieve greater parity.&lt;br&gt;
B. Use AWS Config to force the Staging and Production stacks to have configuration parity. Any differences will be detected for you so you are aware of risks.&lt;br&gt;
C. Use AMIs to ensure the whole machine, including the kernel of the virtual machines, is consistent, since Docker uses Linux Container (LXC) technology, and we need to make sure the container environment is consistent.&lt;br&gt;
D. Use AWS ECS and Docker clustering. This will make sure that the AMIs and machine sizes are the same across both environments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are creating a new API for video game scores. Reads are 100 times more common than writes, and the top 1% of scores are read 100 times more frequently than the rest of the scores. What’s the best design for this system, using DynamoDB?&lt;/p&gt;

&lt;p&gt;A. DynamoDB table with 100x higher read than write throughput, with CloudFront caching.&lt;br&gt;
B. DynamoDB table with roughly equal read and write throughput, with CloudFront caching.&lt;br&gt;
C. DynamoDB table with 100x higher read than write throughput, with ElastiCache caching.&lt;br&gt;
D. DynamoDB table with roughly equal read and write throughput, with ElastiCache caching.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You were just hired as a DevOps Engineer for a startup. Your startup uses AWS for 100% of their infrastructure. They currently have no automation at all for deployment, and they have had many failures while trying to deploy to production. The company has told you deployment process risk mitigation is the most important thing now, and you have a lot of budget for tools and AWS resources. Their stack:&lt;/p&gt;

&lt;p&gt;A. Model the stack in AWS Elastic Beanstalk as a single Application with multiple Environments. Use Elastic Beanstalk’s Rolling Deploy option to progressively roll out application code changes when promoting across environments.&lt;br&gt;
B. Model the stack in 3 CloudFormation templates: Data layer, compute layer, and networking layer. Write stack deployment and integration testing automation following Blue-Green methodologies.&lt;br&gt;
C. Model the stack in AWS OpsWorks as a single Stack, with 1 compute layer and its associated ELB. Use Chef and App Deployments to automate Rolling Deployment.&lt;br&gt;
D. Model the stack in 1 CloudFormation template, to ensure consistency and dependency graph resolution. Write deployment and integration testing automation following Rolling Deployment methodologies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What is the scope of an EBS snapshot?&lt;/p&gt;

&lt;p&gt;A. Availability Zone&lt;br&gt;
B. Placement Group&lt;br&gt;
C. Region&lt;br&gt;
D. VPC&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your system uses a multi-master, multi-region DynamoDB configuration spanning two regions to achieve high availability. For the first time since launching your system, one of the AWS Regions in which you operate over went down for 3 hours, and the failover worked correctly. However, after recovery, your users are experiencing strange bugs, in which users on different sides of the globe see different data. What is a likely design issue that was not accounted for when launching?&lt;/p&gt;

&lt;p&gt;A. The system does not have Lambda Functor Repair Automatons, to perform table scans and check for corrupted partition blocks inside the Table in the recovered Region.&lt;br&gt;
B. The system did not implement DynamoDB Table Defragmentation for restoring partition performance in the Region that experienced an outage, so data is served stale.&lt;br&gt;
C. The system did not include repair logic and request replay buffering logic for post-failure, to resynchronize data to the Region that was unavailable for a number of hours.&lt;br&gt;
D. The system did not use DynamoDB Consistent Read requests, so the requests in different areas are not utilizing consensus across Regions at runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You run operations for a company that processes digital wallet payments at a very high volume. One second of downtime, during which you drop payments or are otherwise unavailable, loses you on average USD 100. You balance the financials of the transaction system once per day. Which database setup is best suited to address this business risk?&lt;/p&gt;

&lt;p&gt;A. A multi-AZ RDS deployment with synchronous replication to multiple standbys and read-replicas for fast failover and ACID properties.&lt;br&gt;
B. A multi-region, multi-master, active-active RDS configuration using database-level ACID design principles with database trigger writes for replication.&lt;br&gt;
C. A multi-region, multi-master, active-active DynamoDB configuration using application control-level BASE design principles with change-stream write queue buffers for replication.&lt;br&gt;
D. A multi-AZ DynamoDB setup with changes streamed to S3 via AWS Kinesis, for highly durable storage and BASE properties.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When thinking of DynamoDB, what are true of Local Secondary Key properties?&lt;/p&gt;

&lt;p&gt;A. Either the partition key or the sort key can be different from the table, but not both.&lt;br&gt;
B. Only the sort key can be different from the table.&lt;br&gt;
C. The partition key and sort key can be different from the table.&lt;br&gt;
D. Only the partition key can be different from the table.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Which deployment method, when using AWS Auto Scaling Groups and Auto Scaling Launch Configurations, enables the shortest time to live for individual servers?&lt;/p&gt;

&lt;p&gt;A. Pre-baking AMIs with all code and configuration on deploys.&lt;br&gt;
B. Using a Dockerfile bootstrap on instance launch.&lt;br&gt;
C. Using UserData bootstrapping scripts.&lt;br&gt;
D. Using AWS EC2 Run Commands to dynamically SSH into fleets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Which of these techniques enables the fastest possible rollback times in the event of a failed deployment?&lt;/p&gt;

&lt;p&gt;A. Rolling; Immutable&lt;br&gt;
B. Rolling; Mutable&lt;br&gt;
C. Canary or A/B&lt;br&gt;
D. Blue-Green&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Which of the following are not valid sources for OpsWorks custom cookbook repositories?&lt;/p&gt;

&lt;p&gt;A. HTTP(S)&lt;br&gt;
B. Git&lt;br&gt;
C. AWS EBS&lt;br&gt;
D. Subversion&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are building a deployment system on AWS. You will deploy new code by bootstrapping instances in a private subnet in a VPC at runtime using UserData scripts pointing to an S3 zip file object, where your code is stored. An ELB in a public subnet has network interfaces and connectivity to the instances. Requests from users of the system are routed to the ELB via a Route53 A Record Alias. You do not use any VPC endpoints. Which is a risk of using this approach?&lt;/p&gt;

&lt;p&gt;A. Route53 Alias records do not always update dynamically with ELB network changes after deploys.&lt;br&gt;
B. If the NAT routing for the private subnet fails, deployments fail.&lt;br&gt;
C. Kernel changes to the base AMI may render the code inoperable.&lt;br&gt;
D. The instances cannot be in a private subnet if the ELB is in a public one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Which major database needs a BYO license?&lt;/p&gt;

&lt;p&gt;A. PostgreSQL&lt;br&gt;
B. MariaDB&lt;br&gt;
C. MySQL&lt;br&gt;
D. Oracle&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What is the maximum supported single-volume throughput on EBS?&lt;/p&gt;

&lt;p&gt;A. 320MiB/s&lt;br&gt;
B. 160MiB/s&lt;br&gt;
C. 40MiB/s&lt;br&gt;
D. 640MiB/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When a user is detaching an EBS volume from a running instance and attaching it to a new instance, which of the below mentioned options should be followed to avoid file system damage?&lt;/p&gt;

&lt;p&gt;A. Unmount the volume first&lt;br&gt;
B. Stop all the I/O of the volume before processing&lt;br&gt;
C. Take a snapshot of the volume before detaching&lt;br&gt;
D. Force Detach the volume to ensure that all the data stays intact&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A user is creating a new EBS volume from an existing snapshot. The snapshot size shows 10 GB. Can the user create a volume of 30 GB from that snapshot?&lt;/p&gt;

&lt;p&gt;A. Provided the original volume has set the change size attribute to true&lt;br&gt;
B. Yes&lt;br&gt;
C. Provided the snapshot has the modify size attribute set as true&lt;br&gt;
D. No&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;How long are the messages kept on an SQS queue by default?&lt;/p&gt;

&lt;p&gt;A. If a message is not read, it is never deleted&lt;br&gt;
B. 2 weeks&lt;br&gt;
C. 1 day&lt;br&gt;
D. 4 days&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A user has attached an EBS volume to a running Linux instance as a “/dev/sdf” device. The user is unable to see the attached device when he runs the command “df -h”. What is the possible reason for this?&lt;/p&gt;

&lt;p&gt;A. The volume is not in the same AZ of the instance&lt;br&gt;
B. The volume is not formatted&lt;br&gt;
C. The volume is not attached as a root device&lt;br&gt;
D. The volume is not mounted&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When using Amazon SQS how much data can you store in a message?&lt;/p&gt;

&lt;p&gt;A. 8 KB&lt;br&gt;
B. 2 KB&lt;br&gt;
C. 16 KB&lt;br&gt;
D. 4 KB&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What is the maximum time messages can be stored in SQS?&lt;/p&gt;

&lt;p&gt;A. 14 days&lt;br&gt;
B. one month&lt;br&gt;
C. 4 days&lt;br&gt;
D. 7 days&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A user has created a new EBS volume from an existing snapshot. The user mounts the volume on the instance to which it is attached. Which of the below mentioned options is a required step before the user can mount the volume?&lt;/p&gt;

&lt;p&gt;A. Run a cyclic check on the device for data consistency&lt;br&gt;
B. Create the file system of the volume&lt;br&gt;
C. Resize the volume as per the original snapshot size&lt;br&gt;
D. No step is required. The user can directly mount the device&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need your CI to build AMIs with code pre-installed on the images on every new code push. You need to do this as cheaply as possible. How do you do this?&lt;/p&gt;

&lt;p&gt;A. Bid on spot instances just above the asking price as soon as new commits come in, perform all instance configuration and setup, then create an AMI based on the spot instance.&lt;br&gt;
B. Have the CI launch a new on-demand EC2 instance when new commits come in, perform all instance configuration and setup, then create an AMI based on the on-demand instance.&lt;br&gt;
C. Purchase a Light Utilization Reserved Instance to save money on the continuous integration machine. Use these credits whenever you create AMIs on instances.&lt;br&gt;
D. When the CI instance receives commits, attach a new EBS volume to the CI machine. Perform all setup on this EBS volume so you do not need a new EC2 instance to create the AMI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When thinking of DynamoDB, what are true Global Secondary Key properties?&lt;/p&gt;

&lt;p&gt;A. The partition key and sort key can be different from the table.&lt;br&gt;
B. Only the partition key can be different from the table.&lt;br&gt;
C. Either the partition key or the sort key can be different from the table, but not both.&lt;br&gt;
D. Only the sort key can be different from the table.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to process long-running jobs once and only once. How might you do this?&lt;/p&gt;

&lt;p&gt;A. Use an SNS queue and set the visibility timeout to long enough for jobs to process.&lt;br&gt;
B. Use an SQS queue and set the reprocessing timeout to long enough for jobs to process.&lt;br&gt;
C. Use an SQS queue and set the visibility timeout to long enough for jobs to process.&lt;br&gt;
D. Use an SNS queue and set the reprocessing timeout to long enough for jobs to process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are getting a lot of empty receive requests when using Amazon SQS. This is making a lot of unnecessary network load on your instances. What can you do to reduce this load?&lt;/p&gt;

&lt;p&gt;A. Subscribe your queue to an SNS topic instead.&lt;br&gt;
B. Use as long of a poll as possible, instead of short polls.&lt;br&gt;
C. Alter your visibility timeout to be shorter.&lt;br&gt;
D. Use sqsd on your EC2 instances.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to know when you spend $1000 or more on AWS. What’s the easy way for you to see that notification?&lt;/p&gt;

&lt;p&gt;A. AWS CloudWatch Events tied to API calls, when certain thresholds are exceeded, publish to SNS.&lt;br&gt;
B. Scrape the billing page periodically and pump into Kinesis.&lt;br&gt;
C. AWS CloudWatch Metrics + Billing Alarm + Lambda event subscription. When a threshold is exceeded, email the manager.&lt;br&gt;
D. Scrape the billing page periodically and publish to SNS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to grant a vendor access to your AWS account. They need to be able to read protected messages in a private S3 bucket at their leisure. They also use AWS. What is the best way to accomplish this?&lt;/p&gt;

&lt;p&gt;A. Create an IAM User with API Access Keys. Grant the User permissions to access the bucket. Give the vendor the AWS Access Key ID and AWS Secret Access Key for the User.&lt;br&gt;
B. Create an EC2 Instance Profile on your account. Grant the associated IAM role full access to the bucket. Start an EC2 instance with this Profile and give SSH access to the instance to the vendor.&lt;br&gt;
C. Create a cross-account IAM Role with permission to access the bucket, and grant permission to use the Role to the vendor AWS account.&lt;br&gt;
D. Generate a signed S3 PUT URL and a signed S3 PUT URL, both with wildcard values and 2 year durations. Pass the URLs to the vendor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your serverless architecture using AWS API Gateway, AWS Lambda, and AWS DynamoDB experienced a large increase in traffic to a sustained 400 requests per second, and dramatically increased in failure rates. Your requests, during normal operation, last 500 milliseconds on average. Your DynamoDB table did not exceed 50% of provisioned throughput, and Table primary keys are designed correctly. What is the most likely issue?&lt;/p&gt;

&lt;p&gt;A. Your API Gateway deployment is throttling your requests.&lt;br&gt;
B. Your AWS API Gateway Deployment is bottlenecking on request (de)serialization.&lt;br&gt;
C. You did not request a limit increase on concurrent Lambda function executions.&lt;br&gt;
D. You used Consistent Read requests on DynamoDB and are experiencing semaphore lock.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Why are more frequent snapshots of EBS Volumes faster?&lt;/p&gt;

&lt;p&gt;A. Blocks in EBS Volumes are allocated lazily, since while logically separated from other EBS Volumes, Volumes often share the same physical hardware. Snapshotting the first time forces full block range allocation, so the second snapshot doesn’t need to perform the allocation phase and is faster.&lt;br&gt;
B. The snapshots are incremental so that only the blocks on the device that have changed after your last snapshot are saved in the new snapshot.&lt;br&gt;
C. AWS provides more disk throughput for burst capacity during snapshots if the drive has been pre-warmed by snapshotting and reading all blocks.&lt;br&gt;
D. The drive is pre-warmed, so block access is more rapid for volumes when every block on the device has already been read at least one time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For AWS CloudFormation, which stack state refuses UpdateStack calls?&lt;/p&gt;

&lt;p&gt;A. UPDATE_ROLLBACK_FAILED&lt;br&gt;
B. UPDATE_ROLLBACK_COMPLETE&lt;br&gt;
C. UPDATE_COMPLETE&lt;br&gt;
D. CREATE_COMPLETE&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to migrate 10 million records in one hour into DynamoDB. All records are 1.5KB in size. The data is evenly distributed across the partition key. How many write capacity units should you provision during this batch load?&lt;/p&gt;

&lt;p&gt;A. 6667&lt;br&gt;
B. 4166&lt;br&gt;
C. 5556&lt;br&gt;
D. 2778&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your CTO thinks your AWS account was hacked. What is the only way to know for certain if there was unauthorized access and what they did, assuming your hackers are very sophisticated AWS engineers and doing everything they can to cover their tracks?&lt;/p&gt;

&lt;p&gt;A. Use CloudTrail Log File Integrity Validation.&lt;br&gt;
B. Use AWS Config SNS Subscriptions and process events in real time.&lt;br&gt;
C. Use CloudTrail backed up to AWS S3 and Glacier.&lt;br&gt;
D. Use AWS Config Timeline forensics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Which of these is not a Pseudo Parameter in AWS CloudFormation?&lt;/p&gt;

&lt;p&gt;A. AWS::StackName&lt;br&gt;
B. AWS::AccountId&lt;br&gt;
C. AWS::StackArn&lt;br&gt;
D. AWS::NotificationARNs&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What is the scope of an EBS volume?&lt;/p&gt;

&lt;p&gt;A. VPC&lt;br&gt;
B. Region&lt;br&gt;
C. Placement Group&lt;br&gt;
D. Availability Zone&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are experiencing performance issues writing to a DynamoDB table. Your system tracks high scores for video games on a marketplace. Your most popular game experiences all of the performance issues. What is the most likely problem?&lt;/p&gt;

&lt;p&gt;A. DynamoDB’s vector clock is out of sync, because of the rapid growth in request for the most popular game.&lt;br&gt;
B. You selected the Game ID or equivalent identifier as the primary partition key for the table.&lt;br&gt;
C. Users of the most popular video game each perform more read and write requests than average.&lt;br&gt;
D. You did not provision enough read or write throughput to the table.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You meet once per month with your operations team to review the past month’s data. During the meeting, you realize that 3 weeks ago, your monitoring system which pings over HTTP from outside AWS recorded a large spike in latency on your 3-tier web service API. You use DynamoDB for the database layer, ELB, EBS, and EC2 for the business logic tier, and SQS, ELB, and EC2 for the presentation layer. Which of the following techniques will NOT help you figure out what happened?&lt;/p&gt;

&lt;p&gt;A. Check your CloudTrail log history around the spike’s time for any API calls that caused slowness.&lt;br&gt;&lt;br&gt;
B. Review CloudWatch Metrics graphs to determine which component(s) slowed the system down.&lt;br&gt;
C. Review your ELB access logs in S3 to see if any ELBs in your system saw the latency.&lt;br&gt;
D. Analyze your logs to detect bursts in traffic at that time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Which of these is not an intrinsic function in AWS CloudFormation?&lt;/p&gt;

&lt;p&gt;A. Fn::Split&lt;br&gt;
B. Fn::FindInMap&lt;br&gt;
C. Fn::Select&lt;br&gt;
D. Fn::GetAZs&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For AWS CloudFormation, which is true?&lt;/p&gt;

&lt;p&gt;A. Custom resources using SNS have a default timeout of 3 minutes.&lt;br&gt;
B. Custom resources using SNS do not need a ServiceToken property.&lt;br&gt;
C. Custom resources using Lambda and Code.ZipFile allow inline node js resource composition.&lt;br&gt;
D. Custom resources using Lambda do not need a ServiceTokenproperty&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your API requires the ability to stay online during AWS regional failures. Your API does not store any state, it only aggregates data from other sources – you do not have a database. What is a simple but effective way to achieve this uptime goal?&lt;/p&gt;

&lt;p&gt;A. Use a CloudFront distribution to serve up your API. Even if the region your API is in goes down, the edge locations CloudFront uses will be fine.&lt;br&gt;
B. Use an ELB and a cross-zone ELB deployment to create redundancy across data centers. Even if a region fails, the other AZ will stay online.&lt;br&gt;
C. Create a Route53 Weighted Round Robin record, and if one region goes down, have that region redirect to the other region.&lt;br&gt;
D. Create a Route53 Latency Based Routing Record with Failover and point it to two identical deployments of your stateless API in two different regions. Make sure both regions use Auto Scaling Groups behind ELBs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are designing an enterprise data storage system. Your data management software system requires mountable disks and a real filesystem, so you cannot use S3 for storage. You need persistence, so you will be using AWS EBS Volumes for your system. The system needs as lowcost storage as possible, and access is not frequent or high throughput, and is mostly sequential reads. Which is the most appropriate EBS Volume Type for this scenario?&lt;/p&gt;

&lt;p&gt;A. gp1&lt;br&gt;
B. io1&lt;br&gt;
C. standard&lt;br&gt;
D. gp2&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to deploy an AWS stack in a repeatable manner across multiple environments. You have selected CloudFormation as the right tool to accomplish this, but have found that there is a resource type you need to create and model, but is unsupported by CloudFormation. How should you overcome this challenge?&lt;/p&gt;

&lt;p&gt;A. Use a CloudFormation Custom Resource Template by selecting an API call to proxy for create, update, and delete actions. CloudFormation will use the AWS SDK, CLI, or API method of your choosing as the state transition function for the resource type you are modeling.&lt;br&gt;
B. Submit a ticket to the AWS Forums. AWS extends CloudFormation Resource Types by releasing tooling to the AWS Labs organization on GitHub. Their response time is usually 1 day, and they complete requests within a week or two.&lt;br&gt;
C. Instead of depending on CloudFormation, use Chef, Puppet, or Ansible to author Heat templates, which are declarative stack resource definitions that operate over the OpenStack hypervisor and cloud environment.&lt;br&gt;
D. Create a CloudFormation Custom Resource Type by implementing create, update, and delete functionality, either by subscribing a Custom Resource Provider to an SNS topic, or by implementing the logic in AWS Lambda.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You run a 2000-engineer organization. You are about to begin using AWS at a large scale for the first time. You want to integrate with your existing identity management system running on Microsoft Active Directory, because your organization is a power-user of Active Directory. How should you manage your AWS identities in the most simple manner?&lt;/p&gt;

&lt;p&gt;A. Use a large AWS Directory Service Simple AD.&lt;br&gt;
B. Use a large AWS Directory Service AD Connector.&lt;br&gt;
C. Use a Sync Domain running on AWS Directory Service.&lt;br&gt;
D. Use an AWS Directory Sync Domain running on AWS Lambda&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When thinking of AWS OpsWorks, which of the following is not an instance type you can allocate in a stack layer?&lt;/p&gt;

&lt;p&gt;A. 24/7 instances&lt;br&gt;
B. Spot instances&lt;br&gt;
C. Time-based instances&lt;br&gt;
D. Load-based instances&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Which of these is not a CloudFormation Helper Script?&lt;/p&gt;

&lt;p&gt;A. cfn-signal&lt;br&gt;
B. cfn-hup&lt;br&gt;
C. cfn-request&lt;br&gt;
D. cfn-get-metadata&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your team wants to begin practicing continuous delivery using CloudFormation, to enable automated builds and deploys of whole, versioned stacks or stack layers. You have a 3-tier, mission-critical system. Which of the following is NOT a best practice for using CloudFormation in a continuous delivery environment?&lt;/p&gt;

&lt;p&gt;A. Use the AWS CloudFormation ValidateTemplate call before publishing changes to AWS.&lt;br&gt;
B. Model your stack in one template, so you can leverage CloudFormation’s state management and dependency resolution to propagate all changes.&lt;br&gt;
C. Use CloudFormation to create brand new infrastructure for all stateless resources on each push, and run integration tests on that set of infrastructure.&lt;br&gt;
D. Parametrize the template and use Mappings to ensure your template works in multiple Regions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to replicate API calls across two systems in real time. What tool should you use as a buffer and transport mechanism for API call events?&lt;/p&gt;

&lt;p&gt;A. AWS SQS&lt;br&gt;
B. AWS Lambda&lt;br&gt;
C. AWS Kinesis&lt;br&gt;
D. AWS SNS&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are building a Ruby on Rails application for internal, non-production use which uses MySQL as a database. You want developers without very much AWS experience to be able to deploy new code with a single command line push. You also want to set this up as simply as possible. Which tool is ideal for this setup?&lt;/p&gt;

&lt;p&gt;A. AWS CloudFormation&lt;br&gt;
B. AWS OpsWorks&lt;br&gt;
C. AWS ELB + EC2 with CLI Push&lt;br&gt;
D. AWS Elastic Beanstalk&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awslagi</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>AWS Certified DevOps Engineer DOP-C01 Exam Questions Part 3</title>
      <author>awslagi.com</author>
      <pubDate>Thu, 19 Aug 2021 15:25:18 +0000</pubDate>
      <link>https://dev.to/iam_awslagi/aws-certified-devops-engineer-dop-c01-exam-questions-part-3-1ccb</link>
      <guid>https://dev.to/iam_awslagi/aws-certified-devops-engineer-dop-c01-exam-questions-part-3-1ccb</guid>
      <description>&lt;p&gt;Source:&lt;/p&gt;

&lt;p&gt;For AWS: &lt;a href="https://www.awslagi.com"&gt;https://www.awslagi.com&lt;/a&gt; \&lt;br&gt;
For GCP: &lt;a href="https://www.gcp-examquestions.com"&gt;https://www.gcp-examquestions.com&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Due to compliance regulations, management has asked you to provide a system that allows for cost-effective long-term storage of your application logs and provides a way for support staff to view the logs more quickly. Currently your log system archives logs automatically to Amazon S3 every hour, and support staff must wait for these logs to appear in Amazon S3, because they do not currently have access to the systems to view live logs. What method should you use to become compliant while also providing a faster way for support staff to have access to logs?&lt;/p&gt;

&lt;p&gt;A. Update Amazon S3 lifecycle policies to archive old logs to Amazon Glacier, and add a new policy to push all log entries to Amazon SQS for ingestion by the support team&lt;br&gt;
B. Update Amazon S3 lifecycle policies to archive old logs to Amazon Glacier, and use or write a service to also stream your application logs to CloudWatch Logs.&lt;br&gt;
C. Update Amazon Glacier lifecycle policies to pull new logs from Amazon S3, and in the Amazon EC2 console, enable the CloudWatch Logs Agent on all of your application servers.&lt;br&gt;
D. Update Amazon S3 lifecycle policies to archive old logs to Amazon Glacier. key can be different from the tableEnable Amazon S3 partial uploads on your Amazon S3 bucket, and trigger an Amazon SNS notification when a partial upload occurs.&lt;br&gt;
E. Use or write a service to stream your application logs to CloudWatch Logs. Use an Amazon Elastic Map Reduce cluster to live stream your logs from CloudWatch Logs for ingestion by the support team, and create a Hadoop job to push the logs to S3 in five-minute chunks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You want to securely distribute credentials for your Amazon RDS instance to your fleet of web server instances. The credentials are stored in a file that is controlled by a configuration management system. How do you securely deploy the credentials in an automated manner across the fleet of web server instances, which can number in the hundreds, while retaining the ability to roll back if needed?&lt;/p&gt;

&lt;p&gt;A. Store your credential files in an Amazon S3 bucket. Use Amazon S3 server-side encryption on the credential files. Have a scheduled job that pulls down the credential files into the instances every 10 minutes.&lt;br&gt;
B. Store the credential files in your version-controlled repository with the rest of your code. Have a post-commit action in version control that kicks off a job in your continuous integration system which securely copies the new credential files to all web server instances.&lt;br&gt;
C. Insert credential files into user data and use an instance lifecycle policy to periodically refresh the file from the user data.&lt;br&gt;
D. Keep credential files as a binary blob in an Amazon RDS MySQL DB instance, and have a script on each Amazon EC2 instance that pulls the files down from the RDS instance.&lt;br&gt;
E. Store the credential files in your version-controlled repository with the rest of your code. Use a parallel file copy program to send the credential files from your local machine to the Amazon EC2 instances.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are using a configuration management system to manage your Amazon EC2 instances. On your Amazon EC2 Instances, you want to store credentials for connecting to an Amazon RDS DB instance. How should you securely store these credentials?&lt;/p&gt;

&lt;p&gt;A. Give the Amazon EC2 instances an IAM role that allows read access to a private Amazon S3 bucket. Store a file with database credentials in the Amazon S3 bucket. Have your configuration management system pull the file from the bucket when it is needed.&lt;br&gt;
B. Launch an Amazon EC2 instance and use the configuration management system to bootstrap the instance with the Amazon RDS DB credentials. Create an AMI from this instance.&lt;br&gt;
C. Store the Amazon RDS DB credentials in Amazon EC2 user data. Import the credentials into the Instance on boot.&lt;br&gt;
D. Assign an IAM role to your Amazon RDS instance, and use this IAM role to access the Amazon RDS DB from your Amazon EC2 instances.&lt;br&gt;
E. Store your credentials in your version control system, in plaintext. Check out a copy of your credentials from the version control system on boot. Use Amazon EBS encryption on the volume storing the Amazon RDS DB credentials.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your company has developed a web application and is hosting it in an Amazon S3 bucket configured for static website hosting. The application is using the AWS SDK for JavaScript in the browser to access data stored in an Amazon DynamoDB table. How can you ensure that API keys for access to your data in DynamoDB are kept secure?&lt;/p&gt;

&lt;p&gt;A. Create an Amazon S3 role in IAM with access to the specific DynamoDB tables, and assign it to the bucket hosting your website.&lt;br&gt;
B. Configure S3 bucket tags with your AWS access keys for your bucket hosing your website so that the application can query them for access.&lt;br&gt;
C. Configure a web identity federation role within IAM to enable access to the correct DynamoDB resources and retrieve temporary credentials.&lt;br&gt;
D. Store AWS keys in global variables within your application and configure the application to use these credentials when making requests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to implement A/B deployments for several multi-tier web applications. Each of them has its Individual infrastructure: Amazon Elastic Compute Cloud (EC2) front-end servers, Amazon ElastiCache clusters, Amazon Simple Queue Service (SQS) queues, and Amazon Relational Database (RDS) Instances. Which combination of services would give you the ability to control traffic between different deployed versions of your application?&lt;/p&gt;

&lt;p&gt;A. Create one AWS Elastic Beanstalk application and all AWS resources (using configuration files inside the application source bundle) for each web application. New versions would be deployed a-eating Elastic Beanstalk environments and using the Swap URLs feature.&lt;br&gt;
B. Using AWS CloudFormation templates, create one Elastic Beanstalk application and all AWS resources (in the same template) for each web application. New versions would be deployed using AWS CloudFormation templates to create new Elastic Beanstalk environments, and traffic would be balanced between them using weighted Round Robin (WRR) records in Amazon Route53.&lt;br&gt;
C. Using AWS CloudFormation templates, create one Elastic Beanstalk application and all AWS resources (in the same template) for each web application. New versions would be deployed updating a parameter on the CloudFormation template and passing it to the cfn-hup helper daemon, and traffic would be balanced between them using Weighted Round Robin (WRR) records in Amazon Route 53.&lt;br&gt;
D. Create one Elastic Beanstalk application and all AWS resources (using configuration files inside the application source bundle) for each web application. New versions would be deployed updating the Elastic Beanstalk application version for the current Elastic Beanstalk environment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You work for an insurance company and are responsible for the day-to-day operations of your company’s online quote system used to provide insurance quotes to members of the public. Your company wants to use the application logs generated by the system to better understand customer behavior. Industry regulations also require that you retain all application logs for the system indefinitely in order to investigate fraudulent claims in the future. You have been tasked with designing a log management system with the following requirements: – All log entries must be retained by the system, even during unplanned instance failure. – The customer insight team requires immediate access to the logs from the past seven days. – The fraud investigation team requires access to all historic logs, but will wait up to 24 hours before these logs are available. How would you meet these requirements in a cost-effective manner? (Choose three.)&lt;/p&gt;

&lt;p&gt;A. Configure your application to write logs to the instance’s ephemeral disk, because this storage is free and has good write performance. Create a script that moves the logs from the instance to Amazon 53 once an hour.&lt;br&gt;
B. Write a script that is configured to be executed when the instance is stopped or terminated and that will upload any remaining logs on the instance to Amazon S3.&lt;br&gt;
C. Create an Amazon S3 lifecycle configuration to move log files from Amazon S3 to Amazon Glacier after seven days.&lt;br&gt;
D. Configure your application to write logs to the instance’s default Amazon EBS boot volume, because this storage already exists. Create a script that moves the logs from the instance to Amazon 53 once an hour.&lt;br&gt;
E. Configure your application to write logs to a separate Amazon EBS volume with the “delete on termination” field set to false. Create a script that moves the logs from the instance to Amazon S3 once an hour.&lt;br&gt;
F. Create a housekeeping script that runs on a T2 micro instance managed by an Auto Scaling group for high availability. The script uses the AWS API to identify any unattached Amazon EBS volumes containing log files. Your housekeeping script will mount the Amazon EBS volume, upload all logs to Amazon S3, and then delete the volume.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C E F&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have an application running on Amazon EC2 in an Auto Scaling group. Instances are being bootstrapped dynamically, and the bootstrapping takes over 15 minutes to complete. You find that instances are reported by Auto Scaling as being In Service before bootstrapping has completed. You are receiving application alarms related to new instances before they have completed bootstrapping, which is causing confusion. You find the cause: your application monitoring tool is polling the Auto Scaling Service API for instances that are In Service, and creating alarms for new previously unknown instances. Which of the following will ensure that new instances are not added to your application monitoring tool before bootstrapping is completed?&lt;/p&gt;

&lt;p&gt;A. Create an Auto Scaling group lifecycle hook to hold the instance in a pending: wait state until your bootstrapping is complete. Once bootstrapping is complete, notify Auto Scaling to complete the lifecycle hook and move the instance into a pending: complete state.&lt;br&gt;
B. Use the default Amazon CloudWatch application metrics to monitor your application’s health. Configure an Amazon SNS topic to send these CloudWatch alarms to the correct recipients.&lt;br&gt;
C. Tag all instances on launch to identify that they are in a pending state. Change your application monitoring tool to look for this tag before adding new instances, and then use the Amazon API to set the instance state to ‘pending’ until bootstrapping is complete.&lt;br&gt;
D. Increase the desired number of instances in your Auto Scaling group configuration to reduce the time it takes to bootstrap future instances.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have been given a business requirement to retain log files for your application for 10 years. You need to regularly retrieve the most recent logs for troubleshooting. Your logging system must be cost-effective, given the large volume of logs. What technique should you use to meet these requirements?&lt;/p&gt;

&lt;p&gt;A. Store your log in Amazon CloudWatch Logs.&lt;br&gt;
B. Store your logs in Amazon Glacier.&lt;br&gt;
C. Store your logs in Amazon S3, and use lifecycle policies to archive to Amazon Glacier.&lt;br&gt;
D. Store your logs in HDFS on an Amazon EMR cluster.&lt;br&gt;
E. Store your logs on Amazon EBS, and use Amazon EBS snapshots to archive them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You work for a startup that has developed a new photo-sharing application for mobile devices. Over recent months, your application has increased in popularity; this has resulted in a decrease in the performance of the application clue to the increased load. Your application has a two-tier architecture that is composed of an Auto Scaling PHP application tier and a MySQL RDS instance initially deployed with AWS CloudFormation. Your Auto Scaling group has a min value of 4 and a max value of 8. The desired capacity is now at 8 because of the high CPU utilization of the instances. After some analysis, you are confident that the performance issues stem from a constraint in CPU capacity, although memory utilization remains low. You therefore decide to move from the general-purpose M3 instances to the compute-optimized C3 instances. How would you deploy this change while minimizing any interruption to your end users?&lt;/p&gt;

&lt;p&gt;A. Sign into the AWS Management Console, copy the old launch configuration, and create a newlaunch configuration that specifies the C3 instances. Update the Auto Scaling group with the new launch configuration. Auto Scaling will then update the instance type of all running instances.&lt;br&gt;
B. Sign into the AWS Management Console, and update the existing launch configuration with the new C3 instance type. Add an UpdatePolicy attribute to your Auto Scaling group that specifies AutoScalingRollingUpdate.&lt;br&gt;
C. Update the launch configuration specified in the AWS CloudFormation template with the new C3 instance type. Run a stack update with the new template. Auto Scaling will then update the instances with the new instance type.&lt;br&gt;
D. Update the launch configuration specified in the AWS CloudFormation template with the new C3 instance type. Also add an UpdatePolicy attribute to your Auto Scaling group that specifies AutoScalingRollingUpdate. Run a stack update with the new template.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have been tasked with implementing an automated data backup solution for your application servers that run on Amazon EC2 with Amazon EBS volumes. You want to use a distributed data store for your backups to avoid single points of failure and to increase the durability of the data. Daily backups should be retained for 30 days so that you can restore data within an hour. How can you implement this through a script that a scheduling daemon runs daily on the application servers?&lt;/p&gt;

&lt;p&gt;A. Write the script to call the ec2-create-volume API, tag the Amazon EBS volume with the current date time group, and copy backup data to a second Amazon EBS volume. Use the ec2-describevolumes API to enumerate existing backup volumes. Call the ec2-delete-volume API to prune backup volumes that are tagged with a date-time group older than 30 days.&lt;br&gt;
B. Write the script to call the Amazon Glacier upload archive API, and tag the backup archive with the current date-time group. Use the list vaults API to enumerate existing backup archives Call the delete vault API to prune backup archives that are tagged with a date-time group older than 30 days.&lt;br&gt;
C. Write the script to call the ec2-create-snapshot API, and tag the Amazon EBS snapshot with the current date-time group. Use the ec2-describe-snapshot API to enumerate existing Amazon EBS snapshots. Call the ec2-delete-snapShot API to prune Amazon EBS snapshots that are tagged with a datetime group older than 30 days.&lt;br&gt;
D. Write the script to call the ec2-create-volume API, tag the Amazon EBS volume with the current date-time group, and use the ec2-copy-snapshot API to back up data to the new Amazon EBS volume. Use the ec2- describe-snapshot API to enumerate existing backup volumes. Call the ec2-delete-snapshot API to prune backup Amazon EBS volumes that are tagged with a date-time group older than 30 days.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your application uses CloudFormation to orchestrate your application’s resources. During your testing phase before the application went live, your Amazon RDS instance type was changed and caused the instance to be re-created, resulting In the loss of test data.How should you prevent this from occurring in the future?&lt;/p&gt;

&lt;p&gt;A. Within the AWS CloudFormation parameter with which users can select the Amazon RDS instance type, set AllowedValues to only contain the current instance type.&lt;br&gt;
B. Use an AWS CloudFormation stack policy to deny updates to the instance. Only allow UpdateStack permission to IAM principals that are denied SetStackPolicy.&lt;br&gt;
C. In the AWS CloudFormation template, set the AWS::RDS::DBInstance’s DBlnstanceClass property to be read-only.&lt;br&gt;
D. Subscribe to the AWS CloudFormation notification “BeforeResourceUpdate,” and call CancelStackUpdate if the resource identified is the Amazon RDS instance.&lt;br&gt;
E. In the AWS CloudFormation template, set the DeletionPolicy of the AWS::RDS::DBInstance’s DeletionPolicy property to “Retain.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: E&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your company develops a variety of web applications using many platforms and programming languages with different application dependencies. Each application must be developed and deployed quickly and be highly evadable to satisfy your business requirements. Which of the following methods should you use to deploy these applications rapidly?&lt;/p&gt;

&lt;p&gt;A. Develop the applications in Docker containers, and then deploy them to Elastic Beanstalk environments with Auto Scaling and Elastic Load Balancing.&lt;br&gt;
B. Use the AWS CloudFormation Docker import service to build and deploy the applications with high availability in multiple Availability Zones.&lt;br&gt;
C. Develop each application’s code in DynamoDB, and then use hooks to deploy it to Elastic Beanstalk environments with Auto Scaling and Elastic Load Balancing.&lt;br&gt;
D. Store each application’s code in a Git repository, develop custom package repository managers for each application’s dependencies, and deploy to AWS OpsWorks in multiple Availability Zones.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;p&gt;273 You have a large number of web servers in an Auto Scaling group behind a load balancer. On an hourly basis, you want to filter and process the logs to collect data on unique visitors, and then put that data in a durable data store in order to run reports. Web servers in the Auto Scaling group are constantly launching and terminating based on your scaling policies, but you do not want to lose any of the log data from these servers during a stop/termination initiated by a user or by Auto scaling. What two approaches will meet these requirements? (Choose two.)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    A. Install an Amazon Cloudwatch Logs Agent on every web server during the bootstrap process. Create a CloudWatch log group and define Metric Filters to create custom metrics that track unique visitors from the streaming web server logs. Create a scheduled task on an Amazon EC2 instance that runs every hour to generate a new report based on the Cloudwatch custom metrics.
    B. On the web servers, create a scheduled task that executes a script to rotate and transmit the logs to Amazon Glacier. Ensure that the operating system shutdown procedure triggers a logs transmission when the Amazon EC2 instance is stopped/terminated. Use Amazon Data Pipeline to process the data in Amazon Glacier and run reports every hour.
    C. On the web servers, create a scheduled task that executes a script to rotate and transmit the logs to an Amazon S3 bucket. Ensure that the operating system shutdown procedure triggers a logs transmission when the Amazon EC2 instance is stopped/terminated. Use AWS Data Pipeline to move log data from the Amazon S3 bucket to Amazon Redshift In order to process and run reports every hour.
    D. Install an AWS Data Pipeline Logs Agent on every web server during the bootstrap process. Create a log group object in AWS Data Pipeline, and define Metric Filters to move processed log data directly from the web servers to Amazon Redshift and run reports every hour.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Answer: A,C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have been tasked with deploying a scalable distributed system using AWS OpsWorks. Your a distributed system is required to scale on demand. As it is distributed, each node must hold a configuration file that includes the hostnames of the other instances within the layer. How should you configure AWS OpsWorks to manage scaling this application dynamically?&lt;/p&gt;

&lt;p&gt;A. Create a Chef Recipe to update this configuration file, configure your AWS OpsWorks stack to use custom cookbooks, and assign this recipe to the Configure LifeCycle Event of the specific layer.&lt;br&gt;
B. Update this configuration file by writing a script to poll the AWS OpsWorks service API for new instances. Configure your base AMI to execute this script on Operating System startup.&lt;br&gt;
C. Create a Chef Recipe to update this configuration file, configure your AWS OpsWorks stack to use custom cookbooks, and assign this recipe to execute when instances are launched.&lt;br&gt;
D. Configure your AWS OpsWorks layer to use the AWS-provided recipe for distributed host configuration, and configure the instance hostname and file path parameters in your recipes settings.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have an application running on an Amazon EC2 instance and you are using IAM roles to securely access AWS Service APIs. How can you configure your application running on that instance to retrieve the API keys for use with the AWS SDKs?&lt;/p&gt;

&lt;p&gt;A. When assigning an EC2 IAM role to your instance in the console, in the “Chosen SDK” dropdown list, select the SDK that you are using, and the instance will configure the correct SDK on launch with the API keys.&lt;br&gt;
B. Within your application code, make a GET request to the IAM Service API to retrieve credentials for your user.&lt;br&gt;
C. When using AWS SDKs and Amazon EC2 roles, you do not have to explicitly retrieve API keys, because the SDK handles retrieving them from the Amazon EC2 MetaData service.&lt;br&gt;
D. Within your application code, configure the AWS SDK to get the API keys from environment variables, because assigning an Amazon EC2 role stores keys in environment variables on launch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When an Auto Scaling group is running in Amazon Elastic Compute Cloud (EC2), your application rapidly scales up and down in response to load within a 10-minute window; however, after the load peaks, you begin to see problems in your configuration management system where previously terminated Amazon EC2 resources are still showing as active. What would be a reliable and efficient way to handle the cleanup of Amazon EC2 resources within your configuration management system? (Choose two.)&lt;/p&gt;

&lt;p&gt;A. Write a script that is run by a daily cron job on an Amazon EC2 instance and that executes API Describe calls of the EC2 Auto Scaling group and removes terminated instances from the configuration management system.&lt;br&gt;
B. Configure an Amazon Simple Queue Service (SQS) queue for Auto Scaling actions that has a script that listens for new messages and removes terminated instances from the configuration management system.&lt;br&gt;
C. Use your existing configuration management system to control the launching and bootstrapping of instances to reduce the number of moving parts in the automation.&lt;br&gt;
D. Write a small script that is run during Amazon EC2 instance shutdown to de-register the resource from the configuration management system.&lt;br&gt;
E. Use Amazon Simple Workflow Service (SWF) to maintain an Amazon DynamoDB database that contains a whitelist of instances that have been previously launched, and allow the Amazon SWF worker to remove information from the configuration management system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A,D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have enabled Elastic Load Balancing HTTP health checking. After looking at the AWS Management Console, you see that all instances are passing health checks, but your customers are reporting that your site is not responding. What is the cause?&lt;/p&gt;

&lt;p&gt;A. The HTTP health checking system is misreporting due to latency in inter-instance metadata synchronization.&lt;br&gt;
B. The health check in place is not sufficiently evaluating the application function.&lt;br&gt;
C. The application is returning a positive health check too quickly for the AWS Management Console to respond.&lt;br&gt;
D. Latency in DNS resolution is interfering with Amazon EC2 metadata retrieval.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You use Amazon CloudWatch as your primary monitoring system for your web application. After a recent software deployment, your users are getting Intermittent 500 Internal Server Errors when using the web application. You want to create a CloudWatch alarm, and notify an on-call engineer when these occur. How can you accomplish this using AWS services? (Choose three.)&lt;/p&gt;

&lt;p&gt;A. Deploy your web application as an AWS Elastic Beanstalk application. Use the default Elastic Beanstalk Cloudwatch metrics to capture 500 Internal Server Errors. Set a CloudWatch alarm on that metric.&lt;br&gt;
B. Install a CloudWatch Logs Agent on your servers to stream web application logs to CloudWatch.&lt;br&gt;&lt;br&gt;
C. Use Amazon Simple Email Service to notify an on-call engineer when a CloudWatch alarm is triggered.&lt;br&gt;
D. Create a CloudWatch Logs group and define metric filters that capture 500 Internal Server Errors. Set a CloudWatch alarm on that metric.&lt;br&gt;
E. Use Amazon Simple Notification Service to notify an on-call engineer when a CloudWatch alarm is triggered.&lt;br&gt;
F. Use AWS Data Pipeline to stream web application logs from your servers to CloudWatch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B,D,E&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After a daily scrum with your development teams, you’ve agreed that using Blue/Green style deployments would benefit the team. Which technique should you use to deliver this new requirement?&lt;/p&gt;

&lt;p&gt;A. Re-deploy your application on AWS Elastic Beanstalk, and take advantage of Elastic Beanstalk deployment types.&lt;br&gt;
B. Using an AWS CloudFormation template, re-deploy your application behind a load balancer, launch a new AWS CloudFormation stack during each deployment, update your load balancer to send half your traffic to the new stack while you test, after verification update the load balancer to send 100% of traffic to the new stack, and then terminate the old stack.&lt;br&gt;
C. Re-deploy your application behind a load balancer that uses Auto Scaling groups, create a new identical Auto Scaling group, and associate it to the load balancer. During deployment, set the desired number of instances on the old Auto Scaling group to zero, and when all instances have terminated, delete the old Auto Scaling group.&lt;br&gt;
D. Using an AWS OpsWorks stack, re-deploy your application behind an Elastic Load Balancing load balancer and take advantage of OpsWorks stack versioning, during deployment create a new version of your application, tell OpsWorks to launch the new version behind your load balancer, and when the new version is launched, terminate the old OpsWorks stack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your development team wants account-level access to production instances in order to do live debugging of a highly secure environment. Which of the following should you do?&lt;/p&gt;

&lt;p&gt;A. Place the credentials provided by Amazon Elastic Compute Cloud (EC2) into a secure Amazon Sample Storage Service (S3) bucket with encryption enabled. Assign AWS Identity and Access Management (IAM) users to each developer so they can download the credentials file.&lt;br&gt;
B. Place an internally created private key into a secure S3 bucket with server-side encryption using customer keys and configuration management, create a service account on all the instances using this private key, and assign IAM users to each developer so they can download the file.&lt;br&gt;
C. Place each developer’s own public key into a private S3 bucket, use instance profiles and configuration management to create a user account for each developer on all instances, and place the user’s public keys into the appropriate account.&lt;br&gt;
D. Place the credentials provided by Amazon EC2 onto an MFA encrypted USB drive, and physically share it with each developer so that the private key never leaves the office.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;As part of your continuous deployment process, your application undergoes an I/O load performance test before it is deployed to production using new AMIs. The application uses one Amazon Elastic Block Store (EBS) IOPS volume per instance and requires consistent I/O performance. Which of the following must be carried out to ensure that I/O load performance tests yield the correct results in a repeatable manner?&lt;/p&gt;

&lt;p&gt;A. Ensure that the I/O block sizes for the test are randomly selected.&lt;br&gt;
B. Ensure that the Amazon EBS volumes have been pre-warmed by reading all the blocks before the test.&lt;br&gt;
C. Ensure that snapshots of the Amazon EBS volumes are created as a backup.&lt;br&gt;
D. Ensure that the Amazon EBS volume is encrypted.&lt;br&gt;
E. Ensure that the Amazon EBS volume has been pre-warmed by creating a snapshot of the volume before the test.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After reviewing the last quarter’s monthly bills, management has noticed an increase in the overall bill from Amazon. After researching this increase in cost, you discovered that one of your new services is doing a lot of GET Bucket API calls to Amazon S3 to build a metadata cache of all objects in the applications bucket. Your boss has asked you to come up with a new cost-effective way to help reduce the amount of these new GET Bucket API calls. What process should you use to help mitigate the cost?&lt;/p&gt;

&lt;p&gt;A. Update your Amazon S3 buckets’ lifecycle policies to automatically push a list of objects to a new bucket, and use this list to view objects associated with the application’s bucket.&lt;br&gt;
B. Create a new DynamoDB table. Use the new DynamoDB table to store all metadata about all objects uploaded to Amazon S3. Any time a new object is uploaded, update the application’s internal Amazon S3 object metadata cache from DynamoDB.&lt;br&gt;
C. Using Amazon SNS, create a notification on any new Amazon S3 objects that automatically updates a new DynamoDB table to store all metadata about the new object. Subscribe the application to the Amazon SNS topic to update its internal Amazon S3 object metadata cache from the DynamoDB table.&lt;br&gt;
D. Upload all images to Amazon SQS, set up SQS lifecycles to move all images to Amazon S3, and initiate an Amazon SNS notification to your application to update the application’s Internal Amazon S3 object metadata cache.&lt;br&gt;
E. Upload all images to an ElastiCache filecache server. Update your application to now read all file metadata from the ElastiCache filecache server, and configure the ElastiCache policies to push all files to Amazon S3 for long-term storage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your current log analysis application takes more than four hours to generate a report of the top 10 users of your web application. You have been asked to implement a system that can report this information in real time, ensure that the report is always up to date, and handle increases in the number of requests to your web application. Choose the option that is cost-effective and can fulfill the requirements.&lt;/p&gt;

&lt;p&gt;A. Publish your data to CloudWatch Logs, and configure your application to autoscale to handle the load on demand.&lt;br&gt;
B. Publish your log data to an Amazon S3 bucket. Use AWS CloudFormation to create an Auto Scaling group to scale your post-processing application which is configured to pull down your log files stored an Amazon S3.&lt;br&gt;
C. Post your log data to an Amazon Kinesis data stream, and subscribe your log-processing application so that is configured to process your logging data.&lt;br&gt;
D. Configure an Auto Scaling group to increase the size of your Amazon EMR duster.&lt;br&gt;
E. Create a multi-AZ Amazon RDS MySQL cluster, post the logging data to MySQL, and run a map reduce job to retrieve the required information on user counts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are using Elastic Beanstalk to manage your e-commerce store. The store is based on an open source e- commerce platform and is deployed across multiple instances in an Auto Scaling group. Your development team often creates new “extensions” for the e-commerce store. These extensions include PHP source code as well as an SQL upgrade script used to make any necessary updates to the database schema. You have noticed that some extension deployments fail due to an error when running the SQL upgrade script. After further investigation, you realize that this is because the SQL script is being executed on all of your Amazon EC2 instances. How would you ensure that the SQL script is only executed once per deployment regardless of how many Amazon EC2 instances are running at the time?&lt;/p&gt;

&lt;p&gt;A. Use a “Container command” within an Elastic Beanstalk configuration file to execute the script, ensuring that the “leader only” flag is set to true.&lt;br&gt;
B. Make use of the Amazon EC2 metadata service to query whether the instance is marked as the leader” in the Auto Scaling group. Only execute the script if “true” is returned.&lt;br&gt;
C. Use a “Solo Command” within an Elastic Beanstalk configuration file to execute the script. The Elastic Beanstalk service will ensure that the command is only executed once.&lt;br&gt;
D. Update the Amazon RDS security group to only allow write access from a single instance in the Auto Scaling group; that way, only one instance will successfully execute the script on the database.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are administering a continuous integration application that polls version control for changes and then launches new Amazon EC2 instances for a full suite of build tests. What should you do to ensure the lowest overall cost while being able to run as many tests in parallel as possible?&lt;/p&gt;

&lt;p&gt;A. Perform syntax checking on the continuous integration system before launching a new Amazon EC2 instance for build test, unit and integration tests.&lt;br&gt;
B. Perform syntax and build tests on the continuous integration system before launching the new Amazon EC2 instance unit and integration tests.&lt;br&gt;
C. Perform all tests on the continuous integration system, using AWS OpsWorks for unit, integration, and build tests.&lt;br&gt;
D. Perform syntax checking on the continuous integration system before launching a new AWS Data Pipeline for coordinating the output of unit, integration, and build tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are doing a load testing exercise on your application hosted on AWS. While testing your Amazon RDS MySQL DB instance, you notice that when you hit 100% CPU utilization on it, your application becomes non- responsive. Your application is read-heavy. What are methods to scale your data tier to meet the application’s needs? (Choose three.)&lt;/p&gt;

&lt;p&gt;A. Add Amazon RDS DB read replicas, and have your application direct read queries to them.&lt;br&gt;
B. Add your Amazon RDS DB instance to an Auto Scaling group and configure your CloudWatch metric based on CPU utilization.&lt;br&gt;
C. Use an Amazon SQS queue to throttle data going to the Amazon RDS DB instance.&lt;br&gt;
D. Use ElastiCache in front of your Amazon RDS DB to cache common queries.&lt;br&gt;
E. Shard your data set among multiple Amazon RDS DB instances.&lt;br&gt;
F. Enable Multi-AZ for your Amazon RDS DB instance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A,D,E&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your mobile application includes a photo-sharing service that is expecting tens of thousands of users at launch. You will leverage Amazon Simple Storage Service (S3) for storage of the user Images, and you must decide how to authenticate and authorize your users for access to these images. You also need to manage the storage of these images. Which two of the following approaches should you use? (Choose two.)&lt;/p&gt;

&lt;p&gt;A. Create an Amazon S3 bucket per user, and use your application to generate the S3 URI for the appropriate content.&lt;br&gt;
B. Use AWS Identity and Access Management (IAM) user accounts as your application-level user database, and offload the burden of authentication from your application code.&lt;br&gt;
C. Authenticate your users at the application level, and use AWS Security Token Service (STS) to grant token-based authorization to S3 objects.&lt;br&gt;
D. Authenticate your users at the application level, and send an SMS token message to the user. Create an Amazon S3 bucket with the same name as the SMS message token, and move the user’s objects to that bucket.&lt;br&gt;
E. Use a key-based naming scheme composed from the user IDs for all user objects in a single Amazon S3 bucket.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C,E&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have an Auto Sealing group of Instances that processes messages from an Amazon Simple Queue Service (SQS) queue. The group scales on the size of the queue. Processing Involves calling a third-party web service. The web service is complaining about the number of failed and repeated calls it is receiving from you. You have noticed that when the group scales in, instances are being terminated while they are processing. What cost-effective solution can you use to reduce the number of incomplete process attempts?&lt;/p&gt;

&lt;p&gt;A. Create a new Auto Scaling group with minimum and maximum of 2 and instances running web proxy software. Configure the VPC route table to route HTTP traffic to these web proxies.&lt;br&gt;
B. Modify the application running on the instances to enable termination protection while it processes a task and disable it when the processing is complete.&lt;br&gt;
C. Increase the minimum and maximum size for the Auto Scaling group, and change the scaling policies so they scale less dynamically.&lt;br&gt;
D. Modify the application running on the instances to put itself into an Autoscaling Standby state while it processes a task and returns itself to InService when the processing is complete.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The operations team and the development team want a single place to view both operating system and application logs. How should you implement this using AWS services? (Choose two.)&lt;/p&gt;

&lt;p&gt;A. Using AWS CloudFormation, create a CloudWatch Logs LogGroup and send the operating system and application logs of interest using the CloudWatch Logs Agent.&lt;br&gt;
B. Using AWS CloudFormation and configuration management, set up remote logging to send events via UDP packets to CloudTrail.&lt;br&gt;
C. Using configuration management, set up remote logging to send events to Amazon Kinesis and insert these into Amazon CloudSearch or Amazon Redshift, depending on available analytic tools.&lt;br&gt;
D. Using AWS CloudFormation, create a CloudWatch Logs LogGroup. Because the Cloudwatch Log agent automatically sends all operating system logs, you only have to configure the application logs for sending off-machine.&lt;br&gt;
E. Using AWS CloudFormation, merge the application logs with the operating system logs, and use IAM Roles to allow both teams to have access to view console output from Amazon EC2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: A,C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The project you are working on currently uses a single AWS CloudFormation template to deploy its AWS infrastructure, which supports a multi-tier web application. You have been tasked with organizing the AWS CloudFormation resources so that they can be maintained in the future, and so that different departments such as Networking and Security can review the architecture before it goes to Production. How should you do this in a way that accommodates each department, using their existing workflows?&lt;/p&gt;

&lt;p&gt;A. Organize the AWS CloudFormation template so that related resources are next to each other in the template, such as VPC subnets and routing rules for Networking and security groups and IAM information for Security.&lt;br&gt;
B. Separate the AWS CloudFormation template into a nested structure that has individual templates for the resources that are to be governed by different departments, and use the outputs from the networking and security stacks for the application template that you control&lt;br&gt;
C. Organize the AWS CloudFormation template so that related resources are next to each other in the template for each department’s use, leverage your existing continuous integration tool to constantly deploy changes from all parties to the Production environment, and then run tests for validation.&lt;br&gt;
D. Use a custom application and the AWS SDK to replicate the resources defined in the current AWS CloudFormation template, and use the existing code review system to allow other departments to approve changes before altering the application for future deployments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You currently run your infrastructure on Amazon EC2 instances behind an Auto Scaling group. All logs for you application are currently written to ephemeral storage. Recently your company experienced a major bug in code that made it through testing and was ultimately deployed to your fleet. This bug triggered your Auto Scaling group to scale up and back down before you could successfully retrieve the logs off your server to better assist you in troubleshooting the bug. Which technique should you use to make sure you are able to review your logs after your instances have shut down?&lt;/p&gt;

&lt;p&gt;A. Configure the ephemeral policies on your Auto Scaling group to back up on terminate.&lt;br&gt;
B. Configure your Auto Scaling policies to create a snapshot of all ephemeral storage on terminate.&lt;br&gt;
C. Install the CloudWatch Logs Agent on your AMI, and configure CloudWatch Logs Agent to stream your logs.&lt;br&gt;
D. Install the CloudWatch monitoring agent on your AMI, and set up a new SNS alert for CloudWatch metrics that triggers the CloudWatch monitoring agent to backup all logs on the ephemeral drive.&lt;br&gt;
E. Install the CloudWatch monitoring agent on your AMI, Update your Auto Scaling policy to enable automated CloudWatch Log copy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Management has reported an increase in the monthly bill from Amazon web services, and they are extremely concerned with this increased cost. Management has asked you to determine the exact cause of this increase. After reviewing the billing report, you notice an increase in the data transfer cost. How can you provide management with a better insight into data transfer use?&lt;/p&gt;

&lt;p&gt;A. Update your Amazon CloudWatch metrics to use five-second granularity, which will give better detailed metrics that can be combined with your billing data to pinpoint anomalies.&lt;br&gt;
B. Use Amazon CloudWatch Logs to run a map-reduce on your logs to determine high usage and data transfer.&lt;br&gt;&lt;br&gt;
C. Deliver custom metrics to Amazon CloudWatch per application that breaks down application data transfer into multiple, more specific data points.&lt;br&gt;
D. Using Amazon CloudWatch metrics, pull your Elastic Load Balancing outbound data transfer metrics monthly, and include them with your billing report to show which application is causing higher bandwidth usage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;During metric analysis, your team has determined that the company’s website is experiencing response times during peak hours that are higher than anticipated. You currently rely on Auto Scaling to make sure that you are scaling your environment during peak windows. How can you improve your Auto Scaling policy to reduce this high response time? (Choose two.)&lt;/p&gt;

&lt;p&gt;A. Push custom metrics to CloudWatch to monitor your CPU and network bandwidth from your servers, which will allow your Auto Scaling policy to have better fine-grain insight.&lt;br&gt;
B. Increase your Autoscaling group’s number of max servers.&lt;br&gt;
C. Create a script that runs and monitors your servers; when it detects an anomaly in load, it posts to an Amazon SNS topic that triggers Elastic Load Balancing to add more servers to the load balancer.&lt;br&gt;&lt;br&gt;
D. Push custom metrics to CloudWatch for your application that include more detailed information about your web application, such as how many requests it is handling and how many are waiting to be processed.&lt;br&gt;
E. Update the CloudWatch metric used for your Auto Scaling policy, and enable sub-minute granularity to allow auto scaling to trigger faster.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B,D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are responsible for your company’s large multi-tiered Windows-based web application running on Amazon EC2 instances situated behind a load balancer. While reviewing metrics, you have started noticing an upwards trend for slow customer page load time. Your manager has asked you to come up with a solution to ensure that customer load time is not affected by too many requests per second. Which technique would you use to solve this issue?&lt;/p&gt;

&lt;p&gt;A. Re-deploy your infrastructure using an AWS CloudFormation template. Configure Elastic Load Balancing health checks to initiate a new AWS CloudFormation stack when health checks return failed.&lt;br&gt;
B. Re-deploy your infrastructure using an AWS CloudFormation template. Spin up a second AWS CloudFormation stack. Configure Elastic Load Balancing SpillOver functionality to spill over any slow connections to the second AWS CloudFormation stack.&lt;br&gt;
C. Re-deploy your infrastructure using AWS CloudFormation, Elastic Beanstalk, and Auto Scaling. Set up your Auto Scaling group policies to scale based on the number of requests per second as well as the current customer load time.&lt;br&gt;
D. Re-deploy your application using an Auto Scaling template. Configure the Auto Scaling template to spin up a new Elastic Beanstalk application when the customer load time surpasses your threshold.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your company has multiple applications running on AWS. Your company wants to develop a tool that notifies on-call teams immediately via email when an alarm is triggered in your environment. You have multiple on-call teams that work different shifts, and the tool should handle notifying the correct teams at the correct times. How should you implement this solution?&lt;/p&gt;

&lt;p&gt;A. Create an Amazon SNS topic and an Amazon SQS queue. Configure the Amazon SQS queue as a subscriber to the Amazon SNS topic. Configure CloudWatch alarms to notify this topic when an alarm is triggered. Create an Amazon EC2 Auto Scaling group with both minimum and desired Instances configured to 0. Worker nodes in this group spawn when messages are added to the queue. Workers then use Amazon Simple Email Service to send messages to your on call teams.&lt;br&gt;
B. Create an Amazon SNS topic and configure your on-call team email addresses as subscribers. Use the AWS SDK tools to integrate your application with Amazon SNS and send messages to this new topic. Notifications will be sent to on-call users when a CloudWatch alarm is triggered.&lt;br&gt;
C. Create an Amazon SNS topic and configure your on-call team email addresses as subscribers. Create a secondary Amazon SNS topic for alarms and configure your CloudWatch alarms to notify this topic when triggered. Create an HTTP subscriber to this topic that notifies your application via HTTP POST when an alarm is triggered. Use the AWS SDK tools to integrate your application with Amazon SNS and send messages to the first topic so that on-call engineers receive alerts.&lt;br&gt;
D. Create an Amazon SNS topic for each on-call group, and configure each of these with the team member emails as subscribers. Create another Amazon SNS topic and configure your CloudWatch alarms to notify this topic when triggered. Create an HTTP subscriber to this topic that notifies your application via HTTP POST when an alarm is triggered. Use the AWS SDK tools to integrate your application with Amazon SNS and send messages to the correct team topic when on shift.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your company releases new features with high frequency while demanding high application availability. As part of the application’s A/B testing, logs from each updated Amazon EC2 instance of the application need to be analyzed in near real-time, to ensure that the application is working flawlessly after each deployment. If the logs show arty anomalous behavior, then the application version of the instance is changed to a more stable one. Which of the following methods should you use for shipping and analyzing the logs in a highly available manner?&lt;/p&gt;

&lt;p&gt;A. Ship the logs to Amazon S3 for durability and use Amazon EMR to analyze the logs in a batch manner each hour.&lt;br&gt;
B. Ship the logs to Amazon CloudWatch Logs and use Amazon EMR to analyze the logs in a batch manner each hour.&lt;br&gt;
C. Ship the logs to an Amazon Kinesis stream and have the consumers analyze the logs in a live manner.&lt;br&gt;
D. Ship the logs to a large Amazon EC2 instance and analyze the logs in a live manner.&lt;br&gt;
E. Store the logs locally on each instance and then have an Amazon Kinesis stream pull the logs for live analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have a code repository that uses Amazon S3 as a data store. During a recent audit of your security controls, some concerns were raised about maintaining the integrity of the data in the Amazon S3 bucket. Another concern was raised around securely deploying code from Amazon S3 to applications running on Amazon EC2 in a virtual private cloud. What are some measures that you can implement to mitigate these concerns? (Choose two.)&lt;/p&gt;

&lt;p&gt;A. Add an Amazon S3 bucket policy with a condition statement to allow access only from Amazon EC2 instances with RFC 1918 IP addresses and enable bucket versioning.&lt;br&gt;
B. Add an Amazon S3 bucket policy with a condition statement that requires multi-factor authentication in order to delete objects and enable bucket versioning.&lt;br&gt;
C. Use a configuration management service to deploy AWS Identity and Access Management user credentials to the Amazon EC2 instances. Use these credentials to securely access the Amazon S3 bucket when deploying code.&lt;br&gt;
D. Create an Amazon Identity and Access Management role with authorization to access the Amazon 53 bucket, and launch all of your application’s Amazon EC2 instances with this role.&lt;br&gt;
E. Use AWS Data Pipeline to lifecycle the data in your Amazon S3 bucket to Amazon Glacier on a weekly basis.&lt;br&gt;
F. Use AWS Data Pipeline with multi-factor authentication to securely deploy code from the Amazon S.3 bucket to your Amazon EC2 instances.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B,D&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have an application consisting of a stateless web server tier running on Amazon EC2 instances behind load balancer, and are using Amazon RDS with read replicas. Which of the following methods should you use to implement a self-healing and cost-effective architecture? (Choose two.)&lt;/p&gt;

&lt;p&gt;A. Set up a third-party monitoring solution on a cluster of Amazon EC2 instances in order to emit custom CloudWatch metrics to trigger the termination of unhealthy Amazon EC2 instances.&lt;br&gt;
B. Set up scripts on each Amazon EC2 instance to frequently send ICMP pings to the load balancer in order to determine which instance is unhealthy and replace it.&lt;br&gt;
C. Set up an Auto Scaling group for the web server tier along with an Auto Scaling policy that uses the Amazon RDS DB CPU utilization CloudWatch metric to scale the instances.&lt;br&gt;
D. Set up an Auto Scaling group for the web server tier along with an Auto Scaling policy that uses the Amazon EC2 CPU utilization CloudWatch metric to scale the instances.&lt;br&gt;
E. Use a larger Amazon EC2 instance type for the web server tier and a larger DB instance type for the data storage layer to ensure that they don’t become unhealthy.&lt;br&gt;
F. Set up an Auto Scaling group for the database tier along with an Auto Scaling policy that uses the Amazon RDS read replica lag CloudWatch metric to scale out the Amazon RDS read replicas.&lt;br&gt;
G. Use an Amazon RDS Multi-AZ deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: D, G&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your application is currently running on Amazon EC2 instances behind a load balancer. Your management has decided to use a Blue/Green deployment strategy. How should you implement this for each deployment?&lt;/p&gt;

&lt;p&gt;A. Set up Amazon Route 53 health checks to fail over from any Amazon EC2 instance that is currently being deployed to.&lt;br&gt;
B. Using AWS CloudFormation, create a test stack for validating the code, and then deploy the code to each production Amazon EC2 instance.&lt;br&gt;
C. Create a new load balancer with new Amazon EC2 instances, carry out the deployment, and then switch DNS over to the new load balancer using Amazon Route 53 after testing.&lt;br&gt;
D. Launch more Amazon EC2 instances to ensure high availability, de-register each Amazon EC2 instance from the load balancer, upgrade it, and test it, and then register it again with the load balancer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your company currently runs a large multi-tier web application. One component is an API service that all other components of your application rely on to perform read/write operations. This service must have high availability and zero downtime during deployments. Which technique should you use to provide cost-effective, zero-downtime deployments for this component?&lt;/p&gt;

&lt;p&gt;A. Use an AWS CloudFormation template to re-deploy your application behind a load balancer, and launch a new AWS CloudFormation stack during each deployment. Update your load balancer to send traffic to the new stack, and then deploy your software. Leave your old stacks running, and tag their resources with the version for rollback.&lt;br&gt;
B. Re-deploy your application on Elastic Beanstalk. During deployment, create a new version of your application, and create a new environment running that version in Elastic BeanStalk. Finally, take advantage of the Elastic Beanstalk Swap CNAME operation to switch to the new environment.&lt;br&gt;
C. Re-deploy your application behind a load balancer that uses Auto Scaling groups. Create a new identical Auto Scaling group and associate it to your Amazon Route53 zone. Configure Amazon Route53 to auto- weight traffic over to the new Auto Scaling group when all instances are marked as healthy.&lt;br&gt;
D. Re-deploy your application behind a load balancer using an AWS OpsWorks stack and use AWS OpsWorks stack versioning, during deployment create a new version of your application, tell AWS OpsWorks to launch the new version behind your load balancer, and when the new version is launched, terminate the old AWS OpsWorks stack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Answer: B&lt;/p&gt;

</description>
      <category>awslagi</category>
      <category>aws</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>Markdown Linting </title>
      <author>Adam Gordon Bell</author>
      <pubDate>Thu, 19 Aug 2021 15:22:34 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/markdown-linting-5a3</link>
      <guid>https://dev.to/adamgordonbell/markdown-linting-5a3</guid>
      <description>&lt;p&gt;Many linting, code formatting, and static analysis tools exist for code. You can use &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;gofmt&lt;/code&gt;, or many other static analysis tools, combined with a great continuous integration process, and ensure that your code stays in good shape. But what about markdown files and documentation? How do you ensure you aren't committing spelling and grammar mistakes? How do you ensure your files are valid markdown and that the language you are using is clear and correct? You can do this and more with a documentation linter.&lt;/p&gt;

&lt;p&gt;Many tools exist for finding problems in text files. You can use this list as a starting point for finding the markdown and prose linting tools that best fit your needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docs as Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The movement behind testing and linting prose is known as &lt;a href="https://www.writethedocs.org/guide/docs-as-code/"&gt;Docs as Code&lt;/a&gt;, and the &lt;a href="https://www.writethedocs.org/"&gt;Writing The Docs&lt;/a&gt; website is a great place to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criteria"&gt;
  &lt;/a&gt;
  Criteria
&lt;/h2&gt;

&lt;p&gt;For Ease of skimming, I'll rate each tool based on this criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Formatting:&lt;/strong&gt; The ability to find errors in the formatting of text files (markdown, txt, asciidoc).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Spelling:&lt;/strong&gt; The ability to find spelling mistakes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Grammar:&lt;/strong&gt; The ability to detect grammar errors.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Clarity:&lt;/strong&gt; The ability to suggest changes that can improve writing clarity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, I will rate tools based on their feature set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Remediation:&lt;/strong&gt; The ability to fix errors without manual intervention.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Customization:&lt;/strong&gt; How well the tool can be customized to fit your use case. If you can't exclude a rule or disable a warning, CI usage may be challenging. The most robust tools support custom rules and documentation style guides.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integrated Developer Environment (IDE) support:&lt;/strong&gt; Ability to use in common code editors&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Continuous Integration (CI) / Command Line Interface (CLI) Usage:&lt;/strong&gt; Ability to be used at the command line and in a continuous integration environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#markdown-lint"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/DavidAnson/markdownlint"&gt;Markdown Lint&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BahKsvN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/markdownlint4-800-99dd9fb9b.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BahKsvN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/markdownlint4-800-99dd9fb9b.webp" alt="markdown lint GitHub Readme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;markdownlint&lt;/code&gt; is a node.js markdown linter that is easy to install and easy to customize. It is based on an earlier Ruby tool, also called &lt;a href="https://github.com/markdownlint/markdownlint"&gt;markdownlint&lt;/a&gt;. Both are great, but the Node.js tool is easy to install and easy to customize.  &lt;/p&gt;

&lt;p&gt;You can disable specific rules inline ( &lt;code&gt;&amp;lt;!-- markdownlint-disable-file MD001 --&amp;gt;&lt;/code&gt; ) and set up a per-project config in a &lt;code&gt;.markdownlintrc&lt;/code&gt; file. It also supports writing custom rules in JavaScript and can remediate many problems itself with the &lt;code&gt;fix&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdownlint --fix "./_posts/*.md"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't handle spelling, grammar, or sentence structure, but it can't be beaten for dealing with markdown structure and it has a great online &lt;a href="https://dlaa.me/markdownlint/"&gt;demo site&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Formatting: 5&lt;/li&gt;
&lt;li&gt;Spelling: 0&lt;/li&gt;
&lt;li&gt;Grammar: 0&lt;/li&gt;
&lt;li&gt;Clarity: 0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease of Use: 5&lt;/li&gt;
&lt;li&gt;Remediation: 5&lt;/li&gt;
&lt;li&gt;Customization: 5&lt;/li&gt;
&lt;li&gt;IDE support: 5&lt;/li&gt;
&lt;li&gt;CI / CLI Support: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mdspell"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/markdown-spellcheck"&gt;mdspell&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLlgm97A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/mdspell1-800-4bbda79e3.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLlgm97A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/mdspell1-800-4bbda79e3.webp" alt="mdspell readme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mdspell&lt;/code&gt; is a tool specifically for spelling checking markdown documents. Install it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i markdown-spellcheck -g    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run it on markdown files in an interactive mode that builds up a custom dictionary of exceptions. You can then use that list later in a continuous integration process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mdspell -n -a --en-us  ./blog/_posts/2021-02-11-mitmproxy.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The downsides of &lt;code&gt;mdspell&lt;/code&gt; are that the dictionary will likely complain about lots of words that are quite common. It may take some time to build up a list of exceptions. As a shortcut, you might be able to find some more &lt;code&gt;.spelling&lt;/code&gt; files on GitHub.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Formatting: 0&lt;/li&gt;
&lt;li&gt;Spelling: 5&lt;/li&gt;
&lt;li&gt;Grammar: 0&lt;/li&gt;
&lt;li&gt;Clarity: 0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease of Use: 5&lt;/li&gt;
&lt;li&gt;Remediation: 5&lt;/li&gt;
&lt;li&gt;Customization: 5&lt;/li&gt;
&lt;li&gt;IDE support: 5&lt;/li&gt;
&lt;li&gt;CI / CLI Support: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#alex"&gt;
  &lt;/a&gt;
  &lt;a href="https://alexjs.com/"&gt;alex&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ulhOsqwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/alex-800-446c930fd.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ulhOsqwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/alex-800-446c930fd.webp" alt="alex.js readme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;alex&lt;/code&gt; does one thing: catches insensitive and inconsiderate writing. It supports markdown files, and works via command-line, and has various IDE integrations. The specificity of &lt;code&gt;alex&lt;/code&gt; is its strength. For my rubric, I am scoring it under clarity as catching insensitive writing certainly improves clarity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Formatting: 0&lt;/li&gt;
&lt;li&gt;Spelling: 0&lt;/li&gt;
&lt;li&gt;Grammar: 0&lt;/li&gt;
&lt;li&gt;Clarity: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease of Use: 5&lt;/li&gt;
&lt;li&gt;Remediation: 5&lt;/li&gt;
&lt;li&gt;Customization: 5&lt;/li&gt;
&lt;li&gt;IDE support: 5&lt;/li&gt;
&lt;li&gt;CI / CLI Support: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-writegood-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/btford/write-good"&gt;&lt;code&gt;write-good&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3eUglh_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/write-good-800-b8501ff39.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eUglh_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/write-good-800-b8501ff39.webp" alt="write good website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;write-good&lt;/code&gt; is designed for "developers who can't write good and wanna learn to do other stuff good too." The tool's focus is on improving the clarity of writing (and helping developers write well).&lt;/p&gt;

&lt;p&gt;Install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g write-good
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ write-good ./blog/_posts/2021-02-11-mitmproxy.md
here are several ways to accomplish this.
                         ^^^^^^^^^^
"accomplish" is wordy or unneeded on line 305 at column 26
------------------
e-ca-certificates` is an excellent proof of concept, but if you want to run a do
                         ^^^^^^^^^
"excellent" is a weasel word on line 367 at column 84
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;write-good&lt;/code&gt; has many exciting suggestions. It will highlight passive voice, cliches, weak adverbs, and much more. Unfortunately, it's not easy to exclude items or configure rules. It might be helpful as a writing suggestion tool, but this lack of configurability means you will have difficulty using it in a continuous integration process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Formatting: 0&lt;/li&gt;
&lt;li&gt;Spelling: 0&lt;/li&gt;
&lt;li&gt;Grammar: 0&lt;/li&gt;
&lt;li&gt;Clarity: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease of Use: 5&lt;/li&gt;
&lt;li&gt;Remediation: 0&lt;/li&gt;
&lt;li&gt;Customization: 1&lt;/li&gt;
&lt;li&gt;IDE support: 2&lt;/li&gt;
&lt;li&gt;CI / CLI Support: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#textlint"&gt;
  &lt;/a&gt;
  &lt;a href="https://textlint.github.io/"&gt;textlint&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45M596Rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/textlint-800-6eb4f859e.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45M596Rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/textlint-800-6eb4f859e.webp" alt="text lint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;textlint&lt;/code&gt; is a pluggable linting tool that supports markdown, plain text, and HTML. The plug-in architecture means that it can offer the features of some of the previous items by wrapping them up as a plug-in. It has a &lt;a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule#rules-english"&gt;plug-in&lt;/a&gt; for &lt;code&gt;alex&lt;/code&gt;, &lt;code&gt;write-good&lt;/code&gt;, and for many spell checkers and grammar checkers. The downside of this flexibility is that it is a bit harder to set up and configure: you have to install each plug-in separately.&lt;/p&gt;

&lt;p&gt;Install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install textlint --global
# install each plugin
$ npm install --global textlint-rule-no-todo
....

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;textlint "docs/**"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;textlint&lt;/code&gt; is configurable via an &lt;code&gt;textlintrc&lt;/code&gt; and has inline exclude rules ( &lt;code&gt;&amp;lt;!-- textlint-disable ruleA,ruleB --&amp;gt;&lt;/code&gt; ) -- which may make it a possible way to use &lt;code&gt;write-good&lt;/code&gt; or other tools that lack this functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Formatting: 0&lt;/li&gt;
&lt;li&gt;Spelling: 3&lt;/li&gt;
&lt;li&gt;Grammar: 3&lt;/li&gt;
&lt;li&gt;Clarity: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease of Use: 1&lt;/li&gt;
&lt;li&gt;Remediation: 3&lt;/li&gt;
&lt;li&gt;Customization: 4&lt;/li&gt;
&lt;li&gt;IDE support: 5&lt;/li&gt;
&lt;li&gt;CI / CLI Support: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#proselint"&gt;
  &lt;/a&gt;
  &lt;a href="http://proselint.com/"&gt;proselint&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5PooLCW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/proselint-800-b152ebcc0.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5PooLCW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/proselint-800-b152ebcc0.webp" alt="prose lint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;proselint&lt;/code&gt; goes deep on writing clarity improvements in the same way the &lt;code&gt;alex&lt;/code&gt; goes deep on inclusive writing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;proselint&lt;/code&gt; places the world's greatest writers and editors by your side, where they whisper suggestions on how to improve your prose. You'll be guided by advice inspired by Bryan Garner, David Foster Wallace, Chuck Palahniuk, Steve Pinker, Mary Norris, Mark Twain, Elmore Leonard, George Orwell, Matthew Butterick, William Strunk, E. B. White, Philip Corbett, Ernest Gowers, and the editorial staff of the world's finest literary magazines and newspapers, among others. Our goal is to aggregate knowledge about best practices in writing and to make that knowledge immediately accessible to all authors in the form of a linter for prose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some of the writing advice included is great:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "The very first thing you'll see at the top of every (well-written) bash script " | proselint
&amp;lt;stdin&amp;gt;:1:5: weasel_words.very Substitute 'damn' every time you're inclined to write 'very'; your editor will delete it and the writing will be just as it should be.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "Thankfully, not all the advice I received was bad. " | proselint
&amp;lt;stdin&amp;gt;:1:2: skunked_terms.misc 'Thankfully,' is a bit of a skunked term — impossible to use without issue. Find some other way to say it.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "it is worth noting that both for CI and CD, the operating principles and coding philosophy are equally as important as the technical aspect of the implementation." | proselint
&amp;lt;stdin&amp;gt;:1:96: after_the_deadline.redundancy Redundancy. Use 'as' instead of 'equally as'.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one is awesome considering the context of the &lt;a href="https://earthly.dev/blog/thought-leaders/"&gt;original article&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "thought leaders" | proselint
&amp;lt;stdin&amp;gt;:1:2: cliches.garner 'thought leaders' is cliché.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; echo "One elephant in the room with ngrok is" | proselint
&amp;lt;stdin&amp;gt;:1:5: corporate_speak.misc Minimize your use of corporate catchphrases like this one.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learning from all the best writers is a very lofty objective, and &lt;code&gt;proselint&lt;/code&gt; has accumulated some valuable rules, but it falls short of its goal of collecting all the worlds writing advice in a parsable form. Ignoring and excluding rules are also not fully supported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Formatting: 0&lt;/li&gt;
&lt;li&gt;Spelling: 0&lt;/li&gt;
&lt;li&gt;Grammar: 0&lt;/li&gt;
&lt;li&gt;Clarity: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease of Use: 5&lt;/li&gt;
&lt;li&gt;Remediation: 0&lt;/li&gt;
&lt;li&gt;Customization: 0&lt;/li&gt;
&lt;li&gt;IDE support: 5&lt;/li&gt;
&lt;li&gt;CI / CLI Support: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vale"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/errata-ai/vale"&gt;Vale&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxKp2Pvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/vale-800-337217691.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxKp2Pvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/markdown-lint/vale-800-337217691.webp" alt="Vale homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vale, created by Joseph Kato, supports spelling, grammar, and clarity checks. It is extendable using a YAML rule format and is designed around the idea of a style guide -- a specific house style that you put together and vale enforces. It has an implementation of most &lt;code&gt;proselint&lt;/code&gt; as a style guide, most of &lt;code&gt;write-good&lt;/code&gt;, as well as the &lt;a href="https://docs.microsoft.com/en-us/style-guide/welcome/"&gt;Microsoft Writing Style Guide&lt;/a&gt; and the Google&lt;br&gt;
&lt;a href="https://developers.google.com/style/"&gt;developer documentation style guide&lt;/a&gt;. Vale is targeted directly at the Docs-as-Code community and documentation teams, who take the writing style of documents very seriously.&lt;/p&gt;

&lt;p&gt;Vale is fast and configurable but not necessarily easy to get started with. Initially, I couldn't get it to find any problems until I realized that it needs a config file to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MinAlertLevel = suggestion

[*]
BasedOnStyles = Vale
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
.vale.ini





&lt;p&gt;Additionally, to use it effectively, you will need to copy an existing style-guide into your repository. Separating the styles from the tool is Vale's biggest strength. It's also could be a weakness as the rules you build up are specific to your repository. It is easy to write and customize rules but hard to share them back as they need to live in your source code repository.&lt;/p&gt;

&lt;p&gt;Besides the official Vale style guides &lt;a href="https://buildkite.com/blog/linting-the-buildkite-docs"&gt;Buildkite&lt;/a&gt;, &lt;a href="https://github.com/linode/docs/tree/develop/ci/vale/styles"&gt;Linode&lt;/a&gt;, and &lt;a href="https://github.com/testthedocs/vale-styles"&gt;Write The Docs&lt;/a&gt; have rules online that you can copy into your repo or use as inspiration for your own rules.&lt;/p&gt;

&lt;p&gt;If you are taking linting documentation seriously and can take the time to set up a style that works for you, then Vale is the way to go. The rules of most other tools can be implemented inside value, and many already are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Formatting: 2&lt;/li&gt;
&lt;li&gt;Spelling: 5&lt;/li&gt;
&lt;li&gt;Grammar: 5&lt;/li&gt;
&lt;li&gt;Clarity: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease of Use: 1&lt;/li&gt;
&lt;li&gt;Remediation: 0&lt;/li&gt;
&lt;li&gt;Customization: 5&lt;/li&gt;
&lt;li&gt;IDE support: 5&lt;/li&gt;
&lt;li&gt;CI / CLI Support: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vale-styles"&gt;
  &lt;/a&gt;
  Vale Styles
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/topics/vale-linter-style"&gt;Official Styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/search?q=topic%3Avale-linter-style+org%3Atestthedocs+fork%3Atrue"&gt;Write The Docs Styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/testthedocs/Openly"&gt;Grammarly Clone in Vale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Many tools exist for testing and linting English prose. You can start as simply as just spelling checking your readme before you commit it or go as complex as a full style guide running on every change to your software documentation.&lt;/p&gt;

&lt;p&gt;If you are willing to invest the time, then &lt;code&gt;Vale&lt;/code&gt;, with its flexible rules, is the clear leader. Combining &lt;code&gt;Vale&lt;/code&gt; with &lt;code&gt;markdownlint&lt;/code&gt; and running both in a continuous integration build should ensure that documents are spelling correctly, grammatically correct, and written in a properly formatted and exclusive way.&lt;/p&gt;

&lt;p&gt;If you're looking for a more accessible place to start or don't need the grammar and clarity suggestions, then &lt;code&gt;mdspell&lt;/code&gt; and &lt;code&gt;markdownlint&lt;/code&gt; make a great combination.&lt;/p&gt;

&lt;p&gt;Once you have decided on what tools will work best for you, make sure you find a way to automate their usage. This blog uses &lt;code&gt;Vale&lt;/code&gt; and &lt;code&gt;markdownlint&lt;/code&gt; inside an &lt;a href="https://earthly.dev/"&gt;Earthfile&lt;/a&gt; that is run every commit. This helps us prevent mistakes from getting into the blog.&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>writing</category>
      <category>meta</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Web Scrapping with F#</title>
      <author>Angel D. Munoz</author>
      <pubDate>Thu, 19 Aug 2021 15:09:07 +0000</pubDate>
      <link>https://dev.to/tunaxor/web-scrapping-with-f-1fd7</link>
      <guid>https://dev.to/tunaxor/web-scrapping-with-f-1fd7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt;: The content of this post is based on this code, check it for the full example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/AngelMunoz/Escalin"&gt;https://github.com/AngelMunoz/Escalin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#simple-things-in-fsharp"&gt;
  &lt;/a&gt;
  Simple things in FSharp
&lt;/h2&gt;

&lt;p&gt;Hey there, this is the next entry in &lt;strong&gt;&lt;em&gt;Simple Things in F#&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you've ever wanted to pull data periodically from a website, or you are a QA automation person looking to do E2E (end to end) testing, then &lt;a href="https://playwright.dev/dotnet/"&gt;Playwright&lt;/a&gt; might be an option for you. Similar to Cypress or PhantomJS, Playwright is a library that allows you to automate ineractions with websites, you can even take screenshots and PDFs!&lt;/p&gt;

&lt;p&gt;Playwright offers access to the following browsers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chromium

&lt;ul&gt;
&lt;li&gt;Edge&lt;/li&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;Webkit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Normally these tools are made with javascript in mind (playwright is no exception) but, Playwright offers .NET libraries as well so if you like to use F#, VB or even C#, you can do some web scrapping, E2E with playwright.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;We will focus on F# here so you are required to have the &lt;a href="https://dotnet.microsoft.com/download"&gt;.NET SDK&lt;/a&gt; installed on your machine, also you will need the playwright global cli tool (there's an npm version as well if you prefer to install that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Microsoft.Playwright.CLI&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once installed we can create a new console project in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# feel free to use VB o C# if you prefer it &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-lang&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="c"&gt;# -o Escalin&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case I made a poject called &lt;code&gt;Escalin&lt;/code&gt;, once created the project we'll install these dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Escalin&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Microsoft.Playwright&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Ply&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# this is required in order to install the browsers playwright uses&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# if you've installed them before (via npm or even the same tool)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# you can omit this step&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;playwright&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SCRIPTING&lt;/em&gt;&lt;/strong&gt;: You can actually use playwright with F# scripts as well but you will need to install the playwright browsers first on that machine either by creating a dummy project and run the dotnet tool or using playwright npm tool to download them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we have our dependencies ready, we can start digging in with the code in VSCode using &lt;a href="https://ionide.io/"&gt;Ionide&lt;/a&gt;, &lt;a href="https://www.jetbrains.com/rider/"&gt;Rider&lt;/a&gt; or &lt;a href="https://visualstudio.microsoft.com/vs/community/"&gt;Visual Studio&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise
&lt;/h2&gt;

&lt;p&gt;For today's exercise we will do a web scrapping of my own blog, and get a list of the post summaries in the index page and save them as a json file&lt;/p&gt;

&lt;p&gt;To do that, we will need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to &lt;code&gt;https://blog.tunaxor.me&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Select all of the post entries in the index page&lt;/li&gt;
&lt;li&gt;Extract all the text from each entry&lt;/li&gt;
&lt;li&gt;Generate a "Post" from each text block&lt;/li&gt;
&lt;li&gt;Write a JSON file called &lt;code&gt;posts.json&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start with the namespaces and a few types we will need to get our work done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Playwright&lt;/span&gt;
&lt;span class="c1"&gt;// Playwright is very heavy on task methods we'll need this&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Threading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Tasks&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Tasks&lt;/span&gt;
&lt;span class="c1"&gt;// This one is to write to disk&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;IO&lt;/span&gt;
&lt;span class="c1"&gt;// Json serialization&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Json&lt;/span&gt;

&lt;span class="c1"&gt;// Playwright offers different browsers so let's &lt;/span&gt;
&lt;span class="c1"&gt;// declare a Discrimiated union with our choices&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Browser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Chromium&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Chrome&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Edge&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Firefox&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Webkit&lt;/span&gt;

    &lt;span class="c1"&gt;// let's also define a "pretty" representation of those&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AsString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Chromium&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Chromium"&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Chrome&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Chrome"&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Edge&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Edge"&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Firefox&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Firefox"&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Webkit&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Webkit"&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
      &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, our main's goal is to have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Playwright&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreateAsync&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getBrowser&lt;/span&gt; &lt;span class="nc"&gt;Firefox&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getPage&lt;/span&gt; &lt;span class="s2"&gt;"https://blog.tunaxor.me"&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getPostSummaries&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;writePostsToFile&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;

    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means we will need to create the following functions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getBrowser&lt;/code&gt; - that takes both a browser and a &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task?view=net-5.0"&gt;Task&lt;/a&gt; with a playwright instance&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getPage&lt;/code&gt; - that takes both a string (url) and a &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task?view=net-5.0"&gt;Task&lt;/a&gt; with a browser instance&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getPostSummaries&lt;/code&gt; - that takes a &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task?view=net-5.0"&gt;Task&lt;/a&gt; with a page instance&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WritePostsToFile&lt;/code&gt; - that takes a &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task?view=net-5.0"&gt;Task&lt;/a&gt; with a post array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in the case of &lt;code&gt;Async.AwaitTask&lt;/code&gt; and &lt;code&gt;Async.RunSynchronously&lt;/code&gt; it's not necessary since they are FSharp.Core implementations, we'll also use the pipe operator &lt;code&gt;|&amp;gt;&lt;/code&gt; to apply the last's function result as a parameter for the next function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;pipe&lt;/code&gt; operator is very useful in F# &lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;it could also make it to javascript at some point&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if we want to visualize that in another way, we can think of it as this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;64 |&amp;gt; addNumbers 10&lt;/code&gt; is equivalent to &lt;code&gt;addNumbers 10 64&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's get started with &lt;code&gt;getBrowser&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt;: I changed the parameters here vs the source code be more readable&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getBrowser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getPlaywright&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IPlaywright&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// it's like we wrote&lt;/span&gt;
        &lt;span class="c1"&gt;// let playwright = await getPlaywright&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;playwright&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPlaywright&lt;/span&gt;

        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Browsing with {kind.AsString}"&lt;/span&gt;

        &lt;span class="c1"&gt;/// return! is like `return await`&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Chromium&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LaunchAsync&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Chrome&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BrowserTypeLaunchOptions&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Channel&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s2"&gt;"chrome"&lt;/span&gt;
                &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LaunchAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Edge&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BrowserTypeLaunchOptions&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Channel&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s2"&gt;"msedge"&lt;/span&gt;
                &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LaunchAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Firefox&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LaunchAsync&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Webkit&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Webkit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LaunchAsync&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, we're not doing much rather than just creating a browser instance and returning it, think about it as a simple helper function that you can also modify to pass in browser options and other things if you need them further down the line.&lt;/p&gt;

&lt;p&gt;We are also taking the task as the parameter, so we can use the &lt;code&gt;pipe&lt;/code&gt; operator easily the downside here I guess is that we have to do &lt;code&gt;let! playwright = getPlaywright&lt;/code&gt; but I don't think too much about it, the benefit is that we can make our main function more legible and gives us a clear indication of how we want to proceed.&lt;/p&gt;

&lt;p&gt;The next is &lt;code&gt;getPage&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getPage&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getBrowser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IBrowser&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getBrowser&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Navigating to &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;{url}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

        &lt;span class="c1"&gt;// we'll get a new page first&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewPageAsync&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// let's navigate right into the url&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GotoAsync&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
        &lt;span class="c1"&gt;// we will ensure that we navigated successfully&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="c1"&gt;// we could use a result here to better handle errors, but&lt;/span&gt;
            &lt;span class="c1"&gt;// for simplicity we'll just fail of we couldn't navigate correctly&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;failwith&lt;/span&gt; &lt;span class="s2"&gt;"We couldn't navigate to that page"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function is also short, we just open a new page and go yo a particular URL and ensure we did it correctly, once we're done that we just return the page&lt;/p&gt;

&lt;p&gt;The next function is &lt;code&gt;getPostSummaries&lt;/code&gt; that will find all of the post summaries in the page we just visited on the last function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getPostSummaries&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPage&lt;/span&gt;
        &lt;span class="c1"&gt;//  The first scrapping part, we'll get all of the elements that have&lt;/span&gt;
        &lt;span class="c1"&gt;// the "card-content" class&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;cards&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;QuerySelectorAllAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".card-content"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Getting Cards from the landing page: {cards.Count}"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
            &lt;span class="n"&gt;cards&lt;/span&gt;
            &lt;span class="c1"&gt;// we'll convert the readonly list to an array&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toArray&lt;/span&gt;
            &lt;span class="c1"&gt;// we'll use the `Parallel` module to precisely process each post&lt;/span&gt;
            &lt;span class="c1"&gt;// in parallel and apply the `convertElementToPost` function&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Parallel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;convertElementToPost&lt;/span&gt;
            &lt;span class="c1"&gt;// at this point we have a  Task&amp;lt;Post&amp;gt;[]&lt;/span&gt;
            &lt;span class="c1"&gt;// so we'll pass it to the next function to ensure all of the tasks&lt;/span&gt;
            &lt;span class="c1"&gt;// are resolved&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;WhenAll&lt;/span&gt; &lt;span class="c1"&gt;// return a Task&amp;lt;Post[]&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we get to the next one, we need to check what is &lt;code&gt;convertElementToPost&lt;/code&gt; doing, how did we go from an element read only list to a post array? let's make a list of things we need to do in order to get a post so the code doesn't look too alien&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inside of the element, search for the title&lt;/li&gt;
&lt;li&gt;Inside of the element, search for the author&lt;/li&gt;
&lt;li&gt;Inside of the element, search for the content&lt;/li&gt;
&lt;li&gt;Extract the text from the title and the author&lt;/li&gt;
&lt;li&gt;The content will be split in an array where the text has &lt;code&gt;...&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For the summary we'll get the first element of the array or return an empty string&lt;/li&gt;
&lt;li&gt;The second element will be divided where we have the &lt;code&gt;\n&lt;/code&gt; character

&lt;ol&gt;
&lt;li&gt;To the first element of that array, we'll divide it as well where we have a &lt;code&gt;#&lt;/code&gt; to get our tags.&lt;/li&gt;
&lt;li&gt;Trim the strings from extra spaces and filter out empty strings&lt;/li&gt;
&lt;li&gt;The second element will get trimmed from spaces as well and that will be our date&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this, based on knowing that the content might come like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Simple things in F If you come from PHP, Javascript this might help you understand a... #dotnet  #fsharp  #mvc  #saturn \nJul 16, 2021
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;convertElementToPost&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IElementHandle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// steps 1, 2 y 3&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;headerContent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;QuerySelectorAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".title"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;QuerySelectorAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".subtitle a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;QuerySelectorAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".content"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// step 4&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headerContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InnerTextAsync&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;authorText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InnerTextAsync&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;rawContent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InnerTextAsync&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// step 5&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;summaryParts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rawContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// step 6&lt;/span&gt;
            &lt;span class="n"&gt;summaryParts&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

        &lt;span class="c1"&gt;// try to split the tags and the date&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;extraParts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// step 7&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summaryParts&lt;/span&gt;
             &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryLast&lt;/span&gt;
             &lt;span class="c1"&gt;// we'll default to a single character string to ensure we will have&lt;/span&gt;
             &lt;span class="c1"&gt;// at least an array with two elements ["", ""]&lt;/span&gt;
             &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Split&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;

        &lt;span class="c1"&gt;// split the tags given that each has a '#' and trim it, remove it if it's whitespace&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// step 7.1&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extraParts&lt;/span&gt;
             &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt;
             &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;// step 7.2&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Trim&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;IsNullOrWhiteSpace&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// step 7.3&lt;/span&gt;
            &lt;span class="n"&gt;extraParts&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryLast&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Parsed: {title} - {authorText}"&lt;/span&gt;
        &lt;span class="c1"&gt;// return el post&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
              &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authorText&lt;/span&gt;
              &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;
              &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"{summary}..."&lt;/span&gt;
              &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew! that was intense right? string handling is a mess specially if I'm around, that's what my mind could produce but hey &lt;em&gt;as long as it works&lt;/em&gt;! the other web scrapping thing we did here was at the beggining, once we knew we were inside a &lt;em&gt;card&lt;/em&gt;, we could safely query elements and know they were going to be only children of that &lt;em&gt;card&lt;/em&gt; after we processed the text we're ready to go.&lt;/p&gt;

&lt;p&gt;Let's get to the last step in our main &lt;code&gt;writePostsToFile&lt;/code&gt;, this will just take the post array task we returned on the last function chain and then just write that to the disk.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;writePostsToFile&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPosts&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;JsonSerializerOptions&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;WriteIndented&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// serialize the array with the base class library System.Text.Json &lt;/span&gt;
            &lt;span class="nn"&gt;JsonSerializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SerializeToUtf8Bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Saving to &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;./posts.json&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="c1"&gt;// write those bytes to dosk&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;WriteAllBytesAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./posts.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we're done with all of that we just apply the result to &lt;code&gt;Async.AwaitTask&lt;/code&gt; given that F#'s Async/Task aren't the same,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;check  &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/asynchronous-and-concurrent-programming/async"&gt;Async&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task?view=net-5.0"&gt;Task&lt;/a&gt; docs to have a better overview &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;F# doesn't really have an async &lt;code&gt;main&lt;/code&gt; so that's why we run that last task synchronously and return 0 at the end&lt;/p&gt;

&lt;p&gt;The result should look like this&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: that gif contains old code but produces the same output&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9CIbSD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/AUgKoB6Si6fDCwGiAm/giphy.gif%3Fcid%3D790b76111f33f3e3d751b9e896c2fc0a9834da3394a4fd1a%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9CIbSD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/AUgKoB6Si6fDCwGiAm/giphy.gif%3Fcid%3D790b76111f33f3e3d751b9e896c2fc0a9834da3394a4fd1a%26rid%3Dgiphy.gif%26ct%3Dg" alt="Resultado"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notes-and-conclusions"&gt;
  &lt;/a&gt;
  Notes and Conclusions
&lt;/h3&gt;

&lt;p&gt;The process I went through to get to this code was basically to go to my blog, inspect it with my browser and start analyzing the website's structure, once I kind of knew what was the ideal path to do it and what where the classes/elements I needed to look for I started with the web scrapping part.&lt;/p&gt;

&lt;p&gt;Keep in mind that playwright has many many options, you can perform clicks, text inputs get screenshots, pdfs, do mouse events and a lot of things that can help you archieve your goals either by doing Testing or doing some web scrapping as I just showed you.&lt;/p&gt;

&lt;p&gt;F# is a pretty concise language, and just think about if for a minute, async and parallel programing could be some of the most complex to mentalize yet we just did both and even mixed them in a way that really felt natural or at least I hope it felt that way for you as well isn't that amazing?&lt;/p&gt;

&lt;p&gt;have fun and I will see you again in the next entry!&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>webscrapping</category>
      <category>dotnet</category>
      <category>playwright</category>
    </item>
    <item>
      <title>7 ES6 Features all JavaScript Programmers Should Learn to Use</title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 19 Aug 2021 15:05:54 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/7-es6-features-all-javascript-programmers-should-learn-to-use-4cpg</link>
      <guid>https://dev.to/ubahthebuilder/7-es6-features-all-javascript-programmers-should-learn-to-use-4cpg</guid>
      <description>&lt;p&gt;The EMCAScript2015 (ES6) came with a whole new set of fetaures and syntax.&lt;/p&gt;

&lt;p&gt;In this article, we will take a look at some very useful ones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-destructuring-assignment-objects-and-arrays"&gt;
  &lt;/a&gt;
  1. Destructuring Assignment (Objects and Arrays)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Access and store multiple elements from an array or object in just one line of code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oldArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// first = 1&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// second = 2&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// third = 3&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// The same operation reduced to just one line&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldMe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "kingsley"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldSex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldMe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "male"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldMe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 21&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newMe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="c1"&gt;// Refactored to just one single line&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-default-parameter"&gt;
  &lt;/a&gt;
  2. Default Parameter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Set a default parameter for a function which will be used when one is not defined.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* BEFORE */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;withoutDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;withoutDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "first string" and "second string"&lt;/span&gt;



&lt;span class="cm"&gt;/* WITH DEFAULT PARAMETER */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;withDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;withDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "first string" and "second string"&lt;/span&gt;



&lt;span class="nx"&gt;withDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Outputs: "first string" and "second string"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-modules"&gt;
  &lt;/a&gt;
  3. MODULES
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Share code across multiple files
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// capitalize.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Exports the function&lt;/span&gt;


&lt;span class="c1"&gt;// warn.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./capitalize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Imports the function&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`I am warning you, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// I am warning you, Kingsley!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-enhanced-object-literal"&gt;
  &lt;/a&gt;
  4. ENHANCED OBJECT LITERAL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create an object, supply it properties and methods all in a very short and dynamic way.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Using Object Literal Enhancement&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="cm"&gt;/*
   {
     name: "kingsley",
     sex: "male",
     age: 21
   }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Function&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// With Object Literal Enhancement&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// "I am kingsley!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-promise"&gt;
  &lt;/a&gt;
  5. PROMISE
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Nest callbacks in a simple and clean way.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;successPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;successful!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// CONTINUATION AFTER 3 SECONDS&lt;/span&gt;
&lt;span class="nx"&gt;successPromise&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;  &lt;span class="c1"&gt;// "successful!"&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="o"&gt;--------------------------------------------------------&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;failPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oops!, something went wrong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// CONTINUATION AFTER 3 SECONDS&lt;/span&gt;
&lt;span class="nx"&gt;failPromise&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// oops, something went wrong&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-template-literals"&gt;
  &lt;/a&gt;
  6. TEMPLATE LITERALS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Dynamically construct string from variables
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ubahthebuilder.tech&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showBlog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`My name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old and I blog at &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;showBlog&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// "My name is kingsley, I am 21 years old and I blog at ubahthebuilder.tech"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-arrow-functions"&gt;
  &lt;/a&gt;
  7. ARROW FUNCTIONS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Write shorter function syntax
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am Kingsley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayName2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayName3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// You can remove the brackets&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayNameAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, and I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old`&lt;/span&gt;
&lt;span class="c1"&gt;// If argument is more than one, you must wrap in parenthesis&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;YOU MAY ALSO LIKE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/user-authentication-vs-user-authorization-what-do-they-mean-in-back-end-web-development"&gt;User Authentication vs User Authorization: The Difference?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/what-are-object-prototypes-explaining-prototype-inheritance-in-a-simple-way"&gt;Prototypal Inheritance Explained&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>So, You Want to Get a Job as a React Developer (Here Are 4 Not-So-Obvious Ways to Land It)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Thu, 19 Aug 2021 15:04:27 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/so-you-get-a-job-as-a-react-developer-here-are-4-not-so-obvious-ways-to-land-it-423e</link>
      <guid>https://dev.to/michaelmangial1/so-you-get-a-job-as-a-react-developer-here-are-4-not-so-obvious-ways-to-land-it-423e</guid>
      <description>&lt;p&gt;So, you want to get a job as a React developer. Great!&lt;/p&gt;

&lt;p&gt;Now, you've likely done (or are doing) the following things to land it:&lt;/p&gt;

&lt;p&gt;1) Learn JavaScript fundamentals&lt;br&gt;
2) &lt;a href="https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-1-1pji"&gt;Learn React fundamentals&lt;/a&gt;&lt;br&gt;
3) Become comfortable with layouts and styling using CSS/SCSS&lt;br&gt;
4) Learn how to interact with APIs&lt;br&gt;
5) Make an application that shows off your work&lt;/p&gt;

&lt;p&gt;This is great work! I do think it meets the threshold of what is required for a React job.&lt;/p&gt;

&lt;p&gt;However, I'd like to empower you with some not-so-obvious ways that you can stand out from a crowd of applicants and make a transition into a React job seamless.&lt;/p&gt;

&lt;p&gt;This ways are not-so-obvious because they are the things that you end up doing day-to-day in a typical role that isn't talked about as much in the blogosphere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-master-copying-designs-from-existing-applications"&gt;
  &lt;/a&gt;
  1) Master Copying Designs From Existing Applications
&lt;/h2&gt;

&lt;p&gt;Using an existing UI component library like Material UI for a project is totally fine.&lt;/p&gt;

&lt;p&gt;In fact, that's the route I went to be able to make an application where I got practicing interacting with APIs.&lt;/p&gt;

&lt;p&gt;However, the real-world workflow is much different.&lt;/p&gt;

&lt;p&gt;On a product team, there will be a UX designer who will create "mockups" of a new experience that will have to be coded.&lt;/p&gt;

&lt;p&gt;Meaning, you have to look at something and copy it.&lt;/p&gt;

&lt;p&gt;Well, you don't need a UX designer to start practicing that skill.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here's a fun idea: Try to replicate the look and feel of products that come out on Product Hunt. If you want to go a step further, you can try to replicate entire experiences (their workflow for loading a screen with data from an API).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHLQqQPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/f2e0843a-0e68-4867-a22a-4affb84e3ba3.png%3Fauto%3Dformat%26auto%3Dcompress%26codec%3Dmozjpeg%26cs%3Dstrip%26w%3D635%26h%3D380%26fit%3Dmax%26dpr%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHLQqQPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/f2e0843a-0e68-4867-a22a-4affb84e3ba3.png%3Fauto%3Dformat%26auto%3Dcompress%26codec%3Dmozjpeg%26cs%3Dstrip%26w%3D635%26h%3D380%26fit%3Dmax%26dpr%3D1" alt="product-hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The more comfortable you get with "monkey see, monkey do," the more comfortable you will be in interviews, and ultimately, when transitioning into a new role.&lt;/p&gt;

&lt;p&gt;If you follow this step, even on a smaller scale (like creating components from a UI library from scratch), you will aggregate plenty of material for a portfolio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-write-as-you-learn"&gt;
  &lt;/a&gt;
  2) Write As You Learn
&lt;/h2&gt;

&lt;p&gt;I mentioned in a &lt;a href="https://dev.to/michaelmangial1/how-to-burst-the-tutorial-phase-when-becoming-a-developer-gk"&gt;previous article&lt;/a&gt;, how this is a major key to bursting out the "tutorial phase."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8NuuuF3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1604933762161-67313106146c%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NuuuF3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1604933762161-67313106146c%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="writing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I emphasized that forcing yourself to write as you are learning has several advantages:&lt;/p&gt;

&lt;p&gt;1) It forces you to learn what you are trying to learn (if you don't get it, you can't write about it; if you can write about it, you must learn it).&lt;/p&gt;

&lt;p&gt;2) It provides incentive to your learning, you get to see people like, comment, and share your posts. If you see that you are helping others, it will boost your confidence, love for the subject, and incentivize writing more.&lt;/p&gt;

&lt;p&gt;3) It makes you explain technical concepts in a way that those less technically experienced can understand. It turns out, this is vital not only for if you become a senior dev, but when you work closely with a product team (&lt;a href="https://dev.to/michaelmangial1/3-not-so-obvious-ways-to-stand-out-on-a-product-team-as-a-developer-2d20"&gt;which is a big part of the role that is often under asserted&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;4) You will have more than just a resume to verify that you know what you're talking about. Even senior developers can stumble in interviews due to nervousness. If you have articles showcasing your understanding of technical concepts, you will be able to reset assured that the articles speak for themselves ("the proof rests in the pudding").&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WaonYzG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1573497491208-6b1acb260507%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WaonYzG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1573497491208-6b1acb260507%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="interview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) You can most definitely include these articles to sharpen your portfolio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-mimic-a-realworld-workflow"&gt;
  &lt;/a&gt;
  3) Mimic a Real-World Workflow
&lt;/h2&gt;

&lt;p&gt;A major part of a real-world workflow of a React developer is being able to "break down" mockups into prioritized, estimated chunks.&lt;/p&gt;

&lt;p&gt;At least once, fight the urge to treat your side projects like a "hackathon." Fight the urge to just pump out a bunch of code as you build something.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXNGHest--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1534665482403-a909d0d97c67%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXNGHest--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1534665482403-a909d0d97c67%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="coding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead, try to write down how the entire project can be broken down into chunks.&lt;/p&gt;

&lt;p&gt;A chunk is an implementation of a feature/functionality required to complete the project.&lt;/p&gt;

&lt;p&gt;Chunks should be recorded in the logical order that they will have to be done.&lt;/p&gt;

&lt;p&gt;Lastly, chunks should be the equivalent of 1-2 days worth of coding (assuming a full-time schedule; 5 hours of undistracted work constitutes a day).&lt;/p&gt;

&lt;p&gt;Use GitHub projects to record your progress for these chunks.&lt;/p&gt;

&lt;p&gt;Now, if you really want to impress, do this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let every chunk be implemented through a single Pull Request. Reach out to a developer friend and have them review your changes. Respond to feedback and move on to the next chunk when all feedback has been addressed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This sounds like a lot of work to do in spare time. It is.&lt;/p&gt;

&lt;p&gt;However, even if you just did this process for a single chunk, and talked about it in an interview, or showcased it in your portfolio. I can guarantee you will stand out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-dont-try-to-overimpress-developers"&gt;
  &lt;/a&gt;
  4) Don't Try to Over-impress Developers
&lt;/h2&gt;

&lt;p&gt;When you get to an interview, don't try to over-impress developers that interview you.&lt;/p&gt;

&lt;p&gt;Let's face it. Even if you had the same amount of knowledge and experience as the interviewer, you are bound to be at a disadvantage when it comes to impressing them. Nerves and on-the-spot questions are tough.&lt;/p&gt;

&lt;p&gt;Now, if you are new to the whole field of being a developer, or even just as a React developer, you'll have to admit that it's very unlikely that you can outdo the developer interviewing in technical knowledge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTR5sKZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1616587894289-86480e533129%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTR5sKZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1616587894289-86480e533129%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="interview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what are you supposed to do?&lt;/p&gt;

&lt;p&gt;1) Remember that getting a React job (and doing well in it) is mostly about impressing the product team (the non-technical people) not the developers (the technical people).&lt;/p&gt;

&lt;p&gt;With time, you're bound to learn technical skills that will eventually impress your developers. And that's important.&lt;/p&gt;

&lt;p&gt;However, if you can showcase value as a team member that can get work done (in a real-world workflow), then you will be valuable (and therefore hire-able) to the product team.&lt;/p&gt;

&lt;p&gt;2) Still try to impress the developers, just not in being technically superior. Don't try to impress with talking technical trivia.&lt;/p&gt;

&lt;p&gt;Instead, you just need to show that you are competent in the skills required for the role. Beyond that, impress with your portfolio (i.e. how you've gone through a real-world workflow as you built a project).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8gPs3oy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1616587226157-48e49175ee20%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8gPs3oy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1616587226157-48e49175ee20%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="interview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you can talk about an interesting project, demonstrate that you would be easy to teach and work with, and highlight the things you have done to stand above other candidates, then you will impress in the way that counts. &lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Modern Tech Stack to Build a SaaS in 2021 as a Team of One-Man with Next JS and AWS</title>
      <author>Remi W.</author>
      <pubDate>Thu, 19 Aug 2021 15:03:24 +0000</pubDate>
      <link>https://dev.to/ixartz/the-modern-tech-stack-to-build-a-saas-in-2021-as-a-team-of-one-man-with-next-js-and-aws-2in2</link>
      <guid>https://dev.to/ixartz/the-modern-tech-stack-to-build-a-saas-in-2021-as-a-team-of-one-man-with-next-js-and-aws-2in2</guid>
      <description>&lt;p&gt;As someone who loves cutting-edge technology, I choose to build my first SaaS with a modern tech stack. With the rise of &lt;strong&gt;JAMStack&lt;/strong&gt; and &lt;strong&gt;serverless&lt;/strong&gt; architecture, I created &lt;a href="https://postmage.com"&gt;PostMage&lt;/a&gt; with Next JS static generation for the frontend and the Node.js backend deployed to AWS.&lt;/p&gt;

&lt;p&gt;Because I'm a solo full-stack developer, my time and resources are extremely limited. In this article, I'll share all the technologies I use to &lt;strong&gt;build my SaaS product&lt;/strong&gt;: from programming language to development tools. You'll find how I overcome this challenge to build a SaaS as a solo developer.&lt;/p&gt;

&lt;p&gt;Hope my story gives you inspiration to create your SaaS products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-everywhere"&gt;
  &lt;/a&gt;
  TypeScript Everywhere
&lt;/h2&gt;

&lt;p&gt;For building my SaaS, I wrote every line of code in &lt;strong&gt;TypeScript&lt;/strong&gt;. Yes, all the code: Frontend, Backend and also, Infrastructure as code in TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" alt="TypeScript programming language logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The whole project only uses one and unique programming language. No time to learn new languages and save time by making the code easy to maintain.&lt;/p&gt;

&lt;p&gt;Why did I choose &lt;strong&gt;TypeScript&lt;/strong&gt;? It makes the development much more pleasant with strongly-typed and has better integration to IDE. So, if you are still a JavaScript developer, you should give it a try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-framework"&gt;
  &lt;/a&gt;
  Frontend framework
&lt;/h2&gt;

&lt;p&gt;For the frontend, I use &lt;strong&gt;Next.js&lt;/strong&gt;. It's a &lt;strong&gt;React framework&lt;/strong&gt; to build a complex application. The good news, Next JS supports TypeScript out-of-the-box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mh-_qK9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextjs-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mh-_qK9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextjs-logo.png" title="Nextjs React framework logo"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLYetDe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLYetDe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-logo.png" title="React logo"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_q0Vp1K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/tailwind-css-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_q0Vp1K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/tailwind-css-logo.png" title="Tailwind CSS utility framework logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use &lt;strong&gt;Tailwind CSS&lt;/strong&gt; styling the React components. As a developer, you usually build an ugly interface. With Tailwind CSS, you can have now build a not so ugly interface even if you aren't a designer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Nextless React SaaS Template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a true believer of JAMStack, I have previously taken some time to try Jekyll, Hexo and 11ty for different projects. I choose to build my SaaS in &lt;strong&gt;static generated mode using Next JS&lt;/strong&gt;. So, at build time, all the pages are generated and pre-rendered. Perfect for SEO, cheap hosting, fast, secure and highly scalable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-hosting"&gt;
  &lt;/a&gt;
  Static hosting
&lt;/h2&gt;

&lt;p&gt;I use &lt;strong&gt;Cloudflare Pages&lt;/strong&gt; as a hosting service for the frontend, it's a brand new alternative to Netlify or Vercel. Cloudflare has announced it in December 2020 in beta and released it to the public in April 2021.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QAgGl0bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/cloudflare-page-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAgGl0bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/cloudflare-page-logo.png" alt="Cloudflare pages hosting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is some small missing feature (nothing big) in Pages. Until the Cloudflare team solve it, I've found temporary workarounds. So, it isn't a big deal.&lt;/p&gt;

&lt;p&gt;The good thing about &lt;strong&gt;Cloudflare Page&lt;/strong&gt; is its generous free tier: unlimited bandwidth (Vercel and Netlify are limited to 100GB per month) and you can set up a password-protected website for free (not included for free in Vercel or Netlify).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-rest-api"&gt;
  &lt;/a&gt;
  Serverless REST API
&lt;/h2&gt;

&lt;p&gt;On the backend side, I've built a REST API with &lt;strong&gt;Express.js&lt;/strong&gt; and &lt;strong&gt;Serverless Framework&lt;/strong&gt;. To support TypeScript in &lt;strong&gt;Serverless Framework&lt;/strong&gt;, I use &lt;strong&gt;serverless-bundle&lt;/strong&gt; plugin. Express.js needs another plugin to work with Serverless Framework named &lt;strong&gt;serverless-http&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" title="Serverless framework AWS lambda"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dEgbYjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/express-js-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dEgbYjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/express-js-logo.png" title="Express js serverless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For better developer experience, I've also used two other plugins: &lt;strong&gt;serverless-dotenv-plugin&lt;/strong&gt; and &lt;strong&gt;serverless-offline&lt;/strong&gt;. The first plugin is to support dotenv files and the second one is to run Serverless Framework on your local computer.&lt;/p&gt;

&lt;p&gt;As a solo developer, I choose serverless architecture for making my life easier with &lt;strong&gt;easy deployment, low maintenance and scalable backend&lt;/strong&gt;. No need to become a DevOps engineer: no need to SSH, make OS updates, configure proxy/webserver/load balancer/firewall, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h2&gt;

&lt;p&gt;The REST API is protected by the &lt;strong&gt;IAM authentication&lt;/strong&gt;. It's AWS built-in feature to secure any AWS resources, in our case, API gateway and AWS lambda. It denies the API invocation when the user isn't connected to the SaaS application. So, when it's protected, external actors won't be able to invoke your resource.&lt;/p&gt;

&lt;p&gt;Because the API is deployed to AWS, I choose to use &lt;strong&gt;AWS Cognito&lt;/strong&gt; for authentication. The good thing is that Cognito saves a lot of time by providing everything you need to implement authentication for your SaaS. You get access without any effort to &lt;strong&gt;Email authentication and Social sign-in&lt;/strong&gt; (Facebook, Google, Apple and Amazon).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pqf7D1oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cognito-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pqf7D1oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cognito-logo.png" alt="AWS Cognito authentication provider"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The connection between AWS Cognito and React frontend is done through &lt;strong&gt;AWS Amplify&lt;/strong&gt;. Amplify provides React components and code for making your frontend integration to AWS easier and faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QlovMWEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-amplify-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QlovMWEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-amplify-logo.png" alt="AWS Amplify logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nosql-database"&gt;
  &lt;/a&gt;
  NoSQL Database
&lt;/h2&gt;

&lt;p&gt;Major and well-known databases like PostgreSQL and MySQL don't fit very well in Serverless architecture. Due to the nature of serverless, it can create a lot of connections to the database and exhaust the database connection limit.&lt;/p&gt;

&lt;p&gt;On most providers, even if you don't have any traffic on your SaaS, you still need to pay your DB instance. On the opposite, when your application starts to grow, your database can quickly become the bottleneck.&lt;/p&gt;

&lt;p&gt;As a solo full-stack developer, I wanted something extremely easy to manage and 100% compatible with serverless. So, I choose &lt;strong&gt;DynamoDB&lt;/strong&gt; as a primary database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3RDv2HD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-dynamodb-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3RDv2HD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-dynamodb-logo.png" alt="AWS DynamoDB serverless database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DynamoDB&lt;/strong&gt; is a NoSQL database fully managed by AWS and I use it to store user states. They almost handle everything and I just need to focus on my code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-as-code"&gt;
  &lt;/a&gt;
  Infrastructure as code
&lt;/h2&gt;

&lt;p&gt;As you can see, I use several AWS services for my SaaS app. It's extremely painful to set up manually cloud resources in each environment (development, staging or production) and hard to maintain consistency between them.&lt;/p&gt;

&lt;p&gt;AWS gives developers access to &lt;strong&gt;AWS CDK&lt;/strong&gt; where you can define your cloud resources in &lt;strong&gt;TypeScript&lt;/strong&gt;. In one command, you can deploy to your AWS account and get everything provisioned.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5iXu2dpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cdk-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iXu2dpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cdk-logo.png" alt="AWS CDK infrastructure as code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h2&gt;

&lt;p&gt;Like many developers, I use &lt;strong&gt;Git and GitHub&lt;/strong&gt; for version control of my code. Many modern hosting services like Vercel and Netlify, &lt;strong&gt;Cloudflare pages&lt;/strong&gt; automatically build and deploy your code at each commit. If you work with Git branches, you can also live preview the results without pushing to production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egSI0eO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/github-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--egSI0eO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/github-logo.png" alt="GitHub developer collaboration tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the backend and the infrastructure, I use a third-party service named &lt;strong&gt;Seed.run&lt;/strong&gt; to deploy automatically at each commit. Like the frontend, it also builds and deploys the backend resources on AWS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dns-and-cdn"&gt;
  &lt;/a&gt;
  DNS and CDN
&lt;/h2&gt;

&lt;p&gt;As you can doubt, I use &lt;strong&gt;Cloudflare&lt;/strong&gt; for DNS and CDN without any surprise ;) Cloudflare Pages automatically deploy your code in the Cloudflare network, I only need to point my domain to Cloudflare DNS server and they handle the rest. Using Cloudflare, you get plenty of security features like a firewall and a DDoS protection for your SaaS products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--81WDCgKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/cloudflare-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81WDCgKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/cloudflare-logo.png" alt="Cloudflare DNS and CDN provider"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-tracking"&gt;
  &lt;/a&gt;
  Error tracking
&lt;/h2&gt;

&lt;p&gt;I use &lt;strong&gt;Sentry&lt;/strong&gt; as the error tracking solution. It automatically reports when something goes wrong with useful information like stack trace, breadcrumbs (a trail of events that happened before an issue), browser information, OS information, etc. It makes debugging in production much easier with enriched data:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AoWWsC5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/sentry-example-screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoWWsC5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/sentry-example-screenshot.png" alt="Sentry exception tracking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sentry&lt;/strong&gt; is only set up for the frontend and not for the REST API, I keep using the native solution. Indeed, &lt;strong&gt;Sentry&lt;/strong&gt; with AWS lambda creates a lot of overhead and the setup wasn't straightforward. In the next section, you'll find the solution I use for error tracking in the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xZQGsj61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/sentry-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xZQGsj61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/sentry-logo.png" alt="Sentry error tracking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logging-monitoring-and-alert"&gt;
  &lt;/a&gt;
  Logging, monitoring and alert
&lt;/h2&gt;

&lt;p&gt;AWS Lambda automatically sends logs to &lt;strong&gt;AWS CloudWatch&lt;/strong&gt;, so no need to use Sentry. Here is an example of logs stored in &lt;strong&gt;CloudWatch&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjCncswk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/cloudwatch-log-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjCncswk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/cloudwatch-log-example.png" alt="Cloudwatch log example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You also get access to your lambda metrics. Perfect to understand how your serverless functions behave and detect if there are any errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmZ5fhtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/lambda-metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmZ5fhtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/lambda-metrics.png" alt="Lambda dashboard with metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also use &lt;strong&gt;Lumigo&lt;/strong&gt; to have additional information for my logging and monitoring. The interface is easier to use compared to Cloudwatch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFD9r9Rl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/lumigo-log-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFD9r9Rl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/lumigo-log-example.png" alt="Lumigo log example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also enable tracing in &lt;strong&gt;Lumigo&lt;/strong&gt; where you can visualize your AWS service and external API calls. It makes your debugging session easier by letting you know if there is an error in your code or it's from an external service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MiLwZmUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/lumigo-tracing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MiLwZmUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/lumigo-tracing.png" alt="Lumigo log example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment-and-subscription"&gt;
  &lt;/a&gt;
  Payment and subscription
&lt;/h2&gt;

&lt;p&gt;The last piece of a SaaS and the most important thing for a business is to accept payment. Accepting a one-time payment is hard but, the task for recurrent payment is much complex. Unfortunately, for a SaaS business, we need to handle the second case.&lt;/p&gt;

&lt;p&gt;Your customers need to choose the plan and enter their personal information when they subscribe for the first time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVN9VDJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-hosted-checkout.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVN9VDJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-hosted-checkout.png" alt="Stripe hosted checkout session"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, your users should have a self-service portal where they can manage their plan: upgrade, downgrade, cancel, pause, resume their subscription plan.&lt;/p&gt;

&lt;p&gt;They sometimes also need to update their personal information. And, they also need access to their invoice history when needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97tqtWyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-customer-portal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97tqtWyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-customer-portal.png" alt="Stripe customer portal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stripe&lt;/strong&gt; can manage everything I mention in this section, it hides all these complexities and makes the integration to payment easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Di7UTlQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Di7UTlQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-logo.png" alt="Stripe logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It took me 5 months of development to build this full-stack React SaaS template. Instead of focusing on my business, I was solving these technical details. Building the first version of your SaaS should only take 1 month and not 5.&lt;/p&gt;

&lt;p&gt;By going through this long journey, I've learned so many things and I've made tons of mistakes. I hope others developers won't do the same mistakes, so I build &lt;a href="https://nextlessjs.com"&gt;Nextless JS, React Boilerplate for SaaS products&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Nextless.js, you get everything I mentioned in this article without you writing any line of code. Save you time, focus on things that matter and launch your SaaS faster. Find more information at &lt;a href="https://nextlessjs.com"&gt;Nextless JS&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>react</category>
      <category>aws</category>
    </item>
  </channel>
</rss>
