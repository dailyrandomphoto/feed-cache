<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Maintainer AMA : Liyas Thomas of Hoppscotch üôè
</title>
      <author>Jose - Aviyel</author>
      <pubDate>Sun, 30 May 2021 15:54:43 +0000</pubDate>
      <link>https://dev.to/aviyel/maintainer-ama-liyas-thomas-of-hoppscotch-5fb8</link>
      <guid>https://dev.to/aviyel/maintainer-ama-liyas-thomas-of-hoppscotch-5fb8</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F9Gv0-sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdfv8py7qc8cm6g6eqbt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9Gv0-sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdfv8py7qc8cm6g6eqbt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Community is at the heart of everything Open Source!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aviyel.com/post/91/announcing-ama-with-hoppscotch-maintainer-liyas-thomas"&gt;*&lt;em&gt;Post AMA Questions here *&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôre kick-starting our Maintainer AMA series, and we are thrilled to announce our first AMA with Liyas Thomas, the maintainer of Hoppscotch.One of the best ways we‚Äôve discovered of gathering honest feedback and creating meaningful interactions is by hosting an ‚ÄòAsk Me Anything‚Äô (AMA) session. Contributors and community members can submit their questions and the maintainer can directly respond to each one of them and interact with key participants.&lt;/p&gt;

&lt;p&gt;Aviyel co-founders, &lt;a href="https://twitter.com/josekuttan"&gt;Jose&lt;/a&gt; &amp;amp; Jacob will be curating the AMA session with other members to answer all the questions related to the Hoppscotch community.&lt;/p&gt;

&lt;p&gt;Pushing our continuous efforts to reach out to the maximum number of audiences across the globe, we have always tried to get in touch with some of the best communities in the Open Source realm.&lt;/p&gt;

&lt;p&gt;Speaker:üö©Liyas Thomas, Maintainer Hoppscotch.&lt;br&gt;
Save the date:¬†üìÜ Monday, May 31st, 2021&lt;br&gt;
Time-7 PM IST¬† (Asia) /¬† ¬†7 PM PST (North America)&lt;br&gt;
Get ready with your questions!10 best questions get a chance to win exclusive merchandise &amp;amp; one on one time with the Maintainer.&lt;/p&gt;

&lt;p&gt;The one caveat- this is an AMA about Hoppscotch and Open source! If you ask questions about plumbing or politics, you might not get an answer.&lt;/p&gt;

&lt;p&gt;Catch you then,&lt;/p&gt;

&lt;p&gt;Team Aviyel&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>startup</category>
    </item>
    <item>
      <title>MobX State Tree (MST) - State Management</title>
      <author>kpiteng</author>
      <pubDate>Sun, 30 May 2021 15:02:13 +0000</pubDate>
      <link>https://dev.to/kpiteng/mobx-state-tree-mst-state-management-5h6o</link>
      <guid>https://dev.to/kpiteng/mobx-state-tree-mst-state-management-5h6o</guid>
      <description>&lt;p&gt;Hello Developers, Everyone uses various State Management library on their Application, many of us already use Redux, Redux Saga, Redux Rematch. Today we will explore MobX which is the most popular Redux alternative. MobX State Tree (MST) is the powerful state management library which you can use from small to enterprise grade applications and it‚Äôs very simple to plug &amp;amp; play. I will take you from core concept to component level integration, So let‚Äôs continue,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What will we cover?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is MobX-State-Tree?&lt;/li&gt;
&lt;li&gt;Why should I use MobX-State-Tree?&lt;/li&gt;
&lt;li&gt;MobX-State-Tree Installation&lt;/li&gt;
&lt;li&gt;Getting Started - MobX Entity&lt;/li&gt;
&lt;li&gt;Creating Model&lt;/li&gt;
&lt;li&gt;Creating Model Instance&lt;/li&gt;
&lt;li&gt;Meeting Types&lt;/li&gt;
&lt;li&gt;Modifying Data&lt;/li&gt;
&lt;li&gt;Snapshot&lt;/li&gt;
&lt;li&gt;Snapshot to Model&lt;/li&gt;
&lt;li&gt;Getting to the UI&lt;/li&gt;
&lt;li&gt;Improving Render Performance&lt;/li&gt;
&lt;li&gt;Computed Properties&lt;/li&gt;
&lt;li&gt;References&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mobxstatetree"&gt;
  &lt;/a&gt;
  What is MobX-State-Tree?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MobX-State-Tree (MST)&lt;/strong&gt; is a reactive state management library. It is a &lt;strong&gt;container system&lt;/strong&gt; built on MobX.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MobX&lt;/strong&gt; - State Management Engine and MobX-State-Tree gives you a structure which has &lt;strong&gt;type + state&lt;/strong&gt; to store your data. MST is most preferable from Small to Enterprise grade application where code &amp;amp; functionality is going to scale periodically. Compare to Redux MST offer powerful performance and less lines of code.&lt;/p&gt;

&lt;p&gt;MobX supports an array of features for a modern state management system and everything in one package MobX, not more extra dependency.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-i-use-mobxstatetree"&gt;
  &lt;/a&gt;
  Why should I use MobX-State-Tree?
&lt;/h3&gt;

&lt;p&gt;MST have many props compare to other state management, Lets‚Äô check few of them,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MST offers great compatibility with React Native, ReactJS, VueJS, AngularJS and more JavaScript apps.&lt;/li&gt;
&lt;li&gt;Instead of messy code everywhere in the app, MST gives centralized stores to quick access and exchange data.&lt;/li&gt;
&lt;li&gt;Encapsulation - Your data can‚Äôt be modified by outside, It can be modified in ‚Äúactions‚Äù. So it‚Äôs easy to access but secure from outside access.&lt;/li&gt;
&lt;li&gt;Runtime type checking - help you to write clean code and prevent users from assigning wrong data to a tree.&lt;/li&gt;
&lt;li&gt;Whatever you change in the State is tracked and you can create a snapshot of your state at any time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mobxstatetree-installation"&gt;
  &lt;/a&gt;
  MobX-State-Tree Installation
&lt;/h3&gt;

&lt;p&gt;As we discussed earlier MobX is State Management and MobeX-State-Tree give you structure to store your data. So we need to install &lt;strong&gt;mobx, mobx-state-tree&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;NPM: &lt;code&gt;npm install mobx mobx-state-tree --save&lt;/code&gt;&lt;br&gt;
Yarn: &lt;code&gt;yarn add mobx mobx-state-tree&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs create react app,&lt;br&gt;
&lt;code&gt;npx create-react-app todo-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs install dependency,&lt;br&gt;
&lt;code&gt;npm install mobx mobx-state-tree mobx-react-lite&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run ToDo App,&lt;br&gt;
&lt;code&gt;npm run start&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#getting-started-mobx-entity"&gt;
  &lt;/a&gt;
  Getting Started - MobX Entity
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs start by creating a ToDo application. ToDo application have two entities Task and User. &lt;strong&gt;Task entity&lt;/strong&gt; have two attributes, &lt;strong&gt;taskName&lt;/strong&gt; - name of task, &lt;strong&gt;taskStatus&lt;/strong&gt; - to identify tasks completed or not. &lt;strong&gt;User&lt;/strong&gt; entity have two attributes, &lt;strong&gt;userID&lt;/strong&gt; - id of User, &lt;strong&gt;userName&lt;/strong&gt; - name of User.&lt;/p&gt;

&lt;p&gt;So, our entities will looks like something,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;taskName&lt;/li&gt;
&lt;li&gt;taskStatus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;userID&lt;/li&gt;
&lt;li&gt;userName&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#creating-model"&gt;
  &lt;/a&gt;
  Creating Model
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Tree = Type + State&lt;/strong&gt; - Each tree has a shape (type information) and state (data). Create model with &lt;strong&gt;types.model&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { types } from "mobx-state-tree"

const Task = types.model({
    taskName: "",
    taskStatus: false
})

const User = types.model({
    userID: 1,
    userName: ""
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-model-instance"&gt;
  &lt;/a&gt;
  Creating Model Instance
&lt;/h3&gt;

&lt;p&gt;Simply create instance by calling &lt;strong&gt;.create()&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { types, getSnapshot } from "mobx-state-tree"

const Task = types.model({
    taskName: "",
    taskStatus: false
})

const User = types.model({
    userID: 1,
    userName: ""
})

const kpiteng = User.create()
const articleWriting = Task.create({taskName: ‚ÄúArticle Writing‚Äù})

console.log("User: kpiteng:", getSnapshot(kpiteng))
console.log("Task: articleWriting:", getSnapshot(articleWriting))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#meeting-types"&gt;
  &lt;/a&gt;
  Meeting Types
&lt;/h3&gt;

&lt;p&gt;MobX checks runtime type checking, helps developers to identify wrong data passed in argument. This is very helpful while multiple developers are involved in large scale application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const articleWriting = Task.create({ taskName: "Article Writing", taskStatus: 95 })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, You will get an error like, 95 is not assignable to type boolean, as you have take taskStatus as boolean, so you can‚Äôt pass integer data type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Task = types.model({
    taskName: types.optional(types.string, ""),
    taskStatus: types.optional(types.boolean, false)
})

const User = types.model({
    userID: types.optional(types.number, 1),
    userName: types.optional(types.string, "")
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;types namespace&lt;/strong&gt; are derived from the &lt;strong&gt;MST package&lt;/strong&gt;, You can check lots of widely usage types like array, map, maybe, union and many more. You can &lt;a href="https://mobx-state-tree.js.org/overview/types"&gt;check various types&lt;/a&gt; available in MST.&lt;/p&gt;

&lt;p&gt;Now, It‚Äôs time to create a root model, let‚Äôs combine Task and User model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { types } from "mobx-state-tree"

const Task = types.model({
    taskName: types.optional(types.string, ""),
    taskStatus: types.optional(types.boolean, false)
})

const User = types.model({
    userID: types.optional(types.number, 1),
    userName: types.optional(types.string, "")
})

const RootStore = types.model({
    users: types.map(User),
    tasks: types.optional(types.map(Task), {})
})

const store = RootStore.create({
    users: {}
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note - If you are not passing default model value on &lt;strong&gt;.create()&lt;/strong&gt; then you must specify default value of in &lt;strong&gt;second argument of types.optional(arg1, arg2).&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modifying-data"&gt;
  &lt;/a&gt;
  Modifying Data
&lt;/h3&gt;

&lt;p&gt;MST - Tree node only modified in &lt;strong&gt;actions only.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Task = types
    .model({
        taskName: types.optional(types.string, ""),
        taskStatus: types.optional(types.boolean, false)
    })
    .actions(self =&amp;gt; ({
        setTaskName(newTaskName) {
            self.taskName = newTaskName
        },

        toggle() {
            self.taskStatus = !self.taskStatus
        }
    }))
const User = types.model({
    userID: types.optional(types.number, 1),
    userName: types.optional(types.string, "")
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const RootStore = types
    .model({
        users: types.map(User),
        tasks: types.map(Task)
    })
    .actions(self =&amp;gt; ({
        addTask(userID, taskName) {
            self.tasks.set(userID, Task.create({ taskName }))
        }
    }));
const store = RootStore.create({
  users: {} 
});

store.addTask(1, "Article Writing");
store.tasks.get(1).toggle();

render(
  &amp;lt;div&amp;gt;{JSON.stringify(getSnapshot(store))}&amp;lt;/div&amp;gt;,
  document.getElementById("root")
);
/*
{
  "users": {

  },
  "taks": {
    "1": {
      "taskName": "Article Writing",
      "taskStatus": true
    }
  }
}
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have you noticed &lt;strong&gt;self&lt;/strong&gt;, - self object constructed when an instance of your model is created. It‚Äôs this-free, you can access it using self.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snapshot"&gt;
  &lt;/a&gt;
  Snapshot
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs say you want to see the value stored in your state, which means take a look at a snapshot. It's simple using getSnapshot(). Every Time when you update your state and want to check if changes are reflected in the state, you can check using &lt;strong&gt;getSnapshot().&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To listen to state change you an use this &lt;strong&gt;onSnapshot(store, snapshot =&amp;gt; console.log(snapshot))&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(getSnapshot(store))
/*
{
    "users": {},
    "tasks": {
        "1": {
            "taskName": "Article Writing",
            "taskCompleted": true
        }
    }
}
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#snapshot-to-model"&gt;
  &lt;/a&gt;
  Snapshot to Model
&lt;/h3&gt;

&lt;p&gt;In the previous step we see we retrieved a snapshot from the model. But Is that possible to &lt;strong&gt;restore the model from the snapshot?&lt;/strong&gt; Yes, it's simple. Let‚Äôs see how.&lt;/p&gt;

&lt;p&gt;Before that I would like to relate this process with Redux, so you quickly understood. In Redux we have Reducer where we have State - and we initialize State variables with default values, like users: [], tasks: []). Now first time when user open application, we haven‚Äôt any snapshot/empty store, so store will refill using model‚Äôs default value (default state value). After interaction with the application you have updated values in store. When you come back next time, it will fetch data from the store and refill your model/state. This same process we are going to do here.&lt;/p&gt;

&lt;p&gt;In MobeX we can achieve this using two different ways, First - by passing default store value, Second - passing store and default store value (snapshot value).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 1st
const store = RootStore.create({
    users: {},
    tasks: {
        "1": {
            taskName: "Article Writing",
            taskStatus: true
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 2nd
applySnapshot(store, {
    users: {},
    tasks: {
        "1": {
            taskName: "Article Writing",
            taskStatus: true
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-to-the-ui"&gt;
  &lt;/a&gt;
  Getting to the UI
&lt;/h3&gt;

&lt;p&gt;Now, it‚Äôs time to work with the UI, to connect the MST store to React Component we required &lt;strong&gt;mobex-react-lite.&lt;/strong&gt; We are going to use an &lt;strong&gt;observer&lt;/strong&gt; - name it self say everything. It‚Äôs simple, it observe store and updates React components/ Render React components whenever anything changed in the store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { observer } from 'mobx-react-lite'
import { values } from 'mobx'

const App = observer(props =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;button onClick={e =&amp;gt; props.store.addTask(randomId(), "Article Writing")}&amp;gt;Add Task&amp;lt;/button&amp;gt;
        {values(props.store.tasks).map(todo =&amp;gt; (
            &amp;lt;div&amp;gt;
                &amp;lt;input type="checkbox" checked={task.taskStatus} onChange={e =&amp;gt; task.toggle()} /&amp;gt;
                &amp;lt;input type="text" value={task.taskName} onChange={e =&amp;gt; task.setTaskName(e.target.value)} /&amp;gt;
            &amp;lt;/div&amp;gt;
        ))}
    &amp;lt;/div&amp;gt;
))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#improving-render-performance"&gt;
  &lt;/a&gt;
  Improving Render Performance
&lt;/h3&gt;

&lt;p&gt;In Previous steps we have rendered Tasks - for each task we have given the option to mark it complete. Now, everytime we check/uncheck the task our UI will render, because we have added an observer. It‚Äôs observer duty to update components when anything updates on the store. So, how to avoid this re-rendering situation. It‚Äôs simple let's see it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const TaskView = observer(props =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;input type="checkbox" checked={props.task.taskStatus} onChange={e =&amp;gt; props.task.toggle()} /&amp;gt;
        &amp;lt;input
            type="text"
            value={props.task.taskName}
            onChange={e =&amp;gt; props.task.setTaskName(e.target.value)}
        /&amp;gt;
    &amp;lt;/div&amp;gt;
))

const AppView = observer(props =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;button onClick={e =&amp;gt; props.store.addTask(randomId(), "Article Writing")}&amp;gt;Add Task&amp;lt;/button&amp;gt;
        {values(props.store.tasks).map(task =&amp;gt; (
            &amp;lt;TaskView task={task} /&amp;gt;
        ))}
    &amp;lt;/div&amp;gt;
))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have separate business logic for TaskView, Note - we have added an observer in TaskView. So when anyone changes TaskStatus Check/UnCheck, only TaskView will be rendered. AppView only re-render in a case when a new task is added or existing task deleted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#computed-properties"&gt;
  &lt;/a&gt;
  Computed Properties
&lt;/h3&gt;

&lt;p&gt;Till previous steps we are showing Tasks added by User. What I need to do, to show the count of Completed Tasks and Pending Tasks? It‚Äôs simple with MobX, add getter property in our model by calling &lt;strong&gt;.views&lt;/strong&gt;, it will count how many Tasks completed and pending. Let‚Äôs see the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const RootStore = types
    .model({
        users: types.map(User),
        tasks: types.map(Task),
    })
    .views(self =&amp;gt; ({
        get pendingTasksCount() {
            return values(self.tasks).filter(task =&amp;gt; !task.taskStatus).length
        },
        get completedCount() {
            return values(self.tasks).filter(task =&amp;gt; task.done).length
        }
    }))
    .actions(self =&amp;gt; ({
        addTask(userID, taskName) {
            self.tasks.set(userID, Task.create({ taskName }))
        }
    }))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const TaskCountView = observer(props =&amp;gt; (
    &amp;lt;div&amp;gt;
        {props.store.pendingTaskCount} Pending Tasks, {props.store.completedTaskCount} Completed Tasks
    &amp;lt;/div&amp;gt;
))

const AppView = observer(props =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;button onClick={e =&amp;gt; props.store.addTask(randomId(), "Article Writing")}&amp;gt;Add Task&amp;lt;/button&amp;gt;
        {values(props.store.tasks).map(task =&amp;gt; (
            &amp;lt;TaskView task={task} /&amp;gt;
        ))}
        &amp;lt;TaskCountView store={props.store} /&amp;gt;
    &amp;lt;/div&amp;gt;
))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Do you want to start new project, check &lt;a href="https://www.kpiteng.com/blogs/ignite-react-native-boilerplate"&gt;React Ignite Boilerplate&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;Now, it‚Äôs time to assign a User for each Task in Tasks. For this we need to tell MST which is the unique attribute (primary key in db language) in each User model instance. You can implement it using &lt;strong&gt;types.identifier&lt;/strong&gt; type composer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const User = types.model({
    userID: types.identifier,
    userName: types.optional(types.string, "")
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to define a reference to the Task Model. It‚Äôs simple - you can do it using &lt;strong&gt;types.reference(User)&lt;/strong&gt;. Many times it‚Äôs a circular reference, so to resolve it we need to use &lt;strong&gt;types.late(() =&amp;gt; User)&lt;/strong&gt;. It may be possible User entry found null, to resolve that we need to use &lt;strong&gt;type.maybe(...)&lt;/strong&gt;, So finally let‚Äôs see how code looks like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Task = types
    .model({
        taskName: types.optional(types.string, ""),
        taskStatus: types.optional(types.boolean, false),
        user: types.maybe(types.reference(types.late(() =&amp;gt; User)))
    })
    .actions(self =&amp;gt; ({
        setTaskName(newTaskName) {
            self.taskName = newTaskName
        },
        setUser(user) {
            if (user === "") {
                self.user = undefined
            } else {
                self.user = user
            }
        },
        toggle() {
            self.taskStatus = !self.taskStatus
        }
    }))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const UserPickerView = observer(props =&amp;gt; (
    &amp;lt;select value={props.user ? props.user.userID : ""} onChange={e =&amp;gt; props.onChange(e.target.value)}&amp;gt;
        &amp;lt;option value=""&amp;gt;-none-&amp;lt;/option&amp;gt;
        {values(props.store.users).map(user =&amp;gt; (
            &amp;lt;option value={user.id}&amp;gt;{user.name}&amp;lt;/option&amp;gt;
        ))}
    &amp;lt;/select&amp;gt;
))

const TaskView = observer(props =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;input type="checkbox" checked={props.task.taskStatus} onChange={e =&amp;gt; props.task.toggle()} /&amp;gt;
        &amp;lt;input
            type="text"
            value={props.task.name}
            onChange={e =&amp;gt; props.task.setName(e.target.value)}
        /&amp;gt;
        &amp;lt;UserPickerView
            user={props.task.user}
            store={props.store}
            onChange={userID =&amp;gt; props.task.setUser(userID)}
        /&amp;gt;
    &amp;lt;/div&amp;gt;
))

const TaskCountView = observer(props =&amp;gt; (
    &amp;lt;div&amp;gt;
        {props.store.pendingTaskCount} Pending Tasks, {props.store.completedTaskCount} Completed Tasks
    &amp;lt;/div&amp;gt;
))

const AppView = observer(props =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;button onClick={e =&amp;gt; props.store.addTask(randomId(), "Article Writting")}&amp;gt;Add Task&amp;lt;/button&amp;gt;
        {values(props.store.tasks).map(task =&amp;gt; (
            &amp;lt;TaskView store={props.store} task={task} /&amp;gt;
        ))}
        &amp;lt;TaskCountView store={props.store} /&amp;gt;
    &amp;lt;/div&amp;gt;
))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have covered almost all required topics from MobeX-State-Tree. MobeX provided few sample example, download &lt;a href="https://github.com/mobxjs/mobx-state-tree/tree/master/packages/mst-example-todomvc"&gt;ToDoMVC - app&lt;/a&gt; using React and MST and &lt;a href="https://github.com/mobxjs/mobx-state-tree/tree/master/packages/mst-example-bookshop"&gt;Bookshop - app&lt;/a&gt; with references, identifiers, routing, testing etc.&lt;/p&gt;

&lt;p&gt;Thanks for reading Article!&lt;/p&gt;

&lt;p&gt;KPITENG | DIGITAL TRANSFORMATION&lt;br&gt;
&lt;a href="http://www.kpiteng.com/blogs"&gt;www.kpiteng.com/blogs&lt;/a&gt; | &lt;a href="mailto:hello@kpiteng.com"&gt;hello@kpiteng.com&lt;/a&gt;&lt;br&gt;
Connect | Follow Us On - &lt;a href="https://www.linkedin.com/company/kpiteng/"&gt;Linkedin&lt;/a&gt; | &lt;a href="https://www.facebook.com/kpiteng"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.instagram.com/kpiteng/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Using JS Intersection Observer¬†API to track user footprints</title>
      <author>Harshit Thukral</author>
      <pubDate>Sun, 30 May 2021 15:01:26 +0000</pubDate>
      <link>https://dev.to/harshit369/using-js-intersection-observer-api-to-track-user-footprints-23c2</link>
      <guid>https://dev.to/harshit369/using-js-intersection-observer-api-to-track-user-footprints-23c2</guid>
      <description>&lt;p&gt;Understanding user behavior for your web app to find out where the disconnect is and which of your features is giving a hard time to your users is no more a secondary thing. If you try googling for some good ready to integrate solutions to track users, you will find some big and established players like &lt;a href="%5Bhttps://analytics.google.com/%5D(https://analytics.google.com/)"&gt;Google Analytics&lt;/a&gt; and &lt;a href="%5Bhttps://mixpanel.com/home/%5D(https://mixpanel.com/home/)"&gt;Mixpanel&lt;/a&gt; who also serve you with exceptional metrics and dashboards based on the data you publish to them. Now, your respective teams can analyze this data and zoom into the actual pain points and gaps.&lt;/p&gt;

&lt;p&gt;But what if you had a use-case like we did, where a user had to pay for each visit depending on the time they spent and the features they strolled over during their time on the platform. The question that comes out, is this data first of all exposed and secondly reliable enough to cut someone a ticket? The answer was NO! All because integrating most of these libraries effectively requires a lot of SDK calls to be integrated across your whole app like landmines. So without boring you any further with the back story of why let's jump to..&lt;/p&gt;

&lt;p&gt;After weighing the effectiveness and integration efforts we decided to rely on the browser's &lt;a href="%5Bhttps://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API%5D(https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)"&gt;IntersectionObserver API&lt;/a&gt; to rescue us. It lets you observe elements in your DOM tree and dispatches an event when one of those elements enters or exits the viewport. Let's put some code where my mouth is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tracking-service"&gt;
  &lt;/a&gt;
  Tracking Service
&lt;/h3&gt;

&lt;p&gt;First, we needed a service that can work as a singleton to observe and track different components in your viewport and also independently integrate with the backend service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// you can understand the meaning of each options values here&lt;/span&gt;
  &lt;span class="c1"&gt;// https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#creating_an_intersection_observer&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// do something when some target changes state (enters or exits viewport)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what's happening here is, we created function &lt;code&gt;createObserver&lt;/code&gt; an abstraction that exposes two fundamental methods:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;observe&lt;/code&gt;: this will help us register our components/nodes to the observer. So that it can start tracking and notify us once the state of the element changes.&lt;br&gt;
&lt;code&gt;unobserve&lt;/code&gt;: Just opposite to the observe method. its job is to de-register the element from the observer and stop if there's any already running timer.&lt;/p&gt;

&lt;p&gt;Now, these two simple methods work for most of the cases, but there's one particular case, when the whole app un-mounts and we still had few running timers. In that case, we need to maintain an in-memory map of all elements being tracked and expose another method &lt;code&gt;unobserveAll&lt;/code&gt; that would just &lt;code&gt;unobserve&lt;/code&gt; all records before going down.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observingTargets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-observer-id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// toggle feature timer here (API)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// stop timer (API)&lt;/span&gt;
      &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;unobserveAll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the new code additions, we now have a map called &lt;code&gt;observingTargets&lt;/code&gt; that holds all the elements under observation and their current state. When any of those elements change state, for each of them, we update the record, and a boolean &lt;code&gt;isIntersecting&lt;/code&gt; property telling the current state. The only thing remaining now is to hit the backend service API to start/stop the timer. Let's add that as well and then we can rub our hands and integrate it with our react components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleTimer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// tell api about the state change&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/timer/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observingTargets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-observer-id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;toggleTimer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// overriding isIntersecting to handle the scenario &lt;/span&gt;
      &lt;span class="c1"&gt;// in case app unmounts while element was still in the view port&lt;/span&gt;
      &lt;span class="nx"&gt;toggleTimer&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;unobserveAll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observingTargets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#react-hoc"&gt;
  &lt;/a&gt;
  React HOC
&lt;/h3&gt;

&lt;p&gt;On the UI component side of things, one has to handle three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register itself to the observer service using &lt;code&gt;observe&lt;/code&gt; and tell it to keep an eye on the component's intersection with the viewport.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;unobserve&lt;/code&gt; function to de-register itself before un-mounting&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;unobserveAll&lt;/code&gt; function that will stop all the running timers once a user decides to leave your app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third one can be handled using the window's &lt;code&gt;beforeunload&lt;/code&gt; event, which is called right before the tab unloads. So, for our React components, we'll be focussing on the first two.&lt;/p&gt;

&lt;p&gt;HOC stands for Higher-Order Component. It's not something specific to React and lets you extend your components compositionally. As per official &lt;a href="%5Bhttps://reactjs.org/docs/higher-order-components.html%5D(https://reactjs.org/docs/higher-order-components.html)"&gt;React documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concretely, a higher-order component is a function that takes a component and returns a new component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let's implement it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./observer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TrackedEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ElToTrack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// providing the ability to override the id attribute before mounting.&lt;/span&gt;
    &lt;span class="c1"&gt;// this will be useful when you have multiple children of same type.&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-observer-id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ElToTrack&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findDOMNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TrackedEl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we implemented above is a function that returns our custom component, which renders the very same component in the &lt;code&gt;render&lt;/code&gt; method that needs to be tracked and was passed to it as the first param. Additionally, it takes care of both registering(&lt;code&gt;observe&lt;/code&gt;) and unregistering(&lt;code&gt;unobserve&lt;/code&gt;) the actual DOM node using component lifecycle hooks.&lt;/p&gt;

&lt;p&gt;PS: This can also re-written using a lot of¬†&lt;a href="%5Bhttps://reactjs.org/docs/hooks-intro.html%5D(https://reactjs.org/docs/hooks-intro.html)"&gt;React Hooks&lt;/a&gt;¬†shorthands, you can try, but I find it easier to convey the message with the legacy API.&lt;/p&gt;

&lt;p&gt;Now let's see how it can be used with our components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NormalReactComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Hey!, i'm being tracked
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TrackedEL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NormalReactComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Now, all we need to track our components is to wrap them with the &lt;code&gt;TrackedEL&lt;/code&gt; HOC that will take care of all observing and un-observing logic using the functions exposed by the timer service created above.&lt;/p&gt;

&lt;p&gt;So, now at the end of it, we have a well-crafted, easy to integrate, and extensible way to track our components and in-premise user data that can be relied upon as well as easily reconciled.&lt;/p&gt;

&lt;p&gt;You can find the whole working code in this &lt;a href="https://codesandbox.io/s/intersection-observer-tracker-0m0oz"&gt;sandbox&lt;/a&gt;. Suggestions and corrections would be really appreciated.&lt;/p&gt;

&lt;p&gt;Happy Tracking.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Complete Web Development Roadmap.</title>
      <author>Saifullah Usmani</author>
      <pubDate>Sun, 30 May 2021 14:45:56 +0000</pubDate>
      <link>https://dev.to/saifullahusmani/complete-web-development-roadmap-122m</link>
      <guid>https://dev.to/saifullahusmani/complete-web-development-roadmap-122m</guid>
      <description>&lt;p&gt;Hi, my name is Saifullah Usmani. I am a Full Stack Python Web Developer. I have been programming for almost 4.5 years now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8KWh365--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8kk5uprq8cuef0hiwhr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8KWh365--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8kk5uprq8cuef0hiwhr.jpg" alt="matt-duncan-IUY_3DvM__w-unsplash (2) (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-you-need-a-roadmap"&gt;
  &lt;/a&gt;
  Why do you need a roadmap:
&lt;/h2&gt;

&lt;p&gt;Roadmap is like a known road to your destination. And when you know the route to destination, reaching there gets so much easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-of-web-developers"&gt;
  &lt;/a&gt;
  Type of Web developers:
&lt;/h2&gt;

&lt;p&gt;There are three types of web developers:&lt;br&gt;
-&amp;gt;&lt;strong&gt;Frontend Developers&lt;/strong&gt;&lt;br&gt;
-&amp;gt;&lt;strong&gt;Backend Developers&lt;/strong&gt;&lt;br&gt;
-&amp;gt;&lt;strong&gt;Full Stack Web Developers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frontend Developers:&lt;/strong&gt;&lt;br&gt;
The work of Frontend Developers is the first thing users see when they visit the website. Frontend Developers code the design of the websites using frontend technologies. An Example of website design:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_zs42gVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97bnsd582j7gbroxr1lh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_zs42gVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97bnsd582j7gbroxr1lh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backend Developers:&lt;/strong&gt;&lt;br&gt;
The work of Backend Developers is usually not shown to users directly. Users often overlook or don't realize the work of Backend Developers but every action they perform by clicking a button, the logic of that button is coded by Backend Developers. An example of Backend Developer's work(It is an API):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJWzmQiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kaw6070yagwg842o0de.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJWzmQiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kaw6070yagwg842o0de.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Stack Web Developers:&lt;/strong&gt;&lt;br&gt;
Full Stack Web Developers are the real masters of web development. They know both Frontend and Backend, Which makes them a One Man Army. They can come up with an idea and fulfil it without any help. That is why they are paid double than a frontend/backend developer. Frontend &amp;amp; backend developer salaries are almost same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadmap-for-each-type-of-developers"&gt;
  &lt;/a&gt;
  Roadmap for each type of developers:
&lt;/h2&gt;

&lt;p&gt;In the roadmap I will provide you the technologies and option you have in each field(frontend, backend, full-stack).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roadmap for Frontend Developers:&lt;/strong&gt;&lt;br&gt;
Every Web Developer must have a basic understanding of HTML, CSS, and JavaScript. And As a Frontend Developer these 3 languages are your weapon. Master these and you are good to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt; as the technology grow new tool comes out to stay updated. Likewise Frontend Development is also coming up with new tools that are a must for you to learn as a frontend developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Libraries/tools/skills For Frontend Developers:&lt;/strong&gt;&lt;br&gt;
As javascript is growing and evolving rapidly likewise new tools are getting popular. These are most common and popular libraries and tools for Frontend Developers:&lt;br&gt;
-Bootstrap / Material Design&lt;br&gt;
-React.JS &amp;amp; React Native&lt;br&gt;
-Next.JS&lt;br&gt;
-jQuery&lt;br&gt;
-Vue.JS &amp;amp; Angular&lt;br&gt;
-Responsive Design&lt;br&gt;
-Version Control/Git&lt;br&gt;
-Browser Developer Tools&lt;br&gt;
-Web Performance&lt;br&gt;
-SEO optimized design&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Being&lt;/strong&gt; good in javascript is necessary as a Frontend Developer.&lt;br&gt;
There are other options too which are well explained in this roadmap but those which I mentioned are in-demand in 2021:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9goZLFN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.w3schools.com/whatis/img_frontend.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9goZLFN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.w3schools.com/whatis/img_frontend.jpg" alt="Frontend roadmap"&gt;&lt;/a&gt;&lt;br&gt;
Chart created by GitHub user Kamranahmedse:&lt;br&gt;
&lt;a href="https://github.com/kamranahmedse"&gt;https://github.com/kamranahmedse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roadmap for Backend Developers:&lt;/strong&gt;&lt;br&gt;
As Backend Developers control the logic and flow of the websites they must know some programming languages and query languages to control them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming Languages for Backend Developers:&lt;/strong&gt;&lt;br&gt;
-SQL&lt;br&gt;
-Mongodb&lt;br&gt;
-PHP&lt;br&gt;
-Python&lt;br&gt;
-NodeJS&lt;br&gt;
-C#(ASP)&lt;br&gt;
-Ruby&lt;br&gt;
There are other options too which are well explained in this roadmap but those which I mentioned are in-demand in 2021:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxhhJTOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.w3schools.com/whatis/img_backend.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxhhJTOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.w3schools.com/whatis/img_backend.jpg" alt="Backend roadmap"&gt;&lt;/a&gt;&lt;br&gt;
Chart created by GitHub user Kamranahmedse:&lt;br&gt;
&lt;a href="https://github.com/kamranahmedse"&gt;https://github.com/kamranahmedse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roadmap for for Full Stack Developers:&lt;/strong&gt;&lt;br&gt;
Full Stack Developers are those who manage both frontend and backend. Not only that, they are also good in problem solving and they create scalable, fast and maintainable solutions for big projects.&lt;br&gt;
They maintain everything from creation to deployment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming languages for Full Stack Developers:&lt;/strong&gt;&lt;br&gt;
Programming languages for Full Stack Developers are categorized in "Tech stacks" for different tasks. That is why one Full Stack Developer must know at least one tech stack(learning more than one tech stack is a plus).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tech Stack for Full Stack Developers:&lt;/strong&gt;&lt;br&gt;
As there are so many languages and tools for Full Stack web development i.e:&lt;br&gt;
PHP, ASP, C++, C#, Java, Python, Node.js, Express.js, Ruby, REST, GO, SQL, MongoDB, Firebase.com, Sass, Less, Parse.com, PaaS (Azure and Heroku), Bootstrap, W3.CSS, JavaScript, ES5, HTML DOM, JSON, XML, jQuery, Angular, React, Backbone.js, Ember.js, Redux, Storybook, GraphQL, Meteor.js, Grunt, Gulp and more.....&lt;br&gt;
&lt;strong&gt;That&lt;/strong&gt; is why some standards tech stacks are made for specific tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most Popular Tech Stacks Are:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Django stack:&lt;/strong&gt; JavaScript - Python - Django - MySQL(That is my personal favorite)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LAMP stack:&lt;/strong&gt; JavaScript - Linux - Apache - MySQL - PHP&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LEMP stack:&lt;/strong&gt; JavaScript - Linux - Nginx - MySQL - PHP&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MERN stack:&lt;/strong&gt; JavaScript - MongoDB - Express - ReactJS - Node.js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MEAN stack:&lt;/strong&gt; JavaScript - MongoDB - Express - AngularJS - Node.js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby on Rails:&lt;/strong&gt; JavaScript - Ruby - SQLite - Rails&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-advice"&gt;
  &lt;/a&gt;
  My Advice:
&lt;/h2&gt;

&lt;p&gt;After you have read the whole article, you must be able to select between frontend, backend or full stack web development.&lt;br&gt;
But the choice of learning which programming language or tech stack will be a hurdle for you for a bit. That is why I recommend you to understand the Purpose of each Programming Language First. And then check what kind of project you want to make and then analyze which programming language is suitable for that kind of project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me:
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Follow me here:&lt;/em&gt; &lt;a href="https://dev.to/saifullahusmani"&gt;https://dev.to/saifullahusmani&lt;/a&gt;&lt;br&gt;
&lt;em&gt;YouTube:&lt;/em&gt; &lt;a href="http://bit.ly/saifullahusmani"&gt;http://bit.ly/saifullahusmani&lt;/a&gt; (Programming Tutorials Coming Soon).&lt;br&gt;
&lt;em&gt;Discord:&lt;/em&gt; &lt;a href="https://discord.gg/AKyvy8Y"&gt;https://discord.gg/AKyvy8Y&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>roadmap</category>
      <category>beginners</category>
      <category>guide</category>
    </item>
    <item>
      <title>Add Tailwind 2 to Rails 6.1</title>
      <author>Marc</author>
      <pubDate>Sun, 30 May 2021 14:40:13 +0000</pubDate>
      <link>https://dev.to/webdevchallenges/add-tailwind-2-to-rails-6-1-3f5f</link>
      <guid>https://dev.to/webdevchallenges/add-tailwind-2-to-rails-6-1-3f5f</guid>
      <description>&lt;p&gt;Originally posted on my blog: &lt;a href="https://webdevchallenges.com/add-tailwind-to-rails"&gt;https://webdevchallenges.com/add-tailwind-to-rails&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SWjb8sqcdws"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-add-tailwind-to-rails-61"&gt;
  &lt;/a&gt;
  How to add Tailwind to Rails 6.1
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#new-rails-project"&gt;
  &lt;/a&gt;
  New Rails Project
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new myproject
cd myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install dependencies
&lt;/h2&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add tailwindcss@npm:@tailwindcss/postcss7-compat postcss@7 autoprefixer@9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#generate-tailwind-config"&gt;
  &lt;/a&gt;
  Generate tailwind config
&lt;/h2&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tailwindcss init --full
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Add purge paths to the newly generated file (&lt;code&gt;tailwind.config.js&lt;/code&gt;) to reduce the css file dramatically.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;purge: [
  "./app/**/*.html.erb",
  "./app/helpers/**/*.rb",
  "./app/javascript/**/*.js",
  "./app/javascript/**/*.vue",
],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#create-a-scss-file-for-the-application"&gt;
  &lt;/a&gt;
  Create a scss file for the application
&lt;/h2&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir app/javascript/stylesheets
touch app/javascript/stylesheets/application.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Import some basic tailwind stuff in there&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Import that file in &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "stylesheets/application";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#require-tailwindcss-in-postcss"&gt;
  &lt;/a&gt;
  Require tailwindcss in postcss
&lt;/h2&gt;

&lt;p&gt;Add the following require to the &lt;code&gt;postcss.config.js&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('tailwindcss'),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#import-the-tailwind-stylesheet-pack"&gt;
  &lt;/a&gt;
  Import the tailwind stylesheet pack
&lt;/h2&gt;

&lt;p&gt;Import the stylesheet_pack_tag in your layouts (&lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;%= stylesheet_pack_tag 'application', media: 'all' %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out
&lt;/h2&gt;

&lt;p&gt;Uun the rails server in one terminal&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And the webpack dev server in another one&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./bin/webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>tailwindcss</category>
      <category>rails</category>
    </item>
    <item>
      <title>How to use Notion API with NextJS</title>
      <author>Georgey</author>
      <pubDate>Sun, 30 May 2021 14:27:46 +0000</pubDate>
      <link>https://dev.to/geobrodas/how-to-use-notion-api-with-nextjs-5940</link>
      <guid>https://dev.to/geobrodas/how-to-use-notion-api-with-nextjs-5940</guid>
      <description>&lt;p&gt;Notion API is finally here, and it's so cool. But you must be wondering what is Notion in the first case? Well, it's a powerful productivity tool for managing your daily day-to-day tasks, or maybe jotting down a lot of ideas you want to put up in your next blog? There are unlimited possibilities. &lt;/p&gt;

&lt;p&gt;I myself found it annoying at first because I have a habit of writing down things instead of typing them out on a notepad. But turns out, it did boost my productivity moreover, it's much more noticeable when you are working with a team.&lt;/p&gt;

&lt;p&gt;Now imagine if you could display all these data to a front-end, and update them directly on the Notion database instead of pushing some extra line of code. Your favorite tool now has its own API!&lt;/p&gt;

&lt;p&gt;This tutorial is beginner-friendly, so don't hesitate. I assure you, the result is satisfying.&lt;/p&gt;

&lt;p&gt;Here are the steps we'll be going through,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#create-a-new-database-on-notion"&gt;Create a new database on Notion.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#making-a-new-integration"&gt;Making a new integration.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-the-backend"&gt;Setting up the back-end.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetching-data-from-the-database"&gt;Fetching data from the database.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying-the-api-call"&gt;Modifying the API call.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#displaying-the-data-on-a-nextjs-project"&gt;Displaying the data on a NextJS project.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#create-a-new-database-on-notion"&gt;
  &lt;/a&gt;
  Create a new database on Notion.
&lt;/h2&gt;

&lt;p&gt;Go ahead and make a new Notion account, if you haven't made one.&lt;/p&gt;

&lt;p&gt;Create a new page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7kPOOfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622120222950/dspcKphoE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7kPOOfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622120222950/dspcKphoE.png" alt="add databse.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are lots of templates and different databases available. Here we will be building a project database using the kanban board. Next time whenever you complete an ongoing project, move it to the "Completed" section, and you can see the change instantly on your website.&lt;/p&gt;

&lt;p&gt;Go ahead and add some projects, dummy or actual, which you have already completed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ObxQPm3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622121121085/0T26-R2-T8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObxQPm3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622121121085/0T26-R2-T8.png" alt="dummy.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-new-integration"&gt;
  &lt;/a&gt;
  Making a new integration.
&lt;/h2&gt;

&lt;p&gt;Now let's connect our database to a new integration. Go to the official page of &lt;a href="https://developers.notion.com/"&gt;Notion API&lt;/a&gt; and click on 'My Integrations' in the top-right corner. &lt;/p&gt;

&lt;p&gt;Make a new integration. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZimlMAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622122190168/ZM9xVl9Uc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZimlMAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622122190168/ZM9xVl9Uc.png" alt="integrations.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the Token ID somewhere safe, we'll be using it for authentication ahead.&lt;/p&gt;

&lt;p&gt;Now let's connect our database to the newly created integration.&lt;/p&gt;

&lt;p&gt;Simply, head over to the new page we created, click on &lt;strong&gt;Share&lt;/strong&gt;, and search for the integration we just created.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJxq3FNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622203232748/wjhri1Hlp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJxq3FNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622203232748/wjhri1Hlp.png" alt="Slide 16_9 - 1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-backend"&gt;
  &lt;/a&gt;
  Setting up the backend.
&lt;/h2&gt;

&lt;p&gt;Now, we'll make our own API, which will fetch the data through Notion API and then filter through the data, to display what is actually relevant.&lt;/p&gt;

&lt;p&gt;Go ahead and run &lt;code&gt;npm init -y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure you have the latest NodeJS version installed.&lt;/p&gt;

&lt;p&gt;We'll need three packages,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express @notionhq/client dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install &lt;code&gt;nodemon&lt;/code&gt;, to keep the server active throughout the process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;nodemon &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go over to the &lt;code&gt;package.json&lt;/code&gt; file, and add a new script for &lt;code&gt;nodemon&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"dev"&lt;/span&gt; : &lt;span class="s2"&gt;"nodemon index.js"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make a new &lt;code&gt;.env&lt;/code&gt; file, and add the Token ID we created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;NOTION_TOKEN_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;yourtokenid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Head over to the &lt;code&gt;index.js&lt;/code&gt; file, and initialize &lt;code&gt;dotenv&lt;/code&gt; and require the Auth Client from the Notion SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@notionhq/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need to acquire the database ID to fetch data from the new page we created.&lt;/p&gt;

&lt;p&gt;There are 2 ways to find this out, either you can use &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; (or any other API testers) and make a &lt;code&gt;GET&lt;/code&gt; request to &lt;a href="https://api.notion.com/v1/databases"&gt;https://api.notion.com/v1/databases&lt;/a&gt; with the Bearer Token ( the Token ID).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1alE9VQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622206056989/RcVi9Q_uy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1alE9VQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622206056989/RcVi9Q_uy.png" alt="postman.png"&gt;&lt;/a&gt;&lt;br&gt;
Or head over to the &lt;code&gt;index.js&lt;/code&gt; file, create a new &lt;code&gt;Client&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NOTION_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create an &lt;code&gt;async&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listDatabases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;databases&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;listDatabases&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run &lt;code&gt;npm run dev&lt;/code&gt;, and if you check the console, you'll be able to view the same result.&lt;/p&gt;

&lt;p&gt;Head over to the &lt;code&gt;.env&lt;/code&gt; file, and add this database ID&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;NOTION_DATABASE_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;yourdatabaseid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's set up the express server,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is up and running!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fetching-data-from-the-database"&gt;
  &lt;/a&gt;
  Fetching data from the database.
&lt;/h2&gt;

&lt;p&gt;Now let's fetch the raw data we get from the Notion API.&lt;/p&gt;

&lt;p&gt;Start with defining a constant &lt;code&gt;payload&lt;/code&gt;, which we will pass through the request as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProjects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`databases/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;database_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/query`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path is mentioned in the Notion API documentation, although we won't be needing the root URL, since we are using the SDK.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kxi1IJDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622359176035/N9LlTy9ss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxi1IJDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622359176035/N9LlTy9ss.png" alt="query-notion.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Source: &lt;a href="https://developers.notion.com/reference/post-database-query"&gt;Notion API documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the response, we just need the &lt;code&gt;results&lt;/code&gt; object, hence destructure the object and try to log the response onto the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NOTION_DATABASE_ID&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProjects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`databases/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;database_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/query`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getProjects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be getting the list of cards, we made previously in JSON format as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vjfrI7_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622366334216/J2VPqLA9M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vjfrI7_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622366334216/J2VPqLA9M.png" alt="results-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modifying-the-api-call"&gt;
  &lt;/a&gt;
  Modifying the API call.
&lt;/h2&gt;

&lt;p&gt;As you have seen, the response has a lot of junk data. In this section, we'll filter through the data, and send a personalized object.&lt;/p&gt;

&lt;p&gt;Now the objective is to get only the cards, that have the marked status "Completed".&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;getProjects&lt;/code&gt; function, let's map through the response, and return a customized object back.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;projects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Completed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, &lt;code&gt;projects&lt;/code&gt; will be an array of objects each containing an object with the status 'Completed'.&lt;/p&gt;

&lt;p&gt;It will also have some null values. We can remove these by using the &lt;code&gt;filter&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This can be implemented in the return statement as follows,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the final response should only contain an array of objects with the status 'Completed'.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPptMCaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622369774388/LE-NmQ2bz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPptMCaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622369774388/LE-NmQ2bz.png" alt="results-final.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's left now is to set up a route in our express server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/projects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;projects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getProjects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#displaying-the-data-on-a-nextjs-project"&gt;
  &lt;/a&gt;
  Displaying the data on a NextJS project.
&lt;/h2&gt;

&lt;p&gt;Our API is Ready! &lt;/p&gt;

&lt;p&gt;The final task is to display it to a front-end. Go ahead and initialize a new NextJS project. (or if you have an existing project)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app notion-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to &lt;code&gt;pages/index.js&lt;/code&gt;.&lt;br&gt;
( or any other route you prefer, depending on the type of project your working on)&lt;/p&gt;

&lt;p&gt;Make a new &lt;code&gt;.env.local&lt;/code&gt; file to store the API URL. NextJS comes in-built with environment variables support.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;NEXT_API&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:8000/projects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In NextJS, to receive data from the endpoint, NextJS uses an &lt;code&gt;async&lt;/code&gt; function called &lt;code&gt;getStaticProps&lt;/code&gt;. By using this function, NextJS will pre-render the data on the server-side on &lt;strong&gt;build&lt;/strong&gt; time, rather than fetching the data when the page first loads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get posts from our api&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_API&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;projects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;projects&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now get hold of this array, by passing it to the default function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;projects&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; 
                 &lt;span class="nx"&gt;projects&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;             &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congrats! You're doing a great job!&lt;/p&gt;

&lt;p&gt;You can check what I did with Notion API on my portfolio page &lt;a href="https://sh-ort.app/cldeq"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;I could build this through Traversy Media's video on Youtube, so if you get stuck, check out his tutorial!&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9JdP-S3crt8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for Reading!üéâ
&lt;/h2&gt;

&lt;p&gt;The Notion API can be tweaked in many ways. You can integrate it with Slack, Typeform, etc. It's a really powerful tool. As a personal advice, if you haven't worked with API's before, I think Notion API is just the place. It's really simple and has a great documentation with plenty of video tutorials online. Hit me up on &lt;a href="https://sh-ort.app/owefm"&gt;Twitter&lt;/a&gt; with your creation!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need the source code, do let me know in the comments section below, I'll respond as soon as possibleüëç&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support me üôå
&lt;/h2&gt;

&lt;p&gt;My blogs are powered by coffees, if you feel I deserve one, Thanks‚ù§&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/geobrodas"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vu9xrqH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dgeobrodas%26button_colour%3DFF5F5F%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>nextjs</category>
      <category>node</category>
      <category>database</category>
    </item>
    <item>
      <title>Amazing Button Hover Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Sun, 30 May 2021 13:46:44 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-button-hover-using-html-css-4a7f</link>
      <guid>https://dev.to/nikhil27b/amazing-button-hover-using-html-css-4a7f</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I created a Amazing Button Hover Effect Using HTML &amp;amp; CSS. this hover effect is simple but it looks amazing. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/MWpOvKy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create an electron-app using svelte build script included</title>
      <author>Abdallah Mohammed</author>
      <pubDate>Sun, 30 May 2021 13:32:11 +0000</pubDate>
      <link>https://dev.to/abdallahmoh/create-an-electron-app-using-svelte-build-script-included-3kbg</link>
      <guid>https://dev.to/abdallahmoh/create-an-electron-app-using-svelte-build-script-included-3kbg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#first-generate-the-svelte-app"&gt;
  &lt;/a&gt;
  First generate the svelte app
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;install &lt;code&gt;degit&lt;/code&gt; if not installed&lt;code&gt;npm install -g degit&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Setup svelte app using &lt;code&gt;degit sveltejs/template app-name&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cd app-name&lt;/code&gt; and run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;now your svelte app is ready&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#add-electron"&gt;
  &lt;/a&gt;
  Add electron
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;npm install -D electron&lt;/code&gt;&lt;br&gt;
create an &lt;code&gt;index.js&lt;/code&gt; file in the project root&lt;br&gt;
paste code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { app, BrowserWindow } = require('electron')
const path = require("path");
function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile(path.join(__dirname, 'public/index.html')
}
app.on("ready", createWindow)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now add &lt;code&gt;"main": "index.js"&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
then replace &lt;code&gt;scripts&lt;/code&gt; in package.json with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
    "build": "rollup -c &amp;amp;&amp;amp; electron-builder",
    "dev": "rollup -c -w",
    "start": "electron .",
    "validate": "svelte-check"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now open terminal and run &lt;code&gt;npm run dev&lt;/code&gt; a window will popup like this &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CA-MpQyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3szftz70riw4lpj02ibh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CA-MpQyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3szftz70riw4lpj02ibh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to fix this go to &lt;code&gt;public/index.html&lt;/code&gt; file and replace it with this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width,initial-scale=1" /&amp;gt;

    &amp;lt;title&amp;gt;App Name&amp;lt;/title&amp;gt;

    &amp;lt;link rel="stylesheet" href="global.css" /&amp;gt;
    &amp;lt;link rel="stylesheet" href="build/bundle.css" /&amp;gt;

    &amp;lt;script defer src="build/bundle.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;run &lt;code&gt;npm run dev&lt;/code&gt; again and you will get &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wm17NnhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bt4jhgz1r8lsyloc8i4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wm17NnhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bt4jhgz1r8lsyloc8i4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#now-for-building-install-electron-builder"&gt;
  &lt;/a&gt;
  Now for building install electron builder
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;npm i -D electron-builder&lt;/code&gt; &lt;br&gt;
now run &lt;code&gt;npm run build&lt;/code&gt;&lt;br&gt;
wait till command ends and you should get a &lt;code&gt;dist&lt;/code&gt; folder&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CS17B90b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxbrbczrzi3mkbe15x4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CS17B90b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxbrbczrzi3mkbe15x4u.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>electron</category>
      <category>svelte</category>
      <category>electronbuilder</category>
    </item>
    <item>
      <title>Lazy-loading React components‚Äîno rocket science</title>
      <author>Amandeep Singh</author>
      <pubDate>Sun, 30 May 2021 13:24:20 +0000</pubDate>
      <link>https://dev.to/aman_singh/lazy-loading-react-components-no-rocket-science-ejn</link>
      <guid>https://dev.to/aman_singh/lazy-loading-react-components-no-rocket-science-ejn</guid>
      <description>&lt;p&gt;Imagine you've been to a caf√© and order a cup of coffee ‚òï. Once the bill üßæ arrives, it isn't only for the coffee you ordered, but all the menu items available in the caf√©. How would you feel? Shocking right!!. It would be unfair to pay for all the items you haven't even ordered. Without arguing, you paid the bill, and never returned to this caf√©.&lt;/p&gt;

&lt;p&gt;Well, that was just an analogy. Let's relate it with our web platform, build with an enormous JavaScript bundle. &lt;/p&gt;

&lt;p&gt;Here, our user is the customer, and we(developers) are the caf√© owners. If our user has only requested the &lt;code&gt;registration/signup&lt;/code&gt; form, would you also send down the rest of the JavaScript bundle(the bill) responsible for the rest of the pages, carrying huge map or date libraries? How would your user feel? Most likely upset or might not come to your website again, right? &lt;/p&gt;

&lt;p&gt;The obvious reason is that their first-page load experience would be slow, and the page might take more time to be interactive (&lt;a href="https://web.dev/tti/"&gt;TTI&lt;/a&gt; &amp;amp; &lt;a href="https://web.dev/fid/"&gt;FID&lt;/a&gt;). The browser will keep itself busy parsing the JavaScript, while our users stare at a blank screen with a sad face ‚òπÔ∏è.&lt;/p&gt;

&lt;p&gt;And the sad thing is that our poor user has no clue that it was us, the developers, who could have been more responsible while sending the full JavaScript bundle down to them in one go. &lt;/p&gt;

&lt;p&gt;Welcome to the world of code-splitting where you can lazy-load (dynamically) your JavaScript bundle dynamically, only when the user requested it. The bill you hand over to your user is exactly what they have eaten üòÑ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#routebased-splitting"&gt;
  &lt;/a&gt;
  Route-based splitting
&lt;/h2&gt;

&lt;p&gt;All modern JavaScript bundlers, like &lt;a href="https://webpack.js.org/guides/code-splitting/"&gt;Webpack&lt;/a&gt;. &lt;a href="https://rollupjs.org/guide/en/#code-splitting"&gt;Rollup&lt;/a&gt;, and &lt;a href=""&gt;parcel&lt;/a&gt;, supports code-splitting feature out of the box. These bundlers can create multiple bundles that can be dynamically loaded at run time, thus improving the web performance for your users. &lt;/p&gt;

&lt;p&gt;Splitting your JavaScript bundle based on the &lt;code&gt;routes/pages&lt;/code&gt; in your app is called route-based code splitting. For example, if you have &lt;code&gt;login&lt;/code&gt; and a home page, you would more likely be splitting the bundle based on these routes. And only send &lt;code&gt;login&lt;/code&gt; page JavaScript when the page loads.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt; provides this route-based splitting feature out of the box. And if you're using &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt;, &lt;a href="https://reactjs.org/docs/code-splitting.html#route-based-code-splitting"&gt;React-lazy&lt;/a&gt; is your best bet. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#componentbased-splitting"&gt;
  &lt;/a&gt;
  Component-based splitting
&lt;/h2&gt;

&lt;p&gt;With route-based splitting, we've made our users happy. It's time we take an extra step and implement &lt;strong&gt;component-based splitting&lt;/strong&gt;. Let's understand this with an example, followed by a coding exercise to strengthen our concepts. Before you realize it,  it will become a piece of cake for you üç∞. &lt;/p&gt;

&lt;p&gt;Imagine you're building a page to show a rental property. There's a button on this page that opens up a full-page map to show its address. This map component carries a complex functionality and has contributed to a large amount of JavaScript bundle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;JSHeavyMapComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./js-heavy-map-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="c1"&gt;// Property page component&lt;/span&gt;
 &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowMap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Rental&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Property&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showMap&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JSHeavyMapComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/article&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would you make this map &lt;em&gt;component&lt;/em&gt; part of your initial property page (route-based) bundle? What if the user never clicks the button, and only views the property metadata? Wouldn't that be a waste of resources to parse all that extra JavaScript causing the slow page load time? &lt;/p&gt;

&lt;p&gt;Yes, it would be unnecessary to send along all this heavy JavaScript bundle in this case. It might cause a heavy toll on mobile users where resources are limited compared to Desktop users. &lt;/p&gt;

&lt;p&gt;This is where the component-based loading comes into the picture and mitigates these issues. With this approach, you can &lt;strong&gt;lazy-load&lt;/strong&gt; the map component, and dynamically serve it when the user actually asks for it (click the button). This will make your &lt;em&gt;property page&lt;/em&gt; lean, improving the overall page-load performance. You can put more effort, and download the component when the user is about to hover the button, saving you an extra microsecond there.&lt;/p&gt;

&lt;p&gt;With the theory aside, we'll see how could you easily implement it in code using the dynamic import feature. We'll see two examples starting with &lt;a href="https://reactjs.org/docs/code-splitting.html#reactlazy"&gt;React.lazy&lt;/a&gt; approach, and then approach to do the same in NextJS projects using &lt;a href="https://nextjs.org/docs/advanced-features/dynamic-import#basic-usage"&gt;dynamic import&lt;/a&gt; feature. &lt;/p&gt;

&lt;p&gt;So, let's get started. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazyloading-via-reactlazy"&gt;
  &lt;/a&gt;
  Lazy-loading via React.lazy
&lt;/h3&gt;

&lt;p&gt;We need to use React.lazy along with &lt;a href="https://reactjs.org/docs/react-api.html#reactsuspense"&gt;Suspense&lt;/a&gt; to lazy-load our Map component dynamically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Change the old import to use React.lazy&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JSHeavyMapComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./js-heavy-map-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Property page component&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowMap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Rental&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Property&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Wrap you dynamic component with Suspense */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showMap&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;}&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JSHeavyMapComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/React.Suspense&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/article&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, with this change, when your property page loads, the browser will not load extra JavaScript for the map component. The loading will only happen when the user hits the &lt;code&gt;Show map&lt;/code&gt; button‚Äîgreat saving with just a couple of lines. Didn't I say that it would your piece of cake üòâ? Here's the &lt;a href="https://codesandbox.io/s/reactlazy-wv8m6"&gt;codesandbox demo&lt;/a&gt;. Download and run the app locally on your computer. Keep an eye on your &lt;code&gt;network&lt;/code&gt; tab when you hit the &lt;code&gt;Show map&lt;/code&gt; button. Here's your &lt;code&gt;lazy-loading&lt;/code&gt; in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t3qfyx0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd0sirtyxisvm1qxclzq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t3qfyx0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd0sirtyxisvm1qxclzq.gif" alt="Component based code-splitting using React lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazyloading-in-nextjs"&gt;
  &lt;/a&gt;
  Lazy-loading in NextJS
&lt;/h3&gt;

&lt;p&gt;With &lt;a href="https://nextjs.org/docs/advanced-features/dynamic-import"&gt;NextJS&lt;/a&gt;, implementing the dynamic loading is as easy as ABC. Similar to React.lazy API, NextJS has an equivalent &lt;a href="https://nextjs.org/docs/advanced-features/dynamic-import#basic-usage"&gt;dynamic&lt;/a&gt; module, which also let you pass &lt;a href="https://nextjs.org/docs/advanced-features/dynamic-import#with-custom-loading-component"&gt;additional options for loading component&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/dynamic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Change the old import to use NextJS dynamic import&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JSHeavyMapComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./js-heavy-map-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Property page component&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowMap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Rental&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Property&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showMap&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JSHeavyMapComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/article&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the &lt;a href="https://codesandbox.io/s/nextjs-lazy-load-tk5y0"&gt;codesandbox demo&lt;/a&gt; for it if you want to play along.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My main goal through this article was not only to tell you how to implement the code-splitting (the official docs are great resources for this) but to help you think about why do we need it in the first place. Remember that your beautiful app is of no good use if it takes minutes to load. User is the focus, and we should be mindful of what we send across the wire to the clients. Don't make your users pay the cost for the additional JavaScript. And with such a great set of tooling at our disposal, there's no excuse to &lt;strong&gt;not&lt;/strong&gt; do code-splitting. Your uses will thank you for this. &lt;/p&gt;

&lt;p&gt;Think inclusive, think accessible.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>The 5 Community Mantras : Benefits joining a community. </title>
      <author>Loveneesh Dhir</author>
      <pubDate>Sun, 30 May 2021 13:20:15 +0000</pubDate>
      <link>https://dev.to/loveneeshdhir/the-5-community-mantras-things-we-can-learn-from-communities-jf3</link>
      <guid>https://dev.to/loveneeshdhir/the-5-community-mantras-things-we-can-learn-from-communities-jf3</guid>
      <description>&lt;p&gt;Before getting reasons to join a community let's talk about what a community is!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For me community is a group of like minded people who share a common vision/goal. Like a group of developers working on a similar language/OS/platform. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each and everyone of us is surrounded by many communities. They provide us lots of opportunities but it totally depends on us to how to get the most out of them. In this blog we will be discussing 5 things (Mantras) that you can learn from communities to get the most out of them.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#mantra-1-pushing-limits"&gt;
  &lt;/a&gt;
  Mantra 1 - Pushing Limits üí™üè¢
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PuHxTRbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5ifgel6ikvfi1peszli.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PuHxTRbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5ifgel6ikvfi1peszli.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most important thing we can learn while being a part of a community is pushing our limits. When we work alone, it‚Äôs often too easy to give up when things get hard or we get stuck at some problem. Being a part of a community we surround ourselves with other people who are also working toward a similar goal or objective, we get motivation, support, and friendly competition to push ourselves a bit further than we would have done on our own. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mantra-2-collective-intelligence"&gt;
  &lt;/a&gt;
  Mantra 2 - Collective Intelligence üß†
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGriJLvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwa6vohdn70d8l0m4u0f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGriJLvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwa6vohdn70d8l0m4u0f.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I truly believe that when we work in a community of like-minded people then the collective wisdom of all the community members is way more greater than one person working alone. As we all have heard the bundle of sticks story from our ancestors which teaches us that we can easily break a single stick into pieces, but we can't break the bundle! So, if we work together as a community, our divergent views and lenses mean that we all can approach the exact same problem in a different way and can figure out the best solution for it. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mantra-3-borrow-motivation"&gt;
  &lt;/a&gt;
  Mantra 3 - Borrow Motivation ü§ù
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ms1rr2a0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxju5d546pjki9e84v63.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ms1rr2a0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxju5d546pjki9e84v63.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some days when our belief in ourselves is dwindling, at that point of time even small things can sound huge. It is the time when we need to lean on our community the most, we can look around and borrow some motivation from the folks and be inspired! I literally had times when my community members believed in me probably more than myself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mantra-4-be-accountable"&gt;
  &lt;/a&gt;
  Mantra 4- Be Accountable üôã‚Äç‚ôÄÔ∏è
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qf4K0gv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hev4up8ruxvg8rhk0pxt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qf4K0gv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hev4up8ruxvg8rhk0pxt.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that there are things we would never do if we didn't have people holding us accountable for. Going to the gym, getting some work done, and even getting a bus at time is easier when there's someone waiting for us. Having a community to be accountable for some task is a great thing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mantra-5-make-connections"&gt;
  &lt;/a&gt;
  Mantra 5 - Make Connections üë¨
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YG6ixi-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uov3ttirxj4clrupso0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YG6ixi-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uov3ttirxj4clrupso0.JPG" alt="Devfest 19 New Delhi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not the least, being a part of community we have an opportunity to meet and interact with a lot of people, make new friends and get to know mentors who can help/guide us with the things that no one taught us in our colleges. The above picture that I attached is from Devfest 2019 where I met a lot  of people made some really good friends and found some amazing mentors (huge shoutout to Arpan Bhaiya if you are reading this) who guided me a lot regarding my careers with their experience in the dev ecosystem. &lt;/p&gt;

&lt;p&gt;This was all from my end. Would love to hear you learnings while being a part of some community in the comments.&lt;/p&gt;



&lt;center&gt;&lt;b&gt;If you liked this article you can support it by Liking ‚ù§Ô∏èand Sharingüîñ&lt;b&gt;&lt;/b&gt;&lt;/b&gt;&lt;/center&gt;

</description>
      <category>leadership</category>
      <category>devrel</category>
      <category>community</category>
      <category>entrepreneurship</category>
    </item>
    <item>
      <title>Efficiency as a Developer - Big O Notation</title>
      <author>Dany Tulumidis</author>
      <pubDate>Sun, 30 May 2021 13:03:46 +0000</pubDate>
      <link>https://dev.to/danytulumidis/efficiency-as-a-developer-big-o-notation-4ffb</link>
      <guid>https://dev.to/danytulumidis/efficiency-as-a-developer-big-o-notation-4ffb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;As developers, we write new algorithms or work on existing ones. And whenever we code something we should ask ourselves multiple questions. One of these questions is:&lt;/p&gt;

&lt;p&gt;How efficient is my code?&lt;/p&gt;

&lt;p&gt;One key element when writing algorithms are data structures and each data structure has its own pros and cons. In this blog article, my goal is to give you an introduction to Big O Notation, why it's very important even when it's not that crucial for your daily job.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-big-o-notation"&gt;
  &lt;/a&gt;
  What is Big O Notation?
&lt;/h1&gt;

&lt;p&gt;Big O Notation in a nutshell: &lt;strong&gt;How the algorithm is performing and how well it scales&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can divide this into 2 forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Time:&lt;br&gt;
How much time is needed until my algorithm is finished.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Space:&lt;br&gt;
How much space it needs in the RAM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This really matters when you want to scale your application. Imagine the massive data Google has to process &lt;strong&gt;every day&lt;/strong&gt;.&lt;br&gt;
If you are a Google Engineer Big O should sound very familiar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-notation"&gt;
  &lt;/a&gt;
  The Notation
&lt;/h2&gt;

&lt;p&gt;The notation is the way we can define a algorithm.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O(1)&lt;/li&gt;
&lt;li&gt;O(n)&lt;/li&gt;
&lt;li&gt;O(n^2)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are much more but just to give you some examples. These simple terms define  the efficiency of an algorithm. O(1) for examples means that the code always needs the same time. Its constant. &lt;/p&gt;

&lt;p&gt;O(n) is different. n is a variable and defines the input. Imagine you have a for loop and iterate n times where n is for example a user input. The user can always change his/her input. Its &lt;strong&gt;not&lt;/strong&gt; constant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;Here&lt;/a&gt; is a nice cheat sheet for Big O Notation. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#take-it-easy"&gt;
  &lt;/a&gt;
  Take it easy
&lt;/h1&gt;

&lt;p&gt;Let's be honest. Many of you don't know or don't care about Big O Notation that much. And most of you don't have to. Even i don't give it that much value when writing code most of the time.&lt;/p&gt;

&lt;p&gt;First of all, we have to focus to find a solution to a certain problem before we work on efficiency. &lt;br&gt;
But there are use cases where this is a huge factor. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-data-more-problems"&gt;
  &lt;/a&gt;
  More Data, More Problems
&lt;/h1&gt;

&lt;p&gt;As mentioned above if you or your company have to deal with massive amounts of data Big O Notation is crucial. The exact same problem can be solved in 100 ways. 1 of these ways is efficient in terms of Big O and needs 3 seconds. The 99 others need longer, sometimes 1000x more. And the difference between 3 seconds and 3000 seconds is a game-changer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-learn-big-o"&gt;
  &lt;/a&gt;
  How to learn Big O
&lt;/h1&gt;

&lt;p&gt;If you don't work with a lot of data you don't have to worry about efficiency that much. I really enjoy thinking about different ways to solve one problem and always try to be as efficient as possible. And with that mindset, you can work on your Big O skills without being forced to do it. Who knows, maybe one day you will need it and then you are happy you can do it. &lt;/p&gt;

&lt;p&gt;Also, the &lt;strong&gt;best benefit&lt;/strong&gt; is that you can improve as a developer as you learn more algorithms and data structures and how to use them in your day job.&lt;/p&gt;

&lt;p&gt;I also wrote about these things like Linked Lists and Merge Sort. You can check it out on my blog posts if you are interested.&lt;/p&gt;

&lt;p&gt;Also you can work on your Big O and problem solving skills at the same time at these platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hackerrank.com/"&gt;Hackerrank&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I really hope that i explained it in an easy way and that you learned something new!&lt;/p&gt;

&lt;p&gt;Stay connected to me and my content on &lt;a href="https://twitter.com/danytulumidis"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I love to improve myself every single day even if it's just a tiny bit!&lt;/p&gt;

&lt;p&gt;Stay safe and healthy guys!&lt;/p&gt;

&lt;p&gt;And as always: develop yourself!&lt;/p&gt;

</description>
      <category>developers</category>
      <category>datastructures</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Headless-UI "Fully Accessible" - it's not your fault you believe the üí© BS üí©  [accessibility rants]</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 30 May 2021 12:35:11 +0000</pubDate>
      <link>https://dev.to/inhuofficial/headless-ui-fully-accessible-it-s-not-your-fault-you-believe-the-bs-accessibility-rants-582j</link>
      <guid>https://dev.to/inhuofficial/headless-ui-fully-accessible-it-s-not-your-fault-you-believe-the-bs-accessibility-rants-582j</guid>
      <description>&lt;p&gt;In case you haven't read one of these posts before, the anger is just for fun, the message is really important, I am not actually angry! üòÅ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On a side note:&lt;/strong&gt; There is something wrong with you all! üòâ You all seem to like me being angry and ranting at you, people are going to think I am a monster if this carries on! ü§£ Oh and for the 55 people who saw this post yesterday - sorry I mis clicked and posted before it was ready ü§¶‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fully-accessible-what-a-crock-of-sht"&gt;
  &lt;/a&gt;
  "Fully Accessible" - what a crock of sh*t
&lt;/h2&gt;

&lt;p&gt;I have seen loads of people praising headless-UI for accessibility, mentioning it in comments or even writing articles about how accessible it is, just regurgitating the crap they have been fed (you know, like the articles where "React virtual DOM is faster than vanilla JS DOM manipulation"...that sort of crap / poor understanding).&lt;/p&gt;

&lt;p&gt;I mean I don't even blame them for believing it, they say it right on the home page!:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"fully accessible UI components"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and when someone makes a claim with a popular library, of course they aren't full of crap!&lt;/p&gt;

&lt;p&gt;I mean, it isn't like people can just write what they want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-word-from-our-sponsor-magigrow"&gt;
  &lt;/a&gt;
  A quick word from our sponsor, MagiGrow!
&lt;/h3&gt;

&lt;p&gt;So before we continue, let me just tell you about today's sponsor...MagiGrow!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you want bigger boobs?&lt;/strong&gt;&lt;br&gt;
Just apply MagiGrow ointment 3 times a day and you will soon be sooooo front heavy, you might just topple over! &lt;/p&gt;

&lt;p&gt;Nobody will ever talk to your face again!  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you want an ass that just won't quit?&lt;/strong&gt;&lt;br&gt;
Use MagiGrow on your butt and you will cause earthquakes when you twerk!&lt;/p&gt;

&lt;p&gt;You will be that Thicc after using MagiGrow that people will call you "bowl of oatmeal"!!&lt;/p&gt;

&lt;p&gt;Oh and guys, we haven't forgotten you!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want a bigger dick?&lt;/strong&gt;&lt;br&gt;
MagiGrow for Men, has got you covered too.&lt;/p&gt;

&lt;p&gt;Apply liberally and you will soon have horses jealous of you! &lt;/p&gt;

&lt;p&gt;Tripod won't even be an accurate name for you as one "leg" will be longer than the other two.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order today! Only $69.69&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(I mean, I wouldn't just write some random, made up crap to make a point...you do believe me that I am sponsored by MagiGrow and it works don't you!?)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ok-we-get-it-dont-believe-everything-you-read"&gt;
  &lt;/a&gt;
  Ok we get it, don't believe everything you read.
&lt;/h2&gt;

&lt;p&gt;Yeah sorry, the ointment isn't real...and neither are headless-UI's claims.&lt;/p&gt;

&lt;p&gt;Don't believe me? Let me break down the first example they give.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#menudrop-down"&gt;
  &lt;/a&gt;
  Menu-drop down.
&lt;/h3&gt;

&lt;p&gt;Right, first one they showcase, there shouldn't be too many problems with this one surely as they are leading with it?&lt;/p&gt;

&lt;p&gt;They start with a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; (A great start, it is semantically correct...you did read &lt;a href="https://dev.to/inhuofficial/they-just-won-t-learn-a-button-is-a-lt-button-gt-accessibility-rants-k1b"&gt;my rant on buttons&lt;/a&gt; didn't you?).&lt;/p&gt;

&lt;p&gt;They also apply &lt;code&gt;aria-haspopup="true"&lt;/code&gt; (so screen readers can let people know that this opens something up) - looking good so far. &lt;/p&gt;

&lt;p&gt;They even remembered to apply &lt;code&gt;aria-expanded="true"&lt;/code&gt; when the menu is open (so screen readers can let people know that the menu is open). &lt;/p&gt;

&lt;p&gt;And they add &lt;code&gt;aria-controls="idOfTheMenu"&lt;/code&gt; (so screen readers can let people know what this button controls and make associations).&lt;/p&gt;

&lt;p&gt;It looks pretty accessible so far doesn't it! 10 / 10!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-list-is-where-it-all-goes-to"&gt;
  &lt;/a&gt;
  The list is where it all goes to üí©
&lt;/h4&gt;

&lt;p&gt;I mean, first thing is first &lt;strong&gt;why&lt;/strong&gt; if you have a list of buttons would you not use...a LIST.&lt;/p&gt;

&lt;p&gt;It is just a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a load of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s with buttons in them.&lt;/p&gt;

&lt;p&gt;The list should be a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; containing the buttons. &lt;strong&gt;SE-fucking-MANTICS people&lt;/strong&gt;. We are going to have to remove the semantic information later using &lt;code&gt;role&lt;/code&gt; but we need to start from the right place!&lt;/p&gt;

&lt;p&gt;Instead it is a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with other &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s inside it. (yeah they added some WAI-ARIA, but seriously &lt;strong&gt;why not start with the right elements in the first place!&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Why does it matter? Because an &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; has a secret super power. It allows screen readers to announce how many options there are ("list with 6 items").  This is really useful information if you can't see and your screen reader doesn't support the WAI-ARIA properties used - graceful degradation!&lt;/p&gt;

&lt;p&gt;Anyway, if the relevant WAI-ARIA is supported it works ok, so a minor point I suppose.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#they-cant-even-use-raw-role-endraw-properly"&gt;
  &lt;/a&gt;
  They can't even use &lt;code&gt;role&lt;/code&gt; properly
&lt;/h5&gt;

&lt;p&gt;Next thing - on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s (that should be &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) they apply &lt;code&gt;role="none"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;They obviously haven't even read the &lt;a href="https://www.w3.org/TR/wai-aria-1.1/#none"&gt;WAI-ARIA spec as the editor note says &lt;strong&gt;not to use &lt;code&gt;role="none"&lt;/code&gt; yet&lt;/strong&gt; (use &lt;code&gt;role="presentation"&lt;/code&gt; or `role="none presentation")&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can't blame them too much for this one though - &lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html"&gt;even WCAG guidance can't get this right&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I mean, you didn't think you can just copy and paste official WCAG recommendations did you? Of course not, loads of their examples don't follow their own best practices.&lt;/p&gt;

&lt;p&gt;A lot of them show how to take semantically incorrect elements and apply the correct semantics to them (instead of using semantically correct elements and &lt;strong&gt;enhancing them&lt;/strong&gt; or better yet having a big warning that says "you don't need to use &lt;code&gt;aria&lt;/code&gt; for this anymore, HTML5 has you covered"), loads of them are outdated and some of them are just plain wrong - don't worry &lt;a href="https://dev.to/inhuofficial/w1y-d2s-a11y-h2e-to-be-so-b4y-c9d-a1d-i10e-38no"&gt;I have included WCAG in my rants before&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Anyway, I am not docking any points for this one, in a few years it will be usable for everybody, they technically followed the spec and they probably just looked at some examples which misguided them.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#why-are-they-interfering-in-keyboard-controls-they-shouldnt"&gt;
  &lt;/a&gt;
  Why are they interfering in keyboard controls they shouldn't?
&lt;/h5&gt;

&lt;p&gt;Next issue (and now we are getting to ones that do matter): you can't Tab out of the menu...this isn't a bloody modal. Once the menu is open you can't Tab to the next control. &lt;/p&gt;

&lt;p&gt;What the hell are they thinking? &lt;/p&gt;

&lt;p&gt;Was it too difficult for their little brains to work out how to close the menu if it didn't have focus anymore? &lt;/p&gt;

&lt;p&gt;It isn't like they made it so you can Tab to the next item in the menu itself, so they effectively just removed functionality for no reason.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#and-why-cant-they-follow-simple-patterns-for-keyboard-controls"&gt;
  &lt;/a&gt;
  And why can't they follow simple patterns for keyboard controls?
&lt;/h5&gt;

&lt;p&gt;Then there is the cycling of items in the menu. &lt;/p&gt;

&lt;p&gt;If I press the up arrow when the menu opens (or when I have the first item in the list highlighted) it should go to the last item in the list. &lt;strong&gt;It doesn't.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Same with if you are on the last item in the list and press the down arrow, it should cycle to the first item. &lt;strong&gt;It doesn't&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or what about the fact that you should be able to jump to items based on their first letter. &lt;/p&gt;

&lt;p&gt;I press d it jumps to "duplicate"...as expected. I press d again and - it does nothing. It should jump to "delete". &lt;strong&gt;It doesn't&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That last one is even more painful as they "half arsed" the solution. You don't &lt;strong&gt;have&lt;/strong&gt; to have this feature but they decided to implement it as it is recommended. But their incorrect implementation can cause massive confusion if the menu is dynamic. &lt;/p&gt;

&lt;p&gt;For example: if "delete" is sometimes disabled (as it isn't applicable at that time) I might press d a couple of times, find it doesn't cycle to delete as expected and think "oh, I obviously can't delete this item". &lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#waiaria-is-not-a-fix-for-everything-in-fact-it-is-a-last-resort"&gt;
  &lt;/a&gt;
  WAI-ARIA is not a fix for everything, in fact it is a last resort!
&lt;/h5&gt;

&lt;p&gt;Finally, because of their massive over-reliance on WAI-ARIA to correct their crappy HTML this is likely to not be particularly &lt;strong&gt;Robust&lt;/strong&gt;, which is what R stands for in the &lt;a href="https://uiowa.instructure.com/courses/40/pages/accessibility-principles-pour"&gt;WCAG principles known as POUR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.powermapper.com/tests/screen-readers/aria/"&gt;WAI-ARIA is like CSS - it isn't universally supported&lt;/a&gt;, and &lt;a href="https://a11ysupport.io/"&gt;there are loads of compatibility issues&lt;/a&gt;, so you need to use it with graceful degradation in mind. &lt;/p&gt;

&lt;p&gt;But hey, that is just one component, maybe we can do better with some of the others.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#listbox-select"&gt;
  &lt;/a&gt;
  Listbox (select)
&lt;/h3&gt;

&lt;p&gt;Ah they can't possibly get this one wrong.&lt;/p&gt;

&lt;p&gt;I mean, other than the fact that you can press Space to select an item, which is really weird (because they used &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements that accept both space and enter to activate them) I can't spot many new issues we hadn't seen previously.&lt;/p&gt;

&lt;p&gt;Obviously they treat it like a modal again, disabling Tab for no reason.&lt;/p&gt;

&lt;p&gt;Oh and I can't just change options using the arrow keys like I should be able to, pressing up or down opens the list (which is fine if you can tab out of the list and it remembers what item you had used the arrows to get to) but they have that annoying Tab issue, so I have to press Enter or Space to close the list before I can move on.&lt;/p&gt;

&lt;p&gt;You know what - it is passable, I will put the angry man away for a minute as I have seen far worse attempts.&lt;/p&gt;

&lt;p&gt;However - if you can, for one second, imagine coping with your design not being pixel perfect do you know what is &lt;em&gt;even&lt;/em&gt; better than their implementation...a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element. It...just...works. &lt;/p&gt;

&lt;p&gt;Hell I blame browser vendors for this one, if they just added the option to style the drop-down part hardly anybody would be trying to build their own!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#other-components"&gt;
  &lt;/a&gt;
  Other components
&lt;/h3&gt;

&lt;p&gt;Look I am already exhausted, I have already made my point. &lt;/p&gt;

&lt;p&gt;But because I know the Tailwind zealots are going to want to defend their precious cult, let me just list a few more issues in short hand to drive the message home:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#switch-toggle"&gt;
  &lt;/a&gt;
  Switch (toggle)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://scottaohara.github.io/a11y_styled_form_controls/src/checkbox--switch/#affects_on_sr"&gt;&lt;code&gt;role="switch"&lt;/code&gt; only has about 80% support&lt;/a&gt; - which would be fine but they start building the component from a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; (why, WHY! I tell you why - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Switch_role"&gt;even MDN uses a fucking button as the base for a switch&lt;/a&gt;). Using a &lt;code&gt;checkbox&lt;/code&gt; would be a better base.&lt;/p&gt;

&lt;p&gt;Also - by using a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; as the base how do they expect you to add an associated &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; that is visible? If the switch &lt;code&gt;role&lt;/code&gt; is supported you can use &lt;code&gt;for="idofswitch"&lt;/code&gt; but if it isn't supported, this association doesn't work. &lt;/p&gt;

&lt;p&gt;Screen readers might handle this quite well but Dragon Naturally Speaking (which a lot of people rely on) &lt;a href="https://a11ysupport.io/tech/html/label_element"&gt;can't even handle correctly marked up semantic &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; elements&lt;/a&gt; - it really won't stand a chance with this pattern.&lt;/p&gt;

&lt;p&gt;Anyway, we could always add some visually hidden (screen reader only) text to the button I suppose.&lt;/p&gt;

&lt;p&gt;Obviously you still need a visible label, but you could just add text above the switch to solve that couldn't you?&lt;/p&gt;

&lt;p&gt;Well you could, but then what happens when someone who needs a larger tap target (i.e. someone with Cerebral Palsy or Parkinson's disease who may have accuracy issues) tries to click on the "label" to activate the control. &lt;/p&gt;

&lt;p&gt;In case you were wondering, that is expected behaviour, clicking a label checks a checkbox and a switch is essentially just a fancy checkbox...ah who cares, there are only a few &lt;strong&gt;million&lt;/strong&gt; people with conditions that cause accuracy issues who rely on good design in the world, we can ignore them.&lt;/p&gt;

&lt;p&gt;But it also helps with WCAG compliance. The headless-UI toggle example does not comply with &lt;a href="https://www.w3.org/WAI/WCAG21/Understanding/target-size.html"&gt;tap target size requirements of 44 css pixels&lt;/a&gt; (it is close though at 38px tall) - but as that is a styling issue I also can't dock any points. &lt;/p&gt;

&lt;p&gt;However if it had a properly associated label, that can be included in the tap target area and their example would be fine. &lt;/p&gt;

&lt;p&gt;But they used a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, so it won't work properly without WAI-ARIA..it is a shame, they were so close to not fucking this one up!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#disclosure-component"&gt;
  &lt;/a&gt;
  Disclosure component
&lt;/h4&gt;

&lt;p&gt;I mean, most would call this an accordion but hey, who am I to judge on naming components, let's call it "magic expandy thingy" from now on. I don't want things to be clear for anyone.&lt;/p&gt;

&lt;p&gt;So with the "Magic Expandy Thingy (MET)" they have used buttons and all sorts of crap...I haven't even looked if they have done that correctly...I really can't be arsed.&lt;/p&gt;

&lt;p&gt;Why? &lt;/p&gt;

&lt;p&gt;Well because we have this fantastic, super modern technology called HTML5. Don't worry if you haven't come across HTML5 before, it only came out in 2008, it is still quite new!&lt;/p&gt;

&lt;p&gt;In the HTML 5 spec are a super secret pair of elements. &lt;/p&gt;

&lt;p&gt;So secret that they cleverly hid them as the &lt;a href="https://www.w3.org/TR/html52/interactive-elements.html#interactive-elements"&gt;first item mentioned under Interactive Elements section&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Nobody could possibly find them!&lt;/p&gt;

&lt;p&gt;These secret elements are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary"&gt;&lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;&lt;/a&gt;. I mean, to be fair to headless-UI, MDN call the summary element the "HTML Disclosure Summary element" - so perhaps their naming of the pattern was based on that? But then that would mean they know about the elements...and chose to ignore them...ah forget it, I can't work out what they are thinking!&lt;/p&gt;

&lt;p&gt;Here - try it for yourself, I am sick of explaining things to you, no CSS, no JS and it just works (unlike the liquid tag for this fiddle it seems, can somebody see what is wrong with it, it was working before I made a minor edit &lt;strong&gt;see the comment after the article for the fiddle&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;{% jsfiddle &lt;a href="https://jsfiddle.net/8pt23eLy"&gt;https://jsfiddle.net/8pt23eLy&lt;/a&gt; result html %}&lt;/p&gt;

&lt;p&gt;Now if you want to go and add your 47 utility classes to that - you can, &lt;a href="https://caniuse.com/details"&gt;&lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; will work in 96.6% of browsers&lt;/a&gt; and even degrade gracefully in IE (not that it matters, if you think headless-UI is accessible you won't support IE anyway, probably saying things like: "it's End Of Life (EOL) bro"...so who gives a shit?)&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#dialog-modal"&gt;
  &lt;/a&gt;
  Dialog (modal)
&lt;/h4&gt;

&lt;p&gt;Oh I am excited to see this one. I mean just read the blurb on the site:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A fully-managed, renderless dialog component &lt;strong&gt;jam-packed with accessibility and keyboard features&lt;/strong&gt;, perfect for building completely custom modal and dialog windows for your next application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is "Jam-packed" with accessibility and keyboard features, exciting!&lt;/p&gt;

&lt;p&gt;Ok so when the modal is open it applies &lt;code&gt;aria-hidden="true"&lt;/code&gt; to all other content on the page right? It adds &lt;code&gt;tabindex="-1"&lt;/code&gt; to all other interactive elements on the page so they are inactive right?&lt;/p&gt;

&lt;p&gt;Does it fuck.&lt;/p&gt;

&lt;p&gt;You see they think that keyboard users only use Tab. &lt;/p&gt;

&lt;p&gt;They haven't even laid eyes on a screen reader, never mind used one.&lt;/p&gt;

&lt;p&gt;In a screen reader you don't navigate with Tab, you navigate with arrow keys, the numbers 1-6 (to jump to headings), k (to cycle through links) etc. etc. &lt;/p&gt;

&lt;p&gt;Their modal traps focus to the same level of success as the rest of their "accessible" library - it doesn't, it isn't, they failed. I can get to everything on the page with a screen reader and not even know that there is a modal. &lt;/p&gt;

&lt;p&gt;I didn't even take the time to see if this returns focus to the button that activated it when it is closed, someone please tell me they at least implemented that?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#radio-group"&gt;
  &lt;/a&gt;
  Radio Group
&lt;/h4&gt;

&lt;p&gt;Yeah I know, I skipped "popover" - couldn't even be bothered as it is essentially the same as a modal so all the same problems will be there. So I moved onto radio group.&lt;/p&gt;

&lt;p&gt;I can't even be bothered here either to be fair as the first thing I saw was &lt;code&gt;&amp;lt;div role="radio"&lt;/code&gt;. Honestly what is wrong with using a &lt;strong&gt;fucking &lt;code&gt;&amp;lt;input type="radio"&lt;/code&gt; for a fucking radio group&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That is it, I am done, fanito, finished...headless-UI is obviously written by a load of fucking amateurs.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Yet again, the anger is for fun. &lt;/p&gt;

&lt;p&gt;In reality the headless-UI library does a better job than a lot of libraries when it comes to accessibility, and I applaud any company who is at least &lt;em&gt;trying&lt;/em&gt; to make things accessible. &lt;/p&gt;

&lt;p&gt;And to further defend them half of the issues they have are because guidance is just a mess.&lt;/p&gt;

&lt;p&gt;I just get annoyed with the "fully accessible" crap they keep saying. &lt;/p&gt;

&lt;p&gt;I understand that in marketing "bigging yourself up" is essential, but this is too far and is misleading people.&lt;/p&gt;

&lt;p&gt;If they just said "accessibility focused" library I would think "Yeah, not a bad job, few issues, but on the right track at least".&lt;/p&gt;

&lt;p&gt;But no, they are leading developers into thinking that they can just drag and drop their components into their application and they will be WCAG compliant. That people with disabilities will be able to use their website without any issues. &lt;strong&gt;They won't&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you take anything away from this article, don't believe the crap that companies feed you.&lt;/p&gt;

&lt;p&gt;Research it yourself, question everything (including questioning me, a couple of issues in this article are really minor, that is the problem with angry rants, it is hard to judge where the big problems are rather than minor ones). &lt;/p&gt;

&lt;p&gt;And that isn't just headless-UI, there are a lot of these "accessible" libraries and templates that...aren't!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#would-you-use-headlessui-though-after-all-that-putting-your-nonangry-head-on"&gt;
  &lt;/a&gt;
  Would you use headless-ui though after all that, putting your "non-angry head" on?
&lt;/h3&gt;

&lt;p&gt;No, I wouldn't use it personally (at time of writing) and no that isn't because I am on the "not a TailWind fan" side of the fence. &lt;/p&gt;

&lt;p&gt;They don't use semantically correct HTML as the base and if you want an accessible library - you gotta start with the basics (using the right native elements for the job) and progressively enhance them.&lt;/p&gt;

&lt;p&gt;With that being said, the real question is:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#if-i-know-nothing-about-accessibility-should-i-use-it"&gt;
  &lt;/a&gt;
  "If &lt;strong&gt;I&lt;/strong&gt; know nothing about accessibility, should &lt;strong&gt;I&lt;/strong&gt; use it".
&lt;/h3&gt;

&lt;p&gt;I would actually say yes üò≤, it will be more accessible than something you try and build yourself (for everything other than the "disclosure" item, just use &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; as I said - they dropped the ball with that one!).&lt;/p&gt;

&lt;p&gt;Just don't go advocating for it's use like it is perfect! &lt;/p&gt;

&lt;p&gt;And if you aren't looking for a quick fix and actually want to make your site "a great experience for people who rely on assistive technology" rather than "compliant with WCAG" then there are much better options.&lt;/p&gt;

&lt;p&gt;Don't worry, there are plenty more rants left in me that will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;little known libraries that do a much better job on accessibility. &lt;/li&gt;
&lt;li&gt;a rant or two on the difference between a compliance mindset and a great experience mindset when thinking about accessibility. &lt;/li&gt;
&lt;li&gt;rants on individual components such as custom select, checkbox and radio, menus etc. wherever I see terrible examples getting lots of upvotes, a rant will emerge I have no doubt ü§£.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Give me a follow for that (and some more serious tutorial style posts and proper discussions on things....all coming soon!)&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And finally, I will happily return to this article if they improve things and change my opinion!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-the-algo"&gt;
  &lt;/a&gt;
  For the Algo!
&lt;/h2&gt;

&lt;p&gt;My new sign off experiment! &lt;/p&gt;

&lt;p&gt;If you enjoyed this article, give it a ‚ù§, if you thought it was special give it a ü¶Ñ and above all, don't forget:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Leave a comment for the algorithm! Even if it is just to tell me to stop being so angry üòâ! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh and if you are a Tailwind evangelist...sorry that I attacked your religion, you will be OK don't worry! Leave a comment defending it by all means!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
  </channel>
</rss>
