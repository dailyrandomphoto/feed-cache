<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Python Cheatsheet </title>
      <author>Mohit Tanwani⚡</author>
      <pubDate>Thu, 15 Jul 2021 19:24:53 +0000</pubDate>
      <link>https://dev.to/tanwanimohit/python-cheatsheet-25a3</link>
      <guid>https://dev.to/tanwanimohit/python-cheatsheet-25a3</guid>
      <description>&lt;p&gt;Cheatsheets are good when you want to revise some of the concepts, but an idle way to start learning &lt;br&gt;&lt;br&gt;
I would recommend you to learn in depth from this course: &lt;a href="https://www.udemy.com/course/complete-python-bootcamp/"&gt;Udemy Course&lt;/a&gt;&lt;br&gt;
&lt;br&gt;If you can self learn Repository: &lt;a href="https://github.com/Pierian-Data/Complete-Python-3-Bootcamp"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#python-cheatsheet"&gt;Python Cheatsheet&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#index"&gt;Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#theory"&gt;Theory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vscode-extension"&gt;VSCODE extension:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#making-a-virtual-env"&gt;Making a virtual env:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-virtual-env"&gt;Why Virtual env?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments-in-python"&gt;Comments in python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data-types"&gt;Data Types:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#naming-conventions"&gt;Naming conventions:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#printing-in-python"&gt;Printing in Python:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#numbers-in-python"&gt;Numbers in Python:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-with-variables"&gt;Using with variables:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variables-makes-it-easy-to-understands-the-code"&gt;Variables makes it easy to understands the code.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strings-in-python"&gt;Strings in Python:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-directly-with-print"&gt;Using directly with print:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#taking-input"&gt;Taking Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use--instead-of--this-will-auto-seprate-them-by-spaces"&gt;Use &lt;code&gt;,&lt;/code&gt; instead of &lt;code&gt;+&lt;/code&gt; This will auto seprate them by spaces.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#escape-characters-in-python"&gt;Escape characters in python:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#check-the-length-of-string"&gt;Check the length of string:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string-indexing"&gt;String indexing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string-slicing"&gt;String Slicing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string-methods"&gt;String methods:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#formatting-strings"&gt;Formatting strings:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string-print-alignment"&gt;String Print alignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lists-in-python"&gt;Lists in Python:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-usage"&gt;Basic Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#concat"&gt;Concat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#append-the-list"&gt;Append the list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#poping-objs"&gt;Poping objs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sorting"&gt;Sorting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverse"&gt;Reverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nested-list"&gt;Nested list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dictionaries-in-python"&gt;Dictionaries in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-usage-1"&gt;Basic Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tuples-in-python"&gt;Tuples in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-usage-2"&gt;Basic Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sets-in-python"&gt;Sets in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#convert-list-to-set"&gt;Convert list to set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#file-io-with-python"&gt;File IO with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#init-file-obj"&gt;init file obj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-contents"&gt;read contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#move-the-cursorpointer"&gt;move the cursor/pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-line-by-line"&gt;read line by line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#close-the-file"&gt;close the file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-context-manager"&gt;Using context manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#different-modes-for-file"&gt;different modes for file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chaining-comparison-operators"&gt;Chaining comparison operators:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-statements"&gt;Python Statements:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-elif-else"&gt;if, elif, else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#for-loops"&gt;for loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#white-loops"&gt;white loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#statement-in-python"&gt;Statement in python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#some-useful-operators"&gt;Some useful operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#range"&gt;range()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enumerate"&gt;enumerate()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zip"&gt;zip()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-operator"&gt;in operator:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#min-and-max"&gt;min and max:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#list-comprehensions"&gt;List Comprehensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#help-function-in-python"&gt;help function in python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions-in-python"&gt;Functions in python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-function-with-argument-and-default-value"&gt;Basic function with argument and default value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#args-and-kwargs"&gt;*args and **kwargs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lamda-filter-and-map"&gt;lamda, filter and map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classes-in-python"&gt;Classes in python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-implementation"&gt;Basic implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inheritance"&gt;Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#polymorphism"&gt;Polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-special-methods"&gt;Using Special methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exception-handling"&gt;Exception Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#try-except-finally-and-else"&gt;try, except, finally, and else.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decorators"&gt;Decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#generators"&gt;Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useful-python-modules-you-should-look"&gt;Useful Python modules you should look.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#working-with-csvs-in-python"&gt;Working with CSVs in python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#working-with-pdfs-in-python"&gt;Working with pdfs in python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sending-emails-with-python"&gt;Sending Emails with python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#theory"&gt;
  &lt;/a&gt;
  Theory
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python is a scripting language.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scripting vs Compiled ?&lt;/strong&gt; - Language like c++/java's code needs to compiled by its compiler, after compilation it is just machine level code.
Where as in a scripting language its interpreter will be run the code one the spot one line at a time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#vscode-extension"&gt;
  &lt;/a&gt;
  VSCODE extension:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Python for vscode&lt;/li&gt;
&lt;li&gt;Magic Python&lt;/li&gt;
&lt;li&gt;Arepl&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#making-a-virtual-env"&gt;
  &lt;/a&gt;
  Making a virtual env:
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#why-virtual-env"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Virtual env?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Because managing python dependencies is a mess, this will install dependencies for that project only instead of globally.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;python -m venv venv&lt;/code&gt; this will create a venv folder in your directory.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;source ./venv/bin/activate&lt;/code&gt; this will activate this virtual env.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#comments-in-python"&gt;
  &lt;/a&gt;
  Comments in python
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;single line use &lt;code&gt;#&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# single line comments
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;multiline use &lt;code&gt;'''&lt;/code&gt;. often called as docstring, as it is just to document function/classes.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;'''
This is a example of 
Multiline comment.
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;int # Whole Numbers&lt;/li&gt;
&lt;li&gt;float # Number with decimals.&lt;/li&gt;
&lt;li&gt;str # String&lt;/li&gt;
&lt;li&gt;list # ordered sequence of object&lt;/li&gt;
&lt;li&gt;dict # unordered key-value pairs.&lt;/li&gt;
&lt;li&gt;tup # ordered immutable seq. of objects.&lt;/li&gt;
&lt;li&gt;set # Unordered collection of unique objs.&lt;/li&gt;
&lt;li&gt;bool # Logical value True / False.&lt;/li&gt;
&lt;li&gt;None # no value&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#naming-conventions"&gt;
  &lt;/a&gt;
  Naming conventions:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use underscore for variables.&lt;/li&gt;
&lt;li&gt;variables cannot Start with a number.&lt;/li&gt;
&lt;li&gt;Avoid special meaning keywords.&lt;/li&gt;
&lt;li&gt;Use snake case for functions.&lt;/li&gt;
&lt;li&gt;Use CamelCase for Classes names.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#printing-in-python"&gt;
  &lt;/a&gt;
  Printing in Python:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#numbers-in-python"&gt;
  &lt;/a&gt;
  Numbers in Python:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Addition
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Subtraction
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Multiplication
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Division
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Mod.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Power
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Using Braces.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#using-with-variables"&gt;
  &lt;/a&gt;
  Using with variables:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# TO check the type:
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#variables-makes-it-easy-to-understands-the-code"&gt;
  &lt;/a&gt;
  Variables makes it easy to understands the code.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_income&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;tax_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="n"&gt;my_taxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_income&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tax_rate&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"My income tax is"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;my_taxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#strings-in-python"&gt;
  &lt;/a&gt;
  Strings in Python:
&lt;/h2&gt;

&lt;p&gt;String is nothing but ordered seq. of characters.&lt;br&gt;
Note: Strings are immutable&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-directly-with-print"&gt;
  &lt;/a&gt;
  Using directly with print:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Simple String"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add quotes inside the  "string" by using single quote.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"concat string "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"like this"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#taking-input"&gt;
  &lt;/a&gt;
  Taking Input
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter your name: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#use-raw-endraw-instead-of-raw-endraw-this-will-auto-seprate-them-by-spaces"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;,&lt;/code&gt; instead of &lt;code&gt;+&lt;/code&gt; This will auto seprate them by spaces.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#escape-characters-in-python"&gt;
  &lt;/a&gt;
  Escape characters in python:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;World"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# or
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"""
 ---
Hello
world&lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;Yeahh!!
"Quotes"
'Single quote'
 ---
"""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#check-the-length-of-string"&gt;
  &lt;/a&gt;
  Check the length of string:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hey"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#string-indexing"&gt;
  &lt;/a&gt;
  String indexing
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Will&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#string-slicing"&gt;
  &lt;/a&gt;
  String Slicing
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Start from 0th index till 2(excluding)
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Step will be 2.
# We can use this to print a string backwards
&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#string-methods"&gt;
  &lt;/a&gt;
  String methods:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Multiply Strings
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'H'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Upper Case a string
&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Lower case
&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Splitting
&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'W'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# split via whitespace.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#formatting-strings"&gt;
  &lt;/a&gt;
  Formatting strings:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.format()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f""&lt;/code&gt; F-string
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'The {2} {1} {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'fox'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'brown'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'quick'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'First Object: {a}, Second Object: {b}, Third Object: {c}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;12.3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;23.45&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"My 10 character, four decimal number is:{0:10.4f}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"My 10 character, four decimal number is:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;10.4&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#string-print-alignment"&gt;
  &lt;/a&gt;
  String Print alignment
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;left_alignment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Left Text"&lt;/span&gt;
&lt;span class="n"&gt;center_alignment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Centered Text"&lt;/span&gt;
&lt;span class="n"&gt;right_alignment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Right Text"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;left_alignment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;center_alignment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;right_alignment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;More&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pyformat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lists-in-python"&gt;
  &lt;/a&gt;
  Lists in Python:
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#basic-usage"&gt;
  &lt;/a&gt;
  Basic Usage
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Supports dynamic types, as it is python :)
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Mohit"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# len(my_list) for length
# Change objs:
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Slicing is same as String slicing&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#concat"&gt;
  &lt;/a&gt;
  Concat
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#append-the-list"&gt;
  &lt;/a&gt;
  Append the list
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#poping-objs"&gt;
  &lt;/a&gt;
  Poping objs
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# default index is -1, returns popped element.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#sorting"&gt;
  &lt;/a&gt;
  Sorting
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# in-place sort, it will modify the list, returns None
# Tip: use sorted(a) it will return the value instead of in-place
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#reverse"&gt;
  &lt;/a&gt;
  Reverse
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# also in-place
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#nested-list"&gt;
  &lt;/a&gt;
  Nested list
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,]]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Returns 5.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#dictionaries-in-python"&gt;
  &lt;/a&gt;
  Dictionaries in Python
&lt;/h2&gt;

&lt;p&gt;Unordered key-value mappings, basically you can have custom keys&lt;br&gt;
Think it like, you can use this to make dynamic variables, where key will be the variable name.&lt;br&gt;
Like list value can be any data type.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-usage"&gt;
  &lt;/a&gt;
  Basic Usage
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;20.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# get keys
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# get values
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# get items, return tuples with keys and values
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Pop the object
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# Clear All
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"banana"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# it will check if it is present, return None if not.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__contains__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Returns true/false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tuples-in-python"&gt;
  &lt;/a&gt;
  Tuples in Python
&lt;/h2&gt;

&lt;p&gt;Same as list, but immutable.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-usage"&gt;
  &lt;/a&gt;
  Basic Usage
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Interesting Fact: tuple supports only two methods:
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This can be use with list as well.
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This can be use with list as well.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#sets-in-python"&gt;
  &lt;/a&gt;
  Sets in Python
&lt;/h2&gt;

&lt;p&gt;Sets are an unordered collection of unique elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# {1}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#convert-list-to-set"&gt;
  &lt;/a&gt;
  Convert list to set
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#file-io-with-python"&gt;
  &lt;/a&gt;
  File IO with Python
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#init-file-obj"&gt;
  &lt;/a&gt;
  init file obj
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-contents"&gt;
  &lt;/a&gt;
  read contents
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#move-the-cursorpointer"&gt;
  &lt;/a&gt;
  move the cursor/pointer
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-line-by-line"&gt;
  &lt;/a&gt;
  read line by line
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# returns list of lines.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#close-the-file"&gt;
  &lt;/a&gt;
  close the file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-context-manager"&gt;
  &lt;/a&gt;
  Using context manager
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#different-modes-for-file"&gt;
  &lt;/a&gt;
  different modes for file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;r&lt;/code&gt;: Read&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;r+&lt;/code&gt;: Read and Write&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w&lt;/code&gt;: Write (will override the file)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w+&lt;/code&gt;: Write + Read (will override the file)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;a&lt;/code&gt;: Append the file&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#chaining-comparison-operators"&gt;
  &lt;/a&gt;
  Chaining comparison operators:
&lt;/h2&gt;

&lt;p&gt;To chain &lt;code&gt;==, != &amp;lt;, &amp;gt;, &amp;gt;=, &amp;lt;= and is&lt;/code&gt; these operators, we have these logical operators&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;and&lt;/li&gt;
&lt;li&gt;or&lt;/li&gt;
&lt;li&gt;not
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I am inevitable"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s"&gt;"world"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;"india"&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s"&gt;"country"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Yeah!!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Tough luck!"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-statements"&gt;
  &lt;/a&gt;
  Python Statements:
&lt;/h2&gt;

&lt;p&gt;Indentation is &lt;strong&gt;important&lt;/strong&gt; in the python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-elif-else"&gt;
  &lt;/a&gt;
  if, elif, else
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Bank'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'Auto Shop'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Welcome to the Auto Shop!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'Bank'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Welcome to the bank!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Where are you?'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-loops"&gt;
  &lt;/a&gt;
  for loops
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# iterate list/string/tuple
&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# extraction made easy
&lt;/span&gt;&lt;span class="n"&gt;list2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Same as dict. t1 will be key, t2 will be value.
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# will print 2,6,10
# Protip about dict: use .value() and .keys() for looping Values/keys.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#white-loops"&gt;
  &lt;/a&gt;
  white loops
&lt;/h3&gt;

&lt;p&gt;in python we can use python with else statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"x is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Uhhoo! x &amp;gt; 3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#statement-in-python"&gt;
  &lt;/a&gt;
  Statement in python
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;break&lt;/strong&gt;: Breaks out of the current closest enclosing loop.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;continue&lt;/strong&gt;: Goes to the top of the closest enclosing loop.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;pass&lt;/strong&gt;: Does nothing at all, Programmers use this for placeholder.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;future_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Todo: implement it later.
&lt;/span&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#omit
&lt;/span&gt;        &lt;span class="k"&gt;continue&lt;/span&gt; 
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-useful-operators"&gt;
  &lt;/a&gt;
  Some useful operators
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#range"&gt;
  &lt;/a&gt;
  range()
&lt;/h3&gt;

&lt;p&gt;range is a generator.&lt;br&gt;
&lt;br&gt; &lt;strong&gt;Syntax&lt;/strong&gt;: &lt;code&gt;range(start,end,step)&lt;/code&gt;&lt;br&gt;
&lt;br&gt; &lt;br&gt;
Use directly with loops for iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# returns 0,2,4,..10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#enumerate"&gt;
  &lt;/a&gt;
  enumerate()
&lt;/h3&gt;

&lt;p&gt;with help of this we can keep track of index and value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#zip"&gt;
  &lt;/a&gt;
  zip()
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-operator"&gt;
  &lt;/a&gt;
  in operator:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#min-and-max"&gt;
  &lt;/a&gt;
  min and max:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 1
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-comprehensions"&gt;
  &lt;/a&gt;
  List Comprehensions
&lt;/h2&gt;

&lt;p&gt;Quicker and unique way to create lists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Grab every letter in string
&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;'word'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Square numbers in range and turn into list
&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# Check for even numbers in a range
&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#help-function-in-python"&gt;
  &lt;/a&gt;
  help function in python
&lt;/h2&gt;

&lt;p&gt;if you are lazy like me, want to learn documentation about specific inbuilt method via terminal, you can use help()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# will print info about this method
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions-in-python"&gt;
  &lt;/a&gt;
  Functions in python
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic-function-with-argument-and-default-value"&gt;
  &lt;/a&gt;
  Basic function with argument and default value
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# def keyword to define functions.
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# or return f"Hello {name}!" if you want to return it.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#args-and-kwargs"&gt;
  &lt;/a&gt;
  *args and **kwargs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;*args&lt;/code&gt;: N number of arguments, returns tuple.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;**kwargs&lt;/code&gt;: N number of keyword arguments, returns dict.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total_income&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Income for month, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'month'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;total_income&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"July"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lamda-filter-and-map"&gt;
  &lt;/a&gt;
  lamda, filter and map
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#map
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;my_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;my_nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1, 4, 9, 16, 25
&lt;/span&gt;
&lt;span class="c1"&gt;# filter
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_even&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 0, 2, 4, 6, 8, 10
&lt;/span&gt;
&lt;span class="c1"&gt;# lets convert each of the above function to lambda.
&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;my_nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes-in-python"&gt;
  &lt;/a&gt;
  Classes in python
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic-implementation"&gt;
  &lt;/a&gt;
  Basic implementation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;

    &lt;span class="c1"&gt;# Circle gets instantiated with a radius (default is 1)
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;

    &lt;span class="c1"&gt;# Method for resetting Radius
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_radius&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_radius&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;new_radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;

    &lt;span class="c1"&gt;# Method for getting Circumference
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getCircumference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;


&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Radius is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Area is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Circumference is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCircumference&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Animal created"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;whoAmI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Animal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Eating"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dog created"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;whoAmI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Woof!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#polymorphism"&gt;
  &lt;/a&gt;
  Polymorphism
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="c1"&gt;# Constructor of the class
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# Abstract method, defined by convention only
&lt;/span&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subclass must implement abstract method"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;' says Woof!'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;' says Meow!'&lt;/span&gt;

&lt;span class="n"&gt;fido&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Fido'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;isis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Isis'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fido&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-special-methods"&gt;
  &lt;/a&gt;
  Using Special methods
&lt;/h3&gt;

&lt;p&gt;Just like &lt;code&gt;__init__&lt;/code&gt; we have more special methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A book is created"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Title: %s, author: %s, pages: %s"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A book is destroyed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Python Rocks!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Jose Portilla"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;159&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Special Methods
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exception-handling"&gt;
  &lt;/a&gt;
  Exception Handling
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#try-except-finally-and-else"&gt;
  &lt;/a&gt;
  try, except, finally, and else.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;askint&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter an integer: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# You can also expect specific error like TypeError or generic type Exception
&lt;/span&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Looks like you did not enter an integer!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Yep that's an integer!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finally, I executed!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#decorators"&gt;
  &lt;/a&gt;
  Decorators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrap_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Code would be here, before executing the func"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Code here will execute after the func()"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrap_func&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;new_decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_needs_decorator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This function is in need of a Decorator"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func_needs_decorator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Code would be here, before executing the func
# This function is in need of a Decorator
# Code here will execute after the func()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generators"&gt;
  &lt;/a&gt;
  Generators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Without generator
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_me_cubes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;output_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;output_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output_list&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_me_cubes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# With generator
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_cubes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generate_cubes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-python-modules-you-should-look"&gt;
  &lt;/a&gt;
  Useful Python modules you should look.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;os&lt;/li&gt;
&lt;li&gt;shutil&lt;/li&gt;
&lt;li&gt;datetime&lt;/li&gt;
&lt;li&gt;math&lt;/li&gt;
&lt;li&gt;random&lt;/li&gt;
&lt;li&gt;pdb&lt;/li&gt;
&lt;li&gt;re&lt;/li&gt;
&lt;li&gt;timeit&lt;/li&gt;
&lt;li&gt;zipfile&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#working-with-csvs-in-python"&gt;
  &lt;/a&gt;
  Working with CSVs in python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# don't forget to install csv
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'example.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# passing encoding is important otherwise you will get the Unicode error.
&lt;/span&gt;&lt;span class="n"&gt;csv_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# reading
&lt;/span&gt;&lt;span class="n"&gt;data_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# writing 
&lt;/span&gt;&lt;span class="n"&gt;file_to_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'to_save_file.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# use 'a' for append
&lt;/span&gt;&lt;span class="n"&gt;csv_writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_to_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;csv_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;file_to_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-pdfs-in-python"&gt;
  &lt;/a&gt;
  Working with pdfs in python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# don't forget to use PyPDF2
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;PyPDF2&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Working_Business_Proposal.pdf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# we need to pass rb for binary files.
&lt;/span&gt;&lt;span class="n"&gt;pdf_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;pdf_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyPDF2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfFileReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdf_reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numPages&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdf_reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pdf_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extractText&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sending-emails-with-python"&gt;
  &lt;/a&gt;
  Sending Emails with python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="n"&gt;smtp_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'smtp.gmail.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"youremail@email.com"&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"yourpassword"&lt;/span&gt;
&lt;span class="c1"&gt;# Tip: search about how you generate app passwords.
&lt;/span&gt;&lt;span class="n"&gt;smtp_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;from_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"fromemail@email.com"&lt;/span&gt;
&lt;span class="n"&gt;to_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"toemail@email.com"&lt;/span&gt;
&lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Subject"&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Message"&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Subject: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="n"&gt;smtp_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;smtp_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>cheatsheet</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is the spread operator in javascript?</title>
      <author>Code_Jedi</author>
      <pubDate>Thu, 15 Jul 2021 19:14:09 +0000</pubDate>
      <link>https://dev.to/code_jedi/what-is-the-spread-operator-in-javascript-e91</link>
      <guid>https://dev.to/code_jedi/what-is-the-spread-operator-in-javascript-e91</guid>
      <description>&lt;h4&gt;
  &lt;a href="#the-spread-operator-in-javascript-is-useful-for-adding-elements-to-an-array-combining-arrays-and-more"&gt;
  &lt;/a&gt;
  The spread operator in JavaScript is useful for adding elements to an array, combining arrays and more!
&lt;/h4&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr1 = [1,2,3]; 
let arr2 = [4,5]; 
let arr3 = [...arr1,...arr2]; 
console.log(arr3);
// Output: [ 1, 2, 3, 4, 5 ] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the spread operator(represented as "...") was able to combine "arr1" and "arr2" into "arr3".&lt;/p&gt;




&lt;p&gt;The spread operator can also expand arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr = ["a","b"]; 
let arr2 = [...arr,"c","d"]; 
console.log(arr2); 
// Output: ["a", "b", "c", "d"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the spread operator here was able to add elements "c" and "d" to "arr", thus creating a bigger array.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#but-thats-not-all"&gt;
  &lt;/a&gt;
  But that's not all!
&lt;/h4&gt;

&lt;p&gt;The spread operator can also merge objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Person = { 
    name: "Bob", 
    age: 45,
}; 
const ExtraInfo = { 
    country: "Belgium", 
    city: "Brussels", 
}; 
const user = {... Person, ... ExtraInfo};
// Output: {  name: "Bob",  age: 45, country: "Belgium", city: "Brussels" }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#there-it-is-the-javascript-spread-operator"&gt;
  &lt;/a&gt;
  There it is, the javascript spread operator.
&lt;/h4&gt;




&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#get-the-hottest-programming-stuff-of-the-week-in-your-inbox-every-friday-via-my-newsletter"&gt;
  &lt;/a&gt;
  Get the hottest programming stuff of the week in your inbox every Friday via &lt;a href="https://codejedi.substack.com/welcome"&gt;my newsletter&lt;/a&gt;!
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Byeeeee👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>todayilearned</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Limits of Automation w/ Judy Johnson</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 15 Jul 2021 18:53:31 +0000</pubDate>
      <link>https://dev.to/linearb/the-limits-of-automation-w-judy-johnson-1j5</link>
      <guid>https://dev.to/linearb/the-limits-of-automation-w-judy-johnson-1j5</guid>
      <description>&lt;p&gt;Automation is key when it comes to scaling your engineering efforts, but can you automate yourself out of a job? &lt;/p&gt;

&lt;p&gt;On this week’s episode of &lt;a href="https://devinterrupted.com/podcast/automation-limitations/"&gt;Dev Interrupted&lt;/a&gt; we bring in Judy Johnson, a software engineer, to answer questions about what should and should not be automated, and how to convince your business to take on the upfront cost of an automation initiative.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5BVaEdZ3Cqrjd7nsyLL64p"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What shouldn’t you automate?&lt;/li&gt;
&lt;li&gt;Can you automate yourself out of a job?&lt;/li&gt;
&lt;li&gt;How has automation evolved over recent decades?&lt;/li&gt;
&lt;li&gt;Can you automate security?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>automation</category>
      <category>security</category>
      <category>devops</category>
      <category>engineering</category>
    </item>
    <item>
      <title>12 Unique Python Project Ideas for Your Resume</title>
      <author>Abhay Parashar</author>
      <pubDate>Thu, 15 Jul 2021 17:39:17 +0000</pubDate>
      <link>https://dev.to/abhayparashar31/12-unique-python-project-ideas-for-your-resume-4j31</link>
      <guid>https://dev.to/abhayparashar31/12-unique-python-project-ideas-for-your-resume-4j31</guid>
      <description>&lt;p&gt;There are two ways to get a decent job in IT:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With a certificate&lt;/li&gt;
&lt;li&gt;With knowledge and the projects you have built&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my opinion, projects speak louder than certificates. In this article, we are going to see 12 Python project ideas for your resume. Every idea is from a different domain and contains some information about the different projects you can build in it.&lt;/p&gt;

&lt;p&gt;First, remember one thing:&lt;br&gt;
“A project is complete when it starts working for you, rather than you working for it.” — Scott Allen&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-desktop-assistant"&gt;
  &lt;/a&gt;
  1. Desktop Assistant
&lt;/h3&gt;

&lt;p&gt;A desktop assistant can be a good project for your resume. It shows the interviewer how wise you are. You know how to use resources and make something good with them.&lt;br&gt;
You don’t have to be very technical or an advanced Python developer to create one. It can be created with just the help of a few different Python packages.&lt;br&gt;
There are many available in Python that you can use, like Pyttsx3 for reading text, os for adding facilities like playing music or starting an application, Wikipedia for finding answers on the web, and more. Keep one thing in mind: Every package you use must provide a feature to your assistant.&lt;br&gt;
You can even make your assistant more advanced by adding web scraping and automation facilities. Write a script that can scrape Google Search results. You can add this to your script to make it look more advanced.&lt;br&gt;
This project has no end to it. The more features you add, the more professional and useful it becomes.&lt;br&gt;
To get some insight into how all this will work, check out this article.&lt;/p&gt;

&lt;p&gt;Check Out Other 11 Unique Project Ideas By From &lt;a href="https://betterprogramming.pub/12-unique-python-project-ideas-for-your-resume-eb23c77c500a"&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Believe Me You Will Not Regret It.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>CSS Grid Cheat Sheet 🔥</title>
      <author>Mariana Simon</author>
      <pubDate>Thu, 15 Jul 2021 16:39:06 +0000</pubDate>
      <link>https://dev.to/simonpaix/css-grid-cheat-sheet-2ll8</link>
      <guid>https://dev.to/simonpaix/css-grid-cheat-sheet-2ll8</guid>
      <description>&lt;p&gt;Hi dev friends!&lt;/p&gt;

&lt;p&gt;I made this CSS Grid Cheat Sheet that fits on one page. I hope this will help you learn the grid layout. Please let me know what you think of it :)  &lt;/p&gt;

&lt;p&gt;If you want to see more resources like this one and coding tips, you can follow me on &lt;a href="https://twitter.com/simonpaix"&gt;Twitter&lt;/a&gt; 🚀 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X30jomsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/simonpaix/images/blob/main/blog/LearnPine_Grid_CheatSheet.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X30jomsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/simonpaix/images/blob/main/blog/LearnPine_Grid_CheatSheet.png%3Fraw%3Dtrue" alt="learnpine_grid_cheat_sheet"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>EPNS Push Notifications Arrive at DeFi on Oasis.app</title>
      <author>Olumide</author>
      <pubDate>Thu, 15 Jul 2021 16:31:14 +0000</pubDate>
      <link>https://dev.to/shittu_olumide_/epns-push-notifications-arrive-at-defi-on-oasis-app-11im</link>
      <guid>https://dev.to/shittu_olumide_/epns-push-notifications-arrive-at-defi-on-oasis-app-11im</guid>
      <description>&lt;p&gt;Dai is considered among the most reliable stablecoins because the widely circulated coin is both pegged to the US dollar and backed by MakerDAO-approved crypto collateral. Dai can be created by opening Vaults (overcollateralized debt positions) through Oasis.app, which aims to be the most trusted decentralized application to interact with the Maker Protocol and to manage vaults. EPNS is pleased to deepen its exploration of push notification use cases, using Dai by launching a pilot program to provide decentralized push notifications for monitoring Maker Vaults on Oasis.app. Maker Vault owners can now enjoy a trading edge by receiving notifications when a price of an asset goes above or below a certain threshold, changing the collateralization ratio, and then being aware when the Vault risks being liquidated .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maximize-defi-opportunities-with-oasisapp-and-maker-vaults-powered-by-push-notifications"&gt;
  &lt;/a&gt;
  Maximize DeFi Opportunities With Oasis.app and Maker Vaults Powered by Push Notifications
&lt;/h3&gt;

&lt;p&gt;With a market cap surpassing $5 billion, the usage of the Dai stablecoin is growing, particularly in DeFi applications where it is being combined in a multitude of ways with DeFi products to reduce price volatility. Oasis.app is the most trusted way to access the Maker Protocol so anyone can borrow and use Dai anywhere through its simple user interface.&lt;br&gt;
Oasis.app makes it easy to borrow Dai by opening a Maker Vault, a deposit account for MakerDAO’s Dai. After connecting a wallet to Oasis, users can open a Vault, deposit collateral and generate Dai against it. Borrowers can choose from more than 30 crypto collateral sources (e.g., ETH, WBTC, USDT), with more added weekly, and all with their own risk parameters and minimum collateralisation ratios. Oasis connects to more than half a dozen wallets making it easy to collateralize Dai and borrow with no fixed repayment schedules.&lt;/p&gt;

&lt;p&gt;Managing DeFi services, however, involves a lot of checking of different sources and messages from multiple platforms yet no central messaging service exists. One essential element is missing, decentralized push notifications. In order to worry less about what might happen, Oasis.app users are highly dependent on a notification service that would help them to manage their Maker Vaults, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When the Vault might be at risk of liquidation on the next price update due to a sudden price drop&lt;/li&gt;
&lt;li&gt;When the Vault has reached a certain collateralization ratio that you’d like to take a certain action at, either to buy additional collateral, or repay.&lt;/li&gt;
&lt;li&gt;When risk parameters, such as Stability Fee’s or Debt Ceiling changes are made by Maker Governance that affect a Vault you own.
Though Oasis.app simplifies access to the Maker Protocol, the lack of a decentralized push notification service, until now, means important notifications are distributed to multiple places, such as email or a Twitter or Telegram account. A push notification service sending all notifications to the Oasis.app wallet would allow all platform users to receive and take timely action on important DeFi notifications while still protecting data privacy as Oasis.app users interact with internal and external data sources.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Receiving notifications directly within Oasis.app will allow our customers to live a safer and conscious experience, without always worrying about checking different sources. It has always been one of the most asked-for features and that is why this partnership is crucial to us.- Chris Bradbury, CEO of Oasis.app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-epns-solution"&gt;
  &lt;/a&gt;
  The EPNS Solution
&lt;/h2&gt;

&lt;p&gt;The EPNS decentralized push notification service sends timely notifications through a single source of communication, the investor’s wallet. All Maker Vault notifications will go directly to the user’s Oasis.app wallet where they can track vault positions and take immediate action. EPNS is the first native, on-chain notification solution to stream all crucial time-sensitive information to a user’s wallet. The partnership benefits to Oasis.app users include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;EPNS will send all data notifications directly to Oasis.app user wallets.&lt;/li&gt;
&lt;li&gt;The EPNS and Oasis.app teams will adapt the highly customizable EPNS protocol to meet the various push notification needs of Dai users in DeFi markets.&lt;/li&gt;
&lt;li&gt;EPNS channels and users can customize their notification settings for different notification requirements.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-epns-will-support-oasisapp"&gt;
  &lt;/a&gt;
  How EPNS Will Support Oasis.app
&lt;/h2&gt;

&lt;p&gt;Under this pilot program, EPNS is building a dedicated channel for Oasis.app (see our lightpaper for definitions of channels, services, and more). Oasis.app users can subscribe to the Oasis.app channel to receive customized notifications to their wallets. Through collaboration with the Oasis.app team, we will gain insight into the push notification needs of Maker Vault and Dai stablecoin users and what they want from the EPNS protocol.&lt;/p&gt;

&lt;p&gt;Decentralized notifications will provide real-time Maker Vault data to Oasis.app Vault owners so all users can act in a timely manner and benefit from real time information on all their open Vaults.Meanwhile, all users can continue to operate within the private, secure ecosystem of Oasis.app across all DeFi services, without having to deal with integration pains across many different protocols.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maker Vault is a powerful tool leveraging the stablecoin Dai to make borrowing, saving, and trading more efficient. Push notifications to the Oasis.app will ensure users can act in a timely manner and optimize their vault and DeFi positions, commented Harsh Rajat, Founder and Project Lead of Ethereum Push Notification Service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looking forward, we foresee many new EPNS notification channels being introduced for Oasis.app, in particular, and DeFi stablecoin uses in general. The use of collateral to reduce volatility and other risks is making decentralized finance accessible to more people. Push notifications will be essential to enable future Oasis.app users to take advantage of the best collateralization and liquidation rates. Thus, we view decentralized push notifications as an important service that will accelerate the mass adoption of DeFi. Since Oasis.app is at the forefront of creating a unified stablecoin-powered DeFi hub, we expect our partnership to yield many new useful notification services and features for the decentralized finance market.&lt;/p&gt;

&lt;p&gt;The long-term goal of the pilot program is to develop a notification system for future versions of Oasis.app. DeFi users — who can easily integrate the EPNS protocol into their wallet — will expect push notifications to be an integral service. Going forward, we also plan to work closely with Oasis.app users to create new messaging solutions to meet their evolving push notification needs.&lt;br&gt;
We are pleased to be partnering with Oasis.app and anticipate EPNS push notifications becoming an indispensable tool in stablecoin DeFi markets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-oasisapp"&gt;
  &lt;/a&gt;
  About Oasis.app
&lt;/h2&gt;

&lt;p&gt;Oasis.app is the home for everything you want to accomplish with Dai. A decentralized application that runs on the Ethereum blockchain, Oasis aims to be the most trusted app to access the Maker protocol, get Dai and in general to deploy your capital into DeFi. Dai is a better, smarter digital currency for everyone. It is the world’s first unbiased currency and its value consistently tracks the US Dollar, which means it doesn’t suffer from the volatility associated with many other digital currencies.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Making your console log statements stand out</title>
      <author>Tulsi Prasad</author>
      <pubDate>Thu, 15 Jul 2021 16:20:31 +0000</pubDate>
      <link>https://dev.to/heytulsiprasad/making-your-console-log-statements-stand-out-449n</link>
      <guid>https://dev.to/heytulsiprasad/making-your-console-log-statements-stand-out-449n</guid>
      <description>&lt;p&gt;Yes, the above image is from the console and you can customize the text however you like. To know how keep reading till the end.&lt;/p&gt;

&lt;p&gt;It's been a while since my last post, it's because I got into learning some interesting stuff and undoubtedly writer's block was back. But recently, while working on a large repository that had a lot of stuff logged in the console I wanted a way to clear all the clutter and make my console statements stand out from the rest.&lt;/p&gt;

&lt;p&gt;Here is how I was able to do that and how you could too.&lt;/p&gt;

&lt;p&gt;So these are the possible options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using different console methods&lt;/li&gt;
&lt;li&gt;Using various format specifiers (believe me, this is magic ✨)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-different-console-methods"&gt;
  &lt;/a&gt;
  Using different console methods
&lt;/h2&gt;

&lt;p&gt;You might already know some of the basic ones, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.warn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But some of the more cool ones, are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-consoletable-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.table&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This can be used to log large nested objects or arrays so you don't have to go through expanding each key to view the whole thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;peoples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Richard Hendricks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Berkely&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4254-024-8162&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Christiansen Frederikke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Madras&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4987-024-2562&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;California&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3143-344-342&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;peoples&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nx_tcCSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tck0mbsrmu9efvob7nn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nx_tcCSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tck0mbsrmu9efvob7nn9.png" alt="Logging arrays into console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also log objects as such:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SVTaWSgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjax2iox28dz6bw95t2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SVTaWSgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjax2iox28dz6bw95t2r.png" alt="Logging objects into console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-consolegroup-endraw-and-raw-consolegroupend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.group&lt;/code&gt; and &lt;code&gt;console.groupEnd&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;You can group a set of console logs having a particular meaning apart from the rest using this method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Me and my boys&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;peoples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Weather is very beautiful today ☁&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Don't fall for the beautiful weather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what it'll return:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IhZd-8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zu88z9mqt2rwli2626se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IhZd-8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zu88z9mqt2rwli2626se.png" alt="Demostration of console group"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; Use &lt;code&gt;console.groupCollapsed()&lt;/code&gt; to have the logs closed by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-consoletime-endraw-and-raw-consoletimeend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;If at all you're ever interested to know how much time a particular block of code takes to run, you can achieve this using &lt;code&gt;console.time()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zzzz!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ks3xBZ0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t21ckmdkx3t51bn1s26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ks3xBZ0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t21ckmdkx3t51bn1s26.png" alt="Demonstration of console time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-consolecountlabel-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.count(label)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It logs incrementing counter values starting from 0. You can use &lt;code&gt;label&lt;/code&gt; to distinguish between different counters. To stop one from counting above, you've to use &lt;code&gt;console.countReset(label)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countReset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-format-specifiers"&gt;
  &lt;/a&gt;
  Using format specifiers
&lt;/h2&gt;

&lt;p&gt;Believe it or not, console logs can be more than just simple messages. You can include an eye-catching message or something more convincing as your favorite dog image.&lt;/p&gt;

&lt;p&gt;All because you can use format specifiers inside them. How?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-available-format-specifiers"&gt;
  &lt;/a&gt;
  List of available format specifiers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;%s ⇒ Formats as string&lt;/li&gt;
&lt;li&gt;%i ⇒ Formats as integer&lt;/li&gt;
&lt;li&gt;%f ⇒ Formats as float&lt;/li&gt;
&lt;li&gt;%O ⇒ Formats as object (yes that's capital O as in Oregano)&lt;/li&gt;
&lt;li&gt;%o ⇒ Formats as DOM element&lt;/li&gt;
&lt;li&gt;%c ⇒ Formats as CSS ✨&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#formats-as-string-integer-float"&gt;
  &lt;/a&gt;
  Formats as string, integer, float
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%s, told me that we're going to mall today with %s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Alan, told me that we're going to mall today with Mike&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We had %i mangoes today&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// We had 56 mangoes today&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Did you know, Tesla Model S can reach 0 to 60 mph in %f seconds?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mf"&gt;2.3&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Did you know, Tesla Model S can reach 0 to 60 mph in 2.3 seconds?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#formats-as-object"&gt;
  &lt;/a&gt;
  Formats as Object
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdqRiOVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/529hqaizkr2632k82cy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdqRiOVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/529hqaizkr2632k82cy2.png" alt="Demonstration of using %O format specifier in console logs for objects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formats-as-dom-element"&gt;
  &lt;/a&gt;
  Formats as DOM Element
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YytyJop3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bisb43uebsjsdivfdx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YytyJop3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bisb43uebsjsdivfdx2.png" alt="Demonstration of using %o format specifier in console logs for DOM elements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formats-as-css"&gt;
  &lt;/a&gt;
  Formats as CSS
&lt;/h3&gt;

&lt;p&gt;Adding your CSS to the second argument of console log by separating each of them with &lt;code&gt;;&lt;/code&gt; does the trick.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cThis is actually very interesting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: yellow; font-size: 35px; background-color: red;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj4DJadn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57xn436h7iu2q774v9j8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj4DJadn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57xn436h7iu2q774v9j8.png" alt="Demonstration of using styles in console log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also add multiple styles in the same log by using multiple %c specifiers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cThis is actually %cvery interesting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: blue; font-size: 55px; background-color: yellow;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 55px; background-color: blue; color: yellow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBeWvful--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ek1vlonsr015xizlwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBeWvful--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ek1vlonsr015xizlwa.png" alt="Demonstration of using multiple style format specifer in single log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If that looks a bit messy and you have a lot of styles to give you can put the styles in a separate array and use them wisely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blackBackground&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 50px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color: black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;whiteBackground&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 50px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color: white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cAwesome stuff is %ccoming your way&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;blackBackground&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;whiteBackground&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aLhexEE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmbamval6j5486j885gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aLhexEE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmbamval6j5486j885gh.png" alt="Demonstration of using multi styles with join helper in console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not the least, a picture says a thousand words.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-image: url(https://source.unsplash.com/random/1200x800)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-size: cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: hotpink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;padding: 100px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-weight: bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 25px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cPicture says a thousand words&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m2WPxIEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3meg1y1mfhpi1c7k1yi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m2WPxIEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3meg1y1mfhpi1c7k1yi.png" alt="Demonstration of console log with text on image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do all sorts of manipulation and get more creative with the power of CSS, it's up to you.&lt;/p&gt;

&lt;p&gt;If you're still wondering how the above banner was made, well here's that code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-image: url(https://i.pinimg.com/originals/5b/43/02/5b4302c2f6413454c782aeec866143cf.gif)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-size: cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;padding: 100px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-weight: bolder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 40px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-webkit-text-stroke-width: 1px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-webkit-text-stroke-color: yellow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-transform: uppercase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-align: center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;letter-spacing: 1px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cMay the force be with you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KL7vDHdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/51XzT21.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KL7vDHdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/51XzT21.gif" alt="https://i.imgur.com/51XzT21.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it, super easy! 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For me, all that mattered was for the logs to stand out and be more catchy on pursuit of which I found out a ton of more cool stuff we can do, hope this gives you more clarity on the gem of a function, that console is.&lt;/p&gt;

&lt;p&gt;Catch more updates on &lt;a href="https://twitter.com/heytulsiprasad"&gt;@heytulsiprasad&lt;/a&gt; 👋&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Using roadmap.sh for structured self-learning</title>
      <author>Karin</author>
      <pubDate>Thu, 15 Jul 2021 16:13:46 +0000</pubDate>
      <link>https://dev.to/khenhey/using-roadmap-sh-for-structured-self-learning-29pd</link>
      <guid>https://dev.to/khenhey/using-roadmap-sh-for-structured-self-learning-29pd</guid>
      <description>&lt;p&gt;Cover image by  &lt;a href="https://unsplash.com/@jerrykavan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jaromír Kavan&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/roadmap?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tech industry evolves quickly and as a beginner this can make you feel like you are always behind. One of the things I really had to learn is that the basics are always the right priority to dive into. It does not matter what career goal you have, be it frontend, backend or anything in between or beyond. Understanding HTML, CSS and one of the many amazing programming language out there will be a good start to your career.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-language-to-choose"&gt;
  &lt;/a&gt;
  Which language to choose?
&lt;/h2&gt;

&lt;p&gt;That depends on your own personal context. If you already landed a job and are expected to learn a specific language for it: choose that one. If you feel excited for another: go for the other one. When self-learning the key thing is motivation. Work with what makes you excited. Once you learn one language, the others can easily follow. Don’t feel rushed or pressured into something that does not ‘spark joy’.&lt;/p&gt;

&lt;p&gt;I started my journey through the RailsGirls community. So it felt right for me to follow some Ruby courses because I already knew people who could help me a little and it was the only language I had already seen. When I got hired as a frontend developer I picked up learning JavaScript. It was fun to see how some stuff was the same, and where the two languages differed. Again: once you know one language, others can easily follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-know-what-you-do-not-know"&gt;
  &lt;/a&gt;
  You don’t know what you do not know
&lt;/h2&gt;

&lt;p&gt;One of the reasons it is so hard when you are a beginner in tech is because you probably don’t know the gaps in your knowledge. Having a mentor, or knowing people who have more experience to help point into the right direction can be of huge help here. Luckily I was surrounded by an amazing group of people to point me into the right direction. Still, I was craving some more structure to help me set priorities when it came to learning the essentials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadmapsh"&gt;
  &lt;/a&gt;
  Roadmap.sh
&lt;/h2&gt;

&lt;p&gt;Through some luck I found &lt;a href="https://twitter.com/kamranahmedse"&gt;Kamran Ahmed’s&lt;/a&gt; roadmap.sh. I checked out the frontend roadmap and was amazed at the way it helped me gain insight into things I did not know I could dive into. This is how I implemented it into my own learning:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I created a markdown file and wrote down the list of things I wanted to learn using the roadmap.&lt;/li&gt;
&lt;li&gt;I went through the list and marked the ones that motivated me to learn, and the ones I knew could help me build the projects I was working on. I gave those extra priority.&lt;/li&gt;
&lt;li&gt;I went through the list again and for each topic I started searching the web for good resources that I could study to learn that subject matter. I did not study them immediately. I was just collecting and linking to those resources in the file. (Note: nowadays roadmap.sh has &lt;a href="https://roadmap.sh/guides"&gt;some nice resources&lt;/a&gt; themselves for some subjects, make sure to check them out!).&lt;/li&gt;
&lt;li&gt;Every quarter I chose some subjects and studied the resources.&lt;/li&gt;
&lt;li&gt;When a subject was done, I had the satisfaction of checking the checkbox in front of it ✨&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#projects-will-kickstart-your-career"&gt;
  &lt;/a&gt;
  Projects will kickstart your career
&lt;/h2&gt;

&lt;p&gt;Last but not least: I noticed that through work and building personal projects, I was already able to check off some of the boxes on my list. Working on actual projects actually helps you learn so much quicker than doing courses, reading articles, books or watching videos. If you haven’t tried building something yourself yet: go for it! Find something that you think would be fun to build. Maybe try using a fun API that is available on the web. Like &lt;a href="https://api.nasa.gov/"&gt;NASA&lt;/a&gt;, &lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Spotify&lt;/a&gt; or the &lt;a href="https://swapi.dev/"&gt;Star Wars API&lt;/a&gt;. It might feel daunting to start, but if you split up the project in small tasks it will become much easier.&lt;/p&gt;

&lt;p&gt;Good luck for all of you out there starting on your journeys. Don’t forget that the only person you should compare yourself with, is yourself. And every new thing you learn is one more thing you did not know before. Be nice to yourself and others, and build fun stuff.&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://khendrikse.github.io/post/2021-07-15-using-roadmapsh-for-structured-self-learning"&gt;my own website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>learning</category>
    </item>
    <item>
      <title>Microservices Authentication Strategies: Theory to Practice</title>
      <author>Tom Zach</author>
      <pubDate>Thu, 15 Jul 2021 16:12:11 +0000</pubDate>
      <link>https://dev.to/aspecto/microservices-authentication-strategies-theory-to-practice-86i</link>
      <guid>https://dev.to/aspecto/microservices-authentication-strategies-theory-to-practice-86i</guid>
      <description>&lt;p&gt;In this article, we will walk through common ways of implementing authentication microservices. &lt;/p&gt;

&lt;p&gt;We will have 2 parts: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;1.The theoretical part&lt;/em&gt; talking about OpenID Connect, OAuth 2.0, JWT, etc.&lt;/p&gt;

&lt;p&gt;Here I try to save you time wandering through the web and giving you all the basics you need to understand in order to start coding.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2.The practical part, where we will implement two Node.js microservices&lt;/em&gt;, one responsible for user authentication via google login, another responsible for greeting the user that has a token created by the previous service. Plus, we add a react JS app to interact with those services.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-theory"&gt;
  &lt;/a&gt;
  The Theory
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-authentication"&gt;
  &lt;/a&gt;
  What is authentication?
&lt;/h2&gt;

&lt;p&gt;Authentication is the answer users give us when we ask them “Who are you?”. For us to believe users, they need to go through a process providing some proof.&lt;/p&gt;

&lt;p&gt;For example – by providing a username &amp;amp; password or by using a social login provider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-authorization"&gt;
  &lt;/a&gt;
  What is authorization?
&lt;/h2&gt;

&lt;p&gt;Authorization is usually relevant when we already know who the user is, thus the user is authenticated (unless we allow anonymous access, but we won’t get into that use case here).&lt;/p&gt;

&lt;p&gt;Our users want to perform certain actions in our system, and the process of checking if they are allowed to do it or not is called authorization.&lt;/p&gt;

&lt;p&gt;(Note: The reason we’re talking about this authorization in an authentication article is that these terms are often confused, and we need to understand it to understand concepts like OAuth 2.0 &amp;amp; OpenID Connect)&lt;/p&gt;

&lt;p&gt;A good real-world analogy for both of the above would be while checking in a hotel room. Authentication is your passport, and authorization is if I’m allowed to enter a certain room (because I booked it).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oauth-20"&gt;
  &lt;/a&gt;
  OAuth 2.0
&lt;/h2&gt;

&lt;p&gt;OAuth 2.0 is an authorization protocol. To understand it best, let’s remember the days when it did not exist. In the image below you can see a Facebook screen asking for our Gmail password to search for our contacts on Facebook and add them as friends.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lSdDC7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwgwoqg0vuju4yahf646.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lSdDC7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwgwoqg0vuju4yahf646.png" alt="Facebook from the days before OAuth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Facebook from the days before OAuth, source: &lt;a href="https://oauth.net/videos/"&gt;https://oauth.net/videos/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Think of what this means: Facebook developers would have access to your Gmail password, and essentially all your Gmail data including emails.&lt;/p&gt;

&lt;p&gt;OAuth enables an app like Gmail to grant access solely to specific resources from that app, in this case, your contacts. It does so by creating an access token that can talk to an API and retrieve this data. &lt;/p&gt;

&lt;p&gt;OAuth provides us with 2 tokens: a refresh toke and an access token.&lt;/p&gt;

&lt;p&gt;The access token is short-lived and enables you to access the restricted API.&lt;/p&gt;

&lt;p&gt;The refresh token’s role is to enable us to obtain new access tokens, without requiring the user to log in each time our access token expires, which results in a better user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openid-connect-oidc"&gt;
  &lt;/a&gt;
  OpenID Connect (OIDC)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://openid.net/connect/"&gt;OpenID&lt;/a&gt; is an authentication protocol built on top of OAuth 2.0 and its main addition is the ID token. The ID token is intended for use with client-side applications, whereas the access token provided by OAuth 2.0 is meant to be used with the resource server (the API).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ljpsmRlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4em48u24tw3zkkm5eqj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ljpsmRlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4em48u24tw3zkkm5eqj3.png" alt="OAuth token audiences"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OAuth token audiences, source: &lt;a href="https://oauth.net/videos/"&gt;https://oauth.net/videos/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jwt"&gt;
  &lt;/a&gt;
  JWT
&lt;/h2&gt;

&lt;p&gt;JWT – &lt;a href="https://jwt.io/"&gt;Json Web Token&lt;/a&gt; is a standard method for representing claims securely between two parties. The information in the token is digitally signed to avoid tampering. &lt;/p&gt;

&lt;p&gt;While OAuth doesn’t enforce token type, a lot of implementations use JWT tokens to store the refresh &amp;amp; access tokens. OpenID Connect on the other hand – defines that the token must be in the&lt;br&gt;
JWT format.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nodejs-microservices-authentication-strategies"&gt;
  &lt;/a&gt;
  NodeJS Microservices Authentication Strategies
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of the relevant terms (and before we dive into practice) we can start exploring possibilities to implement authentication in our microservices:&lt;/p&gt;

&lt;p&gt;1.&lt;em&gt;The obvious way&lt;/em&gt;: use a database to store user data, write your logic for creating users, registration, store passwords, etc. You can then create a form in your client-side where the user logs in, and once logged in you can store user information wherever you see fit (cookies, app state, etc).&lt;/p&gt;

&lt;p&gt;2.&lt;em&gt;OpenID Connect&lt;/em&gt;: you can use services like Google &amp;amp; Facebook that would enable your users to log in using their corresponding accounts. Then, you create a corresponding user in your database. Here you don’t need to implement any user creation UI or store passwords.&lt;/p&gt;

&lt;p&gt;When your user logs in you can store the JWT token in a cookie, and your microservice could know who the user is according to that token. It could also allow or forbid certain actions based on that, but that’s out of the scope of this post.&lt;/p&gt;

&lt;p&gt;You could of course combine this with option one, having some of the users created via identity providers like Google/Facebook and others in your own system.&lt;/p&gt;

&lt;p&gt;3.&lt;em&gt;Use an identity as a service tool like &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; / &lt;a href="https://www.okta.com/"&gt;Okta&lt;/a&gt;&lt;/em&gt;, which essentially helps with both use cases above and can save you time implementing everything on your own. I won’t dive into this one, but you can check their websites for more info.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#for-the-practical-part-of-this-guide-i-have-selected-option-2-because-i-feel-it-gives-the-most-benefit-in-understanding-authentication-in-nodejs-and-you-will-most-likely-use-it-anyway-whether-directly-or-under-the-hood"&gt;
  &lt;/a&gt;
  &lt;em&gt;For the practical part of this guide I have selected option 2, because I feel it gives the most benefit in understanding authentication in Node.js and you will most likely use it anyway, whether directly or under the hood.&lt;/em&gt;
&lt;/h4&gt;
&lt;h1&gt;
  &lt;a href="#the-practice"&gt;
  &lt;/a&gt;
  The Practice
&lt;/h1&gt;

&lt;p&gt;Let’s begin implementing our service with OpenID connect enabled.&lt;/p&gt;

&lt;p&gt;Here’s what we’re going to create:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;account-service – a rest API that handles user creation. We will be using passport with passport-google-oauth strategy, which is based on OpenID Connect.&lt;/li&gt;
&lt;li&gt;greeting-service – a simple rest api that greets the user.&lt;/li&gt;
&lt;li&gt;A React app that lets the user login with google by consuming account-service and greets the user consuming the greeting-service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#step-1-setting-up-google-project-for-login"&gt;
  &lt;/a&gt;
  Step 1 – Setting up Google project for login
&lt;/h2&gt;

&lt;p&gt;1.Go to &lt;a href="https://console.cloud.google.com/"&gt;https://console.cloud.google.com/&lt;/a&gt; and register if you haven’t done so yet&lt;/p&gt;

&lt;p&gt;2.Create a new project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7qKntzDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0gbwnfpxa9h1mlr69n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7qKntzDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0gbwnfpxa9h1mlr69n.png" alt="Google OAuth project creation"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Google OAuth project creation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3.Select the newly created project, and click on Create Credentials&lt;/p&gt;

&lt;p&gt;4.Select OAuth Client ID&lt;/p&gt;

&lt;p&gt;5.Select Configure Consent Screen&lt;/p&gt;

&lt;p&gt;6.Select Internal &amp;amp; Hit Create&lt;/p&gt;

&lt;p&gt;7.Fill in the name and emails (you can leave the rest blank for now, we will get to it later)&lt;/p&gt;

&lt;p&gt;8.In the scopes screen, click add scopes, and then select &lt;em&gt;userinfo.email&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Xv_6SQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tee2xf1usjxb1jh5p2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Xv_6SQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tee2xf1usjxb1jh5p2i.png" alt="Updating selected Google scopes&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Updating selected Google scopes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;9.Hit Continue. Now we have our consent screen. Let’s go back to credentials &amp;amp; hit create credentials and choose OAuth Client ID&lt;/p&gt;

&lt;p&gt;10.Choose your name, and for authorized redirect URI – add “&lt;a href="http://localhost:5000/auth/google/callback%E2%80%9D"&gt;http://localhost:5000/auth/google/callback”&lt;/a&gt; and hit create&lt;/p&gt;

&lt;p&gt;11.You should now receive a pop-up with client id &amp;amp; client secret. Keep them, we will be using them soon&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-creating-accountservice"&gt;
  &lt;/a&gt;
  Step 2 – Creating account-service
&lt;/h2&gt;

&lt;p&gt;Note: throughout this tutorial, for the sake of simplicity we’re using the default code generated with express-generator. So no good-looking typescript-like things to see here.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-create-the-project-with-expressgenerator-amp-perform-the-installs-needed"&gt;
  &lt;/a&gt;
  1. Create the project with express-generator &amp;amp; perform the installs needed
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator --no-view account-service
cd account-service
npm install
npm install --save jsonwebtoken passport passport-google-oauth cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-express-generator-created-some-default-routes"&gt;
  &lt;/a&gt;
  2. Express generator created some default routes.
&lt;/h3&gt;

&lt;p&gt;We won’t be using the users’ one, but use the index.js. So I’m deleting references to it. The initial project looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZrvOR2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qps2kk7spwqkyy76cjn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZrvOR2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qps2kk7spwqkyy76cjn.png" alt="Express generator"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-in-binwww-lets-change-the-port-from-3000-to-5000"&gt;
  &lt;/a&gt;
  3. In bin/www let’s change the port from 3000 to 5000
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var port = normalizePort(process.env.PORT || '5000');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-add-passport"&gt;
  &lt;/a&gt;
  4. Add passport
&lt;/h3&gt;

&lt;p&gt;Passport is authentication middleware for Nodejs. It’s very simple to use and supports all the options we need so I chose to use it. Passport uses strategies to handle certain types of login. passport-google-login is a strategy for logging in with Google and is based on OpenID Connect.&lt;/p&gt;

&lt;p&gt;In our app.js file – let’s add the following code so that it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const cors = require('cors');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;

const indexRouter = require('./routes/index');

const app = express();
// This is here for our client side to be able to talk to our server side. you may want to be less permissive in production and define specific domains.
app.use(cors());

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));


app.use(passport.initialize());
app.use(passport.session());

app.use('/', indexRouter);

passport.serializeUser(function(user, cb) {
 cb(null, user);
});

passport.deserializeUser(function(obj, cb) {
 cb(null, obj);
});

passport.use(new GoogleStrategy({
   clientID: 'your-google-client-id',
   clientSecret: 'your-google-client-secret',
   callbackURL: "http://localhost:5000/auth/google/callback"
 },
 function(accessToken, refreshToken, profile, done) {
   // here you can create a user in the database if you want to
   return done(null, profile);
 }
));

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice we have a few interesting things here. &lt;/p&gt;

&lt;p&gt;One – we added cors for the client-side (localhost:3000) to be able to make requests from our server-side. Having security in mind – you probably want to only allow specific domains in production.&lt;/p&gt;

&lt;p&gt;Serialize &amp;amp; deserialize user – these are functions responsible for serializing &amp;amp; deserializing the user to and from the session.&lt;/p&gt;

&lt;p&gt;GoogleStrategy – this is how we tell Passport we would be using google authentication.&lt;/p&gt;

&lt;p&gt;Remember the client id &amp;amp; secret you saved earlier? Now is a good time to insert them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-adding-authentication-routes"&gt;
  &lt;/a&gt;
  5. Adding authentication routes
&lt;/h3&gt;

&lt;p&gt;Now let’s go to the routes/index.js file and add the relevant routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
const passport = require('passport');
const jwt = require('jsonwebtoken');

router.get('/', function(req, res, next) {
 res.render('index', { title: 'Express' });
});

const TOKEN_SECRET = 'SECRET';

router.get('/auth/google',
 passport.authenticate('google', { scope : ['profile', 'email'] }));

router.get('/auth/google/callback',
 passport.authenticate('google', { failureRedirect: '/error' }),
 function(req, res) {
   const token = jwt.sign({ id: req.user.sub, name: req.user.name }, TOKEN_SECRET, {
     expiresIn: 60 * 60,
   });
   res.cookie('auth', token, { httpOnly: true });
   res.redirect('http://localhost:3000/');
});

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TOKEN_SECRET – we will be using this to sign our JWT token.&lt;/p&gt;

&lt;p&gt;/auth/google – the actual google login route. &lt;/p&gt;

&lt;p&gt;Users are redirected to Google. Once they are done, they are redirected back to our server at /auth/google/callback. There we can create our JWT token. &lt;/p&gt;

&lt;p&gt;Once created, we add it on the request as an &lt;code&gt;httpOnly&lt;/code&gt; cookie, so that it is not accessible to javascript code (which is good in terms of security). You’ll soon see how this works on the client end.&lt;/p&gt;

&lt;p&gt;When ready, we redirect back to the client-side.&lt;/p&gt;

&lt;p&gt;Side note: we store the name inside the JWT for demonstration purposes, but you probably don’t need it, and may not be a best practice in terms of security.&lt;/p&gt;

&lt;p&gt;Now that we’re done with our account service, let’s go on to the client-side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-create-a-clientside-react-application"&gt;
  &lt;/a&gt;
  Step 3: Create a client-side react application
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app auth-strategies-client
cd auth-strategies-client/
yarn add axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have a default react app. Let’s modify the app js file to contain a link to google authentication.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import logo from './logo.svg';
import './App.css';

function App() {
 return (
   &amp;lt;div className="App"&amp;gt;
     &amp;lt;header className="App-header"&amp;gt;
       &amp;lt;img src={logo} className="App-logo" alt="logo" /&amp;gt;
       &amp;lt;a href="http://localhost:5000/auth/google"&amp;gt;Sign in with Google&amp;lt;/a&amp;gt;
     &amp;lt;/header&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after running it with yarn start, it looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kc6MZZug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhjaor4jixc446k51rgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc6MZZug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhjaor4jixc446k51rgq.png" alt="React sign in with Google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on “sign in with Google”. After doing so you should be redirected to Google for authentication.&lt;/p&gt;

&lt;p&gt;(Make sure you run npm start on accounts-service for it to run in port 5000).&lt;/p&gt;

&lt;p&gt;Let’s take a look at what happened after our call to the accounts-service/auth/google/callback:&lt;/p&gt;

&lt;p&gt;1.accounts-service made a POST request to google, which returned an access token &amp;amp; id token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9nPEJfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z74ro7qbw6x881nvp35q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9nPEJfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z74ro7qbw6x881nvp35q.png" alt="Aspecto live flow viewer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JY6rjRzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b1l1ycl8keqn02vgfgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JY6rjRzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b1l1ycl8keqn02vgfgb.png" alt="Zoom in to the response"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Zoom in to the response&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ElMix8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h123jfct98rq8ueyaj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ElMix8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h123jfct98rq8ueyaj4.png" alt="Zoom in to the services"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Zoom in to the services&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#ps-these-images-are-generated-using-aspectos-live-flow-viewer-if-youd-like-to-visualize-your-services-the-way-i-did-you-should-try-aspecto-for-free-it-takes-2-minutes-to-start-sending-traffic"&gt;
  &lt;/a&gt;
  [P.S. These images are generated using Aspecto’s &lt;a href="https://docs.aspecto.io/v1/live-flows-overview?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=authentication-strategies-theory-to-practice"&gt;live flow viewer&lt;/a&gt;. If you’d like to visualize your services the way I did, you should &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=authentication-strategies-theory-to-practice"&gt;try Aspecto&lt;/a&gt; (for free). It takes 2 minutes to start sending traffic].
&lt;/h5&gt;

&lt;p&gt;2.It used that token to make another GET request to google to get the user’s personal info.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymMr8bkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7fy4ady989h9sxq8wjh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymMr8bkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7fy4ady989h9sxq8wjh.png" alt="make another GET request to google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ozwAtoTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t5nkvioyzp33mmx699s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozwAtoTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t5nkvioyzp33mmx699s.png" alt="make another GET request to google, Zoom in to the response"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Zoom in to the response&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3.Our microservice has redirected us back to the client-side, with set-cookie in the response for our auth cookie creation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IW0ZHPqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nodyjzjwv8ev2dk9df0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IW0ZHPqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nodyjzjwv8ev2dk9df0b.png" alt="Our microservice has redirected us back to the client-side"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore – after that, you will be redirected back to the exact same screen, with one difference: If you open your browser’s DevTools, you should see an auth cookie that is http only:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lx5yqoON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge75cjepwo16f9sosrce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lx5yqoON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge75cjepwo16f9sosrce.png" alt="Browser’s DevTools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we’re ready to make use of this token. That leads us to our greeting-service. Keep the client-side handy as we will modify it soon.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-4-setting-up-the-greetingsservice"&gt;
  &lt;/a&gt;
  Step 4 – Setting up the greetings-service
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-lets-create-our-service"&gt;
  &lt;/a&gt;
  1. Let’s create our service
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator --no-view greetings-service
cd greetings-service
npm install
npm install --save passport passport-jwt cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-remove-userjs-file-and-routes-in-appjs-this-is-our-fresh-start"&gt;
  &lt;/a&gt;
  2. Remove user.js file and routes in app.js, this is our fresh start:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');

const indexRouter = require('./routes/index');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#3-modify-port-to-5001-in-binwww"&gt;
  &lt;/a&gt;
  3. Modify port to 5001 in bin/www
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var port = normalizePort(process.env.PORT || '5001');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-set-up-passport-to-read-our-jwt-token-by-modifying-appjs"&gt;
  &lt;/a&gt;
  4. Set up passport to read our JWT token by modifying app.js:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const cors = require('cors');

const indexRouter = require('./routes/index');

const app = express();
app.use(cors({ credentials: true, origin: 'http://localhost:3000' }));


app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

const passport = require('passport');
const JwtStrategy = require('passport-jwt').Strategy,
 ExtractJwt = require('passport-jwt').ExtractJwt;

app.use(passport.initialize());
app.use(passport.session());

app.use('/', indexRouter);

const cookieExtractor = function(req) {
 let token = null;
 if (req &amp;amp;&amp;amp; req.cookies)
 {
   token = req.cookies['auth'];
 }
 return token;
};

const TOKEN_SECRET = 'SECRET';

const opts = {
 jwtFromRequest: ExtractJwt.fromExtractors([cookieExtractor]),
 secretOrKey: TOKEN_SECRET,
};

passport.use(
 'jwt',
 new JwtStrategy(opts, (jwt_payload, done) =&amp;gt; {
   try {
     console.log('jwt_payload', jwt_payload);
     done(null, jwt_payload);
   } catch (err) {
     done(err);
   }
 }),
);

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we need to pay attention to a few interesting things.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cookieExtractor&lt;/code&gt; is responsible for reading the token from the &lt;code&gt;httpOnly&lt;/code&gt; cookie we created earlier and will be passed along with the request (more on that later).&lt;/p&gt;

&lt;p&gt;Notice we must use the same TOKEN_SECRET we used to create the token in order to read it or we will get an invalid signature error when reading.&lt;/p&gt;

&lt;p&gt;The extractor is then passed to the &lt;code&gt;JwtStrategy&lt;/code&gt;, which is responsible for providing us with the &lt;code&gt;jwt_payload&lt;/code&gt;. We could be fetching more info about the user from the database if we were to add a database, but for the sake of simplicity, I decided not to.&lt;/p&gt;

&lt;p&gt;Now we’ll add our greeting route in index.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
const passport = require('passport');

router.get('/', function(req, res, next) {
 res.render('index', { title: 'Express' });
});

router.get('/greetme', (req, res, next) =&amp;gt; {
 passport.authenticate('jwt', { session: false }, (err, user, info) =&amp;gt; {
   if (err) {
     console.log('error is', err);
     res.status(500).send('An error has occurred, we cannot greet you at the moment.');
   }
   else {
     res.send({ success: true, fullName: `${user.name.givenName} ${user.name.familyName}` })
   }
 })(req, res, next);
});


module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here is that Passport extracts the info from the JWT for us, and all we do is return it to the client.&lt;/p&gt;

&lt;p&gt;Start the greetings-service in port 5001:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-modify-the-client-side-to-send-the-httponly-cookie"&gt;
  &lt;/a&gt;
  Step 5 – Modify the client side to send the httpOnly cookie
&lt;/h2&gt;

&lt;p&gt;Since we want the client JWT token to not be accessible to any malicious javascript code, we have stored it in an httpOnly cookie. &lt;/p&gt;

&lt;p&gt;(Side note: in real life, you may want to also make it secure so that it’s only accessible via HTTPS).&lt;/p&gt;

&lt;p&gt;So, we want to perform our greeting request to the greetings-service. For that, we need to send the contents of the cookie to the server. Let’s do that then.&lt;/p&gt;

&lt;p&gt;Back in our client-side react application, we modify App.js by adding a button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react';
import axios from "axios";
import logo from './logo.svg';
import './App.css';

function App() {
 const [name, setName] = useState('');
 return (
   &amp;lt;div className="App"&amp;gt;
     &amp;lt;header className="App-header"&amp;gt;
       &amp;lt;img src={logo} className="App-logo" alt="logo" /&amp;gt;
       &amp;lt;a href="http://localhost:5000/auth/google"&amp;gt;Sign in with Google&amp;lt;/a&amp;gt;
       &amp;lt;br /&amp;gt;
       &amp;lt;button onClick={async () =&amp;gt; {
         const result = await axios.get('http://localhost:5001/greetme', {
           withCredentials: true
         });
         setName(result.data.fullName);
       }}&amp;gt;Greet me please&amp;lt;/button&amp;gt;
       {name &amp;amp;&amp;amp; &amp;lt;span&amp;gt;{`Hi, ${name}`}&amp;lt;/span&amp;gt;}
     &amp;lt;/header&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now once we get a response with the current user’s full name, we would see “Hi, full name”.&lt;/p&gt;

&lt;p&gt;Notice we added a basic axios with &lt;code&gt;withCredentials&lt;/code&gt;: true – that is what makes the cookies pass alongside our request, for the server to extract. &lt;/p&gt;

&lt;p&gt;And this emphasizes what happened here behind the scenes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4T5EL6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3fssa7zab5oh37598c7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4T5EL6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3fssa7zab5oh37598c7.png" alt="Aspecto live flow viewer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A simple GET request that returns a JSON with the user’s full name as it came from google and stored in the JWT token.&lt;/p&gt;

&lt;p&gt;Here is what we get after clicking the button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCdcHEOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s4s27idexpzgr5w47sj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCdcHEOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s4s27idexpzgr5w47sj.png" alt="React Tom Zach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it! &lt;/p&gt;

&lt;p&gt;We have successfully created the account service for registration &amp;amp; JWT creation, and the greetings service that knows how to read the JWT token and provide data about the user.&lt;/p&gt;

&lt;p&gt;I hope this helped you get a better understanding of authentication in general, and specifically while implementing it in nodejs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/magnificoder"&gt;Tom Zach&lt;/a&gt; is a Software Engineer at Aspecto. Feel free to follow him on &lt;a href="https://twitter.com/magnificoder"&gt;Twitter&lt;/a&gt; for more great articles like this one: &lt;a href="https://www.aspecto.io/blog/lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=authentication-strategies-theory-to-practice"&gt;Lerna Hello World: How to Create a Monorepo for Multiple Node Packages&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>microservices</category>
      <category>architecture</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 16, Fractal lists and other questions</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 15 Jul 2021 16:12:09 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-today-let-us-look-at-a-few-miscellaneous-questions-related-to-multidimensional-list-which-use-tryexcept"&gt;
  &lt;/a&gt;
  🤟WELCOME 👍 Today let us look at a few miscellaneous questions related to multidimensional list which use try-except😃
&lt;/h2&gt;




&lt;p&gt;In case you haven't visited &lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-15-more-about-try-except-1nmj"&gt;yesterday's&lt;/a&gt; blog, please do so. We have covered some really good questions based upon try-except&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Alphabetical order of letters.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a character "&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#The sorted() method sorts the list and returns the sorted list
# This is an inbuilt function to sort the list. You can also use insertion sort.
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a character a
Please enter a character d
Please enter a character b
Please enter a character h
['a', 'b', 'd', 'h']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note- The inbuilt sorted() method is so nice, that it will directly sort the values in alphabetical order even if we do not convert them into integers! Try removing the chr() and ord() functions and running the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Till now we hadn't handled errors for the input. However in this example, we handle errors for input values, example we can prevent errors f the user inputs more than one character.&lt;br&gt;
Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a character 123
Error!
Please enter a character abc
Error!
Please enter a character -2
Error!
Please enter a character 1a
Error!
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;2) &lt;strong&gt;Fractal lists.&lt;/strong&gt;&lt;br&gt;
We will now try to generate a fractal list. Fractal list is a multi- multidimensional list looks something like this-&lt;br&gt;
&lt;code&gt;[1, 2, [1, 2], [1, 2, [1, 2]], [1, 2, [1, 2], [1, 2, [1, 2]]]]&lt;/code&gt;&lt;br&gt;
Got the pattern? Basically we must append the list into itself. So now let us try doing so...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 2, [...], [...], [...]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, that didn't work. This is because the python syntax doesn't allow us to append to a list like this. We must use a temp variable to store the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 2, [...], [...], [...]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Didn't work either! This is because when we assign &lt;code&gt;temp=a&lt;/code&gt; and append temp,, then we are doing the same thing as before! The solution is using the copy() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 2, [1, 2], [1, 2, [1, 2]], [1, 2, [1, 2], [1, 2, [1, 2]]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise
&lt;/h3&gt;

&lt;p&gt;1)- Write a program to find the length of the list in the fractal list. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/6c0c0c9ba4c276a373fa199b57b680bf70403398/Basic/Day%2016/Exercise%20solutions/Exercise%201.py"&gt;Answer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Write a program to reverse the lists in a list. Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;In: [[1,2,3],4,[5,6],[7,[8,9],10],[11,12,13,14],15]
Out: [[3, 2, 1], 4, [6, 5], [10, [8, 9], 7], [14, 13, 12, 11], 15]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hint- use try except pass for non list values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/a24ed3f5c3f6b47defc0c41f07c252026262b4ae/Basic/Day%2016/Exercise%20solutions/Exercise%202.py"&gt;Answer&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;br&gt;
Star the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt; made for this course!😃&lt;/p&gt;

&lt;p&gt;Learning Python (16 Part Series)&lt;br&gt;
🤫psst... follow me on dev.to and GitHub for updates...&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How I created this mini Virtual DOM!!?</title>
      <author>Abhishek Raj</author>
      <pubDate>Thu, 15 Jul 2021 15:51:31 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/how-i-created-this-mini-virtual-dom-13lp</link>
      <guid>https://dev.to/abhishekraj272/how-i-created-this-mini-virtual-dom-13lp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTaZLAag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.morioh.com/200626/b35254e4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTaZLAag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.morioh.com/200626/b35254e4.jpg" alt="Virtual DOM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://morioh.com"&gt;Img Credits&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Few weeks back, I had a task to create an online code editor for HTML, CSS, JS and show the output on the same screen.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-i-needed-virtual-dom"&gt;
  &lt;/a&gt;
  Why I needed Virtual DOM?
&lt;/h3&gt;

&lt;p&gt;I stored different codes in different variables and for showing the output on same screen, I had to create a virtual DOM and merge all the codes (HTML + CSS + JS) together and inject it into an iframe.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The above code takes HTML, CSS and Javascript as string and then combines them together in HTML. It returns the merged code as a string then it is injected into an iframe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;You can see the working of the above code in this app.&lt;br&gt;
&lt;a href="https://abhishekraj272.github.io/Bro-Code-Web-IDE/"&gt;Web Code Editor&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#img-credits"&gt;
  &lt;/a&gt;
  Img Credits
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://crello.com"&gt;Crello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morioh.com"&gt;Morioh&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Roadmap to become Web Developer in 2021</title>
      <author>Alok Raj</author>
      <pubDate>Thu, 15 Jul 2021 15:50:20 +0000</pubDate>
      <link>https://dev.to/alok722/roadmap-to-become-web-developer-in-2021-24mp</link>
      <guid>https://dev.to/alok722/roadmap-to-become-web-developer-in-2021-24mp</guid>
      <description>&lt;p&gt;If you are a total beginner to web development and thinking to dive deep into web development then you are at the right place. I am damn sure at the end of this article you will be having a clear picture of &lt;em&gt;**Where *&lt;/em&gt;&lt;em&gt;to Start, *&lt;/em&gt;&lt;em&gt;What *&lt;/em&gt;&lt;em&gt;to study, and *&lt;/em&gt;&lt;em&gt;How *&lt;/em&gt;*to study.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;⚠&lt;/strong&gt; If you already have some exposure to web development then I will recommend you to visit &lt;a href="https://roadmap.sh/"&gt;roadmap.sh&lt;/a&gt;. It contains a detailed analysis of stacks to become a web developer. Also, you can read about my &lt;a href="https://alok722.medium.com/story-of-transition-to-the-senior-se-role-2c6ea1101e4a"&gt;***Story of Transition to the Senior SE role&lt;/a&gt;***&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before diving into where and how let’s understand &lt;strong&gt;WHAT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is Frontend? What is Backend? What is Full-stack? How these are co-related? Find answers to all your questions &lt;a href="https://www.youtube.com/watch?v=pkdgVYehiTE"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope now, you understand **What **is web development. Let’s understand from where we can get started with these.&lt;/p&gt;

&lt;p&gt;Concisely to become a full-stack &lt;strong&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/strong&gt; developer, You need to accomplish these in the sequence. I will discuss these in detail as we go along in this article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;step 1: learn HTML
step 2: learn CSS
step 3: learn CSS Frameworks (**e.g.: Bootstrap, Tailwind etc.**)
step 4: learn JavaScript
step 5: learn nodejs / expressjs **(or, Hapi, KoaJs, fastify, NestJs etc.)**
step 6: learn sql / nosql **(mongodb, PostgreSQL etc.)**
step 7: learn react / vue / angular
step 8: go back to step 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🏆 congratulations, you are now a full-stack developer.&lt;/p&gt;

&lt;p&gt;Now, let me start to discuss one at a time, what and from where you need to learn to get started in these tech domains. Some may argue, why not React/Vue/Angular first and then Node/Express. My take on this: You are free to do so but since all these front-end frameworks/libraries are dependent on package manager so why not learn Node first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-gt-css-gt-css-framework-eg-bootstrap-tailwind"&gt;
  &lt;/a&gt;
  HTML -&amp;gt; CSS -&amp;gt; CSS FRAMEWORK (e.g.: Bootstrap, Tailwind)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;: Hypertext Markup Language is the standard mark-up language for documents designed to be displayed in a web browser.&lt;/p&gt;

&lt;p&gt;Must know topics: What is HTML? Anatomy of HTML Tag, HTML Document Structure, &lt;a href="https://html-css-js.com/html/tags/"&gt;Essential HTML Tags&lt;/a&gt;, HTML form.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;: Cascading Style Sheets is a style sheet language that explains the presentation of a document written in a mark-up language like HTML.&lt;/p&gt;

&lt;p&gt;Must-know topics: What is CSS? Anatomy of CSS, CSS Selectors (Element, Class and ID), Combining selectors, Pseudo selectors, CSS Specificity (Conflict Resolution), Box Model and Layout, CSS Grid, CSS Flexbox, Relative vs Absolute element positioning, Box Model, Media Queries (Responsive design using CSS).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS FRAMEWORK&lt;/strong&gt;: It is a CSS framework to ease the design process. These are free and open-source CSS frameworks directed at responsive, mobile-first front-end web development. It contains CSS- and JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components. Eg.: &lt;a href="https://getbootstrap.com/"&gt;https://getbootstrap.com/&lt;/a&gt;, &lt;a href="https://tailwindcss.com/"&gt;https://tailwindcss.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JAVASCRIPT
&lt;/h2&gt;

&lt;p&gt;It is often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. It is high-level, often just in time compiled, and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object orientation, and first-class functions.&lt;/p&gt;

&lt;p&gt;In JavaScript, there is a lot to learn, so instead of mentioning topics, Now, I will recommend you the courses, which you can follow and get comfortable with. You can visit the &lt;a href="https://javascript.info/"&gt;**javascript.info&lt;/a&gt; **website for detailed and well documentation of JavaScript.&lt;/p&gt;

&lt;p&gt;Courses you can follow for getting started with HTML, CSS &amp;amp; JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.coursera.org/learn/html-css-javascript-for-web-developers"&gt;https://www.coursera.org/learn/html-css-javascript-for-web-developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is one of the brilliant courses available to get started with web development. Here, you will get to learn HTML, CSS, Bootstrap, JavaScript, and AJAX. You can apply for &lt;strong&gt;financial aid&lt;/strong&gt; or you can simply audit the course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;https://www.udemy.com/course/the-web-developer-bootcamp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over here, I will suggest you complete until SECTION 20 (To DO Lists Project).&lt;/p&gt;

&lt;p&gt;Once you are done with the above-stated course, then now is a good time to dive deep and know all about &lt;strong&gt;JavaScript &amp;amp; **its architecture&lt;/strong&gt;.**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/modern-javascript/"&gt;https://www.udemy.com/course/modern-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The perfect and complete course, which helps you to understand every nuke and corner of JS. This course is a perfect combo of project-based learning as well as a deeper dive into the why and how of JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can refer to this video and playlist for getting started with JS. &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PL_c9BZzLwBRLVh9OdCBYFEql6esA6aRsi"&gt;https://www.youtube.com/playlist?list=PL_c9BZzLwBRLVh9OdCBYFEql6esA6aRsi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=qoSksQ4s_hg&amp;amp;list=PL4cUxeGkcC9i9Ae2D9Ee1RvylH38dKuET&amp;amp;ab_channel=TheNetNinja"&gt;https://www.youtube.com/watch?v=qoSksQ4s_hg&amp;amp;list=PL4cUxeGkcC9i9Ae2D9Ee1RvylH38dKuET&amp;amp;ab_channel=TheNetNinja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript ES6, ES7, ES8 - &lt;a href="https://www.youtube.com/watch?v=nZ1DMMsyVyI&amp;amp;ab_channel=freeCodeCamp.org"&gt;https://www.youtube.com/watch?v=nZ1DMMsyVyI&amp;amp;ab_channel=freeCodeCamp.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also, there is one ongoing course from Akshay Saini which discussed architecture and behind the scene of JavaScript. [&lt;a href="https://www.youtube.com/watch?v=pN6jk0uUrD8&amp;amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&amp;amp;ab_channel=AkshaySaini"&gt;**Namaste Javascript&lt;/a&gt;**]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;**Optional&lt;/em&gt;&lt;em&gt;: (Now is the good time to revise whatever you have learned.) I will recommend you to visit&lt;a href="https://www.freecodecamp.org/learn"&gt; freecodecamp&lt;/a&gt; and complete the projects of **Responsive web design certification **to get the certificate; if you feel stuck, you can definitely go through the tutorial provided there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you are done with these above, now is a good time to dive into the framework/library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#node-gt-express-gt-mongodb"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodejs.org/en/"&gt;NODE&lt;/a&gt; -&amp;gt;&lt;a href="https://expressjs.com/"&gt; EXPRESS&lt;/a&gt; -&amp;gt;&lt;a href="https://www.mongodb.com/"&gt; MONGO-DB&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For Backend, I will recommend a single course. Also, you can study each topic in detail by following a separate tutorial for each.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/"&gt;https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course is a top-rated course on Udemy. This course has beautifully covered all the essentials of the Backend covering NodeJS, Express JS, Mongo, and Mongoose along with Unit Testing.&lt;/p&gt;

&lt;p&gt;you can refer to these videos and playlists for getting started with Node.JS &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLillGF-RfqbYRpji8t4SxUkMxfowG4Kqp"&gt;https://www.youtube.com/playlist?list=PLillGF-RfqbYRpji8t4SxUkMxfowG4Kqp&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-libraryframework-eg-react-vue-angular"&gt;
  &lt;/a&gt;
  FRONTEND LIBRARY/FRAMEWORK (e.g.: React, Vue, Angular):
&lt;/h3&gt;

&lt;p&gt;I will provide the links of course which I found amusing. I, being a MEAN stack developer, have experienced Angular &amp;amp; React courses myself and for Vue, I have taken opinions from my friends working with Vue.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Which frontend framework/lib to choose?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Seeing the current market scenario, React is the first choice but at the same time, Vue JS is rising slowly and is expected to surpass React totally. Earlier Angular was at the top, not anymore. However, it does not matter which framework you know, once you are comfortable with any library or framework then you can easily pick others too. For more analysis on what to choose, you can search and find many helpful articles.&lt;/em&gt; &lt;em&gt;The major difference between the different stacks can be found &lt;a href="https://www.youtube.com/watch?v=KMX1mFEmM3E"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;em&gt;And if you just want to know individually what they are, that you can see &lt;a href="https://www.youtube.com/watch?v=5XlYQRGgYrY"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  &lt;a href="https://angular.io/"&gt;**ANGULAR&lt;/a&gt;**
&lt;/h3&gt;

&lt;p&gt;Angular — The Complete Guide (2020 Edition) - &lt;a href="https://www.udemy.com/course/the-complete-guide-to-angular-2/"&gt;https://www.udemy.com/course/the-complete-guide-to-angular-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is one of the most comprehensive courses on angular. It is actually a bit too many details sometimes but better be safe than sorry.&lt;/p&gt;

&lt;p&gt;Or,&lt;/p&gt;

&lt;p&gt;you can follow &lt;a href="https://www.youtube.com/watch?v=0eWrpsCLMJQ&amp;amp;list=PLC3y8-rFHvwhBRAgFinJR8KHIrCdTkZcZ&amp;amp;ab_channel=Codevolution"&gt;this&lt;/a&gt; to quickly get started with Angular. &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=0eWrpsCLMJQ&amp;amp;list=PLC3y8-rFHvwhBRAgFinJR8KHIrCdTkZcZ&amp;amp;ab_channel=Codevolution"&gt;**Angular Tutorial for Beginners&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://vuejs.org/"&gt;**Vue JS&lt;/a&gt;**
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/vuejs-2-the-complete-guide/"&gt;**The Complete Guide (incl. Vue Router &amp;amp; Vuex)&lt;/a&gt;:**&lt;/p&gt;

&lt;p&gt;Being one of the highest-rated courses on Udemy taught by Maximilian Schwarzmüller, I can undoubtedly say, &lt;strong&gt;Go&lt;/strong&gt; for it. He is one of the BEST instructors present in the tech industry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can refer to these videos and playlists for getting started with VueJs. &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5LYrN_cAJoA&amp;amp;list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa&amp;amp;ab_channel=TheNetNinja"&gt;**VueJs 2&lt;/a&gt; + &lt;a href="https://www.youtube.com/watch?v=BGAu__J4xoc&amp;amp;list=PL4cUxeGkcC9i371QO_Rtkl26MwtiJ30P2&amp;amp;ab_channel=TheNetNinja"&gt;Vuex&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;or,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=e-E0UB-YDRk&amp;amp;ab_channel=Bitfumes"&gt;**VueJs 3&lt;/a&gt; + &lt;a href="https://www.youtube.com/watch?v=BGAu__J4xoc&amp;amp;list=PL4cUxeGkcC9i371QO_Rtkl26MwtiJ30P2&amp;amp;ab_channel=TheNetNinja"&gt;Vuex&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactjs.org/"&gt;**React JS&lt;/a&gt;**
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/react-redux/"&gt;**Modern React with Redux&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can refer to these videos and playlists for getting started with ReactJs. &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=QFaFIcGhPoM&amp;amp;list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&amp;amp;ab_channel=Codevolution"&gt;**React&lt;/a&gt; + &lt;a href="https://www.youtube.com/watch?v=9boMnm5X9ak&amp;amp;list=PLC3y8-rFHvwheJHvseC3I0HuYI2f46oAK&amp;amp;ab_channel=Codevolution"&gt;Redux&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;or,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OxIDLw0M-m0&amp;amp;list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG&amp;amp;ab_channel=TheNetNinja"&gt;**React with Redux&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;Whatever front-end library/framework you choose and complete the course then start building projects on top of that.&lt;/p&gt;

&lt;p&gt;IDE Suggestion:&lt;a href="https://code.visualstudio.com/"&gt; https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wish to explore more and find some more relative tutorials. You can follow this &lt;a href="https://hackr.io/"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Congratulations&lt;/em&gt;, now you are ready to dive and become a full-stack JavaScript developer.&lt;/p&gt;

&lt;p&gt;Want to know about my journey. Read that here:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#story-of-transition-to-the-senior-se-role"&gt;
  &lt;/a&gt;
  &lt;a href="https://alok722.medium.com/story-of-transition-to-the-senior-se-role-2c6ea1101e4a"&gt;Story of Transition to the Senior SE role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You can find me on &lt;a href="https://www.linkedin.com/in/alok722/"&gt;LinkedIn&lt;/a&gt; !!!&lt;/p&gt;

&lt;p&gt;Feedback appreciated !!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>roadmap</category>
      <category>webdev</category>
      <category>devjournal</category>
    </item>
  </channel>
</rss>
