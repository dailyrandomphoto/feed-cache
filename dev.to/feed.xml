<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ORMs - Active Record &amp; Data Mapper</title>
      <author>Agustin Tosco</author>
      <pubDate>Fri, 24 Dec 2021 00:53:57 +0000</pubDate>
      <link>https://dev.to/agustintosco/orms-active-record-data-mapper-4mpm</link>
      <guid>https://dev.to/agustintosco/orms-active-record-data-mapper-4mpm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#cu%C3%A1l-es-la-diferencia-entre-active-record-y-data-mapper"&gt;
  &lt;/a&gt;
  ¿Cuál es la diferencia entre Active Record y Data Mapper?
&lt;/h2&gt;

&lt;p&gt;Cuando trabajamos con datos en una aplicación, probablemente necesitemos un ORM (Object Relational Mapping). Un ORM es la capa entre la base de datos y nuestra aplicación. Al usar un ORM, la mayoría del trabajo de crear, actualizar, leer y eliminar de la base de datos es hecho por este ORM.&lt;/p&gt;

&lt;p&gt;La mayoría de los frameworks actuales están preparados para trabajar con un ORM sin problemas. Por ejemplo, Laravel trabaja normalmente con &lt;a href="https://laravel.com/docs/8.x/eloquent"&gt;Eloquent&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Las dos más famosas implementaciones de ORMs son Active Record y Data Mapper. En este artículo vamos a explorar la diferencia entre estos dos patrones, cuales son los beneficios y desventajas de elegir uno u otro.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-un-orm-y-por-qu%C3%A9-necesitamos-uno"&gt;
  &lt;/a&gt;
  ¿Qué es un ORM y por qué necesitamos uno?
&lt;/h2&gt;

&lt;p&gt;Antes de comenzar a hablar acerca de las diferencias entre Active Record y Data Mapper, vamos a hablar un poco sobre qué es un ORM y cuál es su utilidad.&lt;/p&gt;

&lt;p&gt;Como dijimos anteriormente, un ORM es la capa que existe entre la base de datos y nuestra aplicación. En POO, trabajamos con objetos como nuestro principal punto de referencia.&lt;/p&gt;

&lt;p&gt;Por ejemplo, podríamos tener el siguiente objeto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elodin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sin embargo, las bases de datos pueden almacenar valores como strings o integers. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJyjCC25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy7bs6qbvb78wu2wc2z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJyjCC25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy7bs6qbvb78wu2wc2z8.png" alt="Image description" width="657" height="67"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Un &lt;code&gt;User&lt;/code&gt; podría tener varios posteos en nuestra aplicación. Para conseguirlos, podríamos hacer algo así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sin embargo, en la base de datos, los posteos estarían almacenados en un tabla, así:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WaAikKcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmnanaw6kvzfa2245sk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WaAikKcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmnanaw6kvzfa2245sk0.png" alt="Image description" width="674" height="74"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cuando trabajamos con objetos en nuestra aplicación, trabajamos con objetos simples que almacenan todas sus propiedades y relaciones.&lt;/p&gt;

&lt;p&gt;No obstante, estos datos son almacenados individualmente en las diferentes tablas de la base de datos.&lt;/p&gt;

&lt;p&gt;Un ORM es esa capa "mágica" que transforma los datos en forma de objetos en datos relacionales que pueden ser guardados en la base de datos y viceversa.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-el-patr%C3%B3n-active-record"&gt;
  &lt;/a&gt;
  ¿Qué es el patrón Active Record?
&lt;/h2&gt;

&lt;p&gt;Este patrón de ORMs es probablemente el más popular.&lt;/p&gt;

&lt;p&gt;Un ejemplo de uso típico sería el siguiente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elodin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En el ejemplo de arriba creamos un nuevo objeto &lt;code&gt;User&lt;/code&gt;, configurando el &lt;code&gt;username&lt;/code&gt; y luego guardando el objeto en la base de datos.&lt;/p&gt;

&lt;p&gt;ORMs del estilo Active Record mapean un objeto con una fila de la base de datos. En el ejemplo anterior, estaríamos mapeando el objeto &lt;code&gt;User&lt;/code&gt; a una fila en la tabla &lt;code&gt;users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Cuando abramos el archivo de modelo &lt;code&gt;User&lt;/code&gt;, notaremos que no necesitamos especificar las propiedades del objeto o como se relaciona con la base de datos. Con este tipo de ORMs, el modelo es capaz de determinar las propiedades del modelo automáticamente tomando como referencia el esquema de la base de datos.&lt;/p&gt;

&lt;p&gt;Uno de los beneficios de este estilo de ORMs es que podemos llamar al método &lt;code&gt;save()&lt;/code&gt; en el objeto para actualizar la base de datos. Cada modelo hereda de un objeto base (del patrón Active Record) por lo que tenemos acceso a todos los métodos relacionados a la presistencia de datos. Esto hace que comenzar a trabajar con ORMs de estilo Active Record sea muy fácil ya que son muy intuitivos.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-el-patr%C3%B3n-data-mapper"&gt;
  &lt;/a&gt;
  ¿Qué es el patrón Data Mapper?
&lt;/h2&gt;

&lt;p&gt;La gran diferencia entre ambos patrones es que el Data Mapper separa completamente el dominio de nuestra aplicación y la capa de persistencia. Esto significa que ninguno de nuestros modelos (objetos) sabe nada acerca de la base de datos.&lt;/p&gt;

&lt;p&gt;Cuando usamos el patrón Data Mapper nuestro código luciría algo así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elodin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hasta ahora, no hay diferencias con el patrón Active Record.&lt;/p&gt;

&lt;p&gt;No obstante, los objetos del modelo Data Mapper no son más que objetos que no tienen conocimiento alguno sobre la base de datos. Esto significa que no podemos llamar al método &lt;code&gt;save()&lt;/code&gt; en el objeto a almacenar porque este método no existe en este objeto.&lt;/p&gt;

&lt;p&gt;En cambio, necesitaremos usar un servicio completamente diferente, por ejemplo, llamado Entity Manager:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elodin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;EntityManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El gran beneficio del patrón Data Mapper es que los objetos que utilizamos en el dominio de nuestra aplicación no necesitan conocer nada acerca de cómo están guardados en la base de datos. Esto significa que nuestros objetos serán más livianos ya que no deberán heredar el ORM completo, sino que también habrá un proceso más estricto y formal para interactuar con la base de datos debido a que no podremos llamar al método &lt;code&gt;save()&lt;/code&gt; en cualquier lugar en nuestro código.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#entonces-cu%C3%A1les-son-las-diferencias-entre-active-record-y-data-mapper"&gt;
  &lt;/a&gt;
  Entonces, ¿cuáles son las diferencias entre Active Record y Data Mapper?
&lt;/h2&gt;

&lt;p&gt;Ambos patrones tienen aspectos positivos y negativos, por supuesto. Como ocurre con casi todo lo demás en el ámbito de la programación, no hay uno que sea mejor que otro, sino que... depende.&lt;/p&gt;

&lt;p&gt;Con todo esto en mente, puede haber dos formas de juzgar cuál patrón nos conviene más usar en nuestro caso.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#el-tipo-de-aplicaci%C3%B3n-que-estemos-construyendo"&gt;
  &lt;/a&gt;
  El tipo de aplicación que estemos construyendo
&lt;/h3&gt;

&lt;p&gt;Generalmente y a grandes rasgos, existen dos tipos de aplicaciones: aquellas basadas en los métodos CRUD y las basadas en el propio dominio de la aplicación.&lt;/p&gt;

&lt;p&gt;En una aplicación basada en los métodos CRUD típicamente estaremos creando, leyendo, actualizando y eliminando entidades. También, puede que tengamos relaciones entre nuestros modelos, pero sobre todo, no hay reglas estrictas respecto a cómo estas relaciones están dadas.&lt;/p&gt;

&lt;p&gt;Cuando construimos una aplicación que está basada o pensada desde el lado de la base de datos, la solucíon más óptima es el patrón Active Record. Éste último, nos permitirá rápida y fácilmente levantar y correr nuestra aplicación.&lt;/p&gt;

&lt;p&gt;Si por el contrario, nuestra aplicación es construida pensando en satisfacer las reglas y procedimientos de un negocio, el patrón Data Mapper puede que sea la mejor opción. Éste patrón hará cumplir ciertas restricciones de tratar con datos y su persistencia, y también nos permitirá encapsular esas reglas de negocio dentro de las entidades.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#la-aplicaci%C3%B3n-y-el-entorno-en-el-que-est%C3%A1-siendo-construida"&gt;
  &lt;/a&gt;
  La aplicación y el entorno en el que está siendo construida
&lt;/h3&gt;

&lt;p&gt;Si estamos construyendo un MVP (Producto Mínimo Viable) para testear un nuevo mercado, puede que tenga más sentido usar el patrón Active Record. Al principio, generalmente no sabemos del todo cuales reglas del negocio serán más importantes, y nunca lo sabremos si nos obsesionamos con la arquitectura de nuestra aplicación.&lt;/p&gt;

&lt;p&gt;Por otro lado, si la idea es trabajar en una aplicación para un negocio ya existente, puede que sea mejor idea usar un patrón Data Mapper. Un negocio existente ya tendrá reglas y procedimientos por medio de los cuales funciona. Si usáramos un patrón Active Record terminaríamos intentando forzar estas reglas del negocio para que se adapten a nuestra idea de una aplicación pensada desde el lado de la base de datos. El patrón Data Mapper nos permitirá encapsular las reglas de dominio del negocio permitiéndonos trabajar de manera intuitiva y clara.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nota"&gt;
  &lt;/a&gt;
  Nota
&lt;/h2&gt;

&lt;p&gt;Este artículo ha sido maś que nada teoría sin muchos ejemplos prácticos. Para ver un tutorial práctico sobre las diferencias entre estos dos patrones, el siguiente enlace será de utilidad =&amp;gt; &lt;a href="https://fideloper.com/how-we-code"&gt;How We Code: ORMs and Anemic Domain Models&lt;/a&gt; by &lt;a href="https://twitter.com/fideloper"&gt;Chris Fidao&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fuente: &lt;a href="https://www.culttt.com/2014/06/18/whats-difference-active-record-data-mapper"&gt;https://www.culttt.com/2014/06/18/whats-difference-active-record-data-mapper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Develop a React Component using create-react-library template</title>
      <author>Ada Cheng</author>
      <pubDate>Thu, 23 Dec 2021 23:10:12 +0000</pubDate>
      <link>https://dev.to/adafycheng/develop-a-react-component-using-create-react-library-template-2cib</link>
      <guid>https://dev.to/adafycheng/develop-a-react-component-using-create-react-library-template-2cib</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this article, I would like to document how I created a React component and published it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prerequisites&lt;/p&gt;

&lt;p&gt;i. Install required libraries&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react react-dom

npm &lt;span class="nb"&gt;install &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;ii. Register a free account in &lt;a href="https://www.npmjs.com/"&gt;npm, Inc.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the create-react-library to create a template&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; create-react-library &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; create-react-library
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Answer to questions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Package Name&lt;/strong&gt; reactjs-tabbedpane-component&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package Description&lt;/strong&gt; A tabbed pane component using React.js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Author's GitHub Handle&lt;/strong&gt; adafycheng&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repo Path&lt;/strong&gt; adafycheng/reactjs-tabbedpane-component&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;License&lt;/strong&gt; MIT&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package Manager&lt;/strong&gt; yarn&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Template&lt;/strong&gt; default&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify src/index.js&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./styles.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jquery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TabbedPaneComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// read the input JSON content&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;div class=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newAnchor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;a class="paneLink"&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;newDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;newAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#paneContentDiv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#navbarDiv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newDiv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Get the first link and click.&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.paneLink:first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'pane'&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pane&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'navbarDiv'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'paneContentDiv'&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paneContent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TabbedPaneComponent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify example/src/App.js for testing&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TabbedPaneComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reactjs-tabbedpane-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reactjs-tabbedpane-component/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contentData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Overview&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is content of &amp;lt;a href="#"&amp;gt;Overview&amp;lt;/a&amp;gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Assumptions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Assumption 1&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Assumption 2&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Assumption 3&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Assumption 4&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Technical Design&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is content of Technical Design.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Data Design&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is content of Data Design.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Conclusion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is content of Conclusion.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TabbedPaneComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contentData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To test,&lt;/p&gt;

&lt;p&gt;In one terminal,&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;reactjs-tabbedpane-component &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn start
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In another terminal,&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;reactjs-tabbedpane-component/example &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn start
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;View the component using browser at &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repeat steps 3 - 5 for any code changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To publish, update package.json for versions.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"reactjs-tabbedpane-component"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A tabbed pane component built using React.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"adafycheng"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"repository"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"adafycheng/reactjs-tabbedpane-component"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/index.modern.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build the component.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Publish the component.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://create-react-app.dev/docs/documentation-intro"&gt;Create React App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adafycheng/reactjs-tabbedpane-component"&gt;Source code in GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/reactjs-tabbedpane-component"&gt;Published component&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Devo usar Composition API como substituto do VueX?</title>
      <author>Daywison Silva</author>
      <pubDate>Thu, 23 Dec 2021 23:09:41 +0000</pubDate>
      <link>https://dev.to/ironmandev/composition-api-vs-vuex-cdm</link>
      <guid>https://dev.to/ironmandev/composition-api-vs-vuex-cdm</guid>
      <description>&lt;p&gt;No framework Vue, na sua atual versão 3, é possível utilizar a API de composição (Composition API) para lidar com possíveis cenários de repetição de código. &lt;/p&gt;

&lt;p&gt;As funcionalidades base do framework, como funções para lidar com estado reativo, observar mudanças de estado, definição de componentes, métodos de ciclo de vida, etc., agora podem ser importadas. Dado isso, podemos declarar explicitamente o que queremos usar do framework. A abordagem é um pouco parecida com os "hooks" para quem vem do mundo do React.&lt;/p&gt;

&lt;p&gt;Aqui vai um exemplo:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;global.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incrementCount&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No código acima é importada uma função que vai lidar com a reatividade do objeto, que é passado como argumento contento o atributo "count". Dessa forma qualquer alteração no atributo "count", será reativo, ou seja, qualquer lugar(componente, função, etc.) que use o "count" receberá a atualização em primeira mão, porque todos os valores dentro do objeto(state) são reativos. &lt;/p&gt;

&lt;p&gt;Com alguns novos recursos do Vue também é possível implementar funcionalidades parecidas com as da API de contexto do React. É possível agora utilizar provide / inject para trabalhar com estado global (não se limita a isso).&lt;/p&gt;

&lt;p&gt;Agora com a nossa loja(store) configurada com o estado e a função &lt;code&gt;incrementCount()&lt;/code&gt; que manipula um valor do estado, é necessário "prover"(provide) esse estado para toda a nossa aplicação Vue.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;main.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/global&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;global&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora todos os nossos componentes podem ter acesso ao estado e as funções que manipulam o mesmo, mas para isso ser possível é necessário fazer uma "injeção" do estado global no componente, para isso iremos utilizar o "inject":&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MyComponent.vue&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;global.increment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;global&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dessa maneira já temos um estado global simples já implementado, mas a pergunta é, substitui VueX? A resposta é, depende.&lt;/p&gt;

&lt;p&gt;O VueX por ser um projeto, relativamente, grande e que já tem um bom tempo no ecossistema Vue foi pensado e feito somente para lidar com o estado global da aplicação, ele pode (sugerível) ser usado em aplicações que exijam um estado global mais complexo, e as motivações são as seguintes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VueX conta com a extensão do Vue que facilita bastante a inspeção do estado global, lá ele lista as mutations, actions, getters, e o próprio estado global de uma forma mais amigável, as informações ficam mais acessíveis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VueX conta com vários plugins famosos que podem ser úteis em vários cenários, como o "vuex-persisted" que persiste o estado global da aplicação no local storage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bom, entendendo quais problemas cada solução veio resolver, agora você pode escolher qual atende o cenário do seu projeto. 😀&lt;/p&gt;

&lt;p&gt;Referências:&lt;br&gt;
&lt;a href="https://vuejsdevelopers.com/2020/10/05/composition-api-vuex/"&gt;https://vuejsdevelopers.com/2020/10/05/composition-api-vuex/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>vuex</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to create a React JS application with the Pokémon API</title>
      <author>Rodrigo Lazo </author>
      <pubDate>Thu, 23 Dec 2021 22:36:02 +0000</pubDate>
      <link>https://dev.to/rodrigolazo/how-to-create-a-react-js-application-with-the-pokemon-api-28jn</link>
      <guid>https://dev.to/rodrigolazo/how-to-create-a-react-js-application-with-the-pokemon-api-28jn</guid>
      <description>&lt;p&gt;We are going to create an application that shows the information of the pokemos, consumed from an API.&lt;/p&gt;

&lt;p&gt;Api: &lt;a href="https://pokeapi.co/"&gt;https://pokeapi.co/&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/rodrigolazo/apiPokemon"&gt;https://github.com/rodrigolazo/apiPokemon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect } from 'react';
import './App.css';

import CharacterGrid from './components/characters/CharacterGrid'
import Header from './components/ui/Header'

function App() {
  const [result, setResult] = React.useState([]);
  const [poke, setPoke] = React.useState([]);
  const [load, setLoad] = React.useState('true');
  const arr = [];

  useEffect(() =&amp;gt; {
    fetch('https://pokeapi.co/api/v2/pokemon/?limit=400')
      .then((response) =&amp;gt; response.json())
      .then((data) =&amp;gt; setResult(
        data.results.map((item) =&amp;gt; {
          fetch(item.url)
            .then((response) =&amp;gt; response.json())
            .then((allpokemon) =&amp;gt; arr.push(allpokemon));
          setPoke(arr);
        }),
      ));
  }, []);
  setTimeout(() =&amp;gt; {
    setLoad(false);
  }, 1000);
  return (
    &amp;lt;div className='container'&amp;gt;
      &amp;lt;Header /&amp;gt;

      &amp;lt;CharacterGrid poke={poke} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Header.js&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import logo from '../../img/logo.png'

const Header = () =&amp;gt; {
  return (
    &amp;lt;header className='center'&amp;gt;
      &amp;lt;img src={logo} alt='' /&amp;gt;
    &amp;lt;/header&amp;gt;
  )
}

export default Header

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;CharacterGrid.js&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import CharacterItem from './CharacterItem'
import Spinner from '../ui/Spinner'

const CharacterGrid = ({ poke, isLoading }) =&amp;gt; {
  return isLoading ? (
    &amp;lt;Spinner /&amp;gt;
  ) : (
    &amp;lt;section className='cards'&amp;gt;
      {poke.map((item) =&amp;gt; (
        &amp;lt;CharacterItem key={item.id} item={item}&amp;gt;&amp;lt;/CharacterItem&amp;gt;
      ))}
    &amp;lt;/section&amp;gt;
  )
}

export default CharacterGrid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;CharacterItem.js&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'

const CharacterItem = ({ item }) =&amp;gt; {
  return (
    &amp;lt;div className='card'&amp;gt;
      &amp;lt;div className='card-inner'&amp;gt;
        &amp;lt;div className='card-front'&amp;gt;
          &amp;lt;img src={item.sprites.other.dream_world.front_default} alt='' /&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div className='card-back'&amp;gt;
          &amp;lt;h1&amp;gt;{item.name}&amp;lt;/h1&amp;gt;
          &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;strong&amp;gt;Hp:&amp;lt;/strong&amp;gt; {item.stats[0].base_stat}
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;strong&amp;gt;Experience:&amp;lt;/strong&amp;gt; {item.base_experience}
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;strong&amp;gt;attack:&amp;lt;/strong&amp;gt; {item.stats[1].base_stat}
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;strong&amp;gt;Special:&amp;lt;/strong&amp;gt; {item.stats[2].base_stat}
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;strong&amp;gt;Defence:&amp;lt;/strong&amp;gt; {item.stats[3].base_stat}
            &amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;

      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default CharacterItem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7IS0bNdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt34fzpo9aaeapn2skuh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7IS0bNdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt34fzpo9aaeapn2skuh.png" alt="Image description" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUnidlFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z41h6dtpwsem4hz9zqu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUnidlFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z41h6dtpwsem4hz9zqu2.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the project to test the applied styles, I hope it helps you&lt;/p&gt;

</description>
      <category>react</category>
      <category>api</category>
      <category>javascript</category>
      <category>pokemon</category>
    </item>
    <item>
      <title>Scrimba Free JS Course </title>
      <author>dripminister</author>
      <pubDate>Thu, 23 Dec 2021 22:14:36 +0000</pubDate>
      <link>https://dev.to/dripminister/scrimba-free-js-course-255h</link>
      <guid>https://dev.to/dripminister/scrimba-free-js-course-255h</guid>
      <description>&lt;p&gt;So I just finished the JS course from Scrimba and I really liked it because you had the chance to build your first small projects which is a good motivation. &lt;br&gt;
My only experience before this course was the FCC HTML course and a part of the JS course, so I knew already some of the things that were shown, but it was still a good training and also taught many things I didn't knew.&lt;br&gt;
All in all I can recommend this course.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>scrimba</category>
    </item>
    <item>
      <title>Proposed Alternative DOTNET Repository Layout</title>
      <author>The Sharp Ninja</author>
      <pubDate>Thu, 23 Dec 2021 22:04:39 +0000</pubDate>
      <link>https://dev.to/sharpninja/proposed-alternative-dotnet-repository-layout-38cm</link>
      <guid>https://dev.to/sharpninja/proposed-alternative-dotnet-repository-layout-38cm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#layout-for-github-repo-for-blazor-web-app-with-api-and-shared-logic-layer-and-serverside-data-layer"&gt;
  &lt;/a&gt;
  Layout for GitHub Repo for Blazor Web App with API and shared Logic layer and server-side Data Layer.
&lt;/h1&gt;

&lt;p&gt;I'm thinking that a directory layout for Solutions that represents the relationship of projects would be good.  Also, pairing test projects with their library being tested.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proposed-layout"&gt;
  &lt;/a&gt;
  Proposed Layout
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📄 .gitignore                // Global Git Ignore
📄 README.md                 // README for entire repository
📄 LICENSE                   // LICENSE for entire repository
📄 nuget.config              // NuGet Configuration
📂 .github                   // Github config
  📂 workflow                // Github Workflows
    📄 cd.yml                // Continuous Integration Pipeline
    📄 ci.yml                // Continuous Deployment Pipeline
📂 .idea                     // (hidden) Rider config
📂 .tools                    // Dependent Tooling
  📂 Cake                    // Cake Build Tooling
📂 .vs                       // (hidden) Visual Studio Config
📂 .vscode                   // VS Code Config
  📄 settings.json           // VS Code Solution Settings
  📄 tasks.json              // VS Code Task Definitions
  📄 launch.json             // VS Code Launch Definitions
  📄 extensions.json         // VS Code Extension Recomendations
📂 _artifacts                // Built Artifacts
  📂 npm                     // Built NPM Modules
  📂 nuget                   // Built NuGet Packages
  📂 other                   // Other Built Artifacts
📂 _build                    // Nuke or Cake
  📂 .nuke                   // Nuke Project
    📄 Build.cs              // BUKE Targets
    📄 Build.csproj          // NUKE Build Project
📂 _cd                       // CD Config
  📄 nuke-cd.yml             // CD Config for NUKE
📂 _ci                       // CI Config
  📄 nuke-ci.yml             // CI Config for NUKE
📂 _lib                      // Loose dependencies
📂 _requirements             // Loose requirements docs
📂 _scripts                  // Loose PowerShell Scripts
  📄 publish.ps1             // Push artifacts to repositories
  📄 helpers.psm1            // PowerShell Module of helper functions
📂 MySolution                // Start of Visual Stduio Solution
  📄 Directory.Build.Props   // Global MSBuild Configuration
  📄 MySolution.sln          // Visual Studio Solution File
  📂 Data
    📄 Directory.Build.Props // Data-Tier MSBuild Configuration
    📂 _integration          // Data-Tier integration tests
    📂 _sql                  // Loose SQL Scripts
    📂 MyProject.Entities    // Project Grouping
      📂 docs                // Markdown based generated and/or manual docs
        📂 Generated         // Generated Documentation
          📂 &amp;lt;metadata folder&amp;gt; // DocFx Generated
          📂 api             // DocFx Generated
            📄 &amp;lt;namespace&amp;gt;.yml // DocFx Generated
            📄 &amp;lt;class&amp;gt;.yml   // DocFx Generated
          📄 toc.yml         // DocFx Generated
          📄 index.yml       // DocFx Generated
        📂 Pages             // Hand-created Documentation
          📄 page_about.md   // Index for MyProject.Entities Docs
          📄 page_support.md // Index for MyProject.Entities Docs
        📄 docfx.json        // DocFx Configuration
        📄 index.md          // Index for MyProject.Entities Docs
      📂 src                 // Library
        📂 Entities          // POCO Entities
        📂 Migrations        // Database Migrations
        📂 Repositories      // Repositories or DbContexts
        📄 MyProject.Entities.csproj
      📂 test                // Library Tests
        📂 Data              // Test Data
        📂 Mocking           // Mocking Objects
        📄 MyProject.Entities.Tests.csproj
  📂 Logic
    📄 Directory.Build.Props // Logic-Tier MSBuild Configuration
    📂 _integration          // Logic-Tier Integration Tests
    📂 MyProject.Rules
      📂 docs
        📂 Generated         // Generated Documentation
          📂 &amp;lt;metadata folder&amp;gt; // DocFx Generated
          📂 api             // DocFx Generated
            📄 &amp;lt;namespace&amp;gt;.yml // DocFx Generated
            📄 &amp;lt;class&amp;gt;.yml   // DocFx Generated
          📄 toc.yml         // DocFx Generated
          📄 index.yml       // DocFx Generated
        📂 Pages             // Hand-created Documentation
          📄 page_about.md   // Index for MyProject.Logic Docs
          📄 page_support.md // Index for MyProject.Logic Docs
        📄 docfx.json        // DocFx Configuration
        📄 index.md          // Index for MyProject.Logic Docs
      📂 src
        📂 Mapping           // Entities-to-Domain Models Mappings
        📂 MVC               // Real MVC (see: )
          📂 Controllers     // Controllers
          📂 Models          // POCO Domain Models
        📄 MyProject.Rules.csproj
      📂 test
        📄 MyProject.Rules.Tests.csproj
  📂 Services
    📄 Directory.Build.Props // Services-Tier MSBuild Configuration
    📂 _integration          // Services-Tier Integration Tests
    📂 MyProject.Api
      📂 docs
        📂 Generated         // Generated Documentation
          📂 &amp;lt;metadata folder&amp;gt; // DocFx Generated
          📂 api             // DocFx Generated
            📄 &amp;lt;namespace&amp;gt;.yml // DocFx Generated
            📄 &amp;lt;class&amp;gt;.yml   // DocFx Generated
          📄 toc.yml         // DocFx Generated
          📄 index.yml       // DocFx Generated
        📂 Pages             // Hand-created Documentation
          📄 page_about.md   // Index for MyProject.Api Docs
          📄 page_support.md // Index for MyProject.Api Docs
        📄 docfx.json        // DocFx Configuration
        📄 index.md          // Index for MyProject.Api Docs
      📂 src
        📄 MyProject.Api.csproj
      📂 test
        📄 MyProject.Api.Tests.csproj
  📂 UI
    📄 Directory.Build.Props // UI-Tier MSBuild Configuration
    📂 _assets               // Shared UI assets
      📂 css                 // Shared Styling
      📂 fonts               // Shared Fonts
      📂 images              // Shared Images
      📂 resources           // Shared Resource files
    📂 _integration          // UI-Tier Integration Tests
    📂 MyProject.Blazor
      📂 docs
        📂 Generated         // Generated Documentation
          📂 &amp;lt;metadata folder&amp;gt; // DocFx Generated
          📂 api             // DocFx Generated
            📄 &amp;lt;namespace&amp;gt;.yml // DocFx Generated
            📄 &amp;lt;class&amp;gt;.yml   // DocFx Generated
          📄 toc.yml         // DocFx Generated
          📄 index.yml       // DocFx Generated
        📂 Pages             // Hand-created Documentation
          📄 page_about.md   // Index for MyProject.UI Docs
          📄 page_support.md // Index for MyProject.UI Docs
        📄 docfx.json        // DocFx Configuration
        📄 index.md          // Index for MyProject.UI Docs
      📂 src
        📂 wwwroot
        📄 MyProject.Blazor.csproj
      📂 test
        📄 MyProject.Blazor.Test.csproj
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>github</category>
      <category>azuredevops</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Understanding Built In Angular Directives - Part 4</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Thu, 23 Dec 2021 21:40:00 +0000</pubDate>
      <link>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-4-49ch</link>
      <guid>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-4-49ch</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will continue our journey in understanding the other built in Angular directives mainly the &lt;strong&gt;Structural Directives&lt;/strong&gt;.&lt;br&gt;
The directives which are used to change the structure of the DOM are called &lt;u&gt;structural directives&lt;/u&gt;. &lt;br&gt;
On a high level a structural directive adds or removes element in the DOM.&lt;/p&gt;

&lt;p&gt;The first directive which we will understand is the &lt;code&gt;ngIf&lt;/code&gt; directive.&lt;/p&gt;

&lt;p&gt;The structural directives always starts with an asterisk &lt;code&gt;*&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;*ngIf&lt;/code&gt;&lt;br&gt;
ngIf directive is used to show or hide an element on which it is added conditionally. If the condition executes to true the element will be shown else the element will be hidden.&lt;br&gt;
&lt;strong&gt;A point to note&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The element is completely removed from the DOM if the condition executes to false. It will not occupy any space in the DOM.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now lets see in practice-&lt;br&gt;
Lets create a fresh component. Name it &lt;code&gt;structural-directive-demo&lt;/code&gt;.&lt;br&gt;
If you are not aware of what is a component or how to create and use it I would highly recommend to read through the &lt;a href="https://dev.to/anubhab5/creating-angular-component-129e"&gt;post&lt;/a&gt;.&lt;br&gt;
Once the component is created our project would look like -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uKPp90F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21yt1dn3t2t8jmcv86f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uKPp90F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21yt1dn3t2t8jmcv86f.PNG" alt="Image description" width="504" height="392"&gt;&lt;/a&gt;&lt;br&gt;
Lets open the component.ts file and write the below code-&lt;/p&gt;

&lt;p&gt;To be precise add the variable &lt;code&gt;myAge&lt;/code&gt; and assign the value &lt;code&gt;18&lt;/code&gt; to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class StructuralDirectiveDemoComponent implements OnInit {

  myAge = 18;

  constructor() { }
  ngOnInit(): void { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the corresponding html template file and paste in the below code-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p *ngIf="myAge &amp;gt;= 18"&amp;gt;I am an Adult!&amp;lt;/p&amp;gt;
&amp;lt;p *ngIf="myAge &amp;lt; 18"&amp;gt;I am a CHILD&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets start the application and open the browser and open localhost:4200.&lt;br&gt;
You should see an output like below -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QqBZORTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtoi9ols5j94utxxih2m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QqBZORTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtoi9ols5j94utxxih2m.PNG" alt="Image description" width="324" height="125"&gt;&lt;/a&gt;&lt;br&gt;
Lets understand what is happening under the hood.&lt;/p&gt;

&lt;p&gt;The variable &lt;code&gt;myAge&lt;/code&gt; is holding the value 18 (the model).&lt;br&gt;
In the template when we write the below code say-&lt;br&gt;
&lt;code&gt;&amp;lt;p *ngIf="myAge &amp;gt;= 18"&amp;gt;I am an Adult!&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;br&gt;
the variable myAge points to the model or we can say it holds the value present in the model. The condition &lt;code&gt;myAge &amp;gt;= 18&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; which is assigned to the directive ngIf. Since true is assigned to the directive &lt;code&gt;ngIf&lt;/code&gt; the &lt;code&gt;p&lt;/code&gt; tag is visible.&lt;br&gt;
Now lets change the &lt;code&gt;myAge&lt;/code&gt; variable value to say 17 so that the above condition is false but the second line of code &lt;br&gt;
&lt;code&gt;&amp;lt;p *ngIf="myAge &amp;lt; 18"&amp;gt;I am a CHILD&amp;lt;/p&amp;gt;&lt;/code&gt; returns true.&lt;/p&gt;

&lt;p&gt;Now if you open the browser you will see that the output changes.&lt;br&gt;
The first &lt;code&gt;p&lt;/code&gt; tag is not shown/ hidden while the second &lt;code&gt;p&lt;/code&gt; tag is shown which was hidden when the model value was 18.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJJ3ylHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt4q94dsxny477fp83gt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJJ3ylHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt4q94dsxny477fp83gt.PNG" alt="Image description" width="313" height="161"&gt;&lt;/a&gt;&lt;br&gt;
So that's the power of ngIf directive. If you have to conditionally show/ hide some data in the template you can easily use it.&lt;br&gt;
Also to add to the above stuff you can also assign a function to the ngIf directive which returns a Boolean value. Something like below -&lt;br&gt;
In component.ts file you have a function like below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  checkAge() {
    if (this.myAge &amp;gt;= 18) {
      return true;
    } else {
      return false;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in html template file you can call the function inside ngIf like below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p *ngIf="checkAge()"&amp;gt;I am an Adult!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Any values like &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;empty string&lt;/code&gt; when assigned to &lt;code&gt;ngIf&lt;/code&gt; will result in hiding the element.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post.&lt;br&gt;
Do like comment and share the post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>directives</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to add react-gtm-module in  PWA Studio </title>
      <author>mumtaz1000</author>
      <pubDate>Thu, 23 Dec 2021 21:25:31 +0000</pubDate>
      <link>https://dev.to/mumtaz1000/how-to-add-react-gtm-module-in-pwa-studio-4ncm</link>
      <guid>https://dev.to/mumtaz1000/how-to-add-react-gtm-module-in-pwa-studio-4ncm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I have created this tutorial on Mac and have used yarn because it is recommended by PWA Studio. &lt;/p&gt;

&lt;p&gt;In this blog i will tell you how to add react-gtm-module in your PWA Studio storefront project. So there are some steps which need to be followed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step1:
&lt;/h2&gt;

&lt;p&gt;Your must have a storefront project in pwa studio. You can also create a new one by using command &lt;code&gt;yarn create @magento/pwa&lt;/code&gt; or &lt;code&gt;npm init @magento/pwa&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step2:
&lt;/h2&gt;

&lt;p&gt;You must install &lt;strong&gt;Fooman VeniaUiOverrideResolver for PWA Studio&lt;/strong&gt; either by using &lt;code&gt;yarn add @fooman/venia-ui-override-resolver&lt;/code&gt; or by using &lt;code&gt;npm i @fooman/venia-ui-override-resolver&lt;/code&gt;. The main reason behind installing Fooman extension is we need to override a component file where we will add our gtm module. For example if we want to add our gtm module in our main.js file then inside our src folder we have to create&lt;br&gt;&lt;br&gt;
&lt;code&gt;overrides/venia-ui/components/Main/main.js&lt;/code&gt; and inside main.js we have to copy and paste the whole code from &lt;br&gt;
&lt;code&gt;node_modules/@magento/venia-ui/lib/components/Main/main.js&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step3"&gt;
  &lt;/a&gt;
  Step3:
&lt;/h2&gt;

&lt;p&gt;Now we have created our main.js file inside &lt;code&gt;src/overrides/venia-ui/components/Main&lt;/code&gt; we have to create an index.js file inside &lt;code&gt;Main&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\\index.js
export { default } from './main';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step4"&gt;
  &lt;/a&gt;
  Step4:
&lt;/h2&gt;

&lt;p&gt;Open your package.json file and inside your &lt;code&gt;"devDependencies"&lt;/code&gt; add "react-gtm-module" like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"react": "~17.0.1",
"react-dom": "~17.0.1",
"react-gtm-module": "~2.0.11",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open your terminal and type command &lt;code&gt;yarn install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step5"&gt;
  &lt;/a&gt;
  Step5:
&lt;/h2&gt;

&lt;p&gt;Now this is the main part where we have two options that either we add our react-gtm-module in our main.js directly or  create a new component inside &lt;code&gt;src/overrides/venia-ui/components/your-gtm-component-folder&lt;/code&gt; and then copy and paste the gtm-module code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Your gtm component.js
import React from "react"
import TagManager from 'react-gtm-module'

const tagManagerArgs = {
    gtmId: 'GTM-XXXXXXX'}

TagManager.initialize(tagManagerArgs)

const GoogleTagManager = () =&amp;gt; {

    window.dataLayer.push({

        event: 'MainPageView'

      });

return(
    &amp;lt;h1&amp;gt;Hello from GTM!&amp;lt;/h1&amp;gt;
)
}
export default GoogleTagManager
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create index.js file inside your gtm component folder and  write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\\index.js
export { default } from './your-gtm-component';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step6"&gt;
  &lt;/a&gt;
  Step6:
&lt;/h2&gt;

&lt;p&gt;Last but not least do not forget to import your gtm component inside your override main.js file and add it like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    return (
        &amp;lt;main className={rootClass}&amp;gt;
            &amp;lt;Header /&amp;gt;
            &amp;lt;YourGTMcomponent&amp;gt;
            &amp;lt;div className={pageClass}&amp;gt;{children}&amp;lt;/div&amp;gt;
            &amp;lt;Footer /&amp;gt;
        &amp;lt;/main&amp;gt;
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;References and helpful links: &lt;br&gt;
&lt;a href="https://dev.toPwa%20Studio"&gt;https://developer.adobe.com/commerce/pwa-studio/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.toFooman%20overrider"&gt;https://github.com/fooman/venia-ui-override-resolver&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.toreact-gtm-module"&gt;https://www.npmjs.com/package/react-gtm-module&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>gtm</category>
      <category>pwastudio</category>
      <category>magento</category>
    </item>
    <item>
      <title>The 4 Types of Side Hustles for Software Developers</title>
      <author>Rahul Banerjee</author>
      <pubDate>Thu, 23 Dec 2021 21:01:32 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/the-4-types-of-side-hustles-for-software-developers-e8i</link>
      <guid>https://dev.to/rahulbanerjee99/the-4-types-of-side-hustles-for-software-developers-e8i</guid>
      <description>&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;It's no secret that the job market is competitive. You need to stand out from the crowd in order to get noticed and nab an interview. But what if you're struggling with where to start? What should you do? The answer lies in your side hustle!&lt;/p&gt;

&lt;p&gt;A side hustle, or "hustle" for short, is any project or venture you take on outside of your day job (or night job) that provides supplemental income. It could be something as simple as making candles at home; it could also be a full-time business like running a bakery.&lt;/p&gt;

&lt;p&gt;Hustling is the act of making money outside of your 9-5 job or business. Side hustles are usually small ventures that provide supplemental income, but they can also turn into full-time gigs&lt;/p&gt;

&lt;p&gt;Either way, there are many ways for software developers to make money outside of their 9-5 work environment--and these four types may just pique your interest!&lt;/p&gt;

&lt;h3&gt;1) Freelancing&lt;/h3&gt;

&lt;p&gt;If you have any special skills or expertise, you may be able to turn them into an independent career by freelancing on sites like Upwork and Fiverr. In fact, this may be the perfect opportunity to utilize your coding skills! There are many people who need websites and apps developed, who also need graphics for logos or other marketing materials.&lt;/p&gt;

&lt;h3&gt;2) Teaching&lt;/h3&gt;

&lt;p&gt;Whether it's tutoring kids, coaching athletes, educating adults about finance, or just being a mentor for someone who needs support--the possibilities for teaching are endless! You could even teach people how to code or work with virtual assistants to grow their businesses.&lt;/p&gt;

&lt;p&gt;If you're an expert in a particular field, people may want to pay you for your advice! Or, they might hire someone else to do it but they still want to use your expertise so they ask for referrals. It's a win-win.&lt;/p&gt;

&lt;h3&gt;3) Consulting&lt;/h3&gt;

&lt;p&gt;Similar to freelancing, but with a longer-term consulting contract. This could involve providing expertise on everything from marketing to technology to human resources.&lt;/p&gt;

&lt;p&gt;This side hustle may be perfect for you if you have a knack for planning and developing strategies, but the idea of being stuck in an office all day doesn't appeal to you. Consulting can work around your schedule so it doesn't feel like another job! It just might be a good fit for you.&lt;/p&gt;

&lt;h3&gt;4) Creative Ventures&lt;/h3&gt;

&lt;p&gt;If you're creative and have a knack for arts and crafts, you could sell your products on sites like Etsy or at craft fairs. You also have the option of selling wholesale to other retailers--or even opening up your own brick-and-mortar store! It's not unheard of for software developers to make money with creative ventures.&lt;/p&gt;

&lt;p&gt;Not sure where to start? You can learn the basics by taking online courses, attending workshops, or even reading books about whatever your craft is. But whether you're writing a book or making candles at home, it's always best to put in the effort and do something. Here are a couple of websites you could look at&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.masterclass.com/" rel="noreferrer noopener"&gt;MasterClasss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.skillshare.com/" rel="noreferrer noopener"&gt;SkillShare&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's look at each of the side hustle in detail&lt;/p&gt;

&lt;h2&gt;Freelancing&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AoJk3QnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2021/12/pexels-photo-461064.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoJk3QnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2021/12/pexels-photo-461064.jpeg" alt="apple black coffee business coffee" width="880" height="587"&gt;&lt;/a&gt;Photo by Pixabay on &lt;a href="https://www.pexels.com/photo/apple-black-coffee-business-coffee-461064/" rel="nofollow"&gt;Pexels.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've been freelancing for about a year so far. I have written scripts for web scraping, data manipulation, testing, automation, etc. For all my tasks I have used Python.&lt;/p&gt;

&lt;p&gt;One of the best things about being a freelancer is that you're in charge of your own schedule. You'll never have someone looking over your shoulder telling you what to do or when you should be working. Freelancing means there are no set hours--you work on your project when you want to work on it, as long as it gets done!&lt;/p&gt;

&lt;p&gt;Freelancing isn't as easy as it seems, though. There's a lot that needs to go into freelancing--you need to learn how to write a proposal, what your ideal rate is, and how to market yourself.&lt;/p&gt;

&lt;p&gt;I wrote more about freelancing as a programmer on Upwork and talked about my earnings in the following article&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realpythonproject.com/how-to-start-freelancing-as-a-programmer-on-upwork/"&gt;https://www.realpythonproject.com/how-to-start-freelancing-as-a-programmer-on-upwork/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I didn't expect was the amount of rejection I would face during my first few months of freelancing...&lt;/p&gt;

&lt;p&gt;No one wants to hire you for projects either because they think you're too expensive or not experienced enough. So it takes time to build up a reputation and get people coming back asking for your services again and again!&lt;/p&gt;

&lt;p&gt;So don't get discouraged if you're not finding any gigs in the beginning. Keep trying, keep pushing, and eventually, people will recognize your name!&lt;/p&gt;

&lt;p&gt;Here are a few freelancing jobs that software developers can do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web scraping: Web scraping is the process of extracting data from websites. This can be done manually or with the help of a tool. A lot of companies require access to data available online but it might be tedious to do it manually. This is where you come in.&lt;/li&gt;
&lt;li&gt;Data collection: Data collection involves extracting data from various sources and organizing it into a spreadsheet or database.&lt;/li&gt;
&lt;li&gt;Web/app development: Developing websites or apps is a great way to use your coding skills. You can also offer consultation services to clients who need help getting their projects off the ground.&lt;/li&gt;
&lt;li&gt;Testing: Testing is an important part of the software development process. As a tester, you can find and report bugs, test new features, and provide feedback on products.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to get started with freelancing is to start building a portfolio of your work. This can include coding samples, illustrations, or logos that you have created. You can also join online communities or forums where you can find freelance work. Finally, make sure to market yourself effectively and be prepared to negotiate rates with clients.&lt;/p&gt;

&lt;p&gt;Some Platforms to find Freelance work&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/" rel="noreferrer noopener"&gt;Upwork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fiverr.com/" rel="noreferrer noopener"&gt;Fiverr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://contra.com/" rel="noreferrer noopener"&gt;Contra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.about.pangea.app/" rel="noreferrer noopener"&gt;Pangea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.topcoder.com/how-it-works/" rel="noreferrer noopener"&gt;TopCoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.guru.com/" rel="noreferrer noopener"&gt;Guru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freelancer.com/" rel="noreferrer noopener"&gt;Freelancer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Teaching&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VzaDkpWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2021/12/pexels-photo-301926.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VzaDkpWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2021/12/pexels-photo-301926.jpeg" alt="teach dice ornament on table" width="880" height="587"&gt;&lt;/a&gt;Photo by Pixabay on &lt;a href="https://www.pexels.com/photo/teach-dice-ornament-on-table-301926/" rel="nofollow"&gt;Pexels.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Teaching is a great way for Software Developers to earn a little extra money on the side. You can teach anyone from your own house or through the internet using an app or website. One of the best ways to find teaching jobs is through online communities and forums where people are looking for mentors. You can also create marketing materials like logos, illustrations, and coding samples as your portfolio.&lt;/p&gt;

&lt;p&gt;There are many options when it comes to teaching, such as teaching one-on-one, through Skype, or on software websites like &lt;a href="https://www.codementor.io/" rel="noreferrer noopener"&gt;Code Mentor&lt;/a&gt;. Some say that teaching an adult is more difficult than children but there's no challenge that can't be overcome!&lt;/p&gt;

&lt;p&gt;I never thought I would be teaching anyone stuff related to software development--and especially anyone older than myself. But here I am with a paid online student already and blogs on WordPress, Medium, and Dev. to with more than 20k monthly views.&lt;/p&gt;

&lt;p&gt;There are many ways for software developers to teach coding. One way is to create tutorials on YouTube. You can also create tutorials on sites like Udemywhich is a video-based platform. You can make videos illustrating your favorite coding languages or use them for subjects experienced with.&lt;/p&gt;

&lt;p&gt;Another way to teach coding is by writing articles about programming. This can help people learn more about coding, and you can also share your knowledge and expertise with others. Another great way to teach coding is 1-on-1 teaching. You can work with students one-on-one and help them learn how to code. Finally, you can also tutor university students in coding. This can be a great way to help students learn more about coding, and you can also help your mentorship skills.&lt;/p&gt;

&lt;p&gt;Starting out with teaching can be hard. To help you get started, here are some tips for teaching coding to others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a website where you're hosting your tutorials.&lt;/li&gt;
&lt;li&gt;Publish content on your won blog and cross-post on sites like Medium and &lt;a href="https://dev.to/" rel="noreferrer noopener"&gt;Dev.to &lt;/a&gt;for beginners to learn how to code. This will promote your site and you might even make some money in the process!&lt;/li&gt;
&lt;li&gt;Make videos for the articles you wrote about and post them on Youtube.&lt;/li&gt;
&lt;li&gt;Write articles about coding skills that you have gained through experience or research. Sharing knowledge with others is one of the best ways to learn!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initially, your content might not get a lot of views or interaction but don't give up. The hardest part of the journey is to begin the journey. Once you have an online presence, you will notice people are approaching you to teach them.&lt;/p&gt;

&lt;p&gt;Some Platforms to find Mentoring Opportunities&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.sharpestminds.com/" rel="noreferrer noopener"&gt;SharpestMinds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codementor.io/" rel="noreferrer noopener"&gt;Code Mentor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codingcoach.io/" rel="noreferrer noopener"&gt;Coding Coach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mentorcruise.com/filter/coding/" rel="noreferrer noopener"&gt;Mentor Cruise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exercism.org/" rel="noreferrer noopener"&gt;Exercism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wyzant.com/" rel="noreferrer noopener"&gt;Wyzant&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Consulting&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6w8hjA__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2021/12/pexels-photo-3760067.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6w8hjA__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2021/12/pexels-photo-3760067.jpeg" alt="crop businessman giving contract to woman to sign" width="880" height="587"&gt;&lt;/a&gt;Photo by Andrea Piacquadio on &lt;a href="https://www.pexels.com/photo/crop-businessman-giving-contract-to-woman-to-sign-3760067/" rel="nofollow"&gt;Pexels.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consulting for software developers can be a lucrative way to make money. In many cases, you can charge by the hour or even by the project. This gives you the flexibility to work on your own schedule and to choose the projects that you want to work on. It can also be a great way to get experience and to learn new things. The downside is that it can be hard to get enough projects to make a living, and you might feel overqualified for the ones that do come your way.&lt;/p&gt;

&lt;p&gt;Personally, I do not have any experience with consulting since most consulting tasks will require you to be a domain expert or have a good amount of experience in a specific niche. This is where most of the challenges will come in since you would be expected to deliver great results. It may take practice, trial, and error with some failed projects before you can successfully complete a project on time and on budget.&lt;/p&gt;

&lt;p&gt;If you're interested in starting a consulting side hustle as a software developer, then there are a few things you can do to get started. The first is to create a website or blog where you can showcase your work. This will help potential clients learn more about you and what you can offer. You can also write articles about your experience and expertise in coding. This can help you build credibility and attract potential clients. Another great way to get started is to join online communities or forums where people post projects that need to be completed. This can give you an idea of the types of projects that are available and what clients are looking for. It can also help you find potential clients who might need your services.&lt;/p&gt;

&lt;p&gt;Finally, you can join freelancing platforms like &lt;a href="https://www.upwork.com/" rel="noreferrer noopener"&gt;Upwork&lt;/a&gt;, &lt;a href="https://www.freelancer.com/" rel="noreferrer noopener"&gt;Freelancer&lt;/a&gt;, and &lt;a href="https://www.guru.com/" rel="noreferrer noopener"&gt;Guru&lt;/a&gt;. This is where you will find the most opportunities because more people are looking for work on these sites. However, you'll also have to compete with other developers who are trying to get your spot in the market so it's important to stand out.&lt;/p&gt;

&lt;p&gt;Another way for you to find work is to create projects of your own. This gives clients the opportunity to see what you can do so they can determine if they want to hire you or not. You don't have to offer your services right away, but having a portfolio with finished projects is one of the best ways to get noticed.&lt;/p&gt;

&lt;h2&gt;Creative Ventures&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxUwjhDP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2021/12/pexels-photo-8369590.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxUwjhDP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2021/12/pexels-photo-8369590.jpeg" alt="assorted stickers on the table" width="880" height="587"&gt;&lt;/a&gt;Photo by RODNAE Productions on &lt;a href="https://www.pexels.com/photo/assorted-stickers-on-the-table-8369590/" rel="nofollow"&gt;Pexels.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your side hustle doesn't have to involve software development at all. If you are good at vector art, graphic design, or illustrating, consider selling your services. If you're talented with Adobe Photoshop, you can create custom covers for people's self-published novels. If you're good at website design with Wix or Squarespace, create a portfolio site that shows off your skills to potential employers or customers. You can also start selling cool stickers or posters targeted towards developers. These could include programming jokes and stuff like that.&lt;/p&gt;

&lt;p&gt;There are also many online services that can help find paid gigs for artists such as the ones listed in the Freelancers section of this article. Personally, I tried selling stuff on Etsy and it didn't work out well for me. However, I did not put in much effort and gave up after a few days.&lt;/p&gt;

&lt;p&gt;Managing a company's social media accounts can also be a great way to earn some extra money. You could help create or manage social media campaigns, develop or design graphics, or even help write posts! If you already have a huge following on websites like Tiktok, that's a huge plus for you.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you found some value in this article. It doesn't matter which side hustle or platform you chose, just choose one and be patient and consistent. Let me know your experience with other side hustles. If you want some tips to get started as a software developer in 2022, check out my article below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realpythonproject.com/some-tips-to-get-hired-as-a-software-developer-in-2022/"&gt;https://www.realpythonproject.com/some-tips-to-get-hired-as-a-software-developer-in-2022/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sideprojects</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Anyone want to join a JavaScript Book Club?</title>
      <author>Jonathan Jackson</author>
      <pubDate>Thu, 23 Dec 2021 20:41:51 +0000</pubDate>
      <link>https://dev.to/jondevops/anyone-want-to-join-a-javascript-book-club-3pap</link>
      <guid>https://dev.to/jondevops/anyone-want-to-join-a-javascript-book-club-3pap</guid>
      <description></description>
      <category>javascript</category>
      <category>bookclub</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Optimize React Application Performance</title>
      <author>Iftakher Hossen</author>
      <pubDate>Thu, 23 Dec 2021 20:16:39 +0000</pubDate>
      <link>https://dev.to/iftakher_hossen/optimize-react-application-performance-467d</link>
      <guid>https://dev.to/iftakher_hossen/optimize-react-application-performance-467d</guid>
      <description>&lt;p&gt;Today we will learn about Optimize React Application Performance in this tutorial.&lt;/p&gt;

&lt;p&gt;React.Js is an open-source JavaScript UI library for building user interfaces. Nowadays React is the most popular for frontend design. It’s especially used to building single-page applications. You can create large applications in React that can transform data without reloading the page. The main purpose of React is fast, scalable, and simple. Literally, React has the ability to use several clever technics to minimize costly DOM operations required to update the UI. But for some large applications, you need to optimize your React application performance. There are several ways to speed up your React applications, let’s learn about them -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Immutable Data Structures&lt;/strong&gt; - Data immutability is an inflexible way of writing code. It has many benefits such as Zero side effects, Easier to track changes, Simpler to create, test and use.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Production Build&lt;/strong&gt; - If you are experiencing performance problems in React assure that you are testing with the minified production build.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dependency Optimization&lt;/strong&gt; - It means removing the methods/functions that you never used in your application. It will optimize the bundle size.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memorize React Components&lt;/strong&gt; - Use the &lt;code&gt;useMemo()&lt;/code&gt; hook to memorize/store the expensive functions result to use when the same input occurs again.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Animations&lt;/strong&gt; - There are many packages/libraries for Animations. So don’t use CSS Animations instead use those libraries or packages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid using Index as key&lt;/strong&gt; - Using the key as the index can show wrong data as it is being used to identify DOM elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;React.PureComponent&lt;/strong&gt; - React.PureComponent optimizes components by reducing wasted renders.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Virtualize Long List&lt;/strong&gt; - It’s a way to improve performance when rendering a long list of data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Server-Side Rendering&lt;/strong&gt; - Server-side rendered applications have a better user experience because users receive viewable content faster than client-side rendered applications. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lazy Loading&lt;/strong&gt; - If you use numerous images in an application then you should use Lazy Loading to avoid rendering all of the images at once to improve the page load time. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple Chunk Files&lt;/strong&gt; - If you split your large files into smaller files it will help the browser to catch less and reduce loading time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reselect in Redux&lt;/strong&gt; - It’s a simple selector library for Redux, it’s used for building memorized selectors.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Using a CDN&lt;/strong&gt; - CDN delivers static content more quickly and efficiently.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web Worker&lt;/strong&gt; - JavaScript is single-threaded. To prevent slowed/ blocked down, web workers run a script in background threads. We can create &amp;amp; run it parallel to the main thread without hampering the UI flow. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;useCallback()&lt;/code&gt;&lt;/strong&gt; - It’s same like &lt;code&gt;useMemo()&lt;/code&gt; but &lt;code&gt;useMemo()&lt;/code&gt; memorize the results and &lt;code&gt;useCallback()&lt;/code&gt; memorize the function declarations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many ways to optimize a react application. You have to know the core concepts about React after optimization. Optimization without measuring is almost premature, so you should measure performance first so that you can easily figure it out.&lt;/p&gt;

&lt;p&gt;Thanks for reading this tutorial.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Event notifications provide information and integrations</title>
      <author>Phil Hawksworth</author>
      <pubDate>Thu, 23 Dec 2021 20:01:22 +0000</pubDate>
      <link>https://dev.to/netlify/event-notifications-provide-information-and-integrations-341n</link>
      <guid>https://dev.to/netlify/event-notifications-provide-information-and-integrations-341n</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Throughout December we'll be &lt;a href="https://dev.to/blog/2021/12/01/highlighting-a-different-netlify-feature-each-day-in-december/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;highlighting a different Netlify feature each day&lt;/a&gt;. It might just be the thing you need to unlock those creative juices, and &lt;a href="https://www.netlify.com/blog/2021/12/01/dusty-domains-your-forgotten-domains-raise-money-for-charity/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;dust off that domain&lt;/a&gt; you registered but never deployed! Keep an eye &lt;a href="https://www.netlify.com/blog/2021/12/01/highlighting-a-different-netlify-feature-each-day-in-december/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;on the blog&lt;/a&gt; and on &lt;a href="https://twitter.com/netlify"&gt;Twitter&lt;/a&gt; for each feature!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Knowledge is power! &lt;/p&gt;

&lt;p&gt;Knowing what events have taken place in your Netlify project, and being able to trigger actions based on those events, is pretty bloomin’ powerful too!&lt;/p&gt;

&lt;p&gt;Netlify creates a variety of events throughout the lifecycle of your site deployments and for other services we provide for your sites, such as form submissions. Each of these events can create notifications and trigger actions elsewhere.&lt;/p&gt;

&lt;p&gt;Combining tools and services using events and triggers opens up all kinds of fun possibilities for your projects!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icUT4nLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.netlify.com/images/site-deploys-outgoing-notifications.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icUT4nLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.netlify.com/images/site-deploys-outgoing-notifications.png" alt="Notification options" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-happening"&gt;
  &lt;/a&gt;
  What's happening?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/blog/2021/12/16/accepting-form-submissions-without-a-server/"&gt;Somebody submitted data&lt;/a&gt; to one of your forms? &lt;a href="https://docs.netlify.com/forms/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;We’ll let you know.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to be notified if your site has been deployed, or if a deployment has failed? &lt;a href="https://docs.netlify.com/site-deploys/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;We have notifications for that.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to know if a pull request has triggered a build? &lt;a href="https://docs.netlify.com/site-deploys/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;Yep, we can let you know that too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a list of events related to builds and deploys that we can inform you about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Deploy started&lt;/strong&gt;: Emitted when Netlify starts building your site for a new deploy.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deploy succeeded&lt;/strong&gt;: Emitted when Netlify finishes uploading a new deploy to our CDN.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deploy failed&lt;/strong&gt;: Emitted when a deploy does not complete.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deploy locked&lt;/strong&gt;: Emitted when the site is &lt;a href="https://docs.netlify.com/site-deploys/manage-deploys/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications#locked-deploys"&gt;locked to a published deploy&lt;/a&gt;, stopping auto publishing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deploy unlocked&lt;/strong&gt;: Emitted when deploys are unlocked, resuming auto publishing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deploy request pending&lt;/strong&gt;: Emitted when an untrusted deploy requires approval to begin building, as specified by the site’s &lt;a href="https://docs.netlify.com/configure-builds/environment-variables/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications#sensitive-variable-policy"&gt;sensitive variable policy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deploy request accepted&lt;/strong&gt;: Emitted when an untrusted deploy request is accepted and can begin building.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deploy request rejected&lt;/strong&gt;: Emitted when an untrusted deploy request is rejected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More event notification details can be found &lt;a href="https://docs.netlify.com/monitor-sites/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;in the docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-notifications"&gt;
  &lt;/a&gt;
  Types of notifications
&lt;/h2&gt;

&lt;p&gt;All of these events can trigger notifications. And you can configure what type of notification you receive for each event. Notification types include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications#outgoing-webhooks"&gt;Outgoing webhooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.netlify.com/site-deploys/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications#github-commit-checks"&gt;GitHub commit checks&lt;/a&gt; and &lt;a href="https://docs.netlify.com/site-deploys/notifications/#github-pull-request-comments"&gt;GitHub pull request comments&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.netlify.com/site-deploys/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications#gitlab-commit-statuses"&gt;GitLab commit statuses&lt;/a&gt; and &lt;a href="https://docs.netlify.com/site-deploys/notifications/#gitlab-merge-request-comments"&gt;GitLab merge request comments&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications#slack-notifications"&gt;Slack notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications#email-notifications"&gt;Email notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/monitor-sites/notifications/"&gt;and more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More information
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/notifications/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;Docs: Deploy notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netlify.com/blog/2016/07/18/shiny-slack-notifications-from-netlify/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=notifications"&gt;Shiny Slack Notifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>netlify</category>
      <category>notifications</category>
      <category>events</category>
    </item>
  </channel>
</rss>
