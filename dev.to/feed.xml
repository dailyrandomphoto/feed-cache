<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Ruby 101: Strings</title>
      <author>Eric Chapman</author>
      <pubDate>Sun, 25 Apr 2021 00:42:42 +0000</pubDate>
      <link>https://dev.to/ericchapman/ruby-101-strings-2l0n</link>
      <guid>https://dev.to/ericchapman/ruby-101-strings-2l0n</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP and Ruby. By far Ruby is my favorite programming language. Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;h2&gt;You want to learn Ruby or your Ruby is a bit rusty?&lt;/h2&gt; 

&lt;p&gt;In this series we will start from the beginning and will learn every aspect of Ruby one step at a time. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Strings Declaration&lt;/h2&gt;

&lt;p&gt;String variable represent any text data. A key point for the syntax of strings declaration is that they have to be enclosed in single or double quotes. The program will throw an error if they are not wrapped inside quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Bad&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Mike&lt;/span&gt; &lt;span class="c1"&gt;# Will throw a error&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Mike"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Number can also be represent as string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;text_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"45"&lt;/span&gt;
&lt;span class="n"&gt;number_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable text_age is a string variable. It cannot be process in Ruby as a number like be use in addition or multiplication etc. &lt;/p&gt;

&lt;p&gt;The number_age variable is integer number so that variable can be part of any Ruby number manipulations methods.&lt;/p&gt;

&lt;h2&gt;String Interpolation&lt;/h2&gt;

&lt;p&gt;String interpolation is replacing placeholders with values in a string literal. &lt;/p&gt;

&lt;p&gt;For string interpolation to work. String have to be wrapped inside double quotation mark. Here a example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 
&lt;span class="c1"&gt;# Hello Mike&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the last code snippet, the message variable will be process by Ruby before assignment. The #{name} placeholder will be replace by the containing variable value.&lt;/p&gt;

&lt;p&gt;Inside placeholder #{} any Ruby expression can be use...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Your age in 2 years will be &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;# Your age in 2 years will be 47&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;In Ruby everything is an object!&lt;/h2&gt;

&lt;p&gt;You maybe have ear this before. What that mean for us the developer?&lt;/p&gt;

&lt;p&gt;First, what is an object? An object refers to a particular instance of a class with their own methods and properties.&lt;/p&gt;

&lt;p&gt;In Ruby type are define as classes, so for example if you have a string variable, it's an instance of the String class.&lt;/p&gt;

&lt;p&gt;For example take this variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This 'message' variable will be dynamically type by Ruby as a string. That string is a class. So message is an instance of the class string. &lt;/p&gt;

&lt;p&gt;In Ruby the String class already have many methods to help do basic and advance string manipulations.&lt;/p&gt;

&lt;p&gt;That's also mean that 'message' variable will inherits all the methods and properties of his parent class (String).&lt;/p&gt;

&lt;p&gt;Example of method call (syntax: object.method)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="c1"&gt;# MIKE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'upcase' is a method of the String class. This method convert all the string characters to uppercase.&lt;/p&gt;

&lt;p&gt;For now if you don't understand all that class instance thing THAT'S NORMAL! We will cover class and object later. &lt;/p&gt;

&lt;p&gt;The only thing we need to understand for now is variable like a string variable have methods we can call to do some stuff automatically.&lt;/p&gt;

&lt;p&gt;Here are some string methods available in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="c1"&gt;# MIKE&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
&lt;span class="c1"&gt;# mike&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;
&lt;span class="c1"&gt;# Mike&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
&lt;span class="c1"&gt;# ekiM&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;
&lt;span class="c1"&gt;# 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look how those methods name are self descriptive. We do not need any comments and any explanation to understand what each method do... Welcome to Ruby world!&lt;/p&gt;

&lt;h2&gt;More String methods&lt;/h2&gt;

&lt;p&gt;Now that we understand the basic we will start to learn more advance string methods. &lt;/p&gt;

&lt;h3&gt;The sub and gsub method&lt;/h3&gt;

&lt;p&gt;Ruby have a handy string method to replace part of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The sky is blue'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;
&lt;span class="c1"&gt;# The sky is red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the method call have no parentheses to enclose parameters. In Ruby those are optionals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Valid&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;

&lt;span class="c1"&gt;# Also valid&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The convention is to omit the parentheses unless the code seem clearer with them.&lt;/p&gt;

&lt;p&gt;The sub method replace the first occurrence. The gsub method replace all the occurrences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The sky is blue and the car is also blue'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;
&lt;span class="c1"&gt;# The sky is red and the car is also red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Strip method&lt;/h3&gt;

&lt;p&gt;Remove white space before or after string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'  Welcome to Ruby World  '&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;
&lt;span class="c1"&gt;# 'Welcome to Ruby World'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Chaining methods&lt;/h3&gt;

&lt;p&gt;It is possible to chain string methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'   Mike Taylor '&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Paul'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
&lt;span class="c1"&gt;# paul taylor&lt;/span&gt;
&lt;span class="c1"&gt;# In that specific situation, using the parentheses make the code easier to read&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercice&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input the user name and store the result in a variable&lt;/li&gt;
&lt;li&gt;Input the user password and store the result in a variable&lt;/li&gt;
&lt;li&gt;Remove password before or after white space&lt;/li&gt;
&lt;li&gt;Convert the password to lowercase&lt;/li&gt;
&lt;li&gt;Display user name and password but replace the password letter 'e' with a star
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter user name: _Mike
Enter user password: _secret

The user name is Mike and his password is s*cr*t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user password: '&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The user name is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and his password is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
    </item>
    <item>
      <title>6 Great podcasts for Frontend Developers
</title>
      <author>Jordi Enric</author>
      <pubDate>Sat, 24 Apr 2021 22:57:30 +0000</pubDate>
      <link>https://dev.to/jordienr/6-great-podcasts-for-frontend-developers-1mf5</link>
      <guid>https://dev.to/jordienr/6-great-podcasts-for-frontend-developers-1mf5</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@juja_han?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Juja Han&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/podcast?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyxsuNaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://layout.fm/static/ccbda74b7edb4fd36bcc1c900e1ebfba/46604/artwork-spec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyxsuNaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://layout.fm/static/ccbda74b7edb4fd36bcc1c900e1ebfba/46604/artwork-spec.png" alt="Layout.fm logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layoutfm"&gt;
  &lt;/a&gt;
  Layout.fm
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://layout.fm/"&gt;https://layout.fm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A weekly podcast about design, technology, programming and everything else.&lt;br&gt;
By @rafahari previously Netlify, currently superlist.com and &lt;br&gt;
 @vernalkick Senior UX Manager at @Shopify&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--khsdOYVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dbs.radioline.fr/pictures/podcast_774f88f5bf8f3aad35d8a0d8c8918a21/logo200.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--khsdOYVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dbs.radioline.fr/pictures/podcast_774f88f5bf8f3aad35d8a0d8c8918a21/logo200.jpg" alt="Codepen Radio Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codepen-radio"&gt;
  &lt;/a&gt;
  Codepen Radio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.codepen.io/radio/"&gt;https://blog.codepen.io/radio/&lt;/a&gt;&lt;br&gt;
Chris Coyier, Alex Vazquez, and Tim Sabat, the co-founders of CodePen talk about the ins and outs of running a web software business.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpqgdkt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.sndcdn.com/avatars-000287353351-tdlqh4-t240x240.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpqgdkt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.sndcdn.com/avatars-000287353351-tdlqh4-t240x240.jpg" alt="Frontend HH Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-happy-hour"&gt;
  &lt;/a&gt;
  Frontend Happy Hour
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://frontendhappyhour.com/"&gt;http://frontendhappyhour.com/&lt;/a&gt;&lt;br&gt;
A podcast featuring a panel of Software Engineers from Netflix, Twitch, &amp;amp; Atlassian talking over drinks about all things Front End development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnR0mn8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1143042724070907904/a0IYZ0uW.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnR0mn8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1143042724070907904/a0IYZ0uW.jpg" alt="Ladybug Podcast Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ladybug"&gt;
  &lt;/a&gt;
  Ladybug
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.ladybug.dev/"&gt;https://www.ladybug.dev/&lt;/a&gt;&lt;br&gt;
By Kelly Vaughn, Emma Bostian, Sidney Buckner &amp;amp; Ali Spittel share their thoughts and stories from working in tech. They also share some really fun and interesting interviews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4ob5cnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/875075946096676864/MEEwGMpY.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4ob5cnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/875075946096676864/MEEwGMpY.jpg" alt="Syntax FM Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax-fm"&gt;
  &lt;/a&gt;
  Syntax FM
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://syntax.fm/"&gt;https://syntax.fm/&lt;/a&gt;&lt;br&gt;
By Wes Bos &amp;amp; Scott Tolinski&lt;br&gt;
"Full Stack Developers Wes Bos and Scott Tolinski dive deep into web development topics, explaining how they work and talking about their own experiences."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3UGRKNgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.scdn.co/image/88ca4712d7edf416343a6b4ffd5d2b5b7f111a9b" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3UGRKNgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.scdn.co/image/88ca4712d7edf416343a6b4ffd5d2b5b7f111a9b" alt="Fullstack Radio Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fullstack-radio"&gt;
  &lt;/a&gt;
  Fullstack Radio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fullstackradio.com/"&gt;https://fullstackradio.com/&lt;/a&gt;&lt;br&gt;
A podcast for developers interested in building great software products. Hosted by Adam Wathan.&lt;/p&gt;

&lt;p&gt;And that's it! If you ask me my favorite I recommend Frontend Happy Hour.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; or subscribe to my newsletter for more resources and tools for Frontend Developers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zero-to-frontend"&gt;
  &lt;/a&gt;
  &lt;a href="https://zerotofrontend.dev/"&gt;Zero to Frontend&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Cool CSS tips And Tricks</title>
      <author>Kinanee Samson</author>
      <pubDate>Sat, 24 Apr 2021 22:49:40 +0000</pubDate>
      <link>https://dev.to/kalashin1/cool-css-tips-and-tricks-5bd8</link>
      <guid>https://dev.to/kalashin1/cool-css-tips-and-tricks-5bd8</guid>
      <description>&lt;p&gt;Good day guys, css is to a website what beauty is to a woman and you cannot get away with writing bad css, i'm going to share with you some cool css tips and tricks today. I saw a video on youtube that &lt;a href="//fireship.io/tags/css"&gt;fireship.io&lt;/a&gt; made on a similar topic, i learnt some cool css tips that can make writing css much easier. There are also a few tips i use personally, i thought i should share with you guys, let's get to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-variables"&gt;
  &lt;/a&gt;
  Use Variables
&lt;/h3&gt;

&lt;p&gt;You wouldn't believe it but if you can define some variables in your CSS that will hold a certain value that you might use in more than one rule or over several lines. Rather than hard coding the value each time, you can just call the variable, Later you can just change the value of the variable and it will take effect in all rules it is used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* syntax */&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;/* example */&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;
&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--danger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--danger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--min-width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a simple use case but it might come in hand when you want to manage your css file, maybe update or change something, you can just do that once and it takes effect over multiple lines rather than manually having to change all values by yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clamp-function"&gt;
  &lt;/a&gt;
  Clamp function
&lt;/h3&gt;

&lt;p&gt;In the example above i used media queries, but css now has a clamp function that will reduce the amount of media queries in your code. The clamp function accepts three values, the first is the lowest possible value, the next is the default value while the last is the maximum value. As the screen size changes the values will automatically switch, with the minimum being used for small screen sizes while the maximum for large screens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;font-Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* rather than */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nc"&gt;.foo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* and again, thank God for clamp() */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-relative-units"&gt;
  &lt;/a&gt;
  use relative units
&lt;/h3&gt;

&lt;p&gt;Keeping in mind that your website needs to be as responsive as hell, you should do away with static units like px, inch or cm and use rems, ems as much as possible, you can combime this with the clamp function to achieve heaven while writing css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="n"&gt;rem&lt;/span&gt; &lt;span class="c"&gt;/* and now its fully fluid */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And relative units are not only em and rem, you have fr, which represents a fraction of a container size although you can only use this with grid, talking about grids.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-grid-for-layout"&gt;
  &lt;/a&gt;
  using Grid for layout
&lt;/h3&gt;

&lt;p&gt;If you still use floats or table to define a grid system for your web project then you should be hanging out with internet explorer. Css has a grid value that you pass to the display property and now you have god like control over the structure of your layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;john&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;doe&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* grid container */&lt;/span&gt;
&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* this specifies the width of each item in the grid */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is more to css grid than i can explain here because that would take us outside the scope of this article and it deserves it's own article so i might make one in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-emoji-characters-for-class-names"&gt;
  &lt;/a&gt;
  using emoji characters for class names
&lt;/h3&gt;

&lt;p&gt;This might sound wierd but you should probably use emoji characters as your class names to style up your elements rather than using complex class names that might lead to typos or is too long and disconnected from what you're tying to style, emoji characters are short and there's no spelling anything so the risk of making a typo is virtually eliminated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"😂"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Foo bar
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;😂&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will agree with me thst this is shorter and makes reviewing your code much more fun.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exadiv"&gt;
  &lt;/a&gt;
  exadiv
&lt;/h3&gt;

&lt;p&gt;This is a chrome extension you can download from the chrome web store and it's totally free, you can click on an element and exadiv will give you a rundown of the styles of that element. I use this a lot when i want to copy some styles from another website. It also highlights the element so you can see it's width, border and padding. It will really increase your css skills and make you more productive, so you should definitely try it out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visbug"&gt;
  &lt;/a&gt;
  visbug
&lt;/h3&gt;

&lt;p&gt;This is another chrome extension and this also gives u god-like control over the elements on a website, you can use this extension to visually interact with a website and do stuffs like drag an element to a new position, see the styles associated with the element, change its z-index with button press on your keyboard, measure the element, see it's box-model representation and more. It might take you some time to learn all the features of the extension but it is worth having and i would advice you to get it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#colorsco"&gt;
  &lt;/a&gt;
  colors.co
&lt;/h3&gt;

&lt;p&gt;This is an amazing website that can help you generate a color palette that you can use accross your application, it has a fun to use UI and you can just press space on your pc to generate a random color, once you find one you like, you can lock it in and continue till you have your palette all selected, then you can download it as an image or svg or pdf, or whatever format suits you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-scss-instead-of-css"&gt;
  &lt;/a&gt;
  write SCSS instead of CSS
&lt;/h3&gt;

&lt;p&gt;SCSS is to CSS what TypeScript is to javascript, all valid CSS is valid SCSS because it compiles down to CSS. And like TypeScript, browsers cannot directly understand SCSS so we need to compile it to CSS, we can easily do that from vs code by installing SCSS compiler extension from the vs code extension marketplace. I will not go into SCSS here because it is outsids the scope of this article but if you want to learn about SCSS then you should check &lt;a href="//thenetninja.co.uk"&gt;the net ninja scss tutorial&lt;/a&gt; on youtube.&lt;/p&gt;

&lt;p&gt;That's it for this article, i hope you find it useful, untill the next one it's bye for now. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tracking processes with htop</title>
      <author>Murillo Pereira de Carvalho</author>
      <pubDate>Sat, 24 Apr 2021 22:22:45 +0000</pubDate>
      <link>https://dev.to/murillopereirac/tracking-processes-with-htop-1g2h</link>
      <guid>https://dev.to/murillopereirac/tracking-processes-with-htop-1g2h</guid>
      <description>&lt;p&gt;The htop is a viewer tool processes and interactive processes manager. It is designed as an alternative to the top Unix program. It shows an updated list of processes running on a computer, usually ordered by the amount of CPU usage.&lt;/p&gt;

&lt;p&gt;more about: &lt;a href="https://bit.ly/2QVbTeK"&gt;https://bit.ly/2QVbTeK&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>shell</category>
    </item>
    <item>
      <title>Instant Ubuntu VMs – Multipass
</title>
      <author>Murillo Pereira de Carvalho</author>
      <pubDate>Sat, 24 Apr 2021 22:19:04 +0000</pubDate>
      <link>https://dev.to/murillopereirac/instant-ubuntu-vms-multipass-5a6k</link>
      <guid>https://dev.to/murillopereirac/instant-ubuntu-vms-multipass-5a6k</guid>
      <description>&lt;p&gt;Multipass é uma ferramenta para lançar e gerenciar VMs no Windows, Mac e Linux que simula um ambiente de nuvem com suporte para cloud-init. Obtenha o Ubuntu sob demanda com integração limpa ao seu IDE e controle de versão em sua plataforma nativa.&lt;/p&gt;

&lt;p&gt;Para saber mais: &lt;a href="https://bit.ly/3sOtvpZ"&gt;https://bit.ly/3sOtvpZ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>linux</category>
      <category>snap</category>
    </item>
    <item>
      <title>Git tip: get back to work after a revert on master </title>
      <author>Guillaume Gautreau</author>
      <pubDate>Sat, 24 Apr 2021 22:02:28 +0000</pubDate>
      <link>https://dev.to/ghusse_/git-tip-get-back-to-work-after-a-revert-on-master-2gji</link>
      <guid>https://dev.to/ghusse_/git-tip-get-back-to-work-after-a-revert-on-master-2gji</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ozl4wOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/903inki3qfkgkp8efgeq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ozl4wOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/903inki3qfkgkp8efgeq.jpg" alt="Git diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shit happens.&lt;/p&gt;

&lt;p&gt;Sometimes, a &lt;strong&gt;sneaky bug&lt;/strong&gt; hid itself into the beautiful change you worked on. It even flew below unit tests' radars and tiptoed without being noticed during manual tests.&lt;/p&gt;

&lt;p&gt;Now, this nasty &lt;strong&gt;bug&lt;/strong&gt; is live in production and &lt;strong&gt;EVERYONE notices it&lt;/strong&gt;, you have to &lt;strong&gt;revert&lt;/strong&gt; your changes from master. 😢 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%86%A9-the-revert"&gt;
  &lt;/a&gt;
  ↩ The revert
&lt;/h2&gt;

&lt;p&gt;Ok, this is the time where you revert your code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Assuming that you have to create a PR&lt;/span&gt;
&lt;span class="c"&gt;# for the revert&lt;/span&gt;
git checkout master
git pull
git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; fix/revert-superb-change
git revert HASH-OF-MERGE-COMMIT
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin fix/revert-superb-change
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once your PR gets approved, your revert just cancelled everything that was in your cool change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#work-on-a-fix"&gt;
  &lt;/a&gt;
  👷 Work on a fix
&lt;/h2&gt;

&lt;p&gt;At this point, the easiest thing to do is to just make a fix on the branch containing all your changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout feat/superb-change
&lt;span class="c"&gt;# Work on a fix&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"fix: sneaky bug"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#omg-if-i-merge-master-on-my-branch-i-lose-almost-all-my-work"&gt;
  &lt;/a&gt;
  😨 OMG, if I merge master on my branch, I lose almost all my work
&lt;/h2&gt;

&lt;p&gt;That's it, if you want to prepare your branch to be merged again on master, you'll face another problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Master contains a commit that &lt;strong&gt;removes&lt;/strong&gt; the work from your branch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you merge master into your feature branch as usual, it will actually remove a large proportion of your changes on your branch. 🤯 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#merge-mastery-to-the-rescue"&gt;
  &lt;/a&gt;
  🚒 Merge mastery to the rescue
&lt;/h2&gt;

&lt;p&gt;This is the trick: you can &lt;strong&gt;tell git&lt;/strong&gt; that a particular commit &lt;strong&gt;had been merged&lt;/strong&gt; &lt;strong&gt;without&lt;/strong&gt; actually &lt;strong&gt;merging it&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout feat/superb-change

&lt;span class="c"&gt;# This will allow you to apply all &lt;/span&gt;
&lt;span class="c"&gt;# changes between your first merge &lt;/span&gt;
&lt;span class="c"&gt;# and the revert, if any&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# ⚠ It's important to carefully choose&lt;/span&gt;
&lt;span class="c"&gt;# the commit JUST BEFORE the revert commit&lt;/span&gt;
git merge HASH-OF-COMMIT-JUST-BEFORE-REVERT

&lt;span class="c"&gt;# This is how you tell git to merge&lt;/span&gt;
&lt;span class="c"&gt;# without really merging the revert&lt;/span&gt;
git merge HASH-OF-REVERT-COMMIT &lt;span class="nt"&gt;--strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ours
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The option &lt;code&gt;--strategy=ours&lt;/code&gt; tells git to keep all our &lt;strong&gt;current changes&lt;/strong&gt; when merging. &lt;/p&gt;

&lt;p&gt;It means that it will only &lt;strong&gt;record&lt;/strong&gt; the merge &lt;strong&gt;without changing anything&lt;/strong&gt; in your branch.&lt;/p&gt;

&lt;p&gt;It's important to note that you should first merge all changes made &lt;strong&gt;before the revert&lt;/strong&gt; in order to correctly apply them. This way, only the revert will be merged without changes on your code.&lt;/p&gt;

&lt;p&gt;Once everything had been done, you can proceed as usual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Will merge all changes made after the revert&lt;/span&gt;
git merge master
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, your branch is ready to be merged into master, with all your changes!&lt;/p&gt;




&lt;p&gt;&lt;small&gt;Thanks to &lt;a href="https://gist.github.com/bryanbraun"&gt;@bryanbraun&lt;/a&gt; for his awesome &lt;a href="https://gist.github.com/bryanbraun/8c93e154a93a08794291df1fcdce6918"&gt;git diagram template&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

</description>
      <category>git</category>
    </item>
    <item>
      <title>Ferramentas para desenvolvedores web</title>
      <author>Patrick</author>
      <pubDate>Sat, 24 Apr 2021 21:33:55 +0000</pubDate>
      <link>https://dev.to/patrickwilker/ferramentas-para-desenvolvedores-web-59fb</link>
      <guid>https://dev.to/patrickwilker/ferramentas-para-desenvolvedores-web-59fb</guid>
      <description>&lt;p&gt;Nesse post você conhecerá algumas ferramentas que lhe auxiliaram na construção de suas aplicações.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#imagens"&gt;
  &lt;/a&gt;
  Imagens
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#pexels"&gt;
  &lt;/a&gt;
  &lt;a href="http://pexels.com"&gt;Pexels&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens e vídeos gratuitos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsplash"&gt;
  &lt;/a&gt;
  &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens gratuitas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pixabay"&gt;
  &lt;/a&gt;
  &lt;a href="https://pixabay.com/pt/"&gt;Pixabay&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens gratuitas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stocksnap"&gt;
  &lt;/a&gt;
  &lt;a href="https://stocksnap.io/"&gt;StockSnap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens gratuitas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-images"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freeimages.com/pt"&gt;Free Images&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens gratuitas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#moose"&gt;
  &lt;/a&gt;
  &lt;a href="https://icons8.com/creator"&gt;Moose&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site que permite criar fotos incríveis.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Obs: alguns sites não permitem uso comercial das imagens, ícones ou ilustrações, mas ainda sim podem ser usados para uso pessoal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#ilustra%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Ilustrações
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#illustrations"&gt;
  &lt;/a&gt;
  &lt;a href="https://undraw.co/illustrations"&gt;Illustrations&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Sites com ilustrações para você usar em seus sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#landing-stock"&gt;
  &lt;/a&gt;
  &lt;a href="https://landingstock.com/"&gt;Landing Stock&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Sites com ilustrações para você usar em seus sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawkit"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.drawkit.io/"&gt;Drawkit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com belas ilustrações.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lukasz-adam"&gt;
  &lt;/a&gt;
  &lt;a href="https://lukaszadam.com/illustrations"&gt;Lukasz Adam&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ilustrações incríveis disponibilizadas gratuitamente pelo Lukasz Adam.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#waves-e-blobs"&gt;
  &lt;/a&gt;
  Waves e Blobs
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#get-waves"&gt;
  &lt;/a&gt;
  &lt;a href="https://getwaves.io/"&gt;Get Waves&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site para criar ondas. Aquelas ondas usadas em background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blobmaker"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.blobmaker.app/"&gt;Blobmaker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site para criar blobs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%C3%ADcones"&gt;
  &lt;/a&gt;
  Ícones
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#flaticon"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.flaticon.com/br/"&gt;Flaticon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com ícones vetoriais gratuitos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feather"&gt;
  &lt;/a&gt;
  &lt;a href="https://feathericons.com/"&gt;Feather&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com ícones simples e belos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shape"&gt;
  &lt;/a&gt;
  &lt;a href="https://shape.so/"&gt;Shape&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com ícones simples e editáveis. Uso pessoal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#anima%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Animações
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#animate"&gt;
  &lt;/a&gt;
  &lt;a href="https://animate.style/"&gt;Animate&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site para adicionar animações nas suas telas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animaticons"&gt;
  &lt;/a&gt;
  &lt;a href="https://animaticons.co/"&gt;Animaticons&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Belos e personalizáveis ícones GIF animados&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#paleta-de-cores"&gt;
  &lt;/a&gt;
  Paleta de cores
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#picular"&gt;
  &lt;/a&gt;
  &lt;a href="//picular.co"&gt;Picular&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ajuda a encontrar cores com base no que você procura.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canva"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.canva.com/colors/color-palette-generator/"&gt;Canva&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Gerar paleta de cores e tem a possibilidade de gerar essa paleta a partir de uma logo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tint-and-shade-generator"&gt;
  &lt;/a&gt;
  &lt;a href="https://maketintsandshades.com/"&gt;Tint and Shade Generator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A partir do hexadecimal de uma cor (ou várias) o site gerar cores mais escuras e claras a partir dela. É útil quando se quer saber a cor certa num botão de hover.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contrast-checker"&gt;
  &lt;/a&gt;
  &lt;a href="https://contrastchecker.com/"&gt;Contrast Checker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site para dizer se há contraste suficiente nas cores escolhidas. É útil para saber se as cores tem acessibilidade para pessoas daltônicas. O site vai apontar se passou nos testes ou não.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#inspira%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Inspirações
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#dribbble"&gt;
  &lt;/a&gt;
  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site que reúne trabalho dos melhores designs do mundo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pinterest"&gt;
  &lt;/a&gt;
  &lt;a href="https://br.pinterest.com/"&gt;Pinterest&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Um ótimo site para se inspirar é Pinterest. Lá você pode achar de tudo.&lt;/p&gt;

&lt;p&gt;Espero que tenha ajudado.&lt;/p&gt;

&lt;p&gt;Que o código esteja com você!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tooling</category>
      <category>css</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / == vs ===</title>
      <author>Nikita Kozlov</author>
      <pubDate>Sat, 24 Apr 2021 21:11:43 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-vs-1f58</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-vs-1f58</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
What is the difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt; operators?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
These are both comparison operators, but the &lt;code&gt;===&lt;/code&gt; also compare types of operands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
Javascript and basically typescript are languages with &lt;a href="https://en.wikipedia.org/wiki/Type_conversion#Implicit_type_conversion"&gt;implicit type conversion&lt;/a&gt;. This means they try to convert variables to "proper" types when performing operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 1
let b = '1';
console.log(a+b)
// "11"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when comparing objects it will also try to convert them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 1
let b = '1'
console.log(a == b)
// true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can reference &lt;a href="https://dorey.github.io/JavaScript-Equality-Table/"&gt;this table&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHZbcuYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l1enutrlh4c9yduq4xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHZbcuYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l1enutrlh4c9yduq4xa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life example:&lt;/strong&gt;&lt;br&gt;
It turned out really hard to provide some realistic example of a real-life issue when you use &lt;code&gt;==&lt;/code&gt; instead of &lt;code&gt;===&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can imagine a case when API returns a JSON object where some field can be in 3 states - present, missing, and null.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  ...
  { "username": "admin", roles: ["admin"] },
  { "username": "hacker", roles: null }, // disabled
  { "username": "user" },
  ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It is weird, but I actually had this case myself when API returned &lt;code&gt;null&lt;/code&gt; instead of &lt;code&gt;[]&lt;/code&gt; if object property was empty array 🤷)&lt;/p&gt;

&lt;p&gt;So if you will write a condition using &lt;code&gt;==&lt;/code&gt; there will be a mistake.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// both these cases will be triggered
// since undefined == null is true
if (obj.prop == undefined) { ... }
if (obj.prop == null) { ... }
if (obj.prop) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;// yeah, this example is still a bit artificial, but if you can come up with something different, please share it in the comments 🙏&lt;/p&gt;




&lt;p&gt;Btw I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt; let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>CSS Container Queries</title>
      <author>Andrew Bone</author>
      <pubDate>Sat, 24 Apr 2021 21:07:58 +0000</pubDate>
      <link>https://dev.to/link2twenty/css-container-queries-1205</link>
      <guid>https://dev.to/link2twenty/css-container-queries-1205</guid>
      <description>&lt;p&gt;Something new, and exciting, is coming to CSS and when I say 'is coming' I mean it's not &lt;a href="https://caniuse.com/css-container-queries"&gt;supported&lt;/a&gt; in any browsers yet and the spec is not finalised (at the time of writing). That all being said it's behind a flag in the next version of chrome and I have no doubt will be in all 'modern' browsers in no time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-container-queries"&gt;
  &lt;/a&gt;
  What are container queries
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries"&gt;Container queries&lt;/a&gt; are similar to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries"&gt;media queries&lt;/a&gt; but with one major, and crucial, difference. Media queries query the entire document and are used to modify content depending on those queries. For instance if the document is over 1025px you may want to move content in two columns rather than one. This would look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;column-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1025px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;column-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Container queries follow the same principle but rather than querying the entire document they, instead, query the container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-they-help-developers"&gt;
  &lt;/a&gt;
  How do they help developers
&lt;/h2&gt;

&lt;p&gt;Imagine the following scenario; you've got a contact card you want to display all over your site. In some places it's in the main content but in other places you've decided to display it in an aside. On the same media query the aside could be 250px but the main section could be 700px leading to the cards needing to look different. The solution is easy enough you need to have different classes for the cards with different media queries but there is a better way... Container queries!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-you-use-container-queries"&gt;
  &lt;/a&gt;
  How do you use container queries
&lt;/h1&gt;

&lt;p&gt;To use container queries we have to tell the container (the parent of the element we want to apply the query to) that we care about its dimensions, we do this with the new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/contain"&gt;&lt;code&gt;contain&lt;/code&gt;&lt;/a&gt; property.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;none&lt;/strong&gt;&lt;br&gt;
Indicates the element renders as normal, with no containment applied.&lt;br&gt;
&lt;strong&gt;strict&lt;/strong&gt;&lt;br&gt;
Indicates that all containment rules except style are applied to the element. This is equivalent to contain: size layout paint.&lt;br&gt;
&lt;strong&gt;content&lt;/strong&gt;&lt;br&gt;
Indicates that all containment rules except size and style are applied to the element. This is equivalent to contain: layout paint.&lt;br&gt;
&lt;strong&gt;size&lt;/strong&gt;&lt;br&gt;
Indicates that the element can be sized without the need to examine its descendants' sizes.&lt;br&gt;
&lt;strong&gt;layout&lt;/strong&gt;&lt;br&gt;
Indicates that nothing outside the element may affect its internal layout and vice versa.&lt;br&gt;
&lt;strong&gt;style&lt;/strong&gt;&lt;br&gt;
Indicates that, for properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element. Note that this value is marked "at-risk" in the spec and may not be supported everywhere.&lt;br&gt;
&lt;strong&gt;paint&lt;/strong&gt;&lt;br&gt;
Indicates that descendants of the element don't display outside its bounds. If the containing box is offscreen, the browser does not need to paint its contained elements — these must also be offscreen as they are contained completely by that box. And if a descendant overflows the containing element's bounds, then that descendant will be clipped to the containing element's border-box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation is a little lacking on Mozilla at the moment, which is rare. We want to use the &lt;code&gt;inline-size&lt;/code&gt; property which is described on Mozilla elsewhere as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we use media queries, most of the time we care about the available width (or &lt;code&gt;inline-size&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#practical-examples"&gt;
  &lt;/a&gt;
  Practical examples
&lt;/h2&gt;

&lt;p&gt;Let's take our contact card example from earlier and come up with some code to describe it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"site"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card__profile-image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"profile.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card__profile-information"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Both Names&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Some info about me&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"side-panel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card__profile-image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"profile.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card__profile-information"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Both Names&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Some info about me&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML is quite simplistic but I think it gets the point across we have a contact card, its in two places with, potentially, drastically different widths.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Just some simple css to get it started */&lt;/span&gt;
&lt;span class="nc"&gt;.site&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="nc"&gt;.side-panel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Real css starts here */&lt;/span&gt;
&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="nc"&gt;.side-panel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;inline-size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card__profile-image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.contact-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this CSS we style the &lt;code&gt;contact-card&lt;/code&gt; and then we have a container query that changes the style of the card when we pass a width of 450px. As you can see it's basically the same as a media query but is based on the container.&lt;/p&gt;

&lt;p&gt;Here is how the code will render (hopefully we can try it in more browsers one day soon). Here's the code if for when it actually works, &lt;a href="https://jsfiddle.net/f74depvk/"&gt;jsfiddle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcw9xrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqxjuutfqo2tq5im8lv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcw9xrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqxjuutfqo2tq5im8lv5.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#influence-the-spec"&gt;
  &lt;/a&gt;
  Influence the spec
&lt;/h1&gt;

&lt;p&gt;As I said right at the start the spec isn't yet finalised, if you want to look at what people are suggesting or if you want to make a suggestion yourself there is still time to do it. Head over to the &lt;a href="https://github.com/w3c/csswg-drafts/issues?q=is%3Aissue+is%3Aopen+label%3Acss-contain-3+"&gt;git issues board&lt;/a&gt; and have a look.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h1&gt;

&lt;p&gt;I'm very excited about this, I work mostly with React and I am really looking forward to components being able to change based on their parent's size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QA4b-1qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/AmazingTintedIberianmole-max-1mb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QA4b-1qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/AmazingTintedIberianmole-max-1mb.gif" alt="A very exciting time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well that's it, that's the post. If you have any questions feel free to post them in comments I might not be able to answer them off the top of my head but let's learn together. You can come find me on &lt;a href="https://twitter.com/Link2Twenty?s=09"&gt;Twitter&lt;/a&gt; if you like.&lt;/p&gt;

&lt;p&gt;Thank you so much for reading ❤️🧠🧠❤️🦄🦄🧠❤️🧠&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Escreva testes úteis</title>
      <author>Matheus Marques</author>
      <pubDate>Sat, 24 Apr 2021 21:03:11 +0000</pubDate>
      <link>https://dev.to/matiosfm/escreva-testes-uteis-10e</link>
      <guid>https://dev.to/matiosfm/escreva-testes-uteis-10e</guid>
      <description>&lt;p&gt;Testes de software são constantemente negligenciados e vítimas da falsa sensação de baixa produtividade quando se dá o primeiro passo nesse mundo.&lt;/p&gt;

&lt;p&gt;Muitos projetos com a mentalidade #GoHorse crescem de forma rápida e dinâmica, sem se importar muito com o alicerce e definições. Porém, o galopar desse cavalo imponente e selvagem pode se transformar em um belo de um tropeço, uma queda bem feia e muito esforço desnecessário para recolocá-lo em movimento.&lt;/p&gt;

&lt;p&gt;Testes são o equilíbrio entre o código que se escreve para atingir um comportamento esperado pelas pessoas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fluxograma-de-um-software"&gt;
  &lt;/a&gt;
  Fluxograma de um software
&lt;/h2&gt;

&lt;p&gt;Gosto de pensar que qualquer software é definido pelo fluxograma abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkR7vQKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqnaqszkm13e5ormbnr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkR7vQKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqnaqszkm13e5ormbnr9.png" alt="Fluxograma de um software"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba que o usuário interage com as regras de negócio através da UI. Essa interação gera uma nova atualização no estado, pois a própria regra tinha esse foco ou a busca por dados teve a culpa nessa atualização. Também é possível ver que indiretamente, o usuário busca, constantemente, por dados em nossas aplicações através de um intermediador.&lt;/p&gt;

&lt;p&gt;Para que os testes se comuniquem com esse fluxograma, definem-se alguns pontos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-devem-testar-comportamentos"&gt;
  &lt;/a&gt;
  Testes devem testar comportamentos
&lt;/h2&gt;

&lt;p&gt;O objetivo central de testes de software é garantir a integridade de uma aplicação. Indo um pouco além, &lt;strong&gt;testes devem focar em testar comportamento de pessoas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O comportamento é definido como o conjunto de ação-reação de um sistema dinâmico.&lt;/p&gt;

&lt;p&gt;Portanto, as pessoas não estão interessadas em qual padrão de software foi usado no projeto, muito menos a linguagem. Elas querem interagir com a aplicação da forma mais fluida possível.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Todos os testes devem ser uma combinação de ações que simula a interação de uma pessoa e testar a sua percepção às mudanças sempre que necessário.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#testes-devem-ter-foco"&gt;
  &lt;/a&gt;
  Testes devem ter foco
&lt;/h2&gt;

&lt;p&gt;Aliado ao conceito de comportamento, os testes precisam de foco.&lt;/p&gt;

&lt;p&gt;Não é interessante misturar comportamentos em um mesmo teste, pois em situações onde é necessário dar a manutenção no software, não será fácil mapear qual comportamento está com problema.&lt;/p&gt;

&lt;p&gt;Ter foco também ajuda a entender onde começa e termina cada teste. Dessa forma, tem-se uma base de testes mais enxuta, direta ao ponto e de fácil manutenção.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-devem-ser-previs%C3%ADveis"&gt;
  &lt;/a&gt;
  Testes devem ser previsíveis
&lt;/h2&gt;

&lt;p&gt;Previsibilidade em testes significa que independente de quantas vezes serão executados, dado uma mesma entrada, a mesma saída deverá retornada.&lt;/p&gt;

&lt;p&gt;Testes previsíveis contribuem para uma boa manutenção de todo o ecossistema, ajuda na leitura e entendimento, além de estabelecer marcos bem definidos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-n%C3%A3o-devem-modificar-controles-internos-muitos-menos-manipular-estados"&gt;
  &lt;/a&gt;
  Testes não devem modificar controles internos, muitos menos manipular estados.
&lt;/h2&gt;

&lt;p&gt;É intuitivo pensar que se deve utilizar mocks para controlar as Regras de Negócio do sistema.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gosto de pensar que Mocks é uma ferramenta que permite simular retornos específicos de comportamentos reais implementados.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essa decisão pode ser perigosa, pois é muito fácil chegar em um aglomerado de testes que combinam diversas situações das regras de negócio, mas que no fundo pouco agrega na integridade do software.&lt;/p&gt;

&lt;p&gt;Testar todas essas possibilidades tiram as pessoas do ponto central do porque se escreve testes de software e as regras de negócio tomam esse lugar. Com essa pequena mudança, os comportamentos estão limitados, agora, àquilo que se escreveu, não mais ao que as pessoas conseguem fazer.&lt;/p&gt;

&lt;p&gt;Portanto, as regras de negócio devem sempre apoiar as decisões das pessoas durante uma interação e o foco é, justamente, em testar essas decisões.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-s%C3%B3-devem-manipular-aquilo-que-%C3%A9-retornado-para-a-camada-de-neg%C3%B3cio"&gt;
  &lt;/a&gt;
  Testes só devem manipular aquilo que é retornado para a camada de negócio
&lt;/h2&gt;

&lt;p&gt;Quando é necessário buscar por dados (APIs, Banco de Dados, Cache, etc), sabe-se que as regras de negócio reagem de forma diferente dependendo de como essa informação é retornada.&lt;/p&gt;

&lt;p&gt;Essas reações produzem atualizações de estados e que são apresentados na UI.&lt;/p&gt;

&lt;p&gt;Já foi dito que as pessoas interagem com os dados por meio das regras de negócio. Essa interação pode ser bem sucedida ou não. Além disso, a regra de negócio tem o dever de alterar a UI para um estado de espera até que se termine a busca por esses dados.&lt;/p&gt;

&lt;p&gt;Para que os testes sejam sempre previsíveis é preciso utilizar dos mocks para controlar os possíveis retornos (sucesso ou falha) dos agentes. Dessa forma, é possível testar todas as percepções das pessoas enquanto estão esperando pelos dados, quando são bem sucedidas e podem continuar ou quando ocorre uma falha do sistema.&lt;/p&gt;

&lt;p&gt;Novamente, os testes se limitam àquilo que as pessoas conseguem fazer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-n%C3%A3o-s%C3%A3o-f%C3%A1ceis-de-construir"&gt;
  &lt;/a&gt;
  Testes não são fáceis de construir
&lt;/h2&gt;

&lt;p&gt;Por fim, gostaria de ressaltar que construir bons testes é tão difícil quanto construir software. É preciso determinação e bastante conhecimento para evitar duplicação de código e facilitar a sua manutenção, que é constante.&lt;/p&gt;

&lt;p&gt;É preciso ter responsabilidade ao construir testes, pois são mais linhas de código que requer atenção e que vão agregar em todo o sistema construído.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Encerro essa discussão sobre como escrever bons testes de software e que sejam úteis para o seu negócio. Precisamos ser mais pragmáticos e sempre escrever software com o propósito de atender as pessoas.&lt;/p&gt;

&lt;p&gt;Adoraria escutar a opinião de vocês! Fiquem à vontade para estender esse assunto nos comentários.&lt;/p&gt;

&lt;p&gt;Um abraço e até a próxima :)&lt;/p&gt;

</description>
      <category>testing</category>
    </item>
    <item>
      <title>Quick start with Tailwind CSS</title>
      <author>Rishi Verma</author>
      <pubDate>Sat, 24 Apr 2021 20:37:24 +0000</pubDate>
      <link>https://dev.to/thecoderishi/quick-start-with-tailwind-css-334n</link>
      <guid>https://dev.to/thecoderishi/quick-start-with-tailwind-css-334n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-configuring-tailwind-css-without-using-postcss-plugin"&gt;
  &lt;/a&gt;
  1. Configuring Tailwind CSS without using PostCSS plugin
&lt;/h1&gt;

&lt;h6&gt;
  &lt;a href="#make-a-folder-with-any-name-and-open-the-folder-path-in-the-terminal-you-can-use-vs-code-builtin-terminal"&gt;
  &lt;/a&gt;
  Make a folder with any name and open the folder path in the terminal (You can use VS Code built-in terminal).
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;package.json&lt;/strong&gt; file 📦
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//default options&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install tailwind CSS using npm
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;tailwindcss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install Autoprefixer
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="c1"&gt;//For different browsers support&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a folder 📁 name &lt;strong&gt;public&lt;/strong&gt;, inside public folder create a file 📄 named &lt;strong&gt;index.html&lt;/strong&gt; and create another folder 📁 named &lt;strong&gt;src&lt;/strong&gt; , inside src folder create a file 📄 named &lt;strong&gt;tailwind.css&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#your-file-structure-should-look-like-this"&gt;
  &lt;/a&gt;
  Your file structure should look like this
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── tailwindcss
│   ├── public
│   │   ├── index.html
│   ├── src
│   │   ├── tailwind.css
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;src/tailwind.css&lt;/strong&gt; and copy-paste below code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;/* Write Custom CSS */&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a &lt;strong&gt;build&lt;/strong&gt; scrip which compiles the src/tailwind.css and make actual compiled css inside the public folder, open &lt;strong&gt;package.json&lt;/strong&gt; file and copy-paste below code.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwindcss build ./src/tailwind.css -o ./public/tailwind.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run build script
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#this-will-generate-compiled-css-inside-the-public-folder-and-link-this-css-in-your-indexhtmlnote-dont-modify-compiled-css"&gt;
  &lt;/a&gt;
  This will generate compiled css inside the public folder, and link this css in your &lt;strong&gt;index.html&lt;/strong&gt;(&lt;strong&gt;Note&lt;/strong&gt;: Don't modify compiled css)
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#customize-tailwind-css-config"&gt;
  &lt;/a&gt;
  Customize tailwind CSS Config
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First create tailwind config file with the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;tailwindcss&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#it-will-generate-tailwindconfigjs"&gt;
  &lt;/a&gt;
  It will generate &lt;strong&gt;tailwind.config.js&lt;/strong&gt;
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In &lt;strong&gt;talwind.config.js&lt;/strong&gt; you can define your own custom property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;after changing &lt;strong&gt;talwind.config.js&lt;/strong&gt; again you need to run build script&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compress-size-of-tailwindcssproduction-ready"&gt;
  &lt;/a&gt;
  Compress size of tailwind.css(Production ready)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;strong&gt;NODE_ENV&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;package.json&lt;/strong&gt; file add the following script which reduces the compiled css (It will remove unused classes)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prod&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NODE_ENV=production npx tailwindcss build ./src/tailwind.css -o ./public/tailwind.css“
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;tailwind.config.js&lt;/strong&gt; file add the following line in purg.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public/**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now you can make production ready css, run the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;prod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-configuring-tailwind-css-without-as-postcss-plugin"&gt;
  &lt;/a&gt;
  2. Configuring Tailwind CSS without as PostCSS plugin
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;package.json&lt;/strong&gt; file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//default options&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install tailwind CSS using npm
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;tailwindcss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install Autoprefixer
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="c1"&gt;//For different browsers support&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install PostCSS-CLI Plugin
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a folder name &lt;strong&gt;public&lt;/strong&gt;, inside public folder create a file named &lt;strong&gt;index.html&lt;/strong&gt; and create another folder named &lt;strong&gt;src&lt;/strong&gt; , inside src folder create a file named &lt;strong&gt;tailwind.css&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#your-file-structure-should-look-like-this"&gt;
  &lt;/a&gt;
  Your file structure should look like this
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── tailwindcss
│   ├── public
│   │   ├── index.html
│   ├── src
│   │   ├── tailwind.css
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;src/tailwind.css&lt;/strong&gt; and copy-paste below code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;/* Write Custom CSS */&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a &lt;strong&gt;build&lt;/strong&gt; scrip which compiles the src/tailwind.css and make actual compiled css inside the public folder, open &lt;strong&gt;package.json&lt;/strong&gt; file and copy-paste below code.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss build ./src/tailwind.css -o ./public/tailwind.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run build script
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#this-will-generate-compiled-css-inside-the-public-folder-and-link-this-css-in-your-indexhtmlnote-dont-modify-compiled-css"&gt;
  &lt;/a&gt;
  This will generate compiled css inside the public folder, and link this css in your &lt;strong&gt;index.html&lt;/strong&gt;(&lt;strong&gt;Note&lt;/strong&gt;: Don't modify compiled css)
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#customize-tailwind-css-config"&gt;
  &lt;/a&gt;
  Customize tailwind CSS Config
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First create tailwind config file with the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;tailwindcss&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#it-will-generate-tailwindconfigjs"&gt;
  &lt;/a&gt;
  It will generate &lt;strong&gt;tailwind.config.js&lt;/strong&gt;
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In &lt;strong&gt;talwind.config.js&lt;/strong&gt; you can define your own custom property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;after changing &lt;strong&gt;talwind.config.js&lt;/strong&gt; again you need to run the build script&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compress-size-of-tailwindcssproduction-ready"&gt;
  &lt;/a&gt;
  Compress size of tailwind.css(Production ready)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;strong&gt;NODE_ENV&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;package.json&lt;/strong&gt; file add the following script which reduces the compiled css (It will remove unused classes)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prod&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NODE_ENV=production npx tailwindcss build ./src/tailwind.css -o ./public/tailwind.css“
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;tailwind.config.js&lt;/strong&gt; file add the following line in purg.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public/**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now you can make production ready css, run the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;prod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>👨‍🔬 Why The DOM Causes Negative Enthalpy! - Learning Frontend Deeply - Part 2</title>
      <author>MirAli Mobasheri</author>
      <pubDate>Sat, 24 Apr 2021 20:23:11 +0000</pubDate>
      <link>https://dev.to/alimobasheri/why-the-dom-causes-negative-enthalpy-learning-frontend-deeply-part-2-1k8n</link>
      <guid>https://dev.to/alimobasheri/why-the-dom-causes-negative-enthalpy-learning-frontend-deeply-part-2-1k8n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-should-you-care-about-the-dom-and-the-negative-enthalpy"&gt;
  &lt;/a&gt;
  Why Should You Care About The DOM And The Negative Enthalpy?
&lt;/h1&gt;

&lt;p&gt;In the first part of this series, we learned that &lt;code&gt;HTML&lt;/code&gt; is a &lt;code&gt;Markup Language&lt;/code&gt; destined to create documents. We now know that this document is much like a paper one. We can use different elements and layout systems in HTML to shape our ideal document layout.&lt;br&gt;
But still, there's a question. If it's only about documents, then humans have been able to create them thousands of years ago. Documents can be carved on stone, painted on papyruses, and written on paper.&lt;br&gt;
So while &lt;code&gt;HTTP&lt;/code&gt; facilitates the document's sharing around the world, there's one important thing that a webpage needs to be capable of to ultimately become superior to a simple document. &lt;/p&gt;

&lt;p&gt;And it is the ability to update data in real-time, in response to user interactions and different events. This feature makes documents interactive and pushes the limit of the traditional documents which could never be edited or updated. And especially this is one of the main skills every frontend developer should acquire.&lt;/p&gt;

&lt;p&gt;Throughout this article, we are going to learn about the &lt;code&gt;Document Object Model&lt;/code&gt; abbreviated as the &lt;code&gt;DOM&lt;/code&gt;. In the last part, we learned about the &lt;strong&gt;Document&lt;/strong&gt;, now we'll try to figure out what an &lt;strong&gt;Object&lt;/strong&gt; is and how the &lt;code&gt;DOM&lt;/code&gt; implements the &lt;strong&gt;Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But we're not going down a straightforward path. We're going to learn about some basic theories of computer programming. This includes variables, objects, collections, compilers and etc. This is because I want to show you how in the end all of these theories shape the internal functionalities of a web frontend application.&lt;br&gt;
This is somewhat like how we're introduced to Christopher Nolan's Tenet. It's going to show you some theories and in the end, you are going to face it all in real action. Then let's dive deeper!&lt;/p&gt;

&lt;p&gt;First questions first...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-object"&gt;
  &lt;/a&gt;
  🏍️ What Is An Object?
&lt;/h2&gt;

&lt;p&gt;While a motorcycle has two wheels, a car holds four. Both are &lt;strong&gt;objects&lt;/strong&gt;. Each with its traits. These traits could vary in numerous ways.&lt;/p&gt;

&lt;p&gt;The comparison we made identifies the difference in the count of common property in two distinct objects.&lt;br&gt;
A contrasting case is the observation of a hen and a motorcycle. Both can move. And while the hen utilizes its legs for this purpose, the other uses its wheels. The movement &lt;strong&gt;action&lt;/strong&gt; is possible for both of them, but they do so using quite different &lt;strong&gt;tools&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;❗ In terms of programming, we can express the actions as &lt;strong&gt;Methods&lt;/strong&gt; and the tools as &lt;strong&gt;Properties&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, the main element in Object Definition is that &lt;strong&gt;a set of traits shape the object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By knowing what an object definition is, let's move on to how a document is defined by it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-object-model"&gt;
  &lt;/a&gt;
  🌴 What is an object model?
&lt;/h2&gt;

&lt;p&gt;C is a programming language. So is C++. Both are known as semi-low-level languages. This means you'll need to write thousands of lines of code to make a simple program work. But in exchange, their programs run at higher speeds. Because by writing code in a low-level language the system needs less translation of your code to understand what you're trying to assemble.&lt;/p&gt;

&lt;p&gt;But there is a major difference between the two languages we talked about earlier. C++ is an object-oriented version of C. What does this mean?&lt;br&gt;
This means that we can define objects in C++ programs which possess their own traits and actions. &lt;/p&gt;

&lt;p&gt;Let's define object orientation in smaller chunks. That'll make it easier for you to grasp the idea if you don't already know about it. &lt;/p&gt;

&lt;p&gt;First, let's begin with a simple thing; Value. That's what every program is about!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hey-pc-take-this-2"&gt;
  &lt;/a&gt;
  2️⃣ Hey PC, Take This 2!
&lt;/h3&gt;

&lt;p&gt;In a program, every value is stored in a part of the memory. This value is identified by a reference. A reference is a specific number that addresses a location in the memory that holds a specific value.&lt;/p&gt;

&lt;p&gt;This referencing can be suitable for performing actions like computing. For example, if you want to calculate the sum of 2 and 3, you have to store these values in the system and then give the system the program by which it should add these two numbers. &lt;br&gt;
A reference to the value 2 could be a number like 2452123 and a reference to the value 3 could be another number like 7892392. &lt;/p&gt;

&lt;p&gt;The system can manage these references easily. But it would be hard for a human to work with them. We'll easily forget which reference points to which value. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#call-my-2-ey"&gt;
  &lt;/a&gt;
  🤙 Call My 2, Ey!
&lt;/h3&gt;

&lt;p&gt;A variable is simply a name we give the reference to a value. In the last paragraph, we said that in an exemplary system a reference to number 2 is 2452123. &lt;br&gt;
Now, what if we told the system that we want this reference to be called &lt;code&gt;a&lt;/code&gt;; so that every time we had to point to this number we simply give its name and the system retrieves the value for us?&lt;/p&gt;

&lt;p&gt;
  How variables resemble humans' memory. (Click to learn more.)
  &lt;p&gt;This behavior is close to how we humans store different data in our minds. For example, when we want to refer to a long fruit with a yellow cover, we say banana. The value was retrieved!&lt;/p&gt;

&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hey-pc-repeat-after-me-ey-equals-2"&gt;
  &lt;/a&gt;
  🎙️ Hey PC, Repeat After Me: Ey equals 2!
&lt;/h3&gt;

&lt;p&gt;Fortunately, most of the programming languages manage this for us. &lt;br&gt;
Here's how we define a variable in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code block, we've declared two values, stored them in memory, and given them a custom name for their references. Thus if we wanted to add these numbers we simply tell the system: &lt;code&gt;add a and b&lt;/code&gt;.&lt;br&gt;
In JavaScript it's written like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  What happened in this code block?(click to learn more)
  &lt;p&gt;Here, in a single line, we've performed three actions. First, we've retrieved the two values 2 and 3 from the memory, by calling their names. Then, we've added these two numbers which result in a new value, 5. Next, the new value is stored in the memory and its reference is given a name; &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;

&lt;/p&gt;

&lt;p&gt;Well, we gave the references a name. But what does it have to do with Object-Orientation?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-thing-or-the-object"&gt;
  &lt;/a&gt;
  ⛏️ The Thing, or The Object?
&lt;/h3&gt;

&lt;p&gt;So far, we've only defined simple variables. These may be the basics of programming, but they are insufficient for a more advanced program.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Metal is one of the most useful materials in construction but by giving a fair look at the world around you, it's easy to conclude that buildings aren't just made of metals. They're assembled of glasses, metals, concrete, etc. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same observance applies to a program. It's never made of single values. But rather a collection of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#person-1-person-2-person-3"&gt;
  &lt;/a&gt;
  👨‍👩‍👧‍👦 [Person 1, Person 2, Person 3]
&lt;/h3&gt;

&lt;p&gt;You know people by their names, phone numbers, looks, jobs, and much more. Perhaps you know a lot of people. Hundreds of names could be familiar to you. &lt;/p&gt;

&lt;p&gt;Indeed you have got a collection of information in your memory. A collection of names, or a collection of different brands. All in all, collections are the main way of information storage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What makes collections suitable for this purpose is their flexibility and simplicity in integration. You can easily search, sort, filter, or manipulate a collection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#data-structures"&gt;
  &lt;/a&gt;
  📊 Data Structures
&lt;/h3&gt;

&lt;p&gt;Probably, algorithms are familiar to you. If not, you can think of the following text as an algorithm:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Go to the kitchen. Search the cabinets for the red pepper can. If found, swallow the whole can's content. If not, go to the freezer. Take out all the ices in it and swallow them one by one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, an algorithm is a set of step-to-step commands. Computer programs are instructed using these algorithms.&lt;/p&gt;

&lt;p&gt;Let's think about the sum program which we previously wrote using the variables. Its algorithm is straightforward. Take the first number and add it to the second one. Store the result in a new memory location.&lt;/p&gt;

&lt;p&gt;But is there a collection too?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  🔢 Arrays
&lt;/h3&gt;

&lt;p&gt;Sometimes you need to store different values as a group. Like a list of different versions of a sentence. You can store each value in a separate variable but that's not the ideal way. Because for instance, if you are required to iterate over the list and find a specific version, you'll have to check each value manually to find out whether it's the wanted value or not.&lt;/p&gt;

&lt;p&gt;Arrays come to help.&lt;br&gt;
An array is indeed a list of memory addresses. Of course, these memory addresses refer to values. But its difference with a normal reference is that it can be indexed. &lt;/p&gt;

&lt;p&gt;
  What is indexing? And how does an array work? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simply it's like when you are looking at a list of different versions of a sentence and you ask your colleague about which version he likes the most and he responds: 'The &lt;strong&gt;third&lt;/strong&gt; one!'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So, the keyword here is &lt;code&gt;third&lt;/code&gt;.&lt;br&gt;
Now if we wanted to represent the version history list in a JavaScript array, it would look like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;versions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A sentence.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beautifully written sentence.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Da Funny Sendenze!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;To access the second sentence and store it in a new variable the following line of JavaScript suffices:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;theDesiredSentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;versions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In JavaScript arrays are indexed from 0 which means that the first element's index is 0 and the nth element's index is &lt;code&gt;n-1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;The array is a very simple collection. But remember when we talked about the calculation program. It didn't consist of any arrays. Perhaps we could use an array of numbers and write a program to calculate the sum of all of the numbers in the array. But that's not what we're trying to do right now.&lt;/p&gt;

&lt;p&gt;The question was whether, in that simple program, a collection existed or not. Now, none of the values were collections, but in reality, the whole program is a collection.&lt;/p&gt;

&lt;p&gt;Why is that?🧐&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#program-compilation"&gt;
  &lt;/a&gt;
  🔁 Program Compilation
&lt;/h3&gt;

&lt;p&gt;Every program written in a language has to be compiled into machine language to act as fast as possible. The machine language is the most direct one, but having the lowest level among the programming languages, it's not possible for programmers to easily interact with it.&lt;br&gt;
The nerds' solution to this problem has been the development of higher-level programming languages. Yes, even C++ has a higher level in comparison to that of Assembly.&lt;/p&gt;

&lt;p&gt;Still, there's a matter to reflect upon. If communication with machines is difficult then how comes the compilers do it and turn huge chunks of code into machine-readable ones?&lt;/p&gt;

&lt;p&gt;To understand the mechanism you can think of yourself trying to speak a foreign language, how will you manage it? &lt;br&gt;
First, you will create mental models.&lt;/p&gt;

&lt;p&gt;What is the mental model? It's the concept or the meaning of what you are trying to translate.&lt;/p&gt;

&lt;p&gt;How is a mental model designed? Suppose you want to tell a foreigner that his face is burning. What is the concept behind this sentence? A face that belongs to that person is melting due to contact with heat? &lt;br&gt;
But what is the context? Perhaps you and the other person are trapped inside a burning house and you are screaming at him to warn him that his face is burning. Or maybe you are pushing his face into boiling water and joyously shouting: "Ha! Ha! Ha! Your face is burning!"&lt;/p&gt;

&lt;p&gt;Do you see? Different contexts. Different tones. Different sentence structures.&lt;/p&gt;

&lt;p&gt;Now how are these related to a compiler's task? Well first of all it gathers every value in your program. These values are like the meanings of every single word. Next, it tries to shape a model of your values. This model is shaped from the different scopes inside a program code. &lt;br&gt;
Scopes are different blocks of code inside a program. These blocks contain standalone logics, which can perform independently of other parts of the code. Sure most of the time the blocks will use variables defined in other scopes or passed as arguments.&lt;/p&gt;

&lt;p&gt;The compiler will look for the various blocks present in a code to shape its model. These blocks will help in maintaining the levels of the model. Previously we learned about arrays which are the most common forms of collections, but the ones we spoke about were only one-dimensional. However, in cases in which we need to specify a collection of groups of values, we can simply nest arrays inside each other.&lt;/p&gt;

&lt;p&gt;In JavaScript a nested array might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nestedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code example, the &lt;code&gt;nestedArray&lt;/code&gt; variable could be a model of various values organized in different blocks. Like &lt;code&gt;block 0&lt;/code&gt; and &lt;code&gt;block 1&lt;/code&gt; and so on. This way the compiler will know what block each value belongs to. So if somewhere in your code you try to call a value that isn't available in the corresponding block, the compiler will throw an error.&lt;/p&gt;

&lt;p&gt;A nested array might be a good example to illustrate a collection model, but not perfect for such a case as a compiler's model. Because arrays are just a group of values in a specific order.&lt;/p&gt;

&lt;p&gt;Thus, the programmers have designed various types of data structures that can be used to implement collections in a useful way. Examples of these data structures include linked lists, queues, stacks, graphs, and hash tables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-data-structure-does-a-compiler-use"&gt;
  &lt;/a&gt;
  What Data Structure Does A Compiler Use?
&lt;/h3&gt;

&lt;p&gt;Compilers mainly use &lt;code&gt;Symbol Tables&lt;/code&gt; as their primary data structure. &lt;br&gt;
A &lt;code&gt;Symbol Table&lt;/code&gt; is a symbolized collection of data. Don't panic if this doesn't make sense to you, we're going to learn it in more detail.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-does-symbolized-mean"&gt;
  &lt;/a&gt;
  ⚛️ What does symbolized mean?
&lt;/h4&gt;

&lt;p&gt;Remember when we talked about variables? &lt;br&gt;
We stored a value in the memory and then gave it a name. So each variable in a program is made of a group of information that includes: &lt;code&gt;memory reference&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;attribute&lt;/code&gt;.&lt;br&gt;
Using these properties, the compiler can store what information it requires about a particular variable in a single symbol and then implement these symbols into a bigger model which represents the code blocks and scopes, using a data structure.&lt;/p&gt;

&lt;p&gt;A representation of &lt;code&gt;Symbol Tables&lt;/code&gt; could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;symbol&lt;/span&gt; &lt;span class="err"&gt;name,&lt;/span&gt; &lt;span class="err"&gt;type,&lt;/span&gt; &lt;span class="err"&gt;attribute&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#details-what-are-the-type-and-the-attribute-click-to-learn-more"&gt;
  &lt;/a&gt;
  
  What are the type and the attribute? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;JavaScript is a dynamically typed language, which means that you don't have to strictly define a variable's type. But under the hood, each value owns a type. There are several built-in types like objects, strings, numbers, etc.&lt;/li&gt;
&lt;li&gt;These types declare the intrinsic behavior of the variables. So in a &lt;code&gt;Symbol Table&lt;/code&gt;, each value holds a type declaration.
The attribute is another unpopular term in JS. In languages like Java, keywords such as &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; exist that can be used in a variable declaration to indicate in what context the variable can be used. &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are the two attributes that can be used in JS. For instance, using the &lt;code&gt;const&lt;/code&gt; attribute clarifies for the compiler that the variable can't be assigned a new value after its initial declaration.&lt;/li&gt;
&lt;/ul&gt;




&lt;/h4&gt;
&lt;p&gt;What data structure a compiler uses for shaping the code blocks, can vary between &lt;code&gt;Linear Lists&lt;/code&gt;, &lt;code&gt;Binary Search Tree&lt;/code&gt;, and &lt;code&gt;Hash Tables&lt;/code&gt; based on the compiler's architect.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#is-a-data-structure-enough-for-a-compiler-to-get-its-job-done"&gt;
  &lt;/a&gt;
  💼 Is a data structure enough for a compiler to get its job done?
&lt;/h4&gt;

&lt;p&gt;The short answer is no. &lt;br&gt;
The long answer is that a data structure is only a model that makes data available to you. It exposes no methods to work with the data. It's barely a skeleton of data. &lt;br&gt;
A skeleton doesn't move by itself. It can take no action. A body needs muscles to be able to handle its skeleton for good use.&lt;br&gt;
Hence the compiler uses its own built-in methods to work with the data that is exposed to it through the symbols.&lt;/p&gt;

&lt;p&gt;
  How is this data structure is similar to a database? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;Each symbol is an &lt;code&gt;entry&lt;/code&gt; and each code block is called a &lt;code&gt;block&lt;/code&gt;. You could think of a symbol table as a database. Indeed I can relate to this personally since I'm currently working on the development of a web-based database management application for the place I work at.&lt;/li&gt;
&lt;li&gt;Each cell in a database table is like an &lt;code&gt;entry&lt;/code&gt;. A cell can be a text, a number, a date, and many more fields. Each of these fields has its own type and attributes.
Each table can also be divided into different phases with each phase having its own rows of entries.&lt;/li&gt;
&lt;li&gt;But a database management application isn't made up of just entries and phases. It's also about the ordering of data, its aggregation, editing, inserting, removing, validating and etc.&lt;/li&gt;
&lt;li&gt;Each of these functionalities can also be generalized to how a compiler commonly behaves with a symbol table.
&lt;/li&gt;
&lt;/ul&gt;



&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  ⁉️ What now?
&lt;/h3&gt;

&lt;p&gt;This was a long read, but not a useless one. We have learned about the program's compilation progress, and we've come to acknowledge what a data structure is and how an object is defined.&lt;br&gt;
Now, it's time to get back on track and learn how a Document's Object Model is implemented.&lt;/p&gt;

&lt;p&gt;But first, let's take a few seconds and think about the answer to a fundamental question of the frontend area.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#is-html-a-data-structure-or-is-it-an-object"&gt;
  &lt;/a&gt;
  🤷‍♂️ Is HTML a Data Structure or is it an Object?
&lt;/h4&gt;

&lt;p&gt;It's tempting to say that HTML is an &lt;code&gt;object&lt;/code&gt; since it possesses traits like a &lt;code&gt;body&lt;/code&gt; or a &lt;code&gt;head&lt;/code&gt; or a &lt;code&gt;title&lt;/code&gt;. These may sound like traits being defined for an object.&lt;br&gt;
But they're not and HTML is definitely not an &lt;code&gt;Object&lt;/code&gt;. It's a &lt;code&gt;Data Structure&lt;/code&gt;. All that HTML does is expose data. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Indeed you the developer who writes the HTML are exposing this data to the browser. Using the document structure which we talked about in the last part, you were doing the compiler's job. &lt;br&gt;
Oh, yes! Perhaps you have written several HTML documents, or maybe you're an experienced one, and using the HTML markup has been a daily job for you. But you have never thought that you were indeed writing a pre-compile file. That you were doing the programming process with a negative enthalpy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds crazy and sounds like what Christopher Nolan introduced in his 2020 movie; Tenet.&lt;/p&gt;

&lt;p&gt;You have come a long way to reach this point, and perhaps you are tired or you think this article will be useless. Yeah, I know! This idea is turning around your head that I've been mocking you all the time. That compilers and data structures and the Object Orientation have got nothing to do with a simple HTML.&lt;br&gt;
But be patient my dear reader. From now things only get better. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkTC8oAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv5tsk8fdz7dc6vxh75w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkTC8oAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv5tsk8fdz7dc6vxh75w.gif" alt="A fight scene in Tenet"&gt;&lt;/a&gt;&lt;br&gt;
After all, what do you expect from a Nolanish idea?😎&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SPOILER FREE&lt;/strong&gt;: I'm not going to spoil anything from the movie's plot. The negative enthalpy theory is something you learn very early in the movie. So enjoy the article!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#but-how-is-the-negative-enthalpy-happening"&gt;
  &lt;/a&gt;
  🔀 But how is the negative enthalpy happening?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A chemical reaction with a negative enthalpy is one that loses energy throughout the process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This might sound too theoric but we can interpret it in our subject as such:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we code a program and the compiler turns it into an executable file, we're keeping energy by doing less work by ourselves. The compiler is the one that handles the hassle of translating our code to machine-readable programs. Now, when we write HTML, we're losing energy. Because we're doing a part of the compiler's job which is creating a &lt;code&gt;data structure&lt;/code&gt;. We're doing more job to model the fine Document Structure for our purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But the &lt;code&gt;Data Structure&lt;/code&gt; isn't the only thing that the compiler creates. There was actually a need for different methods to be able to work with this data. &lt;br&gt;
This is where the &lt;code&gt;Document Object Model&lt;/code&gt; comes into play. And to no surprise, this time we're going to work with &lt;code&gt;objects&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-are-my-methods"&gt;
  &lt;/a&gt;
  🗜️ Where are my methods?
&lt;/h3&gt;

&lt;p&gt;So, you give the browser all the data necessary in your document, organized into nested structures, according to your desired layout, and expect the magic to happen. &lt;br&gt;
But that's not what every application is about. Is it? Nowadays web applications are more than just scientific documents. They're about &lt;code&gt;Interactive Interfaces&lt;/code&gt; which respond to user interaction. &lt;/p&gt;

&lt;p&gt;Documents get updated, changed, inspected, animated, styled, and manipulated in real-time. If you think of the &lt;code&gt;HTML Document&lt;/code&gt; as the &lt;code&gt;Symbol Table&lt;/code&gt; then by using the &lt;code&gt;DOM Methods&lt;/code&gt; to work with this data structure and to change it, you are doing the compiler's job. &lt;br&gt;
Because you are managing the available data structures and methods to output your desired program. &lt;/p&gt;

&lt;p&gt;But there is one important difference. The compiler compiles once, you do it many times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h2&gt;

&lt;p&gt;Originally this post was intended to have full coverage of all the methods that the &lt;code&gt;DOM&lt;/code&gt; avails us with. But tonight I decided that writing such a long article might not be a wise move and might result in the dear readers' attention loss.&lt;/p&gt;

&lt;p&gt;So our long journey comes to a pause with the knowledge that the management of a frontend application is like a real-time compilation. In the next part, we'll learn about the &lt;code&gt;DOM&lt;/code&gt;'s methods and compare each of them with what a compiler does.&lt;/p&gt;

&lt;p&gt;The next part is more like an action ride through how updating a document's different parts, results in different states, and perhaps Tenets!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdWo2J7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zid3nf9xdcmn07tleib.GIF" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdWo2J7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zid3nf9xdcmn07tleib.GIF" alt="Tenet gif. Pattinson: What the hell happened here? Washington: It hasn't happened yet."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I expect the next part to be released faster than this one. Since most of it is already written!😁&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End!
&lt;/h3&gt;

&lt;p&gt;And don't forget to give me feedback. I'm trying to bring new ideas into this series and like everyone else my ideas have their own flaws too. So I would be glad to hear what you think!😅&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
